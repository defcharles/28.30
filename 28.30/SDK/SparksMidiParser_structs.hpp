#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksMidiParser

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct SparksMidiParser.ParsedMidiEventBase
// 0x0008 (0x0008 - 0x0000)
struct FParsedMidiEventBase
{
public:
	int32                                         AtMidiTick;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndsAtMidiTick;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParsedMidiEventBase) == 0x000004, "Wrong alignment on FParsedMidiEventBase");
static_assert(sizeof(FParsedMidiEventBase) == 0x000008, "Wrong size on FParsedMidiEventBase");
static_assert(offsetof(FParsedMidiEventBase, AtMidiTick) == 0x000000, "Member 'FParsedMidiEventBase::AtMidiTick' has a wrong offset!");
static_assert(offsetof(FParsedMidiEventBase, EndsAtMidiTick) == 0x000004, "Member 'FParsedMidiEventBase::EndsAtMidiTick' has a wrong offset!");

// ScriptStruct SparksMidiParser.ParsedMidiTextEvent
// 0x0020 (0x0028 - 0x0008)
struct FParsedMidiTextEvent final : public FParsedMidiEventBase
{
public:
	class FString                                 EventString;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EventPayload;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParsedMidiTextEvent) == 0x000008, "Wrong alignment on FParsedMidiTextEvent");
static_assert(sizeof(FParsedMidiTextEvent) == 0x000028, "Wrong size on FParsedMidiTextEvent");
static_assert(offsetof(FParsedMidiTextEvent, EventString) == 0x000008, "Member 'FParsedMidiTextEvent::EventString' has a wrong offset!");
static_assert(offsetof(FParsedMidiTextEvent, EventPayload) == 0x000018, "Member 'FParsedMidiTextEvent::EventPayload' has a wrong offset!");

// ScriptStruct SparksMidiParser.MidiEventListenerParams
// 0x0004 (0x0004 - 0x0000)
struct FMidiEventListenerParams
{
public:
	class FName                                   TrackName;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMidiEventListenerParams) == 0x000004, "Wrong alignment on FMidiEventListenerParams");
static_assert(sizeof(FMidiEventListenerParams) == 0x000004, "Wrong size on FMidiEventListenerParams");
static_assert(offsetof(FMidiEventListenerParams, TrackName) == 0x000000, "Member 'FMidiEventListenerParams::TrackName' has a wrong offset!");

// ScriptStruct SparksMidiParser.MidiNoteEvent_DelayPool
// 0x000C (0x000C - 0x0000)
struct FMidiNoteEvent_DelayPool final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSecondsBefore;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSecondsBefore;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMidiNoteEvent_DelayPool) == 0x000004, "Wrong alignment on FMidiNoteEvent_DelayPool");
static_assert(sizeof(FMidiNoteEvent_DelayPool) == 0x00000C, "Wrong size on FMidiNoteEvent_DelayPool");
static_assert(offsetof(FMidiNoteEvent_DelayPool, ID) == 0x000000, "Member 'FMidiNoteEvent_DelayPool::ID' has a wrong offset!");
static_assert(offsetof(FMidiNoteEvent_DelayPool, MaxSecondsBefore) == 0x000004, "Member 'FMidiNoteEvent_DelayPool::MaxSecondsBefore' has a wrong offset!");
static_assert(offsetof(FMidiNoteEvent_DelayPool, MinSecondsBefore) == 0x000008, "Member 'FMidiNoteEvent_DelayPool::MinSecondsBefore' has a wrong offset!");

// ScriptStruct SparksMidiParser.MidiNotePoolEventListenerParams
// 0x0034 (0x0038 - 0x0004)
struct FMidiNotePoolEventListenerParams final : public FMidiEventListenerParams
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 EventNotes;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 WatchNotes;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMidiNoteEvent_DelayPool>       DelayPools;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMidiNotePoolEventListenerParams) == 0x000008, "Wrong alignment on FMidiNotePoolEventListenerParams");
static_assert(sizeof(FMidiNotePoolEventListenerParams) == 0x000038, "Wrong size on FMidiNotePoolEventListenerParams");
static_assert(offsetof(FMidiNotePoolEventListenerParams, EventNotes) == 0x000008, "Member 'FMidiNotePoolEventListenerParams::EventNotes' has a wrong offset!");
static_assert(offsetof(FMidiNotePoolEventListenerParams, WatchNotes) == 0x000018, "Member 'FMidiNotePoolEventListenerParams::WatchNotes' has a wrong offset!");
static_assert(offsetof(FMidiNotePoolEventListenerParams, DelayPools) == 0x000028, "Member 'FMidiNotePoolEventListenerParams::DelayPools' has a wrong offset!");

// ScriptStruct SparksMidiParser.MidiNoteEventListenerParams
// 0x001C (0x0020 - 0x0004)
struct FMidiNoteEventListenerParams final : public FMidiEventListenerParams
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 EventNotes;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SecondsBeforeStartTick;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsBeforeEndTick;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMidiNoteEventListenerParams) == 0x000008, "Wrong alignment on FMidiNoteEventListenerParams");
static_assert(sizeof(FMidiNoteEventListenerParams) == 0x000020, "Wrong size on FMidiNoteEventListenerParams");
static_assert(offsetof(FMidiNoteEventListenerParams, EventNotes) == 0x000008, "Member 'FMidiNoteEventListenerParams::EventNotes' has a wrong offset!");
static_assert(offsetof(FMidiNoteEventListenerParams, SecondsBeforeStartTick) == 0x000018, "Member 'FMidiNoteEventListenerParams::SecondsBeforeStartTick' has a wrong offset!");
static_assert(offsetof(FMidiNoteEventListenerParams, SecondsBeforeEndTick) == 0x00001C, "Member 'FMidiNoteEventListenerParams::SecondsBeforeEndTick' has a wrong offset!");

// ScriptStruct SparksMidiParser.ParsedMidiNoteEvent
// 0x0004 (0x000C - 0x0008)
struct FParsedMidiNoteEvent final : public FParsedMidiEventBase
{
public:
	uint8                                         EventNote;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FParsedMidiNoteEvent) == 0x000004, "Wrong alignment on FParsedMidiNoteEvent");
static_assert(sizeof(FParsedMidiNoteEvent) == 0x00000C, "Wrong size on FParsedMidiNoteEvent");
static_assert(offsetof(FParsedMidiNoteEvent, EventNote) == 0x000008, "Member 'FParsedMidiNoteEvent::EventNote' has a wrong offset!");

// ScriptStruct SparksMidiParser.MidiTextEventListenerParams
// 0x001C (0x0020 - 0x0004)
struct FMidiTextEventListenerParams final : public FMidiEventListenerParams
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         EventStrings;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SecondsBeforeStartTick;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMidiTextEventListenerParams) == 0x000008, "Wrong alignment on FMidiTextEventListenerParams");
static_assert(sizeof(FMidiTextEventListenerParams) == 0x000020, "Wrong size on FMidiTextEventListenerParams");
static_assert(offsetof(FMidiTextEventListenerParams, EventStrings) == 0x000008, "Member 'FMidiTextEventListenerParams::EventStrings' has a wrong offset!");
static_assert(offsetof(FMidiTextEventListenerParams, SecondsBeforeStartTick) == 0x000018, "Member 'FMidiTextEventListenerParams::SecondsBeforeStartTick' has a wrong offset!");

// ScriptStruct SparksMidiParser.MidiEventListenerHandle
// 0x0010 (0x0010 - 0x0000)
struct FMidiEventListenerHandle final
{
public:
	uint64                                        ID;                                                // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UObject>                 WeakDriver;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMidiEventListenerHandle) == 0x000008, "Wrong alignment on FMidiEventListenerHandle");
static_assert(sizeof(FMidiEventListenerHandle) == 0x000010, "Wrong size on FMidiEventListenerHandle");
static_assert(offsetof(FMidiEventListenerHandle, ID) == 0x000000, "Member 'FMidiEventListenerHandle::ID' has a wrong offset!");
static_assert(offsetof(FMidiEventListenerHandle, WeakDriver) == 0x000008, "Member 'FMidiEventListenerHandle::WeakDriver' has a wrong offset!");

// ScriptStruct SparksMidiParser.MidiPlaybackState
// 0x000C (0x000C - 0x0000)
struct FMidiPlaybackState final
{
public:
	int32                                         CurrentTimeTick;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTimeSeconds;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlaybackEnded;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMidiPlaybackState) == 0x000004, "Wrong alignment on FMidiPlaybackState");
static_assert(sizeof(FMidiPlaybackState) == 0x00000C, "Wrong size on FMidiPlaybackState");
static_assert(offsetof(FMidiPlaybackState, CurrentTimeTick) == 0x000000, "Member 'FMidiPlaybackState::CurrentTimeTick' has a wrong offset!");
static_assert(offsetof(FMidiPlaybackState, CurrentTimeSeconds) == 0x000004, "Member 'FMidiPlaybackState::CurrentTimeSeconds' has a wrong offset!");
static_assert(offsetof(FMidiPlaybackState, bIsPlaybackEnded) == 0x000008, "Member 'FMidiPlaybackState::bIsPlaybackEnded' has a wrong offset!");

// ScriptStruct SparksMidiParser.MidiNoteEventList
// 0x0010 (0x0010 - 0x0000)
struct FMidiNoteEventList final
{
public:
	TArray<struct FParsedMidiNoteEvent>           Events;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMidiNoteEventList) == 0x000008, "Wrong alignment on FMidiNoteEventList");
static_assert(sizeof(FMidiNoteEventList) == 0x000010, "Wrong size on FMidiNoteEventList");
static_assert(offsetof(FMidiNoteEventList, Events) == 0x000000, "Member 'FMidiNoteEventList::Events' has a wrong offset!");

// ScriptStruct SparksMidiParser.MidiTextEventList
// 0x0010 (0x0010 - 0x0000)
struct FMidiTextEventList final
{
public:
	TArray<struct FParsedMidiTextEvent>           Events;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMidiTextEventList) == 0x000008, "Wrong alignment on FMidiTextEventList");
static_assert(sizeof(FMidiTextEventList) == 0x000010, "Wrong size on FMidiTextEventList");
static_assert(offsetof(FMidiTextEventList, Events) == 0x000000, "Member 'FMidiTextEventList::Events' has a wrong offset!");

}

