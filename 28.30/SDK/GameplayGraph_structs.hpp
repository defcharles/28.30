#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayGraph

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GameplayGraph.EGraphElementType
// NumValues: 0x0004
enum class EGraphElementType : uint32
{
	Node                                     = 0,
	Edge                                     = 1,
	Island                                   = 2,
	Unknown                                  = 3,
};

// Enum GameplayGraph.EGraphIslandOperations
// NumValues: 0x0006
enum class EGraphIslandOperations : uint32
{
	None                                     = 0,
	Add                                      = 1,
	Split                                    = 2,
	Merge                                    = 4,
	Destroy                                  = 8,
	All                                      = 15,
};

// ScriptStruct GameplayGraph.GraphProperties
// 0x0001 (0x0001 - 0x0000)
struct FGraphProperties final
{
public:
	bool                                          bGenerateIslands;                                  // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGraphProperties) == 0x000001, "Wrong alignment on FGraphProperties");
static_assert(sizeof(FGraphProperties) == 0x000001, "Wrong size on FGraphProperties");
static_assert(offsetof(FGraphProperties, bGenerateIslands) == 0x000000, "Member 'FGraphProperties::bGenerateIslands' has a wrong offset!");

// ScriptStruct GameplayGraph.GraphUniqueIndex
// 0x0014 (0x0014 - 0x0000)
struct FGraphUniqueIndex final
{
public:
	struct FGuid                                  UniqueIndex;                                       // 0x0000(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsTemporary;                                      // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGraphUniqueIndex) == 0x000004, "Wrong alignment on FGraphUniqueIndex");
static_assert(sizeof(FGraphUniqueIndex) == 0x000014, "Wrong size on FGraphUniqueIndex");
static_assert(offsetof(FGraphUniqueIndex, UniqueIndex) == 0x000000, "Member 'FGraphUniqueIndex::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FGraphUniqueIndex, bIsTemporary) == 0x000010, "Member 'FGraphUniqueIndex::bIsTemporary' has a wrong offset!");

// ScriptStruct GameplayGraph.GraphHandle
// 0x001C (0x001C - 0x0000)
struct FGraphHandle
{
public:
	struct FGraphUniqueIndex                      UniqueIndex;                                       // 0x0000(0x0014)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGraphElement>           Element;                                           // 0x0014(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGraphHandle) == 0x000004, "Wrong alignment on FGraphHandle");
static_assert(sizeof(FGraphHandle) == 0x00001C, "Wrong size on FGraphHandle");
static_assert(offsetof(FGraphHandle, UniqueIndex) == 0x000000, "Member 'FGraphHandle::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FGraphHandle, Element) == 0x000014, "Member 'FGraphHandle::Element' has a wrong offset!");

// ScriptStruct GameplayGraph.GraphEdgeHandle
// 0x0000 (0x001C - 0x001C)
struct FGraphEdgeHandle final : public FGraphHandle
{
};
static_assert(alignof(FGraphEdgeHandle) == 0x000004, "Wrong alignment on FGraphEdgeHandle");
static_assert(sizeof(FGraphEdgeHandle) == 0x00001C, "Wrong size on FGraphEdgeHandle");

// ScriptStruct GameplayGraph.GraphVertexHandle
// 0x0000 (0x001C - 0x001C)
struct FGraphVertexHandle final : public FGraphHandle
{
};
static_assert(alignof(FGraphVertexHandle) == 0x000004, "Wrong alignment on FGraphVertexHandle");
static_assert(sizeof(FGraphVertexHandle) == 0x00001C, "Wrong size on FGraphVertexHandle");

// ScriptStruct GameplayGraph.SerializedIslandData
// 0x0010 (0x0010 - 0x0000)
struct FSerializedIslandData final
{
public:
	TArray<struct FGraphVertexHandle>             Vertices;                                          // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSerializedIslandData) == 0x000008, "Wrong alignment on FSerializedIslandData");
static_assert(sizeof(FSerializedIslandData) == 0x000010, "Wrong size on FSerializedIslandData");
static_assert(offsetof(FSerializedIslandData, Vertices) == 0x000000, "Member 'FSerializedIslandData::Vertices' has a wrong offset!");

// ScriptStruct GameplayGraph.SerializedEdgeData
// 0x0038 (0x0038 - 0x0000)
struct FSerializedEdgeData final
{
public:
	struct FGraphVertexHandle                     Node1;                                             // 0x0000(0x001C)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGraphVertexHandle                     Node2;                                             // 0x001C(0x001C)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSerializedEdgeData) == 0x000004, "Wrong alignment on FSerializedEdgeData");
static_assert(sizeof(FSerializedEdgeData) == 0x000038, "Wrong size on FSerializedEdgeData");
static_assert(offsetof(FSerializedEdgeData, Node1) == 0x000000, "Member 'FSerializedEdgeData::Node1' has a wrong offset!");
static_assert(offsetof(FSerializedEdgeData, Node2) == 0x00001C, "Member 'FSerializedEdgeData::Node2' has a wrong offset!");

// ScriptStruct GameplayGraph.GraphIslandHandle
// 0x0000 (0x001C - 0x001C)
struct FGraphIslandHandle final : public FGraphHandle
{
};
static_assert(alignof(FGraphIslandHandle) == 0x000004, "Wrong alignment on FGraphIslandHandle");
static_assert(sizeof(FGraphIslandHandle) == 0x00001C, "Wrong size on FGraphIslandHandle");

// ScriptStruct GameplayGraph.SerializableGraph
// 0x00B8 (0x00B8 - 0x0000)
struct FSerializableGraph
{
public:
	struct FGraphProperties                       Properties;                                        // 0x0000(0x0001)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGraphVertexHandle>             Vertices;                                          // 0x0008(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TMap<struct FGraphEdgeHandle, struct FSerializedEdgeData> Edges;                                             // 0x0018(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	TMap<struct FGraphIslandHandle, struct FSerializedIslandData> Islands;                                           // 0x0068(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSerializableGraph) == 0x000008, "Wrong alignment on FSerializableGraph");
static_assert(sizeof(FSerializableGraph) == 0x0000B8, "Wrong size on FSerializableGraph");
static_assert(offsetof(FSerializableGraph, Properties) == 0x000000, "Member 'FSerializableGraph::Properties' has a wrong offset!");
static_assert(offsetof(FSerializableGraph, Vertices) == 0x000008, "Member 'FSerializableGraph::Vertices' has a wrong offset!");
static_assert(offsetof(FSerializableGraph, Edges) == 0x000018, "Member 'FSerializableGraph::Edges' has a wrong offset!");
static_assert(offsetof(FSerializableGraph, Islands) == 0x000068, "Member 'FSerializableGraph::Islands' has a wrong offset!");

}

