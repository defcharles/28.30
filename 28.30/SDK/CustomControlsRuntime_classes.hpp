#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomControlsRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CustomControlsRuntime_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class CustomControlsRuntime.CustomControlOptions_Base
// 0x0038 (0x0060 - 0x0028)
class UCustomControlOptions_Base : public UObject
{
public:
	float                                         RangedAttackStateDuration;                         // 0x0028(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeAttackStateDuration;                          // 0x002C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortWeaponReticleData                 FortWeaponReticleData;                             // 0x0030(0x0014)(Edit, BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)
	struct FInteractionPointOptions               InteractionPointOptions;                           // 0x0044(0x0010)(Edit, BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTargetingPreset*                       InteractionTargetingPreset;                        // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BP_OnActivate();
	void BP_OnDeactivate();

	class UFortControllerComponent_CustomControls* GetOwningComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomControlOptions_Base">();
	}
	static class UCustomControlOptions_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomControlOptions_Base>();
	}
};
static_assert(alignof(UCustomControlOptions_Base) == 0x000008, "Wrong alignment on UCustomControlOptions_Base");
static_assert(sizeof(UCustomControlOptions_Base) == 0x000060, "Wrong size on UCustomControlOptions_Base");
static_assert(offsetof(UCustomControlOptions_Base, RangedAttackStateDuration) == 0x000028, "Member 'UCustomControlOptions_Base::RangedAttackStateDuration' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_Base, MeleeAttackStateDuration) == 0x00002C, "Member 'UCustomControlOptions_Base::MeleeAttackStateDuration' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_Base, FortWeaponReticleData) == 0x000030, "Member 'UCustomControlOptions_Base::FortWeaponReticleData' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_Base, InteractionPointOptions) == 0x000044, "Member 'UCustomControlOptions_Base::InteractionPointOptions' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_Base, InteractionTargetingPreset) == 0x000058, "Member 'UCustomControlOptions_Base::InteractionTargetingPreset' has a wrong offset!");

// Class CustomControlsRuntime.CustomControlOptions_ThirdPerson
// 0x0108 (0x0168 - 0x0060)
class UCustomControlOptions_ThirdPerson final : public UCustomControlOptions_Base
{
public:
	struct FCustomControlMovementModeData         BaseMovementMode;                                  // 0x0060(0x0030)(Edit, BlueprintVisible, Net, NativeAccessSpecifierPublic)
	struct FCustomControlMovementModeData         ShootingMovementMode;                              // 0x0090(0x0030)(Edit, BlueprintVisible, Net, NativeAccessSpecifierPublic)
	struct FCustomControlMovementModeData         StrikingMovementMode;                              // 0x00C0(0x0030)(Edit, BlueprintVisible, Net, NativeAccessSpecifierPublic)
	struct FCustomControlMovementModeData         AimingMovementMode;                                // 0x00F0(0x0030)(Edit, BlueprintVisible, Net, NativeAccessSpecifierPublic)
	class UTargetingPreset*                       RangedTargetingPresetTemplate;                     // 0x0120(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetingPreset*                       RetentionTargetingPresetTemplate;                  // 0x0128(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetingPreset*                       RangedAimingTargetingPresetTemplate;               // 0x0130(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetingPreset*                       MeleeTargetingPresetTemplate;                      // 0x0138(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleToClampFire;                                  // 0x0140(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShootMovementRequiresTarget;                      // 0x0144(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStrikeMovementRequiresTarget;                     // 0x0145(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTargetingPreset*                       RangedTargetingPreset;                             // 0x0148(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTargetingPreset*                       RetentionTargetingPreset;                          // 0x0150(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTargetingPreset*                       RangedAimTargetingPreset;                          // 0x0158(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTargetingPreset*                       MeleeTargetingPreset;                              // 0x0160(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BP_InitAimingTargetingPreset(class UTargetingPreset* Preset);
	void BP_InitMeleeTargetingPreset(class UTargetingPreset* Preset);
	void BP_InitRangedTargetingPreset(class UTargetingPreset* Preset);
	void BP_InitRetentionTargetingPreset(class UTargetingPreset* Preset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomControlOptions_ThirdPerson">();
	}
	static class UCustomControlOptions_ThirdPerson* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomControlOptions_ThirdPerson>();
	}
};
static_assert(alignof(UCustomControlOptions_ThirdPerson) == 0x000008, "Wrong alignment on UCustomControlOptions_ThirdPerson");
static_assert(sizeof(UCustomControlOptions_ThirdPerson) == 0x000168, "Wrong size on UCustomControlOptions_ThirdPerson");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, BaseMovementMode) == 0x000060, "Member 'UCustomControlOptions_ThirdPerson::BaseMovementMode' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, ShootingMovementMode) == 0x000090, "Member 'UCustomControlOptions_ThirdPerson::ShootingMovementMode' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, StrikingMovementMode) == 0x0000C0, "Member 'UCustomControlOptions_ThirdPerson::StrikingMovementMode' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, AimingMovementMode) == 0x0000F0, "Member 'UCustomControlOptions_ThirdPerson::AimingMovementMode' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, RangedTargetingPresetTemplate) == 0x000120, "Member 'UCustomControlOptions_ThirdPerson::RangedTargetingPresetTemplate' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, RetentionTargetingPresetTemplate) == 0x000128, "Member 'UCustomControlOptions_ThirdPerson::RetentionTargetingPresetTemplate' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, RangedAimingTargetingPresetTemplate) == 0x000130, "Member 'UCustomControlOptions_ThirdPerson::RangedAimingTargetingPresetTemplate' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, MeleeTargetingPresetTemplate) == 0x000138, "Member 'UCustomControlOptions_ThirdPerson::MeleeTargetingPresetTemplate' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, AngleToClampFire) == 0x000140, "Member 'UCustomControlOptions_ThirdPerson::AngleToClampFire' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, bShootMovementRequiresTarget) == 0x000144, "Member 'UCustomControlOptions_ThirdPerson::bShootMovementRequiresTarget' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, bStrikeMovementRequiresTarget) == 0x000145, "Member 'UCustomControlOptions_ThirdPerson::bStrikeMovementRequiresTarget' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, RangedTargetingPreset) == 0x000148, "Member 'UCustomControlOptions_ThirdPerson::RangedTargetingPreset' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, RetentionTargetingPreset) == 0x000150, "Member 'UCustomControlOptions_ThirdPerson::RetentionTargetingPreset' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, RangedAimTargetingPreset) == 0x000158, "Member 'UCustomControlOptions_ThirdPerson::RangedAimTargetingPreset' has a wrong offset!");
static_assert(offsetof(UCustomControlOptions_ThirdPerson, MeleeTargetingPreset) == 0x000160, "Member 'UCustomControlOptions_ThirdPerson::MeleeTargetingPreset' has a wrong offset!");

// Class CustomControlsRuntime.FortControllerComponent_CustomControls
// 0x0160 (0x0208 - 0x00A8)
class UFortControllerComponent_CustomControls final : public UFortControllerComponent
{
public:
	struct FCustomControlsState                   CurrentState;                                      // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomControlOptions_Base*             ActiveOptions;                                     // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         NotifyActiveOptionsUpdated;                        // 0x00B8(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCustomControlOptions_Base*>     OwnedOptions;                                      // 0x00C0(0x0010)(Net, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x58];                                      // 0x00D0(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      BlockTagsQuery;                                    // 0x0128(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x98];                                     // 0x0170(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientRegisterTagsQueries();
	class UCustomControlOptions_Base* CreateOptionsWithPriority(const class UObject* ContextObject, TSubclassOf<class UCustomControlOptions_Base> OptionsClass, float Priority, bool bEnabled);
	class UCustomControlOptions_Base* GetOptions(const class UObject* ContextObject);
	void NotifyOptionsUpdated(const class UCustomControlOptions_Base* Options);
	void OnRep_ActiveOptions(class UCustomControlOptions_Base* OldOptions);
	void OnRep_NotifyActiveOptionsUpdated();
	void RemoveOptions(const class UObject* ContextObject);
	void ServerSetFocusTarget(const class AActor* NewFocusTarget);
	void ServerSetOptionsQueueBlocked(bool bIsBlocked);
	void SetOptionsEnabled(const class UObject* ContextObject, bool bEnabled);
	void WeaponGetAimRotOverride(const class AFortWeapon* Weapon, const EFortAbilityTargetingSource TargetingSource, struct FRotator* OutOverrideAimRot, bool* bOutExecutionResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_CustomControls">();
	}
	static class UFortControllerComponent_CustomControls* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_CustomControls>();
	}
};
static_assert(alignof(UFortControllerComponent_CustomControls) == 0x000008, "Wrong alignment on UFortControllerComponent_CustomControls");
static_assert(sizeof(UFortControllerComponent_CustomControls) == 0x000208, "Wrong size on UFortControllerComponent_CustomControls");
static_assert(offsetof(UFortControllerComponent_CustomControls, CurrentState) == 0x0000A8, "Member 'UFortControllerComponent_CustomControls::CurrentState' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_CustomControls, ActiveOptions) == 0x0000B0, "Member 'UFortControllerComponent_CustomControls::ActiveOptions' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_CustomControls, NotifyActiveOptionsUpdated) == 0x0000B8, "Member 'UFortControllerComponent_CustomControls::NotifyActiveOptionsUpdated' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_CustomControls, OwnedOptions) == 0x0000C0, "Member 'UFortControllerComponent_CustomControls::OwnedOptions' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_CustomControls, BlockTagsQuery) == 0x000128, "Member 'UFortControllerComponent_CustomControls::BlockTagsQuery' has a wrong offset!");

// Class CustomControlsRuntime.FortMovementMode_ExtLogicBaseCustomControls
// 0x0000 (0x0120 - 0x0120)
class UFortMovementMode_ExtLogicBaseCustomControls : public UFortMovementMode_BaseExtLogic
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMovementMode_ExtLogicBaseCustomControls">();
	}
	static class UFortMovementMode_ExtLogicBaseCustomControls* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMovementMode_ExtLogicBaseCustomControls>();
	}
};
static_assert(alignof(UFortMovementMode_ExtLogicBaseCustomControls) == 0x000008, "Wrong alignment on UFortMovementMode_ExtLogicBaseCustomControls");
static_assert(sizeof(UFortMovementMode_ExtLogicBaseCustomControls) == 0x000120, "Wrong size on UFortMovementMode_ExtLogicBaseCustomControls");

// Class CustomControlsRuntime.FortMovementMode_ExtLogicCCThirdPerson
// 0x0000 (0x0120 - 0x0120)
class UFortMovementMode_ExtLogicCCThirdPerson final : public UFortMovementMode_ExtLogicBaseCustomControls
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMovementMode_ExtLogicCCThirdPerson">();
	}
	static class UFortMovementMode_ExtLogicCCThirdPerson* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMovementMode_ExtLogicCCThirdPerson>();
	}
};
static_assert(alignof(UFortMovementMode_ExtLogicCCThirdPerson) == 0x000008, "Wrong alignment on UFortMovementMode_ExtLogicCCThirdPerson");
static_assert(sizeof(UFortMovementMode_ExtLogicCCThirdPerson) == 0x000120, "Wrong size on UFortMovementMode_ExtLogicCCThirdPerson");

}

