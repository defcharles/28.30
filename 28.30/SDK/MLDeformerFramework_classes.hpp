#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MLDeformerFramework

#include "Basic.hpp"

#include "ComputeFramework_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "OptimusCore_classes.hpp"
#include "MLDeformerFramework_structs.hpp"


namespace SDK
{

// Class MLDeformerFramework.MLDeformerAsset
// 0x0008 (0x0030 - 0x0028)
class UMLDeformerAsset final : public UObject
{
public:
	class UMLDeformerModel*                       Model;                                             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerAsset">();
	}
	static class UMLDeformerAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerAsset>();
	}
};
static_assert(alignof(UMLDeformerAsset) == 0x000008, "Wrong alignment on UMLDeformerAsset");
static_assert(sizeof(UMLDeformerAsset) == 0x000030, "Wrong size on UMLDeformerAsset");
static_assert(offsetof(UMLDeformerAsset, Model) == 0x000028, "Member 'UMLDeformerAsset::Model' has a wrong offset!");

// Class MLDeformerFramework.MLDeformerVizSettings
// 0x0000 (0x0028 - 0x0028)
class UMLDeformerVizSettings : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerVizSettings">();
	}
	static class UMLDeformerVizSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerVizSettings>();
	}
};
static_assert(alignof(UMLDeformerVizSettings) == 0x000008, "Wrong alignment on UMLDeformerVizSettings");
static_assert(sizeof(UMLDeformerVizSettings) == 0x000028, "Wrong size on UMLDeformerVizSettings");

// Class MLDeformerFramework.MLDeformerGeomCacheVizSettings
// 0x0000 (0x0028 - 0x0028)
class UMLDeformerGeomCacheVizSettings : public UMLDeformerVizSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerGeomCacheVizSettings">();
	}
	static class UMLDeformerGeomCacheVizSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerGeomCacheVizSettings>();
	}
};
static_assert(alignof(UMLDeformerGeomCacheVizSettings) == 0x000008, "Wrong alignment on UMLDeformerGeomCacheVizSettings");
static_assert(sizeof(UMLDeformerGeomCacheVizSettings) == 0x000028, "Wrong size on UMLDeformerGeomCacheVizSettings");

// Class MLDeformerFramework.MLDeformerMorphModelVizSettings
// 0x0010 (0x0038 - 0x0028)
class UMLDeformerMorphModelVizSettings : public UMLDeformerGeomCacheVizSettings
{
public:
	float                                         MorphTargetDeltaThreshold;                         // 0x0028(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MorphTargetNumber;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawMorphTargets;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerMorphModelVizSettings">();
	}
	static class UMLDeformerMorphModelVizSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerMorphModelVizSettings>();
	}
};
static_assert(alignof(UMLDeformerMorphModelVizSettings) == 0x000008, "Wrong alignment on UMLDeformerMorphModelVizSettings");
static_assert(sizeof(UMLDeformerMorphModelVizSettings) == 0x000038, "Wrong size on UMLDeformerMorphModelVizSettings");
static_assert(offsetof(UMLDeformerMorphModelVizSettings, MorphTargetDeltaThreshold) == 0x000028, "Member 'UMLDeformerMorphModelVizSettings::MorphTargetDeltaThreshold' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModelVizSettings, MorphTargetNumber) == 0x00002C, "Member 'UMLDeformerMorphModelVizSettings::MorphTargetNumber' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModelVizSettings, bDrawMorphTargets) == 0x000030, "Member 'UMLDeformerMorphModelVizSettings::bDrawMorphTargets' has a wrong offset!");

// Class MLDeformerFramework.MLDeformerComponent
// 0x0040 (0x00E0 - 0x00A0)
class UMLDeformerComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x28];                                      // 0x00A0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMLDeformerAsset*                       DeformerAsset;                                     // 0x00C8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Weight;                                            // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         QualityLevel;                                      // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMLDeformerModelInstance*               ModelInstance;                                     // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDeformerAsset(class UMLDeformerAsset* InDeformerAsset);
	void SetQualityLevel(int32 InQualityLevel);
	void SetWeight(float NormalizedWeightValue);
	void UpdateSkeletalMeshComponent();

	class USkeletalMeshComponent* FindSkeletalMeshComponent(const class UMLDeformerAsset* Asset) const;
	class UMLDeformerAsset* GetDeformerAsset() const;
	int32 GetQualityLevel() const;
	class USkeletalMeshComponent* GetSkeletalMeshComponent() const;
	float GetWeight() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerComponent">();
	}
	static class UMLDeformerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerComponent>();
	}
};
static_assert(alignof(UMLDeformerComponent) == 0x000008, "Wrong alignment on UMLDeformerComponent");
static_assert(sizeof(UMLDeformerComponent) == 0x0000E0, "Wrong size on UMLDeformerComponent");
static_assert(offsetof(UMLDeformerComponent, DeformerAsset) == 0x0000C8, "Member 'UMLDeformerComponent::DeformerAsset' has a wrong offset!");
static_assert(offsetof(UMLDeformerComponent, Weight) == 0x0000D0, "Member 'UMLDeformerComponent::Weight' has a wrong offset!");
static_assert(offsetof(UMLDeformerComponent, QualityLevel) == 0x0000D4, "Member 'UMLDeformerComponent::QualityLevel' has a wrong offset!");
static_assert(offsetof(UMLDeformerComponent, ModelInstance) == 0x0000D8, "Member 'UMLDeformerComponent::ModelInstance' has a wrong offset!");

// Class MLDeformerFramework.MLDeformerComponentSource
// 0x0000 (0x0028 - 0x0028)
class UMLDeformerComponentSource final : public UOptimusComponentSource
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerComponentSource">();
	}
	static class UMLDeformerComponentSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerComponentSource>();
	}
};
static_assert(alignof(UMLDeformerComponentSource) == 0x000008, "Wrong alignment on UMLDeformerComponentSource");
static_assert(sizeof(UMLDeformerComponentSource) == 0x000028, "Wrong size on UMLDeformerComponentSource");

// Class MLDeformerFramework.MLDeformerModel
// 0x00C0 (0x00E8 - 0x0028)
class UMLDeformerModel : public UObject
{
public:
	uint8                                         Pad_28[0x98];                                      // 0x0028(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumBaseMeshVerts;                                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumTargetMeshVerts;                                // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMLDeformerInputInfo*                   InputInfo;                                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 VertexMap;                                         // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x00E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerModel">();
	}
	static class UMLDeformerModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerModel>();
	}
};
static_assert(alignof(UMLDeformerModel) == 0x000008, "Wrong alignment on UMLDeformerModel");
static_assert(sizeof(UMLDeformerModel) == 0x0000E8, "Wrong size on UMLDeformerModel");
static_assert(offsetof(UMLDeformerModel, NumBaseMeshVerts) == 0x0000C0, "Member 'UMLDeformerModel::NumBaseMeshVerts' has a wrong offset!");
static_assert(offsetof(UMLDeformerModel, NumTargetMeshVerts) == 0x0000C4, "Member 'UMLDeformerModel::NumTargetMeshVerts' has a wrong offset!");
static_assert(offsetof(UMLDeformerModel, InputInfo) == 0x0000C8, "Member 'UMLDeformerModel::InputInfo' has a wrong offset!");
static_assert(offsetof(UMLDeformerModel, VertexMap) == 0x0000D0, "Member 'UMLDeformerModel::VertexMap' has a wrong offset!");
static_assert(offsetof(UMLDeformerModel, SkeletalMesh) == 0x0000E0, "Member 'UMLDeformerModel::SkeletalMesh' has a wrong offset!");

// Class MLDeformerFramework.MLDeformerGeomCacheModel
// 0x0000 (0x00E8 - 0x00E8)
class UMLDeformerGeomCacheModel : public UMLDeformerModel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerGeomCacheModel">();
	}
	static class UMLDeformerGeomCacheModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerGeomCacheModel>();
	}
};
static_assert(alignof(UMLDeformerGeomCacheModel) == 0x000008, "Wrong alignment on UMLDeformerGeomCacheModel");
static_assert(sizeof(UMLDeformerGeomCacheModel) == 0x0000E8, "Wrong size on UMLDeformerGeomCacheModel");

// Class MLDeformerFramework.MLDeformerGraphDebugDataInterface
// 0x0000 (0x0028 - 0x0028)
class UMLDeformerGraphDebugDataInterface final : public UOptimusComputeDataInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerGraphDebugDataInterface">();
	}
	static class UMLDeformerGraphDebugDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerGraphDebugDataInterface>();
	}
};
static_assert(alignof(UMLDeformerGraphDebugDataInterface) == 0x000008, "Wrong alignment on UMLDeformerGraphDebugDataInterface");
static_assert(sizeof(UMLDeformerGraphDebugDataInterface) == 0x000028, "Wrong size on UMLDeformerGraphDebugDataInterface");

// Class MLDeformerFramework.MLDeformerGraphDebugDataProvider
// 0x0010 (0x0038 - 0x0028)
class UMLDeformerGraphDebugDataProvider final : public UComputeDataProvider
{
public:
	class UMLDeformerComponent*                   DeformerComponent;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMLDeformerAsset*                       DeformerAsset;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerGraphDebugDataProvider">();
	}
	static class UMLDeformerGraphDebugDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerGraphDebugDataProvider>();
	}
};
static_assert(alignof(UMLDeformerGraphDebugDataProvider) == 0x000008, "Wrong alignment on UMLDeformerGraphDebugDataProvider");
static_assert(sizeof(UMLDeformerGraphDebugDataProvider) == 0x000038, "Wrong size on UMLDeformerGraphDebugDataProvider");
static_assert(offsetof(UMLDeformerGraphDebugDataProvider, DeformerComponent) == 0x000028, "Member 'UMLDeformerGraphDebugDataProvider::DeformerComponent' has a wrong offset!");
static_assert(offsetof(UMLDeformerGraphDebugDataProvider, DeformerAsset) == 0x000030, "Member 'UMLDeformerGraphDebugDataProvider::DeformerAsset' has a wrong offset!");

// Class MLDeformerFramework.MLDeformerInputInfo
// 0x0040 (0x0068 - 0x0028)
class UMLDeformerInputInfo : public UObject
{
public:
	struct FSoftObjectPath                        SkeletalMesh;                                      // 0x0028(0x0018)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           BoneNames;                                         // 0x0040(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           CurveNames;                                        // 0x0050(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         NumBaseMeshVertices;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumTargetMeshVertices;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerInputInfo">();
	}
	static class UMLDeformerInputInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerInputInfo>();
	}
};
static_assert(alignof(UMLDeformerInputInfo) == 0x000008, "Wrong alignment on UMLDeformerInputInfo");
static_assert(sizeof(UMLDeformerInputInfo) == 0x000068, "Wrong size on UMLDeformerInputInfo");
static_assert(offsetof(UMLDeformerInputInfo, SkeletalMesh) == 0x000028, "Member 'UMLDeformerInputInfo::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(UMLDeformerInputInfo, BoneNames) == 0x000040, "Member 'UMLDeformerInputInfo::BoneNames' has a wrong offset!");
static_assert(offsetof(UMLDeformerInputInfo, CurveNames) == 0x000050, "Member 'UMLDeformerInputInfo::CurveNames' has a wrong offset!");
static_assert(offsetof(UMLDeformerInputInfo, NumBaseMeshVertices) == 0x000060, "Member 'UMLDeformerInputInfo::NumBaseMeshVertices' has a wrong offset!");
static_assert(offsetof(UMLDeformerInputInfo, NumTargetMeshVertices) == 0x000064, "Member 'UMLDeformerInputInfo::NumTargetMeshVertices' has a wrong offset!");

// Class MLDeformerFramework.MLDeformerModelInstance
// 0x0060 (0x0088 - 0x0028)
class UMLDeformerModelInstance : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMLDeformerModel*                       Model;                                             // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerModelInstance">();
	}
	static class UMLDeformerModelInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerModelInstance>();
	}
};
static_assert(alignof(UMLDeformerModelInstance) == 0x000008, "Wrong alignment on UMLDeformerModelInstance");
static_assert(sizeof(UMLDeformerModelInstance) == 0x000088, "Wrong size on UMLDeformerModelInstance");
static_assert(offsetof(UMLDeformerModelInstance, Model) == 0x000030, "Member 'UMLDeformerModelInstance::Model' has a wrong offset!");

// Class MLDeformerFramework.MLDeformerMorphModel
// 0x00A8 (0x0190 - 0x00E8)
class UMLDeformerMorphModel : public UMLDeformerGeomCacheModel
{
public:
	uint8                                         Pad_E8[0x10];                                      // 0x00E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bClampMorphWeights;                                // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector3f>                      MorphTargetDeltas;                                 // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         NumMorphTargets;                                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        CompressedMorphDataSizeInBytes;                    // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint64                                        UncompressedMorphDataSizeInBytes;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 MorphTargetErrorOrder;                             // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 MorphTargetErrors;                                 // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 MaxMorphWeights;                                   // 0x0148(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FFloatInterval>                 MorphTargetsMinMaxWeights;                         // 0x0158(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMLDeformerMorphModelQualityLevel> QualityLevels;                                     // 0x0168(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bIncludeNormals;                                   // 0x0178(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MorphDeltaZeroThreshold;                           // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MorphCompressionLevel;                             // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMLDeformerMaskChannel                        MaskChannel;                                       // 0x0184(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bInvertMaskChannel;                                // 0x0185(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_186[0xA];                                      // 0x0186(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMorphTargetDeltaFloats(const TArray<float>& Deltas);
	void SetMorphTargetDeltas(const TArray<struct FVector3f>& Deltas);
	void SetMorphTargetsErrorOrder(const TArray<int32>& MorphTargetOrder, const TArray<float>& ErrorValues);
	void SetMorphTargetsMaxWeights(const TArray<float>& MaxWeights);
	void SetMorphTargetsMinMaxWeights(const TArray<float>& MinValues, const TArray<float>& MaxValues);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerMorphModel">();
	}
	static class UMLDeformerMorphModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerMorphModel>();
	}
};
static_assert(alignof(UMLDeformerMorphModel) == 0x000008, "Wrong alignment on UMLDeformerMorphModel");
static_assert(sizeof(UMLDeformerMorphModel) == 0x000190, "Wrong size on UMLDeformerMorphModel");
static_assert(offsetof(UMLDeformerMorphModel, bClampMorphWeights) == 0x0000F8, "Member 'UMLDeformerMorphModel::bClampMorphWeights' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, MorphTargetDeltas) == 0x000100, "Member 'UMLDeformerMorphModel::MorphTargetDeltas' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, NumMorphTargets) == 0x000110, "Member 'UMLDeformerMorphModel::NumMorphTargets' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, CompressedMorphDataSizeInBytes) == 0x000118, "Member 'UMLDeformerMorphModel::CompressedMorphDataSizeInBytes' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, UncompressedMorphDataSizeInBytes) == 0x000120, "Member 'UMLDeformerMorphModel::UncompressedMorphDataSizeInBytes' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, MorphTargetErrorOrder) == 0x000128, "Member 'UMLDeformerMorphModel::MorphTargetErrorOrder' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, MorphTargetErrors) == 0x000138, "Member 'UMLDeformerMorphModel::MorphTargetErrors' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, MaxMorphWeights) == 0x000148, "Member 'UMLDeformerMorphModel::MaxMorphWeights' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, MorphTargetsMinMaxWeights) == 0x000158, "Member 'UMLDeformerMorphModel::MorphTargetsMinMaxWeights' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, QualityLevels) == 0x000168, "Member 'UMLDeformerMorphModel::QualityLevels' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, bIncludeNormals) == 0x000178, "Member 'UMLDeformerMorphModel::bIncludeNormals' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, MorphDeltaZeroThreshold) == 0x00017C, "Member 'UMLDeformerMorphModel::MorphDeltaZeroThreshold' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, MorphCompressionLevel) == 0x000180, "Member 'UMLDeformerMorphModel::MorphCompressionLevel' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, MaskChannel) == 0x000184, "Member 'UMLDeformerMorphModel::MaskChannel' has a wrong offset!");
static_assert(offsetof(UMLDeformerMorphModel, bInvertMaskChannel) == 0x000185, "Member 'UMLDeformerMorphModel::bInvertMaskChannel' has a wrong offset!");

// Class MLDeformerFramework.MLDeformerMorphModelInputInfo
// 0x0000 (0x0068 - 0x0068)
class UMLDeformerMorphModelInputInfo : public UMLDeformerInputInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerMorphModelInputInfo">();
	}
	static class UMLDeformerMorphModelInputInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerMorphModelInputInfo>();
	}
};
static_assert(alignof(UMLDeformerMorphModelInputInfo) == 0x000008, "Wrong alignment on UMLDeformerMorphModelInputInfo");
static_assert(sizeof(UMLDeformerMorphModelInputInfo) == 0x000068, "Wrong size on UMLDeformerMorphModelInputInfo");

// Class MLDeformerFramework.MLDeformerMorphModelInstance
// 0x0020 (0x00A8 - 0x0088)
class UMLDeformerMorphModelInstance : public UMLDeformerModelInstance
{
public:
	uint8                                         Pad_88[0x20];                                      // 0x0088(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MLDeformerMorphModelInstance">();
	}
	static class UMLDeformerMorphModelInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMLDeformerMorphModelInstance>();
	}
};
static_assert(alignof(UMLDeformerMorphModelInstance) == 0x000008, "Wrong alignment on UMLDeformerMorphModelInstance");
static_assert(sizeof(UMLDeformerMorphModelInstance) == 0x0000A8, "Wrong size on UMLDeformerMorphModelInstance");

}

