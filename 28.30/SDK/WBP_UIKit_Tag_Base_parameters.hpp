#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UIKit_Tag_Base

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "E_UI_TagType_structs.hpp"


namespace SDK::Params
{

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.ExecuteUbergraph_WBP_UIKit_Tag_Base
// 0x0008 (0x0008 - 0x0000)
struct WBP_UIKit_Tag_Base_C_ExecuteUbergraph_WBP_UIKit_Tag_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_ExecuteUbergraph_WBP_UIKit_Tag_Base) == 0x000004, "Wrong alignment on WBP_UIKit_Tag_Base_C_ExecuteUbergraph_WBP_UIKit_Tag_Base");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_ExecuteUbergraph_WBP_UIKit_Tag_Base) == 0x000008, "Wrong size on WBP_UIKit_Tag_Base_C_ExecuteUbergraph_WBP_UIKit_Tag_Base");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_ExecuteUbergraph_WBP_UIKit_Tag_Base, EntryPoint) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_ExecuteUbergraph_WBP_UIKit_Tag_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_ExecuteUbergraph_WBP_UIKit_Tag_Base, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_UIKit_Tag_Base_C_ExecuteUbergraph_WBP_UIKit_Tag_Base::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Tag_Base_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_UIKit_Tag_Base_C_PreConstruct");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_PreConstruct) == 0x000001, "Wrong size on WBP_UIKit_Tag_Base_C_PreConstruct");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetLabelText
// 0x0018 (0x0018 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetLabelText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetLabelText) == 0x000008, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetLabelText");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetLabelText) == 0x000018, "Wrong size on WBP_UIKit_Tag_Base_C_SetLabelText");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetLabelText, Text) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetLabelText::Text' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetLabelTextColor
// 0x0024 (0x0024 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetLabelTextColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0014)()
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetLabelTextColor) == 0x000004, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetLabelTextColor");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetLabelTextColor) == 0x000024, "Wrong size on WBP_UIKit_Tag_Base_C_SetLabelTextColor");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetLabelTextColor, Color) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetLabelTextColor::Color' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetLabelTextColor, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'WBP_UIKit_Tag_Base_C_SetLabelTextColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetLabelTextPadding
// 0x0018 (0x0018 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetLabelTextPadding final
{
public:
	struct FMargin                                Padding_0;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetLabelTextPadding) == 0x000008, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetLabelTextPadding");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetLabelTextPadding) == 0x000018, "Wrong size on WBP_UIKit_Tag_Base_C_SetLabelTextPadding");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetLabelTextPadding, Padding_0) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetLabelTextPadding::Padding_0' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetLabelTextPadding, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000010, "Member 'WBP_UIKit_Tag_Base_C_SetLabelTextPadding::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetStyleText
// 0x0038 (0x0038 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetStyleText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0018(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_Conv_BoolToSlateVisibility_ReturnValue;   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetStyleText) == 0x000008, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetStyleText");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetStyleText) == 0x000038, "Wrong size on WBP_UIKit_Tag_Base_C_SetStyleText");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetStyleText, Text) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetStyleText::Text' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetStyleText, CallFunc_GetText_ReturnValue) == 0x000018, "Member 'WBP_UIKit_Tag_Base_C_SetStyleText::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetStyleText, CallFunc_TextIsEmpty_ReturnValue) == 0x000030, "Member 'WBP_UIKit_Tag_Base_C_SetStyleText::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetStyleText, CallFunc_Conv_BoolToSlateVisibility_ReturnValue) == 0x000031, "Member 'WBP_UIKit_Tag_Base_C_SetStyleText::CallFunc_Conv_BoolToSlateVisibility_ReturnValue' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetStyleTextColor
// 0x0024 (0x0024 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetStyleTextColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0014)()
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetStyleTextColor) == 0x000004, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetStyleTextColor");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetStyleTextColor) == 0x000024, "Wrong size on WBP_UIKit_Tag_Base_C_SetStyleTextColor");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetStyleTextColor, Color) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetStyleTextColor::Color' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetStyleTextColor, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'WBP_UIKit_Tag_Base_C_SetStyleTextColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetStyleTextPadding
// 0x0018 (0x0018 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetStyleTextPadding final
{
public:
	struct FMargin                                Padding_0;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetStyleTextPadding) == 0x000008, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetStyleTextPadding");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetStyleTextPadding) == 0x000018, "Wrong size on WBP_UIKit_Tag_Base_C_SetStyleTextPadding");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetStyleTextPadding, Padding_0) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetStyleTextPadding::Padding_0' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetStyleTextPadding, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000010, "Member 'WBP_UIKit_Tag_Base_C_SetStyleTextPadding::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetTagBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetTagBackgroundColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetTagBackgroundColor) == 0x000004, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetTagBackgroundColor");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetTagBackgroundColor) == 0x000010, "Wrong size on WBP_UIKit_Tag_Base_C_SetTagBackgroundColor");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagBackgroundColor, Color) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetTagBackgroundColor::Color' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetTagText
// 0x0018 (0x0018 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetTagText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetTagText) == 0x000008, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetTagText");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetTagText) == 0x000018, "Wrong size on WBP_UIKit_Tag_Base_C_SetTagText");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagText, Text) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetTagText::Text' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetTagTextColor
// 0x0024 (0x0024 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetTagTextColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0014)()
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetTagTextColor) == 0x000004, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetTagTextColor");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetTagTextColor) == 0x000024, "Wrong size on WBP_UIKit_Tag_Base_C_SetTagTextColor");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagTextColor, Color) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetTagTextColor::Color' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagTextColor, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'WBP_UIKit_Tag_Base_C_SetTagTextColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetTagTextPadding
// 0x0018 (0x0018 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetTagTextPadding final
{
public:
	struct FMargin                                Padding_0;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetTagTextPadding) == 0x000008, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetTagTextPadding");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetTagTextPadding) == 0x000018, "Wrong size on WBP_UIKit_Tag_Base_C_SetTagTextPadding");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagTextPadding, Padding_0) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetTagTextPadding::Padding_0' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagTextPadding, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000010, "Member 'WBP_UIKit_Tag_Base_C_SetTagTextPadding::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetTagType
// 0x0188 (0x0188 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetTagType final
{
public:
	E_UI_TagType                                  Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_2;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_TagType                                  Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_TagType                                  Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextTransformPolicy                          Temp_byte_Variable_2;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextTransformPolicy                          Temp_byte_Variable_3;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextTransformPolicy                          Temp_byte_Variable_4;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextTransformPolicy                          Temp_byte_Variable_5;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_TagType                                  Temp_byte_Variable_6;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_TagType                                  Temp_byte_Variable_7;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x007C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x008C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextTransformPolicy                          K2Node_Select_Default;                             // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_3;                              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_Select_Default_3;                           // 0x00C8(0x0058)(HasGetValueTypeHash)
	E_UI_TagType                                  Temp_byte_Variable_8;                              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_4;                           // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_TagType                                  Temp_byte_Variable_9;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_Select_Default_5;                           // 0x0130(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetTagType) == 0x000008, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetTagType");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetTagType) == 0x000188, "Wrong size on WBP_UIKit_Tag_Base_C_SetTagType");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Type) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Type' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_real_Variable) == 0x000004, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_real_Variable_1) == 0x000008, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_real_Variable_2) == 0x00000C, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable) == 0x000010, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable_1) == 0x000011, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable_2) == 0x000012, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable_3) == 0x000013, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable_4) == 0x000014, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable_5) == 0x000015, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable_6) == 0x000016, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_struct_Variable) == 0x000018, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_struct_Variable_1) == 0x000028, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_struct_Variable_2) == 0x000038, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_struct_Variable_3) == 0x000048, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable_7) == 0x000058, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_struct_Variable_4) == 0x00005C, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_struct_Variable_5) == 0x00006C, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_struct_Variable_6) == 0x00007C, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_struct_Variable_7) == 0x00008C, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, K2Node_Select_Default) == 0x00009C, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, K2Node_Select_Default_1) == 0x0000A0, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, K2Node_Select_Default_2) == 0x0000B0, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_real_Variable_3) == 0x0000C0, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, K2Node_Select_Default_3) == 0x0000C8, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable_8) == 0x000120, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, K2Node_Select_Default_4) == 0x000124, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, Temp_byte_Variable_9) == 0x000128, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagType, K2Node_Select_Default_5) == 0x000130, "Member 'WBP_UIKit_Tag_Base_C_SetTagType::K2Node_Select_Default_5' has a wrong offset!");

// Function WBP_UIKit_Tag_Base.WBP_UIKit_Tag_Base_C.SetTagVisibility
// 0x0002 (0x0002 - 0x0000)
struct WBP_UIKit_Tag_Base_C_SetTagVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_Conv_BoolToSlateVisibility_ReturnValue;   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Tag_Base_C_SetTagVisibility) == 0x000001, "Wrong alignment on WBP_UIKit_Tag_Base_C_SetTagVisibility");
static_assert(sizeof(WBP_UIKit_Tag_Base_C_SetTagVisibility) == 0x000002, "Wrong size on WBP_UIKit_Tag_Base_C_SetTagVisibility");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagVisibility, Visible) == 0x000000, "Member 'WBP_UIKit_Tag_Base_C_SetTagVisibility::Visible' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Tag_Base_C_SetTagVisibility, CallFunc_Conv_BoolToSlateVisibility_ReturnValue) == 0x000001, "Member 'WBP_UIKit_Tag_Base_C_SetTagVisibility::CallFunc_Conv_BoolToSlateVisibility_ReturnValue' has a wrong offset!");

}

