#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EncountersRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "WorldConditions_structs.hpp"
#include "WorldConditions_classes.hpp"
#include "EncountersRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "StateTreeModule_structs.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "StructUtils_structs.hpp"
#include "LagerRuntime_structs.hpp"
#include "LagerRuntime_classes.hpp"
#include "GameplayStateTreeModule_classes.hpp"


namespace SDK
{

// Class EncountersRuntime.EncounterMobAnchor
// 0x0020 (0x02B0 - 0x0290)
class AEncounterMobAnchor final : public AActor
{
public:
	struct FGameplayTagContainer                  FilterTags;                                        // 0x0290(0x0020)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterMobAnchor">();
	}
	static class AEncounterMobAnchor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEncounterMobAnchor>();
	}
};
static_assert(alignof(AEncounterMobAnchor) == 0x000008, "Wrong alignment on AEncounterMobAnchor");
static_assert(sizeof(AEncounterMobAnchor) == 0x0002B0, "Wrong size on AEncounterMobAnchor");
static_assert(offsetof(AEncounterMobAnchor, FilterTags) == 0x000290, "Member 'AEncounterMobAnchor::FilterTags' has a wrong offset!");

// Class EncountersRuntime.EncounterMobManagerComponent
// 0x0178 (0x0218 - 0x00A0)
class UEncounterMobManagerComponent final : public UGameFrameworkComponent
{
public:
	TArray<struct FEncounterMobInstance>          SpawnedMobs;                                       // 0x00A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FEncounterMobSpawnData>         MobEncounterSpawnData;                             // 0x00B0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FEncounterMobSpawnInfo                 DefaultMobSpawnInfo;                               // 0x00C0(0x00A0)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         LWMDensityWeight;                                  // 0x0160(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         LWMDensityRange;                                   // 0x0188(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const struct FGameplayTag& MobIdentifier)> OnEncounterStarted;                                // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& MobIdentifier)> OnEncounterPaused;                                 // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& MobIdentifier)> OnEncounterResumed;                                // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& MobIdentifier, class AActor* SpawnedActor)> OnEncounterActorSpawned;                           // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& MobIdentifier, class AActor* DamagedActor, class AActor* DamageCauser)> OnEncounterActorDead;                              // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& MobIdentifier)> OnEncounterEnded;                                  // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ALivingWorldEncounterPrefab> EncounterPrefab;                                   // 0x0210(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void EndAndCleanupAllMobEncounters();
	void EndMobEncounter(const struct FGameplayTag& MobIdentifier);
	void OnMobActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnMobActorSpawn(class AActor* SpawnedActor);
	void OnMobPawnEndPlay(class AActor* Mob, EEndPlayReason EndPlayReason);
	void PauseMobEncounter(const struct FGameplayTag& MobIdentifier);
	void ResumeMobEncounter(const struct FGameplayTag& MobIdentifier);
	bool StartMobEncounter(const struct FGameplayTag& MobIdentifier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterMobManagerComponent">();
	}
	static class UEncounterMobManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEncounterMobManagerComponent>();
	}
};
static_assert(alignof(UEncounterMobManagerComponent) == 0x000008, "Wrong alignment on UEncounterMobManagerComponent");
static_assert(sizeof(UEncounterMobManagerComponent) == 0x000218, "Wrong size on UEncounterMobManagerComponent");
static_assert(offsetof(UEncounterMobManagerComponent, SpawnedMobs) == 0x0000A0, "Member 'UEncounterMobManagerComponent::SpawnedMobs' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, MobEncounterSpawnData) == 0x0000B0, "Member 'UEncounterMobManagerComponent::MobEncounterSpawnData' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, DefaultMobSpawnInfo) == 0x0000C0, "Member 'UEncounterMobManagerComponent::DefaultMobSpawnInfo' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, LWMDensityWeight) == 0x000160, "Member 'UEncounterMobManagerComponent::LWMDensityWeight' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, LWMDensityRange) == 0x000188, "Member 'UEncounterMobManagerComponent::LWMDensityRange' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, OnEncounterStarted) == 0x0001B0, "Member 'UEncounterMobManagerComponent::OnEncounterStarted' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, OnEncounterPaused) == 0x0001C0, "Member 'UEncounterMobManagerComponent::OnEncounterPaused' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, OnEncounterResumed) == 0x0001D0, "Member 'UEncounterMobManagerComponent::OnEncounterResumed' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, OnEncounterActorSpawned) == 0x0001E0, "Member 'UEncounterMobManagerComponent::OnEncounterActorSpawned' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, OnEncounterActorDead) == 0x0001F0, "Member 'UEncounterMobManagerComponent::OnEncounterActorDead' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, OnEncounterEnded) == 0x000200, "Member 'UEncounterMobManagerComponent::OnEncounterEnded' has a wrong offset!");
static_assert(offsetof(UEncounterMobManagerComponent, EncounterPrefab) == 0x000210, "Member 'UEncounterMobManagerComponent::EncounterPrefab' has a wrong offset!");

// Class EncountersRuntime.EncounterWorldConditionSchema
// 0x0008 (0x0040 - 0x0038)
class UEncounterWorldConditionSchema final : public UWorldConditionSchema
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterWorldConditionSchema">();
	}
	static class UEncounterWorldConditionSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEncounterWorldConditionSchema>();
	}
};
static_assert(alignof(UEncounterWorldConditionSchema) == 0x000008, "Wrong alignment on UEncounterWorldConditionSchema");
static_assert(sizeof(UEncounterWorldConditionSchema) == 0x000040, "Wrong size on UEncounterWorldConditionSchema");

// Class EncountersRuntime.LWMEncounterInstance
// 0x00D8 (0x0100 - 0x0028)
class ULWMEncounterInstance final : public UObject
{
public:
	TWeakObjectPtr<class UFortAthenaLivingWorldEncounterInstance> LWMInstance;                                       // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AFortPawn>>       SpawnedMobPawns;                                   // 0x0030(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x58];                                      // 0x0040(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  EncounterAnchorPoint;                              // 0x0098(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  UserActor;                                         // 0x00A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> ActivePointProviderInterfaces;                     // 0x00A8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x48];                                      // 0x00B8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMobActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnMobActorSpawn(class AActor* SpawnedActor);
	void OnMobPawnEndPlay(class AActor* Mob, EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LWMEncounterInstance">();
	}
	static class ULWMEncounterInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWMEncounterInstance>();
	}
};
static_assert(alignof(ULWMEncounterInstance) == 0x000008, "Wrong alignment on ULWMEncounterInstance");
static_assert(sizeof(ULWMEncounterInstance) == 0x000100, "Wrong size on ULWMEncounterInstance");
static_assert(offsetof(ULWMEncounterInstance, LWMInstance) == 0x000028, "Member 'ULWMEncounterInstance::LWMInstance' has a wrong offset!");
static_assert(offsetof(ULWMEncounterInstance, SpawnedMobPawns) == 0x000030, "Member 'ULWMEncounterInstance::SpawnedMobPawns' has a wrong offset!");
static_assert(offsetof(ULWMEncounterInstance, EncounterAnchorPoint) == 0x000098, "Member 'ULWMEncounterInstance::EncounterAnchorPoint' has a wrong offset!");
static_assert(offsetof(ULWMEncounterInstance, UserActor) == 0x0000A0, "Member 'ULWMEncounterInstance::UserActor' has a wrong offset!");
static_assert(offsetof(ULWMEncounterInstance, ActivePointProviderInterfaces) == 0x0000A8, "Member 'ULWMEncounterInstance::ActivePointProviderInterfaces' has a wrong offset!");

// Class EncountersRuntime.SpawnActorTaskHelper
// 0x0010 (0x0038 - 0x0028)
class USpawnActorTaskHelper : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpawnActorTaskHelper">();
	}
	static class USpawnActorTaskHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpawnActorTaskHelper>();
	}
};
static_assert(alignof(USpawnActorTaskHelper) == 0x000008, "Wrong alignment on USpawnActorTaskHelper");
static_assert(sizeof(USpawnActorTaskHelper) == 0x000038, "Wrong size on USpawnActorTaskHelper");

// Class EncountersRuntime.EncounterActorSpawnerData
// 0x0050 (0x00A0 - 0x0050)
class UEncounterActorSpawnerData final : public UFortAthenaActorSpawnerData
{
public:
	struct FEncounterPrefabEntry                  EncounterEntry;                                    // 0x0050(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterActorSpawnerData">();
	}
	static class UEncounterActorSpawnerData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEncounterActorSpawnerData>();
	}
};
static_assert(alignof(UEncounterActorSpawnerData) == 0x000008, "Wrong alignment on UEncounterActorSpawnerData");
static_assert(sizeof(UEncounterActorSpawnerData) == 0x0000A0, "Wrong size on UEncounterActorSpawnerData");
static_assert(offsetof(UEncounterActorSpawnerData, EncounterEntry) == 0x000050, "Member 'UEncounterActorSpawnerData::EncounterEntry' has a wrong offset!");

// Class EncountersRuntime.EncounterBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UEncounterBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UEncounterMobManagerComponent* GetRelevantMobManagerComponentForActor(const class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterBlueprintLibrary">();
	}
	static class UEncounterBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEncounterBlueprintLibrary>();
	}
};
static_assert(alignof(UEncounterBlueprintLibrary) == 0x000008, "Wrong alignment on UEncounterBlueprintLibrary");
static_assert(sizeof(UEncounterBlueprintLibrary) == 0x000028, "Wrong size on UEncounterBlueprintLibrary");

// Class EncountersRuntime.EncounterFactionData
// 0x0068 (0x0098 - 0x0030)
class UEncounterFactionData final : public UPrimaryDataAsset
{
public:
	struct FGameplayTagQuery                      RequiredCapabilities;                              // 0x0030(0x0048)(Edit, NativeAccessSpecifierPrivate)
	struct FWorldConditionQueryDefinition         WorldConditionDefinition;                          // 0x0078(0x0018)(Edit, NativeAccessSpecifierPrivate)
	class UDataTable*                             LWMEncounterTable;                                 // 0x0090(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterFactionData">();
	}
	static class UEncounterFactionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEncounterFactionData>();
	}
};
static_assert(alignof(UEncounterFactionData) == 0x000008, "Wrong alignment on UEncounterFactionData");
static_assert(sizeof(UEncounterFactionData) == 0x000098, "Wrong size on UEncounterFactionData");
static_assert(offsetof(UEncounterFactionData, RequiredCapabilities) == 0x000030, "Member 'UEncounterFactionData::RequiredCapabilities' has a wrong offset!");
static_assert(offsetof(UEncounterFactionData, WorldConditionDefinition) == 0x000078, "Member 'UEncounterFactionData::WorldConditionDefinition' has a wrong offset!");
static_assert(offsetof(UEncounterFactionData, LWMEncounterTable) == 0x000090, "Member 'UEncounterFactionData::LWMEncounterTable' has a wrong offset!");

// Class EncountersRuntime.EncounterGameplayVolume
// 0x0100 (0x0430 - 0x0330)
class AEncounterGameplayVolume final : public AGameplayVolume
{
public:
	uint8                                         Pad_330[0x18];                                     // 0x0330(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UEncounterStateTreeComponent*           EncounterStateTreeComponent;                       // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TScriptInterface<class IEncounterPointProviderInterface>> TrackedEncounterPointProviders;                    // 0x0358(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AEncounterMobAnchor>> TrackedEncounterAnchors;                           // 0x0368(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ABuildingActor>>  TrackedBuildingActors;                             // 0x0378(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AFortPlayerController>> OverlappingPlayers;                                // 0x0388(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, class FString>            AllVisitedPlayersMap;                              // 0x0398(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E8[0x48];                                     // 0x03E8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCleanup();

	bool IsDoneCleaningUp() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterGameplayVolume">();
	}
	static class AEncounterGameplayVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEncounterGameplayVolume>();
	}
};
static_assert(alignof(AEncounterGameplayVolume) == 0x000008, "Wrong alignment on AEncounterGameplayVolume");
static_assert(sizeof(AEncounterGameplayVolume) == 0x000430, "Wrong size on AEncounterGameplayVolume");
static_assert(offsetof(AEncounterGameplayVolume, EncounterStateTreeComponent) == 0x000348, "Member 'AEncounterGameplayVolume::EncounterStateTreeComponent' has a wrong offset!");
static_assert(offsetof(AEncounterGameplayVolume, TrackedEncounterPointProviders) == 0x000358, "Member 'AEncounterGameplayVolume::TrackedEncounterPointProviders' has a wrong offset!");
static_assert(offsetof(AEncounterGameplayVolume, TrackedEncounterAnchors) == 0x000368, "Member 'AEncounterGameplayVolume::TrackedEncounterAnchors' has a wrong offset!");
static_assert(offsetof(AEncounterGameplayVolume, TrackedBuildingActors) == 0x000378, "Member 'AEncounterGameplayVolume::TrackedBuildingActors' has a wrong offset!");
static_assert(offsetof(AEncounterGameplayVolume, OverlappingPlayers) == 0x000388, "Member 'AEncounterGameplayVolume::OverlappingPlayers' has a wrong offset!");
static_assert(offsetof(AEncounterGameplayVolume, AllVisitedPlayersMap) == 0x000398, "Member 'AEncounterGameplayVolume::AllVisitedPlayersMap' has a wrong offset!");

// Class EncountersRuntime.EncounterItemDefinition
// 0x0218 (0x0540 - 0x0328)
class UEncounterItemDefinition final : public UFortItemDefinition
{
public:
	bool                                          bAutoHandleSuccessFailure;                         // 0x0328(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0330(0x0020)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UStateTree>              StateTreeOverride;                                 // 0x0350(0x0020)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayCueTag                        ProximityGameplayCueTag;                           // 0x0370(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueTag                        ActorCleanupGameplayCueTag;                        // 0x0374(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           SuccessRewards;                                    // 0x0378(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FEncounterRewardBehavior               SuccessRewardBehavior;                             // 0x0388(0x0080)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueTag                        ActorSuccessGameplayCueTag;                        // 0x0408(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueTag                        PlayerSuccessGameplayCueTag;                       // 0x040C(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           FailureRewards;                                    // 0x0410(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FEncounterRewardBehavior               FailureRewardBehavior;                             // 0x0420(0x0080)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueTag                        ActorFailureGameplayCueTag;                        // 0x04A0(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueTag                        PlayerFailureGameplayCueTag;                       // 0x04A4(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         LWMDensityWeight;                                  // 0x04A8(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         LWMDensityRange;                                   // 0x04D0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FInstancedStruct>               Vars;                                              // 0x04F8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FInstancedStruct>               VariableSelections;                                // 0x0508(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FWorldConditionQueryDefinition         CanSpawnWorldConditionDefinition;                  // 0x0518(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAthenaLivingWorldPrefabActorSpawnerData> ActorSpawnerDatas;                                 // 0x0530(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterItemDefinition">();
	}
	static class UEncounterItemDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEncounterItemDefinition>();
	}
};
static_assert(alignof(UEncounterItemDefinition) == 0x000008, "Wrong alignment on UEncounterItemDefinition");
static_assert(sizeof(UEncounterItemDefinition) == 0x000540, "Wrong size on UEncounterItemDefinition");
static_assert(offsetof(UEncounterItemDefinition, bAutoHandleSuccessFailure) == 0x000328, "Member 'UEncounterItemDefinition::bAutoHandleSuccessFailure' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, Level) == 0x000330, "Member 'UEncounterItemDefinition::Level' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, StateTreeOverride) == 0x000350, "Member 'UEncounterItemDefinition::StateTreeOverride' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, ProximityGameplayCueTag) == 0x000370, "Member 'UEncounterItemDefinition::ProximityGameplayCueTag' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, ActorCleanupGameplayCueTag) == 0x000374, "Member 'UEncounterItemDefinition::ActorCleanupGameplayCueTag' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, SuccessRewards) == 0x000378, "Member 'UEncounterItemDefinition::SuccessRewards' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, SuccessRewardBehavior) == 0x000388, "Member 'UEncounterItemDefinition::SuccessRewardBehavior' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, ActorSuccessGameplayCueTag) == 0x000408, "Member 'UEncounterItemDefinition::ActorSuccessGameplayCueTag' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, PlayerSuccessGameplayCueTag) == 0x00040C, "Member 'UEncounterItemDefinition::PlayerSuccessGameplayCueTag' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, FailureRewards) == 0x000410, "Member 'UEncounterItemDefinition::FailureRewards' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, FailureRewardBehavior) == 0x000420, "Member 'UEncounterItemDefinition::FailureRewardBehavior' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, ActorFailureGameplayCueTag) == 0x0004A0, "Member 'UEncounterItemDefinition::ActorFailureGameplayCueTag' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, PlayerFailureGameplayCueTag) == 0x0004A4, "Member 'UEncounterItemDefinition::PlayerFailureGameplayCueTag' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, LWMDensityWeight) == 0x0004A8, "Member 'UEncounterItemDefinition::LWMDensityWeight' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, LWMDensityRange) == 0x0004D0, "Member 'UEncounterItemDefinition::LWMDensityRange' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, Vars) == 0x0004F8, "Member 'UEncounterItemDefinition::Vars' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, VariableSelections) == 0x000508, "Member 'UEncounterItemDefinition::VariableSelections' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, CanSpawnWorldConditionDefinition) == 0x000518, "Member 'UEncounterItemDefinition::CanSpawnWorldConditionDefinition' has a wrong offset!");
static_assert(offsetof(UEncounterItemDefinition, ActorSpawnerDatas) == 0x000530, "Member 'UEncounterItemDefinition::ActorSpawnerDatas' has a wrong offset!");

// Class EncountersRuntime.EncounterManagerComponent
// 0x0238 (0x02D8 - 0x00A0)
class UEncounterManagerComponent final : public UGameFrameworkComponent
{
public:
	TWeakObjectPtr<class AEncounterGameplayVolume> EncounterVolume;                                   // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  CenterActorOverride;                               // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class ABuildingActor>>  ActorsToRemainAfterEncounter;                      // 0x00B0(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PostEncounterLWMEvent;                             // 0x00C0(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PostEncounterLWMCategory;                          // 0x00D0(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSet<class AFortPlayerController*>            ExplicitContributors;                              // 0x00E0(0x0050)(Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FActorIdentifierEntry>          ActorIdentifiers;                                  // 0x0130(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasHandledSuccessFailure;                         // 0x0140(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLWMEncounterInfo>              EncounterInfos;                                    // 0x0148(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayEffectIdentifierInfo>  GameplayEffectInfos;                               // 0x0158(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ALivingWorldEncounterPrefab> EncounterPrefab;                                   // 0x0168(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UDataTable>              LWMEncounterTable;                                 // 0x0170(0x0020)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0x100];                                    // 0x0190(0x0100)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  LastThreat;                                        // 0x0290(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  ReservoirActor;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTrackedActorInfo>              TrackedActorInfos;                                 // 0x02A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B0[0x28];                                     // 0x02B0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddExplicitContributor(class AFortPlayerController* Contributor);
	void HandleEncounterFailure(int32 RewardIndex);
	void HandleEncounterSuccess(int32 RewardIndex);
	void OnStateTreeStatusChanged(EStateTreeRunStatus Status);
	void RemoveExplicitContributor(class AFortPlayerController* Contributor);
	void SetPersistentValue(const struct FGameplayTag& Identifier, int32 Value);

	int32 GetPersistentValue(const struct FGameplayTag& Identifier) const;
	TSoftClassPtr<class UClass> GetVariable_ActorClass(const struct FGameplayTag& VarName) const;
	const TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription> GetVariable_ActorDescription(const struct FGameplayTag& VarName) const;
	bool GetVariable_Bool(const struct FGameplayTag& VarName) const;
	float GetVariable_Float(const struct FGameplayTag& VarName) const;
	struct FGameplayTag GetVariable_GameplayTag(const struct FGameplayTag& VarName) const;
	struct FGameplayTagContainer GetVariable_GameplayTagContainer(const struct FGameplayTag& VarName) const;
	int32 GetVariable_Int(const struct FGameplayTag& VarName) const;
	const class UFortWorldItemDefinition* GetVariable_ItemDefinition(const struct FGameplayTag& VarName) const;
	const class UFortAthenaLivingWorldEncounter* GetVariable_LWMEncounter(const struct FGameplayTag& VarName) const;
	struct FGameplayTagQuery GetVariable_TagQuery(const struct FGameplayTag& VarName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterManagerComponent">();
	}
	static class UEncounterManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEncounterManagerComponent>();
	}
};
static_assert(alignof(UEncounterManagerComponent) == 0x000008, "Wrong alignment on UEncounterManagerComponent");
static_assert(sizeof(UEncounterManagerComponent) == 0x0002D8, "Wrong size on UEncounterManagerComponent");
static_assert(offsetof(UEncounterManagerComponent, EncounterVolume) == 0x0000A0, "Member 'UEncounterManagerComponent::EncounterVolume' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, CenterActorOverride) == 0x0000A8, "Member 'UEncounterManagerComponent::CenterActorOverride' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, ActorsToRemainAfterEncounter) == 0x0000B0, "Member 'UEncounterManagerComponent::ActorsToRemainAfterEncounter' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, PostEncounterLWMEvent) == 0x0000C0, "Member 'UEncounterManagerComponent::PostEncounterLWMEvent' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, PostEncounterLWMCategory) == 0x0000D0, "Member 'UEncounterManagerComponent::PostEncounterLWMCategory' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, ExplicitContributors) == 0x0000E0, "Member 'UEncounterManagerComponent::ExplicitContributors' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, ActorIdentifiers) == 0x000130, "Member 'UEncounterManagerComponent::ActorIdentifiers' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, bHasHandledSuccessFailure) == 0x000140, "Member 'UEncounterManagerComponent::bHasHandledSuccessFailure' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, EncounterInfos) == 0x000148, "Member 'UEncounterManagerComponent::EncounterInfos' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, GameplayEffectInfos) == 0x000158, "Member 'UEncounterManagerComponent::GameplayEffectInfos' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, EncounterPrefab) == 0x000168, "Member 'UEncounterManagerComponent::EncounterPrefab' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, LWMEncounterTable) == 0x000170, "Member 'UEncounterManagerComponent::LWMEncounterTable' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, LastThreat) == 0x000290, "Member 'UEncounterManagerComponent::LastThreat' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, ReservoirActor) == 0x000298, "Member 'UEncounterManagerComponent::ReservoirActor' has a wrong offset!");
static_assert(offsetof(UEncounterManagerComponent, TrackedActorInfos) == 0x0002A0, "Member 'UEncounterManagerComponent::TrackedActorInfos' has a wrong offset!");

// Class EncountersRuntime.EncounterPatrolPathPointProvider
// 0x0008 (0x0380 - 0x0378)
class AEncounterPatrolPathPointProvider final : public AFortAthenaPatrolPathPointProvider
{
public:
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterPatrolPathPointProvider">();
	}
	static class AEncounterPatrolPathPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEncounterPatrolPathPointProvider>();
	}
};
static_assert(alignof(AEncounterPatrolPathPointProvider) == 0x000008, "Wrong alignment on AEncounterPatrolPathPointProvider");
static_assert(sizeof(AEncounterPatrolPathPointProvider) == 0x000380, "Wrong size on AEncounterPatrolPathPointProvider");

// Class EncountersRuntime.EncounterPointProviderInterface
// 0x0000 (0x0028 - 0x0028)
class IEncounterPointProviderInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterPointProviderInterface">();
	}
	static class IEncounterPointProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IEncounterPointProviderInterface>();
	}
};
static_assert(alignof(IEncounterPointProviderInterface) == 0x000008, "Wrong alignment on IEncounterPointProviderInterface");
static_assert(sizeof(IEncounterPointProviderInterface) == 0x000028, "Wrong size on IEncounterPointProviderInterface");

// Class EncountersRuntime.EncounterStateTreeComponent
// 0x0008 (0x0150 - 0x0148)
class UEncounterStateTreeComponent final : public UStateTreeComponent
{
public:
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterStateTreeComponent">();
	}
	static class UEncounterStateTreeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEncounterStateTreeComponent>();
	}
};
static_assert(alignof(UEncounterStateTreeComponent) == 0x000008, "Wrong alignment on UEncounterStateTreeComponent");
static_assert(sizeof(UEncounterStateTreeComponent) == 0x000150, "Wrong size on UEncounterStateTreeComponent");

// Class EncountersRuntime.EncounterStaticPointProvider
// 0x0008 (0x0390 - 0x0388)
class AEncounterStaticPointProvider : public AFortAthenaLivingWorldStaticPointProvider
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterStaticPointProvider">();
	}
	static class AEncounterStaticPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEncounterStaticPointProvider>();
	}
};
static_assert(alignof(AEncounterStaticPointProvider) == 0x000008, "Wrong alignment on AEncounterStaticPointProvider");
static_assert(sizeof(AEncounterStaticPointProvider) == 0x000390, "Wrong size on AEncounterStaticPointProvider");

// Class EncountersRuntime.EncounterVolumePointProvider
// 0x0008 (0x05E0 - 0x05D8)
class AEncounterVolumePointProvider final : public AFortAthenaLivingWorldVolume
{
public:
	uint8                                         Pad_5D8[0x8];                                      // 0x05D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EncounterVolumePointProvider">();
	}
	static class AEncounterVolumePointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEncounterVolumePointProvider>();
	}
};
static_assert(alignof(AEncounterVolumePointProvider) == 0x000008, "Wrong alignment on AEncounterVolumePointProvider");
static_assert(sizeof(AEncounterVolumePointProvider) == 0x0005E0, "Wrong size on AEncounterVolumePointProvider");

// Class EncountersRuntime.FortCheatManager_Encounters
// 0x0000 (0x0028 - 0x0028)
class UFortCheatManager_Encounters final : public UChildCheatManager
{
public:
	void EncountersDump();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_Encounters">();
	}
	static class UFortCheatManager_Encounters* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_Encounters>();
	}
};
static_assert(alignof(UFortCheatManager_Encounters) == 0x000008, "Wrong alignment on UFortCheatManager_Encounters");
static_assert(sizeof(UFortCheatManager_Encounters) == 0x000028, "Wrong size on UFortCheatManager_Encounters");

// Class EncountersRuntime.LivingWorldEncounterPrefab
// 0x0088 (0x09C8 - 0x0940)
class ALivingWorldEncounterPrefab : public AFortAthenaLivingWorldPrefab
{
public:
	uint8                                         Pad_940[0x58];                                     // 0x0940(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEncounterPrefabInfo>           EncounterEntries;                                  // 0x0998(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UEncounterItemDefinition*               EncounterDefinition;                               // 0x09A8(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  ReservoirActorOverride;                            // 0x09B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UEncounterManagerComponent> EncounterManager;                                  // 0x09B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C0[0x8];                                      // 0x09C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_EncounterDefinition();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LivingWorldEncounterPrefab">();
	}
	static class ALivingWorldEncounterPrefab* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALivingWorldEncounterPrefab>();
	}
};
static_assert(alignof(ALivingWorldEncounterPrefab) == 0x000008, "Wrong alignment on ALivingWorldEncounterPrefab");
static_assert(sizeof(ALivingWorldEncounterPrefab) == 0x0009C8, "Wrong size on ALivingWorldEncounterPrefab");
static_assert(offsetof(ALivingWorldEncounterPrefab, EncounterEntries) == 0x000998, "Member 'ALivingWorldEncounterPrefab::EncounterEntries' has a wrong offset!");
static_assert(offsetof(ALivingWorldEncounterPrefab, EncounterDefinition) == 0x0009A8, "Member 'ALivingWorldEncounterPrefab::EncounterDefinition' has a wrong offset!");
static_assert(offsetof(ALivingWorldEncounterPrefab, ReservoirActorOverride) == 0x0009B0, "Member 'ALivingWorldEncounterPrefab::ReservoirActorOverride' has a wrong offset!");
static_assert(offsetof(ALivingWorldEncounterPrefab, EncounterManager) == 0x0009B8, "Member 'ALivingWorldEncounterPrefab::EncounterManager' has a wrong offset!");

// Class EncountersRuntime.FortVerbProcessor_EncounterCompleted
// 0x0000 (0x00A0 - 0x00A0)
class UFortVerbProcessor_EncounterCompleted final : public UFortObjectiveProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVerbProcessor_EncounterCompleted">();
	}
	static class UFortVerbProcessor_EncounterCompleted* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVerbProcessor_EncounterCompleted>();
	}
};
static_assert(alignof(UFortVerbProcessor_EncounterCompleted) == 0x000008, "Wrong alignment on UFortVerbProcessor_EncounterCompleted");
static_assert(sizeof(UFortVerbProcessor_EncounterCompleted) == 0x0000A0, "Wrong size on UFortVerbProcessor_EncounterCompleted");

}

