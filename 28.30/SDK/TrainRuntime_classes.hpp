#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TrainRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "TrainRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TargetingSystem_structs.hpp"


namespace SDK
{

// Class TrainRuntime.FortTrainCheatManager
// 0x0018 (0x0040 - 0x0028)
class UFortTrainCheatManager final : public UChildCheatManager
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTrainMoveInPositiveRailDirection(bool bMoveInPositiveRailDirection);
	void SetTrainStartLocationToCursor();
	void TeleportToTrain();
	void TeleportToTrainStartLocation();
	void TeleportTrainToCursor();
	void TeleportTrainToTrainStartLocation();

	void PrintTrainDebug() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTrainCheatManager">();
	}
	static class UFortTrainCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTrainCheatManager>();
	}
};
static_assert(alignof(UFortTrainCheatManager) == 0x000008, "Wrong alignment on UFortTrainCheatManager");
static_assert(sizeof(UFortTrainCheatManager) == 0x000040, "Wrong size on UFortTrainCheatManager");

// Class TrainRuntime.FortTrainSpawner
// 0x0088 (0x0318 - 0x0290)
class AFortTrainSpawner final : public AActor
{
public:
	class UTrainConfig*                           TrainConfig;                                       // 0x0290(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RandomizeSpawnLocation;                            // 0x0298(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ReverseDirection;                                  // 0x02C0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RandomizeDirection;                                // 0x02E8(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	class AFortTrainRail*                         Rail;                                              // 0x0310(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTrainSpawner">();
	}
	static class AFortTrainSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortTrainSpawner>();
	}
};
static_assert(alignof(AFortTrainSpawner) == 0x000008, "Wrong alignment on AFortTrainSpawner");
static_assert(sizeof(AFortTrainSpawner) == 0x000318, "Wrong size on AFortTrainSpawner");
static_assert(offsetof(AFortTrainSpawner, TrainConfig) == 0x000290, "Member 'AFortTrainSpawner::TrainConfig' has a wrong offset!");
static_assert(offsetof(AFortTrainSpawner, RandomizeSpawnLocation) == 0x000298, "Member 'AFortTrainSpawner::RandomizeSpawnLocation' has a wrong offset!");
static_assert(offsetof(AFortTrainSpawner, ReverseDirection) == 0x0002C0, "Member 'AFortTrainSpawner::ReverseDirection' has a wrong offset!");
static_assert(offsetof(AFortTrainSpawner, RandomizeDirection) == 0x0002E8, "Member 'AFortTrainSpawner::RandomizeDirection' has a wrong offset!");
static_assert(offsetof(AFortTrainSpawner, Rail) == 0x000310, "Member 'AFortTrainSpawner::Rail' has a wrong offset!");

// Class TrainRuntime.TrainCar
// 0x0188 (0x0440 - 0x02B8)
class ATrainCar final : public AFortGameplayTagActor
{
public:
	uint8                                         Pad_2B8[0x14];                                     // 0x02B8(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCanBeMarked : 1;                                  // 0x02CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bBlockMarking : 1;                                 // 0x02CC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarkedActorDisplayInfo                MarkerDisplay;                                     // 0x02D0(0x00A8)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector                                MarkerPositionOffset;                              // 0x0378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Length;                                            // 0x0390(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConnectorLength;                                   // 0x0394(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTargetingPreset*                       DestructionTargetingPreset;                        // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTargetingPreset*                       ImpulseTargetingPreset;                            // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DestroyBuildings;                                  // 0x03A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DestroyOnlyTargetPlayerBuilds;                     // 0x03D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DestructionActorTags;                              // 0x03F8(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DestructionIgnoredActorTags;                       // 0x0418(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FTargetingRequestHandle                DestructionAsyncTargetingHandle;                   // 0x0438(0x0004)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTargetingRequestHandle                ImpulseAsyncTargetingHandle;                       // 0x043C(0x0004)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnActorTargetedForImpulse(class AActor* Actor);
	void OnPawnBasedOnTrainCar(class AFortPawn* Pawn);
	void OnPawnDebasedTrainCar(class AFortPawn* Pawn, class AActor* NewBase);

	int32 GetCarIndex() const;
	class UFortTrainManager* GetTrainManager() const;
	struct FTransform GetTransformAtServerTime(float ServerTime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TrainCar">();
	}
	static class ATrainCar* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATrainCar>();
	}
};
static_assert(alignof(ATrainCar) == 0x000008, "Wrong alignment on ATrainCar");
static_assert(sizeof(ATrainCar) == 0x000440, "Wrong size on ATrainCar");
static_assert(offsetof(ATrainCar, MarkerDisplay) == 0x0002D0, "Member 'ATrainCar::MarkerDisplay' has a wrong offset!");
static_assert(offsetof(ATrainCar, MarkerPositionOffset) == 0x000378, "Member 'ATrainCar::MarkerPositionOffset' has a wrong offset!");
static_assert(offsetof(ATrainCar, Length) == 0x000390, "Member 'ATrainCar::Length' has a wrong offset!");
static_assert(offsetof(ATrainCar, ConnectorLength) == 0x000394, "Member 'ATrainCar::ConnectorLength' has a wrong offset!");
static_assert(offsetof(ATrainCar, DestructionTargetingPreset) == 0x000398, "Member 'ATrainCar::DestructionTargetingPreset' has a wrong offset!");
static_assert(offsetof(ATrainCar, ImpulseTargetingPreset) == 0x0003A0, "Member 'ATrainCar::ImpulseTargetingPreset' has a wrong offset!");
static_assert(offsetof(ATrainCar, DestroyBuildings) == 0x0003A8, "Member 'ATrainCar::DestroyBuildings' has a wrong offset!");
static_assert(offsetof(ATrainCar, DestroyOnlyTargetPlayerBuilds) == 0x0003D0, "Member 'ATrainCar::DestroyOnlyTargetPlayerBuilds' has a wrong offset!");
static_assert(offsetof(ATrainCar, DestructionActorTags) == 0x0003F8, "Member 'ATrainCar::DestructionActorTags' has a wrong offset!");
static_assert(offsetof(ATrainCar, DestructionIgnoredActorTags) == 0x000418, "Member 'ATrainCar::DestructionIgnoredActorTags' has a wrong offset!");
static_assert(offsetof(ATrainCar, DestructionAsyncTargetingHandle) == 0x000438, "Member 'ATrainCar::DestructionAsyncTargetingHandle' has a wrong offset!");
static_assert(offsetof(ATrainCar, ImpulseAsyncTargetingHandle) == 0x00043C, "Member 'ATrainCar::ImpulseAsyncTargetingHandle' has a wrong offset!");

// Class TrainRuntime.TrainConfig
// 0x0068 (0x0098 - 0x0030)
class UTrainConfig final : public UPrimaryDataAsset
{
public:
	TSubclassOf<class UFortTrainManager>          TrainManagerClass;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class ATrainCar>>          Cars;                                              // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MoveSpeed;                                         // 0x0048(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DefaultConnectorLength;                            // 0x0070(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TrainConfig">();
	}
	static class UTrainConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTrainConfig>();
	}
};
static_assert(alignof(UTrainConfig) == 0x000008, "Wrong alignment on UTrainConfig");
static_assert(sizeof(UTrainConfig) == 0x000098, "Wrong size on UTrainConfig");
static_assert(offsetof(UTrainConfig, TrainManagerClass) == 0x000030, "Member 'UTrainConfig::TrainManagerClass' has a wrong offset!");
static_assert(offsetof(UTrainConfig, Cars) == 0x000038, "Member 'UTrainConfig::Cars' has a wrong offset!");
static_assert(offsetof(UTrainConfig, MoveSpeed) == 0x000048, "Member 'UTrainConfig::MoveSpeed' has a wrong offset!");
static_assert(offsetof(UTrainConfig, DefaultConnectorLength) == 0x000070, "Member 'UTrainConfig::DefaultConnectorLength' has a wrong offset!");

// Class TrainRuntime.FortTrainManager
// 0x0148 (0x0250 - 0x0108)
class UFortTrainManager final : public UMovementComponent
{
public:
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bProceduralCarOrder;                               // 0x0118(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CarTable;                                          // 0x0120(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDataTableRowHandle>            CarOrder;                                          // 0x0128(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         DefaultConnectorLength;                            // 0x0138(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseMoveSpeed;                                     // 0x013C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         TruckLocationTolerance;                            // 0x0140(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxIterations;                                     // 0x0168(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxErrorOffset;                                    // 0x0190(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ErrorCatchupSpeedModifier;                         // 0x01B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class AFortTrainRail*                         Rail;                                              // 0x01E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FTrainCarRuntimeData>           Cars;                                              // 0x01E8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F8[0x10];                                     // 0x01F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTrainMovementData                     ReplicatedMovementData;                            // 0x0208(0x0010)(Net, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_218[0x18];                                     // 0x0218(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioShapeLineListComponent*           CachedAudioShapeLineList;                          // 0x0230(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_238[0x18];                                     // 0x0238(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MoveAlongRail(float DeltaDistance, bool bUpdateReplicatedMovementData);
	void MoveToPositionOnRail(float RailDistance, bool bUpdateReplicatedMovementData);
	void MoveToPositionOnRailAtCurrentServerTime(bool bUpdateReplicatedMovementData);
	void MoveToTimeAlongRail(float Time, bool bUpdateReplicatedMovementData);
	void OnRep_Rail();
	void PlaceOnRails();

	struct FVector GetWorldLocationAtServerTime(float ServerTime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTrainManager">();
	}
	static class UFortTrainManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTrainManager>();
	}
};
static_assert(alignof(UFortTrainManager) == 0x000008, "Wrong alignment on UFortTrainManager");
static_assert(sizeof(UFortTrainManager) == 0x000250, "Wrong size on UFortTrainManager");
static_assert(offsetof(UFortTrainManager, bProceduralCarOrder) == 0x000118, "Member 'UFortTrainManager::bProceduralCarOrder' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, CarTable) == 0x000120, "Member 'UFortTrainManager::CarTable' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, CarOrder) == 0x000128, "Member 'UFortTrainManager::CarOrder' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, DefaultConnectorLength) == 0x000138, "Member 'UFortTrainManager::DefaultConnectorLength' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, BaseMoveSpeed) == 0x00013C, "Member 'UFortTrainManager::BaseMoveSpeed' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, TruckLocationTolerance) == 0x000140, "Member 'UFortTrainManager::TruckLocationTolerance' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, MaxIterations) == 0x000168, "Member 'UFortTrainManager::MaxIterations' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, MaxErrorOffset) == 0x000190, "Member 'UFortTrainManager::MaxErrorOffset' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, ErrorCatchupSpeedModifier) == 0x0001B8, "Member 'UFortTrainManager::ErrorCatchupSpeedModifier' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, Rail) == 0x0001E0, "Member 'UFortTrainManager::Rail' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, Cars) == 0x0001E8, "Member 'UFortTrainManager::Cars' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, ReplicatedMovementData) == 0x000208, "Member 'UFortTrainManager::ReplicatedMovementData' has a wrong offset!");
static_assert(offsetof(UFortTrainManager, CachedAudioShapeLineList) == 0x000230, "Member 'UFortTrainManager::CachedAudioShapeLineList' has a wrong offset!");

// Class TrainRuntime.FortTrainStationComponent
// 0x00B0 (0x02D0 - 0x0220)
class UFortTrainStationComponent final : public USceneComponent
{
public:
	struct FGameplayTag                           IdentifierTag;                                     // 0x0220(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         EnterLength;                                       // 0x0228(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CoastLength;                                       // 0x0250(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitLength;                                        // 0x0278(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpeedMultiplier;                                   // 0x02A0(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTrainStationComponent">();
	}
	static class UFortTrainStationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTrainStationComponent>();
	}
};
static_assert(alignof(UFortTrainStationComponent) == 0x000010, "Wrong alignment on UFortTrainStationComponent");
static_assert(sizeof(UFortTrainStationComponent) == 0x0002D0, "Wrong size on UFortTrainStationComponent");
static_assert(offsetof(UFortTrainStationComponent, IdentifierTag) == 0x000220, "Member 'UFortTrainStationComponent::IdentifierTag' has a wrong offset!");
static_assert(offsetof(UFortTrainStationComponent, EnterLength) == 0x000228, "Member 'UFortTrainStationComponent::EnterLength' has a wrong offset!");
static_assert(offsetof(UFortTrainStationComponent, CoastLength) == 0x000250, "Member 'UFortTrainStationComponent::CoastLength' has a wrong offset!");
static_assert(offsetof(UFortTrainStationComponent, ExitLength) == 0x000278, "Member 'UFortTrainStationComponent::ExitLength' has a wrong offset!");
static_assert(offsetof(UFortTrainStationComponent, SpeedMultiplier) == 0x0002A0, "Member 'UFortTrainStationComponent::SpeedMultiplier' has a wrong offset!");

// Class TrainRuntime.FortTrainRail
// 0x0058 (0x02E8 - 0x0290)
class AFortTrainRail final : public AActor
{
public:
	TSoftObjectPtr<class ALandscapeSplineActor>   LandscapeSplineActor;                              // 0x0290(0x0020)(Edit, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bMinimizeSplineComponent;                          // 0x02B0(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTangentDifference;                              // 0x02B4(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USplineComponent*                       SplineComponent;                                   // 0x02B8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C0[0x28];                                     // 0x02C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GenerateSpline() const;
	float GetTimeFromNextTrainArrival(const struct FGameplayTag& StationIdentifierTag) const;
	void ValidateSpline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTrainRail">();
	}
	static class AFortTrainRail* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortTrainRail>();
	}
};
static_assert(alignof(AFortTrainRail) == 0x000008, "Wrong alignment on AFortTrainRail");
static_assert(sizeof(AFortTrainRail) == 0x0002E8, "Wrong size on AFortTrainRail");
static_assert(offsetof(AFortTrainRail, LandscapeSplineActor) == 0x000290, "Member 'AFortTrainRail::LandscapeSplineActor' has a wrong offset!");
static_assert(offsetof(AFortTrainRail, bMinimizeSplineComponent) == 0x0002B0, "Member 'AFortTrainRail::bMinimizeSplineComponent' has a wrong offset!");
static_assert(offsetof(AFortTrainRail, MaxTangentDifference) == 0x0002B4, "Member 'AFortTrainRail::MaxTangentDifference' has a wrong offset!");
static_assert(offsetof(AFortTrainRail, SplineComponent) == 0x0002B8, "Member 'AFortTrainRail::SplineComponent' has a wrong offset!");

// Class TrainRuntime.FortTrainMovingPlatformComponent
// 0x0038 (0x0218 - 0x01E0)
class UFortTrainMovingPlatformComponent final : public UFortMovingPlatformComponent
{
public:
	class UCurveVector*                           PickupPushCurve;                                   // 0x01E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         PickupTeleportDistance;                            // 0x01E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_210[0x8];                                      // 0x0210(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortTrainManager* FindOrGetTrainManager() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTrainMovingPlatformComponent">();
	}
	static class UFortTrainMovingPlatformComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTrainMovingPlatformComponent>();
	}
};
static_assert(alignof(UFortTrainMovingPlatformComponent) == 0x000008, "Wrong alignment on UFortTrainMovingPlatformComponent");
static_assert(sizeof(UFortTrainMovingPlatformComponent) == 0x000218, "Wrong size on UFortTrainMovingPlatformComponent");
static_assert(offsetof(UFortTrainMovingPlatformComponent, PickupPushCurve) == 0x0001E0, "Member 'UFortTrainMovingPlatformComponent::PickupPushCurve' has a wrong offset!");
static_assert(offsetof(UFortTrainMovingPlatformComponent, PickupTeleportDistance) == 0x0001E8, "Member 'UFortTrainMovingPlatformComponent::PickupTeleportDistance' has a wrong offset!");

}

