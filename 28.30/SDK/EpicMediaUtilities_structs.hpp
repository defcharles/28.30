#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicMediaUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct EpicMediaUtilities.EpicMediaImageDataExt
// 0x0030 (0x0030 - 0x0000)
struct FEpicMediaImageDataExt
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullUrl;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMediaImageDataExt) == 0x000008, "Wrong alignment on FEpicMediaImageDataExt");
static_assert(sizeof(FEpicMediaImageDataExt) == 0x000030, "Wrong size on FEpicMediaImageDataExt");
static_assert(offsetof(FEpicMediaImageDataExt, URL) == 0x000000, "Member 'FEpicMediaImageDataExt::URL' has a wrong offset!");
static_assert(offsetof(FEpicMediaImageDataExt, FullUrl) == 0x000010, "Member 'FEpicMediaImageDataExt::FullUrl' has a wrong offset!");
static_assert(offsetof(FEpicMediaImageDataExt, Width) == 0x000020, "Member 'FEpicMediaImageDataExt::Width' has a wrong offset!");
static_assert(offsetof(FEpicMediaImageDataExt, Height) == 0x000024, "Member 'FEpicMediaImageDataExt::Height' has a wrong offset!");
static_assert(offsetof(FEpicMediaImageDataExt, AspectRatio) == 0x000028, "Member 'FEpicMediaImageDataExt::AspectRatio' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaAudioOnlyPeriodDataExt
// 0x0028 (0x0028 - 0x0000)
struct FEpicMediaAudioOnlyPeriodDataExt
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bColorSet;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StartFrame;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        EndFrame;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaAudioOnlyPeriodDataExt) == 0x000008, "Wrong alignment on FEpicMediaAudioOnlyPeriodDataExt");
static_assert(sizeof(FEpicMediaAudioOnlyPeriodDataExt) == 0x000028, "Wrong size on FEpicMediaAudioOnlyPeriodDataExt");
static_assert(offsetof(FEpicMediaAudioOnlyPeriodDataExt, Color) == 0x000000, "Member 'FEpicMediaAudioOnlyPeriodDataExt::Color' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioOnlyPeriodDataExt, bColorSet) == 0x000010, "Member 'FEpicMediaAudioOnlyPeriodDataExt::bColorSet' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioOnlyPeriodDataExt, StartFrame) == 0x000018, "Member 'FEpicMediaAudioOnlyPeriodDataExt::StartFrame' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioOnlyPeriodDataExt, EndFrame) == 0x000020, "Member 'FEpicMediaAudioOnlyPeriodDataExt::EndFrame' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaVolumeChangeDataExt
// 0x0028 (0x0028 - 0x0000)
struct FEpicMediaVolumeChangeDataExt
{
public:
	double                                        Frame;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Level;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Lerp;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMediaVolumeChangeDataExt) == 0x000008, "Wrong alignment on FEpicMediaVolumeChangeDataExt");
static_assert(sizeof(FEpicMediaVolumeChangeDataExt) == 0x000028, "Wrong size on FEpicMediaVolumeChangeDataExt");
static_assert(offsetof(FEpicMediaVolumeChangeDataExt, Frame) == 0x000000, "Member 'FEpicMediaVolumeChangeDataExt::Frame' has a wrong offset!");
static_assert(offsetof(FEpicMediaVolumeChangeDataExt, Level) == 0x000008, "Member 'FEpicMediaVolumeChangeDataExt::Level' has a wrong offset!");
static_assert(offsetof(FEpicMediaVolumeChangeDataExt, Lerp) == 0x000010, "Member 'FEpicMediaVolumeChangeDataExt::Lerp' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaPlaylistExt
// 0x00A0 (0x00A0 - 0x0000)
struct FEpicMediaPlaylistExt
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RelUrl;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        duration;                                          // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FPS;                                               // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEpicMediaImageDataExt>         Images;                                            // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEpicMediaAudioOnlyPeriodDataExt> AudioOnlyPeriods;                                  // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEpicMediaVolumeChangeDataExt>  VolumeChanges;                                     // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        SkipBoundaryTime;                                  // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PreEndEventTime;                                   // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaPlaylistExt) == 0x000008, "Wrong alignment on FEpicMediaPlaylistExt");
static_assert(sizeof(FEpicMediaPlaylistExt) == 0x0000A0, "Wrong size on FEpicMediaPlaylistExt");
static_assert(offsetof(FEpicMediaPlaylistExt, Language) == 0x000000, "Member 'FEpicMediaPlaylistExt::Language' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, Type) == 0x000010, "Member 'FEpicMediaPlaylistExt::Type' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, URL) == 0x000020, "Member 'FEpicMediaPlaylistExt::URL' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, RelUrl) == 0x000030, "Member 'FEpicMediaPlaylistExt::RelUrl' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, Data) == 0x000040, "Member 'FEpicMediaPlaylistExt::Data' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, duration) == 0x000050, "Member 'FEpicMediaPlaylistExt::duration' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, FPS) == 0x000058, "Member 'FEpicMediaPlaylistExt::FPS' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, Images) == 0x000060, "Member 'FEpicMediaPlaylistExt::Images' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, AudioOnlyPeriods) == 0x000070, "Member 'FEpicMediaPlaylistExt::AudioOnlyPeriods' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, VolumeChanges) == 0x000080, "Member 'FEpicMediaPlaylistExt::VolumeChanges' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, SkipBoundaryTime) == 0x000090, "Member 'FEpicMediaPlaylistExt::SkipBoundaryTime' has a wrong offset!");
static_assert(offsetof(FEpicMediaPlaylistExt, PreEndEventTime) == 0x000098, "Member 'FEpicMediaPlaylistExt::PreEndEventTime' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaRegionLockExt
// 0x00A8 (0x00A8 - 0x0000)
struct FEpicMediaRegionLockExt
{
public:
	bool                                          AllowOnError;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AllowList;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DenyList;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Limits;                                            // 0x0038(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ContentId;                                         // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMediaRegionLockExt) == 0x000008, "Wrong alignment on FEpicMediaRegionLockExt");
static_assert(sizeof(FEpicMediaRegionLockExt) == 0x0000A8, "Wrong size on FEpicMediaRegionLockExt");
static_assert(offsetof(FEpicMediaRegionLockExt, AllowOnError) == 0x000000, "Member 'FEpicMediaRegionLockExt::AllowOnError' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, Type) == 0x000008, "Member 'FEpicMediaRegionLockExt::Type' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, AllowList) == 0x000018, "Member 'FEpicMediaRegionLockExt::AllowList' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, DenyList) == 0x000028, "Member 'FEpicMediaRegionLockExt::DenyList' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, Limits) == 0x000038, "Member 'FEpicMediaRegionLockExt::Limits' has a wrong offset!");
static_assert(offsetof(FEpicMediaRegionLockExt, ContentId) == 0x000088, "Member 'FEpicMediaRegionLockExt::ContentId' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaAudioMetadataTrackIndicesExt
// 0x0010 (0x0010 - 0x0000)
struct FEpicMediaAudioMetadataTrackIndicesExt final
{
public:
	TArray<int32>                                 Indices;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaAudioMetadataTrackIndicesExt) == 0x000008, "Wrong alignment on FEpicMediaAudioMetadataTrackIndicesExt");
static_assert(sizeof(FEpicMediaAudioMetadataTrackIndicesExt) == 0x000010, "Wrong size on FEpicMediaAudioMetadataTrackIndicesExt");
static_assert(offsetof(FEpicMediaAudioMetadataTrackIndicesExt, Indices) == 0x000000, "Member 'FEpicMediaAudioMetadataTrackIndicesExt::Indices' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaAudioMetadataTrackExt
// 0x0050 (0x0050 - 0x0000)
struct FEpicMediaAudioMetadataTrackExt final
{
public:
	TMap<class FString, struct FEpicMediaAudioMetadataTrackIndicesExt> TrackData;                                         // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaAudioMetadataTrackExt) == 0x000008, "Wrong alignment on FEpicMediaAudioMetadataTrackExt");
static_assert(sizeof(FEpicMediaAudioMetadataTrackExt) == 0x000050, "Wrong size on FEpicMediaAudioMetadataTrackExt");
static_assert(offsetof(FEpicMediaAudioMetadataTrackExt, TrackData) == 0x000000, "Member 'FEpicMediaAudioMetadataTrackExt::TrackData' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaAudioMetadataDataExt
// 0x00B0 (0x00B0 - 0x0000)
struct FEpicMediaAudioMetadataDataExt final
{
public:
	class FString                                 ShortName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SongID;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Artist;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Album;                                             // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Genre;                                             // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Year;                                              // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    Difficulty;                                        // 0x0060(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaAudioMetadataDataExt) == 0x000008, "Wrong alignment on FEpicMediaAudioMetadataDataExt");
static_assert(sizeof(FEpicMediaAudioMetadataDataExt) == 0x0000B0, "Wrong size on FEpicMediaAudioMetadataDataExt");
static_assert(offsetof(FEpicMediaAudioMetadataDataExt, ShortName) == 0x000000, "Member 'FEpicMediaAudioMetadataDataExt::ShortName' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataDataExt, SongID) == 0x000010, "Member 'FEpicMediaAudioMetadataDataExt::SongID' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataDataExt, Title) == 0x000018, "Member 'FEpicMediaAudioMetadataDataExt::Title' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataDataExt, Artist) == 0x000028, "Member 'FEpicMediaAudioMetadataDataExt::Artist' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataDataExt, Album) == 0x000038, "Member 'FEpicMediaAudioMetadataDataExt::Album' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataDataExt, Genre) == 0x000048, "Member 'FEpicMediaAudioMetadataDataExt::Genre' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataDataExt, Year) == 0x000058, "Member 'FEpicMediaAudioMetadataDataExt::Year' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataDataExt, Difficulty) == 0x000060, "Member 'FEpicMediaAudioMetadataDataExt::Difficulty' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaAudioMetadataExt
// 0x0130 (0x0130 - 0x0000)
struct FEpicMediaAudioMetadataExt final
{
public:
	TMap<class FString, struct FEpicMediaAudioMetadataTrackIndicesExt> Tracks;                                            // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<float>                                 Pans;                                              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Volumes;                                           // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Midi;                                              // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEpicMediaAudioMetadataDataExt         MetadataData;                                      // 0x0080(0x00B0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaAudioMetadataExt) == 0x000008, "Wrong alignment on FEpicMediaAudioMetadataExt");
static_assert(sizeof(FEpicMediaAudioMetadataExt) == 0x000130, "Wrong size on FEpicMediaAudioMetadataExt");
static_assert(offsetof(FEpicMediaAudioMetadataExt, Tracks) == 0x000000, "Member 'FEpicMediaAudioMetadataExt::Tracks' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataExt, Pans) == 0x000050, "Member 'FEpicMediaAudioMetadataExt::Pans' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataExt, Volumes) == 0x000060, "Member 'FEpicMediaAudioMetadataExt::Volumes' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataExt, Midi) == 0x000070, "Member 'FEpicMediaAudioMetadataExt::Midi' has a wrong offset!");
static_assert(offsetof(FEpicMediaAudioMetadataExt, MetadataData) == 0x000080, "Member 'FEpicMediaAudioMetadataExt::MetadataData' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaExtraMetadataExt
// 0x0058 (0x0058 - 0x0000)
struct FEpicMediaExtraMetadataExt final
{
public:
	class FString                                 AssetId;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BaseURLs;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 BaseURL;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Version;                                           // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ExpiresAt;                                         // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsCaching;                                  // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSharelock;                                        // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserContentProtection;                             // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaExtraMetadataExt) == 0x000008, "Wrong alignment on FEpicMediaExtraMetadataExt");
static_assert(sizeof(FEpicMediaExtraMetadataExt) == 0x000058, "Wrong size on FEpicMediaExtraMetadataExt");
static_assert(offsetof(FEpicMediaExtraMetadataExt, AssetId) == 0x000000, "Member 'FEpicMediaExtraMetadataExt::AssetId' has a wrong offset!");
static_assert(offsetof(FEpicMediaExtraMetadataExt, BaseURLs) == 0x000010, "Member 'FEpicMediaExtraMetadataExt::BaseURLs' has a wrong offset!");
static_assert(offsetof(FEpicMediaExtraMetadataExt, BaseURL) == 0x000020, "Member 'FEpicMediaExtraMetadataExt::BaseURL' has a wrong offset!");
static_assert(offsetof(FEpicMediaExtraMetadataExt, Version) == 0x000030, "Member 'FEpicMediaExtraMetadataExt::Version' has a wrong offset!");
static_assert(offsetof(FEpicMediaExtraMetadataExt, ExpiresAt) == 0x000038, "Member 'FEpicMediaExtraMetadataExt::ExpiresAt' has a wrong offset!");
static_assert(offsetof(FEpicMediaExtraMetadataExt, bSupportsCaching) == 0x000040, "Member 'FEpicMediaExtraMetadataExt::bSupportsCaching' has a wrong offset!");
static_assert(offsetof(FEpicMediaExtraMetadataExt, bSharelock) == 0x000041, "Member 'FEpicMediaExtraMetadataExt::bSharelock' has a wrong offset!");
static_assert(offsetof(FEpicMediaExtraMetadataExt, UserContentProtection) == 0x000048, "Member 'FEpicMediaExtraMetadataExt::UserContentProtection' has a wrong offset!");

// ScriptStruct EpicMediaUtilities.EpicMediaMetadataExt
// 0x02E8 (0x02E8 - 0x0000)
struct FEpicMediaMetadataExt
{
public:
	TArray<struct FEpicMediaPlaylistExt>          Playlists;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEpicMediaPlaylistExt>          StateStreamPlaylists;                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEpicMediaPlaylistExt>          SelectedPlaylists;                                 // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Envelope;                                          // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Limits;                                            // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subtitles;                                         // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserContentProtection;                             // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sharelock;                                         // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AudioOnly;                                         // 0x0081(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AspectRatio;                                       // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartySync;                                         // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Live;                                              // 0x0089(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DenyHTTPCode;                                      // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEpicMediaRegionLockExt                RegionLockData;                                    // 0x00A0(0x00A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FEpicMediaAudioMetadataExt             AudioMetadata;                                     // 0x0148(0x0130)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bQuicksilverEP;                                    // 0x0278(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEpicMediaExtraMetadataExt             ExtraMetadata;                                     // 0x0280(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x10];                                     // 0x02D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEpicMediaMetadataExt) == 0x000008, "Wrong alignment on FEpicMediaMetadataExt");
static_assert(sizeof(FEpicMediaMetadataExt) == 0x0002E8, "Wrong size on FEpicMediaMetadataExt");
static_assert(offsetof(FEpicMediaMetadataExt, Playlists) == 0x000000, "Member 'FEpicMediaMetadataExt::Playlists' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, StateStreamPlaylists) == 0x000010, "Member 'FEpicMediaMetadataExt::StateStreamPlaylists' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, SelectedPlaylists) == 0x000020, "Member 'FEpicMediaMetadataExt::SelectedPlaylists' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Type) == 0x000030, "Member 'FEpicMediaMetadataExt::Type' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Envelope) == 0x000040, "Member 'FEpicMediaMetadataExt::Envelope' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Limits) == 0x000050, "Member 'FEpicMediaMetadataExt::Limits' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Subtitles) == 0x000060, "Member 'FEpicMediaMetadataExt::Subtitles' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, UserContentProtection) == 0x000070, "Member 'FEpicMediaMetadataExt::UserContentProtection' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Sharelock) == 0x000080, "Member 'FEpicMediaMetadataExt::Sharelock' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, AudioOnly) == 0x000081, "Member 'FEpicMediaMetadataExt::AudioOnly' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, AspectRatio) == 0x000084, "Member 'FEpicMediaMetadataExt::AspectRatio' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, PartySync) == 0x000088, "Member 'FEpicMediaMetadataExt::PartySync' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, Live) == 0x000089, "Member 'FEpicMediaMetadataExt::Live' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, DenyHTTPCode) == 0x000090, "Member 'FEpicMediaMetadataExt::DenyHTTPCode' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, RegionLockData) == 0x0000A0, "Member 'FEpicMediaMetadataExt::RegionLockData' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, AudioMetadata) == 0x000148, "Member 'FEpicMediaMetadataExt::AudioMetadata' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, bQuicksilverEP) == 0x000278, "Member 'FEpicMediaMetadataExt::bQuicksilverEP' has a wrong offset!");
static_assert(offsetof(FEpicMediaMetadataExt, ExtraMetadata) == 0x000280, "Member 'FEpicMediaMetadataExt::ExtraMetadata' has a wrong offset!");

}

