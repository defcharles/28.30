#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_STI_Screen

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_STI_Screen.WBP_STI_Screen_C.ExecuteUbergraph_WBP_STI_Screen
// 0x0028 (0x0028 - 0x0000)
struct WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen) == 0x000008, "Wrong alignment on WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen");
static_assert(sizeof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen) == 0x000028, "Wrong size on WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, EntryPoint) == 0x000000, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable) == 0x000004, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_bool_Variable) == 0x000005, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable_2) == 0x000007, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_bool_Variable_1) == 0x000008, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable_3) == 0x000009, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable_4) == 0x00000A, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_bool_Variable_2) == 0x00000B, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable_5) == 0x00000C, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable_6) == 0x00000D, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_bool_Variable_3) == 0x00000E, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable_7) == 0x00000F, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable_8) == 0x000010, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, K2Node_Select_Default) == 0x000020, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, K2Node_Select_Default_1) == 0x000021, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, K2Node_Select_Default_2) == 0x000022, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, K2Node_Select_Default_3) == 0x000023, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, K2Node_Event_IsDesignTime) == 0x000024, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_byte_Variable_9) == 0x000025, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, Temp_bool_Variable_4) == 0x000026, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen, K2Node_Select_Default_4) == 0x000027, "Member 'WBP_STI_Screen_C_ExecuteUbergraph_WBP_STI_Screen::K2Node_Select_Default_4' has a wrong offset!");

// Function WBP_STI_Screen.WBP_STI_Screen_C.GetSubscriptionVM
// 0x0008 (0x0008 - 0x0000)
struct WBP_STI_Screen_C_GetSubscriptionVM final
{
public:
	class UFortSubscriptionVM*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_STI_Screen_C_GetSubscriptionVM) == 0x000008, "Wrong alignment on WBP_STI_Screen_C_GetSubscriptionVM");
static_assert(sizeof(WBP_STI_Screen_C_GetSubscriptionVM) == 0x000008, "Wrong size on WBP_STI_Screen_C_GetSubscriptionVM");
static_assert(offsetof(WBP_STI_Screen_C_GetSubscriptionVM, ReturnValue) == 0x000000, "Member 'WBP_STI_Screen_C_GetSubscriptionVM::ReturnValue' has a wrong offset!");

// Function WBP_STI_Screen.WBP_STI_Screen_C.On Update Reward Groups
// 0x0050 (0x0050 - 0x0000)
struct WBP_STI_Screen_C_On_Update_Reward_Groups final
{
public:
	TArray<class UFortTemporaryItemsRewardGroupVM*> RewardGroups;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          HasItems;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_STI_ItemsCategoryList_C*           CallFunc_Create_ReturnValue;                       // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFortTemporaryItemsRewardGroupVM*       CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_STI_Screen_C_On_Update_Reward_Groups) == 0x000008, "Wrong alignment on WBP_STI_Screen_C_On_Update_Reward_Groups");
static_assert(sizeof(WBP_STI_Screen_C_On_Update_Reward_Groups) == 0x000050, "Wrong size on WBP_STI_Screen_C_On_Update_Reward_Groups");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, RewardGroups) == 0x000000, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::RewardGroups' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, HasItems) == 0x000010, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::HasItems' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, CallFunc_GetOwningPlayer_ReturnValue) == 0x000028, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, CallFunc_Create_ReturnValue) == 0x000030, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000038, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, CallFunc_Array_Get_Item) == 0x000040, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_On_Update_Reward_Groups, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'WBP_STI_Screen_C_On_Update_Reward_Groups::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_STI_Screen.WBP_STI_Screen_C.OnUpdateExpirationDate
// 0x0020 (0x0020 - 0x0000)
struct WBP_STI_Screen_C_OnUpdateExpirationDate final
{
public:
	struct FDateTime                              ExpirationDate;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetRemainingDaysLabel_ReturnValue;        // 0x0008(0x0018)()
};
static_assert(alignof(WBP_STI_Screen_C_OnUpdateExpirationDate) == 0x000008, "Wrong alignment on WBP_STI_Screen_C_OnUpdateExpirationDate");
static_assert(sizeof(WBP_STI_Screen_C_OnUpdateExpirationDate) == 0x000020, "Wrong size on WBP_STI_Screen_C_OnUpdateExpirationDate");
static_assert(offsetof(WBP_STI_Screen_C_OnUpdateExpirationDate, ExpirationDate) == 0x000000, "Member 'WBP_STI_Screen_C_OnUpdateExpirationDate::ExpirationDate' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_OnUpdateExpirationDate, CallFunc_GetRemainingDaysLabel_ReturnValue) == 0x000008, "Member 'WBP_STI_Screen_C_OnUpdateExpirationDate::CallFunc_GetRemainingDaysLabel_ReturnValue' has a wrong offset!");

// Function WBP_STI_Screen.WBP_STI_Screen_C.OnUpdateSubscriptionState
// 0x0001 (0x0001 - 0x0000)
struct WBP_STI_Screen_C_OnUpdateSubscriptionState final
{
public:
	bool                                          IsSubscriptionOwned;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_STI_Screen_C_OnUpdateSubscriptionState) == 0x000001, "Wrong alignment on WBP_STI_Screen_C_OnUpdateSubscriptionState");
static_assert(sizeof(WBP_STI_Screen_C_OnUpdateSubscriptionState) == 0x000001, "Wrong size on WBP_STI_Screen_C_OnUpdateSubscriptionState");
static_assert(offsetof(WBP_STI_Screen_C_OnUpdateSubscriptionState, IsSubscriptionOwned) == 0x000000, "Member 'WBP_STI_Screen_C_OnUpdateSubscriptionState::IsSubscriptionOwned' has a wrong offset!");

// Function WBP_STI_Screen.WBP_STI_Screen_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_STI_Screen_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_STI_Screen_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_STI_Screen_C_PreConstruct");
static_assert(sizeof(WBP_STI_Screen_C_PreConstruct) == 0x000001, "Wrong size on WBP_STI_Screen_C_PreConstruct");
static_assert(offsetof(WBP_STI_Screen_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_STI_Screen_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_STI_Screen.WBP_STI_Screen_C.SetFootnoteColor
// 0x0040 (0x0040 - 0x0000)
struct WBP_STI_Screen_C_SetFootnoteColor final
{
public:
	bool                                          IsSubscribed;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0004(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0018(0x0014)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x002C(0x0014)()
};
static_assert(alignof(WBP_STI_Screen_C_SetFootnoteColor) == 0x000004, "Wrong alignment on WBP_STI_Screen_C_SetFootnoteColor");
static_assert(sizeof(WBP_STI_Screen_C_SetFootnoteColor) == 0x000040, "Wrong size on WBP_STI_Screen_C_SetFootnoteColor");
static_assert(offsetof(WBP_STI_Screen_C_SetFootnoteColor, IsSubscribed) == 0x000000, "Member 'WBP_STI_Screen_C_SetFootnoteColor::IsSubscribed' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_SetFootnoteColor, Temp_bool_Variable) == 0x000001, "Member 'WBP_STI_Screen_C_SetFootnoteColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_SetFootnoteColor, K2Node_MakeStruct_SlateColor) == 0x000004, "Member 'WBP_STI_Screen_C_SetFootnoteColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_SetFootnoteColor, K2Node_MakeStruct_SlateColor_1) == 0x000018, "Member 'WBP_STI_Screen_C_SetFootnoteColor::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_SetFootnoteColor, K2Node_Select_Default) == 0x00002C, "Member 'WBP_STI_Screen_C_SetFootnoteColor::K2Node_Select_Default' has a wrong offset!");

// Function WBP_STI_Screen.WBP_STI_Screen_C.SetNoItemsTextColor
// 0x0040 (0x0040 - 0x0000)
struct WBP_STI_Screen_C_SetNoItemsTextColor final
{
public:
	bool                                          IsSubscribed;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0004(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0018(0x0014)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x002C(0x0014)()
};
static_assert(alignof(WBP_STI_Screen_C_SetNoItemsTextColor) == 0x000004, "Wrong alignment on WBP_STI_Screen_C_SetNoItemsTextColor");
static_assert(sizeof(WBP_STI_Screen_C_SetNoItemsTextColor) == 0x000040, "Wrong size on WBP_STI_Screen_C_SetNoItemsTextColor");
static_assert(offsetof(WBP_STI_Screen_C_SetNoItemsTextColor, IsSubscribed) == 0x000000, "Member 'WBP_STI_Screen_C_SetNoItemsTextColor::IsSubscribed' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_SetNoItemsTextColor, Temp_bool_Variable) == 0x000001, "Member 'WBP_STI_Screen_C_SetNoItemsTextColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_SetNoItemsTextColor, K2Node_MakeStruct_SlateColor) == 0x000004, "Member 'WBP_STI_Screen_C_SetNoItemsTextColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_SetNoItemsTextColor, K2Node_MakeStruct_SlateColor_1) == 0x000018, "Member 'WBP_STI_Screen_C_SetNoItemsTextColor::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_SetNoItemsTextColor, K2Node_Select_Default) == 0x00002C, "Member 'WBP_STI_Screen_C_SetNoItemsTextColor::K2Node_Select_Default' has a wrong offset!");

// Function WBP_STI_Screen.WBP_STI_Screen_C.UpdateNoItemsMessage
// 0x0009 (0x0009 - 0x0000)
struct WBP_STI_Screen_C_UpdateNoItemsMessage final
{
public:
	bool                                          HasItems;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_STI_Screen_C_UpdateNoItemsMessage) == 0x000001, "Wrong alignment on WBP_STI_Screen_C_UpdateNoItemsMessage");
static_assert(sizeof(WBP_STI_Screen_C_UpdateNoItemsMessage) == 0x000009, "Wrong size on WBP_STI_Screen_C_UpdateNoItemsMessage");
static_assert(offsetof(WBP_STI_Screen_C_UpdateNoItemsMessage, HasItems) == 0x000000, "Member 'WBP_STI_Screen_C_UpdateNoItemsMessage::HasItems' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_UpdateNoItemsMessage, Temp_byte_Variable) == 0x000001, "Member 'WBP_STI_Screen_C_UpdateNoItemsMessage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_UpdateNoItemsMessage, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_STI_Screen_C_UpdateNoItemsMessage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_UpdateNoItemsMessage, Temp_bool_Variable) == 0x000003, "Member 'WBP_STI_Screen_C_UpdateNoItemsMessage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_UpdateNoItemsMessage, Temp_byte_Variable_2) == 0x000004, "Member 'WBP_STI_Screen_C_UpdateNoItemsMessage::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_UpdateNoItemsMessage, Temp_byte_Variable_3) == 0x000005, "Member 'WBP_STI_Screen_C_UpdateNoItemsMessage::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_UpdateNoItemsMessage, K2Node_Select_Default) == 0x000006, "Member 'WBP_STI_Screen_C_UpdateNoItemsMessage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_UpdateNoItemsMessage, Temp_bool_Variable_1) == 0x000007, "Member 'WBP_STI_Screen_C_UpdateNoItemsMessage::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_Screen_C_UpdateNoItemsMessage, K2Node_Select_Default_1) == 0x000008, "Member 'WBP_STI_Screen_C_UpdateNoItemsMessage::K2Node_Select_Default_1' has a wrong offset!");

}

