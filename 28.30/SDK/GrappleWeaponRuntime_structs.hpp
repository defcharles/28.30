#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrappleWeaponRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct GrappleWeaponRuntime.GrappleWeaponLedgeConfig
// 0x0078 (0x0078 - 0x0000)
struct FGrappleWeaponLedgeConfig final
{
public:
	struct FScalableFloat                         VerticalSurfaceThreshold;                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LedgeHeightCapsuleMultiplier;                      // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ShouldTreatWalkableSurfaceAsLedge;                 // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrappleWeaponLedgeConfig) == 0x000008, "Wrong alignment on FGrappleWeaponLedgeConfig");
static_assert(sizeof(FGrappleWeaponLedgeConfig) == 0x000078, "Wrong size on FGrappleWeaponLedgeConfig");
static_assert(offsetof(FGrappleWeaponLedgeConfig, VerticalSurfaceThreshold) == 0x000000, "Member 'FGrappleWeaponLedgeConfig::VerticalSurfaceThreshold' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponLedgeConfig, LedgeHeightCapsuleMultiplier) == 0x000028, "Member 'FGrappleWeaponLedgeConfig::LedgeHeightCapsuleMultiplier' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponLedgeConfig, ShouldTreatWalkableSurfaceAsLedge) == 0x000050, "Member 'FGrappleWeaponLedgeConfig::ShouldTreatWalkableSurfaceAsLedge' has a wrong offset!");

// ScriptStruct GrappleWeaponRuntime.GrappleWeaponTargetingConfig
// 0x0178 (0x0178 - 0x0000)
struct FGrappleWeaponTargetingConfig final
{
public:
	struct FGrappleWeaponLedgeConfig              LedgeConfig;                                       // 0x0000(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         PawnTraceRadius;                                   // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SecondaryTraceRadius;                              // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SecondaryTraceStartDistance;                       // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinHitDistance;                                    // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxHitDistance;                                    // 0x0118(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TraceDownDistance;                                 // 0x0140(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ProjectileRadius;                                  // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceForwardOffset;                                // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceMaxAngle;                                     // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGrappleWeaponTargetingConfig) == 0x000008, "Wrong alignment on FGrappleWeaponTargetingConfig");
static_assert(sizeof(FGrappleWeaponTargetingConfig) == 0x000178, "Wrong size on FGrappleWeaponTargetingConfig");
static_assert(offsetof(FGrappleWeaponTargetingConfig, LedgeConfig) == 0x000000, "Member 'FGrappleWeaponTargetingConfig::LedgeConfig' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetingConfig, PawnTraceRadius) == 0x000078, "Member 'FGrappleWeaponTargetingConfig::PawnTraceRadius' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetingConfig, SecondaryTraceRadius) == 0x0000A0, "Member 'FGrappleWeaponTargetingConfig::SecondaryTraceRadius' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetingConfig, SecondaryTraceStartDistance) == 0x0000C8, "Member 'FGrappleWeaponTargetingConfig::SecondaryTraceStartDistance' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetingConfig, MinHitDistance) == 0x0000F0, "Member 'FGrappleWeaponTargetingConfig::MinHitDistance' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetingConfig, MaxHitDistance) == 0x000118, "Member 'FGrappleWeaponTargetingConfig::MaxHitDistance' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetingConfig, TraceDownDistance) == 0x000140, "Member 'FGrappleWeaponTargetingConfig::TraceDownDistance' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetingConfig, ProjectileRadius) == 0x000168, "Member 'FGrappleWeaponTargetingConfig::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetingConfig, TraceForwardOffset) == 0x00016C, "Member 'FGrappleWeaponTargetingConfig::TraceForwardOffset' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetingConfig, TraceMaxAngle) == 0x000170, "Member 'FGrappleWeaponTargetingConfig::TraceMaxAngle' has a wrong offset!");

// ScriptStruct GrappleWeaponRuntime.GrappleWeaponTargetInfo
// 0x0038 (0x0038 - 0x0000)
struct FGrappleWeaponTargetInfo final
{
public:
	bool                                          bHitTarget;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         TargetComponent;                                   // 0x000C(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetPoint;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistance;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGrappleWeaponTargetInfo) == 0x000008, "Wrong alignment on FGrappleWeaponTargetInfo");
static_assert(sizeof(FGrappleWeaponTargetInfo) == 0x000038, "Wrong size on FGrappleWeaponTargetInfo");
static_assert(offsetof(FGrappleWeaponTargetInfo, bHitTarget) == 0x000000, "Member 'FGrappleWeaponTargetInfo::bHitTarget' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetInfo, TargetActor) == 0x000004, "Member 'FGrappleWeaponTargetInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetInfo, TargetComponent) == 0x00000C, "Member 'FGrappleWeaponTargetInfo::TargetComponent' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetInfo, TargetPoint) == 0x000018, "Member 'FGrappleWeaponTargetInfo::TargetPoint' has a wrong offset!");
static_assert(offsetof(FGrappleWeaponTargetInfo, HitDistance) == 0x000030, "Member 'FGrappleWeaponTargetInfo::HitDistance' has a wrong offset!");

}

