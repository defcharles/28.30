#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_EventDetails

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_EventDetails.WBP_EventDetails_C.ExecuteUbergraph_WBP_EventDetails
// 0x00C8 (0x00C8 - 0x0000)
struct WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_Specified_Color;                // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_OutEventName;                         // 0x0018(0x0018)(ConstParm)
	class FText                                   K2Node_Event_OutEventDescription;                  // 0x0030(0x0018)(ConstParm)
	class FText                                   K2Node_Event_EventTimeRemainingText;               // 0x0048(0x0018)(ConstParm)
	struct FTimespan                              K2Node_Event_TimeRemaining;                        // 0x0060(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UFortEventScreenData*             K2Node_Event_InEventScreenData;                    // 0x0068(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0070(0x0014)()
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0088(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x009C(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x00B0(0x0014)()
};
static_assert(alignof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails) == 0x000008, "Wrong alignment on WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails");
static_assert(sizeof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails) == 0x0000C8, "Wrong size on WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, EntryPoint) == 0x000000, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_CustomEvent_Specified_Color) == 0x000004, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_CustomEvent_Specified_Color' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_Event_OutEventName) == 0x000018, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_Event_OutEventName' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_Event_OutEventDescription) == 0x000030, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_Event_OutEventDescription' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_Event_EventTimeRemainingText) == 0x000048, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_Event_EventTimeRemainingText' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_Event_TimeRemaining) == 0x000060, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_Event_TimeRemaining' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_Event_InEventScreenData) == 0x000068, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_Event_InEventScreenData' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_MakeStruct_SlateColor) == 0x000070, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_Event_IsDesignTime) == 0x000084, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_MakeStruct_SlateColor_1) == 0x000088, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_MakeStruct_SlateColor_2) == 0x00009C, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails, K2Node_MakeStruct_SlateColor_3) == 0x0000B0, "Member 'WBP_EventDetails_C_ExecuteUbergraph_WBP_EventDetails::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");

// Function WBP_EventDetails.WBP_EventDetails_C.OnModuleInitialized
// 0x0008 (0x0008 - 0x0000)
struct WBP_EventDetails_C_OnModuleInitialized final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EventDetails_C_OnModuleInitialized) == 0x000008, "Wrong alignment on WBP_EventDetails_C_OnModuleInitialized");
static_assert(sizeof(WBP_EventDetails_C_OnModuleInitialized) == 0x000008, "Wrong size on WBP_EventDetails_C_OnModuleInitialized");
static_assert(offsetof(WBP_EventDetails_C_OnModuleInitialized, InEventScreenData) == 0x000000, "Member 'WBP_EventDetails_C_OnModuleInitialized::InEventScreenData' has a wrong offset!");

// Function WBP_EventDetails.WBP_EventDetails_C.OnPopulateEventDetailsText
// 0x0030 (0x0030 - 0x0000)
struct WBP_EventDetails_C_OnPopulateEventDetailsText final
{
public:
	class FText                                   OutEventName;                                      // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   OutEventDescription;                               // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_EventDetails_C_OnPopulateEventDetailsText) == 0x000008, "Wrong alignment on WBP_EventDetails_C_OnPopulateEventDetailsText");
static_assert(sizeof(WBP_EventDetails_C_OnPopulateEventDetailsText) == 0x000030, "Wrong size on WBP_EventDetails_C_OnPopulateEventDetailsText");
static_assert(offsetof(WBP_EventDetails_C_OnPopulateEventDetailsText, OutEventName) == 0x000000, "Member 'WBP_EventDetails_C_OnPopulateEventDetailsText::OutEventName' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_OnPopulateEventDetailsText, OutEventDescription) == 0x000018, "Member 'WBP_EventDetails_C_OnPopulateEventDetailsText::OutEventDescription' has a wrong offset!");

// Function WBP_EventDetails.WBP_EventDetails_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_EventDetails_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EventDetails_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_EventDetails_C_PreConstruct");
static_assert(sizeof(WBP_EventDetails_C_PreConstruct) == 0x000001, "Wrong size on WBP_EventDetails_C_PreConstruct");
static_assert(offsetof(WBP_EventDetails_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_EventDetails_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_EventDetails.WBP_EventDetails_C.UpdateColors
// 0x0010 (0x0010 - 0x0000)
struct WBP_EventDetails_C_UpdateColors final
{
public:
	struct FLinearColor                           Specified_Color;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EventDetails_C_UpdateColors) == 0x000004, "Wrong alignment on WBP_EventDetails_C_UpdateColors");
static_assert(sizeof(WBP_EventDetails_C_UpdateColors) == 0x000010, "Wrong size on WBP_EventDetails_C_UpdateColors");
static_assert(offsetof(WBP_EventDetails_C_UpdateColors, Specified_Color) == 0x000000, "Member 'WBP_EventDetails_C_UpdateColors::Specified_Color' has a wrong offset!");

// Function WBP_EventDetails.WBP_EventDetails_C.UpdateEventTimeRemaining
// 0x0020 (0x0020 - 0x0000)
struct WBP_EventDetails_C_UpdateEventTimeRemaining final
{
public:
	class FText                                   EventTimeRemainingText;                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FTimespan                              TimeRemaining;                                     // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EventDetails_C_UpdateEventTimeRemaining) == 0x000008, "Wrong alignment on WBP_EventDetails_C_UpdateEventTimeRemaining");
static_assert(sizeof(WBP_EventDetails_C_UpdateEventTimeRemaining) == 0x000020, "Wrong size on WBP_EventDetails_C_UpdateEventTimeRemaining");
static_assert(offsetof(WBP_EventDetails_C_UpdateEventTimeRemaining, EventTimeRemainingText) == 0x000000, "Member 'WBP_EventDetails_C_UpdateEventTimeRemaining::EventTimeRemainingText' has a wrong offset!");
static_assert(offsetof(WBP_EventDetails_C_UpdateEventTimeRemaining, TimeRemaining) == 0x000018, "Member 'WBP_EventDetails_C_UpdateEventTimeRemaining::TimeRemaining' has a wrong offset!");

}

