#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UIKit_Badge_Base

#include "Basic.hpp"

#include "E_UI_StatusIndicator_Type_structs.hpp"
#include "E_UI_StatusIndicator_Configuration_structs.hpp"
#include "E_UI_BadgeIndicatorType_structs.hpp"
#include "SlateCore_structs.hpp"
#include "E_UI_BadgeType_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_UIKit_Badge_Base.WBP_UIKit_Badge_Base_C.ExecuteUbergraph_WBP_UIKit_Badge_Base
// 0x0008 (0x0008 - 0x0000)
struct WBP_UIKit_Badge_Base_C_ExecuteUbergraph_WBP_UIKit_Badge_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Badge_Base_C_ExecuteUbergraph_WBP_UIKit_Badge_Base) == 0x000004, "Wrong alignment on WBP_UIKit_Badge_Base_C_ExecuteUbergraph_WBP_UIKit_Badge_Base");
static_assert(sizeof(WBP_UIKit_Badge_Base_C_ExecuteUbergraph_WBP_UIKit_Badge_Base) == 0x000008, "Wrong size on WBP_UIKit_Badge_Base_C_ExecuteUbergraph_WBP_UIKit_Badge_Base");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_ExecuteUbergraph_WBP_UIKit_Badge_Base, EntryPoint) == 0x000000, "Member 'WBP_UIKit_Badge_Base_C_ExecuteUbergraph_WBP_UIKit_Badge_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_ExecuteUbergraph_WBP_UIKit_Badge_Base, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_UIKit_Badge_Base_C_ExecuteUbergraph_WBP_UIKit_Badge_Base::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_UIKit_Badge_Base.WBP_UIKit_Badge_Base_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Badge_Base_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Badge_Base_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_UIKit_Badge_Base_C_PreConstruct");
static_assert(sizeof(WBP_UIKit_Badge_Base_C_PreConstruct) == 0x000001, "Wrong size on WBP_UIKit_Badge_Base_C_PreConstruct");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_UIKit_Badge_Base_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_UIKit_Badge_Base.WBP_UIKit_Badge_Base_C.SetBadgeText
// 0x0018 (0x0018 - 0x0000)
struct WBP_UIKit_Badge_Base_C_SetBadgeText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_UIKit_Badge_Base_C_SetBadgeText) == 0x000008, "Wrong alignment on WBP_UIKit_Badge_Base_C_SetBadgeText");
static_assert(sizeof(WBP_UIKit_Badge_Base_C_SetBadgeText) == 0x000018, "Wrong size on WBP_UIKit_Badge_Base_C_SetBadgeText");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetBadgeText, Text) == 0x000000, "Member 'WBP_UIKit_Badge_Base_C_SetBadgeText::Text' has a wrong offset!");

// Function WBP_UIKit_Badge_Base.WBP_UIKit_Badge_Base_C.SetBadgeType
// 0x0060 (0x0060 - 0x0000)
struct WBP_UIKit_Badge_Base_C_SetBadgeType final
{
public:
	E_UI_BadgeType                                Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_BadgeType                                Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_Select_Default;                             // 0x0008(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Badge_Base_C_SetBadgeType) == 0x000008, "Wrong alignment on WBP_UIKit_Badge_Base_C_SetBadgeType");
static_assert(sizeof(WBP_UIKit_Badge_Base_C_SetBadgeType) == 0x000060, "Wrong size on WBP_UIKit_Badge_Base_C_SetBadgeType");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetBadgeType, Type) == 0x000000, "Member 'WBP_UIKit_Badge_Base_C_SetBadgeType::Type' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetBadgeType, Temp_byte_Variable) == 0x000001, "Member 'WBP_UIKit_Badge_Base_C_SetBadgeType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetBadgeType, K2Node_Select_Default) == 0x000008, "Member 'WBP_UIKit_Badge_Base_C_SetBadgeType::K2Node_Select_Default' has a wrong offset!");

// Function WBP_UIKit_Badge_Base.WBP_UIKit_Badge_Base_C.SetIndicatorConfiguration
// 0x0011 (0x0011 - 0x0000)
struct WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration final
{
public:
	E_UI_BadgeIndicatorType                       Config;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_BadgeIndicatorType                       Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_BadgeIndicatorType                       Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_BadgeIndicatorType                       Temp_byte_Variable_5;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_StatusIndicator_Configuration            Temp_byte_Variable_6;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_StatusIndicator_Configuration            Temp_byte_Variable_7;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_StatusIndicator_Configuration            Temp_byte_Variable_8;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_StatusIndicator_Configuration            K2Node_Select_Default_2;                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration) == 0x000001, "Wrong alignment on WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration");
static_assert(sizeof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration) == 0x000011, "Wrong size on WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Config) == 0x000000, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Config' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_byte_Variable) == 0x000001, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_bool_Variable) == 0x000002, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_bool_Variable_1) == 0x000003, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_bool_Variable_2) == 0x000004, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_byte_Variable_2) == 0x000006, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_byte_Variable_3) == 0x000007, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_byte_Variable_4) == 0x000008, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_byte_Variable_5) == 0x000009, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_byte_Variable_6) == 0x00000A, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_byte_Variable_7) == 0x00000B, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, Temp_byte_Variable_8) == 0x00000C, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, K2Node_Select_Default) == 0x00000D, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, K2Node_Select_Default_1) == 0x00000E, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, K2Node_SwitchEnum_CmpSuccess) == 0x00000F, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration, K2Node_Select_Default_2) == 0x000010, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorConfiguration::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_UIKit_Badge_Base.WBP_UIKit_Badge_Base_C.SetIndicatorIcon
// 0x0008 (0x0008 - 0x0000)
struct WBP_UIKit_Badge_Base_C_SetIndicatorIcon final
{
public:
	class UObject*                                IconAsset;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Badge_Base_C_SetIndicatorIcon) == 0x000008, "Wrong alignment on WBP_UIKit_Badge_Base_C_SetIndicatorIcon");
static_assert(sizeof(WBP_UIKit_Badge_Base_C_SetIndicatorIcon) == 0x000008, "Wrong size on WBP_UIKit_Badge_Base_C_SetIndicatorIcon");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorIcon, IconAsset) == 0x000000, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorIcon::IconAsset' has a wrong offset!");

// Function WBP_UIKit_Badge_Base.WBP_UIKit_Badge_Base_C.SetIndicatorType
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Badge_Base_C_SetIndicatorType final
{
public:
	E_UI_StatusIndicator_Type                     IndicatorType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Badge_Base_C_SetIndicatorType) == 0x000001, "Wrong alignment on WBP_UIKit_Badge_Base_C_SetIndicatorType");
static_assert(sizeof(WBP_UIKit_Badge_Base_C_SetIndicatorType) == 0x000001, "Wrong size on WBP_UIKit_Badge_Base_C_SetIndicatorType");
static_assert(offsetof(WBP_UIKit_Badge_Base_C_SetIndicatorType, IndicatorType) == 0x000000, "Member 'WBP_UIKit_Badge_Base_C_SetIndicatorType::IndicatorType' has a wrong offset!");

}

