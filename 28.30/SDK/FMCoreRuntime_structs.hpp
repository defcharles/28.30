#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMCoreRuntime

#include "Basic.hpp"


namespace SDK
{

// Enum FMCoreRuntime.EMusicKeyMode
// NumValues: 0x0003
enum class EMusicKeyMode : uint8
{
	Major                                    = 0,
	Minor                                    = 1,
	Num                                      = 2,
};

// Enum FMCoreRuntime.EMusicKey
// NumValues: 0x000D
enum class EMusicKey : uint8
{
	C                                        = 0,
	Db                                       = 1,
	D                                        = 2,
	Eb                                       = 3,
	E                                        = 4,
	F                                        = 5,
	Gb                                       = 6,
	G                                        = 7,
	Ab                                       = 8,
	A                                        = 9,
	Bb                                       = 10,
	B                                        = 11,
	Num                                      = 12,
};

// Enum FMCoreRuntime.ESystemGetResult
// NumValues: 0x0002
enum class ESystemGetResult : uint8
{
	Valid                                    = 0,
	Invalid                                  = 1,
};

// Enum FMCoreRuntime.EMusicInterval
// NumValues: 0x000D
enum class EMusicInterval : uint8
{
	P1                                       = 0,
	Min2                                     = 1,
	Maj2                                     = 2,
	Min3                                     = 3,
	Maj3                                     = 4,
	P4                                       = 5,
	TT                                       = 6,
	P5                                       = 7,
	Min6                                     = 8,
	Maj6                                     = 9,
	Min7                                     = 10,
	Maj7                                     = 11,
	Num                                      = 12,
};

// Enum FMCoreRuntime.EHarmonicProgression
// NumValues: 0x0010
enum class EHarmonicProgression : uint8
{
	NegI                                     = 0,
	NegII                                    = 1,
	NegIII                                   = 2,
	NegIV                                    = 3,
	NegV                                     = 4,
	NegVI                                    = 5,
	NegVII                                   = 6,
	I                                        = 7,
	II                                       = 8,
	III                                      = 9,
	IV                                       = 10,
	V                                        = 11,
	VI                                       = 12,
	VII                                      = 13,
	PlusI                                    = 14,
	Num                                      = 15,
};

// ScriptStruct FMCoreRuntime.FMCoreTimeSignature
// 0x0008 (0x0008 - 0x0000)
struct FFMCoreTimeSignature final
{
public:
	int32                                         Numerator;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Denominator;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFMCoreTimeSignature) == 0x000004, "Wrong alignment on FFMCoreTimeSignature");
static_assert(sizeof(FFMCoreTimeSignature) == 0x000008, "Wrong size on FFMCoreTimeSignature");
static_assert(offsetof(FFMCoreTimeSignature, Numerator) == 0x000000, "Member 'FFMCoreTimeSignature::Numerator' has a wrong offset!");
static_assert(offsetof(FFMCoreTimeSignature, Denominator) == 0x000004, "Member 'FFMCoreTimeSignature::Denominator' has a wrong offset!");

// ScriptStruct FMCoreRuntime.FMPlayspaceSystemInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FFMPlayspaceSystemInfo final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFMPlayspaceSystemInfo) == 0x000008, "Wrong alignment on FFMPlayspaceSystemInfo");
static_assert(sizeof(FFMPlayspaceSystemInfo) == 0x000050, "Wrong size on FFMPlayspaceSystemInfo");

}

