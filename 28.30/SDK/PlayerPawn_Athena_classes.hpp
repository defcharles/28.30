#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerPawn_Athena

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PawnHighlight_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AudioExtensions_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "PlayerPawn_Athena_Generic_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerPawn_Athena.PlayerPawn_Athena_C
// 0x09A0 (0x6910 - 0x5F70)
class APlayerPawn_Athena_C : public APlayerPawn_Athena_Generic_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PlayerPawn_Athena_C;                // 0x5F70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortContrailsComponent*                FortContrails;                                     // 0x5F78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortUnderwaterDamageComponent*         FortUnderwaterDamage;                              // 0x5F80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_BlendWeight_A4943458400C3662DB243099F9EAC7E8; // 0x5F88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_A4943458400C3662DB243099F9EAC7E8; // 0x5F8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8D[0x3];                                     // 0x5F8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x5F90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 TargetHead;                                        // 0x5F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 TargetBody;                                        // 0x5FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             PawnHeadMaterials_0;                               // 0x5FA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             PawnBodyMaterials_0;                               // 0x5FB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_FlakVest;                                       // 0x5FC8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayEventData                     Event_Data;                                        // 0x5FE8(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventSpawnEffect;                                  // 0x6098(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMale;                                            // 0x609C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609D[0x3];                                     // 0x609D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWeapon*                            MenuGoingCommandowWeapon;                          // 0x60A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SafeZonePassThroughSound;                          // 0x60A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasBeenOutsideSafeZone;                           // 0x60B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60B1[0x3];                                     // 0x60B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ThreatColor;                                       // 0x60B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60C4[0x4];                                     // 0x60C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             PlayerKilledSound;                                 // 0x60C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               WindDebrisParticles;                               // 0x60D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FallingRainParticles;                              // 0x60D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               StormAuraParticles;                                // 0x60E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LightningSpawnLocation;                            // 0x60E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightningIntensityMin;                             // 0x6100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightningIntensityMax;                             // 0x6108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SafeZoneActor;                                     // 0x6110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LightningIntensity;                                // 0x6118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   RandomLightningLight;                              // 0x6120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        LightningTimelinePlaySpeedMin;                     // 0x6128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightningTimelinePlaySpeedMax;                     // 0x6130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightningFlashDiameter;                            // 0x6138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightningFlashHeight;                              // 0x6140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightningFlashRepeatDelayMin;                      // 0x6148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightningFlashRepeatDelayMax;                      // 0x6150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEmitterCameraLensEffectBase*           RainCameraLensParticles;                           // 0x6158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        _ChanceOfLightningMesh;                            // 0x6160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowInvulnerableVisuals;                           // 0x6168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6169[0x7];                                     // 0x6169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        StormAudioLoop_Inst;                               // 0x6170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        StormAudioVolume;                                  // 0x6178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FallingAudioLoop_Inst;                             // 0x6180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayingFallingSound;                            // 0x6188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6189[0x7];                                     // 0x6189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayerAttributes_Speed_Walk;                       // 0x6190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayerAttributes_Speed_Run;                        // 0x6198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayerAttributes_Speed_Sprint;                     // 0x61A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTrailsLOD;                                      // 0x61A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61AC[0x4];                                     // 0x61AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPostProcessComponent*                  MobilePostProcess;                                 // 0x61B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsOutsideSafeZoneCached;                          // 0x61B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61B9[0x7];                                     // 0x61B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       ResOutMaterials;                                   // 0x61C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ADuplicateResOutMesh_C*                 RezInFXActor;                                      // 0x61D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bQueueRezIn;                                       // 0x61D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61D9[0x7];                                     // 0x61D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADuplicateResOutMesh_C*                 RezOutFXActor;                                     // 0x61E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bQueueRezOut;                                      // 0x61E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasEverInWarmUp;                                  // 0x61E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStormAudioCleanedUp;                              // 0x61EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61EB[0x5];                                     // 0x61EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Box_Local_Transform;                               // 0x61F0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoundsRadius;                                      // 0x6250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   TeleportationPointLight;                           // 0x6258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        MaxLightIntensity;                                 // 0x6260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket_MeshTop;                                    // 0x6268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket_MeshBot;                                    // 0x626C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MIDParam_Transition;                               // 0x6270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MIDParam_DissolvePercent;                          // 0x6274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MIDParam_DissolveDirection;                        // 0x6278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MIDParam_DissolveBaseLoc;                          // 0x627C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MIDParam_DissolveDistance;                         // 0x6280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MIDParam_DissolveFirstSpawn;                       // 0x6284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Mat_CharacterDissolve;                             // 0x6288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DissolveMIDs;                                      // 0x6290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bUseNewTeleportFX;                                 // 0x62A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A1[0x3];                                     // 0x62A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           OutsideSafeZoneGameplayCueTag;                     // 0x62A4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         SafeZonePhase;                                     // 0x62A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WhichSafeZoneTag;                                  // 0x62AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOutsideSafeZoneGameplayCueActive;                 // 0x62B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62B1[0x7];                                     // 0x62B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SafeZoneDamageScalableFloat;                       // 0x62B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bFrontendPartyInProgress;                          // 0x62E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLockOnInteractionComplete;                        // 0x62E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62E2[0x6];                                     // 0x62E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ResIn;                                             // 0x62E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              ResOut;                                            // 0x62F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              SwingRight;                                        // 0x6308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              SwingLeft;                                         // 0x6318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bSkeletalArrayReady;                               // 0x6328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6329[0x3];                                     // 0x6329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurDissolveSetupAttempt;                           // 0x632C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DBNOEnterSound;                                    // 0x6330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              onFadeToWhiteTeleported;                           // 0x6338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Is_Ashton;                                         // 0x6348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6349[0x7];                                     // 0x6349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Ashton;                                            // 0x6350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              SwingRightEnd;                                     // 0x6358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              SwingLeftEnd;                                      // 0x6368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTag                           PhoneGhostCue;                                     // 0x6378(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           WhiteoutCue;                                       // 0x637C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           OutsideSafeZoneCue;                                // 0x6380(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           OutsideSafeZone2Cue;                               // 0x6384(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           OutsideSafeZone3Cue;                               // 0x6388(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayRespawnFXOnSpawn;                              // 0x638C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_638D[0x3];                                     // 0x638D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  PlayerPawnAthena;                                  // 0x6390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              SwingRight2;                                       // 0x6398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              SwingLeft2;                                        // 0x63A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          TestProceduralWaterInIsolation;                    // 0x63B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_First_Water_Body;                               // 0x63B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Last_Water_Body;                                // 0x63BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63BB[0x5];                                     // 0x63BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AccumulatedNormalizedDiveSpeed;                    // 0x63C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           WaterSprintBoostTag;                               // 0x63C8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63CC[0x4];                                     // 0x63CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsHidden)> CCPM_isHiddenInProp;                               // 0x63D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class UObject*, struct FPawnHighlight>   PawnHighlights;                                    // 0x63E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UObject*                                Current_Highlight_Source;                          // 0x6430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Highlight_Priority;                        // 0x6438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPawnHighlight                         Invulnerable_Highlight;                            // 0x6440(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGalileo;                                         // 0x6470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6471[0x7];                                     // 0x6471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HotFixSnow;                                        // 0x6478(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSet<class FName>                             NoSnowPlaylists;                                   // 0x64A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GalileoPlaylistTag;                                // 0x64F0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64F4[0x4];                                     // 0x64F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       WeaponMIDs;                                        // 0x64F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AmountOfTimesToAttemptRestoreMats;                 // 0x6508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_PawnAthenaNPC;                                  // 0x650C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HitGlowBrightnessScalar;                           // 0x6510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CurrentWeaponMaterials;                            // 0x6518(0x0010)(Edit, BlueprintVisible)
	TArray<class USkeletalMeshComponent*>         CurrentWeaponMeshes;                               // 0x6528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       WeaponDissolveMIDs;                                // 0x6538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        HitGlowBrightnessScalar_Mobile;                    // 0x6548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_PawnAthenaDecoy;                                // 0x6550(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6554[0x4];                                     // 0x6554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ScaleRate;                                         // 0x6558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TetherQuestTag;                                    // 0x6560(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class FName                                   FirefliesTag;                                      // 0x6580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6584[0xC];                                     // 0x6584(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RightSideRim_Transform;                            // 0x6590(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Right_Side_Rim_Light;                              // 0x65F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Rim_light_Shadow_Bias;                             // 0x65F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rim_Light_Intensity;                               // 0x6600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PlayerAimRotation;                                 // 0x6608(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FScalableFloat                         ControlRotationReplicationTickRate;                // 0x6620(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Elimination_Rez_Sequence_GC;                       // 0x6648(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Creative_Respawn_Teleportation_GC;                 // 0x664C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Teleport_In_GC;                                    // 0x6650(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6654[0x4];                                     // 0x6654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RimlightDistanceFromCamera;                        // 0x6658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rim_Light_Color___Night;                           // 0x6660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rim_Light_Color___Day;                             // 0x6670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PhoneModeratorModeGameplayCue;                     // 0x6680(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PhoneInvulnerableGameplayCue;                      // 0x6684(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Swinging_HandsUp;                                  // 0x6688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Swinging_LockedToHip;                              // 0x6689(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_668A[0x6];                                     // 0x668A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InputDragCoefficient;                              // 0x6690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleSwingNativized;                              // 0x6698(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6699[0x7];                                     // 0x6699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        SwingingSound;                                     // 0x66A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Swinging_ReelingInCurve;                           // 0x66A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Swinging_NotReelingInCurve;                        // 0x66B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Swinging_OriginalVecToTarget;                      // 0x66B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Swinging_ReelingIn;                                // 0x66D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66D1[0x7];                                     // 0x66D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Swinging_Goal_Length;                              // 0x66D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Swinging_ReelingTimeCurve;                         // 0x66E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Swinging_ColliderBigger;                           // 0x66E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66E9[0x7];                                     // 0x66E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAudioParameter>                SoundParams;                                       // 0x66F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Swinging_UseNewRotationAlgorithm;                  // 0x6700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6701[0x7];                                     // 0x6701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachedWallInverseNormal;                         // 0x6708(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VelocityOnSlideStart;                              // 0x6720(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SlideStartTime;                                    // 0x6738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSlideTime;                                      // 0x6740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           WallSlidingVelocityMultiplierCurve;                // 0x6748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            WallSlidingAddedDownwardVelocityMultiplierCurve;   // 0x6750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        WallSlidingAddedDownwardVelocityMax;               // 0x6758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AttachedWallNormal;                                // 0x6760(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WallSlidingVelocity;                               // 0x6778(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DesiredDistanceToAttachedWall;                     // 0x6790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinGroundSlopeToLeaveAttachedWall;                 // 0x6798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayAbilityMontageInfo        OverrideSearchMontageInfo;                         // 0x67A0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Is_Hidding_CharacterParrts;                        // 0x67F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_67F9[0x7];                                     // 0x67F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RimlightCVARBoost;                                 // 0x6800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rimlight_Enabled;                                  // 0x6808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6809[0x7];                                     // 0x6809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LCVar_Name;                                        // 0x6810(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class APhysicalRimlight_C*                    PhysicalRimlightActor;                             // 0x6820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         UGC_RimLightIntensity;                             // 0x6828(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             SFX_WaterExit_3P;                                  // 0x6850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_WaterExit_1P;                                  // 0x6858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_WaterEntry_3P;                                 // 0x6860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_WaterEntry_1P;                                 // 0x6868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         EnableDecayRow;                                    // 0x6870(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        CeilingHeight;                                     // 0x6898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BAProtoVelocity;                                   // 0x68A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         HF_TetherMultiplierHorz;                           // 0x68B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HF_TetherMultiplierVert;                           // 0x68E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Teleport_In_GC_Frontend;                           // 0x6908(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateInvincibleVisuals(double duration);
	void AddHighlightFromSource(class UObject* Source, const struct FPawnHighlight& Highlight, bool OnlyUpdateIfCurrent);
	void AddSafeZoneGameplayCue();
	void AddSkeletalMeshComponentsFromWeaponObject(class AFortWeapon* WeaponObject);
	void AddStormFX();
	void AimTick();
	void ApplyColdTag();
	void ApplyColdTag_Retry(class UFortAbilitySystemComponent* AbilitySystemComponent_0, class AFortPlayerPawn* AffectedPawn);
	void ApplyPawnHighlight(class UObject* Source, const struct FPawnHighlight& HitGlow);
	void AttemptToSetRimLight();
	void CleanupDissolveFX();
	void CleanUpTeleportationFXLight();
	void ClientRunSnowGC(bool Instant);
	void EnableWaterAudio(bool Is_Entering_Water);
	void EndRotationTick();
	void ExecuteUbergraph_PlayerPawn_Athena(int32 EntryPoint);
	void FindBounds();
	void GalileoMaterialSetup();
	void GameplayCue_Abilities_Activation_DBNOEnter(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Abilities_Activation_DBNOResurrect(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Abilities_Activation_Generic_HarvestBuff_Tier1(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Abilities_Activation_Generic_HarvestBuff_Tier2(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Athena_Boost(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Athena_Equipping(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Athena_Player_BeingRevivedFromDBNO(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Athena_Reloading(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Damage(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Damage_Shielded(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Healing(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Shield_PotionConsumed(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void Get_Highest_Priority_Highlight(class UObject** Source, struct FPawnHighlight* Top_Priority);
	void GetAimPoint(struct FRotator* ControlRotation);
	void GetForwardAxis(double* Return_Value);
	void GetLocationInCircle_XY(struct FVector* LocationLocalSpace);
	void GetPawnIsInLocalSquad(bool* IsInLocalSquad);
	void GetRightAxis(double* Return_Value);
	void handleCvarsUpdated(const class FString& CVarName);
	void Hide_Character_Parts(bool IsHidden);
	void Highlight_Pawn_from_Source(class UObject* Source, const struct FPawnHighlight& Highlight, bool Only_Update_If_Current);
	void InWarmup(bool* bInWarmup);
	void isHiddingInProp(bool IsHidden);
	void IsSwingAttached(bool* IsSwingAttached_0);
	void IsSwingGrounded(bool* IsSwingingGrounded);
	void IsSwinging(bool* IsSwinging_0);
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void K2_UpdateCustomMovement(float DeltaTime);
	void LockonSearchCompleteTimedOut();
	void MeleeSwingLeft(bool First_Left);
	void MeleeSwingLeft_End();
	void MeleeSwingRight(bool First_Right);
	void MeleeSwingRight_End();
	void NotifyTeammateSkydivedFromBus();
	void OnBeginWaterSprintBoost();
	void OnCharacterCustomizationCompleted(class AFortPlayerPawn* Pawn);
	void OnCharacterPartsReinitialized();
	void OnCreativeModeratorModeActivate();
	void OnCreativeModeratorModeDeactivate();
	void OnCreativeStartGhost();
	void OnCreativeStartInvulnerable();
	void OnCreativeStopGhost();
	void OnCreativeStopInvulnerable();
	void OnDBNOStateChanged_Event(class AFortPawn* FortPawn, bool bInIsDBNO);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDisplayHitNotify(float DamageDealt, bool bCriticalHit, bool bFatalHit, bool bShieldHit, class AActor* HitActor, const struct FGameplayTagContainer& HitTags, const struct FVector& HitLocation);
	void OnEnteredOrExitedWaterVolume(bool bEntered, const struct FVector& WaterSurfaceLocation);
	void OnEnteredReplayRelevancy();
	void OnEnteredWaterBody(class AFortWaterBodyActor* WaterBody, bool bIsFirstBody);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfaceLocation);
	void OnExitedWaterBody(class AFortWaterBodyActor* WaterBody, bool bIsLastBody);
	void OnExitedWaterVolume(const struct FVector& WaterSurfaceLocation);
	void OnLandscapeCheckFailedAndTeleported();
	void OnLeftReplayRelevancy();
	void OnLockOnSearchCompleted(bool* bConsumeEvent);
	void OnMovementStyleChanged(EFortMovementStyle PreviousMovementStyle, EFortMovementStyle NewMovementStyle);
	void OnOutsideSafeZonePhaseChanged(int32 SafeZonePhase_0);
	void OnPart(class AFortPlayerPawn* Pawn, class UCustomCharacterPart* Part, class USkeletalMeshComponent* MeshPart, const EFortCustomPartType PartType);
	void OnReady_978607004CDEB137CACF38831BECEF40(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnReceivedStormSurgeDamage();
	void OnRep_PlayerAimRotation();
	void OnRep_PlayRespawnFXOnSpawn();
	void OnResInDuringWarmup();
	void OnSpawnImmunityTimeReset();
	void OnStartLongInteract(class AActor* ReceivingActor, bool* Out_bConsumeEvent, bool* Out_bSkipSetInteractDuration, bool* Out_bSkipStartAnimation, EItemInteractionType* Out_ItemInteractionType);
	void OnSuccessfulBuildingEdit();
	void OnTetheredExitPressed();
	void OnTetheredExitReleased();
	void OnTetherEnded(class APawn* LastTetherPawn);
	void OnTetherStarted(class APawn* LastTetherPawn);
	bool PawnIsDecoy();
	bool PawnIsNPC();
	void Play_Respawn_FX();
	void PlayDeathEffects();
	void PlayWaterEnterExitAudioAndFX(const struct FVector& WaterSurfaceLocation);
	void QueueTeleportIn();
	void QueueTeleportOut();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceivePossessed(class AController* NewController);
	void ReceiveUnpossessed(class AController* OldController);
	void Remove_Pawn_Highlight_from_Source(class UObject* Source);
	void RemoveHighlightFromSource(class UObject* Source);
	void RemoveSafeZoneGameplayCue();
	void RemoveSafeZoneGameplayCueServerToClient();
	void RemoveSkeletalMeshComponentsFromWeaponObject(class AFortWeapon* WeaponObject);
	void RemoveStormFX();
	void ReplicateAimRotation(const struct FRotator& PlayerAimRotation_0);
	void RestoreCharacterMats(bool* bFullyCompleted);
	void Rimlight_Setup(const class FString& CVarName);
	void SafeZoneStatusChanged();
	void ScalePlayerDown();
	void ScalePlayerUp();
	void SetMaterialRimlightIntensity(double Multiplier);
	void SetPartyInProgress(bool bIsPartyInProgress);
	void SetPetHidden(bool NewHidden);
	void SetPhysicalRimlightIntensity();
	void SetSafeZonePhaseAndGameplayCueTag(int32 InSafeZonePhase, bool bSpawnGameplayCue);
	void SetSafeZoneTagWhenChanged(int32 NewWhichSafeZoneTag, const struct FGameplayTag& GameplayTag, bool bSpawnGameplayCue);
	void SetupColdTag();
	void SetupDissolveFx();
	void SpawnTeleportationLight();
	void StartAImRotationTick();
	void StopLoopingAudio();
	struct FVector Swing_GetStartPoint();
	void SwingAttached(const struct FVector& AttachLocation, class AActor* AttachedActor);
	void SwingDetached();
	void Swinging_AttachLocation(struct FVector* Location, bool* AttachPointExists);
	void Swinging_CheckGrounded(bool* Grounded_, struct FVector* HitNormal, double* Distance);
	void Swinging_ResetMeshTransform();
	void Swinging_SetJumpHeight(double Jump_ZVelocity);
	void Swinging_StartReelingIn();
	void Swinging_StopReelingIn();
	struct FVector SwingingVectorToAttachPoint(const class FString& caller_ID);
	void TeleportInNSeconds(double SecondsTillTeleport, const struct FVector& DestLocation, const struct FRotator& DestRotation);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void UGC_BindRimLightIntensityChange();
	void UGC_InitRimlightIntensity();
	void UpdateDissolveFx(double Scalar_Transition, double Scalar_ZHeight, double Scalar_LightIntensity);
	void UpdateRimlightIntensity();
	void UserConstructionScript();
	void WhiteoutAndTeleport(const struct FVector& DestLocation, const struct FRotator& DestRotation, bool Instant, double Gravity);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerPawn_Athena_C">();
	}
	static class APlayerPawn_Athena_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerPawn_Athena_C>();
	}
};
static_assert(alignof(APlayerPawn_Athena_C) == 0x000010, "Wrong alignment on APlayerPawn_Athena_C");
static_assert(sizeof(APlayerPawn_Athena_C) == 0x006910, "Wrong size on APlayerPawn_Athena_C");
static_assert(offsetof(APlayerPawn_Athena_C, UberGraphFrame_PlayerPawn_Athena_C) == 0x005F70, "Member 'APlayerPawn_Athena_C::UberGraphFrame_PlayerPawn_Athena_C' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, FortContrails) == 0x005F78, "Member 'APlayerPawn_Athena_C::FortContrails' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, FortUnderwaterDamage) == 0x005F80, "Member 'APlayerPawn_Athena_C::FortUnderwaterDamage' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Timeline_0_BlendWeight_A4943458400C3662DB243099F9EAC7E8) == 0x005F88, "Member 'APlayerPawn_Athena_C::Timeline_0_BlendWeight_A4943458400C3662DB243099F9EAC7E8' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Timeline_0__Direction_A4943458400C3662DB243099F9EAC7E8) == 0x005F8C, "Member 'APlayerPawn_Athena_C::Timeline_0__Direction_A4943458400C3662DB243099F9EAC7E8' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Timeline_0) == 0x005F90, "Member 'APlayerPawn_Athena_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, TargetHead) == 0x005F98, "Member 'APlayerPawn_Athena_C::TargetHead' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, TargetBody) == 0x005FA0, "Member 'APlayerPawn_Athena_C::TargetBody' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PawnHeadMaterials_0) == 0x005FA8, "Member 'APlayerPawn_Athena_C::PawnHeadMaterials_0' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PawnBodyMaterials_0) == 0x005FB8, "Member 'APlayerPawn_Athena_C::PawnBodyMaterials_0' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, TC_FlakVest) == 0x005FC8, "Member 'APlayerPawn_Athena_C::TC_FlakVest' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Event_Data) == 0x005FE8, "Member 'APlayerPawn_Athena_C::Event_Data' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, EventSpawnEffect) == 0x006098, "Member 'APlayerPawn_Athena_C::EventSpawnEffect' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, IsMale) == 0x00609C, "Member 'APlayerPawn_Athena_C::IsMale' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MenuGoingCommandowWeapon) == 0x0060A0, "Member 'APlayerPawn_Athena_C::MenuGoingCommandowWeapon' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SafeZonePassThroughSound) == 0x0060A8, "Member 'APlayerPawn_Athena_C::SafeZonePassThroughSound' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bHasBeenOutsideSafeZone) == 0x0060B0, "Member 'APlayerPawn_Athena_C::bHasBeenOutsideSafeZone' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, ThreatColor) == 0x0060B4, "Member 'APlayerPawn_Athena_C::ThreatColor' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PlayerKilledSound) == 0x0060C8, "Member 'APlayerPawn_Athena_C::PlayerKilledSound' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WindDebrisParticles) == 0x0060D0, "Member 'APlayerPawn_Athena_C::WindDebrisParticles' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, FallingRainParticles) == 0x0060D8, "Member 'APlayerPawn_Athena_C::FallingRainParticles' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, StormAuraParticles) == 0x0060E0, "Member 'APlayerPawn_Athena_C::StormAuraParticles' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningSpawnLocation) == 0x0060E8, "Member 'APlayerPawn_Athena_C::LightningSpawnLocation' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningIntensityMin) == 0x006100, "Member 'APlayerPawn_Athena_C::LightningIntensityMin' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningIntensityMax) == 0x006108, "Member 'APlayerPawn_Athena_C::LightningIntensityMax' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SafeZoneActor) == 0x006110, "Member 'APlayerPawn_Athena_C::SafeZoneActor' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningIntensity) == 0x006118, "Member 'APlayerPawn_Athena_C::LightningIntensity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, RandomLightningLight) == 0x006120, "Member 'APlayerPawn_Athena_C::RandomLightningLight' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningTimelinePlaySpeedMin) == 0x006128, "Member 'APlayerPawn_Athena_C::LightningTimelinePlaySpeedMin' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningTimelinePlaySpeedMax) == 0x006130, "Member 'APlayerPawn_Athena_C::LightningTimelinePlaySpeedMax' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningFlashDiameter) == 0x006138, "Member 'APlayerPawn_Athena_C::LightningFlashDiameter' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningFlashHeight) == 0x006140, "Member 'APlayerPawn_Athena_C::LightningFlashHeight' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningFlashRepeatDelayMin) == 0x006148, "Member 'APlayerPawn_Athena_C::LightningFlashRepeatDelayMin' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LightningFlashRepeatDelayMax) == 0x006150, "Member 'APlayerPawn_Athena_C::LightningFlashRepeatDelayMax' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, RainCameraLensParticles) == 0x006158, "Member 'APlayerPawn_Athena_C::RainCameraLensParticles' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, _ChanceOfLightningMesh) == 0x006160, "Member 'APlayerPawn_Athena_C::_ChanceOfLightningMesh' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, ShowInvulnerableVisuals) == 0x006168, "Member 'APlayerPawn_Athena_C::ShowInvulnerableVisuals' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, StormAudioLoop_Inst) == 0x006170, "Member 'APlayerPawn_Athena_C::StormAudioLoop_Inst' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, StormAudioVolume) == 0x006178, "Member 'APlayerPawn_Athena_C::StormAudioVolume' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, FallingAudioLoop_Inst) == 0x006180, "Member 'APlayerPawn_Athena_C::FallingAudioLoop_Inst' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bIsPlayingFallingSound) == 0x006188, "Member 'APlayerPawn_Athena_C::bIsPlayingFallingSound' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PlayerAttributes_Speed_Walk) == 0x006190, "Member 'APlayerPawn_Athena_C::PlayerAttributes_Speed_Walk' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PlayerAttributes_Speed_Run) == 0x006198, "Member 'APlayerPawn_Athena_C::PlayerAttributes_Speed_Run' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PlayerAttributes_Speed_Sprint) == 0x0061A0, "Member 'APlayerPawn_Athena_C::PlayerAttributes_Speed_Sprint' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MaxTrailsLOD) == 0x0061A8, "Member 'APlayerPawn_Athena_C::MaxTrailsLOD' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MobilePostProcess) == 0x0061B0, "Member 'APlayerPawn_Athena_C::MobilePostProcess' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bIsOutsideSafeZoneCached) == 0x0061B8, "Member 'APlayerPawn_Athena_C::bIsOutsideSafeZoneCached' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, ResOutMaterials) == 0x0061C0, "Member 'APlayerPawn_Athena_C::ResOutMaterials' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, RezInFXActor) == 0x0061D0, "Member 'APlayerPawn_Athena_C::RezInFXActor' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bQueueRezIn) == 0x0061D8, "Member 'APlayerPawn_Athena_C::bQueueRezIn' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, RezOutFXActor) == 0x0061E0, "Member 'APlayerPawn_Athena_C::RezOutFXActor' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bQueueRezOut) == 0x0061E8, "Member 'APlayerPawn_Athena_C::bQueueRezOut' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bWasEverInWarmUp) == 0x0061E9, "Member 'APlayerPawn_Athena_C::bWasEverInWarmUp' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bStormAudioCleanedUp) == 0x0061EA, "Member 'APlayerPawn_Athena_C::bStormAudioCleanedUp' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Box_Local_Transform) == 0x0061F0, "Member 'APlayerPawn_Athena_C::Box_Local_Transform' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, BoundsRadius) == 0x006250, "Member 'APlayerPawn_Athena_C::BoundsRadius' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, TeleportationPointLight) == 0x006258, "Member 'APlayerPawn_Athena_C::TeleportationPointLight' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MaxLightIntensity) == 0x006260, "Member 'APlayerPawn_Athena_C::MaxLightIntensity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Socket_MeshTop) == 0x006268, "Member 'APlayerPawn_Athena_C::Socket_MeshTop' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Socket_MeshBot) == 0x00626C, "Member 'APlayerPawn_Athena_C::Socket_MeshBot' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MIDParam_Transition) == 0x006270, "Member 'APlayerPawn_Athena_C::MIDParam_Transition' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MIDParam_DissolvePercent) == 0x006274, "Member 'APlayerPawn_Athena_C::MIDParam_DissolvePercent' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MIDParam_DissolveDirection) == 0x006278, "Member 'APlayerPawn_Athena_C::MIDParam_DissolveDirection' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MIDParam_DissolveBaseLoc) == 0x00627C, "Member 'APlayerPawn_Athena_C::MIDParam_DissolveBaseLoc' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MIDParam_DissolveDistance) == 0x006280, "Member 'APlayerPawn_Athena_C::MIDParam_DissolveDistance' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MIDParam_DissolveFirstSpawn) == 0x006284, "Member 'APlayerPawn_Athena_C::MIDParam_DissolveFirstSpawn' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Mat_CharacterDissolve) == 0x006288, "Member 'APlayerPawn_Athena_C::Mat_CharacterDissolve' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, DissolveMIDs) == 0x006290, "Member 'APlayerPawn_Athena_C::DissolveMIDs' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bUseNewTeleportFX) == 0x0062A0, "Member 'APlayerPawn_Athena_C::bUseNewTeleportFX' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, OutsideSafeZoneGameplayCueTag) == 0x0062A4, "Member 'APlayerPawn_Athena_C::OutsideSafeZoneGameplayCueTag' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SafeZonePhase) == 0x0062A8, "Member 'APlayerPawn_Athena_C::SafeZonePhase' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WhichSafeZoneTag) == 0x0062AC, "Member 'APlayerPawn_Athena_C::WhichSafeZoneTag' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bOutsideSafeZoneGameplayCueActive) == 0x0062B0, "Member 'APlayerPawn_Athena_C::bOutsideSafeZoneGameplayCueActive' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SafeZoneDamageScalableFloat) == 0x0062B8, "Member 'APlayerPawn_Athena_C::SafeZoneDamageScalableFloat' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bFrontendPartyInProgress) == 0x0062E0, "Member 'APlayerPawn_Athena_C::bFrontendPartyInProgress' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bLockOnInteractionComplete) == 0x0062E1, "Member 'APlayerPawn_Athena_C::bLockOnInteractionComplete' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, ResIn) == 0x0062E8, "Member 'APlayerPawn_Athena_C::ResIn' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, ResOut) == 0x0062F8, "Member 'APlayerPawn_Athena_C::ResOut' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SwingRight) == 0x006308, "Member 'APlayerPawn_Athena_C::SwingRight' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SwingLeft) == 0x006318, "Member 'APlayerPawn_Athena_C::SwingLeft' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, bSkeletalArrayReady) == 0x006328, "Member 'APlayerPawn_Athena_C::bSkeletalArrayReady' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, CurDissolveSetupAttempt) == 0x00632C, "Member 'APlayerPawn_Athena_C::CurDissolveSetupAttempt' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, DBNOEnterSound) == 0x006330, "Member 'APlayerPawn_Athena_C::DBNOEnterSound' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, onFadeToWhiteTeleported) == 0x006338, "Member 'APlayerPawn_Athena_C::onFadeToWhiteTeleported' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Is_Ashton) == 0x006348, "Member 'APlayerPawn_Athena_C::Is_Ashton' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Ashton) == 0x006350, "Member 'APlayerPawn_Athena_C::Ashton' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SwingRightEnd) == 0x006358, "Member 'APlayerPawn_Athena_C::SwingRightEnd' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SwingLeftEnd) == 0x006368, "Member 'APlayerPawn_Athena_C::SwingLeftEnd' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PhoneGhostCue) == 0x006378, "Member 'APlayerPawn_Athena_C::PhoneGhostCue' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WhiteoutCue) == 0x00637C, "Member 'APlayerPawn_Athena_C::WhiteoutCue' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, OutsideSafeZoneCue) == 0x006380, "Member 'APlayerPawn_Athena_C::OutsideSafeZoneCue' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, OutsideSafeZone2Cue) == 0x006384, "Member 'APlayerPawn_Athena_C::OutsideSafeZone2Cue' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, OutsideSafeZone3Cue) == 0x006388, "Member 'APlayerPawn_Athena_C::OutsideSafeZone3Cue' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PlayRespawnFXOnSpawn) == 0x00638C, "Member 'APlayerPawn_Athena_C::PlayRespawnFXOnSpawn' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PlayerPawnAthena) == 0x006390, "Member 'APlayerPawn_Athena_C::PlayerPawnAthena' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SwingRight2) == 0x006398, "Member 'APlayerPawn_Athena_C::SwingRight2' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SwingLeft2) == 0x0063A8, "Member 'APlayerPawn_Athena_C::SwingLeft2' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, TestProceduralWaterInIsolation) == 0x0063B8, "Member 'APlayerPawn_Athena_C::TestProceduralWaterInIsolation' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Is_First_Water_Body) == 0x0063B9, "Member 'APlayerPawn_Athena_C::Is_First_Water_Body' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Is_Last_Water_Body) == 0x0063BA, "Member 'APlayerPawn_Athena_C::Is_Last_Water_Body' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, AccumulatedNormalizedDiveSpeed) == 0x0063C0, "Member 'APlayerPawn_Athena_C::AccumulatedNormalizedDiveSpeed' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WaterSprintBoostTag) == 0x0063C8, "Member 'APlayerPawn_Athena_C::WaterSprintBoostTag' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, CCPM_isHiddenInProp) == 0x0063D0, "Member 'APlayerPawn_Athena_C::CCPM_isHiddenInProp' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PawnHighlights) == 0x0063E0, "Member 'APlayerPawn_Athena_C::PawnHighlights' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Current_Highlight_Source) == 0x006430, "Member 'APlayerPawn_Athena_C::Current_Highlight_Source' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Current_Highlight_Priority) == 0x006438, "Member 'APlayerPawn_Athena_C::Current_Highlight_Priority' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Invulnerable_Highlight) == 0x006440, "Member 'APlayerPawn_Athena_C::Invulnerable_Highlight' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, IsGalileo) == 0x006470, "Member 'APlayerPawn_Athena_C::IsGalileo' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, HotFixSnow) == 0x006478, "Member 'APlayerPawn_Athena_C::HotFixSnow' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, NoSnowPlaylists) == 0x0064A0, "Member 'APlayerPawn_Athena_C::NoSnowPlaylists' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, GalileoPlaylistTag) == 0x0064F0, "Member 'APlayerPawn_Athena_C::GalileoPlaylistTag' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WeaponMIDs) == 0x0064F8, "Member 'APlayerPawn_Athena_C::WeaponMIDs' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, AmountOfTimesToAttemptRestoreMats) == 0x006508, "Member 'APlayerPawn_Athena_C::AmountOfTimesToAttemptRestoreMats' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, TC_PawnAthenaNPC) == 0x00650C, "Member 'APlayerPawn_Athena_C::TC_PawnAthenaNPC' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, HitGlowBrightnessScalar) == 0x006510, "Member 'APlayerPawn_Athena_C::HitGlowBrightnessScalar' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, CurrentWeaponMaterials) == 0x006518, "Member 'APlayerPawn_Athena_C::CurrentWeaponMaterials' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, CurrentWeaponMeshes) == 0x006528, "Member 'APlayerPawn_Athena_C::CurrentWeaponMeshes' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WeaponDissolveMIDs) == 0x006538, "Member 'APlayerPawn_Athena_C::WeaponDissolveMIDs' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, HitGlowBrightnessScalar_Mobile) == 0x006548, "Member 'APlayerPawn_Athena_C::HitGlowBrightnessScalar_Mobile' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, TC_PawnAthenaDecoy) == 0x006550, "Member 'APlayerPawn_Athena_C::TC_PawnAthenaDecoy' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, ScaleRate) == 0x006558, "Member 'APlayerPawn_Athena_C::ScaleRate' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, TetherQuestTag) == 0x006560, "Member 'APlayerPawn_Athena_C::TetherQuestTag' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, FirefliesTag) == 0x006580, "Member 'APlayerPawn_Athena_C::FirefliesTag' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, RightSideRim_Transform) == 0x006590, "Member 'APlayerPawn_Athena_C::RightSideRim_Transform' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Right_Side_Rim_Light) == 0x0065F0, "Member 'APlayerPawn_Athena_C::Right_Side_Rim_Light' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Rim_light_Shadow_Bias) == 0x0065F8, "Member 'APlayerPawn_Athena_C::Rim_light_Shadow_Bias' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Rim_Light_Intensity) == 0x006600, "Member 'APlayerPawn_Athena_C::Rim_Light_Intensity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PlayerAimRotation) == 0x006608, "Member 'APlayerPawn_Athena_C::PlayerAimRotation' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, ControlRotationReplicationTickRate) == 0x006620, "Member 'APlayerPawn_Athena_C::ControlRotationReplicationTickRate' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Elimination_Rez_Sequence_GC) == 0x006648, "Member 'APlayerPawn_Athena_C::Elimination_Rez_Sequence_GC' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Creative_Respawn_Teleportation_GC) == 0x00664C, "Member 'APlayerPawn_Athena_C::Creative_Respawn_Teleportation_GC' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Teleport_In_GC) == 0x006650, "Member 'APlayerPawn_Athena_C::Teleport_In_GC' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, RimlightDistanceFromCamera) == 0x006658, "Member 'APlayerPawn_Athena_C::RimlightDistanceFromCamera' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Rim_Light_Color___Night) == 0x006660, "Member 'APlayerPawn_Athena_C::Rim_Light_Color___Night' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Rim_Light_Color___Day) == 0x006670, "Member 'APlayerPawn_Athena_C::Rim_Light_Color___Day' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PhoneModeratorModeGameplayCue) == 0x006680, "Member 'APlayerPawn_Athena_C::PhoneModeratorModeGameplayCue' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PhoneInvulnerableGameplayCue) == 0x006684, "Member 'APlayerPawn_Athena_C::PhoneInvulnerableGameplayCue' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_HandsUp) == 0x006688, "Member 'APlayerPawn_Athena_C::Swinging_HandsUp' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_LockedToHip) == 0x006689, "Member 'APlayerPawn_Athena_C::Swinging_LockedToHip' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, InputDragCoefficient) == 0x006690, "Member 'APlayerPawn_Athena_C::InputDragCoefficient' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, ToggleSwingNativized) == 0x006698, "Member 'APlayerPawn_Athena_C::ToggleSwingNativized' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SwingingSound) == 0x0066A0, "Member 'APlayerPawn_Athena_C::SwingingSound' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_ReelingInCurve) == 0x0066A8, "Member 'APlayerPawn_Athena_C::Swinging_ReelingInCurve' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_NotReelingInCurve) == 0x0066B0, "Member 'APlayerPawn_Athena_C::Swinging_NotReelingInCurve' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_OriginalVecToTarget) == 0x0066B8, "Member 'APlayerPawn_Athena_C::Swinging_OriginalVecToTarget' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_ReelingIn) == 0x0066D0, "Member 'APlayerPawn_Athena_C::Swinging_ReelingIn' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_Goal_Length) == 0x0066D8, "Member 'APlayerPawn_Athena_C::Swinging_Goal_Length' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_ReelingTimeCurve) == 0x0066E0, "Member 'APlayerPawn_Athena_C::Swinging_ReelingTimeCurve' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_ColliderBigger) == 0x0066E8, "Member 'APlayerPawn_Athena_C::Swinging_ColliderBigger' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SoundParams) == 0x0066F0, "Member 'APlayerPawn_Athena_C::SoundParams' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Swinging_UseNewRotationAlgorithm) == 0x006700, "Member 'APlayerPawn_Athena_C::Swinging_UseNewRotationAlgorithm' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, AttachedWallInverseNormal) == 0x006708, "Member 'APlayerPawn_Athena_C::AttachedWallInverseNormal' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, VelocityOnSlideStart) == 0x006720, "Member 'APlayerPawn_Athena_C::VelocityOnSlideStart' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SlideStartTime) == 0x006738, "Member 'APlayerPawn_Athena_C::SlideStartTime' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MaxSlideTime) == 0x006740, "Member 'APlayerPawn_Athena_C::MaxSlideTime' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WallSlidingVelocityMultiplierCurve) == 0x006748, "Member 'APlayerPawn_Athena_C::WallSlidingVelocityMultiplierCurve' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WallSlidingAddedDownwardVelocityMultiplierCurve) == 0x006750, "Member 'APlayerPawn_Athena_C::WallSlidingAddedDownwardVelocityMultiplierCurve' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WallSlidingAddedDownwardVelocityMax) == 0x006758, "Member 'APlayerPawn_Athena_C::WallSlidingAddedDownwardVelocityMax' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, AttachedWallNormal) == 0x006760, "Member 'APlayerPawn_Athena_C::AttachedWallNormal' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, WallSlidingVelocity) == 0x006778, "Member 'APlayerPawn_Athena_C::WallSlidingVelocity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, DesiredDistanceToAttachedWall) == 0x006790, "Member 'APlayerPawn_Athena_C::DesiredDistanceToAttachedWall' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, MinGroundSlopeToLeaveAttachedWall) == 0x006798, "Member 'APlayerPawn_Athena_C::MinGroundSlopeToLeaveAttachedWall' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, OverrideSearchMontageInfo) == 0x0067A0, "Member 'APlayerPawn_Athena_C::OverrideSearchMontageInfo' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Is_Hidding_CharacterParrts) == 0x0067F8, "Member 'APlayerPawn_Athena_C::Is_Hidding_CharacterParrts' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, RimlightCVARBoost) == 0x006800, "Member 'APlayerPawn_Athena_C::RimlightCVARBoost' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Rimlight_Enabled) == 0x006808, "Member 'APlayerPawn_Athena_C::Rimlight_Enabled' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, LCVar_Name) == 0x006810, "Member 'APlayerPawn_Athena_C::LCVar_Name' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, PhysicalRimlightActor) == 0x006820, "Member 'APlayerPawn_Athena_C::PhysicalRimlightActor' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, UGC_RimLightIntensity) == 0x006828, "Member 'APlayerPawn_Athena_C::UGC_RimLightIntensity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SFX_WaterExit_3P) == 0x006850, "Member 'APlayerPawn_Athena_C::SFX_WaterExit_3P' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SFX_WaterExit_1P) == 0x006858, "Member 'APlayerPawn_Athena_C::SFX_WaterExit_1P' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SFX_WaterEntry_3P) == 0x006860, "Member 'APlayerPawn_Athena_C::SFX_WaterEntry_3P' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, SFX_WaterEntry_1P) == 0x006868, "Member 'APlayerPawn_Athena_C::SFX_WaterEntry_1P' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, EnableDecayRow) == 0x006870, "Member 'APlayerPawn_Athena_C::EnableDecayRow' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, CeilingHeight) == 0x006898, "Member 'APlayerPawn_Athena_C::CeilingHeight' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, BAProtoVelocity) == 0x0068A0, "Member 'APlayerPawn_Athena_C::BAProtoVelocity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, HF_TetherMultiplierHorz) == 0x0068B8, "Member 'APlayerPawn_Athena_C::HF_TetherMultiplierHorz' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, HF_TetherMultiplierVert) == 0x0068E0, "Member 'APlayerPawn_Athena_C::HF_TetherMultiplierVert' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Athena_C, Teleport_In_GC_Frontend) == 0x006908, "Member 'APlayerPawn_Athena_C::Teleport_In_GC_Frontend' has a wrong offset!");

}

