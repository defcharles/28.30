#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HarmonixMidi

#include "Basic.hpp"


namespace SDK
{

// Enum HarmonixMidi.EMusicalBeatType
// NumValues: 0x0003
enum class EMusicalBeatType : uint8
{
	Downbeat                                 = 0,
	Strong                                   = 1,
	Normal                                   = 2,
};

// Enum HarmonixMidi.EMusicTimeSpanOffsetUnits
// NumValues: 0x0012
enum class EMusicTimeSpanOffsetUnits : uint8
{
	Ms                                       = 0,
	Bars                                     = 1,
	Beats                                    = 2,
	ThirtySecondNotes                        = 3,
	SixteenthNotes                           = 4,
	EighthNotes                              = 5,
	QuarterNotes                             = 6,
	HalfNotes                                = 7,
	WholeNotes                               = 8,
	DottedSixteenthNotes                     = 9,
	DottedEighthNotes                        = 10,
	DottedQuarterNotes                       = 11,
	DottedHalfNotes                          = 12,
	DottedWholeNotes                         = 13,
	SixteenthNoteTriplets                    = 14,
	EighthNoteTriplets                       = 15,
	QuarterNoteTriplets                      = 16,
	HalfNoteTriplets                         = 17,
};

// Enum HarmonixMidi.EMusicTimeSpanLengthUnits
// NumValues: 0x0011
enum class EMusicTimeSpanLengthUnits : uint8
{
	Bars                                     = 0,
	Beats                                    = 1,
	ThirtySecondNotes                        = 2,
	SixteenthNotes                           = 3,
	EighthNotes                              = 4,
	QuarterNotes                             = 5,
	HalfNotes                                = 6,
	WholeNotes                               = 7,
	DottedSixteenthNotes                     = 8,
	DottedEighthNotes                        = 9,
	DottedQuarterNotes                       = 10,
	DottedHalfNotes                          = 11,
	DottedWholeNotes                         = 12,
	SixteenthNoteTriplets                    = 13,
	EighthNoteTriplets                       = 14,
	QuarterNoteTriplets                      = 15,
	HalfNoteTriplets                         = 16,
};

// ScriptStruct HarmonixMidi.PulseBar
// 0x0010 (0x0010 - 0x0000)
struct FPulseBar final
{
public:
	int32                                         StartTick;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LengthTicks;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstIncludedBeatIndex;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastIncludedBeatIndex;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPulseBar) == 0x000004, "Wrong alignment on FPulseBar");
static_assert(sizeof(FPulseBar) == 0x000010, "Wrong size on FPulseBar");
static_assert(offsetof(FPulseBar, StartTick) == 0x000000, "Member 'FPulseBar::StartTick' has a wrong offset!");
static_assert(offsetof(FPulseBar, LengthTicks) == 0x000004, "Member 'FPulseBar::LengthTicks' has a wrong offset!");
static_assert(offsetof(FPulseBar, FirstIncludedBeatIndex) == 0x000008, "Member 'FPulseBar::FirstIncludedBeatIndex' has a wrong offset!");
static_assert(offsetof(FPulseBar, LastIncludedBeatIndex) == 0x00000C, "Member 'FPulseBar::LastIncludedBeatIndex' has a wrong offset!");

// ScriptStruct HarmonixMidi.MusicTimestamp
// 0x0008 (0x0008 - 0x0000)
struct FMusicTimestamp final
{
public:
	int32                                         Bar;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Beat;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicTimestamp) == 0x000004, "Wrong alignment on FMusicTimestamp");
static_assert(sizeof(FMusicTimestamp) == 0x000008, "Wrong size on FMusicTimestamp");
static_assert(offsetof(FMusicTimestamp, Bar) == 0x000000, "Member 'FMusicTimestamp::Bar' has a wrong offset!");
static_assert(offsetof(FMusicTimestamp, Beat) == 0x000004, "Member 'FMusicTimestamp::Beat' has a wrong offset!");

// ScriptStruct HarmonixMidi.MidiSongPos
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FMidiSongPos final
{
public:
	float                                         SecondsFromBarOne;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsIncludingCountIn;                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeSigNumerator;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeSigDenominator;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tempo;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarsIncludingCountIn;                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeatsIncludingCountIn;                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicalBeatType                              BeatType;                                          // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicTimestamp                        Timestamp;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMidiSongPos) == 0x000008, "Wrong alignment on FMidiSongPos");
static_assert(sizeof(FMidiSongPos) == 0x000040, "Wrong size on FMidiSongPos");
static_assert(offsetof(FMidiSongPos, SecondsFromBarOne) == 0x000000, "Member 'FMidiSongPos::SecondsFromBarOne' has a wrong offset!");
static_assert(offsetof(FMidiSongPos, SecondsIncludingCountIn) == 0x000004, "Member 'FMidiSongPos::SecondsIncludingCountIn' has a wrong offset!");
static_assert(offsetof(FMidiSongPos, TimeSigNumerator) == 0x000008, "Member 'FMidiSongPos::TimeSigNumerator' has a wrong offset!");
static_assert(offsetof(FMidiSongPos, TimeSigDenominator) == 0x00000C, "Member 'FMidiSongPos::TimeSigDenominator' has a wrong offset!");
static_assert(offsetof(FMidiSongPos, Tempo) == 0x000010, "Member 'FMidiSongPos::Tempo' has a wrong offset!");
static_assert(offsetof(FMidiSongPos, BarsIncludingCountIn) == 0x000014, "Member 'FMidiSongPos::BarsIncludingCountIn' has a wrong offset!");
static_assert(offsetof(FMidiSongPos, BeatsIncludingCountIn) == 0x000018, "Member 'FMidiSongPos::BeatsIncludingCountIn' has a wrong offset!");
static_assert(offsetof(FMidiSongPos, BeatType) == 0x00001C, "Member 'FMidiSongPos::BeatType' has a wrong offset!");
static_assert(offsetof(FMidiSongPos, Timestamp) == 0x000020, "Member 'FMidiSongPos::Timestamp' has a wrong offset!");

// ScriptStruct HarmonixMidi.TimeSignature
// 0x0004 (0x0004 - 0x0000)
struct FTimeSignature final
{
public:
	int16                                         Numerator;                                         // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Denominator;                                       // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeSignature) == 0x000002, "Wrong alignment on FTimeSignature");
static_assert(sizeof(FTimeSignature) == 0x000004, "Wrong size on FTimeSignature");
static_assert(offsetof(FTimeSignature, Numerator) == 0x000000, "Member 'FTimeSignature::Numerator' has a wrong offset!");
static_assert(offsetof(FTimeSignature, Denominator) == 0x000002, "Member 'FTimeSignature::Denominator' has a wrong offset!");

// ScriptStruct HarmonixMidi.MusicMapTimespanBase
// 0x0008 (0x0008 - 0x0000)
struct FMusicMapTimespanBase
{
public:
	int32                                         StartTick;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LengthTicks;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicMapTimespanBase) == 0x000004, "Wrong alignment on FMusicMapTimespanBase");
static_assert(sizeof(FMusicMapTimespanBase) == 0x000008, "Wrong size on FMusicMapTimespanBase");
static_assert(offsetof(FMusicMapTimespanBase, StartTick) == 0x000000, "Member 'FMusicMapTimespanBase::StartTick' has a wrong offset!");
static_assert(offsetof(FMusicMapTimespanBase, LengthTicks) == 0x000004, "Member 'FMusicMapTimespanBase::LengthTicks' has a wrong offset!");

// ScriptStruct HarmonixMidi.TimeSignaturePoint
// 0x000C (0x0014 - 0x0008)
struct FTimeSignaturePoint final : public FMusicMapTimespanBase
{
public:
	int32                                         BarIndex;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeatIndex;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimeSignature                         TimeSignature;                                     // 0x0010(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeSignaturePoint) == 0x000004, "Wrong alignment on FTimeSignaturePoint");
static_assert(sizeof(FTimeSignaturePoint) == 0x000014, "Wrong size on FTimeSignaturePoint");
static_assert(offsetof(FTimeSignaturePoint, BarIndex) == 0x000008, "Member 'FTimeSignaturePoint::BarIndex' has a wrong offset!");
static_assert(offsetof(FTimeSignaturePoint, BeatIndex) == 0x00000C, "Member 'FTimeSignaturePoint::BeatIndex' has a wrong offset!");
static_assert(offsetof(FTimeSignaturePoint, TimeSignature) == 0x000010, "Member 'FTimeSignaturePoint::TimeSignature' has a wrong offset!");

// ScriptStruct HarmonixMidi.BarMap
// 0x0018 (0x0018 - 0x0000)
struct FBarMap final
{
public:
	int32                                         StartBar;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TicksPerQuarterNote;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FTimeSignaturePoint>            Points;                                            // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FBarMap) == 0x000008, "Wrong alignment on FBarMap");
static_assert(sizeof(FBarMap) == 0x000018, "Wrong size on FBarMap");
static_assert(offsetof(FBarMap, StartBar) == 0x000000, "Member 'FBarMap::StartBar' has a wrong offset!");
static_assert(offsetof(FBarMap, TicksPerQuarterNote) == 0x000004, "Member 'FBarMap::TicksPerQuarterNote' has a wrong offset!");
static_assert(offsetof(FBarMap, Points) == 0x000008, "Member 'FBarMap::Points' has a wrong offset!");

// ScriptStruct HarmonixMidi.BeatMapPoint
// 0x0008 (0x0010 - 0x0008)
struct FBeatMapPoint final : public FMusicMapTimespanBase
{
public:
	int32                                         PulseBar;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicalBeatType                              Type;                                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBeatMapPoint) == 0x000004, "Wrong alignment on FBeatMapPoint");
static_assert(sizeof(FBeatMapPoint) == 0x000010, "Wrong size on FBeatMapPoint");
static_assert(offsetof(FBeatMapPoint, PulseBar) == 0x000008, "Member 'FBeatMapPoint::PulseBar' has a wrong offset!");
static_assert(offsetof(FBeatMapPoint, Type) == 0x00000C, "Member 'FBeatMapPoint::Type' has a wrong offset!");

// ScriptStruct HarmonixMidi.BeatMap
// 0x0028 (0x0028 - 0x0000)
struct FBeatMap final
{
public:
	int32                                         TicksPerQuarterNote;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBeatMapPoint>                  Points;                                            // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPulseBar>                      Bars;                                              // 0x0018(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FBeatMap) == 0x000008, "Wrong alignment on FBeatMap");
static_assert(sizeof(FBeatMap) == 0x000028, "Wrong size on FBeatMap");
static_assert(offsetof(FBeatMap, TicksPerQuarterNote) == 0x000000, "Member 'FBeatMap::TicksPerQuarterNote' has a wrong offset!");
static_assert(offsetof(FBeatMap, Points) == 0x000008, "Member 'FBeatMap::Points' has a wrong offset!");
static_assert(offsetof(FBeatMap, Bars) == 0x000018, "Member 'FBeatMap::Bars' has a wrong offset!");

// ScriptStruct HarmonixMidi.ChordMapPoint
// 0x0004 (0x000C - 0x0008)
struct FChordMapPoint final : public FMusicMapTimespanBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChordMapPoint) == 0x000004, "Wrong alignment on FChordMapPoint");
static_assert(sizeof(FChordMapPoint) == 0x00000C, "Wrong size on FChordMapPoint");
static_assert(offsetof(FChordMapPoint, Name) == 0x000008, "Member 'FChordMapPoint::Name' has a wrong offset!");

// ScriptStruct HarmonixMidi.ChordProgressionMap
// 0x0020 (0x0020 - 0x0000)
struct FChordProgressionMap final
{
public:
	int32                                         TicksPerQuarterNote;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChordMapPoint>                 Points;                                            // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChordProgressionMap) == 0x000008, "Wrong alignment on FChordProgressionMap");
static_assert(sizeof(FChordProgressionMap) == 0x000020, "Wrong size on FChordProgressionMap");
static_assert(offsetof(FChordProgressionMap, TicksPerQuarterNote) == 0x000000, "Member 'FChordProgressionMap::TicksPerQuarterNote' has a wrong offset!");
static_assert(offsetof(FChordProgressionMap, Points) == 0x000008, "Member 'FChordProgressionMap::Points' has a wrong offset!");

// ScriptStruct HarmonixMidi.MidiMsg
// 0x0004 (0x0004 - 0x0000)
struct FMidiMsg final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMidiMsg) == 0x000001, "Wrong alignment on FMidiMsg");
static_assert(sizeof(FMidiMsg) == 0x000004, "Wrong size on FMidiMsg");

// ScriptStruct HarmonixMidi.MidiEvent
// 0x0008 (0x0008 - 0x0000)
struct FMidiEvent final
{
public:
	int32                                         Tick;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMidiMsg                               Message;                                           // 0x0004(0x0004)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMidiEvent) == 0x000004, "Wrong alignment on FMidiEvent");
static_assert(sizeof(FMidiEvent) == 0x000008, "Wrong size on FMidiEvent");
static_assert(offsetof(FMidiEvent, Tick) == 0x000000, "Member 'FMidiEvent::Tick' has a wrong offset!");
static_assert(offsetof(FMidiEvent, Message) == 0x000004, "Member 'FMidiEvent::Message' has a wrong offset!");

// ScriptStruct HarmonixMidi.TempoInfoPoint
// 0x0008 (0x0010 - 0x0008)
struct FTempoInfoPoint final : public FMusicMapTimespanBase
{
public:
	float                                         Ms;                                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MidiTempo;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTempoInfoPoint) == 0x000004, "Wrong alignment on FTempoInfoPoint");
static_assert(sizeof(FTempoInfoPoint) == 0x000010, "Wrong size on FTempoInfoPoint");
static_assert(offsetof(FTempoInfoPoint, Ms) == 0x000008, "Member 'FTempoInfoPoint::Ms' has a wrong offset!");
static_assert(offsetof(FTempoInfoPoint, MidiTempo) == 0x00000C, "Member 'FTempoInfoPoint::MidiTempo' has a wrong offset!");

// ScriptStruct HarmonixMidi.TempoMap
// 0x0020 (0x0020 - 0x0000)
struct FTempoMap final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TicksPerQuarterNote;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTempoInfoPoint>                Points;                                            // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTempoMap) == 0x000008, "Wrong alignment on FTempoMap");
static_assert(sizeof(FTempoMap) == 0x000020, "Wrong size on FTempoMap");
static_assert(offsetof(FTempoMap, TicksPerQuarterNote) == 0x000008, "Member 'FTempoMap::TicksPerQuarterNote' has a wrong offset!");
static_assert(offsetof(FTempoMap, Points) == 0x000010, "Member 'FTempoMap::Points' has a wrong offset!");

// ScriptStruct HarmonixMidi.SongLengthData
// 0x000C (0x000C - 0x0000)
struct FSongLengthData final
{
public:
	int32                                         LengthTicks;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LengthBars;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTick;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSongLengthData) == 0x000004, "Wrong alignment on FSongLengthData");
static_assert(sizeof(FSongLengthData) == 0x00000C, "Wrong size on FSongLengthData");
static_assert(offsetof(FSongLengthData, LengthTicks) == 0x000000, "Member 'FSongLengthData::LengthTicks' has a wrong offset!");
static_assert(offsetof(FSongLengthData, LengthBars) == 0x000004, "Member 'FSongLengthData::LengthBars' has a wrong offset!");
static_assert(offsetof(FSongLengthData, LastTick) == 0x000008, "Member 'FSongLengthData::LastTick' has a wrong offset!");

// ScriptStruct HarmonixMidi.SongSection
// 0x0010 (0x0018 - 0x0008)
struct FSongSection final : public FMusicMapTimespanBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSongSection) == 0x000008, "Wrong alignment on FSongSection");
static_assert(sizeof(FSongSection) == 0x000018, "Wrong size on FSongSection");
static_assert(offsetof(FSongSection, Name) == 0x000008, "Member 'FSongSection::Name' has a wrong offset!");

// ScriptStruct HarmonixMidi.SectionMap
// 0x0018 (0x0018 - 0x0000)
struct FSectionMap final
{
public:
	int32                                         TicksPerQuarterNote;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSongSection>                   Points;                                            // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSectionMap) == 0x000008, "Wrong alignment on FSectionMap");
static_assert(sizeof(FSectionMap) == 0x000018, "Wrong size on FSectionMap");
static_assert(offsetof(FSectionMap, TicksPerQuarterNote) == 0x000000, "Member 'FSectionMap::TicksPerQuarterNote' has a wrong offset!");
static_assert(offsetof(FSectionMap, Points) == 0x000008, "Member 'FSectionMap::Points' has a wrong offset!");

// ScriptStruct HarmonixMidi.SongMaps
// 0x00C0 (0x00C0 - 0x0000)
struct FSongMaps final
{
public:
	int32                                         TicksPerQuarterNote;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTempoMap                              TempoMap;                                          // 0x0008(0x0020)(Protected, NativeAccessSpecifierProtected)
	struct FBarMap                                BarMap;                                            // 0x0028(0x0018)(Protected, NativeAccessSpecifierProtected)
	struct FBeatMap                               BeatMap;                                           // 0x0040(0x0028)(Protected, NativeAccessSpecifierProtected)
	struct FSectionMap                            SectionMap;                                        // 0x0068(0x0018)(Protected, NativeAccessSpecifierProtected)
	struct FChordProgressionMap                   ChordMap;                                          // 0x0080(0x0020)(Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         TrackNames;                                        // 0x00A0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FSongLengthData                        LengthData;                                        // 0x00B0(0x000C)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSongMaps) == 0x000008, "Wrong alignment on FSongMaps");
static_assert(sizeof(FSongMaps) == 0x0000C0, "Wrong size on FSongMaps");
static_assert(offsetof(FSongMaps, TicksPerQuarterNote) == 0x000000, "Member 'FSongMaps::TicksPerQuarterNote' has a wrong offset!");
static_assert(offsetof(FSongMaps, TempoMap) == 0x000008, "Member 'FSongMaps::TempoMap' has a wrong offset!");
static_assert(offsetof(FSongMaps, BarMap) == 0x000028, "Member 'FSongMaps::BarMap' has a wrong offset!");
static_assert(offsetof(FSongMaps, BeatMap) == 0x000040, "Member 'FSongMaps::BeatMap' has a wrong offset!");
static_assert(offsetof(FSongMaps, SectionMap) == 0x000068, "Member 'FSongMaps::SectionMap' has a wrong offset!");
static_assert(offsetof(FSongMaps, ChordMap) == 0x000080, "Member 'FSongMaps::ChordMap' has a wrong offset!");
static_assert(offsetof(FSongMaps, TrackNames) == 0x0000A0, "Member 'FSongMaps::TrackNames' has a wrong offset!");
static_assert(offsetof(FSongMaps, LengthData) == 0x0000B0, "Member 'FSongMaps::LengthData' has a wrong offset!");

// ScriptStruct HarmonixMidi.MidiTrack
// 0x0028 (0x0028 - 0x0000)
struct FMidiTrack final
{
public:
	TArray<struct FMidiEvent>                     Events;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          Sorted;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrimaryMidiChannel;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Strings;                                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMidiTrack) == 0x000008, "Wrong alignment on FMidiTrack");
static_assert(sizeof(FMidiTrack) == 0x000028, "Wrong size on FMidiTrack");
static_assert(offsetof(FMidiTrack, Events) == 0x000000, "Member 'FMidiTrack::Events' has a wrong offset!");
static_assert(offsetof(FMidiTrack, Sorted) == 0x000010, "Member 'FMidiTrack::Sorted' has a wrong offset!");
static_assert(offsetof(FMidiTrack, PrimaryMidiChannel) == 0x000014, "Member 'FMidiTrack::PrimaryMidiChannel' has a wrong offset!");
static_assert(offsetof(FMidiTrack, Strings) == 0x000018, "Member 'FMidiTrack::Strings' has a wrong offset!");

// ScriptStruct HarmonixMidi.MidiFileData
// 0x00F0 (0x00F0 - 0x0000)
struct FMidiFileData final
{
public:
	class FString                                 MidiFileName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicksPerQuarterNote;                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSongMaps                              SongMaps;                                          // 0x0018(0x00C0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FMidiTrack>                     Tracks;                                            // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LastEventTick;                                     // 0x00E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMidiFileData) == 0x000008, "Wrong alignment on FMidiFileData");
static_assert(sizeof(FMidiFileData) == 0x0000F0, "Wrong size on FMidiFileData");
static_assert(offsetof(FMidiFileData, MidiFileName) == 0x000000, "Member 'FMidiFileData::MidiFileName' has a wrong offset!");
static_assert(offsetof(FMidiFileData, TicksPerQuarterNote) == 0x000010, "Member 'FMidiFileData::TicksPerQuarterNote' has a wrong offset!");
static_assert(offsetof(FMidiFileData, SongMaps) == 0x000018, "Member 'FMidiFileData::SongMaps' has a wrong offset!");
static_assert(offsetof(FMidiFileData, Tracks) == 0x0000D8, "Member 'FMidiFileData::Tracks' has a wrong offset!");
static_assert(offsetof(FMidiFileData, LastEventTick) == 0x0000E8, "Member 'FMidiFileData::LastEventTick' has a wrong offset!");

// ScriptStruct HarmonixMidi.MusicalTimeSpan
// 0x0010 (0x0010 - 0x0000)
struct FMusicalTimeSpan final
{
public:
	EMusicTimeSpanLengthUnits                     LengthUnits;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Length;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicTimeSpanOffsetUnits                     OffsetUnits;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Offset;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicalTimeSpan) == 0x000004, "Wrong alignment on FMusicalTimeSpan");
static_assert(sizeof(FMusicalTimeSpan) == 0x000010, "Wrong size on FMusicalTimeSpan");
static_assert(offsetof(FMusicalTimeSpan, LengthUnits) == 0x000000, "Member 'FMusicalTimeSpan::LengthUnits' has a wrong offset!");
static_assert(offsetof(FMusicalTimeSpan, Length) == 0x000004, "Member 'FMusicalTimeSpan::Length' has a wrong offset!");
static_assert(offsetof(FMusicalTimeSpan, OffsetUnits) == 0x000008, "Member 'FMusicalTimeSpan::OffsetUnits' has a wrong offset!");
static_assert(offsetof(FMusicalTimeSpan, Offset) == 0x00000C, "Member 'FMusicalTimeSpan::Offset' has a wrong offset!");

// ScriptStruct HarmonixMidi.MidiNote
// 0x0001 (0x0001 - 0x0000)
struct FMidiNote final
{
public:
	uint8                                         NoteNumber;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMidiNote) == 0x000001, "Wrong alignment on FMidiNote");
static_assert(sizeof(FMidiNote) == 0x000001, "Wrong size on FMidiNote");
static_assert(offsetof(FMidiNote, NoteNumber) == 0x000000, "Member 'FMidiNote::NoteNumber' has a wrong offset!");

}

