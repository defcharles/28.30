#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassLOD

#include "Basic.hpp"

#include "MassEntity_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// Enum MassLOD.EMassLOD
// NumValues: 0x0005
enum class EMassLOD : uint8
{
	High                                     = 0,
	Medium                                   = 1,
	Low                                      = 2,
	Off                                      = 3,
	Max                                      = 4,
};

// Enum MassLOD.EMassVisibility
// NumValues: 0x0004
enum class EMassVisibility : uint8
{
	CanBeSeen                                = 0,
	CulledByFrustum                          = 1,
	CulledByDistance                         = 2,
	Max                                      = 3,
};

// ScriptStruct MassLOD.MassHighLODTag
// 0x0000 (0x0001 - 0x0001)
struct FMassHighLODTag final : public FMassTag
{
};
static_assert(alignof(FMassHighLODTag) == 0x000001, "Wrong alignment on FMassHighLODTag");
static_assert(sizeof(FMassHighLODTag) == 0x000001, "Wrong size on FMassHighLODTag");

// ScriptStruct MassLOD.MassMediumLODTag
// 0x0000 (0x0001 - 0x0001)
struct FMassMediumLODTag final : public FMassTag
{
};
static_assert(alignof(FMassMediumLODTag) == 0x000001, "Wrong alignment on FMassMediumLODTag");
static_assert(sizeof(FMassMediumLODTag) == 0x000001, "Wrong size on FMassMediumLODTag");

// ScriptStruct MassLOD.MassLowLODTag
// 0x0000 (0x0001 - 0x0001)
struct FMassLowLODTag final : public FMassTag
{
};
static_assert(alignof(FMassLowLODTag) == 0x000001, "Wrong alignment on FMassLowLODTag");
static_assert(sizeof(FMassLowLODTag) == 0x000001, "Wrong size on FMassLowLODTag");

// ScriptStruct MassLOD.MassOffLODTag
// 0x0000 (0x0001 - 0x0001)
struct FMassOffLODTag final : public FMassTag
{
};
static_assert(alignof(FMassOffLODTag) == 0x000001, "Wrong alignment on FMassOffLODTag");
static_assert(sizeof(FMassOffLODTag) == 0x000001, "Wrong size on FMassOffLODTag");

// ScriptStruct MassLOD.MassViewerInfoFragment
// 0x0008 (0x0008 - 0x0000)
struct FMassViewerInfoFragment final : public FMassFragment
{
public:
	float                                         ClosestViewerDistanceSq;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClosestDistanceToFrustum;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassViewerInfoFragment) == 0x000004, "Wrong alignment on FMassViewerInfoFragment");
static_assert(sizeof(FMassViewerInfoFragment) == 0x000008, "Wrong size on FMassViewerInfoFragment");
static_assert(offsetof(FMassViewerInfoFragment, ClosestViewerDistanceSq) == 0x000000, "Member 'FMassViewerInfoFragment::ClosestViewerDistanceSq' has a wrong offset!");
static_assert(offsetof(FMassViewerInfoFragment, ClosestDistanceToFrustum) == 0x000004, "Member 'FMassViewerInfoFragment::ClosestDistanceToFrustum' has a wrong offset!");

// ScriptStruct MassLOD.MassVariableTickChunkFragment
// 0x000C (0x000C - 0x0000)
struct FMassVariableTickChunkFragment : public FMassChunkFragment
{
public:
	bool                                          bShouldTickThisFrame;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMassLOD                                      LOD;                                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeUntilNextTick;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LastChunkSerialModificationNumber;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMassVariableTickChunkFragment) == 0x000004, "Wrong alignment on FMassVariableTickChunkFragment");
static_assert(sizeof(FMassVariableTickChunkFragment) == 0x00000C, "Wrong size on FMassVariableTickChunkFragment");
static_assert(offsetof(FMassVariableTickChunkFragment, bShouldTickThisFrame) == 0x000000, "Member 'FMassVariableTickChunkFragment::bShouldTickThisFrame' has a wrong offset!");
static_assert(offsetof(FMassVariableTickChunkFragment, LOD) == 0x000001, "Member 'FMassVariableTickChunkFragment::LOD' has a wrong offset!");
static_assert(offsetof(FMassVariableTickChunkFragment, TimeUntilNextTick) == 0x000004, "Member 'FMassVariableTickChunkFragment::TimeUntilNextTick' has a wrong offset!");
static_assert(offsetof(FMassVariableTickChunkFragment, LastChunkSerialModificationNumber) == 0x000008, "Member 'FMassVariableTickChunkFragment::LastChunkSerialModificationNumber' has a wrong offset!");

// ScriptStruct MassLOD.MassCollectLODViewerInfoTag
// 0x0000 (0x0001 - 0x0001)
struct FMassCollectLODViewerInfoTag final : public FMassTag
{
};
static_assert(alignof(FMassCollectLODViewerInfoTag) == 0x000001, "Wrong alignment on FMassCollectLODViewerInfoTag");
static_assert(sizeof(FMassCollectLODViewerInfoTag) == 0x000001, "Wrong size on FMassCollectLODViewerInfoTag");

// ScriptStruct MassLOD.MassCollectDistanceLODViewerInfoTag
// 0x0000 (0x0001 - 0x0001)
struct FMassCollectDistanceLODViewerInfoTag final : public FMassTag
{
};
static_assert(alignof(FMassCollectDistanceLODViewerInfoTag) == 0x000001, "Wrong alignment on FMassCollectDistanceLODViewerInfoTag");
static_assert(sizeof(FMassCollectDistanceLODViewerInfoTag) == 0x000001, "Wrong size on FMassCollectDistanceLODViewerInfoTag");

// ScriptStruct MassLOD.MassVisibilityCanBeSeenTag
// 0x0000 (0x0001 - 0x0001)
struct FMassVisibilityCanBeSeenTag final : public FMassTag
{
};
static_assert(alignof(FMassVisibilityCanBeSeenTag) == 0x000001, "Wrong alignment on FMassVisibilityCanBeSeenTag");
static_assert(sizeof(FMassVisibilityCanBeSeenTag) == 0x000001, "Wrong size on FMassVisibilityCanBeSeenTag");

// ScriptStruct MassLOD.MassVisibilityCulledByFrustumTag
// 0x0000 (0x0001 - 0x0001)
struct FMassVisibilityCulledByFrustumTag final : public FMassTag
{
};
static_assert(alignof(FMassVisibilityCulledByFrustumTag) == 0x000001, "Wrong alignment on FMassVisibilityCulledByFrustumTag");
static_assert(sizeof(FMassVisibilityCulledByFrustumTag) == 0x000001, "Wrong size on FMassVisibilityCulledByFrustumTag");

// ScriptStruct MassLOD.MassVisibilityCulledByDistanceTag
// 0x0000 (0x0001 - 0x0001)
struct FMassVisibilityCulledByDistanceTag final : public FMassTag
{
};
static_assert(alignof(FMassVisibilityCulledByDistanceTag) == 0x000001, "Wrong alignment on FMassVisibilityCulledByDistanceTag");
static_assert(sizeof(FMassVisibilityCulledByDistanceTag) == 0x000001, "Wrong size on FMassVisibilityCulledByDistanceTag");

// ScriptStruct MassLOD.MassVisualizationChunkFragment
// 0x0008 (0x0008 - 0x0000)
struct FMassVisualizationChunkFragment final : public FMassChunkFragment
{
public:
	EMassVisibility                               Visibility;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bContainsNewlyVisibleEntity;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMassVisualizationChunkFragment) == 0x000004, "Wrong alignment on FMassVisualizationChunkFragment");
static_assert(sizeof(FMassVisualizationChunkFragment) == 0x000008, "Wrong size on FMassVisualizationChunkFragment");
static_assert(offsetof(FMassVisualizationChunkFragment, Visibility) == 0x000000, "Member 'FMassVisualizationChunkFragment::Visibility' has a wrong offset!");
static_assert(offsetof(FMassVisualizationChunkFragment, bContainsNewlyVisibleEntity) == 0x000001, "Member 'FMassVisualizationChunkFragment::bContainsNewlyVisibleEntity' has a wrong offset!");
static_assert(offsetof(FMassVisualizationChunkFragment, DeltaTime) == 0x000004, "Member 'FMassVisualizationChunkFragment::DeltaTime' has a wrong offset!");

// ScriptStruct MassLOD.MassViewerHandle
// 0x0000 (0x0008 - 0x0008)
struct FMassViewerHandle final : public FIndexedHandleBase
{
};
static_assert(alignof(FMassViewerHandle) == 0x000004, "Wrong alignment on FMassViewerHandle");
static_assert(sizeof(FMassViewerHandle) == 0x000008, "Wrong size on FMassViewerHandle");

// ScriptStruct MassLOD.ViewerInfo
// 0x0060 (0x0060 - 0x0000)
struct FViewerInfo final
{
public:
	class AActor*                                 ActorViewer;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x58];                                       // 0x0008(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FViewerInfo) == 0x000008, "Wrong alignment on FViewerInfo");
static_assert(sizeof(FViewerInfo) == 0x000060, "Wrong size on FViewerInfo");
static_assert(offsetof(FViewerInfo, ActorViewer) == 0x000000, "Member 'FViewerInfo::ActorViewer' has a wrong offset!");

// ScriptStruct MassLOD.MassSimulationLODFragment
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FMassSimulationLODFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSimulationLODFragment) == 0x000004, "Wrong alignment on FMassSimulationLODFragment");
static_assert(sizeof(FMassSimulationLODFragment) == 0x000008, "Wrong size on FMassSimulationLODFragment");

// ScriptStruct MassLOD.MassSimulationVariableTickFragment
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMassSimulationVariableTickFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSimulationVariableTickFragment) == 0x000008, "Wrong alignment on FMassSimulationVariableTickFragment");
static_assert(sizeof(FMassSimulationVariableTickFragment) == 0x000010, "Wrong size on FMassSimulationVariableTickFragment");

// ScriptStruct MassLOD.MassSimulationVariableTickChunkFragment
// 0x0000 (0x000C - 0x000C)
struct FMassSimulationVariableTickChunkFragment final : public FMassVariableTickChunkFragment
{
};
static_assert(alignof(FMassSimulationVariableTickChunkFragment) == 0x000004, "Wrong alignment on FMassSimulationVariableTickChunkFragment");
static_assert(sizeof(FMassSimulationVariableTickChunkFragment) == 0x00000C, "Wrong size on FMassSimulationVariableTickChunkFragment");

// ScriptStruct MassLOD.MassSimulationLODParameters
// 0x0028 (0x0028 - 0x0000)
struct FMassSimulationLODParameters final : public FMassSharedFragment
{
public:
	float                                         LODDistance[0x4];                                  // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BufferHysteresisOnDistancePercentage;              // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODMaxCount[0x4];                                  // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetLODTags;                                       // 0x0024(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSimulationLODParameters) == 0x000004, "Wrong alignment on FMassSimulationLODParameters");
static_assert(sizeof(FMassSimulationLODParameters) == 0x000028, "Wrong size on FMassSimulationLODParameters");
static_assert(offsetof(FMassSimulationLODParameters, LODDistance) == 0x000000, "Member 'FMassSimulationLODParameters::LODDistance' has a wrong offset!");
static_assert(offsetof(FMassSimulationLODParameters, BufferHysteresisOnDistancePercentage) == 0x000010, "Member 'FMassSimulationLODParameters::BufferHysteresisOnDistancePercentage' has a wrong offset!");
static_assert(offsetof(FMassSimulationLODParameters, LODMaxCount) == 0x000014, "Member 'FMassSimulationLODParameters::LODMaxCount' has a wrong offset!");
static_assert(offsetof(FMassSimulationLODParameters, bSetLODTags) == 0x000024, "Member 'FMassSimulationLODParameters::bSetLODTags' has a wrong offset!");

// ScriptStruct MassLOD.MassSimulationVariableTickParameters
// 0x0014 (0x0014 - 0x0000)
struct FMassSimulationVariableTickParameters final : public FMassSharedFragment
{
public:
	float                                         TickRates[0x4];                                    // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpreadFirstSimulationUpdate;                      // 0x0010(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSimulationVariableTickParameters) == 0x000004, "Wrong alignment on FMassSimulationVariableTickParameters");
static_assert(sizeof(FMassSimulationVariableTickParameters) == 0x000014, "Wrong size on FMassSimulationVariableTickParameters");
static_assert(offsetof(FMassSimulationVariableTickParameters, TickRates) == 0x000000, "Member 'FMassSimulationVariableTickParameters::TickRates' has a wrong offset!");
static_assert(offsetof(FMassSimulationVariableTickParameters, bSpreadFirstSimulationUpdate) == 0x000010, "Member 'FMassSimulationVariableTickParameters::bSpreadFirstSimulationUpdate' has a wrong offset!");

// ScriptStruct MassLOD.MassSimulationLODSharedFragment
// 0x2020 (0x2020 - 0x0000)
struct alignas(0x08) FMassSimulationLODSharedFragment final : public FMassSharedFragment
{
public:
	uint8                                         Pad_0[0x2020];                                     // 0x0000(0x2020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSimulationLODSharedFragment) == 0x000008, "Wrong alignment on FMassSimulationLODSharedFragment");
static_assert(sizeof(FMassSimulationLODSharedFragment) == 0x002020, "Wrong size on FMassSimulationLODSharedFragment");

// ScriptStruct MassLOD.MassSimulationVariableTickSharedFragment
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FMassSimulationVariableTickSharedFragment final : public FMassSharedFragment
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSimulationVariableTickSharedFragment) == 0x000008, "Wrong alignment on FMassSimulationVariableTickSharedFragment");
static_assert(sizeof(FMassSimulationVariableTickSharedFragment) == 0x000030, "Wrong size on FMassSimulationVariableTickSharedFragment");

}

