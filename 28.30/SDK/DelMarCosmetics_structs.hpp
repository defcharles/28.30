#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarCosmetics

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DelMarCore_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum DelMarCosmetics.EDelMarWheelMirrorType
// NumValues: 0x0003
enum class EDelMarWheelMirrorType : uint8
{
	Scale                                    = 0,
	Rotate                                   = 1,
	None                                     = 2,
};

// Enum DelMarCosmetics.EDelMarPreviewCameraType
// NumValues: 0x0003
enum class EDelMarPreviewCameraType : uint8
{
	None                                     = 0,
	ZoomIn                                   = 1,
	ZoomOut                                  = 2,
};

// Enum DelMarCosmetics.EDelMarWheelAttachPoint
// NumValues: 0x0003
enum class EDelMarWheelAttachPoint : uint8
{
	Spin                                     = 0,
	Pivot                                    = 1,
	Contact                                  = 2,
};

// ScriptStruct DelMarCosmetics.DelMarVehicleAnimInfo
// 0x0008 (0x0008 - 0x0000)
struct FDelMarVehicleAnimInfo final
{
public:
	float                                         SteerAngleDegrees;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisualSteerAngleDegrees;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarVehicleAnimInfo) == 0x000004, "Wrong alignment on FDelMarVehicleAnimInfo");
static_assert(sizeof(FDelMarVehicleAnimInfo) == 0x000008, "Wrong size on FDelMarVehicleAnimInfo");
static_assert(offsetof(FDelMarVehicleAnimInfo, SteerAngleDegrees) == 0x000000, "Member 'FDelMarVehicleAnimInfo::SteerAngleDegrees' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleAnimInfo, VisualSteerAngleDegrees) == 0x000004, "Member 'FDelMarVehicleAnimInfo::VisualSteerAngleDegrees' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarVehicleWheelAnimInfo
// 0x001C (0x001C - 0x0000)
struct FDelMarVehicleWheelAnimInfo final
{
public:
	float                                         SpringToWheelOffsetZ;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         SpringTravelRange;                                 // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRadius;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TravelDistance;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpinSpeedDegrees;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpinDegrees;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarVehicleWheelAnimInfo) == 0x000004, "Wrong alignment on FDelMarVehicleWheelAnimInfo");
static_assert(sizeof(FDelMarVehicleWheelAnimInfo) == 0x00001C, "Wrong size on FDelMarVehicleWheelAnimInfo");
static_assert(offsetof(FDelMarVehicleWheelAnimInfo, SpringToWheelOffsetZ) == 0x000000, "Member 'FDelMarVehicleWheelAnimInfo::SpringToWheelOffsetZ' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleWheelAnimInfo, SpringTravelRange) == 0x000004, "Member 'FDelMarVehicleWheelAnimInfo::SpringTravelRange' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleWheelAnimInfo, WheelRadius) == 0x00000C, "Member 'FDelMarVehicleWheelAnimInfo::WheelRadius' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleWheelAnimInfo, TravelDistance) == 0x000010, "Member 'FDelMarVehicleWheelAnimInfo::TravelDistance' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleWheelAnimInfo, SpinSpeedDegrees) == 0x000014, "Member 'FDelMarVehicleWheelAnimInfo::SpinSpeedDegrees' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleWheelAnimInfo, SpinDegrees) == 0x000018, "Member 'FDelMarVehicleWheelAnimInfo::SpinDegrees' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarVehicleBooster
// 0x0018 (0x0018 - 0x0000)
struct FDelMarVehicleBooster final
{
public:
	class UNiagaraSystem*                         BoosterSystem;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoosterSocket;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSideBooster;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDownBooster;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFrontBooster;                                   // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBackBooster;                                    // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0010(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarVehicleBooster) == 0x000008, "Wrong alignment on FDelMarVehicleBooster");
static_assert(sizeof(FDelMarVehicleBooster) == 0x000018, "Wrong size on FDelMarVehicleBooster");
static_assert(offsetof(FDelMarVehicleBooster, BoosterSystem) == 0x000000, "Member 'FDelMarVehicleBooster::BoosterSystem' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleBooster, BoosterSocket) == 0x000008, "Member 'FDelMarVehicleBooster::BoosterSocket' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleBooster, bIsSideBooster) == 0x00000C, "Member 'FDelMarVehicleBooster::bIsSideBooster' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleBooster, bIsDownBooster) == 0x00000D, "Member 'FDelMarVehicleBooster::bIsDownBooster' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleBooster, bIsFrontBooster) == 0x00000E, "Member 'FDelMarVehicleBooster::bIsFrontBooster' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleBooster, bIsBackBooster) == 0x00000F, "Member 'FDelMarVehicleBooster::bIsBackBooster' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleBooster, NiagaraComponent) == 0x000010, "Member 'FDelMarVehicleBooster::NiagaraComponent' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarVehicleWheelSetup
// 0x0010 (0x0010 - 0x0000)
struct FDelMarVehicleWheelSetup final
{
public:
	class FName                                   WheelSpinBone;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WheelPivotBone;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WheelContactBone;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEligibleForPhysMatContactFx;                      // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarVehicleWheelSetup) == 0x000004, "Wrong alignment on FDelMarVehicleWheelSetup");
static_assert(sizeof(FDelMarVehicleWheelSetup) == 0x000010, "Wrong size on FDelMarVehicleWheelSetup");
static_assert(offsetof(FDelMarVehicleWheelSetup, WheelSpinBone) == 0x000000, "Member 'FDelMarVehicleWheelSetup::WheelSpinBone' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleWheelSetup, WheelPivotBone) == 0x000004, "Member 'FDelMarVehicleWheelSetup::WheelPivotBone' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleWheelSetup, WheelContactBone) == 0x000008, "Member 'FDelMarVehicleWheelSetup::WheelContactBone' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleWheelSetup, bEligibleForPhysMatContactFx) == 0x00000C, "Member 'FDelMarVehicleWheelSetup::bEligibleForPhysMatContactFx' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarVehicleCosmeticWheelInfo
// 0x0030 (0x0030 - 0x0000)
struct FDelMarVehicleCosmeticWheelInfo final
{
public:
	class UNiagaraComponent*                      ContactParticleComponent;                          // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         ContactParticle;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      ContactMaterial;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleWheelIndex                      WheelIndex;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarVehicleWheelSetup               Setup;                                             // 0x001C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarVehicleCosmeticWheelInfo) == 0x000008, "Wrong alignment on FDelMarVehicleCosmeticWheelInfo");
static_assert(sizeof(FDelMarVehicleCosmeticWheelInfo) == 0x000030, "Wrong size on FDelMarVehicleCosmeticWheelInfo");
static_assert(offsetof(FDelMarVehicleCosmeticWheelInfo, ContactParticleComponent) == 0x000000, "Member 'FDelMarVehicleCosmeticWheelInfo::ContactParticleComponent' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleCosmeticWheelInfo, ContactParticle) == 0x000008, "Member 'FDelMarVehicleCosmeticWheelInfo::ContactParticle' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleCosmeticWheelInfo, ContactMaterial) == 0x000010, "Member 'FDelMarVehicleCosmeticWheelInfo::ContactMaterial' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleCosmeticWheelInfo, WheelIndex) == 0x000018, "Member 'FDelMarVehicleCosmeticWheelInfo::WheelIndex' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleCosmeticWheelInfo, Setup) == 0x00001C, "Member 'FDelMarVehicleCosmeticWheelInfo::Setup' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarOverrideParameter_Bool
// 0x0008 (0x0008 - 0x0000)
struct FDelMarOverrideParameter_Bool final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarOverrideParameter_Bool) == 0x000004, "Wrong alignment on FDelMarOverrideParameter_Bool");
static_assert(sizeof(FDelMarOverrideParameter_Bool) == 0x000008, "Wrong size on FDelMarOverrideParameter_Bool");
static_assert(offsetof(FDelMarOverrideParameter_Bool, Name) == 0x000000, "Member 'FDelMarOverrideParameter_Bool::Name' has a wrong offset!");
static_assert(offsetof(FDelMarOverrideParameter_Bool, Value) == 0x000004, "Member 'FDelMarOverrideParameter_Bool::Value' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarOverrideParameter_Int
// 0x0008 (0x0008 - 0x0000)
struct FDelMarOverrideParameter_Int final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarOverrideParameter_Int) == 0x000004, "Wrong alignment on FDelMarOverrideParameter_Int");
static_assert(sizeof(FDelMarOverrideParameter_Int) == 0x000008, "Wrong size on FDelMarOverrideParameter_Int");
static_assert(offsetof(FDelMarOverrideParameter_Int, Name) == 0x000000, "Member 'FDelMarOverrideParameter_Int::Name' has a wrong offset!");
static_assert(offsetof(FDelMarOverrideParameter_Int, Value) == 0x000004, "Member 'FDelMarOverrideParameter_Int::Value' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarOverrideParameter_Float
// 0x0008 (0x0008 - 0x0000)
struct FDelMarOverrideParameter_Float final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarOverrideParameter_Float) == 0x000004, "Wrong alignment on FDelMarOverrideParameter_Float");
static_assert(sizeof(FDelMarOverrideParameter_Float) == 0x000008, "Wrong size on FDelMarOverrideParameter_Float");
static_assert(offsetof(FDelMarOverrideParameter_Float, Name) == 0x000000, "Member 'FDelMarOverrideParameter_Float::Name' has a wrong offset!");
static_assert(offsetof(FDelMarOverrideParameter_Float, Value) == 0x000004, "Member 'FDelMarOverrideParameter_Float::Value' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarOverrideParameter_Vector
// 0x0020 (0x0020 - 0x0000)
struct FDelMarOverrideParameter_Vector final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarOverrideParameter_Vector) == 0x000008, "Wrong alignment on FDelMarOverrideParameter_Vector");
static_assert(sizeof(FDelMarOverrideParameter_Vector) == 0x000020, "Wrong size on FDelMarOverrideParameter_Vector");
static_assert(offsetof(FDelMarOverrideParameter_Vector, Name) == 0x000000, "Member 'FDelMarOverrideParameter_Vector::Name' has a wrong offset!");
static_assert(offsetof(FDelMarOverrideParameter_Vector, Value) == 0x000008, "Member 'FDelMarOverrideParameter_Vector::Value' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarOverrideParameter_Color
// 0x0014 (0x0014 - 0x0000)
struct FDelMarOverrideParameter_Color final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarOverrideParameter_Color) == 0x000004, "Wrong alignment on FDelMarOverrideParameter_Color");
static_assert(sizeof(FDelMarOverrideParameter_Color) == 0x000014, "Wrong size on FDelMarOverrideParameter_Color");
static_assert(offsetof(FDelMarOverrideParameter_Color, Name) == 0x000000, "Member 'FDelMarOverrideParameter_Color::Name' has a wrong offset!");
static_assert(offsetof(FDelMarOverrideParameter_Color, Value) == 0x000004, "Member 'FDelMarOverrideParameter_Color::Value' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarOverrideParameter_Texture
// 0x0010 (0x0010 - 0x0000)
struct FDelMarOverrideParameter_Texture final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarOverrideParameter_Texture) == 0x000008, "Wrong alignment on FDelMarOverrideParameter_Texture");
static_assert(sizeof(FDelMarOverrideParameter_Texture) == 0x000010, "Wrong size on FDelMarOverrideParameter_Texture");
static_assert(offsetof(FDelMarOverrideParameter_Texture, Name) == 0x000000, "Member 'FDelMarOverrideParameter_Texture::Name' has a wrong offset!");
static_assert(offsetof(FDelMarOverrideParameter_Texture, Value) == 0x000008, "Member 'FDelMarOverrideParameter_Texture::Value' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarOverrideParameter_StaticMesh
// 0x0010 (0x0010 - 0x0000)
struct FDelMarOverrideParameter_StaticMesh final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarOverrideParameter_StaticMesh) == 0x000008, "Wrong alignment on FDelMarOverrideParameter_StaticMesh");
static_assert(sizeof(FDelMarOverrideParameter_StaticMesh) == 0x000010, "Wrong size on FDelMarOverrideParameter_StaticMesh");
static_assert(offsetof(FDelMarOverrideParameter_StaticMesh, Name) == 0x000000, "Member 'FDelMarOverrideParameter_StaticMesh::Name' has a wrong offset!");
static_assert(offsetof(FDelMarOverrideParameter_StaticMesh, Value) == 0x000008, "Member 'FDelMarOverrideParameter_StaticMesh::Value' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarOverrideParameter_Actor
// 0x0010 (0x0010 - 0x0000)
struct FDelMarOverrideParameter_Actor final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarOverrideParameter_Actor) == 0x000008, "Wrong alignment on FDelMarOverrideParameter_Actor");
static_assert(sizeof(FDelMarOverrideParameter_Actor) == 0x000010, "Wrong size on FDelMarOverrideParameter_Actor");
static_assert(offsetof(FDelMarOverrideParameter_Actor, Name) == 0x000000, "Member 'FDelMarOverrideParameter_Actor::Name' has a wrong offset!");
static_assert(offsetof(FDelMarOverrideParameter_Actor, Value) == 0x000008, "Member 'FDelMarOverrideParameter_Actor::Value' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarOverrideParameter_Material
// 0x0010 (0x0010 - 0x0000)
struct FDelMarOverrideParameter_Material final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarOverrideParameter_Material) == 0x000008, "Wrong alignment on FDelMarOverrideParameter_Material");
static_assert(sizeof(FDelMarOverrideParameter_Material) == 0x000010, "Wrong size on FDelMarOverrideParameter_Material");
static_assert(offsetof(FDelMarOverrideParameter_Material, Name) == 0x000000, "Member 'FDelMarOverrideParameter_Material::Name' has a wrong offset!");
static_assert(offsetof(FDelMarOverrideParameter_Material, Value) == 0x000008, "Member 'FDelMarOverrideParameter_Material::Value' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarMaterialParameterCollection
// 0x0030 (0x0030 - 0x0000)
struct FDelMarMaterialParameterCollection final
{
public:
	TArray<struct FDelMarOverrideParameter_Float> OverrideFloatParameters;                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Vector> OverrideVectorParameters;                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Texture> OverrideTextureParameters;                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarMaterialParameterCollection) == 0x000008, "Wrong alignment on FDelMarMaterialParameterCollection");
static_assert(sizeof(FDelMarMaterialParameterCollection) == 0x000030, "Wrong size on FDelMarMaterialParameterCollection");
static_assert(offsetof(FDelMarMaterialParameterCollection, OverrideFloatParameters) == 0x000000, "Member 'FDelMarMaterialParameterCollection::OverrideFloatParameters' has a wrong offset!");
static_assert(offsetof(FDelMarMaterialParameterCollection, OverrideVectorParameters) == 0x000010, "Member 'FDelMarMaterialParameterCollection::OverrideVectorParameters' has a wrong offset!");
static_assert(offsetof(FDelMarMaterialParameterCollection, OverrideTextureParameters) == 0x000020, "Member 'FDelMarMaterialParameterCollection::OverrideTextureParameters' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarNiagaraParameterCollection
// 0x0098 (0x0098 - 0x0000)
struct FDelMarNiagaraParameterCollection final
{
public:
	class UNiagaraSystem*                         OverrideNiagaraSystem;                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Bool>  OverrideBoolParameters;                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Int>   OverrideIntParameters;                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Float> OverrideFloatParameters;                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Vector> OverrideVectorParameters;                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Color> OverrideColorParameters;                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Texture> OverrideTextureParameters;                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Material> OverrideMaterialsParameters;                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_StaticMesh> OverrideStaticMeshParameters;                      // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarOverrideParameter_Actor> OverrideActorParameters;                           // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarNiagaraParameterCollection) == 0x000008, "Wrong alignment on FDelMarNiagaraParameterCollection");
static_assert(sizeof(FDelMarNiagaraParameterCollection) == 0x000098, "Wrong size on FDelMarNiagaraParameterCollection");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideNiagaraSystem) == 0x000000, "Member 'FDelMarNiagaraParameterCollection::OverrideNiagaraSystem' has a wrong offset!");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideBoolParameters) == 0x000008, "Member 'FDelMarNiagaraParameterCollection::OverrideBoolParameters' has a wrong offset!");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideIntParameters) == 0x000018, "Member 'FDelMarNiagaraParameterCollection::OverrideIntParameters' has a wrong offset!");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideFloatParameters) == 0x000028, "Member 'FDelMarNiagaraParameterCollection::OverrideFloatParameters' has a wrong offset!");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideVectorParameters) == 0x000038, "Member 'FDelMarNiagaraParameterCollection::OverrideVectorParameters' has a wrong offset!");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideColorParameters) == 0x000048, "Member 'FDelMarNiagaraParameterCollection::OverrideColorParameters' has a wrong offset!");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideTextureParameters) == 0x000058, "Member 'FDelMarNiagaraParameterCollection::OverrideTextureParameters' has a wrong offset!");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideMaterialsParameters) == 0x000068, "Member 'FDelMarNiagaraParameterCollection::OverrideMaterialsParameters' has a wrong offset!");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideStaticMeshParameters) == 0x000078, "Member 'FDelMarNiagaraParameterCollection::OverrideStaticMeshParameters' has a wrong offset!");
static_assert(offsetof(FDelMarNiagaraParameterCollection, OverrideActorParameters) == 0x000088, "Member 'FDelMarNiagaraParameterCollection::OverrideActorParameters' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarMaterialOverrides
// 0x0040 (0x0040 - 0x0000)
struct FDelMarMaterialOverrides final
{
public:
	int32                                         MaterialInstanceDynamicIndex;                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialInterface;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarMaterialParameterCollection     ParameterOverrides;                                // 0x0010(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarMaterialOverrides) == 0x000008, "Wrong alignment on FDelMarMaterialOverrides");
static_assert(sizeof(FDelMarMaterialOverrides) == 0x000040, "Wrong size on FDelMarMaterialOverrides");
static_assert(offsetof(FDelMarMaterialOverrides, MaterialInstanceDynamicIndex) == 0x000000, "Member 'FDelMarMaterialOverrides::MaterialInstanceDynamicIndex' has a wrong offset!");
static_assert(offsetof(FDelMarMaterialOverrides, MaterialInterface) == 0x000008, "Member 'FDelMarMaterialOverrides::MaterialInterface' has a wrong offset!");
static_assert(offsetof(FDelMarMaterialOverrides, ParameterOverrides) == 0x000010, "Member 'FDelMarMaterialOverrides::ParameterOverrides' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarNiagaraOverrides
// 0x0098 (0x0098 - 0x0000)
struct FDelMarNiagaraOverrides final
{
public:
	struct FDelMarNiagaraParameterCollection      ParameterOverrides;                                // 0x0000(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarNiagaraOverrides) == 0x000008, "Wrong alignment on FDelMarNiagaraOverrides");
static_assert(sizeof(FDelMarNiagaraOverrides) == 0x000098, "Wrong size on FDelMarNiagaraOverrides");
static_assert(offsetof(FDelMarNiagaraOverrides, ParameterOverrides) == 0x000000, "Member 'FDelMarNiagaraOverrides::ParameterOverrides' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarParameterOverrides
// 0x0020 (0x0020 - 0x0000)
struct FDelMarParameterOverrides final
{
public:
	TArray<struct FDelMarMaterialOverrides>       MaterialOverrides;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDelMarNiagaraOverrides>        NiagaraOverrides;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarParameterOverrides) == 0x000008, "Wrong alignment on FDelMarParameterOverrides");
static_assert(sizeof(FDelMarParameterOverrides) == 0x000020, "Wrong size on FDelMarParameterOverrides");
static_assert(offsetof(FDelMarParameterOverrides, MaterialOverrides) == 0x000000, "Member 'FDelMarParameterOverrides::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(FDelMarParameterOverrides, NiagaraOverrides) == 0x000010, "Member 'FDelMarParameterOverrides::NiagaraOverrides' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarVehicleController_WheelData
// 0x0024 (0x0024 - 0x0000)
struct FDelMarVehicleController_WheelData final
{
public:
	struct FBoneReference                         SuspensionBone;                                    // 0x0000(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         SteeringBone;                                      // 0x000C(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RollBone;                                          // 0x0018(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarVehicleController_WheelData) == 0x000004, "Wrong alignment on FDelMarVehicleController_WheelData");
static_assert(sizeof(FDelMarVehicleController_WheelData) == 0x000024, "Wrong size on FDelMarVehicleController_WheelData");
static_assert(offsetof(FDelMarVehicleController_WheelData, SuspensionBone) == 0x000000, "Member 'FDelMarVehicleController_WheelData::SuspensionBone' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleController_WheelData, SteeringBone) == 0x00000C, "Member 'FDelMarVehicleController_WheelData::SteeringBone' has a wrong offset!");
static_assert(offsetof(FDelMarVehicleController_WheelData, RollBone) == 0x000018, "Member 'FDelMarVehicleController_WheelData::RollBone' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarBouncyChassisState
// 0x000C (0x000C - 0x0000)
struct FDelMarBouncyChassisState final
{
public:
	float                                         PitchDegrees;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollDegrees;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationZ;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarBouncyChassisState) == 0x000004, "Wrong alignment on FDelMarBouncyChassisState");
static_assert(sizeof(FDelMarBouncyChassisState) == 0x00000C, "Wrong size on FDelMarBouncyChassisState");
static_assert(offsetof(FDelMarBouncyChassisState, PitchDegrees) == 0x000000, "Member 'FDelMarBouncyChassisState::PitchDegrees' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisState, RollDegrees) == 0x000004, "Member 'FDelMarBouncyChassisState::RollDegrees' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisState, TranslationZ) == 0x000008, "Member 'FDelMarBouncyChassisState::TranslationZ' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarAnimNode_VehicleController
// 0x0120 (0x01E8 - 0x00C8)
struct FDelMarAnimNode_VehicleController final : public FAnimNode_SkeletalControlBase
{
public:
	struct FDelMarBouncyChassisState              BouncyChassis;                                     // 0x00C8(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleController_WheelData     FrontLeftWheel;                                    // 0x00D4(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleController_WheelData     FrontRightWheel;                                   // 0x00F8(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleController_WheelData     BackLeftWheel;                                     // 0x011C(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleController_WheelData     BackRightWheel;                                    // 0x0140(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChassisBone;                                       // 0x0164(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleAnimInfo                 VehicleInfo;                                       // 0x0170(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleWheelAnimInfo            WheelInfoFR;                                       // 0x0178(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleWheelAnimInfo            WheelInfoFL;                                       // 0x0194(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleWheelAnimInfo            WheelInfoBR;                                       // 0x01B0(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleWheelAnimInfo            WheelInfoBL;                                       // 0x01CC(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarAnimNode_VehicleController) == 0x000008, "Wrong alignment on FDelMarAnimNode_VehicleController");
static_assert(sizeof(FDelMarAnimNode_VehicleController) == 0x0001E8, "Wrong size on FDelMarAnimNode_VehicleController");
static_assert(offsetof(FDelMarAnimNode_VehicleController, BouncyChassis) == 0x0000C8, "Member 'FDelMarAnimNode_VehicleController::BouncyChassis' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, FrontLeftWheel) == 0x0000D4, "Member 'FDelMarAnimNode_VehicleController::FrontLeftWheel' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, FrontRightWheel) == 0x0000F8, "Member 'FDelMarAnimNode_VehicleController::FrontRightWheel' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, BackLeftWheel) == 0x00011C, "Member 'FDelMarAnimNode_VehicleController::BackLeftWheel' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, BackRightWheel) == 0x000140, "Member 'FDelMarAnimNode_VehicleController::BackRightWheel' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, ChassisBone) == 0x000164, "Member 'FDelMarAnimNode_VehicleController::ChassisBone' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, VehicleInfo) == 0x000170, "Member 'FDelMarAnimNode_VehicleController::VehicleInfo' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, WheelInfoFR) == 0x000178, "Member 'FDelMarAnimNode_VehicleController::WheelInfoFR' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, WheelInfoFL) == 0x000194, "Member 'FDelMarAnimNode_VehicleController::WheelInfoFL' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, WheelInfoBR) == 0x0001B0, "Member 'FDelMarAnimNode_VehicleController::WheelInfoBR' has a wrong offset!");
static_assert(offsetof(FDelMarAnimNode_VehicleController, WheelInfoBL) == 0x0001CC, "Member 'FDelMarAnimNode_VehicleController::WheelInfoBL' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarBoxSpringSetup
// 0x0050 (0x0050 - 0x0000)
struct FDelMarBoxSpringSetup final
{
public:
	struct FVector                                Strength;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Damping;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxDisplacement;                                   // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarBoxSpringSetup) == 0x000008, "Wrong alignment on FDelMarBoxSpringSetup");
static_assert(sizeof(FDelMarBoxSpringSetup) == 0x000050, "Wrong size on FDelMarBoxSpringSetup");
static_assert(offsetof(FDelMarBoxSpringSetup, Strength) == 0x000000, "Member 'FDelMarBoxSpringSetup::Strength' has a wrong offset!");
static_assert(offsetof(FDelMarBoxSpringSetup, Damping) == 0x000018, "Member 'FDelMarBoxSpringSetup::Damping' has a wrong offset!");
static_assert(offsetof(FDelMarBoxSpringSetup, MaxDisplacement) == 0x000030, "Member 'FDelMarBoxSpringSetup::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FDelMarBoxSpringSetup, MaxSpeed) == 0x000048, "Member 'FDelMarBoxSpringSetup::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarBoxSpringSetup, Mass) == 0x00004C, "Member 'FDelMarBoxSpringSetup::Mass' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarBoxSpring
// 0x00B0 (0x00B0 - 0x0000)
struct FDelMarBoxSpring final
{
public:
	struct FDelMarBoxSpringSetup                  Setup;                                             // 0x0000(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarBoxSpring) == 0x000008, "Wrong alignment on FDelMarBoxSpring");
static_assert(sizeof(FDelMarBoxSpring) == 0x0000B0, "Wrong size on FDelMarBoxSpring");
static_assert(offsetof(FDelMarBoxSpring, Setup) == 0x000000, "Member 'FDelMarBoxSpring::Setup' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarSpringSettings
// 0x0008 (0x0008 - 0x0000)
struct FDelMarSpringSettings final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarSpringSettings) == 0x000004, "Wrong alignment on FDelMarSpringSettings");
static_assert(sizeof(FDelMarSpringSettings) == 0x000008, "Wrong size on FDelMarSpringSettings");
static_assert(offsetof(FDelMarSpringSettings, Strength) == 0x000000, "Member 'FDelMarSpringSettings::Strength' has a wrong offset!");
static_assert(offsetof(FDelMarSpringSettings, Damping) == 0x000004, "Member 'FDelMarSpringSettings::Damping' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarBouncyChassisSetup
// 0x0058 (0x0058 - 0x0000)
struct FDelMarBouncyChassisSetup final
{
public:
	struct FDelMarSpringSettings                  PitchSpring;                                       // 0x0000(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PitchMaxAngleDegrees;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarSpringSettings                  RollSpring;                                        // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RollMaxAngleDegrees;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarSpringSettings                  ZSpring;                                           // 0x0018(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ZMaxDrop;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZMaxRaise;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxDisplacement;                                   // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MassOffset;                                        // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarBouncyChassisSetup) == 0x000008, "Wrong alignment on FDelMarBouncyChassisSetup");
static_assert(sizeof(FDelMarBouncyChassisSetup) == 0x000058, "Wrong size on FDelMarBouncyChassisSetup");
static_assert(offsetof(FDelMarBouncyChassisSetup, PitchSpring) == 0x000000, "Member 'FDelMarBouncyChassisSetup::PitchSpring' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisSetup, PitchMaxAngleDegrees) == 0x000008, "Member 'FDelMarBouncyChassisSetup::PitchMaxAngleDegrees' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisSetup, RollSpring) == 0x00000C, "Member 'FDelMarBouncyChassisSetup::RollSpring' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisSetup, RollMaxAngleDegrees) == 0x000014, "Member 'FDelMarBouncyChassisSetup::RollMaxAngleDegrees' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisSetup, ZSpring) == 0x000018, "Member 'FDelMarBouncyChassisSetup::ZSpring' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisSetup, ZMaxDrop) == 0x000020, "Member 'FDelMarBouncyChassisSetup::ZMaxDrop' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisSetup, ZMaxRaise) == 0x000024, "Member 'FDelMarBouncyChassisSetup::ZMaxRaise' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisSetup, MaxDisplacement) == 0x000028, "Member 'FDelMarBouncyChassisSetup::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FDelMarBouncyChassisSetup, MassOffset) == 0x000040, "Member 'FDelMarBouncyChassisSetup::MassOffset' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarBouncyChassisInstance
// 0x0118 (0x0118 - 0x0000)
struct FDelMarBouncyChassisInstance final
{
public:
	struct FDelMarBoxSpring                       Spring;                                            // 0x0000(0x00B0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x68];                                      // 0x00B0(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarBouncyChassisInstance) == 0x000008, "Wrong alignment on FDelMarBouncyChassisInstance");
static_assert(sizeof(FDelMarBouncyChassisInstance) == 0x000118, "Wrong size on FDelMarBouncyChassisInstance");
static_assert(offsetof(FDelMarBouncyChassisInstance, Spring) == 0x000000, "Member 'FDelMarBouncyChassisInstance::Spring' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarDriverCosmeticData
// 0x0018 (0x0018 - 0x0000)
struct FDelMarDriverCosmeticData final
{
public:
	class UAthenaCharacterItemDefinition*         CharacterDefinition;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMcpVariantChannelInfo>         CharacterVariantChannels;                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarDriverCosmeticData) == 0x000008, "Wrong alignment on FDelMarDriverCosmeticData");
static_assert(sizeof(FDelMarDriverCosmeticData) == 0x000018, "Wrong size on FDelMarDriverCosmeticData");
static_assert(offsetof(FDelMarDriverCosmeticData, CharacterDefinition) == 0x000000, "Member 'FDelMarDriverCosmeticData::CharacterDefinition' has a wrong offset!");
static_assert(offsetof(FDelMarDriverCosmeticData, CharacterVariantChannels) == 0x000008, "Member 'FDelMarDriverCosmeticData::CharacterVariantChannels' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarPreviewConfigs
// 0x00F8 (0x00F8 - 0x0000)
struct FDelMarPreviewConfigs final
{
public:
	bool                                          bAnyWheelsOnGround;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWheelsOnGround;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardSpeed;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideSpeed;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Throttle;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steering;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAngle;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSpeed;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseTargetSpeed;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedForwardSpeed;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedBonusSpeed;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleForwardState                    VehicleForwardState;                               // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BonusSpeed;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldAppliedBonusSpeed;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarVehicleLandingData              LandingData;                                       // 0x0038(0x000C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLanded;                                           // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkydiving;                                        // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleDriftState                      DriftState;                                        // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriftControlled;                                  // 0x0047(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftAngle;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftSlipAngleRatio;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftTargetSide;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftDuration;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriftBoostInRange;                                // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriftBoostLosingAppliedBonusSpeed;                // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DriftBoostPotentialPercentage;                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftBoostAppliedBonusSpeed;                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftBoostQueuedBonusSpeed;                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DraftingAppliedBonusSpeed;                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DraftingMaxBonusSpeedPercentage;                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasValidDraftingTarget;                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelmarDraftingState                          DraftingState;                                     // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OversteerAccumulationPercentage;                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartlineBoostActive;                             // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFailedStartlineBoost;                             // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentageMaxBonusSpeedEarned;                     // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartlineBoostAppliedBonusSpeed;                   // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEarnedBonusSpeed;                               // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftStrafe;                                       // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStrafeActive;                                     // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStrafeDisabled;                                   // 0x008A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStrafeBeActivated;                             // 0x008B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrafeCooldownPercentage;                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurboActive;                                      // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NumCurrentCharges;                                 // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumMaxCharges;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarTurboZoneState                         BonusZoneState;                                    // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentageTurboActiveTimeRemaining;                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingTurboActiveSeconds;                       // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboAppliedBonusSpeed;                            // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboBonusZoneBonusSpeed;                          // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboAdditionalActiveSeconds;                      // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickflipActive;                                   // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickflipLeftSide;                                 // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickflipSuctionActive;                            // 0x00B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToSuctionSurface;                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KickflipDuration;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KickflipActivationCharges;                         // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReattachmentActive;                               // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReattachmentDirection;                             // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnderthrustActive;                                // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnderthrustPercentageTankRemaining;                // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnderthrustActiveDuration;                         // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpActive;                                       // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAirFreestyleActive;                               // 0x00ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVehicleDemolished;                                // 0x00EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF[0x1];                                       // 0x00EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DemolishCausedByTag;                               // 0x00F0(0x0004)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvulnerabilityActive;                            // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVehicleSpawnedThisFrame;                          // 0x00F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstVehicleForPlayer;                            // 0x00F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviousVehicleDemolished;                        // 0x00F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarPreviewConfigs) == 0x000008, "Wrong alignment on FDelMarPreviewConfigs");
static_assert(sizeof(FDelMarPreviewConfigs) == 0x0000F8, "Wrong size on FDelMarPreviewConfigs");
static_assert(offsetof(FDelMarPreviewConfigs, bAnyWheelsOnGround) == 0x000000, "Member 'FDelMarPreviewConfigs::bAnyWheelsOnGround' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bWheelsOnGround) == 0x000001, "Member 'FDelMarPreviewConfigs::bWheelsOnGround' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, ForwardSpeed) == 0x000004, "Member 'FDelMarPreviewConfigs::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, SideSpeed) == 0x000008, "Member 'FDelMarPreviewConfigs::SideSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, Acceleration) == 0x00000C, "Member 'FDelMarPreviewConfigs::Acceleration' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, Throttle) == 0x000010, "Member 'FDelMarPreviewConfigs::Throttle' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, Steering) == 0x000014, "Member 'FDelMarPreviewConfigs::Steering' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, SteerAngle) == 0x000018, "Member 'FDelMarPreviewConfigs::SteerAngle' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, TargetSpeed) == 0x00001C, "Member 'FDelMarPreviewConfigs::TargetSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, BaseTargetSpeed) == 0x000020, "Member 'FDelMarPreviewConfigs::BaseTargetSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, NormalizedForwardSpeed) == 0x000024, "Member 'FDelMarPreviewConfigs::NormalizedForwardSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, NormalizedBonusSpeed) == 0x000028, "Member 'FDelMarPreviewConfigs::NormalizedBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, VehicleForwardState) == 0x00002C, "Member 'FDelMarPreviewConfigs::VehicleForwardState' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, BonusSpeed) == 0x000030, "Member 'FDelMarPreviewConfigs::BonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, WorldAppliedBonusSpeed) == 0x000034, "Member 'FDelMarPreviewConfigs::WorldAppliedBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, LandingData) == 0x000038, "Member 'FDelMarPreviewConfigs::LandingData' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bLanded) == 0x000044, "Member 'FDelMarPreviewConfigs::bLanded' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bSkydiving) == 0x000045, "Member 'FDelMarPreviewConfigs::bSkydiving' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DriftState) == 0x000046, "Member 'FDelMarPreviewConfigs::DriftState' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bDriftControlled) == 0x000047, "Member 'FDelMarPreviewConfigs::bDriftControlled' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DriftAngle) == 0x000048, "Member 'FDelMarPreviewConfigs::DriftAngle' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DriftSlipAngleRatio) == 0x00004C, "Member 'FDelMarPreviewConfigs::DriftSlipAngleRatio' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DriftTargetSide) == 0x000050, "Member 'FDelMarPreviewConfigs::DriftTargetSide' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DriftDuration) == 0x000054, "Member 'FDelMarPreviewConfigs::DriftDuration' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bDriftBoostInRange) == 0x000058, "Member 'FDelMarPreviewConfigs::bDriftBoostInRange' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bDriftBoostLosingAppliedBonusSpeed) == 0x000059, "Member 'FDelMarPreviewConfigs::bDriftBoostLosingAppliedBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DriftBoostPotentialPercentage) == 0x00005C, "Member 'FDelMarPreviewConfigs::DriftBoostPotentialPercentage' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DriftBoostAppliedBonusSpeed) == 0x000060, "Member 'FDelMarPreviewConfigs::DriftBoostAppliedBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DriftBoostQueuedBonusSpeed) == 0x000064, "Member 'FDelMarPreviewConfigs::DriftBoostQueuedBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DraftingAppliedBonusSpeed) == 0x000068, "Member 'FDelMarPreviewConfigs::DraftingAppliedBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DraftingMaxBonusSpeedPercentage) == 0x00006C, "Member 'FDelMarPreviewConfigs::DraftingMaxBonusSpeedPercentage' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bHasValidDraftingTarget) == 0x000070, "Member 'FDelMarPreviewConfigs::bHasValidDraftingTarget' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DraftingState) == 0x000071, "Member 'FDelMarPreviewConfigs::DraftingState' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, OversteerAccumulationPercentage) == 0x000074, "Member 'FDelMarPreviewConfigs::OversteerAccumulationPercentage' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bStartlineBoostActive) == 0x000078, "Member 'FDelMarPreviewConfigs::bStartlineBoostActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bFailedStartlineBoost) == 0x000079, "Member 'FDelMarPreviewConfigs::bFailedStartlineBoost' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, PercentageMaxBonusSpeedEarned) == 0x00007C, "Member 'FDelMarPreviewConfigs::PercentageMaxBonusSpeedEarned' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, StartlineBoostAppliedBonusSpeed) == 0x000080, "Member 'FDelMarPreviewConfigs::StartlineBoostAppliedBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, MaxEarnedBonusSpeed) == 0x000084, "Member 'FDelMarPreviewConfigs::MaxEarnedBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bLeftStrafe) == 0x000088, "Member 'FDelMarPreviewConfigs::bLeftStrafe' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bStrafeActive) == 0x000089, "Member 'FDelMarPreviewConfigs::bStrafeActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bStrafeDisabled) == 0x00008A, "Member 'FDelMarPreviewConfigs::bStrafeDisabled' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bCanStrafeBeActivated) == 0x00008B, "Member 'FDelMarPreviewConfigs::bCanStrafeBeActivated' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, StrafeCooldownPercentage) == 0x00008C, "Member 'FDelMarPreviewConfigs::StrafeCooldownPercentage' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bTurboActive) == 0x000090, "Member 'FDelMarPreviewConfigs::bTurboActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, NumCurrentCharges) == 0x000094, "Member 'FDelMarPreviewConfigs::NumCurrentCharges' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, NumMaxCharges) == 0x000098, "Member 'FDelMarPreviewConfigs::NumMaxCharges' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, BonusZoneState) == 0x00009C, "Member 'FDelMarPreviewConfigs::BonusZoneState' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, PercentageTurboActiveTimeRemaining) == 0x0000A0, "Member 'FDelMarPreviewConfigs::PercentageTurboActiveTimeRemaining' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, RemainingTurboActiveSeconds) == 0x0000A4, "Member 'FDelMarPreviewConfigs::RemainingTurboActiveSeconds' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, TurboAppliedBonusSpeed) == 0x0000A8, "Member 'FDelMarPreviewConfigs::TurboAppliedBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, TurboBonusZoneBonusSpeed) == 0x0000AC, "Member 'FDelMarPreviewConfigs::TurboBonusZoneBonusSpeed' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, TurboAdditionalActiveSeconds) == 0x0000B0, "Member 'FDelMarPreviewConfigs::TurboAdditionalActiveSeconds' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bKickflipActive) == 0x0000B4, "Member 'FDelMarPreviewConfigs::bKickflipActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bKickflipLeftSide) == 0x0000B5, "Member 'FDelMarPreviewConfigs::bKickflipLeftSide' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bKickflipSuctionActive) == 0x0000B6, "Member 'FDelMarPreviewConfigs::bKickflipSuctionActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DistanceToSuctionSurface) == 0x0000B8, "Member 'FDelMarPreviewConfigs::DistanceToSuctionSurface' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, KickflipDuration) == 0x0000BC, "Member 'FDelMarPreviewConfigs::KickflipDuration' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, KickflipActivationCharges) == 0x0000C0, "Member 'FDelMarPreviewConfigs::KickflipActivationCharges' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bReattachmentActive) == 0x0000C4, "Member 'FDelMarPreviewConfigs::bReattachmentActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, ReattachmentDirection) == 0x0000C8, "Member 'FDelMarPreviewConfigs::ReattachmentDirection' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bUnderthrustActive) == 0x0000E0, "Member 'FDelMarPreviewConfigs::bUnderthrustActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, UnderthrustPercentageTankRemaining) == 0x0000E4, "Member 'FDelMarPreviewConfigs::UnderthrustPercentageTankRemaining' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, UnderthrustActiveDuration) == 0x0000E8, "Member 'FDelMarPreviewConfigs::UnderthrustActiveDuration' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bJumpActive) == 0x0000EC, "Member 'FDelMarPreviewConfigs::bJumpActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bAirFreestyleActive) == 0x0000ED, "Member 'FDelMarPreviewConfigs::bAirFreestyleActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bVehicleDemolished) == 0x0000EE, "Member 'FDelMarPreviewConfigs::bVehicleDemolished' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, DemolishCausedByTag) == 0x0000F0, "Member 'FDelMarPreviewConfigs::DemolishCausedByTag' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bInvulnerabilityActive) == 0x0000F4, "Member 'FDelMarPreviewConfigs::bInvulnerabilityActive' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bVehicleSpawnedThisFrame) == 0x0000F5, "Member 'FDelMarPreviewConfigs::bVehicleSpawnedThisFrame' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bFirstVehicleForPlayer) == 0x0000F6, "Member 'FDelMarPreviewConfigs::bFirstVehicleForPlayer' has a wrong offset!");
static_assert(offsetof(FDelMarPreviewConfigs, bPreviousVehicleDemolished) == 0x0000F7, "Member 'FDelMarPreviewConfigs::bPreviousVehicleDemolished' has a wrong offset!");

// ScriptStruct DelMarCosmetics.DelMarPreviousPreviewConfigs
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x04) FDelMarPreviousPreviewConfigs final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarPreviousPreviewConfigs) == 0x000004, "Wrong alignment on FDelMarPreviousPreviewConfigs");
static_assert(sizeof(FDelMarPreviousPreviewConfigs) == 0x000038, "Wrong size on FDelMarPreviousPreviewConfigs");

}

