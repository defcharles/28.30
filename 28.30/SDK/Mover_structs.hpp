#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mover

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum Mover.ELayeredMove_ConstantVelocitySettingsFlags
// NumValues: 0x0003
enum class ELayeredMove_ConstantVelocitySettingsFlags : uint8
{
	NoFlags                                  = 0,
	VelocityStartRelative                    = 1,
	VelocityAlwaysRelative                   = 2,
};

// Enum Mover.EMoveMixMode
// NumValues: 0x0003
enum class EMoveMixMode : uint8
{
	AdditiveVelocity                         = 0,
	OverrideVelocity                         = 1,
	OverrideAll                              = 2,
};

// Enum Mover.EMoveInputType
// NumValues: 0x0003
enum class EMoveInputType : uint8
{
	Invalid                                  = 0,
	DirectionalIntent                        = 1,
	Velocity                                 = 2,
};

// ScriptStruct Mover.MoverDataCollection
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMoverDataCollection final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoverDataCollection) == 0x000008, "Wrong alignment on FMoverDataCollection");
static_assert(sizeof(FMoverDataCollection) == 0x000018, "Wrong size on FMoverDataCollection");

// ScriptStruct Mover.FloorCheckResult
// 0x00F8 (0x00F8 - 0x0000)
struct FFloorCheckResult final
{
public:
	uint8                                         bBlockingHit : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWalkableFloor : 1;                                // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLineTrace : 1;                                    // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineDist;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorDist;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0010(0x00E8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloorCheckResult) == 0x000008, "Wrong alignment on FFloorCheckResult");
static_assert(sizeof(FFloorCheckResult) == 0x0000F8, "Wrong size on FFloorCheckResult");
static_assert(offsetof(FFloorCheckResult, LineDist) == 0x000004, "Member 'FFloorCheckResult::LineDist' has a wrong offset!");
static_assert(offsetof(FFloorCheckResult, FloorDist) == 0x000008, "Member 'FFloorCheckResult::FloorDist' has a wrong offset!");
static_assert(offsetof(FFloorCheckResult, HitResult) == 0x000010, "Member 'FFloorCheckResult::HitResult' has a wrong offset!");

// ScriptStruct Mover.MoverOnImpactParams
// 0x0108 (0x0108 - 0x0000)
struct FMoverOnImpactParams final
{
public:
	class FName                                   MovementModeName;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0008(0x00E8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                AttemptedMoveDelta;                                // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoverOnImpactParams) == 0x000008, "Wrong alignment on FMoverOnImpactParams");
static_assert(sizeof(FMoverOnImpactParams) == 0x000108, "Wrong size on FMoverOnImpactParams");
static_assert(offsetof(FMoverOnImpactParams, MovementModeName) == 0x000000, "Member 'FMoverOnImpactParams::MovementModeName' has a wrong offset!");
static_assert(offsetof(FMoverOnImpactParams, HitResult) == 0x000008, "Member 'FMoverOnImpactParams::HitResult' has a wrong offset!");
static_assert(offsetof(FMoverOnImpactParams, AttemptedMoveDelta) == 0x0000F0, "Member 'FMoverOnImpactParams::AttemptedMoveDelta' has a wrong offset!");

// ScriptStruct Mover.LayeredMoveBase
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLayeredMoveBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EMoveMixMode                                  MixMode;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationMs;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartSimTimeMs;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLayeredMoveBase) == 0x000008, "Wrong alignment on FLayeredMoveBase");
static_assert(sizeof(FLayeredMoveBase) == 0x000018, "Wrong size on FLayeredMoveBase");
static_assert(offsetof(FLayeredMoveBase, MixMode) == 0x000008, "Member 'FLayeredMoveBase::MixMode' has a wrong offset!");
static_assert(offsetof(FLayeredMoveBase, DurationMs) == 0x00000C, "Member 'FLayeredMoveBase::DurationMs' has a wrong offset!");
static_assert(offsetof(FLayeredMoveBase, StartSimTimeMs) == 0x000010, "Member 'FLayeredMoveBase::StartSimTimeMs' has a wrong offset!");

// ScriptStruct Mover.LayeredMove_LinearVelocity
// 0x0020 (0x0038 - 0x0018)
struct FLayeredMove_LinearVelocity final : public FLayeredMoveBase
{
public:
	struct FVector                                Velocity;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SettingsFlags;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLayeredMove_LinearVelocity) == 0x000008, "Wrong alignment on FLayeredMove_LinearVelocity");
static_assert(sizeof(FLayeredMove_LinearVelocity) == 0x000038, "Wrong size on FLayeredMove_LinearVelocity");
static_assert(offsetof(FLayeredMove_LinearVelocity, Velocity) == 0x000018, "Member 'FLayeredMove_LinearVelocity::Velocity' has a wrong offset!");
static_assert(offsetof(FLayeredMove_LinearVelocity, SettingsFlags) == 0x000030, "Member 'FLayeredMove_LinearVelocity::SettingsFlags' has a wrong offset!");

// ScriptStruct Mover.MoverInputCmdContext
// 0x0018 (0x0018 - 0x0000)
struct FMoverInputCmdContext final
{
public:
	struct FMoverDataCollection                   InputCollection;                                   // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoverInputCmdContext) == 0x000008, "Wrong alignment on FMoverInputCmdContext");
static_assert(sizeof(FMoverInputCmdContext) == 0x000018, "Wrong size on FMoverInputCmdContext");
static_assert(offsetof(FMoverInputCmdContext, InputCollection) == 0x000000, "Member 'FMoverInputCmdContext::InputCollection' has a wrong offset!");

// ScriptStruct Mover.MoverSyncState
// 0x0018 (0x0018 - 0x0000)
struct FMoverSyncState final
{
public:
	struct FMoverDataCollection                   SyncStateCollection;                               // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoverSyncState) == 0x000008, "Wrong alignment on FMoverSyncState");
static_assert(sizeof(FMoverSyncState) == 0x000018, "Wrong size on FMoverSyncState");
static_assert(offsetof(FMoverSyncState, SyncStateCollection) == 0x000000, "Member 'FMoverSyncState::SyncStateCollection' has a wrong offset!");

// ScriptStruct Mover.MoverAuxStateContext
// 0x0001 (0x0001 - 0x0000)
struct FMoverAuxStateContext final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoverAuxStateContext) == 0x000001, "Wrong alignment on FMoverAuxStateContext");
static_assert(sizeof(FMoverAuxStateContext) == 0x000001, "Wrong size on FMoverAuxStateContext");

// ScriptStruct Mover.MoverTickStartData
// 0x0038 (0x0038 - 0x0000)
struct FMoverTickStartData final
{
public:
	struct FMoverInputCmdContext                  InputCmd;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMoverSyncState                        SyncState;                                         // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMoverAuxStateContext                  AuxState;                                          // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoverTickStartData) == 0x000008, "Wrong alignment on FMoverTickStartData");
static_assert(sizeof(FMoverTickStartData) == 0x000038, "Wrong size on FMoverTickStartData");
static_assert(offsetof(FMoverTickStartData, InputCmd) == 0x000000, "Member 'FMoverTickStartData::InputCmd' has a wrong offset!");
static_assert(offsetof(FMoverTickStartData, SyncState) == 0x000018, "Member 'FMoverTickStartData::SyncState' has a wrong offset!");
static_assert(offsetof(FMoverTickStartData, AuxState) == 0x000030, "Member 'FMoverTickStartData::AuxState' has a wrong offset!");

// ScriptStruct Mover.MoverTimeStep
// 0x0010 (0x0010 - 0x0000)
struct FMoverTimeStep final
{
public:
	int32                                         ServerFrame;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseSimTimeMs;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepMs;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoverTimeStep) == 0x000004, "Wrong alignment on FMoverTimeStep");
static_assert(sizeof(FMoverTimeStep) == 0x000010, "Wrong size on FMoverTimeStep");
static_assert(offsetof(FMoverTimeStep, ServerFrame) == 0x000000, "Member 'FMoverTimeStep::ServerFrame' has a wrong offset!");
static_assert(offsetof(FMoverTimeStep, BaseSimTimeMs) == 0x000004, "Member 'FMoverTimeStep::BaseSimTimeMs' has a wrong offset!");
static_assert(offsetof(FMoverTimeStep, StepMs) == 0x000008, "Member 'FMoverTimeStep::StepMs' has a wrong offset!");

// ScriptStruct Mover.LayeredMove_AnimRootMotion
// 0x0010 (0x0028 - 0x0018)
struct FLayeredMove_AnimRootMotion final : public FLayeredMoveBase
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingMontagePosition;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLayeredMove_AnimRootMotion) == 0x000008, "Wrong alignment on FLayeredMove_AnimRootMotion");
static_assert(sizeof(FLayeredMove_AnimRootMotion) == 0x000028, "Wrong size on FLayeredMove_AnimRootMotion");
static_assert(offsetof(FLayeredMove_AnimRootMotion, Montage) == 0x000018, "Member 'FLayeredMove_AnimRootMotion::Montage' has a wrong offset!");
static_assert(offsetof(FLayeredMove_AnimRootMotion, StartingMontagePosition) == 0x000020, "Member 'FLayeredMove_AnimRootMotion::StartingMontagePosition' has a wrong offset!");
static_assert(offsetof(FLayeredMove_AnimRootMotion, PlayRate) == 0x000024, "Member 'FLayeredMove_AnimRootMotion::PlayRate' has a wrong offset!");

// ScriptStruct Mover.LayeredMove_JumpImpulse
// 0x0008 (0x0020 - 0x0018)
struct FLayeredMove_JumpImpulse final : public FLayeredMoveBase
{
public:
	float                                         UpwardsSpeed;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLayeredMove_JumpImpulse) == 0x000008, "Wrong alignment on FLayeredMove_JumpImpulse");
static_assert(sizeof(FLayeredMove_JumpImpulse) == 0x000020, "Wrong size on FLayeredMove_JumpImpulse");
static_assert(offsetof(FLayeredMove_JumpImpulse, UpwardsSpeed) == 0x000018, "Member 'FLayeredMove_JumpImpulse::UpwardsSpeed' has a wrong offset!");

// ScriptStruct Mover.LayeredMove_Teleport
// 0x0018 (0x0030 - 0x0018)
struct FLayeredMove_Teleport final : public FLayeredMoveBase
{
public:
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLayeredMove_Teleport) == 0x000008, "Wrong alignment on FLayeredMove_Teleport");
static_assert(sizeof(FLayeredMove_Teleport) == 0x000030, "Wrong size on FLayeredMove_Teleport");
static_assert(offsetof(FLayeredMove_Teleport, TargetLocation) == 0x000018, "Member 'FLayeredMove_Teleport::TargetLocation' has a wrong offset!");

// ScriptStruct Mover.LayeredMove_Launch
// 0x0020 (0x0038 - 0x0018)
struct FLayeredMove_Launch final : public FLayeredMoveBase
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ForceMovementMode;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLayeredMove_Launch) == 0x000008, "Wrong alignment on FLayeredMove_Launch");
static_assert(sizeof(FLayeredMove_Launch) == 0x000038, "Wrong size on FLayeredMove_Launch");
static_assert(offsetof(FLayeredMove_Launch, LaunchVelocity) == 0x000018, "Member 'FLayeredMove_Launch::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FLayeredMove_Launch, ForceMovementMode) == 0x000030, "Member 'FLayeredMove_Launch::ForceMovementMode' has a wrong offset!");

// ScriptStruct Mover.LayeredMoveGroup
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FLayeredMoveGroup final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLayeredMoveGroup) == 0x000008, "Wrong alignment on FLayeredMoveGroup");
static_assert(sizeof(FLayeredMoveGroup) == 0x000028, "Wrong size on FLayeredMoveGroup");

// ScriptStruct Mover.MovementSubstep
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMovementSubstep final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovementSubstep) == 0x000008, "Wrong alignment on FMovementSubstep");
static_assert(sizeof(FMovementSubstep) == 0x000028, "Wrong size on FMovementSubstep");

// ScriptStruct Mover.MovementRecord
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FMovementRecord final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovementRecord) == 0x000008, "Wrong alignment on FMovementRecord");
static_assert(sizeof(FMovementRecord) == 0x000048, "Wrong size on FMovementRecord");

// ScriptStruct Mover.ProposedMove
// 0x0088 (0x0088 - 0x0000)
struct FProposedMove final
{
public:
	EMoveMixMode                                  MixMode;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PreferredMode;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHasDirIntent : 1;                                 // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasTargetLocation : 1;                            // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DirectionIntent;                                   // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearVelocity;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AngularVelocity;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                MovePlaneVelocity;                                 // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProposedMove) == 0x000008, "Wrong alignment on FProposedMove");
static_assert(sizeof(FProposedMove) == 0x000088, "Wrong size on FProposedMove");
static_assert(offsetof(FProposedMove, MixMode) == 0x000000, "Member 'FProposedMove::MixMode' has a wrong offset!");
static_assert(offsetof(FProposedMove, PreferredMode) == 0x000004, "Member 'FProposedMove::PreferredMode' has a wrong offset!");
static_assert(offsetof(FProposedMove, DirectionIntent) == 0x000010, "Member 'FProposedMove::DirectionIntent' has a wrong offset!");
static_assert(offsetof(FProposedMove, LinearVelocity) == 0x000028, "Member 'FProposedMove::LinearVelocity' has a wrong offset!");
static_assert(offsetof(FProposedMove, AngularVelocity) == 0x000040, "Member 'FProposedMove::AngularVelocity' has a wrong offset!");
static_assert(offsetof(FProposedMove, MovePlaneVelocity) == 0x000058, "Member 'FProposedMove::MovePlaneVelocity' has a wrong offset!");
static_assert(offsetof(FProposedMove, TargetLocation) == 0x000070, "Member 'FProposedMove::TargetLocation' has a wrong offset!");

// ScriptStruct Mover.MoverDataStructBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMoverDataStructBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoverDataStructBase) == 0x000008, "Wrong alignment on FMoverDataStructBase");
static_assert(sizeof(FMoverDataStructBase) == 0x000008, "Wrong size on FMoverDataStructBase");

// ScriptStruct Mover.KinematicDefaultInputs
// 0x0068 (0x0070 - 0x0008)
struct FKinematicDefaultInputs final : public FMoverDataStructBase
{
public:
	EMoveInputType                                MoveInputType;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveInput;                                         // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                OrientationIntent;                                 // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ControlRotation;                                   // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SuggestedMovementMode;                             // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingMovementBase;                                // 0x005C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    MovementBase;                                      // 0x0060(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovementBaseBoneName;                              // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpJustPressed;                                // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpPressed;                                    // 0x006D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKinematicDefaultInputs) == 0x000008, "Wrong alignment on FKinematicDefaultInputs");
static_assert(sizeof(FKinematicDefaultInputs) == 0x000070, "Wrong size on FKinematicDefaultInputs");
static_assert(offsetof(FKinematicDefaultInputs, MoveInputType) == 0x000008, "Member 'FKinematicDefaultInputs::MoveInputType' has a wrong offset!");
static_assert(offsetof(FKinematicDefaultInputs, MoveInput) == 0x000010, "Member 'FKinematicDefaultInputs::MoveInput' has a wrong offset!");
static_assert(offsetof(FKinematicDefaultInputs, OrientationIntent) == 0x000028, "Member 'FKinematicDefaultInputs::OrientationIntent' has a wrong offset!");
static_assert(offsetof(FKinematicDefaultInputs, ControlRotation) == 0x000040, "Member 'FKinematicDefaultInputs::ControlRotation' has a wrong offset!");
static_assert(offsetof(FKinematicDefaultInputs, SuggestedMovementMode) == 0x000058, "Member 'FKinematicDefaultInputs::SuggestedMovementMode' has a wrong offset!");
static_assert(offsetof(FKinematicDefaultInputs, bUsingMovementBase) == 0x00005C, "Member 'FKinematicDefaultInputs::bUsingMovementBase' has a wrong offset!");
static_assert(offsetof(FKinematicDefaultInputs, MovementBase) == 0x000060, "Member 'FKinematicDefaultInputs::MovementBase' has a wrong offset!");
static_assert(offsetof(FKinematicDefaultInputs, MovementBaseBoneName) == 0x000068, "Member 'FKinematicDefaultInputs::MovementBaseBoneName' has a wrong offset!");
static_assert(offsetof(FKinematicDefaultInputs, bIsJumpJustPressed) == 0x00006C, "Member 'FKinematicDefaultInputs::bIsJumpJustPressed' has a wrong offset!");
static_assert(offsetof(FKinematicDefaultInputs, bIsJumpPressed) == 0x00006D, "Member 'FKinematicDefaultInputs::bIsJumpPressed' has a wrong offset!");

// ScriptStruct Mover.MoverDefaultSyncState
// 0x00E8 (0x00F0 - 0x0008)
struct FMoverDefaultSyncState final : public FMoverDataStructBase
{
public:
	struct FVector                                Location;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               orientation;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                Velocity;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                MoveDirectionIntent;                               // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovementMode;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    MovementBase;                                      // 0x0070(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MovementBaseBoneName;                              // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MovementBasePos;                                   // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  MovementBaseQuat;                                  // 0x00A0(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLayeredMoveGroup                      LayeredMoves;                                      // 0x00C0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoverDefaultSyncState) == 0x000010, "Wrong alignment on FMoverDefaultSyncState");
static_assert(sizeof(FMoverDefaultSyncState) == 0x0000F0, "Wrong size on FMoverDefaultSyncState");
static_assert(offsetof(FMoverDefaultSyncState, Location) == 0x000008, "Member 'FMoverDefaultSyncState::Location' has a wrong offset!");
static_assert(offsetof(FMoverDefaultSyncState, orientation) == 0x000020, "Member 'FMoverDefaultSyncState::orientation' has a wrong offset!");
static_assert(offsetof(FMoverDefaultSyncState, Velocity) == 0x000038, "Member 'FMoverDefaultSyncState::Velocity' has a wrong offset!");
static_assert(offsetof(FMoverDefaultSyncState, MoveDirectionIntent) == 0x000050, "Member 'FMoverDefaultSyncState::MoveDirectionIntent' has a wrong offset!");
static_assert(offsetof(FMoverDefaultSyncState, MovementMode) == 0x000068, "Member 'FMoverDefaultSyncState::MovementMode' has a wrong offset!");
static_assert(offsetof(FMoverDefaultSyncState, MovementBase) == 0x000070, "Member 'FMoverDefaultSyncState::MovementBase' has a wrong offset!");
static_assert(offsetof(FMoverDefaultSyncState, MovementBaseBoneName) == 0x000078, "Member 'FMoverDefaultSyncState::MovementBaseBoneName' has a wrong offset!");
static_assert(offsetof(FMoverDefaultSyncState, MovementBasePos) == 0x000080, "Member 'FMoverDefaultSyncState::MovementBasePos' has a wrong offset!");
static_assert(offsetof(FMoverDefaultSyncState, MovementBaseQuat) == 0x0000A0, "Member 'FMoverDefaultSyncState::MovementBaseQuat' has a wrong offset!");
static_assert(offsetof(FMoverDefaultSyncState, LayeredMoves) == 0x0000C0, "Member 'FMoverDefaultSyncState::LayeredMoves' has a wrong offset!");

// ScriptStruct Mover.NetworkPhysicsMoverInputs
// 0x0018 (0x0030 - 0x0018)
struct FNetworkPhysicsMoverInputs final : public FNetworkPhysicsDatas
{
public:
	struct FMoverInputCmdContext                  InputCmdContext;                                   // 0x0018(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetworkPhysicsMoverInputs) == 0x000008, "Wrong alignment on FNetworkPhysicsMoverInputs");
static_assert(sizeof(FNetworkPhysicsMoverInputs) == 0x000030, "Wrong size on FNetworkPhysicsMoverInputs");
static_assert(offsetof(FNetworkPhysicsMoverInputs, InputCmdContext) == 0x000018, "Member 'FNetworkPhysicsMoverInputs::InputCmdContext' has a wrong offset!");

// ScriptStruct Mover.NetworkPhysicsMoverState
// 0x0020 (0x0038 - 0x0018)
struct FNetworkPhysicsMoverState final : public FNetworkPhysicsDatas
{
public:
	struct FMoverSyncState                        SyncStateContext;                                  // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	struct FMoverAuxStateContext                  AuxStateContext;                                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNetworkPhysicsMoverState) == 0x000008, "Wrong alignment on FNetworkPhysicsMoverState");
static_assert(sizeof(FNetworkPhysicsMoverState) == 0x000038, "Wrong size on FNetworkPhysicsMoverState");
static_assert(offsetof(FNetworkPhysicsMoverState, SyncStateContext) == 0x000018, "Member 'FNetworkPhysicsMoverState::SyncStateContext' has a wrong offset!");
static_assert(offsetof(FNetworkPhysicsMoverState, AuxStateContext) == 0x000030, "Member 'FNetworkPhysicsMoverState::AuxStateContext' has a wrong offset!");

// ScriptStruct Mover.MovementModeTickEndState
// 0x0008 (0x0008 - 0x0000)
struct FMovementModeTickEndState final
{
public:
	float                                         RemainingMs;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextModeName;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovementModeTickEndState) == 0x000004, "Wrong alignment on FMovementModeTickEndState");
static_assert(sizeof(FMovementModeTickEndState) == 0x000008, "Wrong size on FMovementModeTickEndState");
static_assert(offsetof(FMovementModeTickEndState, RemainingMs) == 0x000000, "Member 'FMovementModeTickEndState::RemainingMs' has a wrong offset!");
static_assert(offsetof(FMovementModeTickEndState, NextModeName) == 0x000004, "Member 'FMovementModeTickEndState::NextModeName' has a wrong offset!");

// ScriptStruct Mover.MoverTickEndData
// 0x0070 (0x0070 - 0x0000)
struct FMoverTickEndData final
{
public:
	struct FMoverSyncState                        SyncState;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMoverAuxStateContext                  AuxState;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovementModeTickEndState              MovementEndState;                                  // 0x001C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4C];                                      // 0x0024(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoverTickEndData) == 0x000008, "Wrong alignment on FMoverTickEndData");
static_assert(sizeof(FMoverTickEndData) == 0x000070, "Wrong size on FMoverTickEndData");
static_assert(offsetof(FMoverTickEndData, SyncState) == 0x000000, "Member 'FMoverTickEndData::SyncState' has a wrong offset!");
static_assert(offsetof(FMoverTickEndData, AuxState) == 0x000018, "Member 'FMoverTickEndData::AuxState' has a wrong offset!");
static_assert(offsetof(FMoverTickEndData, MovementEndState) == 0x00001C, "Member 'FMoverTickEndData::MovementEndState' has a wrong offset!");

// ScriptStruct Mover.RelativeBaseInfo
// 0x0070 (0x0070 - 0x0000)
struct FRelativeBaseInfo final
{
public:
	class UPrimitiveComponent*                    MovementBase;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ContactLocalPosition;                              // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRelativeBaseInfo) == 0x000010, "Wrong alignment on FRelativeBaseInfo");
static_assert(sizeof(FRelativeBaseInfo) == 0x000070, "Wrong size on FRelativeBaseInfo");
static_assert(offsetof(FRelativeBaseInfo, MovementBase) == 0x000000, "Member 'FRelativeBaseInfo::MovementBase' has a wrong offset!");
static_assert(offsetof(FRelativeBaseInfo, BoneName) == 0x000008, "Member 'FRelativeBaseInfo::BoneName' has a wrong offset!");
static_assert(offsetof(FRelativeBaseInfo, Location) == 0x000010, "Member 'FRelativeBaseInfo::Location' has a wrong offset!");
static_assert(offsetof(FRelativeBaseInfo, Rotation) == 0x000030, "Member 'FRelativeBaseInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FRelativeBaseInfo, ContactLocalPosition) == 0x000050, "Member 'FRelativeBaseInfo::ContactLocalPosition' has a wrong offset!");

// ScriptStruct Mover.WaterCheckResult
// 0x0110 (0x0110 - 0x0000)
struct FWaterCheckResult final
{
public:
	uint8                                         bSwimmableVolume : 1;                              // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Depth;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImmersionDepth;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0028(0x00E8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterCheckResult) == 0x000008, "Wrong alignment on FWaterCheckResult");
static_assert(sizeof(FWaterCheckResult) == 0x000110, "Wrong size on FWaterCheckResult");
static_assert(offsetof(FWaterCheckResult, Velocity) == 0x000008, "Member 'FWaterCheckResult::Velocity' has a wrong offset!");
static_assert(offsetof(FWaterCheckResult, Depth) == 0x000020, "Member 'FWaterCheckResult::Depth' has a wrong offset!");
static_assert(offsetof(FWaterCheckResult, ImmersionDepth) == 0x000024, "Member 'FWaterCheckResult::ImmersionDepth' has a wrong offset!");
static_assert(offsetof(FWaterCheckResult, HitResult) == 0x000028, "Member 'FWaterCheckResult::HitResult' has a wrong offset!");

// ScriptStruct Mover.TrajectorySampleInfo
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x10) FTrajectorySampleInfo final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrajectorySampleInfo) == 0x000010, "Wrong alignment on FTrajectorySampleInfo");
static_assert(sizeof(FTrajectorySampleInfo) == 0x0000B0, "Wrong size on FTrajectorySampleInfo");

// ScriptStruct Mover.GroundMoveParams
// 0x00A0 (0x00A0 - 0x0000)
struct FGroundMoveParams final
{
public:
	EMoveInputType                                MoveInputType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveInput;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OrientationIntent;                                 // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PriorVelocity;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PriorOrientation;                                  // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningRate;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningBoost;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GroundNormal;                                      // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroundMoveParams) == 0x000008, "Wrong alignment on FGroundMoveParams");
static_assert(sizeof(FGroundMoveParams) == 0x0000A0, "Wrong size on FGroundMoveParams");
static_assert(offsetof(FGroundMoveParams, MoveInputType) == 0x000000, "Member 'FGroundMoveParams::MoveInputType' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, MoveInput) == 0x000008, "Member 'FGroundMoveParams::MoveInput' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, OrientationIntent) == 0x000020, "Member 'FGroundMoveParams::OrientationIntent' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, PriorVelocity) == 0x000038, "Member 'FGroundMoveParams::PriorVelocity' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, PriorOrientation) == 0x000050, "Member 'FGroundMoveParams::PriorOrientation' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, MaxSpeed) == 0x000068, "Member 'FGroundMoveParams::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, Acceleration) == 0x00006C, "Member 'FGroundMoveParams::Acceleration' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, Deceleration) == 0x000070, "Member 'FGroundMoveParams::Deceleration' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, Friction) == 0x000074, "Member 'FGroundMoveParams::Friction' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, TurningRate) == 0x000078, "Member 'FGroundMoveParams::TurningRate' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, TurningBoost) == 0x00007C, "Member 'FGroundMoveParams::TurningBoost' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, GroundNormal) == 0x000080, "Member 'FGroundMoveParams::GroundNormal' has a wrong offset!");
static_assert(offsetof(FGroundMoveParams, DeltaSeconds) == 0x000098, "Member 'FGroundMoveParams::DeltaSeconds' has a wrong offset!");

// ScriptStruct Mover.FreeMoveParams
// 0x0080 (0x0080 - 0x0000)
struct FFreeMoveParams final
{
public:
	EMoveInputType                                MoveInputType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveInput;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OrientationIntent;                                 // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PriorVelocity;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PriorOrientation;                                  // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningBoost;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningRate;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFreeMoveParams) == 0x000008, "Wrong alignment on FFreeMoveParams");
static_assert(sizeof(FFreeMoveParams) == 0x000080, "Wrong size on FFreeMoveParams");
static_assert(offsetof(FFreeMoveParams, MoveInputType) == 0x000000, "Member 'FFreeMoveParams::MoveInputType' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, MoveInput) == 0x000008, "Member 'FFreeMoveParams::MoveInput' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, OrientationIntent) == 0x000020, "Member 'FFreeMoveParams::OrientationIntent' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, PriorVelocity) == 0x000038, "Member 'FFreeMoveParams::PriorVelocity' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, PriorOrientation) == 0x000050, "Member 'FFreeMoveParams::PriorOrientation' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, MaxSpeed) == 0x000068, "Member 'FFreeMoveParams::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, Acceleration) == 0x00006C, "Member 'FFreeMoveParams::Acceleration' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, Deceleration) == 0x000070, "Member 'FFreeMoveParams::Deceleration' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, TurningBoost) == 0x000074, "Member 'FFreeMoveParams::TurningBoost' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, TurningRate) == 0x000078, "Member 'FFreeMoveParams::TurningRate' has a wrong offset!");
static_assert(offsetof(FFreeMoveParams, DeltaSeconds) == 0x00007C, "Member 'FFreeMoveParams::DeltaSeconds' has a wrong offset!");

// ScriptStruct Mover.ComputeVelocityParams
// 0x0050 (0x0050 - 0x0000)
struct FComputeVelocityParams final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialVelocity;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveDirectionIntent;                               // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningBoost;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComputeVelocityParams) == 0x000008, "Wrong alignment on FComputeVelocityParams");
static_assert(sizeof(FComputeVelocityParams) == 0x000050, "Wrong size on FComputeVelocityParams");
static_assert(offsetof(FComputeVelocityParams, DeltaSeconds) == 0x000000, "Member 'FComputeVelocityParams::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(FComputeVelocityParams, InitialVelocity) == 0x000008, "Member 'FComputeVelocityParams::InitialVelocity' has a wrong offset!");
static_assert(offsetof(FComputeVelocityParams, MoveDirectionIntent) == 0x000020, "Member 'FComputeVelocityParams::MoveDirectionIntent' has a wrong offset!");
static_assert(offsetof(FComputeVelocityParams, MaxSpeed) == 0x000038, "Member 'FComputeVelocityParams::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FComputeVelocityParams, TurningBoost) == 0x00003C, "Member 'FComputeVelocityParams::TurningBoost' has a wrong offset!");
static_assert(offsetof(FComputeVelocityParams, Friction) == 0x000040, "Member 'FComputeVelocityParams::Friction' has a wrong offset!");
static_assert(offsetof(FComputeVelocityParams, Deceleration) == 0x000044, "Member 'FComputeVelocityParams::Deceleration' has a wrong offset!");
static_assert(offsetof(FComputeVelocityParams, Acceleration) == 0x000048, "Member 'FComputeVelocityParams::Acceleration' has a wrong offset!");

// ScriptStruct Mover.SimulationTickParams
// 0x00E0 (0x00E0 - 0x0000)
struct FSimulationTickParams final
{
public:
	class USceneComponent*                        UpdatedComponent;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    UpdatedPrimitive;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoverTickStartData                    StartState;                                        // 0x0010(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMoverTimeStep                         TimeStep;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FProposedMove                          ProposedMove;                                      // 0x0058(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimulationTickParams) == 0x000008, "Wrong alignment on FSimulationTickParams");
static_assert(sizeof(FSimulationTickParams) == 0x0000E0, "Wrong size on FSimulationTickParams");
static_assert(offsetof(FSimulationTickParams, UpdatedComponent) == 0x000000, "Member 'FSimulationTickParams::UpdatedComponent' has a wrong offset!");
static_assert(offsetof(FSimulationTickParams, UpdatedPrimitive) == 0x000008, "Member 'FSimulationTickParams::UpdatedPrimitive' has a wrong offset!");
static_assert(offsetof(FSimulationTickParams, StartState) == 0x000010, "Member 'FSimulationTickParams::StartState' has a wrong offset!");
static_assert(offsetof(FSimulationTickParams, TimeStep) == 0x000048, "Member 'FSimulationTickParams::TimeStep' has a wrong offset!");
static_assert(offsetof(FSimulationTickParams, ProposedMove) == 0x000058, "Member 'FSimulationTickParams::ProposedMove' has a wrong offset!");

}

