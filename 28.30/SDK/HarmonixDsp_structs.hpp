#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HarmonixDsp

#include "Basic.hpp"


namespace SDK
{

// Enum HarmonixDsp.EFusionPatchAudioLoadResult
// NumValues: 0x0003
enum class EFusionPatchAudioLoadResult : uint8
{
	Success                                  = 0,
	Fail                                     = 1,
	Cancelled                                = 2,
};

// Enum HarmonixDsp.EAdsrTarget
// NumValues: 0x0005
enum class EAdsrTarget : uint8
{
	None                                     = 0,
	Volume                                   = 1,
	FilterFreq                               = 2,
	Num                                      = 3,
	Invalid                                  = 4,
};

// Enum HarmonixDsp.ESpeakerChannelAssignment
// NumValues: 0x0015
enum class ESpeakerChannelAssignment : uint8
{
	LeftFront                                = 0,
	RightFront                               = 1,
	Center                                   = 2,
	LFE                                      = 3,
	LeftSurround                             = 4,
	RightSurround                            = 5,
	LeftRear                                 = 6,
	RightRear                                = 7,
	FrontPair                                = 8,
	CenterAndLFE                             = 9,
	SurroundPair                             = 10,
	RearPair                                 = 11,
	AmbisonicW                               = 12,
	AmbisonicX                               = 13,
	AmbisonicY                               = 14,
	AmbisonicZ                               = 15,
	AmbisonicWXPair                          = 16,
	AmbisonicYZPair                          = 17,
	UnspecifiedMono                          = 18,
	Num                                      = 19,
	Invalid                                  = 20,
};

// Enum HarmonixDsp.EBiquadFilterType
// NumValues: 0x0008
enum class EBiquadFilterType : uint32
{
	LowPass                                  = 0,
	HighPass                                 = 1,
	BandPass                                 = 2,
	Peaking                                  = 3,
	LowShelf                                 = 4,
	HighShelf                                = 5,
	Num                                      = 6,
	None                                     = 7,
};

// Enum HarmonixDsp.EDelayStereoType
// NumValues: 0x0006
enum class EDelayStereoType : uint8
{
	Default                                  = 0,
	CustomSpread                             = 1,
	PingPongForceLR                          = 2,
	PingPongSum                              = 3,
	PingPongIndividual                       = 4,
	Num                                      = 5,
};

// Enum HarmonixDsp.EDelayFilterType
// NumValues: 0x0004
enum class EDelayFilterType : uint8
{
	LowPass                                  = 0,
	HighPass                                 = 1,
	BandPass                                 = 2,
	Num                                      = 3,
};

// Enum HarmonixDsp.EDistortionTypeV1
// NumValues: 0x0006
enum class EDistortionTypeV1 : uint32
{
	Clean                                    = 0,
	Warm                                     = 1,
	Dirty                                    = 2,
	Soft                                     = 3,
	Asymmetric                               = 4,
	Num                                      = 5,
};

// Enum HarmonixDsp.EDistortionTypeV2
// NumValues: 0x0009
enum class EDistortionTypeV2 : uint32
{
	Clean                                    = 0,
	Warm                                     = 1,
	Clip                                     = 2,
	Soft                                     = 3,
	Asymmetric                               = 4,
	Cruncher                                 = 5,
	CaptCrunch                               = 6,
	Rectifier                                = 7,
	Num                                      = 8,
};

// Enum HarmonixDsp.EKeyzoneSelectMode
// NumValues: 0x0006
enum class EKeyzoneSelectMode : uint8
{
	Layers                                   = 0,
	Random                                   = 1,
	RandomWithRepetition                     = 2,
	Cycle                                    = 3,
	Num                                      = 4,
	Invalid                                  = 5,
};

// Enum HarmonixDsp.EWaveShape
// NumValues: 0x0008
enum class EWaveShape : uint8
{
	Sine                                     = 0,
	Square                                   = 1,
	SawUp                                    = 2,
	SawDown                                  = 3,
	Triangle                                 = 4,
	Random                                   = 5,
	Num                                      = 6,
	None                                     = 7,
};

// Enum HarmonixDsp.ELfoTarget
// NumValues: 0x0005
enum class ELfoTarget : uint8
{
	Pan                                      = 0,
	Pitch                                    = 1,
	FilterFreq                               = 2,
	Num                                      = 3,
	None                                     = 4,
};

// Enum HarmonixDsp.EModulatorTarget
// NumValues: 0x0004
enum class EModulatorTarget : uint8
{
	StartPoint                               = 0,
	Pitch                                    = 1,
	Num                                      = 2,
	None                                     = 3,
};

// Enum HarmonixDsp.EPannerMode
// NumValues: 0x0007
enum class EPannerMode : uint8
{
	LegacyStereo                             = 0,
	Stereo                                   = 1,
	Surround                                 = 2,
	PolarSurround                            = 3,
	DirectAssignment                         = 4,
	Num                                      = 5,
	Invalid                                  = 6,
};

// Enum HarmonixDsp.EPortamentoMode
// NumValues: 0x0004
enum class EPortamentoMode : uint8
{
	Legato                                   = 0,
	Persistent                               = 1,
	Num                                      = 2,
	None                                     = 3,
};

// Enum HarmonixDsp.ETimeSyncOption
// NumValues: 0x0004
enum class ETimeSyncOption : uint8
{
	None                                     = 0,
	TempoSync                                = 1,
	SpeedScale                               = 2,
	Num                                      = 3,
};

// Enum HarmonixDsp.EParameterType
// NumValues: 0x000F
enum class EParameterType : uint8
{
	Bool                                     = 0,
	Double                                   = 1,
	Float                                    = 2,
	Int8                                     = 3,
	Int16                                    = 4,
	Int32                                    = 5,
	Int64                                    = 6,
	Name                                     = 7,
	String                                   = 8,
	UInt8                                    = 9,
	UInt16                                   = 10,
	UInt32                                   = 11,
	UInt64                                   = 12,
	Num                                      = 13,
	Invalid                                  = 14,
};

// Enum HarmonixDsp.EVocoderBandConfig
// NumValues: 0x0009
enum class EVocoderBandConfig : uint8
{
	k4                                       = 0,
	k8                                       = 1,
	k16                                      = 2,
	k32                                      = 3,
	k64                                      = 4,
	k128                                     = 5,
	k256                                     = 6,
	Num                                      = 7,
	None                                     = 8,
};

// ScriptStruct HarmonixDsp.BiquadFilterSettings
// 0x0018 (0x0018 - 0x0000)
struct FBiquadFilterSettings final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EBiquadFilterType                             Type;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Freq;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Q;                                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesignedDBGain;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiquadFilterSettings) == 0x000004, "Wrong alignment on FBiquadFilterSettings");
static_assert(sizeof(FBiquadFilterSettings) == 0x000018, "Wrong size on FBiquadFilterSettings");
static_assert(offsetof(FBiquadFilterSettings, IsEnabled) == 0x000000, "Member 'FBiquadFilterSettings::IsEnabled' has a wrong offset!");
static_assert(offsetof(FBiquadFilterSettings, Type) == 0x000004, "Member 'FBiquadFilterSettings::Type' has a wrong offset!");
static_assert(offsetof(FBiquadFilterSettings, Freq) == 0x00000C, "Member 'FBiquadFilterSettings::Freq' has a wrong offset!");
static_assert(offsetof(FBiquadFilterSettings, Q) == 0x000010, "Member 'FBiquadFilterSettings::Q' has a wrong offset!");
static_assert(offsetof(FBiquadFilterSettings, DesignedDBGain) == 0x000014, "Member 'FBiquadFilterSettings::DesignedDBGain' has a wrong offset!");

// ScriptStruct HarmonixDsp.HarmonixFFTAnalyzerResults
// 0x0010 (0x0010 - 0x0000)
struct FHarmonixFFTAnalyzerResults final
{
public:
	TArray<float>                                 Spectrum;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixFFTAnalyzerResults) == 0x000008, "Wrong alignment on FHarmonixFFTAnalyzerResults");
static_assert(sizeof(FHarmonixFFTAnalyzerResults) == 0x000010, "Wrong size on FHarmonixFFTAnalyzerResults");
static_assert(offsetof(FHarmonixFFTAnalyzerResults, Spectrum) == 0x000000, "Member 'FHarmonixFFTAnalyzerResults::Spectrum' has a wrong offset!");

// ScriptStruct HarmonixDsp.AdsrSettings
// 0x0120 (0x0120 - 0x0000)
struct FAdsrSettings final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAdsrTarget                                   Target;                                            // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackTime;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayTime;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SustainLevel;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReleaseTime;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Depth;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackCurve;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayCurve;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReleaseCurve;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xFC];                                      // 0x0024(0x00FC)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdsrSettings) == 0x000004, "Wrong alignment on FAdsrSettings");
static_assert(sizeof(FAdsrSettings) == 0x000120, "Wrong size on FAdsrSettings");
static_assert(offsetof(FAdsrSettings, IsEnabled) == 0x000000, "Member 'FAdsrSettings::IsEnabled' has a wrong offset!");
static_assert(offsetof(FAdsrSettings, Target) == 0x000001, "Member 'FAdsrSettings::Target' has a wrong offset!");
static_assert(offsetof(FAdsrSettings, AttackTime) == 0x000004, "Member 'FAdsrSettings::AttackTime' has a wrong offset!");
static_assert(offsetof(FAdsrSettings, DecayTime) == 0x000008, "Member 'FAdsrSettings::DecayTime' has a wrong offset!");
static_assert(offsetof(FAdsrSettings, SustainLevel) == 0x00000C, "Member 'FAdsrSettings::SustainLevel' has a wrong offset!");
static_assert(offsetof(FAdsrSettings, ReleaseTime) == 0x000010, "Member 'FAdsrSettings::ReleaseTime' has a wrong offset!");
static_assert(offsetof(FAdsrSettings, Depth) == 0x000014, "Member 'FAdsrSettings::Depth' has a wrong offset!");
static_assert(offsetof(FAdsrSettings, AttackCurve) == 0x000018, "Member 'FAdsrSettings::AttackCurve' has a wrong offset!");
static_assert(offsetof(FAdsrSettings, DecayCurve) == 0x00001C, "Member 'FAdsrSettings::DecayCurve' has a wrong offset!");
static_assert(offsetof(FAdsrSettings, ReleaseCurve) == 0x000020, "Member 'FAdsrSettings::ReleaseCurve' has a wrong offset!");

// ScriptStruct HarmonixDsp.AdsrSettingsArray
// 0x0250 (0x0250 - 0x0000)
struct alignas(0x08) FAdsrSettingsArray final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAdsrSettings                          Array[0x2];                                        // 0x0010(0x0120)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAdsrSettingsArray) == 0x000008, "Wrong alignment on FAdsrSettingsArray");
static_assert(sizeof(FAdsrSettingsArray) == 0x000250, "Wrong size on FAdsrSettingsArray");
static_assert(offsetof(FAdsrSettingsArray, Array) == 0x000010, "Member 'FAdsrSettingsArray::Array' has a wrong offset!");

// ScriptStruct HarmonixDsp.BitCrusherSettings
// 0x0014 (0x0014 - 0x0000)
struct FBitCrusherSettings final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputGain;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputGain;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetGain;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Crush;                                             // 0x0010(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SampleHoldFactor;                                  // 0x0012(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBitCrusherSettings) == 0x000004, "Wrong alignment on FBitCrusherSettings");
static_assert(sizeof(FBitCrusherSettings) == 0x000014, "Wrong size on FBitCrusherSettings");
static_assert(offsetof(FBitCrusherSettings, IsEnabled) == 0x000000, "Member 'FBitCrusherSettings::IsEnabled' has a wrong offset!");
static_assert(offsetof(FBitCrusherSettings, InputGain) == 0x000004, "Member 'FBitCrusherSettings::InputGain' has a wrong offset!");
static_assert(offsetof(FBitCrusherSettings, OutputGain) == 0x000008, "Member 'FBitCrusherSettings::OutputGain' has a wrong offset!");
static_assert(offsetof(FBitCrusherSettings, WetGain) == 0x00000C, "Member 'FBitCrusherSettings::WetGain' has a wrong offset!");
static_assert(offsetof(FBitCrusherSettings, Crush) == 0x000010, "Member 'FBitCrusherSettings::Crush' has a wrong offset!");
static_assert(offsetof(FBitCrusherSettings, SampleHoldFactor) == 0x000012, "Member 'FBitCrusherSettings::SampleHoldFactor' has a wrong offset!");

// ScriptStruct HarmonixDsp.DelaySettings
// 0x003C (0x003C - 0x0000)
struct FDelaySettings final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeSyncOption                               TimeSyncOption;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeSeconds;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tempo;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryGain;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetGain;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FeedbackGain;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EQEnabled;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelayFilterType                              EQType;                                            // 0x0019(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EQFreq;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EQQ;                                               // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LfoEnabled;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeSyncOption                               LfoTimeSyncOption;                                 // 0x0025(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LfoRate;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LfoDepth;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelayStereoType                              StereoType;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PanLeft;                                           // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PanRight;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelaySettings) == 0x000004, "Wrong alignment on FDelaySettings");
static_assert(sizeof(FDelaySettings) == 0x00003C, "Wrong size on FDelaySettings");
static_assert(offsetof(FDelaySettings, IsEnabled) == 0x000000, "Member 'FDelaySettings::IsEnabled' has a wrong offset!");
static_assert(offsetof(FDelaySettings, TimeSyncOption) == 0x000001, "Member 'FDelaySettings::TimeSyncOption' has a wrong offset!");
static_assert(offsetof(FDelaySettings, TimeSeconds) == 0x000004, "Member 'FDelaySettings::TimeSeconds' has a wrong offset!");
static_assert(offsetof(FDelaySettings, Tempo) == 0x000008, "Member 'FDelaySettings::Tempo' has a wrong offset!");
static_assert(offsetof(FDelaySettings, DryGain) == 0x00000C, "Member 'FDelaySettings::DryGain' has a wrong offset!");
static_assert(offsetof(FDelaySettings, WetGain) == 0x000010, "Member 'FDelaySettings::WetGain' has a wrong offset!");
static_assert(offsetof(FDelaySettings, FeedbackGain) == 0x000014, "Member 'FDelaySettings::FeedbackGain' has a wrong offset!");
static_assert(offsetof(FDelaySettings, EQEnabled) == 0x000018, "Member 'FDelaySettings::EQEnabled' has a wrong offset!");
static_assert(offsetof(FDelaySettings, EQType) == 0x000019, "Member 'FDelaySettings::EQType' has a wrong offset!");
static_assert(offsetof(FDelaySettings, EQFreq) == 0x00001C, "Member 'FDelaySettings::EQFreq' has a wrong offset!");
static_assert(offsetof(FDelaySettings, EQQ) == 0x000020, "Member 'FDelaySettings::EQQ' has a wrong offset!");
static_assert(offsetof(FDelaySettings, LfoEnabled) == 0x000024, "Member 'FDelaySettings::LfoEnabled' has a wrong offset!");
static_assert(offsetof(FDelaySettings, LfoTimeSyncOption) == 0x000025, "Member 'FDelaySettings::LfoTimeSyncOption' has a wrong offset!");
static_assert(offsetof(FDelaySettings, LfoRate) == 0x000028, "Member 'FDelaySettings::LfoRate' has a wrong offset!");
static_assert(offsetof(FDelaySettings, LfoDepth) == 0x00002C, "Member 'FDelaySettings::LfoDepth' has a wrong offset!");
static_assert(offsetof(FDelaySettings, StereoType) == 0x000030, "Member 'FDelaySettings::StereoType' has a wrong offset!");
static_assert(offsetof(FDelaySettings, PanLeft) == 0x000034, "Member 'FDelaySettings::PanLeft' has a wrong offset!");
static_assert(offsetof(FDelaySettings, PanRight) == 0x000038, "Member 'FDelaySettings::PanRight' has a wrong offset!");

// ScriptStruct HarmonixDsp.DistortionFilterSettings
// 0x0020 (0x0020 - 0x0000)
struct FDistortionFilterSettings final
{
public:
	bool                                          FilterPreClip;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBiquadFilterSettings                  Filter;                                            // 0x0004(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumPasses;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistortionFilterSettings) == 0x000004, "Wrong alignment on FDistortionFilterSettings");
static_assert(sizeof(FDistortionFilterSettings) == 0x000020, "Wrong size on FDistortionFilterSettings");
static_assert(offsetof(FDistortionFilterSettings, FilterPreClip) == 0x000000, "Member 'FDistortionFilterSettings::FilterPreClip' has a wrong offset!");
static_assert(offsetof(FDistortionFilterSettings, Filter) == 0x000004, "Member 'FDistortionFilterSettings::Filter' has a wrong offset!");
static_assert(offsetof(FDistortionFilterSettings, NumPasses) == 0x00001C, "Member 'FDistortionFilterSettings::NumPasses' has a wrong offset!");

// ScriptStruct HarmonixDsp.DistortionSettingsV1
// 0x0078 (0x0078 - 0x0000)
struct FDistortionSettingsV1 final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputGainDb;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputGainDb;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCAdjust;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistortionTypeV1                             Type;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Oversample;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDistortionFilterSettings              Filters[0x3];                                      // 0x0018(0x0020)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistortionSettingsV1) == 0x000004, "Wrong alignment on FDistortionSettingsV1");
static_assert(sizeof(FDistortionSettingsV1) == 0x000078, "Wrong size on FDistortionSettingsV1");
static_assert(offsetof(FDistortionSettingsV1, IsEnabled) == 0x000000, "Member 'FDistortionSettingsV1::IsEnabled' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV1, InputGainDb) == 0x000004, "Member 'FDistortionSettingsV1::InputGainDb' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV1, OutputGainDb) == 0x000008, "Member 'FDistortionSettingsV1::OutputGainDb' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV1, DCAdjust) == 0x00000C, "Member 'FDistortionSettingsV1::DCAdjust' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV1, Type) == 0x000010, "Member 'FDistortionSettingsV1::Type' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV1, Oversample) == 0x000014, "Member 'FDistortionSettingsV1::Oversample' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV1, Filters) == 0x000018, "Member 'FDistortionSettingsV1::Filters' has a wrong offset!");

// ScriptStruct HarmonixDsp.DistortionSettingsV2
// 0x0080 (0x0080 - 0x0000)
struct FDistortionSettingsV2 final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputGainDb;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputGainDb;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryGain;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetGain;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DCAdjust;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDistortionTypeV2                             Type;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Oversample;                                        // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDistortionFilterSettings              Filters[0x3];                                      // 0x0020(0x0020)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistortionSettingsV2) == 0x000004, "Wrong alignment on FDistortionSettingsV2");
static_assert(sizeof(FDistortionSettingsV2) == 0x000080, "Wrong size on FDistortionSettingsV2");
static_assert(offsetof(FDistortionSettingsV2, IsEnabled) == 0x000000, "Member 'FDistortionSettingsV2::IsEnabled' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV2, InputGainDb) == 0x000004, "Member 'FDistortionSettingsV2::InputGainDb' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV2, OutputGainDb) == 0x000008, "Member 'FDistortionSettingsV2::OutputGainDb' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV2, DryGain) == 0x00000C, "Member 'FDistortionSettingsV2::DryGain' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV2, WetGain) == 0x000010, "Member 'FDistortionSettingsV2::WetGain' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV2, DCAdjust) == 0x000014, "Member 'FDistortionSettingsV2::DCAdjust' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV2, Type) == 0x000018, "Member 'FDistortionSettingsV2::Type' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV2, Oversample) == 0x00001C, "Member 'FDistortionSettingsV2::Oversample' has a wrong offset!");
static_assert(offsetof(FDistortionSettingsV2, Filters) == 0x000020, "Member 'FDistortionSettingsV2::Filters' has a wrong offset!");

// ScriptStruct HarmonixDsp.HarmonixAudioAnalyzerOutputSettings
// 0x0010 (0x0010 - 0x0000)
struct FHarmonixAudioAnalyzerOutputSettings final
{
public:
	float                                         RiseMs;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallMs;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDecibels;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeDecibels;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixAudioAnalyzerOutputSettings) == 0x000004, "Wrong alignment on FHarmonixAudioAnalyzerOutputSettings");
static_assert(sizeof(FHarmonixAudioAnalyzerOutputSettings) == 0x000010, "Wrong size on FHarmonixAudioAnalyzerOutputSettings");
static_assert(offsetof(FHarmonixAudioAnalyzerOutputSettings, RiseMs) == 0x000000, "Member 'FHarmonixAudioAnalyzerOutputSettings::RiseMs' has a wrong offset!");
static_assert(offsetof(FHarmonixAudioAnalyzerOutputSettings, FallMs) == 0x000004, "Member 'FHarmonixAudioAnalyzerOutputSettings::FallMs' has a wrong offset!");
static_assert(offsetof(FHarmonixAudioAnalyzerOutputSettings, MaxDecibels) == 0x000008, "Member 'FHarmonixAudioAnalyzerOutputSettings::MaxDecibels' has a wrong offset!");
static_assert(offsetof(FHarmonixAudioAnalyzerOutputSettings, RangeDecibels) == 0x00000C, "Member 'FHarmonixAudioAnalyzerOutputSettings::RangeDecibels' has a wrong offset!");

// ScriptStruct HarmonixDsp.HarmonixFFTAnalyzerSettings
// 0x0024 (0x0024 - 0x0000)
struct FHarmonixFFTAnalyzerSettings final
{
public:
	int32                                         FFTSize;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFrequencyHz;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFrequencyHz;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MelScaleBinning;                                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumResultBins;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixAudioAnalyzerOutputSettings   OutputSettings;                                    // 0x0014(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixFFTAnalyzerSettings) == 0x000004, "Wrong alignment on FHarmonixFFTAnalyzerSettings");
static_assert(sizeof(FHarmonixFFTAnalyzerSettings) == 0x000024, "Wrong size on FHarmonixFFTAnalyzerSettings");
static_assert(offsetof(FHarmonixFFTAnalyzerSettings, FFTSize) == 0x000000, "Member 'FHarmonixFFTAnalyzerSettings::FFTSize' has a wrong offset!");
static_assert(offsetof(FHarmonixFFTAnalyzerSettings, MinFrequencyHz) == 0x000004, "Member 'FHarmonixFFTAnalyzerSettings::MinFrequencyHz' has a wrong offset!");
static_assert(offsetof(FHarmonixFFTAnalyzerSettings, MaxFrequencyHz) == 0x000008, "Member 'FHarmonixFFTAnalyzerSettings::MaxFrequencyHz' has a wrong offset!");
static_assert(offsetof(FHarmonixFFTAnalyzerSettings, MelScaleBinning) == 0x00000C, "Member 'FHarmonixFFTAnalyzerSettings::MelScaleBinning' has a wrong offset!");
static_assert(offsetof(FHarmonixFFTAnalyzerSettings, NumResultBins) == 0x000010, "Member 'FHarmonixFFTAnalyzerSettings::NumResultBins' has a wrong offset!");
static_assert(offsetof(FHarmonixFFTAnalyzerSettings, OutputSettings) == 0x000014, "Member 'FHarmonixFFTAnalyzerSettings::OutputSettings' has a wrong offset!");

// ScriptStruct HarmonixDsp.PannerDetails
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FPannerDetails final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPannerDetails) == 0x000004, "Wrong alignment on FPannerDetails");
static_assert(sizeof(FPannerDetails) == 0x00000C, "Wrong size on FPannerDetails");

// ScriptStruct HarmonixDsp.PitchShifterName
// 0x0004 (0x0004 - 0x0000)
struct FPitchShifterName final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPitchShifterName) == 0x000004, "Wrong alignment on FPitchShifterName");
static_assert(sizeof(FPitchShifterName) == 0x000004, "Wrong size on FPitchShifterName");
static_assert(offsetof(FPitchShifterName, Name) == 0x000000, "Member 'FPitchShifterName::Name' has a wrong offset!");

// ScriptStruct HarmonixDsp.TypedParameter
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTypedParameter final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedParameter) == 0x000008, "Wrong alignment on FTypedParameter");
static_assert(sizeof(FTypedParameter) == 0x000018, "Wrong size on FTypedParameter");

// ScriptStruct HarmonixDsp.TimeStretchConfig
// 0x0060 (0x0060 - 0x0000)
struct FTimeStretchConfig final
{
public:
	bool                                          bMaintainTime;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPitchShifterName                      PitchShifter;                                      // 0x0004(0x0004)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTypedParameter>     PitchShifterOptions;                               // 0x0008(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bSyncTempo;                                        // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginalTempo;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeStretchConfig) == 0x000008, "Wrong alignment on FTimeStretchConfig");
static_assert(sizeof(FTimeStretchConfig) == 0x000060, "Wrong size on FTimeStretchConfig");
static_assert(offsetof(FTimeStretchConfig, bMaintainTime) == 0x000000, "Member 'FTimeStretchConfig::bMaintainTime' has a wrong offset!");
static_assert(offsetof(FTimeStretchConfig, PitchShifter) == 0x000004, "Member 'FTimeStretchConfig::PitchShifter' has a wrong offset!");
static_assert(offsetof(FTimeStretchConfig, PitchShifterOptions) == 0x000008, "Member 'FTimeStretchConfig::PitchShifterOptions' has a wrong offset!");
static_assert(offsetof(FTimeStretchConfig, bSyncTempo) == 0x000058, "Member 'FTimeStretchConfig::bSyncTempo' has a wrong offset!");
static_assert(offsetof(FTimeStretchConfig, OriginalTempo) == 0x00005C, "Member 'FTimeStretchConfig::OriginalTempo' has a wrong offset!");

// ScriptStruct HarmonixDsp.StreamingChannelParams
// 0x0014 (0x0014 - 0x0000)
struct FStreamingChannelParams final
{
public:
	int32                                         StreamIndex;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPannerDetails                         Pan;                                               // 0x0008(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStreamingChannelParams) == 0x000004, "Wrong alignment on FStreamingChannelParams");
static_assert(sizeof(FStreamingChannelParams) == 0x000014, "Wrong size on FStreamingChannelParams");
static_assert(offsetof(FStreamingChannelParams, StreamIndex) == 0x000000, "Member 'FStreamingChannelParams::StreamIndex' has a wrong offset!");
static_assert(offsetof(FStreamingChannelParams, Gain) == 0x000004, "Member 'FStreamingChannelParams::Gain' has a wrong offset!");
static_assert(offsetof(FStreamingChannelParams, Pan) == 0x000008, "Member 'FStreamingChannelParams::Pan' has a wrong offset!");

// ScriptStruct HarmonixDsp.StreamingChannelParamsArray
// 0x0010 (0x0010 - 0x0000)
struct FStreamingChannelParamsArray final
{
public:
	TArray<struct FStreamingChannelParams>        ChannelParams;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStreamingChannelParamsArray) == 0x000008, "Wrong alignment on FStreamingChannelParamsArray");
static_assert(sizeof(FStreamingChannelParamsArray) == 0x000010, "Wrong size on FStreamingChannelParamsArray");
static_assert(offsetof(FStreamingChannelParamsArray, ChannelParams) == 0x000000, "Member 'FStreamingChannelParamsArray::ChannelParams' has a wrong offset!");

// ScriptStruct HarmonixDsp.TrackChannelInfo
// 0x0070 (0x0070 - 0x0000)
struct FTrackChannelInfo final
{
public:
	int32                                         RealTrackIndex;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Routing;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStreamingChannelParams>        Channels;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FStreamingChannelParamsArray> PresetChannels;                                    // 0x0020(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackChannelInfo) == 0x000008, "Wrong alignment on FTrackChannelInfo");
static_assert(sizeof(FTrackChannelInfo) == 0x000070, "Wrong size on FTrackChannelInfo");
static_assert(offsetof(FTrackChannelInfo, RealTrackIndex) == 0x000000, "Member 'FTrackChannelInfo::RealTrackIndex' has a wrong offset!");
static_assert(offsetof(FTrackChannelInfo, Name) == 0x000004, "Member 'FTrackChannelInfo::Name' has a wrong offset!");
static_assert(offsetof(FTrackChannelInfo, Routing) == 0x000008, "Member 'FTrackChannelInfo::Routing' has a wrong offset!");
static_assert(offsetof(FTrackChannelInfo, Channels) == 0x000010, "Member 'FTrackChannelInfo::Channels' has a wrong offset!");
static_assert(offsetof(FTrackChannelInfo, PresetChannels) == 0x000020, "Member 'FTrackChannelInfo::PresetChannels' has a wrong offset!");

// ScriptStruct HarmonixDsp.KeyzoneSettings
// 0x00D8 (0x00D8 - 0x0000)
struct FKeyzoneSettings final
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int8                                          RootNote;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          MinNote;                                           // 0x0019(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          MaxNote;                                           // 0x001A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          MinVelocity;                                       // 0x001B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          MaxVelocity;                                       // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SampleIndex;                                       // 0x001D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x001E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPannerDetails                         Pan;                                               // 0x0020(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FineTuneCents;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Gain;                                              // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnpitched;                                        // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelocityToGain;                                   // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeStretchConfig                     TimeStretchConfig;                                 // 0x0040(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsNoteOffZone;                                    // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomWeight;                                      // 0x00A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleStartOffset;                                 // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleEndOffset;                                   // 0x00AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTrackChannelInfo>              TrackMap;                                          // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          UseSingletonVoicePool;                             // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x17];                                      // 0x00C1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKeyzoneSettings) == 0x000008, "Wrong alignment on FKeyzoneSettings");
static_assert(sizeof(FKeyzoneSettings) == 0x0000D8, "Wrong size on FKeyzoneSettings");
static_assert(offsetof(FKeyzoneSettings, SoundWave) == 0x000000, "Member 'FKeyzoneSettings::SoundWave' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, RootNote) == 0x000018, "Member 'FKeyzoneSettings::RootNote' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, MinNote) == 0x000019, "Member 'FKeyzoneSettings::MinNote' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, MaxNote) == 0x00001A, "Member 'FKeyzoneSettings::MaxNote' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, MinVelocity) == 0x00001B, "Member 'FKeyzoneSettings::MinVelocity' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, MaxVelocity) == 0x00001C, "Member 'FKeyzoneSettings::MaxVelocity' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, SampleIndex) == 0x00001D, "Member 'FKeyzoneSettings::SampleIndex' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, Priority) == 0x00001E, "Member 'FKeyzoneSettings::Priority' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, Pan) == 0x000020, "Member 'FKeyzoneSettings::Pan' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, FineTuneCents) == 0x00002C, "Member 'FKeyzoneSettings::FineTuneCents' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, Gain) == 0x000034, "Member 'FKeyzoneSettings::Gain' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, bUnpitched) == 0x000038, "Member 'FKeyzoneSettings::bUnpitched' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, bVelocityToGain) == 0x000039, "Member 'FKeyzoneSettings::bVelocityToGain' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, TimeStretchConfig) == 0x000040, "Member 'FKeyzoneSettings::TimeStretchConfig' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, bIsNoteOffZone) == 0x0000A0, "Member 'FKeyzoneSettings::bIsNoteOffZone' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, RandomWeight) == 0x0000A4, "Member 'FKeyzoneSettings::RandomWeight' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, SampleStartOffset) == 0x0000A8, "Member 'FKeyzoneSettings::SampleStartOffset' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, SampleEndOffset) == 0x0000AC, "Member 'FKeyzoneSettings::SampleEndOffset' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, TrackMap) == 0x0000B0, "Member 'FKeyzoneSettings::TrackMap' has a wrong offset!");
static_assert(offsetof(FKeyzoneSettings, UseSingletonVoicePool) == 0x0000C0, "Member 'FKeyzoneSettings::UseSingletonVoicePool' has a wrong offset!");

// ScriptStruct HarmonixDsp.VocoderBand
// 0x0008 (0x0008 - 0x0000)
struct FVocoderBand final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Solo;                                              // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVocoderBand) == 0x000004, "Wrong alignment on FVocoderBand");
static_assert(sizeof(FVocoderBand) == 0x000008, "Wrong size on FVocoderBand");
static_assert(offsetof(FVocoderBand, Gain) == 0x000000, "Member 'FVocoderBand::Gain' has a wrong offset!");
static_assert(offsetof(FVocoderBand, Solo) == 0x000004, "Member 'FVocoderBand::Solo' has a wrong offset!");

// ScriptStruct HarmonixDsp.VocoderSettings
// 0x0050 (0x0050 - 0x0000)
struct FVocoderSettings final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ModulatorIndex;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelCount;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleRate;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVocoderBandConfig                            BandConfig;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Soloing;                                           // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameCount;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CarrierGain;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModulatorGain;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CarrierThin;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModulatorThin;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Attack;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Release;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighEmphasis;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wet;                                               // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputGain;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVocoderBand>                   Bands;                                             // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVocoderSettings) == 0x000008, "Wrong alignment on FVocoderSettings");
static_assert(sizeof(FVocoderSettings) == 0x000050, "Wrong size on FVocoderSettings");
static_assert(offsetof(FVocoderSettings, IsEnabled) == 0x000000, "Member 'FVocoderSettings::IsEnabled' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, ModulatorIndex) == 0x000004, "Member 'FVocoderSettings::ModulatorIndex' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, ChannelCount) == 0x000008, "Member 'FVocoderSettings::ChannelCount' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, SampleRate) == 0x00000C, "Member 'FVocoderSettings::SampleRate' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, BandConfig) == 0x000010, "Member 'FVocoderSettings::BandConfig' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, Soloing) == 0x000011, "Member 'FVocoderSettings::Soloing' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, FrameCount) == 0x000014, "Member 'FVocoderSettings::FrameCount' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, CarrierGain) == 0x000018, "Member 'FVocoderSettings::CarrierGain' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, ModulatorGain) == 0x00001C, "Member 'FVocoderSettings::ModulatorGain' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, CarrierThin) == 0x000020, "Member 'FVocoderSettings::CarrierThin' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, ModulatorThin) == 0x000024, "Member 'FVocoderSettings::ModulatorThin' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, Attack) == 0x000028, "Member 'FVocoderSettings::Attack' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, Release) == 0x00002C, "Member 'FVocoderSettings::Release' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, HighEmphasis) == 0x000030, "Member 'FVocoderSettings::HighEmphasis' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, Wet) == 0x000034, "Member 'FVocoderSettings::Wet' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, OutputGain) == 0x000038, "Member 'FVocoderSettings::OutputGain' has a wrong offset!");
static_assert(offsetof(FVocoderSettings, Bands) == 0x000040, "Member 'FVocoderSettings::Bands' has a wrong offset!");

// ScriptStruct HarmonixDsp.PortamentoSettings
// 0x0008 (0x0008 - 0x0000)
struct FPortamentoSettings final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPortamentoMode                               Mode;                                              // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Seconds;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPortamentoSettings) == 0x000004, "Wrong alignment on FPortamentoSettings");
static_assert(sizeof(FPortamentoSettings) == 0x000008, "Wrong size on FPortamentoSettings");
static_assert(offsetof(FPortamentoSettings, IsEnabled) == 0x000000, "Member 'FPortamentoSettings::IsEnabled' has a wrong offset!");
static_assert(offsetof(FPortamentoSettings, Mode) == 0x000001, "Member 'FPortamentoSettings::Mode' has a wrong offset!");
static_assert(offsetof(FPortamentoSettings, Seconds) == 0x000004, "Member 'FPortamentoSettings::Seconds' has a wrong offset!");

// ScriptStruct HarmonixDsp.LfoSettings
// 0x0018 (0x0018 - 0x0000)
struct FLfoSettings final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaveShape                                    Shape;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELfoTarget                                    Target;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldRetrigger;                                   // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BeatSync;                                          // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Freq;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Depth;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialPhase;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempoBPM;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLfoSettings) == 0x000004, "Wrong alignment on FLfoSettings");
static_assert(sizeof(FLfoSettings) == 0x000018, "Wrong size on FLfoSettings");
static_assert(offsetof(FLfoSettings, IsEnabled) == 0x000000, "Member 'FLfoSettings::IsEnabled' has a wrong offset!");
static_assert(offsetof(FLfoSettings, Shape) == 0x000001, "Member 'FLfoSettings::Shape' has a wrong offset!");
static_assert(offsetof(FLfoSettings, Target) == 0x000002, "Member 'FLfoSettings::Target' has a wrong offset!");
static_assert(offsetof(FLfoSettings, ShouldRetrigger) == 0x000003, "Member 'FLfoSettings::ShouldRetrigger' has a wrong offset!");
static_assert(offsetof(FLfoSettings, BeatSync) == 0x000004, "Member 'FLfoSettings::BeatSync' has a wrong offset!");
static_assert(offsetof(FLfoSettings, Freq) == 0x000008, "Member 'FLfoSettings::Freq' has a wrong offset!");
static_assert(offsetof(FLfoSettings, Depth) == 0x00000C, "Member 'FLfoSettings::Depth' has a wrong offset!");
static_assert(offsetof(FLfoSettings, InitialPhase) == 0x000010, "Member 'FLfoSettings::InitialPhase' has a wrong offset!");
static_assert(offsetof(FLfoSettings, TempoBPM) == 0x000014, "Member 'FLfoSettings::TempoBPM' has a wrong offset!");

// ScriptStruct HarmonixDsp.LfoSettingsArray
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FLfoSettingsArray final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLfoSettings                           Array[0x2];                                        // 0x0010(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLfoSettingsArray) == 0x000008, "Wrong alignment on FLfoSettingsArray");
static_assert(sizeof(FLfoSettingsArray) == 0x000040, "Wrong size on FLfoSettingsArray");
static_assert(offsetof(FLfoSettingsArray, Array) == 0x000010, "Member 'FLfoSettingsArray::Array' has a wrong offset!");

// ScriptStruct HarmonixDsp.ModulatorSettings
// 0x000C (0x000C - 0x0000)
struct FModulatorSettings final
{
public:
	EModulatorTarget                              Target;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Depth;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModulatorSettings) == 0x000004, "Wrong alignment on FModulatorSettings");
static_assert(sizeof(FModulatorSettings) == 0x00000C, "Wrong size on FModulatorSettings");
static_assert(offsetof(FModulatorSettings, Target) == 0x000000, "Member 'FModulatorSettings::Target' has a wrong offset!");
static_assert(offsetof(FModulatorSettings, Range) == 0x000004, "Member 'FModulatorSettings::Range' has a wrong offset!");
static_assert(offsetof(FModulatorSettings, Depth) == 0x000008, "Member 'FModulatorSettings::Depth' has a wrong offset!");

// ScriptStruct HarmonixDsp.ModulatorSettingsArray
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FModulatorSettingsArray final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModulatorSettings                     Array[0x2];                                        // 0x0010(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FModulatorSettingsArray) == 0x000008, "Wrong alignment on FModulatorSettingsArray");
static_assert(sizeof(FModulatorSettingsArray) == 0x000028, "Wrong size on FModulatorSettingsArray");
static_assert(offsetof(FModulatorSettingsArray, Array) == 0x000010, "Member 'FModulatorSettingsArray::Array' has a wrong offset!");

// ScriptStruct HarmonixDsp.FusionPatchSettings
// 0x0448 (0x0448 - 0x0000)
struct FFusionPatchSettings final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeDb;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPannerDetails                         PannerDetails;                                     // 0x0008(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DownPitchBendCents;                                // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpPitchBendCents;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FineTuneCents;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPointOffsetMs;                                // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVoices;                                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyzoneSelectMode                            KeyzoneSelectMode;                                 // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPortamentoSettings                    Portamento;                                        // 0x002C(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBiquadFilterSettings                  Filter;                                            // 0x0034(0x0018)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelaySettings                         Delay;                                             // 0x004C(0x003C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDistortionSettingsV1                  Distortion;                                        // 0x0088(0x0078)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBitCrusherSettings                    BitCrusher;                                        // 0x0100(0x0014)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVocoderSettings                       Vocoder;                                           // 0x0118(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAdsrSettingsArray                     Adsrs;                                             // 0x0168(0x0250)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLfoSettingsArray                      Lfos;                                              // 0x03B8(0x0040)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FModulatorSettingsArray                Randomizers;                                       // 0x03F8(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FModulatorSettingsArray                VelocityModulators;                                // 0x0420(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFusionPatchSettings) == 0x000008, "Wrong alignment on FFusionPatchSettings");
static_assert(sizeof(FFusionPatchSettings) == 0x000448, "Wrong size on FFusionPatchSettings");
static_assert(offsetof(FFusionPatchSettings, Name) == 0x000000, "Member 'FFusionPatchSettings::Name' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, VolumeDb) == 0x000004, "Member 'FFusionPatchSettings::VolumeDb' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, PannerDetails) == 0x000008, "Member 'FFusionPatchSettings::PannerDetails' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, DownPitchBendCents) == 0x000014, "Member 'FFusionPatchSettings::DownPitchBendCents' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, UpPitchBendCents) == 0x000018, "Member 'FFusionPatchSettings::UpPitchBendCents' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, FineTuneCents) == 0x00001C, "Member 'FFusionPatchSettings::FineTuneCents' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, StartPointOffsetMs) == 0x000020, "Member 'FFusionPatchSettings::StartPointOffsetMs' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, MaxVoices) == 0x000024, "Member 'FFusionPatchSettings::MaxVoices' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, KeyzoneSelectMode) == 0x000028, "Member 'FFusionPatchSettings::KeyzoneSelectMode' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, Portamento) == 0x00002C, "Member 'FFusionPatchSettings::Portamento' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, Filter) == 0x000034, "Member 'FFusionPatchSettings::Filter' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, Delay) == 0x00004C, "Member 'FFusionPatchSettings::Delay' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, Distortion) == 0x000088, "Member 'FFusionPatchSettings::Distortion' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, BitCrusher) == 0x000100, "Member 'FFusionPatchSettings::BitCrusher' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, Vocoder) == 0x000118, "Member 'FFusionPatchSettings::Vocoder' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, Adsrs) == 0x000168, "Member 'FFusionPatchSettings::Adsrs' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, Lfos) == 0x0003B8, "Member 'FFusionPatchSettings::Lfos' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, Randomizers) == 0x0003F8, "Member 'FFusionPatchSettings::Randomizers' has a wrong offset!");
static_assert(offsetof(FFusionPatchSettings, VelocityModulators) == 0x000420, "Member 'FFusionPatchSettings::VelocityModulators' has a wrong offset!");

// ScriptStruct HarmonixDsp.FusionPatchData
// 0x0028 (0x0028 - 0x0000)
struct FFusionPatchData final
{
public:
	TArray<struct FKeyzoneSettings>               Keyzones;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FFusionPatchSettings>           Presets;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         CurrentPresetIndex;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFusionPatchData) == 0x000008, "Wrong alignment on FFusionPatchData");
static_assert(sizeof(FFusionPatchData) == 0x000028, "Wrong size on FFusionPatchData");
static_assert(offsetof(FFusionPatchData, Keyzones) == 0x000000, "Member 'FFusionPatchData::Keyzones' has a wrong offset!");
static_assert(offsetof(FFusionPatchData, Presets) == 0x000010, "Member 'FFusionPatchData::Presets' has a wrong offset!");
static_assert(offsetof(FFusionPatchData, CurrentPresetIndex) == 0x000020, "Member 'FFusionPatchData::CurrentPresetIndex' has a wrong offset!");

// ScriptStruct HarmonixDsp.StreamingTrackParams
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FStreamingTrackParams final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStreamingTrackParams) == 0x000008, "Wrong alignment on FStreamingTrackParams");
static_assert(sizeof(FStreamingTrackParams) == 0x000038, "Wrong size on FStreamingTrackParams");

// ScriptStruct HarmonixDsp.PitchShifterNameRedirect
// 0x0008 (0x0008 - 0x0000)
struct FPitchShifterNameRedirect final
{
public:
	class FName                                   OldName;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewName;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPitchShifterNameRedirect) == 0x000004, "Wrong alignment on FPitchShifterNameRedirect");
static_assert(sizeof(FPitchShifterNameRedirect) == 0x000008, "Wrong size on FPitchShifterNameRedirect");
static_assert(offsetof(FPitchShifterNameRedirect, OldName) == 0x000000, "Member 'FPitchShifterNameRedirect::OldName' has a wrong offset!");
static_assert(offsetof(FPitchShifterNameRedirect, NewName) == 0x000004, "Member 'FPitchShifterNameRedirect::NewName' has a wrong offset!");

// ScriptStruct HarmonixDsp.VocoderBandConfig
// 0x000C (0x000C - 0x0000)
struct FVocoderBandConfig final
{
public:
	int32                                         BandCount;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrequencyRatio;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVocoderBandConfig) == 0x000004, "Wrong alignment on FVocoderBandConfig");
static_assert(sizeof(FVocoderBandConfig) == 0x00000C, "Wrong size on FVocoderBandConfig");
static_assert(offsetof(FVocoderBandConfig, BandCount) == 0x000000, "Member 'FVocoderBandConfig::BandCount' has a wrong offset!");
static_assert(offsetof(FVocoderBandConfig, FrequencyRatio) == 0x000004, "Member 'FVocoderBandConfig::FrequencyRatio' has a wrong offset!");
static_assert(offsetof(FVocoderBandConfig, Name) == 0x000008, "Member 'FVocoderBandConfig::Name' has a wrong offset!");

// ScriptStruct HarmonixDsp.HarmonixVuMeterAnalyzerSettings
// 0x0018 (0x0018 - 0x0000)
struct FHarmonixVuMeterAnalyzerSettings final
{
public:
	float                                         AvgWindowMs;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakHoldMs;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixAudioAnalyzerOutputSettings   OutputSettings;                                    // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixVuMeterAnalyzerSettings) == 0x000004, "Wrong alignment on FHarmonixVuMeterAnalyzerSettings");
static_assert(sizeof(FHarmonixVuMeterAnalyzerSettings) == 0x000018, "Wrong size on FHarmonixVuMeterAnalyzerSettings");
static_assert(offsetof(FHarmonixVuMeterAnalyzerSettings, AvgWindowMs) == 0x000000, "Member 'FHarmonixVuMeterAnalyzerSettings::AvgWindowMs' has a wrong offset!");
static_assert(offsetof(FHarmonixVuMeterAnalyzerSettings, PeakHoldMs) == 0x000004, "Member 'FHarmonixVuMeterAnalyzerSettings::PeakHoldMs' has a wrong offset!");
static_assert(offsetof(FHarmonixVuMeterAnalyzerSettings, OutputSettings) == 0x000008, "Member 'FHarmonixVuMeterAnalyzerSettings::OutputSettings' has a wrong offset!");

// ScriptStruct HarmonixDsp.HarmonixVuMeterAnalyzerChannelValues
// 0x0008 (0x0008 - 0x0000)
struct FHarmonixVuMeterAnalyzerChannelValues final
{
public:
	float                                         LevelMeanSquared;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakSquared;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixVuMeterAnalyzerChannelValues) == 0x000004, "Wrong alignment on FHarmonixVuMeterAnalyzerChannelValues");
static_assert(sizeof(FHarmonixVuMeterAnalyzerChannelValues) == 0x000008, "Wrong size on FHarmonixVuMeterAnalyzerChannelValues");
static_assert(offsetof(FHarmonixVuMeterAnalyzerChannelValues, LevelMeanSquared) == 0x000000, "Member 'FHarmonixVuMeterAnalyzerChannelValues::LevelMeanSquared' has a wrong offset!");
static_assert(offsetof(FHarmonixVuMeterAnalyzerChannelValues, PeakSquared) == 0x000004, "Member 'FHarmonixVuMeterAnalyzerChannelValues::PeakSquared' has a wrong offset!");

// ScriptStruct HarmonixDsp.HarmonixVuMeterAnalyzerResults
// 0x0020 (0x0020 - 0x0000)
struct FHarmonixVuMeterAnalyzerResults final
{
public:
	float                                         MonoPeakDecibels;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHarmonixVuMeterAnalyzerChannelValues> ChannelValues;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHarmonixVuMeterAnalyzerChannelValues  MonoValues;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixVuMeterAnalyzerResults) == 0x000008, "Wrong alignment on FHarmonixVuMeterAnalyzerResults");
static_assert(sizeof(FHarmonixVuMeterAnalyzerResults) == 0x000020, "Wrong size on FHarmonixVuMeterAnalyzerResults");
static_assert(offsetof(FHarmonixVuMeterAnalyzerResults, MonoPeakDecibels) == 0x000000, "Member 'FHarmonixVuMeterAnalyzerResults::MonoPeakDecibels' has a wrong offset!");
static_assert(offsetof(FHarmonixVuMeterAnalyzerResults, ChannelValues) == 0x000008, "Member 'FHarmonixVuMeterAnalyzerResults::ChannelValues' has a wrong offset!");
static_assert(offsetof(FHarmonixVuMeterAnalyzerResults, MonoValues) == 0x000018, "Member 'FHarmonixVuMeterAnalyzerResults::MonoValues' has a wrong offset!");

// ScriptStruct HarmonixDsp.HarmonixWaveformAnalyzerSettings
// 0x0010 (0x0010 - 0x0000)
struct FHarmonixWaveformAnalyzerSettings final
{
public:
	int32                                         NumBinsHeld;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBinsPerSecond;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SmoothingDistance;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothingFactor;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixWaveformAnalyzerSettings) == 0x000004, "Wrong alignment on FHarmonixWaveformAnalyzerSettings");
static_assert(sizeof(FHarmonixWaveformAnalyzerSettings) == 0x000010, "Wrong size on FHarmonixWaveformAnalyzerSettings");
static_assert(offsetof(FHarmonixWaveformAnalyzerSettings, NumBinsHeld) == 0x000000, "Member 'FHarmonixWaveformAnalyzerSettings::NumBinsHeld' has a wrong offset!");
static_assert(offsetof(FHarmonixWaveformAnalyzerSettings, NumBinsPerSecond) == 0x000004, "Member 'FHarmonixWaveformAnalyzerSettings::NumBinsPerSecond' has a wrong offset!");
static_assert(offsetof(FHarmonixWaveformAnalyzerSettings, SmoothingDistance) == 0x000008, "Member 'FHarmonixWaveformAnalyzerSettings::SmoothingDistance' has a wrong offset!");
static_assert(offsetof(FHarmonixWaveformAnalyzerSettings, SmoothingFactor) == 0x00000C, "Member 'FHarmonixWaveformAnalyzerSettings::SmoothingFactor' has a wrong offset!");

// ScriptStruct HarmonixDsp.HarmonixWaveformAnalyzerResults
// 0x0020 (0x0020 - 0x0000)
struct FHarmonixWaveformAnalyzerResults final
{
public:
	TArray<float>                                 WaveformRaw;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WaveformSmoothed;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixWaveformAnalyzerResults) == 0x000008, "Wrong alignment on FHarmonixWaveformAnalyzerResults");
static_assert(sizeof(FHarmonixWaveformAnalyzerResults) == 0x000020, "Wrong size on FHarmonixWaveformAnalyzerResults");
static_assert(offsetof(FHarmonixWaveformAnalyzerResults, WaveformRaw) == 0x000000, "Member 'FHarmonixWaveformAnalyzerResults::WaveformRaw' has a wrong offset!");
static_assert(offsetof(FHarmonixWaveformAnalyzerResults, WaveformSmoothed) == 0x000010, "Member 'FHarmonixWaveformAnalyzerResults::WaveformSmoothed' has a wrong offset!");

}

