#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HeistBasesGameplayRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class HeistBasesGameplayRuntime.FortGameStateComponent_HeistDisplayCaseItemManager
// 0x00C8 (0x0168 - 0x00A0)
class UFortGameStateComponent_HeistDisplayCaseItemManager final : public UFortGameStateComponent
{
public:
	TMulticastInlineDelegate<void()>              OnDisplayCaseItemManagerReady;                     // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UFortWorldItemDefinition*>       AllDisplayCaseItems;                               // 0x00B0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0xA8];                                      // 0x00C0(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortWorldItemDefinition* GetDisplayCaseItem(const struct FGameplayTag& DisplayCaseGroupTag);
	void HandlePlaylistDataReady(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);

	bool IsDataReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameStateComponent_HeistDisplayCaseItemManager">();
	}
	static class UFortGameStateComponent_HeistDisplayCaseItemManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameStateComponent_HeistDisplayCaseItemManager>();
	}
};
static_assert(alignof(UFortGameStateComponent_HeistDisplayCaseItemManager) == 0x000008, "Wrong alignment on UFortGameStateComponent_HeistDisplayCaseItemManager");
static_assert(sizeof(UFortGameStateComponent_HeistDisplayCaseItemManager) == 0x000168, "Wrong size on UFortGameStateComponent_HeistDisplayCaseItemManager");
static_assert(offsetof(UFortGameStateComponent_HeistDisplayCaseItemManager, OnDisplayCaseItemManagerReady) == 0x0000A0, "Member 'UFortGameStateComponent_HeistDisplayCaseItemManager::OnDisplayCaseItemManagerReady' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_HeistDisplayCaseItemManager, AllDisplayCaseItems) == 0x0000B0, "Member 'UFortGameStateComponent_HeistDisplayCaseItemManager::AllDisplayCaseItems' has a wrong offset!");

// Class HeistBasesGameplayRuntime.FortHeistDisplayCase
// 0x00D0 (0x0C60 - 0x0B90)
class AFortHeistDisplayCase final : public ABuildingSMActor
{
public:
	uint8                                         Pad_B90[0x8];                                      // 0x0B90(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bReplicateLongInteractionDetails;                  // 0x0B98(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bCanBeMarked : 1;                                  // 0x0B99(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bBlockMarking : 1;                                 // 0x0B99(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_B9A[0x6];                                      // 0x0B9A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarkedActorDisplayInfo                MarkerDisplay;                                     // 0x0BA0(0x00A8)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector                                MarkerPositionOffset;                              // 0x0C48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnServerNotifyEndDisplayCaseLongUse(class AFortPlayerPawn* InteractingPawn, bool bUseCompleted);
	void OnServerNotifyStartDisplayCaseLongUse(class AFortPlayerPawn* InteractingPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeistDisplayCase">();
	}
	static class AFortHeistDisplayCase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortHeistDisplayCase>();
	}
};
static_assert(alignof(AFortHeistDisplayCase) == 0x000008, "Wrong alignment on AFortHeistDisplayCase");
static_assert(sizeof(AFortHeistDisplayCase) == 0x000C60, "Wrong size on AFortHeistDisplayCase");
static_assert(offsetof(AFortHeistDisplayCase, bReplicateLongInteractionDetails) == 0x000B98, "Member 'AFortHeistDisplayCase::bReplicateLongInteractionDetails' has a wrong offset!");
static_assert(offsetof(AFortHeistDisplayCase, MarkerDisplay) == 0x000BA0, "Member 'AFortHeistDisplayCase::MarkerDisplay' has a wrong offset!");
static_assert(offsetof(AFortHeistDisplayCase, MarkerPositionOffset) == 0x000C48, "Member 'AFortHeistDisplayCase::MarkerPositionOffset' has a wrong offset!");

}

