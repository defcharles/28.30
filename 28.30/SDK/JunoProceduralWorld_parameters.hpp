#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JunoProceduralWorld

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JunoProceduralWorld_structs.hpp"
#include "DataRegistry_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JunoGameNative_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.ApplyLandscapeTileSettings
// 0x0010 (0x0010 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings final
{
public:
	class ALandscape*                             LandscapeTile;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODBlendRange;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCompressedHeightmapStorage;                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableRuntimeGrassMapGeneration;                 // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings) == 0x000010, "Wrong size on JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings, LandscapeTile) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings::LandscapeTile' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings, LODBlendRange) == 0x000008, "Member 'JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings::LODBlendRange' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings, bUseCompressedHeightmapStorage) == 0x00000C, "Member 'JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings::bUseCompressedHeightmapStorage' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings, bDisableRuntimeGrassMapGeneration) == 0x00000D, "Member 'JunoProceduralWorldBlueprintLibrary_ApplyLandscapeTileSettings::bDisableRuntimeGrassMapGeneration' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.CalcPOISizeExtent
// 0x0020 (0x0020 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_CalcPOISizeExtent final
{
public:
	EJunoPOISize                                  Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_CalcPOISizeExtent) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_CalcPOISizeExtent");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_CalcPOISizeExtent) == 0x000020, "Wrong size on JunoProceduralWorldBlueprintLibrary_CalcPOISizeExtent");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CalcPOISizeExtent, Size) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_CalcPOISizeExtent::Size' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CalcPOISizeExtent, ReturnValue) == 0x000008, "Member 'JunoProceduralWorldBlueprintLibrary_CalcPOISizeExtent::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.CompareTagSets
// 0x00A8 (0x00A8 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_CompareTagSets final
{
public:
	TSet<class FName>                             Source;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSet<class FName>                             Target;                                            // 0x0050(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EJunoCompareTagSetsResult                     Result;                                            // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_CompareTagSets) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_CompareTagSets");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_CompareTagSets) == 0x0000A8, "Wrong size on JunoProceduralWorldBlueprintLibrary_CompareTagSets");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CompareTagSets, Source) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_CompareTagSets::Source' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CompareTagSets, Target) == 0x000050, "Member 'JunoProceduralWorldBlueprintLibrary_CompareTagSets::Target' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CompareTagSets, Result) == 0x0000A0, "Member 'JunoProceduralWorldBlueprintLibrary_CompareTagSets::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.CreateJunoRandomTableKeysIterator
// 0x0030 (0x0030 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator final
{
public:
	struct FRandomStream                          RandomStream;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FJunoRandomTableKeysIterator           ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator) == 0x000030, "Wrong size on JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator, RandomStream) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator::RandomStream' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator, Keys) == 0x000008, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator::Keys' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator, ReturnValue) == 0x000018, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoRandomTableKeysIterator::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.CreateJunoWPLevelFromActors
// 0x0070 (0x0070 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors final
{
public:
	class FString                                 LevelPackageName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Actors;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  CreatedLevel;                                      // 0x0020(0x0020)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWorldPartition;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GridName;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadingRange;                                      // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldPartitionGridCellSize;                        // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WorldPartitionGridCellOrigin;                      // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHLODLayer*                             DefaultHLODLayer;                                  // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldPartitionServerStreamingMode            ServerStreamingMode;                               // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldPartitionServerStreamingOutMode         ServerStreamingOutMode;                            // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors) == 0x000070, "Wrong size on JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, LevelPackageName) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::LevelPackageName' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, Actors) == 0x000010, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::Actors' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, CreatedLevel) == 0x000020, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::CreatedLevel' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, bUseWorldPartition) == 0x000040, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::bUseWorldPartition' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, GridName) == 0x000044, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::GridName' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, LoadingRange) == 0x000048, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::LoadingRange' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, WorldPartitionGridCellSize) == 0x00004C, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::WorldPartitionGridCellSize' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, WorldPartitionGridCellOrigin) == 0x000050, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::WorldPartitionGridCellOrigin' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, DefaultHLODLayer) == 0x000060, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::DefaultHLODLayer' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, ServerStreamingMode) == 0x000068, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::ServerStreamingMode' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors, ServerStreamingOutMode) == 0x000069, "Member 'JunoProceduralWorldBlueprintLibrary_CreateJunoWPLevelFromActors::ServerStreamingOutMode' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.DeterministicShuffleKeys
// 0x0028 (0x0028 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys final
{
public:
	struct FRandomStream                          RandomSource;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Array;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys) == 0x000028, "Wrong size on JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys, RandomSource) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys::RandomSource' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys, Array) == 0x000008, "Member 'JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys::Array' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys, ReturnValue) == 0x000018, "Member 'JunoProceduralWorldBlueprintLibrary_DeterministicShuffleKeys::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.DisableLandscapeEditLayers
// 0x0008 (0x0008 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_DisableLandscapeEditLayers final
{
public:
	class ALandscape*                             Landscape;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_DisableLandscapeEditLayers) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_DisableLandscapeEditLayers");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_DisableLandscapeEditLayers) == 0x000008, "Wrong size on JunoProceduralWorldBlueprintLibrary_DisableLandscapeEditLayers");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_DisableLandscapeEditLayers, Landscape) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_DisableLandscapeEditLayers::Landscape' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.EnableLandscapeNaniteSkirts
// 0x0010 (0x0010 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts final
{
public:
	class ALandscape*                             Landscape;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkirtDepth;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts) == 0x000010, "Wrong size on JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts, Landscape) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts::Landscape' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts, bEnable) == 0x000008, "Member 'JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts::bEnable' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts, SkirtDepth) == 0x00000C, "Member 'JunoProceduralWorldBlueprintLibrary_EnableLandscapeNaniteSkirts::SkirtDepth' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.FindAllResourcesInFolder
// 0x0028 (0x0028 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder final
{
public:
	class FString                                 Folder;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 AssetClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                OutPaths;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder) == 0x000028, "Wrong size on JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder, Folder) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder::Folder' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder, AssetClass) == 0x000010, "Member 'JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder::AssetClass' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder, OutPaths) == 0x000018, "Member 'JunoProceduralWorldBlueprintLibrary_FindAllResourcesInFolder::OutPaths' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.FindNextMatchingPOIResource
// 0x0200 (0x0200 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource final
{
public:
	struct FJunoRandomTableKeysIterator           Iterator;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UDataTable*                       DataTable;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoPOISize                                  SlotPOISize;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SlotTags;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPCGJunoWorldTilePOI                   FoundPOI;                                          // 0x0038(0x01C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	EJunoFindNextMatchingPOIResourceResult        Result;                                            // 0x01F8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveFromIterator;                               // 0x01F9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource) == 0x000200, "Wrong size on JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource, Iterator) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource::Iterator' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource, DataTable) == 0x000018, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource::DataTable' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource, SlotPOISize) == 0x000020, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource::SlotPOISize' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource, SlotTags) == 0x000028, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource::SlotTags' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource, FoundPOI) == 0x000038, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource::FoundPOI' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource, Result) == 0x0001F8, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource::Result' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource, bRemoveFromIterator) == 0x0001F9, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResource::bRemoveFromIterator' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.FindNextMatchingPOIResourceEx
// 0x01F0 (0x01F0 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx final
{
public:
	struct FJunoRandomTableKeysIterator           Iterator;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UDataTable*                       DataTable;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoPOISize                                  Size;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBiome                                    Biome;                                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGJunoWorldTilePOI                   FoundPOI;                                          // 0x0028(0x01C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	EJunoFindNextMatchingPOIResourceResult        Result;                                            // 0x01E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx) == 0x0001F0, "Wrong size on JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx, Iterator) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx::Iterator' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx, DataTable) == 0x000018, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx::DataTable' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx, Size) == 0x000020, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx::Size' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx, Biome) == 0x000021, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx::Biome' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx, FoundPOI) == 0x000028, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx::FoundPOI' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx, Result) == 0x0001E8, "Member 'JunoProceduralWorldBlueprintLibrary_FindNextMatchingPOIResourceEx::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.GetJunoWorldRegistry
// 0x0010 (0x0010 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_GetJunoWorldRegistry final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoWorldRegistryManager*              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_GetJunoWorldRegistry) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_GetJunoWorldRegistry");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_GetJunoWorldRegistry) == 0x000010, "Wrong size on JunoProceduralWorldBlueprintLibrary_GetJunoWorldRegistry");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_GetJunoWorldRegistry, WorldContextObject) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_GetJunoWorldRegistry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_GetJunoWorldRegistry, ReturnValue) == 0x000008, "Member 'JunoProceduralWorldBlueprintLibrary_GetJunoWorldRegistry::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.JunoCreateLevel
// 0x0068 (0x0068 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_JunoCreateLevel final
{
public:
	struct FJunoCreateLevelParams                 Params_0;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  CreatedLevel;                                      // 0x0040(0x0020)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoCreateLevelResult                        Result;                                            // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_JunoCreateLevel) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_JunoCreateLevel");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_JunoCreateLevel) == 0x000068, "Wrong size on JunoProceduralWorldBlueprintLibrary_JunoCreateLevel");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_JunoCreateLevel, Params_0) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_JunoCreateLevel::Params_0' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_JunoCreateLevel, CreatedLevel) == 0x000040, "Member 'JunoProceduralWorldBlueprintLibrary_JunoCreateLevel::CreatedLevel' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_JunoCreateLevel, Result) == 0x000060, "Member 'JunoProceduralWorldBlueprintLibrary_JunoCreateLevel::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.RunParallelCommandlets
// 0x0030 (0x0030 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets final
{
public:
	class FText                                   DialogueTitle;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         Commands;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MaxProcesses;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets) == 0x000030, "Wrong size on JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets, DialogueTitle) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets::DialogueTitle' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets, Commands) == 0x000018, "Member 'JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets::Commands' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets, MaxProcesses) == 0x000028, "Member 'JunoProceduralWorldBlueprintLibrary_RunParallelCommandlets::MaxProcesses' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.SaveCurrentLevelAs
// 0x0018 (0x0018 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_SaveCurrentLevelAs final
{
public:
	class FString                                 NewPackageName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_SaveCurrentLevelAs) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_SaveCurrentLevelAs");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_SaveCurrentLevelAs) == 0x000018, "Wrong size on JunoProceduralWorldBlueprintLibrary_SaveCurrentLevelAs");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_SaveCurrentLevelAs, NewPackageName) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_SaveCurrentLevelAs::NewPackageName' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_SaveCurrentLevelAs, ReturnValue) == 0x000010, "Member 'JunoProceduralWorldBlueprintLibrary_SaveCurrentLevelAs::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.SetBoxBrushSize
// 0x0020 (0x0020 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_SetBoxBrushSize final
{
public:
	class AActor*                                 Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_SetBoxBrushSize) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_SetBoxBrushSize");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_SetBoxBrushSize) == 0x000020, "Wrong size on JunoProceduralWorldBlueprintLibrary_SetBoxBrushSize");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_SetBoxBrushSize, Volume) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_SetBoxBrushSize::Volume' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_SetBoxBrushSize, Size) == 0x000008, "Member 'JunoProceduralWorldBlueprintLibrary_SetBoxBrushSize::Size' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.SetGridCellSize
// 0x0028 (0x0028 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_SetGridCellSize final
{
public:
	class AActor*                                 WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GridName;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellSize;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadingRange;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Origin;                                            // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_SetGridCellSize) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_SetGridCellSize");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_SetGridCellSize) == 0x000028, "Wrong size on JunoProceduralWorldBlueprintLibrary_SetGridCellSize");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_SetGridCellSize, WorldContextObject) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_SetGridCellSize::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_SetGridCellSize, GridName) == 0x000008, "Member 'JunoProceduralWorldBlueprintLibrary_SetGridCellSize::GridName' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_SetGridCellSize, CellSize) == 0x00000C, "Member 'JunoProceduralWorldBlueprintLibrary_SetGridCellSize::CellSize' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_SetGridCellSize, LoadingRange) == 0x000010, "Member 'JunoProceduralWorldBlueprintLibrary_SetGridCellSize::LoadingRange' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_SetGridCellSize, Origin) == 0x000018, "Member 'JunoProceduralWorldBlueprintLibrary_SetGridCellSize::Origin' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralWorldBlueprintLibrary.UnionActorBounds
// 0x0048 (0x0048 - 0x0000)
struct JunoProceduralWorldBlueprintLibrary_UnionActorBounds final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralWorldBlueprintLibrary_UnionActorBounds) == 0x000008, "Wrong alignment on JunoProceduralWorldBlueprintLibrary_UnionActorBounds");
static_assert(sizeof(JunoProceduralWorldBlueprintLibrary_UnionActorBounds) == 0x000048, "Wrong size on JunoProceduralWorldBlueprintLibrary_UnionActorBounds");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_UnionActorBounds, Actors) == 0x000000, "Member 'JunoProceduralWorldBlueprintLibrary_UnionActorBounds::Actors' has a wrong offset!");
static_assert(offsetof(JunoProceduralWorldBlueprintLibrary_UnionActorBounds, ReturnValue) == 0x000010, "Member 'JunoProceduralWorldBlueprintLibrary_UnionActorBounds::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.GetControlPointLayerWidthRatio
// 0x0010 (0x0010 - 0x0000)
struct LandmassFunctionLibrary_GetControlPointLayerWidthRatio final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassFunctionLibrary_GetControlPointLayerWidthRatio) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_GetControlPointLayerWidthRatio");
static_assert(sizeof(LandmassFunctionLibrary_GetControlPointLayerWidthRatio) == 0x000010, "Wrong size on LandmassFunctionLibrary_GetControlPointLayerWidthRatio");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointLayerWidthRatio, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_GetControlPointLayerWidthRatio::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointLayerWidthRatio, ReturnValue) == 0x000008, "Member 'LandmassFunctionLibrary_GetControlPointLayerWidthRatio::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.GetControlPointLocation
// 0x0020 (0x0020 - 0x0000)
struct LandmassFunctionLibrary_GetControlPointLocation final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassFunctionLibrary_GetControlPointLocation) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_GetControlPointLocation");
static_assert(sizeof(LandmassFunctionLibrary_GetControlPointLocation) == 0x000020, "Wrong size on LandmassFunctionLibrary_GetControlPointLocation");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointLocation, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_GetControlPointLocation::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointLocation, ReturnValue) == 0x000008, "Member 'LandmassFunctionLibrary_GetControlPointLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.GetControlPointRotation
// 0x0020 (0x0020 - 0x0000)
struct LandmassFunctionLibrary_GetControlPointRotation final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassFunctionLibrary_GetControlPointRotation) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_GetControlPointRotation");
static_assert(sizeof(LandmassFunctionLibrary_GetControlPointRotation) == 0x000020, "Wrong size on LandmassFunctionLibrary_GetControlPointRotation");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointRotation, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_GetControlPointRotation::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointRotation, ReturnValue) == 0x000008, "Member 'LandmassFunctionLibrary_GetControlPointRotation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.GetControlPointSideFalloff
// 0x0010 (0x0010 - 0x0000)
struct LandmassFunctionLibrary_GetControlPointSideFalloff final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassFunctionLibrary_GetControlPointSideFalloff) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_GetControlPointSideFalloff");
static_assert(sizeof(LandmassFunctionLibrary_GetControlPointSideFalloff) == 0x000010, "Wrong size on LandmassFunctionLibrary_GetControlPointSideFalloff");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointSideFalloff, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_GetControlPointSideFalloff::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointSideFalloff, ReturnValue) == 0x000008, "Member 'LandmassFunctionLibrary_GetControlPointSideFalloff::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.GetControlPointWidth
// 0x0010 (0x0010 - 0x0000)
struct LandmassFunctionLibrary_GetControlPointWidth final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassFunctionLibrary_GetControlPointWidth) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_GetControlPointWidth");
static_assert(sizeof(LandmassFunctionLibrary_GetControlPointWidth) == 0x000010, "Wrong size on LandmassFunctionLibrary_GetControlPointWidth");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointWidth, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_GetControlPointWidth::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetControlPointWidth, ReturnValue) == 0x000008, "Member 'LandmassFunctionLibrary_GetControlPointWidth::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.GetLandscapeGradientAtLocation
// 0x0030 (0x0030 - 0x0000)
struct LandmassFunctionLibrary_GetLandscapeGradientAtLocation final
{
public:
	class ALandscapeProxy*                        LandscapeProxy;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassFunctionLibrary_GetLandscapeGradientAtLocation) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_GetLandscapeGradientAtLocation");
static_assert(sizeof(LandmassFunctionLibrary_GetLandscapeGradientAtLocation) == 0x000030, "Wrong size on LandmassFunctionLibrary_GetLandscapeGradientAtLocation");
static_assert(offsetof(LandmassFunctionLibrary_GetLandscapeGradientAtLocation, LandscapeProxy) == 0x000000, "Member 'LandmassFunctionLibrary_GetLandscapeGradientAtLocation::LandscapeProxy' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetLandscapeGradientAtLocation, Location) == 0x000008, "Member 'LandmassFunctionLibrary_GetLandscapeGradientAtLocation::Location' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetLandscapeGradientAtLocation, ReturnValue) == 0x000020, "Member 'LandmassFunctionLibrary_GetLandscapeGradientAtLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.GetLandscapeHeightAtLocation
// 0x0028 (0x0028 - 0x0000)
struct LandmassFunctionLibrary_GetLandscapeHeightAtLocation final
{
public:
	class ALandscapeProxy*                        LandscapeProxy;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidLocation;                                  // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassFunctionLibrary_GetLandscapeHeightAtLocation) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_GetLandscapeHeightAtLocation");
static_assert(sizeof(LandmassFunctionLibrary_GetLandscapeHeightAtLocation) == 0x000028, "Wrong size on LandmassFunctionLibrary_GetLandscapeHeightAtLocation");
static_assert(offsetof(LandmassFunctionLibrary_GetLandscapeHeightAtLocation, LandscapeProxy) == 0x000000, "Member 'LandmassFunctionLibrary_GetLandscapeHeightAtLocation::LandscapeProxy' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetLandscapeHeightAtLocation, Location) == 0x000008, "Member 'LandmassFunctionLibrary_GetLandscapeHeightAtLocation::Location' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetLandscapeHeightAtLocation, bIsValidLocation) == 0x000020, "Member 'LandmassFunctionLibrary_GetLandscapeHeightAtLocation::bIsValidLocation' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_GetLandscapeHeightAtLocation, ReturnValue) == 0x000024, "Member 'LandmassFunctionLibrary_GetLandscapeHeightAtLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.LevelInstanceSetAndUpdateWorldAsset
// 0x0028 (0x0028 - 0x0000)
struct LandmassFunctionLibrary_LevelInstanceSetAndUpdateWorldAsset final
{
public:
	class ALevelInstance*                         LevelInstance;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  WorldAsset;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassFunctionLibrary_LevelInstanceSetAndUpdateWorldAsset) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_LevelInstanceSetAndUpdateWorldAsset");
static_assert(sizeof(LandmassFunctionLibrary_LevelInstanceSetAndUpdateWorldAsset) == 0x000028, "Wrong size on LandmassFunctionLibrary_LevelInstanceSetAndUpdateWorldAsset");
static_assert(offsetof(LandmassFunctionLibrary_LevelInstanceSetAndUpdateWorldAsset, LevelInstance) == 0x000000, "Member 'LandmassFunctionLibrary_LevelInstanceSetAndUpdateWorldAsset::LevelInstance' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_LevelInstanceSetAndUpdateWorldAsset, WorldAsset) == 0x000008, "Member 'LandmassFunctionLibrary_LevelInstanceSetAndUpdateWorldAsset::WorldAsset' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.ProjectLocationOnLandscape
// 0x0040 (0x0040 - 0x0000)
struct LandmassFunctionLibrary_ProjectLocationOnLandscape final
{
public:
	class ALandscapeProxy*                        LandscapeProxy;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidLocation;                                  // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassFunctionLibrary_ProjectLocationOnLandscape) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_ProjectLocationOnLandscape");
static_assert(sizeof(LandmassFunctionLibrary_ProjectLocationOnLandscape) == 0x000040, "Wrong size on LandmassFunctionLibrary_ProjectLocationOnLandscape");
static_assert(offsetof(LandmassFunctionLibrary_ProjectLocationOnLandscape, LandscapeProxy) == 0x000000, "Member 'LandmassFunctionLibrary_ProjectLocationOnLandscape::LandscapeProxy' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_ProjectLocationOnLandscape, Location) == 0x000008, "Member 'LandmassFunctionLibrary_ProjectLocationOnLandscape::Location' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_ProjectLocationOnLandscape, bIsValidLocation) == 0x000020, "Member 'LandmassFunctionLibrary_ProjectLocationOnLandscape::bIsValidLocation' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_ProjectLocationOnLandscape, ReturnValue) == 0x000028, "Member 'LandmassFunctionLibrary_ProjectLocationOnLandscape::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.SetControlPointLayerWidthRatio
// 0x0010 (0x0010 - 0x0000)
struct LandmassFunctionLibrary_SetControlPointLayerWidthRatio final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLayerWidthRatio;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassFunctionLibrary_SetControlPointLayerWidthRatio) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_SetControlPointLayerWidthRatio");
static_assert(sizeof(LandmassFunctionLibrary_SetControlPointLayerWidthRatio) == 0x000010, "Wrong size on LandmassFunctionLibrary_SetControlPointLayerWidthRatio");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointLayerWidthRatio, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_SetControlPointLayerWidthRatio::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointLayerWidthRatio, InLayerWidthRatio) == 0x000008, "Member 'LandmassFunctionLibrary_SetControlPointLayerWidthRatio::InLayerWidthRatio' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.SetControlPointLocation
// 0x0020 (0x0020 - 0x0000)
struct LandmassFunctionLibrary_SetControlPointLocation final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassFunctionLibrary_SetControlPointLocation) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_SetControlPointLocation");
static_assert(sizeof(LandmassFunctionLibrary_SetControlPointLocation) == 0x000020, "Wrong size on LandmassFunctionLibrary_SetControlPointLocation");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointLocation, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_SetControlPointLocation::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointLocation, InLocation) == 0x000008, "Member 'LandmassFunctionLibrary_SetControlPointLocation::InLocation' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.SetControlPointRotation
// 0x0020 (0x0020 - 0x0000)
struct LandmassFunctionLibrary_SetControlPointRotation final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassFunctionLibrary_SetControlPointRotation) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_SetControlPointRotation");
static_assert(sizeof(LandmassFunctionLibrary_SetControlPointRotation) == 0x000020, "Wrong size on LandmassFunctionLibrary_SetControlPointRotation");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointRotation, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_SetControlPointRotation::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointRotation, InRotation) == 0x000008, "Member 'LandmassFunctionLibrary_SetControlPointRotation::InRotation' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.SetControlPointSideFalloff
// 0x0010 (0x0010 - 0x0000)
struct LandmassFunctionLibrary_SetControlPointSideFalloff final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSideFalloff;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassFunctionLibrary_SetControlPointSideFalloff) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_SetControlPointSideFalloff");
static_assert(sizeof(LandmassFunctionLibrary_SetControlPointSideFalloff) == 0x000010, "Wrong size on LandmassFunctionLibrary_SetControlPointSideFalloff");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointSideFalloff, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_SetControlPointSideFalloff::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointSideFalloff, InSideFalloff) == 0x000008, "Member 'LandmassFunctionLibrary_SetControlPointSideFalloff::InSideFalloff' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.SetControlPointWidth
// 0x0010 (0x0010 - 0x0000)
struct LandmassFunctionLibrary_SetControlPointWidth final
{
public:
	class ULandscapeSplineControlPoint*           InControlPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWidth;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassFunctionLibrary_SetControlPointWidth) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_SetControlPointWidth");
static_assert(sizeof(LandmassFunctionLibrary_SetControlPointWidth) == 0x000010, "Wrong size on LandmassFunctionLibrary_SetControlPointWidth");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointWidth, InControlPoint) == 0x000000, "Member 'LandmassFunctionLibrary_SetControlPointWidth::InControlPoint' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_SetControlPointWidth, InWidth) == 0x000008, "Member 'LandmassFunctionLibrary_SetControlPointWidth::InWidth' has a wrong offset!");

// Function JunoProceduralWorld.LandmassFunctionLibrary.SetStaticMeshAffectDistanceField
// 0x0010 (0x0010 - 0x0000)
struct LandmassFunctionLibrary_SetStaticMeshAffectDistanceField final
{
public:
	class UStaticMeshComponent*                   Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewValue;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassFunctionLibrary_SetStaticMeshAffectDistanceField) == 0x000008, "Wrong alignment on LandmassFunctionLibrary_SetStaticMeshAffectDistanceField");
static_assert(sizeof(LandmassFunctionLibrary_SetStaticMeshAffectDistanceField) == 0x000010, "Wrong size on LandmassFunctionLibrary_SetStaticMeshAffectDistanceField");
static_assert(offsetof(LandmassFunctionLibrary_SetStaticMeshAffectDistanceField, Mesh) == 0x000000, "Member 'LandmassFunctionLibrary_SetStaticMeshAffectDistanceField::Mesh' has a wrong offset!");
static_assert(offsetof(LandmassFunctionLibrary_SetStaticMeshAffectDistanceField, bNewValue) == 0x000008, "Member 'LandmassFunctionLibrary_SetStaticMeshAffectDistanceField::bNewValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoBridgePOISelectorComponent.BeginBridgeSelection
// 0x0018 (0x0018 - 0x0000)
struct JunoBridgePOISelectorComponent_BeginBridgeSelection final
{
public:
	struct FJunoBridgePOISelectorParams           Param_Params_0;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoBridgePOISelectorComponent_BeginBridgeSelection) == 0x000008, "Wrong alignment on JunoBridgePOISelectorComponent_BeginBridgeSelection");
static_assert(sizeof(JunoBridgePOISelectorComponent_BeginBridgeSelection) == 0x000018, "Wrong size on JunoBridgePOISelectorComponent_BeginBridgeSelection");
static_assert(offsetof(JunoBridgePOISelectorComponent_BeginBridgeSelection, Param_Params_0) == 0x000000, "Member 'JunoBridgePOISelectorComponent_BeginBridgeSelection::Param_Params_0' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorDataMergerInterface.MergeCaveData
// 0x0038 (0x0038 - 0x0000)
struct JunoCaveGeneratorDataMergerInterface_MergeCaveData final
{
public:
	struct FJunoCaveGeneratorData                 CaveData;                                          // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorDataMergerInterface_MergeCaveData) == 0x000008, "Wrong alignment on JunoCaveGeneratorDataMergerInterface_MergeCaveData");
static_assert(sizeof(JunoCaveGeneratorDataMergerInterface_MergeCaveData) == 0x000038, "Wrong size on JunoCaveGeneratorDataMergerInterface_MergeCaveData");
static_assert(offsetof(JunoCaveGeneratorDataMergerInterface_MergeCaveData, CaveData) == 0x000000, "Member 'JunoCaveGeneratorDataMergerInterface_MergeCaveData::CaveData' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.GenerateCaveData
// 0x00E8 (0x00E8 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_GenerateCaveData final
{
public:
	struct FJunoCaveGeneratorData                 ResourceData;                                      // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDataRegistryType                      POIDataRegistry_0;                                 // 0x0038(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRandomStream                          RandomStream;                                      // 0x003C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoCaveSurfaceData                   CaveSurfaceData;                                   // 0x0048(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EJunoBiome                                    Biome;                                             // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   Bounds;                                            // 0x0080(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AJunoTeleporter>            SurfaceTeleporterClass;                            // 0x00B8(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoGeneratedCaveShellData>    Shells;                                            // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoPOIData>                   POIs;                                              // 0x00D0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_GenerateCaveData");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData) == 0x0000E8, "Wrong size on JunoCaveGeneratorPlayspaceComponent_GenerateCaveData");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, ResourceData) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::ResourceData' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, POIDataRegistry_0) == 0x000038, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::POIDataRegistry_0' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, RandomStream) == 0x00003C, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::RandomStream' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, CaveSurfaceData) == 0x000048, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::CaveSurfaceData' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, Biome) == 0x000078, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::Biome' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, Bounds) == 0x000080, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::Bounds' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, SurfaceTeleporterClass) == 0x0000B8, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::SurfaceTeleporterClass' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, Shells) == 0x0000C0, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::Shells' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, POIs) == 0x0000D0, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::POIs' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCaveData, ReturnValue) == 0x0000E0, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCaveData::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.GetMergedCaveDataRegistryData
// 0x0048 (0x0048 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData final
{
public:
	struct FDataRegistryType                      CaveGeneratorDataRegistry;                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoCaveGeneratorData                 ResourceData;                                      // 0x0008(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EJunoGetMergedCaveDataRegistryDataResult      Result;                                            // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData) == 0x000048, "Wrong size on JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData, CaveGeneratorDataRegistry) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData::CaveGeneratorDataRegistry' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData, ResourceData) == 0x000008, "Member 'JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData::ResourceData' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData, Result) == 0x000040, "Member 'JunoCaveGeneratorPlayspaceComponent_GetMergedCaveDataRegistryData::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.GetMergedMultiCaveDataRegistryData
// 0x0050 (0x0050 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData final
{
public:
	struct FDataRegistryType                      ShellRegistry;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryType                      ThemeRegistry;                                     // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryType                      TypeRegistry;                                      // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryType                      RuleRegistry;                                      // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoCaveGeneratorData                 ResourceData;                                      // 0x0010(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EJunoGetMergedCaveDataRegistryDataResult      Result;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData) == 0x000050, "Wrong size on JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData, ShellRegistry) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData::ShellRegistry' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData, ThemeRegistry) == 0x000004, "Member 'JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData::ThemeRegistry' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData, TypeRegistry) == 0x000008, "Member 'JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData::TypeRegistry' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData, RuleRegistry) == 0x00000C, "Member 'JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData::RuleRegistry' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData, ResourceData) == 0x000010, "Member 'JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData::ResourceData' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData, Result) == 0x000048, "Member 'JunoCaveGeneratorPlayspaceComponent_GetMergedMultiCaveDataRegistryData::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.GetRootCaveGeneratorComponent
// 0x0010 (0x0010 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_GetRootCaveGeneratorComponent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoCaveGeneratorPlayspaceComponent*   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_GetRootCaveGeneratorComponent) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_GetRootCaveGeneratorComponent");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_GetRootCaveGeneratorComponent) == 0x000010, "Wrong size on JunoCaveGeneratorPlayspaceComponent_GetRootCaveGeneratorComponent");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetRootCaveGeneratorComponent, WorldContextObject) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_GetRootCaveGeneratorComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GetRootCaveGeneratorComponent, ReturnValue) == 0x000008, "Member 'JunoCaveGeneratorPlayspaceComponent_GetRootCaveGeneratorComponent::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.IsNativeCaveGeneratorEnabled
// 0x0001 (0x0001 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_IsNativeCaveGeneratorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_IsNativeCaveGeneratorEnabled) == 0x000001, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_IsNativeCaveGeneratorEnabled");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_IsNativeCaveGeneratorEnabled) == 0x000001, "Wrong size on JunoCaveGeneratorPlayspaceComponent_IsNativeCaveGeneratorEnabled");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_IsNativeCaveGeneratorEnabled, ReturnValue) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_IsNativeCaveGeneratorEnabled::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.SortCaveGeneratorRules
// 0x0020 (0x0020 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorRules final
{
public:
	TArray<struct FJunoCaveGeneratorRule>         Rules;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FJunoCaveGeneratorRule>         SortedRules;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorRules) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorRules");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorRules) == 0x000020, "Wrong size on JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorRules");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorRules, Rules) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorRules::Rules' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorRules, SortedRules) == 0x000010, "Member 'JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorRules::SortedRules' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.SortCaveGeneratorShells
// 0x0020 (0x0020 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorShells final
{
public:
	TArray<struct FJunoCaveGeneratorShellData>    Shells;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FJunoCaveGeneratorShellData>    SortedShells;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorShells) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorShells");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorShells) == 0x000020, "Wrong size on JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorShells");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorShells, Shells) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorShells::Shells' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorShells, SortedShells) == 0x000010, "Member 'JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorShells::SortedShells' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.SortCaveGeneratorThemes
// 0x0020 (0x0020 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorThemes final
{
public:
	TArray<struct FJunoCaveGeneratorThemeEntry>   Themes;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FJunoCaveGeneratorThemeEntry>   SortedThemes;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorThemes) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorThemes");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorThemes) == 0x000020, "Wrong size on JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorThemes");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorThemes, Themes) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorThemes::Themes' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorThemes, SortedThemes) == 0x000010, "Member 'JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorThemes::SortedThemes' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.SortCaveGeneratorTypes
// 0x0020 (0x0020 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorTypes final
{
public:
	TArray<struct FJunoCaveGeneratorTypeData>     Types;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FJunoCaveGeneratorTypeData>     SortedTypes;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorTypes) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorTypes");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorTypes) == 0x000020, "Wrong size on JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorTypes");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorTypes, Types) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorTypes::Types' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorTypes, SortedTypes) == 0x000010, "Member 'JunoCaveGeneratorPlayspaceComponent_SortCaveGeneratorTypes::SortedTypes' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.GenerateCave
// 0x0088 (0x0088 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_GenerateCave final
{
public:
	class AActor*                                 WorldActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRandomStream                          RandomStream;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoCaveSurfaceData                   CaveSurfaceData;                                   // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EJunoBiome                                    Biome;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   Bounds;                                            // 0x0048(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AJunoTeleporter>            SurfaceTeleporterClass;                            // 0x0080(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_GenerateCave) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_GenerateCave");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_GenerateCave) == 0x000088, "Wrong size on JunoCaveGeneratorPlayspaceComponent_GenerateCave");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCave, WorldActor) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCave::WorldActor' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCave, RandomStream) == 0x000008, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCave::RandomStream' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCave, CaveSurfaceData) == 0x000010, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCave::CaveSurfaceData' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCave, Biome) == 0x000040, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCave::Biome' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCave, Bounds) == 0x000048, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCave::Bounds' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_GenerateCave, SurfaceTeleporterClass) == 0x000080, "Member 'JunoCaveGeneratorPlayspaceComponent_GenerateCave::SurfaceTeleporterClass' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorPlayspaceComponent.SetMergedData
// 0x0038 (0x0038 - 0x0000)
struct JunoCaveGeneratorPlayspaceComponent_SetMergedData final
{
public:
	struct FJunoCaveGeneratorData                 Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorPlayspaceComponent_SetMergedData) == 0x000008, "Wrong alignment on JunoCaveGeneratorPlayspaceComponent_SetMergedData");
static_assert(sizeof(JunoCaveGeneratorPlayspaceComponent_SetMergedData) == 0x000038, "Wrong size on JunoCaveGeneratorPlayspaceComponent_SetMergedData");
static_assert(offsetof(JunoCaveGeneratorPlayspaceComponent_SetMergedData, Data) == 0x000000, "Member 'JunoCaveGeneratorPlayspaceComponent_SetMergedData::Data' has a wrong offset!");

// Function JunoProceduralWorld.JunoLivingWorldStaticPointProvider.AppendFiltersTags
// 0x0020 (0x0020 - 0x0000)
struct JunoLivingWorldStaticPointProvider_AppendFiltersTags final
{
public:
	struct FGameplayTagContainer                  Container;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoLivingWorldStaticPointProvider_AppendFiltersTags) == 0x000008, "Wrong alignment on JunoLivingWorldStaticPointProvider_AppendFiltersTags");
static_assert(sizeof(JunoLivingWorldStaticPointProvider_AppendFiltersTags) == 0x000020, "Wrong size on JunoLivingWorldStaticPointProvider_AppendFiltersTags");
static_assert(offsetof(JunoLivingWorldStaticPointProvider_AppendFiltersTags, Container) == 0x000000, "Member 'JunoLivingWorldStaticPointProvider_AppendFiltersTags::Container' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveLivingWorldStaticPointProvider.GetCaveShellInstanceData
// 0x0080 (0x0080 - 0x0000)
struct JunoCaveLivingWorldStaticPointProvider_GetCaveShellInstanceData final
{
public:
	struct FJunoCaveShellInstanceData             Data;                                              // 0x0000(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	EJunoGetCaveShellInstanceDataResult           Result;                                            // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveLivingWorldStaticPointProvider_GetCaveShellInstanceData) == 0x000008, "Wrong alignment on JunoCaveLivingWorldStaticPointProvider_GetCaveShellInstanceData");
static_assert(sizeof(JunoCaveLivingWorldStaticPointProvider_GetCaveShellInstanceData) == 0x000080, "Wrong size on JunoCaveLivingWorldStaticPointProvider_GetCaveShellInstanceData");
static_assert(offsetof(JunoCaveLivingWorldStaticPointProvider_GetCaveShellInstanceData, Data) == 0x000000, "Member 'JunoCaveLivingWorldStaticPointProvider_GetCaveShellInstanceData::Data' has a wrong offset!");
static_assert(offsetof(JunoCaveLivingWorldStaticPointProvider_GetCaveShellInstanceData, Result) == 0x000078, "Member 'JunoCaveLivingWorldStaticPointProvider_GetCaveShellInstanceData::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoStreamingGameplayVolume.SetBounds
// 0x0030 (0x0030 - 0x0000)
struct JunoStreamingGameplayVolume_SetBounds final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoStreamingGameplayVolume_SetBounds) == 0x000008, "Wrong alignment on JunoStreamingGameplayVolume_SetBounds");
static_assert(sizeof(JunoStreamingGameplayVolume_SetBounds) == 0x000030, "Wrong size on JunoStreamingGameplayVolume_SetBounds");
static_assert(offsetof(JunoStreamingGameplayVolume_SetBounds, Offset) == 0x000000, "Member 'JunoStreamingGameplayVolume_SetBounds::Offset' has a wrong offset!");
static_assert(offsetof(JunoStreamingGameplayVolume_SetBounds, Extent) == 0x000018, "Member 'JunoStreamingGameplayVolume_SetBounds::Extent' has a wrong offset!");

// Function JunoProceduralWorld.JunoTileSubsystem.HandlePossessedPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct JunoTileSubsystem_HandlePossessedPawnChanged final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTileSubsystem_HandlePossessedPawnChanged) == 0x000008, "Wrong alignment on JunoTileSubsystem_HandlePossessedPawnChanged");
static_assert(sizeof(JunoTileSubsystem_HandlePossessedPawnChanged) == 0x000010, "Wrong size on JunoTileSubsystem_HandlePossessedPawnChanged");
static_assert(offsetof(JunoTileSubsystem_HandlePossessedPawnChanged, OldPawn) == 0x000000, "Member 'JunoTileSubsystem_HandlePossessedPawnChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(JunoTileSubsystem_HandlePossessedPawnChanged, Pawn) == 0x000008, "Member 'JunoTileSubsystem_HandlePossessedPawnChanged::Pawn' has a wrong offset!");

// Function JunoProceduralWorld.JunoTileSubsystem.OnCellActivate
// 0x0008 (0x0008 - 0x0000)
struct JunoTileSubsystem_OnCellActivate final
{
public:
	const class UJunoDynamicRuntimeCell*          Cell;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTileSubsystem_OnCellActivate) == 0x000008, "Wrong alignment on JunoTileSubsystem_OnCellActivate");
static_assert(sizeof(JunoTileSubsystem_OnCellActivate) == 0x000008, "Wrong size on JunoTileSubsystem_OnCellActivate");
static_assert(offsetof(JunoTileSubsystem_OnCellActivate, Cell) == 0x000000, "Member 'JunoTileSubsystem_OnCellActivate::Cell' has a wrong offset!");

// Function JunoProceduralWorld.JunoTileSubsystem.OnCellDeactivate
// 0x0008 (0x0008 - 0x0000)
struct JunoTileSubsystem_OnCellDeactivate final
{
public:
	const class UJunoDynamicRuntimeCell*          Cell;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTileSubsystem_OnCellDeactivate) == 0x000008, "Wrong alignment on JunoTileSubsystem_OnCellDeactivate");
static_assert(sizeof(JunoTileSubsystem_OnCellDeactivate) == 0x000008, "Wrong size on JunoTileSubsystem_OnCellDeactivate");
static_assert(offsetof(JunoTileSubsystem_OnCellDeactivate, Cell) == 0x000000, "Member 'JunoTileSubsystem_OnCellDeactivate::Cell' has a wrong offset!");

// Function JunoProceduralWorld.JunoTileSubsystem.OnCellLoad
// 0x0008 (0x0008 - 0x0000)
struct JunoTileSubsystem_OnCellLoad final
{
public:
	const class UJunoDynamicRuntimeCell*          Cell;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTileSubsystem_OnCellLoad) == 0x000008, "Wrong alignment on JunoTileSubsystem_OnCellLoad");
static_assert(sizeof(JunoTileSubsystem_OnCellLoad) == 0x000008, "Wrong size on JunoTileSubsystem_OnCellLoad");
static_assert(offsetof(JunoTileSubsystem_OnCellLoad, Cell) == 0x000000, "Member 'JunoTileSubsystem_OnCellLoad::Cell' has a wrong offset!");

// Function JunoProceduralWorld.JunoTileSubsystem.OnCellUnload
// 0x0008 (0x0008 - 0x0000)
struct JunoTileSubsystem_OnCellUnload final
{
public:
	const class UJunoDynamicRuntimeCell*          Cell;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTileSubsystem_OnCellUnload) == 0x000008, "Wrong alignment on JunoTileSubsystem_OnCellUnload");
static_assert(sizeof(JunoTileSubsystem_OnCellUnload) == 0x000008, "Wrong size on JunoTileSubsystem_OnCellUnload");
static_assert(offsetof(JunoTileSubsystem_OnCellUnload, Cell) == 0x000000, "Member 'JunoTileSubsystem_OnCellUnload::Cell' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.CalculateCaveShellDistance
// 0x0020 (0x0020 - 0x0000)
struct JunoCaveBlueprintLibrary_CalculateCaveShellDistance final
{
public:
	struct FJunoCave                              Cave;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ShellID_A;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShellID_B;                                         // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Distance;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoCalculateCaveDistanceResult              Result;                                            // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_CalculateCaveShellDistance) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_CalculateCaveShellDistance");
static_assert(sizeof(JunoCaveBlueprintLibrary_CalculateCaveShellDistance) == 0x000020, "Wrong size on JunoCaveBlueprintLibrary_CalculateCaveShellDistance");
static_assert(offsetof(JunoCaveBlueprintLibrary_CalculateCaveShellDistance, Cave) == 0x000000, "Member 'JunoCaveBlueprintLibrary_CalculateCaveShellDistance::Cave' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CalculateCaveShellDistance, ShellID_A) == 0x000010, "Member 'JunoCaveBlueprintLibrary_CalculateCaveShellDistance::ShellID_A' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CalculateCaveShellDistance, ShellID_B) == 0x000014, "Member 'JunoCaveBlueprintLibrary_CalculateCaveShellDistance::ShellID_B' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CalculateCaveShellDistance, Distance) == 0x000018, "Member 'JunoCaveBlueprintLibrary_CalculateCaveShellDistance::Distance' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CalculateCaveShellDistance, Result) == 0x00001C, "Member 'JunoCaveBlueprintLibrary_CalculateCaveShellDistance::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.CreateCaveInstanceData
// 0x0030 (0x0030 - 0x0000)
struct JunoCaveBlueprintLibrary_CreateCaveInstanceData final
{
public:
	const class AActor*                           CaveSlotActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveSlotGuid;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoGeneratedCaveShellData>    CaveShellData;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EJunoCreateCaveResult                         Result;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_CreateCaveInstanceData) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_CreateCaveInstanceData");
static_assert(sizeof(JunoCaveBlueprintLibrary_CreateCaveInstanceData) == 0x000030, "Wrong size on JunoCaveBlueprintLibrary_CreateCaveInstanceData");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateCaveInstanceData, CaveSlotActor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_CreateCaveInstanceData::CaveSlotActor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateCaveInstanceData, CaveSlotGuid) == 0x000008, "Member 'JunoCaveBlueprintLibrary_CreateCaveInstanceData::CaveSlotGuid' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateCaveInstanceData, CaveShellData) == 0x000018, "Member 'JunoCaveBlueprintLibrary_CreateCaveInstanceData::CaveShellData' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateCaveInstanceData, Result) == 0x000028, "Member 'JunoCaveBlueprintLibrary_CreateCaveInstanceData::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.CreateCaveInstanceDataForSurfaceData
// 0x0050 (0x0050 - 0x0000)
struct JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData final
{
public:
	const class AActor*                           POISlotActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoCaveSurfaceData                   SurfaceData;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FJunoGeneratedCaveShellData>    CaveShellData;                                     // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EJunoCreateCaveResult                         Result;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData");
static_assert(sizeof(JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData) == 0x000050, "Wrong size on JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData, POISlotActor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData::POISlotActor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData, SurfaceData) == 0x000008, "Member 'JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData::SurfaceData' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData, CaveShellData) == 0x000038, "Member 'JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData::CaveShellData' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData, Result) == 0x000048, "Member 'JunoCaveBlueprintLibrary_CreateCaveInstanceDataForSurfaceData::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.CreateExitsUsedMaskFromArray
// 0x0018 (0x0018 - 0x0000)
struct JunoCaveBlueprintLibrary_CreateExitsUsedMaskFromArray final
{
public:
	TArray<int32>                                 ExitsUsed;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_CreateExitsUsedMaskFromArray) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_CreateExitsUsedMaskFromArray");
static_assert(sizeof(JunoCaveBlueprintLibrary_CreateExitsUsedMaskFromArray) == 0x000018, "Wrong size on JunoCaveBlueprintLibrary_CreateExitsUsedMaskFromArray");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateExitsUsedMaskFromArray, ExitsUsed) == 0x000000, "Member 'JunoCaveBlueprintLibrary_CreateExitsUsedMaskFromArray::ExitsUsed' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_CreateExitsUsedMaskFromArray, ReturnValue) == 0x000010, "Member 'JunoCaveBlueprintLibrary_CreateExitsUsedMaskFromArray::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.ExitsUsedMaskToArray
// 0x0018 (0x0018 - 0x0000)
struct JunoCaveBlueprintLibrary_ExitsUsedMaskToArray final
{
public:
	int32                                         ExitsUsedMask;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveBlueprintLibrary_ExitsUsedMaskToArray) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_ExitsUsedMaskToArray");
static_assert(sizeof(JunoCaveBlueprintLibrary_ExitsUsedMaskToArray) == 0x000018, "Wrong size on JunoCaveBlueprintLibrary_ExitsUsedMaskToArray");
static_assert(offsetof(JunoCaveBlueprintLibrary_ExitsUsedMaskToArray, ExitsUsedMask) == 0x000000, "Member 'JunoCaveBlueprintLibrary_ExitsUsedMaskToArray::ExitsUsedMask' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_ExitsUsedMaskToArray, ReturnValue) == 0x000008, "Member 'JunoCaveBlueprintLibrary_ExitsUsedMaskToArray::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.GetBestCaveShellFromArea
// 0x0068 (0x0068 - 0x0000)
struct JunoCaveBlueprintLibrary_GetBestCaveShellFromArea final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Area;                                              // 0x0008(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoCave                              Cave;                                              // 0x0040(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveGuid;                                          // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShellID;                                           // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoGetBestCaveResult                        Result;                                            // 0x0064(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_GetBestCaveShellFromArea) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_GetBestCaveShellFromArea");
static_assert(sizeof(JunoCaveBlueprintLibrary_GetBestCaveShellFromArea) == 0x000068, "Wrong size on JunoCaveBlueprintLibrary_GetBestCaveShellFromArea");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetBestCaveShellFromArea, WorldContextObject) == 0x000000, "Member 'JunoCaveBlueprintLibrary_GetBestCaveShellFromArea::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetBestCaveShellFromArea, Area) == 0x000008, "Member 'JunoCaveBlueprintLibrary_GetBestCaveShellFromArea::Area' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetBestCaveShellFromArea, Cave) == 0x000040, "Member 'JunoCaveBlueprintLibrary_GetBestCaveShellFromArea::Cave' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetBestCaveShellFromArea, CaveGuid) == 0x000050, "Member 'JunoCaveBlueprintLibrary_GetBestCaveShellFromArea::CaveGuid' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetBestCaveShellFromArea, ShellID) == 0x000060, "Member 'JunoCaveBlueprintLibrary_GetBestCaveShellFromArea::ShellID' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetBestCaveShellFromArea, Result) == 0x000064, "Member 'JunoCaveBlueprintLibrary_GetBestCaveShellFromArea::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.GetCaveDataCollectionsFromRegistry
// 0x0020 (0x0020 - 0x0000)
struct JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry final
{
public:
	struct FDataRegistryType                      DataRegistry;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UJunoCaveDataCollectionBase>> Array;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EJunoGetCaveDataCollectionsFromRegistryResult Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry");
static_assert(sizeof(JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry) == 0x000020, "Wrong size on JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry, DataRegistry) == 0x000000, "Member 'JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry::DataRegistry' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry, Array) == 0x000008, "Member 'JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry::Array' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry, Result) == 0x000018, "Member 'JunoCaveBlueprintLibrary_GetCaveDataCollectionsFromRegistry::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.GetCaveShellInstanceData
// 0x0088 (0x0088 - 0x0000)
struct JunoCaveBlueprintLibrary_GetCaveShellInstanceData final
{
public:
	const class AActor*                           CaveShellChildActor;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShellID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoCaveShellInstanceData             ReturnValue;                                       // 0x0010(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveBlueprintLibrary_GetCaveShellInstanceData) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_GetCaveShellInstanceData");
static_assert(sizeof(JunoCaveBlueprintLibrary_GetCaveShellInstanceData) == 0x000088, "Wrong size on JunoCaveBlueprintLibrary_GetCaveShellInstanceData");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceData, CaveShellChildActor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceData::CaveShellChildActor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceData, ShellID) == 0x000008, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceData::ShellID' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceData, Success) == 0x00000C, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceData::Success' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceData, ReturnValue) == 0x000010, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceData::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.GetCaveShellInstanceDataFromActor
// 0x0090 (0x0090 - 0x0000)
struct JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor final
{
public:
	const class AActor*                           CaveShellChildActor;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShellID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoCaveShellInstanceData             Data;                                              // 0x0010(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	EJunoGetCaveShellInstanceDataResult           Result;                                            // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor");
static_assert(sizeof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor) == 0x000090, "Wrong size on JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor, CaveShellChildActor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor::CaveShellChildActor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor, ShellID) == 0x000008, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor::ShellID' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor, Data) == 0x000010, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor::Data' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor, Result) == 0x000088, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromActor::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.GetCaveShellInstanceDataFromArea
// 0x00C8 (0x00C8 - 0x0000)
struct JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Area;                                              // 0x0008(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ShellID;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoCaveShellInstanceData             Data;                                              // 0x0048(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	EJunoGetCaveShellInstanceDataResult           Result;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea");
static_assert(sizeof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea) == 0x0000C8, "Wrong size on JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea, WorldContextObject) == 0x000000, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea, Area) == 0x000008, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea::Area' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea, ShellID) == 0x000040, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea::ShellID' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea, Data) == 0x000048, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea::Data' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea, Result) == 0x0000C0, "Member 'JunoCaveBlueprintLibrary_GetCaveShellInstanceDataFromArea::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.GetCaveShellVolumeFromArea
// 0x0050 (0x0050 - 0x0000)
struct JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Area;                                              // 0x0008(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ShellID;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AJunoCaveShellGameplayVolume*     ReturnValue;                                       // 0x0048(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea");
static_assert(sizeof(JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea) == 0x000050, "Wrong size on JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea, WorldContextObject) == 0x000000, "Member 'JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea, Area) == 0x000008, "Member 'JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea::Area' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea, ShellID) == 0x000040, "Member 'JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea::ShellID' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea, ReturnValue) == 0x000048, "Member 'JunoCaveBlueprintLibrary_GetCaveShellVolumeFromArea::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.GetCaveSurfaceDataForEntrance
// 0x0050 (0x0050 - 0x0000)
struct JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  EntranceGuid;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoCaveSurfaceData                   CaveSurfaceData;                                   // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         CaveIndex;                                         // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoGetCaveSurfaceDataForEntranceResult      Result;                                            // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWorldTeleporterTransforms;                        // 0x004D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance");
static_assert(sizeof(JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance) == 0x000050, "Wrong size on JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance, Actor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance::Actor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance, EntranceGuid) == 0x000008, "Member 'JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance::EntranceGuid' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance, CaveSurfaceData) == 0x000018, "Member 'JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance::CaveSurfaceData' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance, CaveIndex) == 0x000048, "Member 'JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance::CaveIndex' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance, Result) == 0x00004C, "Member 'JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance::Result' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance, bWorldTeleporterTransforms) == 0x00004D, "Member 'JunoCaveBlueprintLibrary_GetCaveSurfaceDataForEntrance::bWorldTeleporterTransforms' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.IsBitSet
// 0x000C (0x000C - 0x0000)
struct JunoCaveBlueprintLibrary_IsBitSet final
{
public:
	int32                                         BitMask;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bit;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_IsBitSet) == 0x000004, "Wrong alignment on JunoCaveBlueprintLibrary_IsBitSet");
static_assert(sizeof(JunoCaveBlueprintLibrary_IsBitSet) == 0x00000C, "Wrong size on JunoCaveBlueprintLibrary_IsBitSet");
static_assert(offsetof(JunoCaveBlueprintLibrary_IsBitSet, BitMask) == 0x000000, "Member 'JunoCaveBlueprintLibrary_IsBitSet::BitMask' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_IsBitSet, Bit) == 0x000004, "Member 'JunoCaveBlueprintLibrary_IsBitSet::Bit' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_IsBitSet, ReturnValue) == 0x000008, "Member 'JunoCaveBlueprintLibrary_IsBitSet::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.NeedsCaveShellInstanceData
// 0x0020 (0x0020 - 0x0000)
struct JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData final
{
public:
	const class AActor*                           CaveSlotActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveSlotGuid;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData");
static_assert(sizeof(JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData) == 0x000020, "Wrong size on JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData");
static_assert(offsetof(JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData, CaveSlotActor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData::CaveSlotActor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData, CaveSlotGuid) == 0x000008, "Member 'JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData::CaveSlotGuid' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData, ReturnValue) == 0x000018, "Member 'JunoCaveBlueprintLibrary_NeedsCaveShellInstanceData::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.QueryCaveDataStateFromActor
// 0x0068 (0x0068 - 0x0000)
struct JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor final
{
public:
	const class AActor*                           CaveSlotActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveSlotGuid;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoQueryCaveDataResult                      Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   WorldTileBounds;                                   // 0x0020(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoCaveTeleporterLink>        Teleporters;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor");
static_assert(sizeof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor) == 0x000068, "Wrong size on JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor, CaveSlotActor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor::CaveSlotActor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor, CaveSlotGuid) == 0x000008, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor::CaveSlotGuid' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor, Result) == 0x000018, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor::Result' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor, WorldTileBounds) == 0x000020, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor::WorldTileBounds' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor, Teleporters) == 0x000058, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromActor::Teleporters' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.QueryCaveDataStateFromSurfaceData
// 0x0088 (0x0088 - 0x0000)
struct JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData final
{
public:
	const class AActor*                           POISlotActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoCaveSurfaceData                   SurfaceData;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EJunoQueryCaveDataResult                      Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   WorldTileBounds;                                   // 0x0040(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoCaveTeleporterLink>        Teleporters;                                       // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData");
static_assert(sizeof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData) == 0x000088, "Wrong size on JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData, POISlotActor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData::POISlotActor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData, SurfaceData) == 0x000008, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData::SurfaceData' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData, Result) == 0x000038, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData::Result' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData, WorldTileBounds) == 0x000040, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData::WorldTileBounds' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData, Teleporters) == 0x000078, "Member 'JunoCaveBlueprintLibrary_QueryCaveDataStateFromSurfaceData::Teleporters' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.QueryCaveShellInstanceDataState
// 0x0020 (0x0020 - 0x0000)
struct JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState final
{
public:
	const class AActor*                           CaveSlotActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveSlotGuid;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoQueryCaveDataResult                      ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState");
static_assert(sizeof(JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState) == 0x000020, "Wrong size on JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState, CaveSlotActor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState::CaveSlotActor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState, CaveSlotGuid) == 0x000008, "Member 'JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState::CaveSlotGuid' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState, ReturnValue) == 0x000018, "Member 'JunoCaveBlueprintLibrary_QueryCaveShellInstanceDataState::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.QueryCaveSurfaceDataState
// 0x0010 (0x0010 - 0x0000)
struct JunoCaveBlueprintLibrary_QueryCaveSurfaceDataState final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoQueryCaveSurfaceDataStateResult          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoCaveBlueprintLibrary_QueryCaveSurfaceDataState) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_QueryCaveSurfaceDataState");
static_assert(sizeof(JunoCaveBlueprintLibrary_QueryCaveSurfaceDataState) == 0x000010, "Wrong size on JunoCaveBlueprintLibrary_QueryCaveSurfaceDataState");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveSurfaceDataState, Actor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_QueryCaveSurfaceDataState::Actor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_QueryCaveSurfaceDataState, Result) == 0x000008, "Member 'JunoCaveBlueprintLibrary_QueryCaveSurfaceDataState::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveBlueprintLibrary.SetCaveSurfaceData
// 0x0018 (0x0018 - 0x0000)
struct JunoCaveBlueprintLibrary_SetCaveSurfaceData final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoCaveSurfaceData>           CaveSurfaceData;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveBlueprintLibrary_SetCaveSurfaceData) == 0x000008, "Wrong alignment on JunoCaveBlueprintLibrary_SetCaveSurfaceData");
static_assert(sizeof(JunoCaveBlueprintLibrary_SetCaveSurfaceData) == 0x000018, "Wrong size on JunoCaveBlueprintLibrary_SetCaveSurfaceData");
static_assert(offsetof(JunoCaveBlueprintLibrary_SetCaveSurfaceData, Actor) == 0x000000, "Member 'JunoCaveBlueprintLibrary_SetCaveSurfaceData::Actor' has a wrong offset!");
static_assert(offsetof(JunoCaveBlueprintLibrary_SetCaveSurfaceData, CaveSurfaceData) == 0x000008, "Member 'JunoCaveBlueprintLibrary_SetCaveSurfaceData::CaveSurfaceData' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveVolumePlayspaceComponent.NotifyActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct JunoCaveVolumePlayspaceComponent_NotifyActorBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveVolumePlayspaceComponent_NotifyActorBeginOverlap) == 0x000008, "Wrong alignment on JunoCaveVolumePlayspaceComponent_NotifyActorBeginOverlap");
static_assert(sizeof(JunoCaveVolumePlayspaceComponent_NotifyActorBeginOverlap) == 0x000010, "Wrong size on JunoCaveVolumePlayspaceComponent_NotifyActorBeginOverlap");
static_assert(offsetof(JunoCaveVolumePlayspaceComponent_NotifyActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'JunoCaveVolumePlayspaceComponent_NotifyActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(JunoCaveVolumePlayspaceComponent_NotifyActorBeginOverlap, OtherActor) == 0x000008, "Member 'JunoCaveVolumePlayspaceComponent_NotifyActorBeginOverlap::OtherActor' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveVolumePlayspaceComponent.NotifyActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct JunoCaveVolumePlayspaceComponent_NotifyActorEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveVolumePlayspaceComponent_NotifyActorEndOverlap) == 0x000008, "Wrong alignment on JunoCaveVolumePlayspaceComponent_NotifyActorEndOverlap");
static_assert(sizeof(JunoCaveVolumePlayspaceComponent_NotifyActorEndOverlap) == 0x000010, "Wrong size on JunoCaveVolumePlayspaceComponent_NotifyActorEndOverlap");
static_assert(offsetof(JunoCaveVolumePlayspaceComponent_NotifyActorEndOverlap, OverlappedActor) == 0x000000, "Member 'JunoCaveVolumePlayspaceComponent_NotifyActorEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(JunoCaveVolumePlayspaceComponent_NotifyActorEndOverlap, OtherActor) == 0x000008, "Member 'JunoCaveVolumePlayspaceComponent_NotifyActorEndOverlap::OtherActor' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveVolumePlayspaceComponent.OnPlayerEnteringCaveVolume
// 0x0008 (0x0008 - 0x0000)
struct JunoCaveVolumePlayspaceComponent_OnPlayerEnteringCaveVolume final
{
public:
	class AFortPlayerPawnAthena*                  PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveVolumePlayspaceComponent_OnPlayerEnteringCaveVolume) == 0x000008, "Wrong alignment on JunoCaveVolumePlayspaceComponent_OnPlayerEnteringCaveVolume");
static_assert(sizeof(JunoCaveVolumePlayspaceComponent_OnPlayerEnteringCaveVolume) == 0x000008, "Wrong size on JunoCaveVolumePlayspaceComponent_OnPlayerEnteringCaveVolume");
static_assert(offsetof(JunoCaveVolumePlayspaceComponent_OnPlayerEnteringCaveVolume, PlayerPawn) == 0x000000, "Member 'JunoCaveVolumePlayspaceComponent_OnPlayerEnteringCaveVolume::PlayerPawn' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveVolumePlayspaceComponent.OnPlayerLeavingCaveVolume
// 0x0008 (0x0008 - 0x0000)
struct JunoCaveVolumePlayspaceComponent_OnPlayerLeavingCaveVolume final
{
public:
	class AFortPlayerPawnAthena*                  PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveVolumePlayspaceComponent_OnPlayerLeavingCaveVolume) == 0x000008, "Wrong alignment on JunoCaveVolumePlayspaceComponent_OnPlayerLeavingCaveVolume");
static_assert(sizeof(JunoCaveVolumePlayspaceComponent_OnPlayerLeavingCaveVolume) == 0x000008, "Wrong size on JunoCaveVolumePlayspaceComponent_OnPlayerLeavingCaveVolume");
static_assert(offsetof(JunoCaveVolumePlayspaceComponent_OnPlayerLeavingCaveVolume, PlayerPawn) == 0x000000, "Member 'JunoCaveVolumePlayspaceComponent_OnPlayerLeavingCaveVolume::PlayerPawn' has a wrong offset!");

// Function JunoProceduralWorld.JunoCheatManager_ProceduralWorld.JunoGoActor
// 0x0010 (0x0010 - 0x0000)
struct JunoCheatManager_ProceduralWorld_JunoGoActor final
{
public:
	class FString                                 ActorClassName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCheatManager_ProceduralWorld_JunoGoActor) == 0x000008, "Wrong alignment on JunoCheatManager_ProceduralWorld_JunoGoActor");
static_assert(sizeof(JunoCheatManager_ProceduralWorld_JunoGoActor) == 0x000010, "Wrong size on JunoCheatManager_ProceduralWorld_JunoGoActor");
static_assert(offsetof(JunoCheatManager_ProceduralWorld_JunoGoActor, ActorClassName) == 0x000000, "Member 'JunoCheatManager_ProceduralWorld_JunoGoActor::ActorClassName' has a wrong offset!");

// Function JunoProceduralWorld.JunoCheatManager_ProceduralWorld.JunoGoBiome
// 0x0004 (0x0004 - 0x0000)
struct JunoCheatManager_ProceduralWorld_JunoGoBiome final
{
public:
	class FName                                   Biome;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCheatManager_ProceduralWorld_JunoGoBiome) == 0x000004, "Wrong alignment on JunoCheatManager_ProceduralWorld_JunoGoBiome");
static_assert(sizeof(JunoCheatManager_ProceduralWorld_JunoGoBiome) == 0x000004, "Wrong size on JunoCheatManager_ProceduralWorld_JunoGoBiome");
static_assert(offsetof(JunoCheatManager_ProceduralWorld_JunoGoBiome, Biome) == 0x000000, "Member 'JunoCheatManager_ProceduralWorld_JunoGoBiome::Biome' has a wrong offset!");

// Function JunoProceduralWorld.JunoCheatManager_ProceduralWorld.JunoGoNearActor
// 0x0010 (0x0010 - 0x0000)
struct JunoCheatManager_ProceduralWorld_JunoGoNearActor final
{
public:
	class FString                                 ActorClassName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCheatManager_ProceduralWorld_JunoGoNearActor) == 0x000008, "Wrong alignment on JunoCheatManager_ProceduralWorld_JunoGoNearActor");
static_assert(sizeof(JunoCheatManager_ProceduralWorld_JunoGoNearActor) == 0x000010, "Wrong size on JunoCheatManager_ProceduralWorld_JunoGoNearActor");
static_assert(offsetof(JunoCheatManager_ProceduralWorld_JunoGoNearActor, ActorClassName) == 0x000000, "Member 'JunoCheatManager_ProceduralWorld_JunoGoNearActor::ActorClassName' has a wrong offset!");

// Function JunoProceduralWorld.JunoGenerateTileInterface.GenerateTile
// 0x0018 (0x0018 - 0x0000)
struct JunoGenerateTileInterface_GenerateTile final
{
public:
	struct FJunoGenerateTileParams                Params_0;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoGenerateTileInterface_GenerateTile) == 0x000008, "Wrong alignment on JunoGenerateTileInterface_GenerateTile");
static_assert(sizeof(JunoGenerateTileInterface_GenerateTile) == 0x000018, "Wrong size on JunoGenerateTileInterface_GenerateTile");
static_assert(offsetof(JunoGenerateTileInterface_GenerateTile, Params_0) == 0x000000, "Member 'JunoGenerateTileInterface_GenerateTile::Params_0' has a wrong offset!");

// Function JunoProceduralWorld.JunoInstancedActorComponent.HasMassEntity
// 0x0001 (0x0001 - 0x0000)
struct JunoInstancedActorComponent_HasMassEntity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoInstancedActorComponent_HasMassEntity) == 0x000001, "Wrong alignment on JunoInstancedActorComponent_HasMassEntity");
static_assert(sizeof(JunoInstancedActorComponent_HasMassEntity) == 0x000001, "Wrong size on JunoInstancedActorComponent_HasMassEntity");
static_assert(offsetof(JunoInstancedActorComponent_HasMassEntity, ReturnValue) == 0x000000, "Member 'JunoInstancedActorComponent_HasMassEntity::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoInstancedActorData.GetManager
// 0x0008 (0x0008 - 0x0000)
struct JunoInstancedActorData_GetManager final
{
public:
	class AJunoInstancedActorManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoInstancedActorData_GetManager) == 0x000008, "Wrong alignment on JunoInstancedActorData_GetManager");
static_assert(sizeof(JunoInstancedActorData_GetManager) == 0x000008, "Wrong size on JunoInstancedActorData_GetManager");
static_assert(offsetof(JunoInstancedActorData_GetManager, ReturnValue) == 0x000000, "Member 'JunoInstancedActorData_GetManager::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileSelectionBase.ChooseDebugTile
// 0x0118 (0x0118 - 0x0000)
struct JunoWorldTileSelectionBase_ChooseDebugTile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGJunoWorldTile                      OutSelectedTile;                                   // 0x0020(0x00F8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldTileSelectionBase_ChooseDebugTile) == 0x000008, "Wrong alignment on JunoWorldTileSelectionBase_ChooseDebugTile");
static_assert(sizeof(JunoWorldTileSelectionBase_ChooseDebugTile) == 0x000118, "Wrong size on JunoWorldTileSelectionBase_ChooseDebugTile");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseDebugTile, WorldContextObject) == 0x000000, "Member 'JunoWorldTileSelectionBase_ChooseDebugTile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseDebugTile, Position) == 0x000008, "Member 'JunoWorldTileSelectionBase_ChooseDebugTile::Position' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseDebugTile, OutSelectedTile) == 0x000020, "Member 'JunoWorldTileSelectionBase_ChooseDebugTile::OutSelectedTile' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileSelectionBase.ChooseOutOfBoundsTile
// 0x0100 (0x0100 - 0x0000)
struct JunoWorldTileSelectionBase_ChooseOutOfBoundsTile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGJunoWorldTile                      OutSelectedTile;                                   // 0x0008(0x00F8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldTileSelectionBase_ChooseOutOfBoundsTile) == 0x000008, "Wrong alignment on JunoWorldTileSelectionBase_ChooseOutOfBoundsTile");
static_assert(sizeof(JunoWorldTileSelectionBase_ChooseOutOfBoundsTile) == 0x000100, "Wrong size on JunoWorldTileSelectionBase_ChooseOutOfBoundsTile");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseOutOfBoundsTile, WorldContextObject) == 0x000000, "Member 'JunoWorldTileSelectionBase_ChooseOutOfBoundsTile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseOutOfBoundsTile, OutSelectedTile) == 0x000008, "Member 'JunoWorldTileSelectionBase_ChooseOutOfBoundsTile::OutSelectedTile' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileSelectionBase.ChooseStartTile
// 0x0028 (0x0028 - 0x0000)
struct JunoWorldTileSelectionBase_ChooseStartTile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartTileLocation;                                 // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoWorldTileSelectionBase_ChooseStartTile) == 0x000008, "Wrong alignment on JunoWorldTileSelectionBase_ChooseStartTile");
static_assert(sizeof(JunoWorldTileSelectionBase_ChooseStartTile) == 0x000028, "Wrong size on JunoWorldTileSelectionBase_ChooseStartTile");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseStartTile, WorldContextObject) == 0x000000, "Member 'JunoWorldTileSelectionBase_ChooseStartTile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseStartTile, StartTileLocation) == 0x000008, "Member 'JunoWorldTileSelectionBase_ChooseStartTile::StartTileLocation' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseStartTile, ReturnValue) == 0x000020, "Member 'JunoWorldTileSelectionBase_ChooseStartTile::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileSelectionBase.ChooseTile
// 0x0118 (0x0118 - 0x0000)
struct JunoWorldTileSelectionBase_ChooseTile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGJunoWorldTile                      OutSelectedTile;                                   // 0x0020(0x00F8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldTileSelectionBase_ChooseTile) == 0x000008, "Wrong alignment on JunoWorldTileSelectionBase_ChooseTile");
static_assert(sizeof(JunoWorldTileSelectionBase_ChooseTile) == 0x000118, "Wrong size on JunoWorldTileSelectionBase_ChooseTile");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseTile, WorldContextObject) == 0x000000, "Member 'JunoWorldTileSelectionBase_ChooseTile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseTile, Position) == 0x000008, "Member 'JunoWorldTileSelectionBase_ChooseTile::Position' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_ChooseTile, OutSelectedTile) == 0x000020, "Member 'JunoWorldTileSelectionBase_ChooseTile::OutSelectedTile' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileSelectionBase.GetDebugLevelLocation
// 0x0020 (0x0020 - 0x0000)
struct JunoWorldTileSelectionBase_GetDebugLevelLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldTileSelectionBase_GetDebugLevelLocation) == 0x000008, "Wrong alignment on JunoWorldTileSelectionBase_GetDebugLevelLocation");
static_assert(sizeof(JunoWorldTileSelectionBase_GetDebugLevelLocation) == 0x000020, "Wrong size on JunoWorldTileSelectionBase_GetDebugLevelLocation");
static_assert(offsetof(JunoWorldTileSelectionBase_GetDebugLevelLocation, WorldContextObject) == 0x000000, "Member 'JunoWorldTileSelectionBase_GetDebugLevelLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_GetDebugLevelLocation, ReturnValue) == 0x000008, "Member 'JunoWorldTileSelectionBase_GetDebugLevelLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileSelectionBase.Setup
// 0x0008 (0x0008 - 0x0000)
struct JunoWorldTileSelectionBase_Setup final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldTileSelectionBase_Setup) == 0x000008, "Wrong alignment on JunoWorldTileSelectionBase_Setup");
static_assert(sizeof(JunoWorldTileSelectionBase_Setup) == 0x000008, "Wrong size on JunoWorldTileSelectionBase_Setup");
static_assert(offsetof(JunoWorldTileSelectionBase_Setup, WorldContextObject) == 0x000000, "Member 'JunoWorldTileSelectionBase_Setup::WorldContextObject' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileSelectionBase.UpdateTile
// 0x0200 (0x0200 - 0x0000)
struct JunoWorldTileSelectionBase_UpdateTile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGJunoWorldTile                      CurrentTile;                                       // 0x0008(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPCGJunoWorldTile                      OutUpdatedTile;                                    // 0x0100(0x00F8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoWorldTileSelectionBase_UpdateTile) == 0x000008, "Wrong alignment on JunoWorldTileSelectionBase_UpdateTile");
static_assert(sizeof(JunoWorldTileSelectionBase_UpdateTile) == 0x000200, "Wrong size on JunoWorldTileSelectionBase_UpdateTile");
static_assert(offsetof(JunoWorldTileSelectionBase_UpdateTile, WorldContextObject) == 0x000000, "Member 'JunoWorldTileSelectionBase_UpdateTile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_UpdateTile, CurrentTile) == 0x000008, "Member 'JunoWorldTileSelectionBase_UpdateTile::CurrentTile' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_UpdateTile, OutUpdatedTile) == 0x000100, "Member 'JunoWorldTileSelectionBase_UpdateTile::OutUpdatedTile' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_UpdateTile, ReturnValue) == 0x0001F8, "Member 'JunoWorldTileSelectionBase_UpdateTile::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileSelectionBase.UseReservedArea
// 0x0078 (0x0078 - 0x0000)
struct JunoWorldTileSelectionBase_UseReservedArea final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaName;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FBox2D>              AreaTiles;                                         // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPCGJunoWorldTile>              OutNewTiles;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoWorldTileSelectionBase_UseReservedArea) == 0x000008, "Wrong alignment on JunoWorldTileSelectionBase_UseReservedArea");
static_assert(sizeof(JunoWorldTileSelectionBase_UseReservedArea) == 0x000078, "Wrong size on JunoWorldTileSelectionBase_UseReservedArea");
static_assert(offsetof(JunoWorldTileSelectionBase_UseReservedArea, WorldContextObject) == 0x000000, "Member 'JunoWorldTileSelectionBase_UseReservedArea::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_UseReservedArea, AreaName) == 0x000008, "Member 'JunoWorldTileSelectionBase_UseReservedArea::AreaName' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_UseReservedArea, AreaTiles) == 0x000010, "Member 'JunoWorldTileSelectionBase_UseReservedArea::AreaTiles' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_UseReservedArea, OutNewTiles) == 0x000060, "Member 'JunoWorldTileSelectionBase_UseReservedArea::OutNewTiles' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionBase_UseReservedArea, ReturnValue) == 0x000070, "Member 'JunoWorldTileSelectionBase_UseReservedArea::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoLifecycleComponent.OnRep_CurrentPhaseIndex
// 0x0001 (0x0001 - 0x0000)
struct JunoLifecycleComponent_OnRep_CurrentPhaseIndex final
{
public:
	uint8                                         PreviousLifecyclePhaseIndex;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoLifecycleComponent_OnRep_CurrentPhaseIndex) == 0x000001, "Wrong alignment on JunoLifecycleComponent_OnRep_CurrentPhaseIndex");
static_assert(sizeof(JunoLifecycleComponent_OnRep_CurrentPhaseIndex) == 0x000001, "Wrong size on JunoLifecycleComponent_OnRep_CurrentPhaseIndex");
static_assert(offsetof(JunoLifecycleComponent_OnRep_CurrentPhaseIndex, PreviousLifecyclePhaseIndex) == 0x000000, "Member 'JunoLifecycleComponent_OnRep_CurrentPhaseIndex::PreviousLifecyclePhaseIndex' has a wrong offset!");

// Function JunoProceduralWorld.JunoLifecycleComponent.SetCurrentPhaseByIndex
// 0x000C (0x000C - 0x0000)
struct JunoLifecycleComponent_SetCurrentPhaseByIndex final
{
public:
	uint8                                         NewCurrentPhaseIndex;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeElapsedInNewPhase;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateMass;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoLifecycleComponent_SetCurrentPhaseByIndex) == 0x000004, "Wrong alignment on JunoLifecycleComponent_SetCurrentPhaseByIndex");
static_assert(sizeof(JunoLifecycleComponent_SetCurrentPhaseByIndex) == 0x00000C, "Wrong size on JunoLifecycleComponent_SetCurrentPhaseByIndex");
static_assert(offsetof(JunoLifecycleComponent_SetCurrentPhaseByIndex, NewCurrentPhaseIndex) == 0x000000, "Member 'JunoLifecycleComponent_SetCurrentPhaseByIndex::NewCurrentPhaseIndex' has a wrong offset!");
static_assert(offsetof(JunoLifecycleComponent_SetCurrentPhaseByIndex, TimeElapsedInNewPhase) == 0x000004, "Member 'JunoLifecycleComponent_SetCurrentPhaseByIndex::TimeElapsedInNewPhase' has a wrong offset!");
static_assert(offsetof(JunoLifecycleComponent_SetCurrentPhaseByIndex, bUpdateMass) == 0x000008, "Member 'JunoLifecycleComponent_SetCurrentPhaseByIndex::bUpdateMass' has a wrong offset!");
static_assert(offsetof(JunoLifecycleComponent_SetCurrentPhaseByIndex, ReturnValue) == 0x000009, "Member 'JunoLifecycleComponent_SetCurrentPhaseByIndex::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoLifecycleComponent.BP_GetCurrentPhase
// 0x00B8 (0x00B8 - 0x0000)
struct JunoLifecycleComponent_BP_GetCurrentPhase final
{
public:
	struct FJunoLifecyclePhase                    OutCurrentPhase;                                   // 0x0000(0x00B0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoLifecycleComponent_BP_GetCurrentPhase) == 0x000008, "Wrong alignment on JunoLifecycleComponent_BP_GetCurrentPhase");
static_assert(sizeof(JunoLifecycleComponent_BP_GetCurrentPhase) == 0x0000B8, "Wrong size on JunoLifecycleComponent_BP_GetCurrentPhase");
static_assert(offsetof(JunoLifecycleComponent_BP_GetCurrentPhase, OutCurrentPhase) == 0x000000, "Member 'JunoLifecycleComponent_BP_GetCurrentPhase::OutCurrentPhase' has a wrong offset!");
static_assert(offsetof(JunoLifecycleComponent_BP_GetCurrentPhase, ReturnValue) == 0x0000B0, "Member 'JunoLifecycleComponent_BP_GetCurrentPhase::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoLifecycleComponent.GetCurrentPhaseIndex
// 0x0001 (0x0001 - 0x0000)
struct JunoLifecycleComponent_GetCurrentPhaseIndex final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoLifecycleComponent_GetCurrentPhaseIndex) == 0x000001, "Wrong alignment on JunoLifecycleComponent_GetCurrentPhaseIndex");
static_assert(sizeof(JunoLifecycleComponent_GetCurrentPhaseIndex) == 0x000001, "Wrong size on JunoLifecycleComponent_GetCurrentPhaseIndex");
static_assert(offsetof(JunoLifecycleComponent_GetCurrentPhaseIndex, ReturnValue) == 0x000000, "Member 'JunoLifecycleComponent_GetCurrentPhaseIndex::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoLifecycleComponent.GetCurrentPhaseTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct JunoLifecycleComponent_GetCurrentPhaseTimeElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoLifecycleComponent_GetCurrentPhaseTimeElapsed) == 0x000004, "Wrong alignment on JunoLifecycleComponent_GetCurrentPhaseTimeElapsed");
static_assert(sizeof(JunoLifecycleComponent_GetCurrentPhaseTimeElapsed) == 0x000004, "Wrong size on JunoLifecycleComponent_GetCurrentPhaseTimeElapsed");
static_assert(offsetof(JunoLifecycleComponent_GetCurrentPhaseTimeElapsed, ReturnValue) == 0x000000, "Member 'JunoLifecycleComponent_GetCurrentPhaseTimeElapsed::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoLifecycleComponent.HasCompletedLifecycle
// 0x0001 (0x0001 - 0x0000)
struct JunoLifecycleComponent_HasCompletedLifecycle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoLifecycleComponent_HasCompletedLifecycle) == 0x000001, "Wrong alignment on JunoLifecycleComponent_HasCompletedLifecycle");
static_assert(sizeof(JunoLifecycleComponent_HasCompletedLifecycle) == 0x000001, "Wrong size on JunoLifecycleComponent_HasCompletedLifecycle");
static_assert(offsetof(JunoLifecycleComponent_HasCompletedLifecycle, ReturnValue) == 0x000000, "Member 'JunoLifecycleComponent_HasCompletedLifecycle::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetTileForLocation
// 0x0028 (0x0028 - 0x0000)
struct JunoWorldRegistryManager_GetTileForLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJunoWorldTile*                         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldRegistryManager_GetTileForLocation) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetTileForLocation");
static_assert(sizeof(JunoWorldRegistryManager_GetTileForLocation) == 0x000028, "Wrong size on JunoWorldRegistryManager_GetTileForLocation");
static_assert(offsetof(JunoWorldRegistryManager_GetTileForLocation, WorldContextObject) == 0x000000, "Member 'JunoWorldRegistryManager_GetTileForLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetTileForLocation, WorldLocation) == 0x000008, "Member 'JunoWorldRegistryManager_GetTileForLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetTileForLocation, ReturnValue) == 0x000020, "Member 'JunoWorldRegistryManager_GetTileForLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetClosestEntryUsingTagQuery
// 0x00A8 (0x00A8 - 0x0000)
struct JunoWorldRegistryManager_GetClosestEntryUsingTagQuery final
{
public:
	EJunoWorldRegistryType                        EntryType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                QueryLocation;                                     // 0x0050(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoWorldRegistryEntry                ReturnValue;                                       // 0x0068(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldRegistryManager_GetClosestEntryUsingTagQuery) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetClosestEntryUsingTagQuery");
static_assert(sizeof(JunoWorldRegistryManager_GetClosestEntryUsingTagQuery) == 0x0000A8, "Wrong size on JunoWorldRegistryManager_GetClosestEntryUsingTagQuery");
static_assert(offsetof(JunoWorldRegistryManager_GetClosestEntryUsingTagQuery, EntryType) == 0x000000, "Member 'JunoWorldRegistryManager_GetClosestEntryUsingTagQuery::EntryType' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetClosestEntryUsingTagQuery, TagQuery) == 0x000008, "Member 'JunoWorldRegistryManager_GetClosestEntryUsingTagQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetClosestEntryUsingTagQuery, QueryLocation) == 0x000050, "Member 'JunoWorldRegistryManager_GetClosestEntryUsingTagQuery::QueryLocation' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetClosestEntryUsingTagQuery, ReturnValue) == 0x000068, "Member 'JunoWorldRegistryManager_GetClosestEntryUsingTagQuery::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetBiomeAtLocation
// 0x0040 (0x0040 - 0x0000)
struct JunoWorldRegistryManager_GetBiomeAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoBiomeInfoQueryResult              OutResult;                                         // 0x0018(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldRegistryManager_GetBiomeAtLocation) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetBiomeAtLocation");
static_assert(sizeof(JunoWorldRegistryManager_GetBiomeAtLocation) == 0x000040, "Wrong size on JunoWorldRegistryManager_GetBiomeAtLocation");
static_assert(offsetof(JunoWorldRegistryManager_GetBiomeAtLocation, Location) == 0x000000, "Member 'JunoWorldRegistryManager_GetBiomeAtLocation::Location' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetBiomeAtLocation, OutResult) == 0x000018, "Member 'JunoWorldRegistryManager_GetBiomeAtLocation::OutResult' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetNormalizedTileLocation
// 0x0040 (0x0040 - 0x0000)
struct JunoWorldRegistryManager_GetNormalizedTileLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutResult;                                         // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoWorldRegistryManager_GetNormalizedTileLocation) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetNormalizedTileLocation");
static_assert(sizeof(JunoWorldRegistryManager_GetNormalizedTileLocation) == 0x000040, "Wrong size on JunoWorldRegistryManager_GetNormalizedTileLocation");
static_assert(offsetof(JunoWorldRegistryManager_GetNormalizedTileLocation, WorldContextObject) == 0x000000, "Member 'JunoWorldRegistryManager_GetNormalizedTileLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetNormalizedTileLocation, WorldLocation) == 0x000008, "Member 'JunoWorldRegistryManager_GetNormalizedTileLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetNormalizedTileLocation, OutResult) == 0x000020, "Member 'JunoWorldRegistryManager_GetNormalizedTileLocation::OutResult' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetNormalizedTileLocation, ReturnValue) == 0x000038, "Member 'JunoWorldRegistryManager_GetNormalizedTileLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetTileMiniMapTexture
// 0x0040 (0x0040 - 0x0000)
struct JunoWorldRegistryManager_GetTileMiniMapTexture final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldRegistryManager_GetTileMiniMapTexture) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetTileMiniMapTexture");
static_assert(sizeof(JunoWorldRegistryManager_GetTileMiniMapTexture) == 0x000040, "Wrong size on JunoWorldRegistryManager_GetTileMiniMapTexture");
static_assert(offsetof(JunoWorldRegistryManager_GetTileMiniMapTexture, WorldContextObject) == 0x000000, "Member 'JunoWorldRegistryManager_GetTileMiniMapTexture::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetTileMiniMapTexture, WorldLocation) == 0x000008, "Member 'JunoWorldRegistryManager_GetTileMiniMapTexture::WorldLocation' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetTileMiniMapTexture, ReturnValue) == 0x000020, "Member 'JunoWorldRegistryManager_GetTileMiniMapTexture::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetWaterDirectionInformationAtLocation
// 0x0030 (0x0030 - 0x0000)
struct JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeNearMisses;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutInWater;                                        // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoWaterLocationResult>       OutResult;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation");
static_assert(sizeof(JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation) == 0x000030, "Wrong size on JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation");
static_assert(offsetof(JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation, Location) == 0x000000, "Member 'JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation::Location' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation, bIncludeNearMisses) == 0x000018, "Member 'JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation::bIncludeNearMisses' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation, OutInWater) == 0x000019, "Member 'JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation::OutInWater' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation, OutResult) == 0x000020, "Member 'JunoWorldRegistryManager_GetWaterDirectionInformationAtLocation::OutResult' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetWaterInformationInDirection
// 0x0080 (0x0080 - 0x0000)
struct JunoWorldRegistryManager_GetWaterInformationInDirection final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoWaterLocationResult               OutResult;                                         // 0x0030(0x0050)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldRegistryManager_GetWaterInformationInDirection) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetWaterInformationInDirection");
static_assert(sizeof(JunoWorldRegistryManager_GetWaterInformationInDirection) == 0x000080, "Wrong size on JunoWorldRegistryManager_GetWaterInformationInDirection");
static_assert(offsetof(JunoWorldRegistryManager_GetWaterInformationInDirection, Location) == 0x000000, "Member 'JunoWorldRegistryManager_GetWaterInformationInDirection::Location' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetWaterInformationInDirection, Direction) == 0x000018, "Member 'JunoWorldRegistryManager_GetWaterInformationInDirection::Direction' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetWaterInformationInDirection, OutResult) == 0x000030, "Member 'JunoWorldRegistryManager_GetWaterInformationInDirection::OutResult' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetWorldAnalyticsInfo
// 0x0048 (0x0048 - 0x0000)
struct JunoWorldRegistryManager_GetWorldAnalyticsInfo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoWorldAnalyticsInfoResult          WorldAnalyticsInfo;                                // 0x0020(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldRegistryManager_GetWorldAnalyticsInfo) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetWorldAnalyticsInfo");
static_assert(sizeof(JunoWorldRegistryManager_GetWorldAnalyticsInfo) == 0x000048, "Wrong size on JunoWorldRegistryManager_GetWorldAnalyticsInfo");
static_assert(offsetof(JunoWorldRegistryManager_GetWorldAnalyticsInfo, WorldContextObject) == 0x000000, "Member 'JunoWorldRegistryManager_GetWorldAnalyticsInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetWorldAnalyticsInfo, WorldLocation) == 0x000008, "Member 'JunoWorldRegistryManager_GetWorldAnalyticsInfo::WorldLocation' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetWorldAnalyticsInfo, WorldAnalyticsInfo) == 0x000020, "Member 'JunoWorldRegistryManager_GetWorldAnalyticsInfo::WorldAnalyticsInfo' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetWorldBounds
// 0x0038 (0x0038 - 0x0000)
struct JunoWorldRegistryManager_GetWorldBounds final
{
public:
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldRegistryManager_GetWorldBounds) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetWorldBounds");
static_assert(sizeof(JunoWorldRegistryManager_GetWorldBounds) == 0x000038, "Wrong size on JunoWorldRegistryManager_GetWorldBounds");
static_assert(offsetof(JunoWorldRegistryManager_GetWorldBounds, ReturnValue) == 0x000000, "Member 'JunoWorldRegistryManager_GetWorldBounds::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldRegistryManager.GetWorldDebugInfoText
// 0x0068 (0x0068 - 0x0000)
struct JunoWorldRegistryManager_GetWorldDebugInfoText final
{
public:
	const class AFortPlayerPawn*                  PlayerPawn;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoDebugWorldInfoResult              WorldDebugInfo;                                    // 0x0008(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldRegistryManager_GetWorldDebugInfoText) == 0x000008, "Wrong alignment on JunoWorldRegistryManager_GetWorldDebugInfoText");
static_assert(sizeof(JunoWorldRegistryManager_GetWorldDebugInfoText) == 0x000068, "Wrong size on JunoWorldRegistryManager_GetWorldDebugInfoText");
static_assert(offsetof(JunoWorldRegistryManager_GetWorldDebugInfoText, PlayerPawn) == 0x000000, "Member 'JunoWorldRegistryManager_GetWorldDebugInfoText::PlayerPawn' has a wrong offset!");
static_assert(offsetof(JunoWorldRegistryManager_GetWorldDebugInfoText, WorldDebugInfo) == 0x000008, "Member 'JunoWorldRegistryManager_GetWorldDebugInfoText::WorldDebugInfo' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.FixupWorldLandscapeWeightmapLayers
// 0x0008 (0x0008 - 0x0000)
struct JunoTerrainGenerationSystem_FixupWorldLandscapeWeightmapLayers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_FixupWorldLandscapeWeightmapLayers) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_FixupWorldLandscapeWeightmapLayers");
static_assert(sizeof(JunoTerrainGenerationSystem_FixupWorldLandscapeWeightmapLayers) == 0x000008, "Wrong size on JunoTerrainGenerationSystem_FixupWorldLandscapeWeightmapLayers");
static_assert(offsetof(JunoTerrainGenerationSystem_FixupWorldLandscapeWeightmapLayers, WorldContextObject) == 0x000000, "Member 'JunoTerrainGenerationSystem_FixupWorldLandscapeWeightmapLayers::WorldContextObject' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.OnCellActivate
// 0x0008 (0x0008 - 0x0000)
struct JunoTerrainGenerationSystem_OnCellActivate final
{
public:
	const class UJunoDynamicRuntimeCell*          Cell;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_OnCellActivate) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_OnCellActivate");
static_assert(sizeof(JunoTerrainGenerationSystem_OnCellActivate) == 0x000008, "Wrong size on JunoTerrainGenerationSystem_OnCellActivate");
static_assert(offsetof(JunoTerrainGenerationSystem_OnCellActivate, Cell) == 0x000000, "Member 'JunoTerrainGenerationSystem_OnCellActivate::Cell' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.OnCellDeactivate
// 0x0008 (0x0008 - 0x0000)
struct JunoTerrainGenerationSystem_OnCellDeactivate final
{
public:
	const class UJunoDynamicRuntimeCell*          Cell;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_OnCellDeactivate) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_OnCellDeactivate");
static_assert(sizeof(JunoTerrainGenerationSystem_OnCellDeactivate) == 0x000008, "Wrong size on JunoTerrainGenerationSystem_OnCellDeactivate");
static_assert(offsetof(JunoTerrainGenerationSystem_OnCellDeactivate, Cell) == 0x000000, "Member 'JunoTerrainGenerationSystem_OnCellDeactivate::Cell' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.OnCellLoad
// 0x0008 (0x0008 - 0x0000)
struct JunoTerrainGenerationSystem_OnCellLoad final
{
public:
	const class UJunoDynamicRuntimeCell*          Cell;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_OnCellLoad) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_OnCellLoad");
static_assert(sizeof(JunoTerrainGenerationSystem_OnCellLoad) == 0x000008, "Wrong size on JunoTerrainGenerationSystem_OnCellLoad");
static_assert(offsetof(JunoTerrainGenerationSystem_OnCellLoad, Cell) == 0x000000, "Member 'JunoTerrainGenerationSystem_OnCellLoad::Cell' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.OnCellUnload
// 0x0008 (0x0008 - 0x0000)
struct JunoTerrainGenerationSystem_OnCellUnload final
{
public:
	const class UJunoDynamicRuntimeCell*          Cell;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_OnCellUnload) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_OnCellUnload");
static_assert(sizeof(JunoTerrainGenerationSystem_OnCellUnload) == 0x000008, "Wrong size on JunoTerrainGenerationSystem_OnCellUnload");
static_assert(offsetof(JunoTerrainGenerationSystem_OnCellUnload, Cell) == 0x000000, "Member 'JunoTerrainGenerationSystem_OnCellUnload::Cell' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.OnProxyDestroyed
// 0x0008 (0x0008 - 0x0000)
struct JunoTerrainGenerationSystem_OnProxyDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_OnProxyDestroyed) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_OnProxyDestroyed");
static_assert(sizeof(JunoTerrainGenerationSystem_OnProxyDestroyed) == 0x000008, "Wrong size on JunoTerrainGenerationSystem_OnProxyDestroyed");
static_assert(offsetof(JunoTerrainGenerationSystem_OnProxyDestroyed, DestroyedActor) == 0x000000, "Member 'JunoTerrainGenerationSystem_OnProxyDestroyed::DestroyedActor' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.GetInterpolatedOceanInformation
// 0x0030 (0x0030 - 0x0000)
struct JunoTerrainGenerationSystem_GetInterpolatedOceanInformation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutLocationIsOcean;                                // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoTerrainWaterInformation>   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_GetInterpolatedOceanInformation) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_GetInterpolatedOceanInformation");
static_assert(sizeof(JunoTerrainGenerationSystem_GetInterpolatedOceanInformation) == 0x000030, "Wrong size on JunoTerrainGenerationSystem_GetInterpolatedOceanInformation");
static_assert(offsetof(JunoTerrainGenerationSystem_GetInterpolatedOceanInformation, Location) == 0x000000, "Member 'JunoTerrainGenerationSystem_GetInterpolatedOceanInformation::Location' has a wrong offset!");
static_assert(offsetof(JunoTerrainGenerationSystem_GetInterpolatedOceanInformation, OutLocationIsOcean) == 0x000018, "Member 'JunoTerrainGenerationSystem_GetInterpolatedOceanInformation::OutLocationIsOcean' has a wrong offset!");
static_assert(offsetof(JunoTerrainGenerationSystem_GetInterpolatedOceanInformation, ReturnValue) == 0x000020, "Member 'JunoTerrainGenerationSystem_GetInterpolatedOceanInformation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.GetInterpolatedWaterInformation
// 0x0030 (0x0030 - 0x0000)
struct JunoTerrainGenerationSystem_GetInterpolatedWaterInformation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutLocationIsWater;                                // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoTerrainWaterInformation>   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_GetInterpolatedWaterInformation) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_GetInterpolatedWaterInformation");
static_assert(sizeof(JunoTerrainGenerationSystem_GetInterpolatedWaterInformation) == 0x000030, "Wrong size on JunoTerrainGenerationSystem_GetInterpolatedWaterInformation");
static_assert(offsetof(JunoTerrainGenerationSystem_GetInterpolatedWaterInformation, Location) == 0x000000, "Member 'JunoTerrainGenerationSystem_GetInterpolatedWaterInformation::Location' has a wrong offset!");
static_assert(offsetof(JunoTerrainGenerationSystem_GetInterpolatedWaterInformation, OutLocationIsWater) == 0x000018, "Member 'JunoTerrainGenerationSystem_GetInterpolatedWaterInformation::OutLocationIsWater' has a wrong offset!");
static_assert(offsetof(JunoTerrainGenerationSystem_GetInterpolatedWaterInformation, ReturnValue) == 0x000020, "Member 'JunoTerrainGenerationSystem_GetInterpolatedWaterInformation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.GetWaterInformationAtLocation
// 0x00D8 (0x00D8 - 0x0000)
struct JunoTerrainGenerationSystem_GetWaterInformationAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoTerrainWaterInformation           ReturnValue;                                       // 0x0018(0x00C0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_GetWaterInformationAtLocation) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_GetWaterInformationAtLocation");
static_assert(sizeof(JunoTerrainGenerationSystem_GetWaterInformationAtLocation) == 0x0000D8, "Wrong size on JunoTerrainGenerationSystem_GetWaterInformationAtLocation");
static_assert(offsetof(JunoTerrainGenerationSystem_GetWaterInformationAtLocation, Location) == 0x000000, "Member 'JunoTerrainGenerationSystem_GetWaterInformationAtLocation::Location' has a wrong offset!");
static_assert(offsetof(JunoTerrainGenerationSystem_GetWaterInformationAtLocation, ReturnValue) == 0x000018, "Member 'JunoTerrainGenerationSystem_GetWaterInformationAtLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoTerrainGenerationSystem.GetWaterInformationInDirection
// 0x00F0 (0x00F0 - 0x0000)
struct JunoTerrainGenerationSystem_GetWaterInformationInDirection final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoTerrainWaterInformation           ReturnValue;                                       // 0x0030(0x00C0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoTerrainGenerationSystem_GetWaterInformationInDirection) == 0x000008, "Wrong alignment on JunoTerrainGenerationSystem_GetWaterInformationInDirection");
static_assert(sizeof(JunoTerrainGenerationSystem_GetWaterInformationInDirection) == 0x0000F0, "Wrong size on JunoTerrainGenerationSystem_GetWaterInformationInDirection");
static_assert(offsetof(JunoTerrainGenerationSystem_GetWaterInformationInDirection, Location) == 0x000000, "Member 'JunoTerrainGenerationSystem_GetWaterInformationInDirection::Location' has a wrong offset!");
static_assert(offsetof(JunoTerrainGenerationSystem_GetWaterInformationInDirection, Direction) == 0x000018, "Member 'JunoTerrainGenerationSystem_GetWaterInformationInDirection::Direction' has a wrong offset!");
static_assert(offsetof(JunoTerrainGenerationSystem_GetWaterInformationInDirection, ReturnValue) == 0x000030, "Member 'JunoTerrainGenerationSystem_GetWaterInformationInDirection::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoMinimapGenerator.CreatePackageAndSaveTexture2D
// 0x0020 (0x0020 - 0x0000)
struct JunoMinimapGenerator_CreatePackageAndSaveTexture2D final
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackage*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoMinimapGenerator_CreatePackageAndSaveTexture2D) == 0x000008, "Wrong alignment on JunoMinimapGenerator_CreatePackageAndSaveTexture2D");
static_assert(sizeof(JunoMinimapGenerator_CreatePackageAndSaveTexture2D) == 0x000020, "Wrong size on JunoMinimapGenerator_CreatePackageAndSaveTexture2D");
static_assert(offsetof(JunoMinimapGenerator_CreatePackageAndSaveTexture2D, RenderTarget) == 0x000000, "Member 'JunoMinimapGenerator_CreatePackageAndSaveTexture2D::RenderTarget' has a wrong offset!");
static_assert(offsetof(JunoMinimapGenerator_CreatePackageAndSaveTexture2D, PackageName) == 0x000008, "Member 'JunoMinimapGenerator_CreatePackageAndSaveTexture2D::PackageName' has a wrong offset!");
static_assert(offsetof(JunoMinimapGenerator_CreatePackageAndSaveTexture2D, ReturnValue) == 0x000018, "Member 'JunoMinimapGenerator_CreatePackageAndSaveTexture2D::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoPCGVolume.CalcCompressedObjectCount
// 0x0004 (0x0004 - 0x0000)
struct JunoPCGVolume_CalcCompressedObjectCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPCGVolume_CalcCompressedObjectCount) == 0x000004, "Wrong alignment on JunoPCGVolume_CalcCompressedObjectCount");
static_assert(sizeof(JunoPCGVolume_CalcCompressedObjectCount) == 0x000004, "Wrong size on JunoPCGVolume_CalcCompressedObjectCount");
static_assert(offsetof(JunoPCGVolume_CalcCompressedObjectCount, ReturnValue) == 0x000000, "Member 'JunoPCGVolume_CalcCompressedObjectCount::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoPCGVolume.CalculateCompressedDataSize
// 0x0004 (0x0004 - 0x0000)
struct JunoPCGVolume_CalculateCompressedDataSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPCGVolume_CalculateCompressedDataSize) == 0x000004, "Wrong alignment on JunoPCGVolume_CalculateCompressedDataSize");
static_assert(sizeof(JunoPCGVolume_CalculateCompressedDataSize) == 0x000004, "Wrong size on JunoPCGVolume_CalculateCompressedDataSize");
static_assert(offsetof(JunoPCGVolume_CalculateCompressedDataSize, ReturnValue) == 0x000000, "Member 'JunoPCGVolume_CalculateCompressedDataSize::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoPCGVolume.IsGeneratorBusy
// 0x0001 (0x0001 - 0x0000)
struct JunoPCGVolume_IsGeneratorBusy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPCGVolume_IsGeneratorBusy) == 0x000001, "Wrong alignment on JunoPCGVolume_IsGeneratorBusy");
static_assert(sizeof(JunoPCGVolume_IsGeneratorBusy) == 0x000001, "Wrong size on JunoPCGVolume_IsGeneratorBusy");
static_assert(offsetof(JunoPCGVolume_IsGeneratorBusy, ReturnValue) == 0x000000, "Member 'JunoPCGVolume_IsGeneratorBusy::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoPCGVolume.IsSpawnerBusy
// 0x0001 (0x0001 - 0x0000)
struct JunoPCGVolume_IsSpawnerBusy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPCGVolume_IsSpawnerBusy) == 0x000001, "Wrong alignment on JunoPCGVolume_IsSpawnerBusy");
static_assert(sizeof(JunoPCGVolume_IsSpawnerBusy) == 0x000001, "Wrong size on JunoPCGVolume_IsSpawnerBusy");
static_assert(offsetof(JunoPCGVolume_IsSpawnerBusy, ReturnValue) == 0x000000, "Member 'JunoPCGVolume_IsSpawnerBusy::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIPreselectorComponent.OnSpawnPositionSet
// 0x0048 (0x0048 - 0x0000)
struct JunoPOIPreselectorComponent_OnSpawnPositionSet final
{
public:
	struct FUniqueNetIdRepl                       ID;                                                // 0x0000(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPOIPreselectorComponent_OnSpawnPositionSet) == 0x000008, "Wrong alignment on JunoPOIPreselectorComponent_OnSpawnPositionSet");
static_assert(sizeof(JunoPOIPreselectorComponent_OnSpawnPositionSet) == 0x000048, "Wrong size on JunoPOIPreselectorComponent_OnSpawnPositionSet");
static_assert(offsetof(JunoPOIPreselectorComponent_OnSpawnPositionSet, ID) == 0x000000, "Member 'JunoPOIPreselectorComponent_OnSpawnPositionSet::ID' has a wrong offset!");
static_assert(offsetof(JunoPOIPreselectorComponent_OnSpawnPositionSet, Location) == 0x000030, "Member 'JunoPOIPreselectorComponent_OnSpawnPositionSet::Location' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveGeneratorInterface.GenerateCave
// 0x0070 (0x0070 - 0x0000)
struct JunoCaveGeneratorInterface_GenerateCave final
{
public:
	struct FJunoCaveSurfaceData                   CaveSurfaceData;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EJunoBiome                                    Biome;                                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CaveIndex;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x0038(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveGeneratorInterface_GenerateCave) == 0x000008, "Wrong alignment on JunoCaveGeneratorInterface_GenerateCave");
static_assert(sizeof(JunoCaveGeneratorInterface_GenerateCave) == 0x000070, "Wrong size on JunoCaveGeneratorInterface_GenerateCave");
static_assert(offsetof(JunoCaveGeneratorInterface_GenerateCave, CaveSurfaceData) == 0x000000, "Member 'JunoCaveGeneratorInterface_GenerateCave::CaveSurfaceData' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorInterface_GenerateCave, Biome) == 0x000030, "Member 'JunoCaveGeneratorInterface_GenerateCave::Biome' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorInterface_GenerateCave, CaveIndex) == 0x000034, "Member 'JunoCaveGeneratorInterface_GenerateCave::CaveIndex' has a wrong offset!");
static_assert(offsetof(JunoCaveGeneratorInterface_GenerateCave, Bounds) == 0x000038, "Member 'JunoCaveGeneratorInterface_GenerateCave::Bounds' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOISelectorComponent.CaveGridResolution
// 0x0004 (0x0004 - 0x0000)
struct JunoPOISelectorComponent_CaveGridResolution final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPOISelectorComponent_CaveGridResolution) == 0x000004, "Wrong alignment on JunoPOISelectorComponent_CaveGridResolution");
static_assert(sizeof(JunoPOISelectorComponent_CaveGridResolution) == 0x000004, "Wrong size on JunoPOISelectorComponent_CaveGridResolution");
static_assert(offsetof(JunoPOISelectorComponent_CaveGridResolution, ReturnValue) == 0x000000, "Member 'JunoPOISelectorComponent_CaveGridResolution::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOISelectorComponent.IsNativePOISelectorEnabled
// 0x0001 (0x0001 - 0x0000)
struct JunoPOISelectorComponent_IsNativePOISelectorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPOISelectorComponent_IsNativePOISelectorEnabled) == 0x000001, "Wrong alignment on JunoPOISelectorComponent_IsNativePOISelectorEnabled");
static_assert(sizeof(JunoPOISelectorComponent_IsNativePOISelectorEnabled) == 0x000001, "Wrong size on JunoPOISelectorComponent_IsNativePOISelectorEnabled");
static_assert(offsetof(JunoPOISelectorComponent_IsNativePOISelectorEnabled, ReturnValue) == 0x000000, "Member 'JunoPOISelectorComponent_IsNativePOISelectorEnabled::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOISelectorComponent.IsPOIPreselectorActorReady
// 0x0010 (0x0010 - 0x0000)
struct JunoPOISelectorComponent_IsPOIPreselectorActorReady final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoPOISelectorComponent_IsPOIPreselectorActorReady) == 0x000008, "Wrong alignment on JunoPOISelectorComponent_IsPOIPreselectorActorReady");
static_assert(sizeof(JunoPOISelectorComponent_IsPOIPreselectorActorReady) == 0x000010, "Wrong size on JunoPOISelectorComponent_IsPOIPreselectorActorReady");
static_assert(offsetof(JunoPOISelectorComponent_IsPOIPreselectorActorReady, Actor) == 0x000000, "Member 'JunoPOISelectorComponent_IsPOIPreselectorActorReady::Actor' has a wrong offset!");
static_assert(offsetof(JunoPOISelectorComponent_IsPOIPreselectorActorReady, ReturnValue) == 0x000008, "Member 'JunoPOISelectorComponent_IsPOIPreselectorActorReady::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOISelectorComponent.BeginPOISelection
// 0x0030 (0x0030 - 0x0000)
struct JunoPOISelectorComponent_BeginPOISelection final
{
public:
	struct FJunoPOISelectorParams                 Param_Params_0;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPOISelectorComponent_BeginPOISelection) == 0x000008, "Wrong alignment on JunoPOISelectorComponent_BeginPOISelection");
static_assert(sizeof(JunoPOISelectorComponent_BeginPOISelection) == 0x000030, "Wrong size on JunoPOISelectorComponent_BeginPOISelection");
static_assert(offsetof(JunoPOISelectorComponent_BeginPOISelection, Param_Params_0) == 0x000000, "Member 'JunoPOISelectorComponent_BeginPOISelection::Param_Params_0' has a wrong offset!");

// Function JunoProceduralWorld.JunoWaterSplineInjector.InjectSplineGuideIntoWaterBody
// 0x0140 (0x0140 - 0x0000)
struct JunoWaterSplineInjector_InjectSplineGuideIntoWaterBody final
{
public:
	struct FJunoWaterSplineInjectorParams         Params_0;                                          // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWaterSplineInjector_InjectSplineGuideIntoWaterBody) == 0x000010, "Wrong alignment on JunoWaterSplineInjector_InjectSplineGuideIntoWaterBody");
static_assert(sizeof(JunoWaterSplineInjector_InjectSplineGuideIntoWaterBody) == 0x000140, "Wrong size on JunoWaterSplineInjector_InjectSplineGuideIntoWaterBody");
static_assert(offsetof(JunoWaterSplineInjector_InjectSplineGuideIntoWaterBody, Params_0) == 0x000000, "Member 'JunoWaterSplineInjector_InjectSplineGuideIntoWaterBody::Params_0' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTile.ArePositionsInSameWorldTile
// 0x0040 (0x0040 - 0x0000)
struct JunoWorldTile_ArePositionsInSameWorldTile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationA;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationB;                                         // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoWorldTile_ArePositionsInSameWorldTile) == 0x000008, "Wrong alignment on JunoWorldTile_ArePositionsInSameWorldTile");
static_assert(sizeof(JunoWorldTile_ArePositionsInSameWorldTile) == 0x000040, "Wrong size on JunoWorldTile_ArePositionsInSameWorldTile");
static_assert(offsetof(JunoWorldTile_ArePositionsInSameWorldTile, WorldContextObject) == 0x000000, "Member 'JunoWorldTile_ArePositionsInSameWorldTile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldTile_ArePositionsInSameWorldTile, LocationA) == 0x000008, "Member 'JunoWorldTile_ArePositionsInSameWorldTile::LocationA' has a wrong offset!");
static_assert(offsetof(JunoWorldTile_ArePositionsInSameWorldTile, LocationB) == 0x000020, "Member 'JunoWorldTile_ArePositionsInSameWorldTile::LocationB' has a wrong offset!");
static_assert(offsetof(JunoWorldTile_ArePositionsInSameWorldTile, ReturnValue) == 0x000038, "Member 'JunoWorldTile_ArePositionsInSameWorldTile::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTile.GetJunoWorldTileBounds
// 0x0048 (0x0048 - 0x0000)
struct JunoWorldTile_GetJunoWorldTileBounds final
{
public:
	class AActor*                                 ActorInWorldTile;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   TileBounds;                                        // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EJunoGetWorldTileBoundsResult                 Result;                                            // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoWorldTile_GetJunoWorldTileBounds) == 0x000008, "Wrong alignment on JunoWorldTile_GetJunoWorldTileBounds");
static_assert(sizeof(JunoWorldTile_GetJunoWorldTileBounds) == 0x000048, "Wrong size on JunoWorldTile_GetJunoWorldTileBounds");
static_assert(offsetof(JunoWorldTile_GetJunoWorldTileBounds, ActorInWorldTile) == 0x000000, "Member 'JunoWorldTile_GetJunoWorldTileBounds::ActorInWorldTile' has a wrong offset!");
static_assert(offsetof(JunoWorldTile_GetJunoWorldTileBounds, TileBounds) == 0x000008, "Member 'JunoWorldTile_GetJunoWorldTileBounds::TileBounds' has a wrong offset!");
static_assert(offsetof(JunoWorldTile_GetJunoWorldTileBounds, Result) == 0x000040, "Member 'JunoWorldTile_GetJunoWorldTileBounds::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTile.GetJunoWorldTileTransform
// 0x0080 (0x0080 - 0x0000)
struct JunoWorldTile_GetJunoWorldTileTransform final
{
public:
	class AActor*                                 ActorInWorldTile;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoGetWorldTileTransformResult              Result;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoWorldTile_GetJunoWorldTileTransform) == 0x000010, "Wrong alignment on JunoWorldTile_GetJunoWorldTileTransform");
static_assert(sizeof(JunoWorldTile_GetJunoWorldTileTransform) == 0x000080, "Wrong size on JunoWorldTile_GetJunoWorldTileTransform");
static_assert(offsetof(JunoWorldTile_GetJunoWorldTileTransform, ActorInWorldTile) == 0x000000, "Member 'JunoWorldTile_GetJunoWorldTileTransform::ActorInWorldTile' has a wrong offset!");
static_assert(offsetof(JunoWorldTile_GetJunoWorldTileTransform, Transform) == 0x000010, "Member 'JunoWorldTile_GetJunoWorldTileTransform::Transform' has a wrong offset!");
static_assert(offsetof(JunoWorldTile_GetJunoWorldTileTransform, Result) == 0x000070, "Member 'JunoWorldTile_GetJunoWorldTileTransform::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTile.OnUnloadBegin
// 0x0008 (0x0008 - 0x0000)
struct JunoWorldTile_OnUnloadBegin final
{
public:
	class ULevel*                                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldTile_OnUnloadBegin) == 0x000008, "Wrong alignment on JunoWorldTile_OnUnloadBegin");
static_assert(sizeof(JunoWorldTile_OnUnloadBegin) == 0x000008, "Wrong size on JunoWorldTile_OnUnloadBegin");
static_assert(offsetof(JunoWorldTile_OnUnloadBegin, Level) == 0x000000, "Member 'JunoWorldTile_OnUnloadBegin::Level' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTile.IsTestLevelWorldTile
// 0x0001 (0x0001 - 0x0000)
struct JunoWorldTile_IsTestLevelWorldTile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldTile_IsTestLevelWorldTile) == 0x000001, "Wrong alignment on JunoWorldTile_IsTestLevelWorldTile");
static_assert(sizeof(JunoWorldTile_IsTestLevelWorldTile) == 0x000001, "Wrong size on JunoWorldTile_IsTestLevelWorldTile");
static_assert(offsetof(JunoWorldTile_IsTestLevelWorldTile, ReturnValue) == 0x000000, "Member 'JunoWorldTile_IsTestLevelWorldTile::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileControllerComponent.ClientCheckWorldTileState
// 0x0010 (0x0010 - 0x0000)
struct JunoWorldTileControllerComponent_ClientCheckWorldTileState final
{
public:
	TArray<struct FJunoDebugWorldTileState>       WorldTileState;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldTileControllerComponent_ClientCheckWorldTileState) == 0x000008, "Wrong alignment on JunoWorldTileControllerComponent_ClientCheckWorldTileState");
static_assert(sizeof(JunoWorldTileControllerComponent_ClientCheckWorldTileState) == 0x000010, "Wrong size on JunoWorldTileControllerComponent_ClientCheckWorldTileState");
static_assert(offsetof(JunoWorldTileControllerComponent_ClientCheckWorldTileState, WorldTileState) == 0x000000, "Member 'JunoWorldTileControllerComponent_ClientCheckWorldTileState::WorldTileState' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldTileSelectionAgatha.GenerateCornersForUI
// 0x0018 (0x0018 - 0x0000)
struct JunoWorldTileSelectionAgatha_GenerateCornersForUI final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EJunoBiome>                            Corners;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldTileSelectionAgatha_GenerateCornersForUI) == 0x000008, "Wrong alignment on JunoWorldTileSelectionAgatha_GenerateCornersForUI");
static_assert(sizeof(JunoWorldTileSelectionAgatha_GenerateCornersForUI) == 0x000018, "Wrong size on JunoWorldTileSelectionAgatha_GenerateCornersForUI");
static_assert(offsetof(JunoWorldTileSelectionAgatha_GenerateCornersForUI, WorldContextObject) == 0x000000, "Member 'JunoWorldTileSelectionAgatha_GenerateCornersForUI::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JunoWorldTileSelectionAgatha_GenerateCornersForUI, Corners) == 0x000008, "Member 'JunoWorldTileSelectionAgatha_GenerateCornersForUI::Corners' has a wrong offset!");

// Function JunoProceduralWorld.JunoWorldWeatherLocationComponent.HandleEnvironmentChanged
// 0x0058 (0x0058 - 0x0000)
struct JunoWorldWeatherLocationComponent_HandleEnvironmentChanged final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoBiomeInfoQueryResult              PreviousEnvironmentResult;                         // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoBiomeInfoQueryResult              NewEnvironmentResult;                              // 0x0030(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoWorldWeatherLocationComponent_HandleEnvironmentChanged) == 0x000008, "Wrong alignment on JunoWorldWeatherLocationComponent_HandleEnvironmentChanged");
static_assert(sizeof(JunoWorldWeatherLocationComponent_HandleEnvironmentChanged) == 0x000058, "Wrong size on JunoWorldWeatherLocationComponent_HandleEnvironmentChanged");
static_assert(offsetof(JunoWorldWeatherLocationComponent_HandleEnvironmentChanged, Actor) == 0x000000, "Member 'JunoWorldWeatherLocationComponent_HandleEnvironmentChanged::Actor' has a wrong offset!");
static_assert(offsetof(JunoWorldWeatherLocationComponent_HandleEnvironmentChanged, PreviousEnvironmentResult) == 0x000008, "Member 'JunoWorldWeatherLocationComponent_HandleEnvironmentChanged::PreviousEnvironmentResult' has a wrong offset!");
static_assert(offsetof(JunoWorldWeatherLocationComponent_HandleEnvironmentChanged, NewEnvironmentResult) == 0x000030, "Member 'JunoWorldWeatherLocationComponent_HandleEnvironmentChanged::NewEnvironmentResult' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.AdditionalPushFrontierResultCondition
// 0x0108 (0x0108 - 0x0000)
struct LandmassPathfinder_AdditionalPushFrontierResultCondition final
{
public:
	EPushFrontierResult                           ResultFromLastPush;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLandmassPathfinderRules               InCurrentRules;                                    // 0x0008(0x00A8)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                InHome;                                            // 0x00B0(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDestination;                                     // 0x00C8(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InCurrentLocation;                                 // 0x00E0(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCurrentPushSteps;                                // 0x00F8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCurrentCost;                                     // 0x00FC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseBestNodeInsteadOfMostRecentNode;         // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPushFrontierResult                           ReturnValue;                                       // 0x0101(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassPathfinder_AdditionalPushFrontierResultCondition) == 0x000008, "Wrong alignment on LandmassPathfinder_AdditionalPushFrontierResultCondition");
static_assert(sizeof(LandmassPathfinder_AdditionalPushFrontierResultCondition) == 0x000108, "Wrong size on LandmassPathfinder_AdditionalPushFrontierResultCondition");
static_assert(offsetof(LandmassPathfinder_AdditionalPushFrontierResultCondition, ResultFromLastPush) == 0x000000, "Member 'LandmassPathfinder_AdditionalPushFrontierResultCondition::ResultFromLastPush' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_AdditionalPushFrontierResultCondition, InCurrentRules) == 0x000008, "Member 'LandmassPathfinder_AdditionalPushFrontierResultCondition::InCurrentRules' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_AdditionalPushFrontierResultCondition, InHome) == 0x0000B0, "Member 'LandmassPathfinder_AdditionalPushFrontierResultCondition::InHome' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_AdditionalPushFrontierResultCondition, InDestination) == 0x0000C8, "Member 'LandmassPathfinder_AdditionalPushFrontierResultCondition::InDestination' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_AdditionalPushFrontierResultCondition, InCurrentLocation) == 0x0000E0, "Member 'LandmassPathfinder_AdditionalPushFrontierResultCondition::InCurrentLocation' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_AdditionalPushFrontierResultCondition, InCurrentPushSteps) == 0x0000F8, "Member 'LandmassPathfinder_AdditionalPushFrontierResultCondition::InCurrentPushSteps' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_AdditionalPushFrontierResultCondition, InCurrentCost) == 0x0000FC, "Member 'LandmassPathfinder_AdditionalPushFrontierResultCondition::InCurrentCost' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_AdditionalPushFrontierResultCondition, bShouldUseBestNodeInsteadOfMostRecentNode) == 0x000100, "Member 'LandmassPathfinder_AdditionalPushFrontierResultCondition::bShouldUseBestNodeInsteadOfMostRecentNode' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_AdditionalPushFrontierResultCondition, ReturnValue) == 0x000101, "Member 'LandmassPathfinder_AdditionalPushFrontierResultCondition::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.ExecutePathfinderSync
// 0x0050 (0x0050 - 0x0000)
struct LandmassPathfinder_ExecutePathfinderSync final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Locations;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Costs;                                             // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassPathfinder_ExecutePathfinderSync) == 0x000008, "Wrong alignment on LandmassPathfinder_ExecutePathfinderSync");
static_assert(sizeof(LandmassPathfinder_ExecutePathfinderSync) == 0x000050, "Wrong size on LandmassPathfinder_ExecutePathfinderSync");
static_assert(offsetof(LandmassPathfinder_ExecutePathfinderSync, A) == 0x000000, "Member 'LandmassPathfinder_ExecutePathfinderSync::A' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_ExecutePathfinderSync, B) == 0x000018, "Member 'LandmassPathfinder_ExecutePathfinderSync::B' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_ExecutePathfinderSync, Locations) == 0x000030, "Member 'LandmassPathfinder_ExecutePathfinderSync::Locations' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_ExecutePathfinderSync, Costs) == 0x000040, "Member 'LandmassPathfinder_ExecutePathfinderSync::Costs' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.FindNearestValidLocation
// 0x0038 (0x0038 - 0x0000)
struct LandmassPathfinder_FindNearestValidLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutValidLocation;                                  // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldProject;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassPathfinder_FindNearestValidLocation) == 0x000008, "Wrong alignment on LandmassPathfinder_FindNearestValidLocation");
static_assert(sizeof(LandmassPathfinder_FindNearestValidLocation) == 0x000038, "Wrong size on LandmassPathfinder_FindNearestValidLocation");
static_assert(offsetof(LandmassPathfinder_FindNearestValidLocation, InLocation) == 0x000000, "Member 'LandmassPathfinder_FindNearestValidLocation::InLocation' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_FindNearestValidLocation, OutValidLocation) == 0x000018, "Member 'LandmassPathfinder_FindNearestValidLocation::OutValidLocation' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_FindNearestValidLocation, bShouldProject) == 0x000030, "Member 'LandmassPathfinder_FindNearestValidLocation::bShouldProject' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_FindNearestValidLocation, ReturnValue) == 0x000031, "Member 'LandmassPathfinder_FindNearestValidLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.Initialize
// 0x00D8 (0x00D8 - 0x0000)
struct LandmassPathfinder_Initialize final
{
public:
	class ALandscapeProxy*                        LandscapeProxy_0;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALandmassProceduralRoute*               InRoute;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLandmassPathfinderRules               Rules;                                             // 0x0010(0x00A8)(Parm, NativeAccessSpecifierPublic)
	TArray<class ULandmassPathfinder*>            InBackStopPaths;                                   // 0x00B8(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class ALandmassProceduralRoute*               InBlockingRoute;                                   // 0x00C8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassPathfinder_Initialize) == 0x000008, "Wrong alignment on LandmassPathfinder_Initialize");
static_assert(sizeof(LandmassPathfinder_Initialize) == 0x0000D8, "Wrong size on LandmassPathfinder_Initialize");
static_assert(offsetof(LandmassPathfinder_Initialize, LandscapeProxy_0) == 0x000000, "Member 'LandmassPathfinder_Initialize::LandscapeProxy_0' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_Initialize, InRoute) == 0x000008, "Member 'LandmassPathfinder_Initialize::InRoute' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_Initialize, Rules) == 0x000010, "Member 'LandmassPathfinder_Initialize::Rules' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_Initialize, InBackStopPaths) == 0x0000B8, "Member 'LandmassPathfinder_Initialize::InBackStopPaths' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_Initialize, InBlockingRoute) == 0x0000C8, "Member 'LandmassPathfinder_Initialize::InBlockingRoute' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_Initialize, ReturnValue) == 0x0000D0, "Member 'LandmassPathfinder_Initialize::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.IsTargetLocationValid
// 0x0020 (0x0020 - 0x0000)
struct LandmassPathfinder_IsTargetLocationValid final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassPathfinder_IsTargetLocationValid) == 0x000008, "Wrong alignment on LandmassPathfinder_IsTargetLocationValid");
static_assert(sizeof(LandmassPathfinder_IsTargetLocationValid) == 0x000020, "Wrong size on LandmassPathfinder_IsTargetLocationValid");
static_assert(offsetof(LandmassPathfinder_IsTargetLocationValid, TargetLocation) == 0x000000, "Member 'LandmassPathfinder_IsTargetLocationValid::TargetLocation' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_IsTargetLocationValid, ReturnValue) == 0x000018, "Member 'LandmassPathfinder_IsTargetLocationValid::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.K2_GetPriorityList
// 0x0020 (0x0020 - 0x0000)
struct LandmassPathfinder_K2_GetPriorityList final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Costs;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassPathfinder_K2_GetPriorityList) == 0x000008, "Wrong alignment on LandmassPathfinder_K2_GetPriorityList");
static_assert(sizeof(LandmassPathfinder_K2_GetPriorityList) == 0x000020, "Wrong size on LandmassPathfinder_K2_GetPriorityList");
static_assert(offsetof(LandmassPathfinder_K2_GetPriorityList, Locations) == 0x000000, "Member 'LandmassPathfinder_K2_GetPriorityList::Locations' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_K2_GetPriorityList, Costs) == 0x000010, "Member 'LandmassPathfinder_K2_GetPriorityList::Costs' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.K2_StepPathfinder
// 0x0048 (0x0048 - 0x0000)
struct LandmassPathfinder_K2_StepPathfinder final
{
public:
	TArray<struct FVector>                        OutLocations;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OutCosts;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  bOutIsSnapped;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EPathfinderNodeState>                  OutNodeStates;                                     // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPushFrontierResult                           ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassPathfinder_K2_StepPathfinder) == 0x000008, "Wrong alignment on LandmassPathfinder_K2_StepPathfinder");
static_assert(sizeof(LandmassPathfinder_K2_StepPathfinder) == 0x000048, "Wrong size on LandmassPathfinder_K2_StepPathfinder");
static_assert(offsetof(LandmassPathfinder_K2_StepPathfinder, OutLocations) == 0x000000, "Member 'LandmassPathfinder_K2_StepPathfinder::OutLocations' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_K2_StepPathfinder, OutCosts) == 0x000010, "Member 'LandmassPathfinder_K2_StepPathfinder::OutCosts' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_K2_StepPathfinder, bOutIsSnapped) == 0x000020, "Member 'LandmassPathfinder_K2_StepPathfinder::bOutIsSnapped' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_K2_StepPathfinder, OutNodeStates) == 0x000030, "Member 'LandmassPathfinder_K2_StepPathfinder::OutNodeStates' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_K2_StepPathfinder, ReturnValue) == 0x000040, "Member 'LandmassPathfinder_K2_StepPathfinder::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.OnInitialize
// 0x00C0 (0x00C0 - 0x0000)
struct LandmassPathfinder_OnInitialize final
{
public:
	class ALandscapeProxy*                        InLandscapeProxy;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALandmassProceduralRoute*               InRoute;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLandmassPathfinderRules               Rules;                                             // 0x0010(0x00A8)(Parm, NativeAccessSpecifierPublic)
	class ALandmassProceduralRoute*               InBlockingRoute;                                   // 0x00B8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassPathfinder_OnInitialize) == 0x000008, "Wrong alignment on LandmassPathfinder_OnInitialize");
static_assert(sizeof(LandmassPathfinder_OnInitialize) == 0x0000C0, "Wrong size on LandmassPathfinder_OnInitialize");
static_assert(offsetof(LandmassPathfinder_OnInitialize, InLandscapeProxy) == 0x000000, "Member 'LandmassPathfinder_OnInitialize::InLandscapeProxy' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_OnInitialize, InRoute) == 0x000008, "Member 'LandmassPathfinder_OnInitialize::InRoute' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_OnInitialize, Rules) == 0x000010, "Member 'LandmassPathfinder_OnInitialize::Rules' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_OnInitialize, InBlockingRoute) == 0x0000B8, "Member 'LandmassPathfinder_OnInitialize::InBlockingRoute' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.OnStartPathfinder
// 0x0030 (0x0030 - 0x0000)
struct LandmassPathfinder_OnStartPathfinder final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassPathfinder_OnStartPathfinder) == 0x000008, "Wrong alignment on LandmassPathfinder_OnStartPathfinder");
static_assert(sizeof(LandmassPathfinder_OnStartPathfinder) == 0x000030, "Wrong size on LandmassPathfinder_OnStartPathfinder");
static_assert(offsetof(LandmassPathfinder_OnStartPathfinder, A) == 0x000000, "Member 'LandmassPathfinder_OnStartPathfinder::A' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_OnStartPathfinder, B) == 0x000018, "Member 'LandmassPathfinder_OnStartPathfinder::B' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.SetDestination
// 0x0018 (0x0018 - 0x0000)
struct LandmassPathfinder_SetDestination final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassPathfinder_SetDestination) == 0x000008, "Wrong alignment on LandmassPathfinder_SetDestination");
static_assert(sizeof(LandmassPathfinder_SetDestination) == 0x000018, "Wrong size on LandmassPathfinder_SetDestination");
static_assert(offsetof(LandmassPathfinder_SetDestination, Location) == 0x000000, "Member 'LandmassPathfinder_SetDestination::Location' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.SetDestinationActuallyReached
// 0x0018 (0x0018 - 0x0000)
struct LandmassPathfinder_SetDestinationActuallyReached final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassPathfinder_SetDestinationActuallyReached) == 0x000008, "Wrong alignment on LandmassPathfinder_SetDestinationActuallyReached");
static_assert(sizeof(LandmassPathfinder_SetDestinationActuallyReached) == 0x000018, "Wrong size on LandmassPathfinder_SetDestinationActuallyReached");
static_assert(offsetof(LandmassPathfinder_SetDestinationActuallyReached, Location) == 0x000000, "Member 'LandmassPathfinder_SetDestinationActuallyReached::Location' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.StartPathfinder
// 0x0038 (0x0038 - 0x0000)
struct LandmassPathfinder_StartPathfinder final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindNearestValidLocationForA;                     // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindNearestValidLocationForB;                     // 0x0031(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassPathfinder_StartPathfinder) == 0x000008, "Wrong alignment on LandmassPathfinder_StartPathfinder");
static_assert(sizeof(LandmassPathfinder_StartPathfinder) == 0x000038, "Wrong size on LandmassPathfinder_StartPathfinder");
static_assert(offsetof(LandmassPathfinder_StartPathfinder, A) == 0x000000, "Member 'LandmassPathfinder_StartPathfinder::A' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_StartPathfinder, B) == 0x000018, "Member 'LandmassPathfinder_StartPathfinder::B' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_StartPathfinder, bFindNearestValidLocationForA) == 0x000030, "Member 'LandmassPathfinder_StartPathfinder::bFindNearestValidLocationForA' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_StartPathfinder, bFindNearestValidLocationForB) == 0x000031, "Member 'LandmassPathfinder_StartPathfinder::bFindNearestValidLocationForB' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.GetIsInitialized
// 0x0001 (0x0001 - 0x0000)
struct LandmassPathfinder_GetIsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassPathfinder_GetIsInitialized) == 0x000001, "Wrong alignment on LandmassPathfinder_GetIsInitialized");
static_assert(sizeof(LandmassPathfinder_GetIsInitialized) == 0x000001, "Wrong size on LandmassPathfinder_GetIsInitialized");
static_assert(offsetof(LandmassPathfinder_GetIsInitialized, ReturnValue) == 0x000000, "Member 'LandmassPathfinder_GetIsInitialized::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.GetLandscapeBox
// 0x0038 (0x0038 - 0x0000)
struct LandmassPathfinder_GetLandscapeBox final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassPathfinder_GetLandscapeBox) == 0x000008, "Wrong alignment on LandmassPathfinder_GetLandscapeBox");
static_assert(sizeof(LandmassPathfinder_GetLandscapeBox) == 0x000038, "Wrong size on LandmassPathfinder_GetLandscapeBox");
static_assert(offsetof(LandmassPathfinder_GetLandscapeBox, ReturnValue) == 0x000000, "Member 'LandmassPathfinder_GetLandscapeBox::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassPathfinder.ProjectLocation
// 0x0038 (0x0038 - 0x0000)
struct LandmassPathfinder_ProjectLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsValidLocation;                               // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassPathfinder_ProjectLocation) == 0x000008, "Wrong alignment on LandmassPathfinder_ProjectLocation");
static_assert(sizeof(LandmassPathfinder_ProjectLocation) == 0x000038, "Wrong size on LandmassPathfinder_ProjectLocation");
static_assert(offsetof(LandmassPathfinder_ProjectLocation, Location) == 0x000000, "Member 'LandmassPathfinder_ProjectLocation::Location' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_ProjectLocation, bOutIsValidLocation) == 0x000018, "Member 'LandmassPathfinder_ProjectLocation::bOutIsValidLocation' has a wrong offset!");
static_assert(offsetof(LandmassPathfinder_ProjectLocation, ReturnValue) == 0x000020, "Member 'LandmassPathfinder_ProjectLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.PathfinderGuideSetsDataAsset.LoadCurveSetAndAddSplineComponentsToActor
// 0x0010 (0x0010 - 0x0000)
struct PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor) == 0x000008, "Wrong alignment on PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor");
static_assert(sizeof(PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor) == 0x000010, "Wrong size on PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor");
static_assert(offsetof(PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor, InActor) == 0x000000, "Member 'PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor::InActor' has a wrong offset!");
static_assert(offsetof(PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor, Index_0) == 0x000008, "Member 'PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor::Index_0' has a wrong offset!");
static_assert(offsetof(PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor, ReturnValue) == 0x00000C, "Member 'PathfinderGuideSetsDataAsset_LoadCurveSetAndAddSplineComponentsToActor::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.PathfinderGuideSetsDataAsset.SaveCurveSetFromSplintComponents
// 0x0018 (0x0018 - 0x0000)
struct PathfinderGuideSetsDataAsset_SaveCurveSetFromSplintComponents final
{
public:
	TArray<class USplineComponent*>               SourceComponents;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PathfinderGuideSetsDataAsset_SaveCurveSetFromSplintComponents) == 0x000008, "Wrong alignment on PathfinderGuideSetsDataAsset_SaveCurveSetFromSplintComponents");
static_assert(sizeof(PathfinderGuideSetsDataAsset_SaveCurveSetFromSplintComponents) == 0x000018, "Wrong size on PathfinderGuideSetsDataAsset_SaveCurveSetFromSplintComponents");
static_assert(offsetof(PathfinderGuideSetsDataAsset_SaveCurveSetFromSplintComponents, SourceComponents) == 0x000000, "Member 'PathfinderGuideSetsDataAsset_SaveCurveSetFromSplintComponents::SourceComponents' has a wrong offset!");
static_assert(offsetof(PathfinderGuideSetsDataAsset_SaveCurveSetFromSplintComponents, Index_0) == 0x000010, "Member 'PathfinderGuideSetsDataAsset_SaveCurveSetFromSplintComponents::Index_0' has a wrong offset!");

// Function JunoProceduralWorld.PathfinderGuideSetsDataAsset.GetRandomGuideSet
// 0x0010 (0x0010 - 0x0000)
struct PathfinderGuideSetsDataAsset_GetRandomGuideSet final
{
public:
	struct FPathfinderGuideSet                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PathfinderGuideSetsDataAsset_GetRandomGuideSet) == 0x000008, "Wrong alignment on PathfinderGuideSetsDataAsset_GetRandomGuideSet");
static_assert(sizeof(PathfinderGuideSetsDataAsset_GetRandomGuideSet) == 0x000010, "Wrong size on PathfinderGuideSetsDataAsset_GetRandomGuideSet");
static_assert(offsetof(PathfinderGuideSetsDataAsset_GetRandomGuideSet, ReturnValue) == 0x000000, "Member 'PathfinderGuideSetsDataAsset_GetRandomGuideSet::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.PathfinderGuideSetsDataAsset.GetRandomGuideSetFromSeed
// 0x0018 (0x0018 - 0x0000)
struct PathfinderGuideSetsDataAsset_GetRandomGuideSetFromSeed final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPathfinderGuideSet                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PathfinderGuideSetsDataAsset_GetRandomGuideSetFromSeed) == 0x000008, "Wrong alignment on PathfinderGuideSetsDataAsset_GetRandomGuideSetFromSeed");
static_assert(sizeof(PathfinderGuideSetsDataAsset_GetRandomGuideSetFromSeed) == 0x000018, "Wrong size on PathfinderGuideSetsDataAsset_GetRandomGuideSetFromSeed");
static_assert(offsetof(PathfinderGuideSetsDataAsset_GetRandomGuideSetFromSeed, Seed) == 0x000000, "Member 'PathfinderGuideSetsDataAsset_GetRandomGuideSetFromSeed::Seed' has a wrong offset!");
static_assert(offsetof(PathfinderGuideSetsDataAsset_GetRandomGuideSetFromSeed, ReturnValue) == 0x000008, "Member 'PathfinderGuideSetsDataAsset_GetRandomGuideSetFromSeed::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveVolume.OnPlayerEnteringCaveVolume
// 0x0008 (0x0008 - 0x0000)
struct JunoCaveVolume_OnPlayerEnteringCaveVolume final
{
public:
	class AFortPlayerPawnAthena*                  PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveVolume_OnPlayerEnteringCaveVolume) == 0x000008, "Wrong alignment on JunoCaveVolume_OnPlayerEnteringCaveVolume");
static_assert(sizeof(JunoCaveVolume_OnPlayerEnteringCaveVolume) == 0x000008, "Wrong size on JunoCaveVolume_OnPlayerEnteringCaveVolume");
static_assert(offsetof(JunoCaveVolume_OnPlayerEnteringCaveVolume, PlayerPawn) == 0x000000, "Member 'JunoCaveVolume_OnPlayerEnteringCaveVolume::PlayerPawn' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveVolume.OnPlayerLeavingCaveVolume
// 0x0008 (0x0008 - 0x0000)
struct JunoCaveVolume_OnPlayerLeavingCaveVolume final
{
public:
	class AFortPlayerPawnAthena*                  PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveVolume_OnPlayerLeavingCaveVolume) == 0x000008, "Wrong alignment on JunoCaveVolume_OnPlayerLeavingCaveVolume");
static_assert(sizeof(JunoCaveVolume_OnPlayerLeavingCaveVolume) == 0x000008, "Wrong size on JunoCaveVolume_OnPlayerLeavingCaveVolume");
static_assert(offsetof(JunoCaveVolume_OnPlayerLeavingCaveVolume, PlayerPawn) == 0x000000, "Member 'JunoCaveVolume_OnPlayerLeavingCaveVolume::PlayerPawn' has a wrong offset!");

// Function JunoProceduralWorld.JunoCaveVolume.RetrievePointProviders
// 0x0010 (0x0010 - 0x0000)
struct JunoCaveVolume_RetrievePointProviders final
{
public:
	TArray<class AJunoCaveLivingWorldStaticPointProvider*> OutPointProviders;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoCaveVolume_RetrievePointProviders) == 0x000008, "Wrong alignment on JunoCaveVolume_RetrievePointProviders");
static_assert(sizeof(JunoCaveVolume_RetrievePointProviders) == 0x000010, "Wrong size on JunoCaveVolume_RetrievePointProviders");
static_assert(offsetof(JunoCaveVolume_RetrievePointProviders, OutPointProviders) == 0x000000, "Member 'JunoCaveVolume_RetrievePointProviders::OutPointProviders' has a wrong offset!");

// Function JunoProceduralWorld.JunoLevelInstance.GetActorsInLevel
// 0x0010 (0x0010 - 0x0000)
struct JunoLevelInstance_GetActorsInLevel final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoLevelInstance_GetActorsInLevel) == 0x000008, "Wrong alignment on JunoLevelInstance_GetActorsInLevel");
static_assert(sizeof(JunoLevelInstance_GetActorsInLevel) == 0x000010, "Wrong size on JunoLevelInstance_GetActorsInLevel");
static_assert(offsetof(JunoLevelInstance_GetActorsInLevel, ReturnValue) == 0x000000, "Member 'JunoLevelInstance_GetActorsInLevel::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoLivingWorldStaticPointProviderCluster.OnCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct JunoLivingWorldStaticPointProviderCluster_OnCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoLivingWorldStaticPointProviderCluster_OnCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on JunoLivingWorldStaticPointProviderCluster_OnCurrentPlaylistLoaded");
static_assert(sizeof(JunoLivingWorldStaticPointProviderCluster_OnCurrentPlaylistLoaded) == 0x000028, "Wrong size on JunoLivingWorldStaticPointProviderCluster_OnCurrentPlaylistLoaded");
static_assert(offsetof(JunoLivingWorldStaticPointProviderCluster_OnCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'JunoLivingWorldStaticPointProviderCluster_OnCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(JunoLivingWorldStaticPointProviderCluster_OnCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'JunoLivingWorldStaticPointProviderCluster_OnCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.CreateCavePOI
// 0x0160 (0x0160 - 0x0000)
struct JunoPOIBlueprintLibrary_CreateCavePOI final
{
public:
	const class AActor*                           CaveSlotActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveSlotGuid;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveShellGuid;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoPOIData                           Data;                                              // 0x0030(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGeneratePOIResult                            Result;                                            // 0x0150(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0xF];                                      // 0x0151(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoPOIBlueprintLibrary_CreateCavePOI) == 0x000010, "Wrong alignment on JunoPOIBlueprintLibrary_CreateCavePOI");
static_assert(sizeof(JunoPOIBlueprintLibrary_CreateCavePOI) == 0x000160, "Wrong size on JunoPOIBlueprintLibrary_CreateCavePOI");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateCavePOI, CaveSlotActor) == 0x000000, "Member 'JunoPOIBlueprintLibrary_CreateCavePOI::CaveSlotActor' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateCavePOI, CaveSlotGuid) == 0x000008, "Member 'JunoPOIBlueprintLibrary_CreateCavePOI::CaveSlotGuid' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateCavePOI, CaveShellGuid) == 0x000018, "Member 'JunoPOIBlueprintLibrary_CreateCavePOI::CaveShellGuid' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateCavePOI, Data) == 0x000030, "Member 'JunoPOIBlueprintLibrary_CreateCavePOI::Data' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateCavePOI, Result) == 0x000150, "Member 'JunoPOIBlueprintLibrary_CreateCavePOI::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.CreatePOI
// 0x0150 (0x0150 - 0x0000)
struct JunoPOIBlueprintLibrary_CreatePOI final
{
public:
	const class AActor*                           POISlotActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  POISlotGuid;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoPOIData                           Data;                                              // 0x0020(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGeneratePOIResult                            Result;                                            // 0x0140(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0xF];                                      // 0x0141(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoPOIBlueprintLibrary_CreatePOI) == 0x000010, "Wrong alignment on JunoPOIBlueprintLibrary_CreatePOI");
static_assert(sizeof(JunoPOIBlueprintLibrary_CreatePOI) == 0x000150, "Wrong size on JunoPOIBlueprintLibrary_CreatePOI");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreatePOI, POISlotActor) == 0x000000, "Member 'JunoPOIBlueprintLibrary_CreatePOI::POISlotActor' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreatePOI, POISlotGuid) == 0x000008, "Member 'JunoPOIBlueprintLibrary_CreatePOI::POISlotGuid' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreatePOI, Data) == 0x000020, "Member 'JunoPOIBlueprintLibrary_CreatePOI::Data' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreatePOI, Result) == 0x000140, "Member 'JunoPOIBlueprintLibrary_CreatePOI::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.CreateRarePOIs
// 0x0040 (0x0040 - 0x0000)
struct JunoPOIBlueprintLibrary_CreateRarePOIs final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRandomStream                          RandomStream;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataRegistryType                      DataRegistry;                                      // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoPOIManagerSlot>            PotentialSlots;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FJunoPOIManagerSlot>            UsedSlots;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EGeneratePOIResult                            Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoPOIBlueprintLibrary_CreateRarePOIs) == 0x000008, "Wrong alignment on JunoPOIBlueprintLibrary_CreateRarePOIs");
static_assert(sizeof(JunoPOIBlueprintLibrary_CreateRarePOIs) == 0x000040, "Wrong size on JunoPOIBlueprintLibrary_CreateRarePOIs");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateRarePOIs, Actor) == 0x000000, "Member 'JunoPOIBlueprintLibrary_CreateRarePOIs::Actor' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateRarePOIs, RandomStream) == 0x000008, "Member 'JunoPOIBlueprintLibrary_CreateRarePOIs::RandomStream' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateRarePOIs, DataRegistry) == 0x000010, "Member 'JunoPOIBlueprintLibrary_CreateRarePOIs::DataRegistry' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateRarePOIs, PotentialSlots) == 0x000018, "Member 'JunoPOIBlueprintLibrary_CreateRarePOIs::PotentialSlots' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateRarePOIs, UsedSlots) == 0x000028, "Member 'JunoPOIBlueprintLibrary_CreateRarePOIs::UsedSlots' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_CreateRarePOIs, Result) == 0x000038, "Member 'JunoPOIBlueprintLibrary_CreateRarePOIs::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.FindBestPOISlots
// 0x0090 (0x0090 - 0x0000)
struct JunoPOIBlueprintLibrary_FindBestPOISlots final
{
public:
	TArray<struct FJunoPOIManagerSlot>            PotentialSlots;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FJunoPOIManagerSlot>            AdditionalCompareSlots;                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DesiredNumber;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DesiredMinDistance;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoPOIManagerSlot>            Result;                                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoPOIManagerSlot>            Remainder;                                         // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   WorldTileBounds;                                   // 0x0050(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EJunoBiome                                    Biome;                                             // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceMinDistance;                               // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoPOIBlueprintLibrary_FindBestPOISlots) == 0x000008, "Wrong alignment on JunoPOIBlueprintLibrary_FindBestPOISlots");
static_assert(sizeof(JunoPOIBlueprintLibrary_FindBestPOISlots) == 0x000090, "Wrong size on JunoPOIBlueprintLibrary_FindBestPOISlots");
static_assert(offsetof(JunoPOIBlueprintLibrary_FindBestPOISlots, PotentialSlots) == 0x000000, "Member 'JunoPOIBlueprintLibrary_FindBestPOISlots::PotentialSlots' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_FindBestPOISlots, AdditionalCompareSlots) == 0x000010, "Member 'JunoPOIBlueprintLibrary_FindBestPOISlots::AdditionalCompareSlots' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_FindBestPOISlots, DesiredNumber) == 0x000020, "Member 'JunoPOIBlueprintLibrary_FindBestPOISlots::DesiredNumber' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_FindBestPOISlots, DesiredMinDistance) == 0x000028, "Member 'JunoPOIBlueprintLibrary_FindBestPOISlots::DesiredMinDistance' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_FindBestPOISlots, Result) == 0x000030, "Member 'JunoPOIBlueprintLibrary_FindBestPOISlots::Result' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_FindBestPOISlots, Remainder) == 0x000040, "Member 'JunoPOIBlueprintLibrary_FindBestPOISlots::Remainder' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_FindBestPOISlots, WorldTileBounds) == 0x000050, "Member 'JunoPOIBlueprintLibrary_FindBestPOISlots::WorldTileBounds' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_FindBestPOISlots, Biome) == 0x000088, "Member 'JunoPOIBlueprintLibrary_FindBestPOISlots::Biome' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_FindBestPOISlots, bEnforceMinDistance) == 0x000089, "Member 'JunoPOIBlueprintLibrary_FindBestPOISlots::bEnforceMinDistance' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.GetMatchingPOIsFromDataRegistry
// 0x0110 (0x0110 - 0x0000)
struct JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry final
{
public:
	struct FDataRegistryType                      DataRegistry;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             Tags;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSet<EJunoPOISize>                            Sizes;                                             // 0x0058(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSet<EJunoBiome>                              Biomes;                                            // 0x00A8(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPCGJunoWorldTilePOI>           Array;                                             // 0x00F8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EJunoGetMatchingPOIsFromDataRegistryResult    Result;                                            // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoWorldTilePOIType                         Type;                                              // 0x0109(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry) == 0x000008, "Wrong alignment on JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry");
static_assert(sizeof(JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry) == 0x000110, "Wrong size on JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry");
static_assert(offsetof(JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry, DataRegistry) == 0x000000, "Member 'JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry::DataRegistry' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry, Tags) == 0x000008, "Member 'JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry::Tags' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry, Sizes) == 0x000058, "Member 'JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry::Sizes' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry, Biomes) == 0x0000A8, "Member 'JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry::Biomes' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry, Array) == 0x0000F8, "Member 'JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry::Array' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry, Result) == 0x000108, "Member 'JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry::Result' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry, Type) == 0x000109, "Member 'JunoPOIBlueprintLibrary_GetMatchingPOIsFromDataRegistry::Type' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.MarkCavePOISlotUnused
// 0x0030 (0x0030 - 0x0000)
struct JunoPOIBlueprintLibrary_MarkCavePOISlotUnused final
{
public:
	const class AActor*                           CaveSlotActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveSlotGuid;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveShellGuid;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoMarkSlotPOIUnusedResult                  Result;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoPOIBlueprintLibrary_MarkCavePOISlotUnused) == 0x000008, "Wrong alignment on JunoPOIBlueprintLibrary_MarkCavePOISlotUnused");
static_assert(sizeof(JunoPOIBlueprintLibrary_MarkCavePOISlotUnused) == 0x000030, "Wrong size on JunoPOIBlueprintLibrary_MarkCavePOISlotUnused");
static_assert(offsetof(JunoPOIBlueprintLibrary_MarkCavePOISlotUnused, CaveSlotActor) == 0x000000, "Member 'JunoPOIBlueprintLibrary_MarkCavePOISlotUnused::CaveSlotActor' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_MarkCavePOISlotUnused, CaveSlotGuid) == 0x000008, "Member 'JunoPOIBlueprintLibrary_MarkCavePOISlotUnused::CaveSlotGuid' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_MarkCavePOISlotUnused, CaveShellGuid) == 0x000018, "Member 'JunoPOIBlueprintLibrary_MarkCavePOISlotUnused::CaveShellGuid' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_MarkCavePOISlotUnused, Result) == 0x000028, "Member 'JunoPOIBlueprintLibrary_MarkCavePOISlotUnused::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.MarkPOISlotUnused
// 0x0020 (0x0020 - 0x0000)
struct JunoPOIBlueprintLibrary_MarkPOISlotUnused final
{
public:
	const class AActor*                           POISlotActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  POISlotGuid;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoMarkSlotPOIUnusedResult                  Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoPOIBlueprintLibrary_MarkPOISlotUnused) == 0x000008, "Wrong alignment on JunoPOIBlueprintLibrary_MarkPOISlotUnused");
static_assert(sizeof(JunoPOIBlueprintLibrary_MarkPOISlotUnused) == 0x000020, "Wrong size on JunoPOIBlueprintLibrary_MarkPOISlotUnused");
static_assert(offsetof(JunoPOIBlueprintLibrary_MarkPOISlotUnused, POISlotActor) == 0x000000, "Member 'JunoPOIBlueprintLibrary_MarkPOISlotUnused::POISlotActor' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_MarkPOISlotUnused, POISlotGuid) == 0x000008, "Member 'JunoPOIBlueprintLibrary_MarkPOISlotUnused::POISlotGuid' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_MarkPOISlotUnused, Result) == 0x000018, "Member 'JunoPOIBlueprintLibrary_MarkPOISlotUnused::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.QueryCavePOIState
// 0x0068 (0x0068 - 0x0000)
struct JunoPOIBlueprintLibrary_QueryCavePOIState final
{
public:
	const class AActor*                           CaveSlotActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveSlotGuid;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CaveShellGuid;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQueryPOIStateResult                          Result;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   WorldTileBounds;                                   // 0x0030(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPOIBlueprintLibrary_QueryCavePOIState) == 0x000008, "Wrong alignment on JunoPOIBlueprintLibrary_QueryCavePOIState");
static_assert(sizeof(JunoPOIBlueprintLibrary_QueryCavePOIState) == 0x000068, "Wrong size on JunoPOIBlueprintLibrary_QueryCavePOIState");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryCavePOIState, CaveSlotActor) == 0x000000, "Member 'JunoPOIBlueprintLibrary_QueryCavePOIState::CaveSlotActor' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryCavePOIState, CaveSlotGuid) == 0x000008, "Member 'JunoPOIBlueprintLibrary_QueryCavePOIState::CaveSlotGuid' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryCavePOIState, CaveShellGuid) == 0x000018, "Member 'JunoPOIBlueprintLibrary_QueryCavePOIState::CaveShellGuid' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryCavePOIState, Result) == 0x000028, "Member 'JunoPOIBlueprintLibrary_QueryCavePOIState::Result' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryCavePOIState, WorldTileBounds) == 0x000030, "Member 'JunoPOIBlueprintLibrary_QueryCavePOIState::WorldTileBounds' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.QueryPOIState
// 0x0058 (0x0058 - 0x0000)
struct JunoPOIBlueprintLibrary_QueryPOIState final
{
public:
	const class AActor*                           POISlotActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  POISlotGuid;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQueryPOIStateResult                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoPOISlotMetaData                   POISlotMetaData;                                   // 0x0019(0x0001)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   WorldTileBounds;                                   // 0x0020(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoPOIBlueprintLibrary_QueryPOIState) == 0x000008, "Wrong alignment on JunoPOIBlueprintLibrary_QueryPOIState");
static_assert(sizeof(JunoPOIBlueprintLibrary_QueryPOIState) == 0x000058, "Wrong size on JunoPOIBlueprintLibrary_QueryPOIState");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryPOIState, POISlotActor) == 0x000000, "Member 'JunoPOIBlueprintLibrary_QueryPOIState::POISlotActor' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryPOIState, POISlotGuid) == 0x000008, "Member 'JunoPOIBlueprintLibrary_QueryPOIState::POISlotGuid' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryPOIState, Result) == 0x000018, "Member 'JunoPOIBlueprintLibrary_QueryPOIState::Result' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryPOIState, POISlotMetaData) == 0x000019, "Member 'JunoPOIBlueprintLibrary_QueryPOIState::POISlotMetaData' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_QueryPOIState, WorldTileBounds) == 0x000020, "Member 'JunoPOIBlueprintLibrary_QueryPOIState::WorldTileBounds' has a wrong offset!");

// Function JunoProceduralWorld.JunoPOIBlueprintLibrary.SetPOISlotMetaDatas
// 0x0020 (0x0020 - 0x0000)
struct JunoPOIBlueprintLibrary_SetPOISlotMetaDatas final
{
public:
	const class AActor*                           POISlotActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoPOIManagerSlot>            POISlots;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FJunoPOISlotMetaData                   POISlotMetaData;                                   // 0x0018(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EJunoSetSlotPOIMetaDataResult                 Result;                                            // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JunoPOIBlueprintLibrary_SetPOISlotMetaDatas) == 0x000008, "Wrong alignment on JunoPOIBlueprintLibrary_SetPOISlotMetaDatas");
static_assert(sizeof(JunoPOIBlueprintLibrary_SetPOISlotMetaDatas) == 0x000020, "Wrong size on JunoPOIBlueprintLibrary_SetPOISlotMetaDatas");
static_assert(offsetof(JunoPOIBlueprintLibrary_SetPOISlotMetaDatas, POISlotActor) == 0x000000, "Member 'JunoPOIBlueprintLibrary_SetPOISlotMetaDatas::POISlotActor' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_SetPOISlotMetaDatas, POISlots) == 0x000008, "Member 'JunoPOIBlueprintLibrary_SetPOISlotMetaDatas::POISlots' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_SetPOISlotMetaDatas, POISlotMetaData) == 0x000018, "Member 'JunoPOIBlueprintLibrary_SetPOISlotMetaDatas::POISlotMetaData' has a wrong offset!");
static_assert(offsetof(JunoPOIBlueprintLibrary_SetPOISlotMetaDatas, Result) == 0x000019, "Member 'JunoPOIBlueprintLibrary_SetPOISlotMetaDatas::Result' has a wrong offset!");

// Function JunoProceduralWorld.JunoProceduralFoundation.AddAdditionalWorld
// 0x0020 (0x0020 - 0x0000)
struct JunoProceduralFoundation_AddAdditionalWorld final
{
public:
	TSoftObjectPtr<class UWorld>                  World;                                             // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoProceduralFoundation_AddAdditionalWorld) == 0x000008, "Wrong alignment on JunoProceduralFoundation_AddAdditionalWorld");
static_assert(sizeof(JunoProceduralFoundation_AddAdditionalWorld) == 0x000020, "Wrong size on JunoProceduralFoundation_AddAdditionalWorld");
static_assert(offsetof(JunoProceduralFoundation_AddAdditionalWorld, World) == 0x000000, "Member 'JunoProceduralFoundation_AddAdditionalWorld::World' has a wrong offset!");

// Function JunoProceduralWorld.JunoRoadAINavigationCluster.OnCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct JunoRoadAINavigationCluster_OnCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoRoadAINavigationCluster_OnCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on JunoRoadAINavigationCluster_OnCurrentPlaylistLoaded");
static_assert(sizeof(JunoRoadAINavigationCluster_OnCurrentPlaylistLoaded) == 0x000028, "Wrong size on JunoRoadAINavigationCluster_OnCurrentPlaylistLoaded");
static_assert(offsetof(JunoRoadAINavigationCluster_OnCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'JunoRoadAINavigationCluster_OnCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(JunoRoadAINavigationCluster_OnCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'JunoRoadAINavigationCluster_OnCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function JunoProceduralWorld.LandmassCluster.InitializeDentrogram
// 0x0020 (0x0020 - 0x0000)
struct LandmassCluster_InitializeDentrogram final
{
public:
	TArray<class AActor*>                         InActors;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDendrogramLeafAttributes>      InAttributes;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassCluster_InitializeDentrogram) == 0x000008, "Wrong alignment on LandmassCluster_InitializeDentrogram");
static_assert(sizeof(LandmassCluster_InitializeDentrogram) == 0x000020, "Wrong size on LandmassCluster_InitializeDentrogram");
static_assert(offsetof(LandmassCluster_InitializeDentrogram, InActors) == 0x000000, "Member 'LandmassCluster_InitializeDentrogram::InActors' has a wrong offset!");
static_assert(offsetof(LandmassCluster_InitializeDentrogram, InAttributes) == 0x000010, "Member 'LandmassCluster_InitializeDentrogram::InAttributes' has a wrong offset!");

// Function JunoProceduralWorld.LandmassCluster.K2_AddConnection
// 0x0018 (0x0018 - 0x0000)
struct LandmassCluster_K2_AddConnection final
{
public:
	class AActor*                                 LeafActorA;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LeafActorB;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassCluster_K2_AddConnection) == 0x000008, "Wrong alignment on LandmassCluster_K2_AddConnection");
static_assert(sizeof(LandmassCluster_K2_AddConnection) == 0x000018, "Wrong size on LandmassCluster_K2_AddConnection");
static_assert(offsetof(LandmassCluster_K2_AddConnection, LeafActorA) == 0x000000, "Member 'LandmassCluster_K2_AddConnection::LeafActorA' has a wrong offset!");
static_assert(offsetof(LandmassCluster_K2_AddConnection, LeafActorB) == 0x000008, "Member 'LandmassCluster_K2_AddConnection::LeafActorB' has a wrong offset!");
static_assert(offsetof(LandmassCluster_K2_AddConnection, ReturnValue) == 0x000010, "Member 'LandmassCluster_K2_AddConnection::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassCluster.GetClustersAtLevel
// 0x0018 (0x0018 - 0x0000)
struct LandmassCluster_GetClustersAtLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDendrogramClusterOutput>       ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassCluster_GetClustersAtLevel) == 0x000008, "Wrong alignment on LandmassCluster_GetClustersAtLevel");
static_assert(sizeof(LandmassCluster_GetClustersAtLevel) == 0x000018, "Wrong size on LandmassCluster_GetClustersAtLevel");
static_assert(offsetof(LandmassCluster_GetClustersAtLevel, InLevel) == 0x000000, "Member 'LandmassCluster_GetClustersAtLevel::InLevel' has a wrong offset!");
static_assert(offsetof(LandmassCluster_GetClustersAtLevel, ReturnValue) == 0x000008, "Member 'LandmassCluster_GetClustersAtLevel::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassCluster.GetLeafCount
// 0x0004 (0x0004 - 0x0000)
struct LandmassCluster_GetLeafCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassCluster_GetLeafCount) == 0x000004, "Wrong alignment on LandmassCluster_GetLeafCount");
static_assert(sizeof(LandmassCluster_GetLeafCount) == 0x000004, "Wrong size on LandmassCluster_GetLeafCount");
static_assert(offsetof(LandmassCluster_GetLeafCount, ReturnValue) == 0x000000, "Member 'LandmassCluster_GetLeafCount::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassCluster.GetTopLevel
// 0x0004 (0x0004 - 0x0000)
struct LandmassCluster_GetTopLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassCluster_GetTopLevel) == 0x000004, "Wrong alignment on LandmassCluster_GetTopLevel");
static_assert(sizeof(LandmassCluster_GetTopLevel) == 0x000004, "Wrong size on LandmassCluster_GetTopLevel");
static_assert(offsetof(LandmassCluster_GetTopLevel, ReturnValue) == 0x000000, "Member 'LandmassCluster_GetTopLevel::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRouteDefinition.FindLocationClosestToWorldLocation
// 0x0038 (0x0038 - 0x0000)
struct ProceduralRouteDefinition_FindLocationClosestToWorldLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistanceSqr;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRouteDefinition_FindLocationClosestToWorldLocation) == 0x000008, "Wrong alignment on ProceduralRouteDefinition_FindLocationClosestToWorldLocation");
static_assert(sizeof(ProceduralRouteDefinition_FindLocationClosestToWorldLocation) == 0x000038, "Wrong size on ProceduralRouteDefinition_FindLocationClosestToWorldLocation");
static_assert(offsetof(ProceduralRouteDefinition_FindLocationClosestToWorldLocation, WorldLocation) == 0x000000, "Member 'ProceduralRouteDefinition_FindLocationClosestToWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(ProceduralRouteDefinition_FindLocationClosestToWorldLocation, OutDistanceSqr) == 0x000018, "Member 'ProceduralRouteDefinition_FindLocationClosestToWorldLocation::OutDistanceSqr' has a wrong offset!");
static_assert(offsetof(ProceduralRouteDefinition_FindLocationClosestToWorldLocation, ReturnValue) == 0x000020, "Member 'ProceduralRouteDefinition_FindLocationClosestToWorldLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.AddAvoidancePrimitive
// 0x0030 (0x0030 - 0x0000)
struct LandmassProceduralRoute_AddAvoidancePrimitive final
{
public:
	struct FRouteAvoidancePrimitive               InPrimitive;                                       // 0x0000(0x0030)(ConstParm, Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_AddAvoidancePrimitive) == 0x000008, "Wrong alignment on LandmassProceduralRoute_AddAvoidancePrimitive");
static_assert(sizeof(LandmassProceduralRoute_AddAvoidancePrimitive) == 0x000030, "Wrong size on LandmassProceduralRoute_AddAvoidancePrimitive");
static_assert(offsetof(LandmassProceduralRoute_AddAvoidancePrimitive, InPrimitive) == 0x000000, "Member 'LandmassProceduralRoute_AddAvoidancePrimitive::InPrimitive' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.AddConnection
// 0x0018 (0x0018 - 0x0000)
struct LandmassProceduralRoute_AddConnection final
{
public:
	class AActor*                                 LeafActorA;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LeafActorB;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassProceduralRoute_AddConnection) == 0x000008, "Wrong alignment on LandmassProceduralRoute_AddConnection");
static_assert(sizeof(LandmassProceduralRoute_AddConnection) == 0x000018, "Wrong size on LandmassProceduralRoute_AddConnection");
static_assert(offsetof(LandmassProceduralRoute_AddConnection, LeafActorA) == 0x000000, "Member 'LandmassProceduralRoute_AddConnection::LeafActorA' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_AddConnection, LeafActorB) == 0x000008, "Member 'LandmassProceduralRoute_AddConnection::LeafActorB' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_AddConnection, ReturnValue) == 0x000010, "Member 'LandmassProceduralRoute_AddConnection::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.AddControlPoint
// 0x0020 (0x0020 - 0x0000)
struct LandmassProceduralRoute_AddControlPoint final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassProceduralRoute_AddControlPoint) == 0x000008, "Wrong alignment on LandmassProceduralRoute_AddControlPoint");
static_assert(sizeof(LandmassProceduralRoute_AddControlPoint) == 0x000020, "Wrong size on LandmassProceduralRoute_AddControlPoint");
static_assert(offsetof(LandmassProceduralRoute_AddControlPoint, WorldPosition) == 0x000000, "Member 'LandmassProceduralRoute_AddControlPoint::WorldPosition' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_AddControlPoint, ReturnValue) == 0x000018, "Member 'LandmassProceduralRoute_AddControlPoint::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.BeginGeneratePCG
// 0x0010 (0x0010 - 0x0000)
struct LandmassProceduralRoute_BeginGeneratePCG final
{
public:
	TArray<struct FLandmassPCGRouteInput>         Inputs;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_BeginGeneratePCG) == 0x000008, "Wrong alignment on LandmassProceduralRoute_BeginGeneratePCG");
static_assert(sizeof(LandmassProceduralRoute_BeginGeneratePCG) == 0x000010, "Wrong size on LandmassProceduralRoute_BeginGeneratePCG");
static_assert(offsetof(LandmassProceduralRoute_BeginGeneratePCG, Inputs) == 0x000000, "Member 'LandmassProceduralRoute_BeginGeneratePCG::Inputs' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.ClearCreatedLandscapeSplines
// 0x0001 (0x0001 - 0x0000)
struct LandmassProceduralRoute_ClearCreatedLandscapeSplines final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_ClearCreatedLandscapeSplines) == 0x000001, "Wrong alignment on LandmassProceduralRoute_ClearCreatedLandscapeSplines");
static_assert(sizeof(LandmassProceduralRoute_ClearCreatedLandscapeSplines) == 0x000001, "Wrong size on LandmassProceduralRoute_ClearCreatedLandscapeSplines");
static_assert(offsetof(LandmassProceduralRoute_ClearCreatedLandscapeSplines, ReturnValue) == 0x000000, "Member 'LandmassProceduralRoute_ClearCreatedLandscapeSplines::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.CustomTick
// 0x0004 (0x0004 - 0x0000)
struct LandmassProceduralRoute_CustomTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_CustomTick) == 0x000004, "Wrong alignment on LandmassProceduralRoute_CustomTick");
static_assert(sizeof(LandmassProceduralRoute_CustomTick) == 0x000004, "Wrong size on LandmassProceduralRoute_CustomTick");
static_assert(offsetof(LandmassProceduralRoute_CustomTick, DeltaSeconds) == 0x000000, "Member 'LandmassProceduralRoute_CustomTick::DeltaSeconds' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.FinishRoute
// 0x0008 (0x0008 - 0x0000)
struct LandmassProceduralRoute_FinishRoute final
{
public:
	int32                                         OutRouteIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassProceduralRoute_FinishRoute) == 0x000004, "Wrong alignment on LandmassProceduralRoute_FinishRoute");
static_assert(sizeof(LandmassProceduralRoute_FinishRoute) == 0x000008, "Wrong size on LandmassProceduralRoute_FinishRoute");
static_assert(offsetof(LandmassProceduralRoute_FinishRoute, OutRouteIndex) == 0x000000, "Member 'LandmassProceduralRoute_FinishRoute::OutRouteIndex' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_FinishRoute, ReturnValue) == 0x000004, "Member 'LandmassProceduralRoute_FinishRoute::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.GenerateCluster
// 0x0001 (0x0001 - 0x0000)
struct LandmassProceduralRoute_GenerateCluster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_GenerateCluster) == 0x000001, "Wrong alignment on LandmassProceduralRoute_GenerateCluster");
static_assert(sizeof(LandmassProceduralRoute_GenerateCluster) == 0x000001, "Wrong size on LandmassProceduralRoute_GenerateCluster");
static_assert(offsetof(LandmassProceduralRoute_GenerateCluster, ReturnValue) == 0x000000, "Member 'LandmassProceduralRoute_GenerateCluster::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.InitLandmassCluster
// 0x0020 (0x0020 - 0x0000)
struct LandmassProceduralRoute_InitLandmassCluster final
{
public:
	TArray<class AActor*>                         InActors;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDendrogramLeafAttributes>      InLeafAttributes;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_InitLandmassCluster) == 0x000008, "Wrong alignment on LandmassProceduralRoute_InitLandmassCluster");
static_assert(sizeof(LandmassProceduralRoute_InitLandmassCluster) == 0x000020, "Wrong size on LandmassProceduralRoute_InitLandmassCluster");
static_assert(offsetof(LandmassProceduralRoute_InitLandmassCluster, InActors) == 0x000000, "Member 'LandmassProceduralRoute_InitLandmassCluster::InActors' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_InitLandmassCluster, InLeafAttributes) == 0x000010, "Member 'LandmassProceduralRoute_InitLandmassCluster::InLeafAttributes' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.InitLandmassClusterLeavesOnly
// 0x0010 (0x0010 - 0x0000)
struct LandmassProceduralRoute_InitLandmassClusterLeavesOnly final
{
public:
	TArray<struct FDendrogramLeafAttributes>      InLeafAttributes;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_InitLandmassClusterLeavesOnly) == 0x000008, "Wrong alignment on LandmassProceduralRoute_InitLandmassClusterLeavesOnly");
static_assert(sizeof(LandmassProceduralRoute_InitLandmassClusterLeavesOnly) == 0x000010, "Wrong size on LandmassProceduralRoute_InitLandmassClusterLeavesOnly");
static_assert(offsetof(LandmassProceduralRoute_InitLandmassClusterLeavesOnly, InLeafAttributes) == 0x000000, "Member 'LandmassProceduralRoute_InitLandmassClusterLeavesOnly::InLeafAttributes' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.PutIntoDormancy
// 0x0001 (0x0001 - 0x0000)
struct LandmassProceduralRoute_PutIntoDormancy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_PutIntoDormancy) == 0x000001, "Wrong alignment on LandmassProceduralRoute_PutIntoDormancy");
static_assert(sizeof(LandmassProceduralRoute_PutIntoDormancy) == 0x000001, "Wrong size on LandmassProceduralRoute_PutIntoDormancy");
static_assert(offsetof(LandmassProceduralRoute_PutIntoDormancy, ReturnValue) == 0x000000, "Member 'LandmassProceduralRoute_PutIntoDormancy::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.ResetAllAndInitialize
// 0x0002 (0x0002 - 0x0000)
struct LandmassProceduralRoute_ResetAllAndInitialize final
{
public:
	bool                                          bResetAllLandscapeSplines;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_ResetAllAndInitialize) == 0x000001, "Wrong alignment on LandmassProceduralRoute_ResetAllAndInitialize");
static_assert(sizeof(LandmassProceduralRoute_ResetAllAndInitialize) == 0x000002, "Wrong size on LandmassProceduralRoute_ResetAllAndInitialize");
static_assert(offsetof(LandmassProceduralRoute_ResetAllAndInitialize, bResetAllLandscapeSplines) == 0x000000, "Member 'LandmassProceduralRoute_ResetAllAndInitialize::bResetAllLandscapeSplines' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_ResetAllAndInitialize, ReturnValue) == 0x000001, "Member 'LandmassProceduralRoute_ResetAllAndInitialize::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.SetCurrentRouteGenerationState
// 0x0001 (0x0001 - 0x0000)
struct LandmassProceduralRoute_SetCurrentRouteGenerationState final
{
public:
	ERouteGenerationState                         InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_SetCurrentRouteGenerationState) == 0x000001, "Wrong alignment on LandmassProceduralRoute_SetCurrentRouteGenerationState");
static_assert(sizeof(LandmassProceduralRoute_SetCurrentRouteGenerationState) == 0x000001, "Wrong size on LandmassProceduralRoute_SetCurrentRouteGenerationState");
static_assert(offsetof(LandmassProceduralRoute_SetCurrentRouteGenerationState, InState) == 0x000000, "Member 'LandmassProceduralRoute_SetCurrentRouteGenerationState::InState' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.SetEditorTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct LandmassProceduralRoute_SetEditorTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_SetEditorTickEnabled) == 0x000001, "Wrong alignment on LandmassProceduralRoute_SetEditorTickEnabled");
static_assert(sizeof(LandmassProceduralRoute_SetEditorTickEnabled) == 0x000001, "Wrong size on LandmassProceduralRoute_SetEditorTickEnabled");
static_assert(offsetof(LandmassProceduralRoute_SetEditorTickEnabled, bEnabled) == 0x000000, "Member 'LandmassProceduralRoute_SetEditorTickEnabled::bEnabled' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.SetWidthAtPointIndex
// 0x0008 (0x0008 - 0x0000)
struct LandmassProceduralRoute_SetWidthAtPointIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewWidth;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_SetWidthAtPointIndex) == 0x000004, "Wrong alignment on LandmassProceduralRoute_SetWidthAtPointIndex");
static_assert(sizeof(LandmassProceduralRoute_SetWidthAtPointIndex) == 0x000008, "Wrong size on LandmassProceduralRoute_SetWidthAtPointIndex");
static_assert(offsetof(LandmassProceduralRoute_SetWidthAtPointIndex, Index_0) == 0x000000, "Member 'LandmassProceduralRoute_SetWidthAtPointIndex::Index_0' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_SetWidthAtPointIndex, NewWidth) == 0x000004, "Member 'LandmassProceduralRoute_SetWidthAtPointIndex::NewWidth' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.SetWidthForLastAddedPoint
// 0x0004 (0x0004 - 0x0000)
struct LandmassProceduralRoute_SetWidthForLastAddedPoint final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_SetWidthForLastAddedPoint) == 0x000004, "Wrong alignment on LandmassProceduralRoute_SetWidthForLastAddedPoint");
static_assert(sizeof(LandmassProceduralRoute_SetWidthForLastAddedPoint) == 0x000004, "Wrong size on LandmassProceduralRoute_SetWidthForLastAddedPoint");
static_assert(offsetof(LandmassProceduralRoute_SetWidthForLastAddedPoint, NewWidth) == 0x000000, "Member 'LandmassProceduralRoute_SetWidthForLastAddedPoint::NewWidth' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.WakeUpDormantRoute
// 0x0001 (0x0001 - 0x0000)
struct LandmassProceduralRoute_WakeUpDormantRoute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_WakeUpDormantRoute) == 0x000001, "Wrong alignment on LandmassProceduralRoute_WakeUpDormantRoute");
static_assert(sizeof(LandmassProceduralRoute_WakeUpDormantRoute) == 0x000001, "Wrong size on LandmassProceduralRoute_WakeUpDormantRoute");
static_assert(offsetof(LandmassProceduralRoute_WakeUpDormantRoute, ReturnValue) == 0x000000, "Member 'LandmassProceduralRoute_WakeUpDormantRoute::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.GetCurrentRouteGenerationState
// 0x0001 (0x0001 - 0x0000)
struct LandmassProceduralRoute_GetCurrentRouteGenerationState final
{
public:
	ERouteGenerationState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_GetCurrentRouteGenerationState) == 0x000001, "Wrong alignment on LandmassProceduralRoute_GetCurrentRouteGenerationState");
static_assert(sizeof(LandmassProceduralRoute_GetCurrentRouteGenerationState) == 0x000001, "Wrong size on LandmassProceduralRoute_GetCurrentRouteGenerationState");
static_assert(offsetof(LandmassProceduralRoute_GetCurrentRouteGenerationState, ReturnValue) == 0x000000, "Member 'LandmassProceduralRoute_GetCurrentRouteGenerationState::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.GetLandmassCluster
// 0x0008 (0x0008 - 0x0000)
struct LandmassProceduralRoute_GetLandmassCluster final
{
public:
	class ULandmassCluster*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_GetLandmassCluster) == 0x000008, "Wrong alignment on LandmassProceduralRoute_GetLandmassCluster");
static_assert(sizeof(LandmassProceduralRoute_GetLandmassCluster) == 0x000008, "Wrong size on LandmassProceduralRoute_GetLandmassCluster");
static_assert(offsetof(LandmassProceduralRoute_GetLandmassCluster, ReturnValue) == 0x000000, "Member 'LandmassProceduralRoute_GetLandmassCluster::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.GetRouteDefinitions
// 0x0010 (0x0010 - 0x0000)
struct LandmassProceduralRoute_GetRouteDefinitions final
{
public:
	TArray<class UProceduralRouteDefinition*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LandmassProceduralRoute_GetRouteDefinitions) == 0x000008, "Wrong alignment on LandmassProceduralRoute_GetRouteDefinitions");
static_assert(sizeof(LandmassProceduralRoute_GetRouteDefinitions) == 0x000010, "Wrong size on LandmassProceduralRoute_GetRouteDefinitions");
static_assert(offsetof(LandmassProceduralRoute_GetRouteDefinitions, ReturnValue) == 0x000000, "Member 'LandmassProceduralRoute_GetRouteDefinitions::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.IsInsideAnyLake
// 0x0020 (0x0020 - 0x0000)
struct LandmassProceduralRoute_IsInsideAnyLake final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassProceduralRoute_IsInsideAnyLake) == 0x000008, "Wrong alignment on LandmassProceduralRoute_IsInsideAnyLake");
static_assert(sizeof(LandmassProceduralRoute_IsInsideAnyLake) == 0x000020, "Wrong size on LandmassProceduralRoute_IsInsideAnyLake");
static_assert(offsetof(LandmassProceduralRoute_IsInsideAnyLake, Location) == 0x000000, "Member 'LandmassProceduralRoute_IsInsideAnyLake::Location' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_IsInsideAnyLake, Tolerance) == 0x000018, "Member 'LandmassProceduralRoute_IsInsideAnyLake::Tolerance' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_IsInsideAnyLake, ReturnValue) == 0x00001C, "Member 'LandmassProceduralRoute_IsInsideAnyLake::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.IsInsideAnyLakeAccurate
// 0x0020 (0x0020 - 0x0000)
struct LandmassProceduralRoute_IsInsideAnyLakeAccurate final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassProceduralRoute_IsInsideAnyLakeAccurate) == 0x000008, "Wrong alignment on LandmassProceduralRoute_IsInsideAnyLakeAccurate");
static_assert(sizeof(LandmassProceduralRoute_IsInsideAnyLakeAccurate) == 0x000020, "Wrong size on LandmassProceduralRoute_IsInsideAnyLakeAccurate");
static_assert(offsetof(LandmassProceduralRoute_IsInsideAnyLakeAccurate, Location) == 0x000000, "Member 'LandmassProceduralRoute_IsInsideAnyLakeAccurate::Location' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_IsInsideAnyLakeAccurate, ReturnValue) == 0x000018, "Member 'LandmassProceduralRoute_IsInsideAnyLakeAccurate::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.IsInsideLake
// 0x0028 (0x0028 - 0x0000)
struct LandmassProceduralRoute_IsInsideLake final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AWaterBody*                       InLake;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dilation;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassProceduralRoute_IsInsideLake) == 0x000008, "Wrong alignment on LandmassProceduralRoute_IsInsideLake");
static_assert(sizeof(LandmassProceduralRoute_IsInsideLake) == 0x000028, "Wrong size on LandmassProceduralRoute_IsInsideLake");
static_assert(offsetof(LandmassProceduralRoute_IsInsideLake, Location) == 0x000000, "Member 'LandmassProceduralRoute_IsInsideLake::Location' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_IsInsideLake, InLake) == 0x000018, "Member 'LandmassProceduralRoute_IsInsideLake::InLake' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_IsInsideLake, Dilation) == 0x000020, "Member 'LandmassProceduralRoute_IsInsideLake::Dilation' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_IsInsideLake, ReturnValue) == 0x000024, "Member 'LandmassProceduralRoute_IsInsideLake::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.LandmassProceduralRoute.IsInsideOcean
// 0x0020 (0x0020 - 0x0000)
struct LandmassProceduralRoute_IsInsideOcean final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LandmassProceduralRoute_IsInsideOcean) == 0x000008, "Wrong alignment on LandmassProceduralRoute_IsInsideOcean");
static_assert(sizeof(LandmassProceduralRoute_IsInsideOcean) == 0x000020, "Wrong size on LandmassProceduralRoute_IsInsideOcean");
static_assert(offsetof(LandmassProceduralRoute_IsInsideOcean, Location) == 0x000000, "Member 'LandmassProceduralRoute_IsInsideOcean::Location' has a wrong offset!");
static_assert(offsetof(LandmassProceduralRoute_IsInsideOcean, ReturnValue) == 0x000018, "Member 'LandmassProceduralRoute_IsInsideOcean::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRiverDefinition.GetWaterBodyActor
// 0x0008 (0x0008 - 0x0000)
struct ProceduralRiverDefinition_GetWaterBodyActor final
{
public:
	class AWaterBody*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRiverDefinition_GetWaterBodyActor) == 0x000008, "Wrong alignment on ProceduralRiverDefinition_GetWaterBodyActor");
static_assert(sizeof(ProceduralRiverDefinition_GetWaterBodyActor) == 0x000008, "Wrong size on ProceduralRiverDefinition_GetWaterBodyActor");
static_assert(offsetof(ProceduralRiverDefinition_GetWaterBodyActor, ReturnValue) == 0x000000, "Member 'ProceduralRiverDefinition_GetWaterBodyActor::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRiverDefinition.GetWaterSpline
// 0x0008 (0x0008 - 0x0000)
struct ProceduralRiverDefinition_GetWaterSpline final
{
public:
	class UWaterSplineComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRiverDefinition_GetWaterSpline) == 0x000008, "Wrong alignment on ProceduralRiverDefinition_GetWaterSpline");
static_assert(sizeof(ProceduralRiverDefinition_GetWaterSpline) == 0x000008, "Wrong size on ProceduralRiverDefinition_GetWaterSpline");
static_assert(offsetof(ProceduralRiverDefinition_GetWaterSpline, ReturnValue) == 0x000000, "Member 'ProceduralRiverDefinition_GetWaterSpline::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetAudioIntensityAtDistanceAlongSpline
// 0x0010 (0x0010 - 0x0000)
struct ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline final
{
public:
	class UWaterSplineComponent*                  WaterSplineComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline) == 0x000008, "Wrong alignment on ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline");
static_assert(sizeof(ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline) == 0x000010, "Wrong size on ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline");
static_assert(offsetof(ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline, WaterSplineComponent) == 0x000000, "Member 'ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline::WaterSplineComponent' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline, DistanceAlongSpline) == 0x000008, "Member 'ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline, ReturnValue) == 0x00000C, "Member 'ProceduralRivers_GetAudioIntensityAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetDepthAtDistanceAlongSpline
// 0x0010 (0x0010 - 0x0000)
struct ProceduralRivers_GetDepthAtDistanceAlongSpline final
{
public:
	class UWaterSplineComponent*                  WaterSplineComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_GetDepthAtDistanceAlongSpline) == 0x000008, "Wrong alignment on ProceduralRivers_GetDepthAtDistanceAlongSpline");
static_assert(sizeof(ProceduralRivers_GetDepthAtDistanceAlongSpline) == 0x000010, "Wrong size on ProceduralRivers_GetDepthAtDistanceAlongSpline");
static_assert(offsetof(ProceduralRivers_GetDepthAtDistanceAlongSpline, WaterSplineComponent) == 0x000000, "Member 'ProceduralRivers_GetDepthAtDistanceAlongSpline::WaterSplineComponent' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetDepthAtDistanceAlongSpline, DistanceAlongSpline) == 0x000008, "Member 'ProceduralRivers_GetDepthAtDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetDepthAtDistanceAlongSpline, ReturnValue) == 0x00000C, "Member 'ProceduralRivers_GetDepthAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetHalfWidthAtDistanceAlongSpline
// 0x0010 (0x0010 - 0x0000)
struct ProceduralRivers_GetHalfWidthAtDistanceAlongSpline final
{
public:
	class UWaterSplineComponent*                  WaterSplineComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_GetHalfWidthAtDistanceAlongSpline) == 0x000008, "Wrong alignment on ProceduralRivers_GetHalfWidthAtDistanceAlongSpline");
static_assert(sizeof(ProceduralRivers_GetHalfWidthAtDistanceAlongSpline) == 0x000010, "Wrong size on ProceduralRivers_GetHalfWidthAtDistanceAlongSpline");
static_assert(offsetof(ProceduralRivers_GetHalfWidthAtDistanceAlongSpline, WaterSplineComponent) == 0x000000, "Member 'ProceduralRivers_GetHalfWidthAtDistanceAlongSpline::WaterSplineComponent' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetHalfWidthAtDistanceAlongSpline, DistanceAlongSpline) == 0x000008, "Member 'ProceduralRivers_GetHalfWidthAtDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetHalfWidthAtDistanceAlongSpline, ReturnValue) == 0x00000C, "Member 'ProceduralRivers_GetHalfWidthAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetProceduralRiverActorTag
// 0x0004 (0x0004 - 0x0000)
struct ProceduralRivers_GetProceduralRiverActorTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_GetProceduralRiverActorTag) == 0x000004, "Wrong alignment on ProceduralRivers_GetProceduralRiverActorTag");
static_assert(sizeof(ProceduralRivers_GetProceduralRiverActorTag) == 0x000004, "Wrong size on ProceduralRivers_GetProceduralRiverActorTag");
static_assert(offsetof(ProceduralRivers_GetProceduralRiverActorTag, ReturnValue) == 0x000000, "Member 'ProceduralRivers_GetProceduralRiverActorTag::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetVelocityScalarAtDistanceAlongSpline
// 0x0010 (0x0010 - 0x0000)
struct ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline final
{
public:
	class UWaterSplineComponent*                  WaterSplineComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline) == 0x000008, "Wrong alignment on ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline");
static_assert(sizeof(ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline) == 0x000010, "Wrong size on ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline");
static_assert(offsetof(ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline, WaterSplineComponent) == 0x000000, "Member 'ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline::WaterSplineComponent' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline, DistanceAlongSpline) == 0x000008, "Member 'ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline, ReturnValue) == 0x00000C, "Member 'ProceduralRivers_GetVelocityScalarAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetRiverMergeSearchNeighborGridSize
// 0x0004 (0x0004 - 0x0000)
struct ProceduralRivers_GetRiverMergeSearchNeighborGridSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_GetRiverMergeSearchNeighborGridSize) == 0x000004, "Wrong alignment on ProceduralRivers_GetRiverMergeSearchNeighborGridSize");
static_assert(sizeof(ProceduralRivers_GetRiverMergeSearchNeighborGridSize) == 0x000004, "Wrong size on ProceduralRivers_GetRiverMergeSearchNeighborGridSize");
static_assert(offsetof(ProceduralRivers_GetRiverMergeSearchNeighborGridSize, ReturnValue) == 0x000000, "Member 'ProceduralRivers_GetRiverMergeSearchNeighborGridSize::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.InitializeNeighborGrid
// 0x0001 (0x0001 - 0x0000)
struct ProceduralRivers_InitializeNeighborGrid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_InitializeNeighborGrid) == 0x000001, "Wrong alignment on ProceduralRivers_InitializeNeighborGrid");
static_assert(sizeof(ProceduralRivers_InitializeNeighborGrid) == 0x000001, "Wrong size on ProceduralRivers_InitializeNeighborGrid");
static_assert(offsetof(ProceduralRivers_InitializeNeighborGrid, ReturnValue) == 0x000000, "Member 'ProceduralRivers_InitializeNeighborGrid::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.SetRiverTier
// 0x0001 (0x0001 - 0x0000)
struct ProceduralRivers_SetRiverTier final
{
public:
	ELandmassRiverTier                            InRiverTier;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_SetRiverTier) == 0x000001, "Wrong alignment on ProceduralRivers_SetRiverTier");
static_assert(sizeof(ProceduralRivers_SetRiverTier) == 0x000001, "Wrong size on ProceduralRivers_SetRiverTier");
static_assert(offsetof(ProceduralRivers_SetRiverTier, InRiverTier) == 0x000000, "Member 'ProceduralRivers_SetRiverTier::InRiverTier' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.SurfaceLocationOverride
// 0x0038 (0x0038 - 0x0000)
struct ProceduralRivers_SurfaceLocationOverride final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsOverriden;                                   // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_SurfaceLocationOverride) == 0x000008, "Wrong alignment on ProceduralRivers_SurfaceLocationOverride");
static_assert(sizeof(ProceduralRivers_SurfaceLocationOverride) == 0x000038, "Wrong size on ProceduralRivers_SurfaceLocationOverride");
static_assert(offsetof(ProceduralRivers_SurfaceLocationOverride, InLocation) == 0x000000, "Member 'ProceduralRivers_SurfaceLocationOverride::InLocation' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_SurfaceLocationOverride, bOutIsOverriden) == 0x000018, "Member 'ProceduralRivers_SurfaceLocationOverride::bOutIsOverriden' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_SurfaceLocationOverride, ReturnValue) == 0x000020, "Member 'ProceduralRivers_SurfaceLocationOverride::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetAvailableSourceAnchors
// 0x0010 (0x0010 - 0x0000)
struct ProceduralRivers_GetAvailableSourceAnchors final
{
public:
	TArray<struct FProceduralRiverAnchor>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_GetAvailableSourceAnchors) == 0x000008, "Wrong alignment on ProceduralRivers_GetAvailableSourceAnchors");
static_assert(sizeof(ProceduralRivers_GetAvailableSourceAnchors) == 0x000010, "Wrong size on ProceduralRivers_GetAvailableSourceAnchors");
static_assert(offsetof(ProceduralRivers_GetAvailableSourceAnchors, ReturnValue) == 0x000000, "Member 'ProceduralRivers_GetAvailableSourceAnchors::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetAvailableTargetAnchors
// 0x0010 (0x0010 - 0x0000)
struct ProceduralRivers_GetAvailableTargetAnchors final
{
public:
	TArray<struct FProceduralRiverAnchor>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_GetAvailableTargetAnchors) == 0x000008, "Wrong alignment on ProceduralRivers_GetAvailableTargetAnchors");
static_assert(sizeof(ProceduralRivers_GetAvailableTargetAnchors) == 0x000010, "Wrong size on ProceduralRivers_GetAvailableTargetAnchors");
static_assert(offsetof(ProceduralRivers_GetAvailableTargetAnchors, ReturnValue) == 0x000000, "Member 'ProceduralRivers_GetAvailableTargetAnchors::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetGenerationRules
// 0x0640 (0x0640 - 0x0000)
struct ProceduralRivers_GetGenerationRules final
{
public:
	ELandmassRiverTier                            InRiverTier;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProceduralRiverGenRules               OutRules;                                          // 0x0008(0x0630)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0638(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProceduralRivers_GetGenerationRules) == 0x000008, "Wrong alignment on ProceduralRivers_GetGenerationRules");
static_assert(sizeof(ProceduralRivers_GetGenerationRules) == 0x000640, "Wrong size on ProceduralRivers_GetGenerationRules");
static_assert(offsetof(ProceduralRivers_GetGenerationRules, InRiverTier) == 0x000000, "Member 'ProceduralRivers_GetGenerationRules::InRiverTier' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetGenerationRules, OutRules) == 0x000008, "Member 'ProceduralRivers_GetGenerationRules::OutRules' has a wrong offset!");
static_assert(offsetof(ProceduralRivers_GetGenerationRules, ReturnValue) == 0x000638, "Member 'ProceduralRivers_GetGenerationRules::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRivers.GetRiverDefinitions
// 0x0010 (0x0010 - 0x0000)
struct ProceduralRivers_GetRiverDefinitions final
{
public:
	TArray<class UProceduralRiverDefinition*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRivers_GetRiverDefinitions) == 0x000008, "Wrong alignment on ProceduralRivers_GetRiverDefinitions");
static_assert(sizeof(ProceduralRivers_GetRiverDefinitions) == 0x000010, "Wrong size on ProceduralRivers_GetRiverDefinitions");
static_assert(offsetof(ProceduralRivers_GetRiverDefinitions, ReturnValue) == 0x000000, "Member 'ProceduralRivers_GetRiverDefinitions::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.EvaluateRouteAtLength
// 0x0148 (0x0148 - 0x0000)
struct ProceduralRoads_EvaluateRouteAtLength final
{
public:
	const class UProceduralRoadDefinition*        InRoute;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLength;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransformToWorld;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSegmentInterpResult                   ReturnValue;                                       // 0x0010(0x0138)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_EvaluateRouteAtLength) == 0x000008, "Wrong alignment on ProceduralRoads_EvaluateRouteAtLength");
static_assert(sizeof(ProceduralRoads_EvaluateRouteAtLength) == 0x000148, "Wrong size on ProceduralRoads_EvaluateRouteAtLength");
static_assert(offsetof(ProceduralRoads_EvaluateRouteAtLength, InRoute) == 0x000000, "Member 'ProceduralRoads_EvaluateRouteAtLength::InRoute' has a wrong offset!");
static_assert(offsetof(ProceduralRoads_EvaluateRouteAtLength, InLength) == 0x000008, "Member 'ProceduralRoads_EvaluateRouteAtLength::InLength' has a wrong offset!");
static_assert(offsetof(ProceduralRoads_EvaluateRouteAtLength, bTransformToWorld) == 0x00000C, "Member 'ProceduralRoads_EvaluateRouteAtLength::bTransformToWorld' has a wrong offset!");
static_assert(offsetof(ProceduralRoads_EvaluateRouteAtLength, ReturnValue) == 0x000010, "Member 'ProceduralRoads_EvaluateRouteAtLength::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.GetProceduralRoadActorTag
// 0x0004 (0x0004 - 0x0000)
struct ProceduralRoads_GetProceduralRoadActorTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_GetProceduralRoadActorTag) == 0x000004, "Wrong alignment on ProceduralRoads_GetProceduralRoadActorTag");
static_assert(sizeof(ProceduralRoads_GetProceduralRoadActorTag) == 0x000004, "Wrong size on ProceduralRoads_GetProceduralRoadActorTag");
static_assert(offsetof(ProceduralRoads_GetProceduralRoadActorTag, ReturnValue) == 0x000000, "Member 'ProceduralRoads_GetProceduralRoadActorTag::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.GetProceduralRoadLoopAnchorTag
// 0x0008 (0x0008 - 0x0000)
struct ProceduralRoads_GetProceduralRoadLoopAnchorTag final
{
public:
	int32                                         LoopIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_GetProceduralRoadLoopAnchorTag) == 0x000004, "Wrong alignment on ProceduralRoads_GetProceduralRoadLoopAnchorTag");
static_assert(sizeof(ProceduralRoads_GetProceduralRoadLoopAnchorTag) == 0x000008, "Wrong size on ProceduralRoads_GetProceduralRoadLoopAnchorTag");
static_assert(offsetof(ProceduralRoads_GetProceduralRoadLoopAnchorTag, LoopIndex) == 0x000000, "Member 'ProceduralRoads_GetProceduralRoadLoopAnchorTag::LoopIndex' has a wrong offset!");
static_assert(offsetof(ProceduralRoads_GetProceduralRoadLoopAnchorTag, ReturnValue) == 0x000004, "Member 'ProceduralRoads_GetProceduralRoadLoopAnchorTag::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.EnableOverrideGenRules
// 0x0138 (0x0138 - 0x0000)
struct ProceduralRoads_EnableOverrideGenRules final
{
public:
	struct FProceduralRoadGenRules                InOverrideGenRules;                                // 0x0000(0x0138)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_EnableOverrideGenRules) == 0x000008, "Wrong alignment on ProceduralRoads_EnableOverrideGenRules");
static_assert(sizeof(ProceduralRoads_EnableOverrideGenRules) == 0x000138, "Wrong size on ProceduralRoads_EnableOverrideGenRules");
static_assert(offsetof(ProceduralRoads_EnableOverrideGenRules, InOverrideGenRules) == 0x000000, "Member 'ProceduralRoads_EnableOverrideGenRules::InOverrideGenRules' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.GetAllControlPoints
// 0x0010 (0x0010 - 0x0000)
struct ProceduralRoads_GetAllControlPoints final
{
public:
	TArray<class ULandscapeSplineControlPoint*>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_GetAllControlPoints) == 0x000008, "Wrong alignment on ProceduralRoads_GetAllControlPoints");
static_assert(sizeof(ProceduralRoads_GetAllControlPoints) == 0x000010, "Wrong size on ProceduralRoads_GetAllControlPoints");
static_assert(offsetof(ProceduralRoads_GetAllControlPoints, ReturnValue) == 0x000000, "Member 'ProceduralRoads_GetAllControlPoints::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.InitializeNeighborGrid
// 0x0001 (0x0001 - 0x0000)
struct ProceduralRoads_InitializeNeighborGrid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_InitializeNeighborGrid) == 0x000001, "Wrong alignment on ProceduralRoads_InitializeNeighborGrid");
static_assert(sizeof(ProceduralRoads_InitializeNeighborGrid) == 0x000001, "Wrong size on ProceduralRoads_InitializeNeighborGrid");
static_assert(offsetof(ProceduralRoads_InitializeNeighborGrid, ReturnValue) == 0x000000, "Member 'ProceduralRoads_InitializeNeighborGrid::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.K2_GetRoadGridDataAtLocation
// 0x0028 (0x0028 - 0x0000)
struct ProceduralRoads_K2_GetRoadGridDataAtLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_K2_GetRoadGridDataAtLocation) == 0x000008, "Wrong alignment on ProceduralRoads_K2_GetRoadGridDataAtLocation");
static_assert(sizeof(ProceduralRoads_K2_GetRoadGridDataAtLocation) == 0x000028, "Wrong size on ProceduralRoads_K2_GetRoadGridDataAtLocation");
static_assert(offsetof(ProceduralRoads_K2_GetRoadGridDataAtLocation, InLocation) == 0x000000, "Member 'ProceduralRoads_K2_GetRoadGridDataAtLocation::InLocation' has a wrong offset!");
static_assert(offsetof(ProceduralRoads_K2_GetRoadGridDataAtLocation, ReturnValue) == 0x000018, "Member 'ProceduralRoads_K2_GetRoadGridDataAtLocation::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.SetRoadTier
// 0x0001 (0x0001 - 0x0000)
struct ProceduralRoads_SetRoadTier final
{
public:
	ELandmassRoadTier                             InRoadTier;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_SetRoadTier) == 0x000001, "Wrong alignment on ProceduralRoads_SetRoadTier");
static_assert(sizeof(ProceduralRoads_SetRoadTier) == 0x000001, "Wrong size on ProceduralRoads_SetRoadTier");
static_assert(offsetof(ProceduralRoads_SetRoadTier, InRoadTier) == 0x000000, "Member 'ProceduralRoads_SetRoadTier::InRoadTier' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.GetGenerationRules
// 0x0148 (0x0148 - 0x0000)
struct ProceduralRoads_GetGenerationRules final
{
public:
	ELandmassRoadTier                             InRoadTier;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProceduralRoadGenRules                OutRules;                                          // 0x0008(0x0138)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0140(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProceduralRoads_GetGenerationRules) == 0x000008, "Wrong alignment on ProceduralRoads_GetGenerationRules");
static_assert(sizeof(ProceduralRoads_GetGenerationRules) == 0x000148, "Wrong size on ProceduralRoads_GetGenerationRules");
static_assert(offsetof(ProceduralRoads_GetGenerationRules, InRoadTier) == 0x000000, "Member 'ProceduralRoads_GetGenerationRules::InRoadTier' has a wrong offset!");
static_assert(offsetof(ProceduralRoads_GetGenerationRules, OutRules) == 0x000008, "Member 'ProceduralRoads_GetGenerationRules::OutRules' has a wrong offset!");
static_assert(offsetof(ProceduralRoads_GetGenerationRules, ReturnValue) == 0x000140, "Member 'ProceduralRoads_GetGenerationRules::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.GetRoadDefinitions
// 0x0010 (0x0010 - 0x0000)
struct ProceduralRoads_GetRoadDefinitions final
{
public:
	TArray<class UProceduralRoadDefinition*>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_GetRoadDefinitions) == 0x000008, "Wrong alignment on ProceduralRoads_GetRoadDefinitions");
static_assert(sizeof(ProceduralRoads_GetRoadDefinitions) == 0x000010, "Wrong size on ProceduralRoads_GetRoadDefinitions");
static_assert(offsetof(ProceduralRoads_GetRoadDefinitions, ReturnValue) == 0x000000, "Member 'ProceduralRoads_GetRoadDefinitions::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.ProceduralRoads.GetRoadMergeSearchNeighborGridSize
// 0x0004 (0x0004 - 0x0000)
struct ProceduralRoads_GetRoadMergeSearchNeighborGridSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralRoads_GetRoadMergeSearchNeighborGridSize) == 0x000004, "Wrong alignment on ProceduralRoads_GetRoadMergeSearchNeighborGridSize");
static_assert(sizeof(ProceduralRoads_GetRoadMergeSearchNeighborGridSize) == 0x000004, "Wrong size on ProceduralRoads_GetRoadMergeSearchNeighborGridSize");
static_assert(offsetof(ProceduralRoads_GetRoadMergeSearchNeighborGridSize, ReturnValue) == 0x000000, "Member 'ProceduralRoads_GetRoadMergeSearchNeighborGridSize::ReturnValue' has a wrong offset!");

// Function JunoProceduralWorld.JunoLivingWorldLightStaticPointProvider.AppendFiltersTags
// 0x0020 (0x0020 - 0x0000)
struct JunoLivingWorldLightStaticPointProvider_AppendFiltersTags final
{
public:
	struct FGameplayTagContainer                  Container;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JunoLivingWorldLightStaticPointProvider_AppendFiltersTags) == 0x000008, "Wrong alignment on JunoLivingWorldLightStaticPointProvider_AppendFiltersTags");
static_assert(sizeof(JunoLivingWorldLightStaticPointProvider_AppendFiltersTags) == 0x000020, "Wrong size on JunoLivingWorldLightStaticPointProvider_AppendFiltersTags");
static_assert(offsetof(JunoLivingWorldLightStaticPointProvider_AppendFiltersTags, Container) == 0x000000, "Member 'JunoLivingWorldLightStaticPointProvider_AppendFiltersTags::Container' has a wrong offset!");

}

