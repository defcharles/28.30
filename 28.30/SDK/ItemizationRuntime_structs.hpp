#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ItemizationCoreRuntime_structs.hpp"


namespace SDK
{

// ScriptStruct ItemizationRuntime.ItemDebugSnapshot
// 0x0038 (0x0038 - 0x0000)
struct FItemDebugSnapshot final
{
public:
	class FString                                 Attributes;                                        // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemId;                                            // 0x0010(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SlotNumber;                                        // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         StackSize;                                         // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemDefinitionBase*                    ItemDefinition;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDebugSnapshot) == 0x000008, "Wrong alignment on FItemDebugSnapshot");
static_assert(sizeof(FItemDebugSnapshot) == 0x000038, "Wrong size on FItemDebugSnapshot");
static_assert(offsetof(FItemDebugSnapshot, Attributes) == 0x000000, "Member 'FItemDebugSnapshot::Attributes' has a wrong offset!");
static_assert(offsetof(FItemDebugSnapshot, ItemId) == 0x000010, "Member 'FItemDebugSnapshot::ItemId' has a wrong offset!");
static_assert(offsetof(FItemDebugSnapshot, SlotNumber) == 0x000020, "Member 'FItemDebugSnapshot::SlotNumber' has a wrong offset!");
static_assert(offsetof(FItemDebugSnapshot, StackSize) == 0x000028, "Member 'FItemDebugSnapshot::StackSize' has a wrong offset!");
static_assert(offsetof(FItemDebugSnapshot, ItemDefinition) == 0x000030, "Member 'FItemDebugSnapshot::ItemDefinition' has a wrong offset!");

// ScriptStruct ItemizationRuntime.InventoryDebugSnapshot
// 0x0030 (0x0030 - 0x0000)
struct FInventoryDebugSnapshot final
{
public:
	class FString                                 InventoryName;                                     // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InventoryID;                                       // 0x0010(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemDebugSnapshot>             Items;                                             // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryDebugSnapshot) == 0x000008, "Wrong alignment on FInventoryDebugSnapshot");
static_assert(sizeof(FInventoryDebugSnapshot) == 0x000030, "Wrong size on FInventoryDebugSnapshot");
static_assert(offsetof(FInventoryDebugSnapshot, InventoryName) == 0x000000, "Member 'FInventoryDebugSnapshot::InventoryName' has a wrong offset!");
static_assert(offsetof(FInventoryDebugSnapshot, InventoryID) == 0x000010, "Member 'FInventoryDebugSnapshot::InventoryID' has a wrong offset!");
static_assert(offsetof(FInventoryDebugSnapshot, Items) == 0x000020, "Member 'FInventoryDebugSnapshot::Items' has a wrong offset!");

// ScriptStruct ItemizationRuntime.InventoryCollectionDebugSnapshot
// 0x0030 (0x0030 - 0x0000)
struct FInventoryCollectionDebugSnapshot final
{
public:
	class FString                                 InventoryCollectionName;                           // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryCollectionType                      InventoryCollectionType;                           // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInventoryDebugSnapshot>        Inventories;                                       // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryCollectionDebugSnapshot) == 0x000008, "Wrong alignment on FInventoryCollectionDebugSnapshot");
static_assert(sizeof(FInventoryCollectionDebugSnapshot) == 0x000030, "Wrong size on FInventoryCollectionDebugSnapshot");
static_assert(offsetof(FInventoryCollectionDebugSnapshot, InventoryCollectionName) == 0x000000, "Member 'FInventoryCollectionDebugSnapshot::InventoryCollectionName' has a wrong offset!");
static_assert(offsetof(FInventoryCollectionDebugSnapshot, InventoryCollectionType) == 0x000010, "Member 'FInventoryCollectionDebugSnapshot::InventoryCollectionType' has a wrong offset!");
static_assert(offsetof(FInventoryCollectionDebugSnapshot, Inventories) == 0x000018, "Member 'FInventoryCollectionDebugSnapshot::Inventories' has a wrong offset!");
static_assert(offsetof(FInventoryCollectionDebugSnapshot, bIsValid) == 0x000028, "Member 'FInventoryCollectionDebugSnapshot::bIsValid' has a wrong offset!");

// ScriptStruct ItemizationRuntime.FortInventoryDebugSnapshot
// 0x0048 (0x0048 - 0x0000)
struct FFortInventoryDebugSnapshot final
{
public:
	class FString                                 FortInventoryName;                                 // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInventoryDebugSnapshot                Inventory;                                         // 0x0010(0x0030)(Transient, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0040(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortInventoryDebugSnapshot) == 0x000008, "Wrong alignment on FFortInventoryDebugSnapshot");
static_assert(sizeof(FFortInventoryDebugSnapshot) == 0x000048, "Wrong size on FFortInventoryDebugSnapshot");
static_assert(offsetof(FFortInventoryDebugSnapshot, FortInventoryName) == 0x000000, "Member 'FFortInventoryDebugSnapshot::FortInventoryName' has a wrong offset!");
static_assert(offsetof(FFortInventoryDebugSnapshot, Inventory) == 0x000010, "Member 'FFortInventoryDebugSnapshot::Inventory' has a wrong offset!");
static_assert(offsetof(FFortInventoryDebugSnapshot, bIsValid) == 0x000040, "Member 'FFortInventoryDebugSnapshot::bIsValid' has a wrong offset!");

}

