#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayspaceSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "NetCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum PlayspaceSystem.EPlayspaceCreationType
// NumValues: 0x0004
enum class EPlayspaceCreationType : uint8
{
	ChildOfRoot                              = 0,
	RootDestroy                              = 1,
	RootInserted                             = 2,
	RootDoNotClobber                         = 3,
};

// Enum PlayspaceSystem.EWithinBoundsEvaluationType
// NumValues: 0x0003
enum class EWithinBoundsEvaluationType : uint8
{
	UseOverlaps                              = 0,
	UseBoxBounds                             = 1,
	UseSphereBounds                          = 2,
};

// Enum PlayspaceSystem.EPlayspaceComponentCreationType
// NumValues: 0x0003
enum class EPlayspaceComponentCreationType : uint8
{
	Root                                     = 0,
	ByLocation                               = 1,
	ByTags                                   = 2,
};

// Enum PlayspaceSystem.EPlayspaceRootType
// NumValues: 0x0002
enum class EPlayspaceRootType : uint8
{
	ShouldBeRoot                             = 0,
	ShouldBeClobbered                        = 1,
};

// ScriptStruct PlayspaceSystem.PlayspaceUser
// 0x004C (0x0058 - 0x000C)
struct FPlayspaceUser final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       UserId;                                            // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayspace*                             LeafPlayspace;                                     // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerState*                           PlayerStateCached;                                 // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AController*                            ControllerCached;                                  // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPlayspaceUser) == 0x000008, "Wrong alignment on FPlayspaceUser");
static_assert(sizeof(FPlayspaceUser) == 0x000058, "Wrong size on FPlayspaceUser");
static_assert(offsetof(FPlayspaceUser, UserId) == 0x000010, "Member 'FPlayspaceUser::UserId' has a wrong offset!");
static_assert(offsetof(FPlayspaceUser, LeafPlayspace) == 0x000040, "Member 'FPlayspaceUser::LeafPlayspace' has a wrong offset!");
static_assert(offsetof(FPlayspaceUser, PlayerStateCached) == 0x000048, "Member 'FPlayspaceUser::PlayerStateCached' has a wrong offset!");
static_assert(offsetof(FPlayspaceUser, ControllerCached) == 0x000050, "Member 'FPlayspaceUser::ControllerCached' has a wrong offset!");

// ScriptStruct PlayspaceSystem.PlayspaceComponentConfiguration
// 0x0088 (0x0088 - 0x0000)
struct FPlayspaceComponentConfiguration final
{
public:
	TSoftClassPtr<class UClass>                   PlayspaceComponentClass;                           // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayspaceComponentCreationType               CreationType;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0028(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0070(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayspaceComponentConfiguration) == 0x000008, "Wrong alignment on FPlayspaceComponentConfiguration");
static_assert(sizeof(FPlayspaceComponentConfiguration) == 0x000088, "Wrong size on FPlayspaceComponentConfiguration");
static_assert(offsetof(FPlayspaceComponentConfiguration, PlayspaceComponentClass) == 0x000000, "Member 'FPlayspaceComponentConfiguration::PlayspaceComponentClass' has a wrong offset!");
static_assert(offsetof(FPlayspaceComponentConfiguration, CreationType) == 0x000020, "Member 'FPlayspaceComponentConfiguration::CreationType' has a wrong offset!");
static_assert(offsetof(FPlayspaceComponentConfiguration, TagQuery) == 0x000028, "Member 'FPlayspaceComponentConfiguration::TagQuery' has a wrong offset!");
static_assert(offsetof(FPlayspaceComponentConfiguration, Location) == 0x000070, "Member 'FPlayspaceComponentConfiguration::Location' has a wrong offset!");

// ScriptStruct PlayspaceSystem.ReplicatedSpawnInfo
// 0x0058 (0x0058 - 0x0000)
struct FReplicatedSpawnInfo final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ServerSpawnTime;                                   // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLocation;                                      // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeForCameraFadeTransition;                    // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerRespawning;                               // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedSpawnInfo) == 0x000008, "Wrong alignment on FReplicatedSpawnInfo");
static_assert(sizeof(FReplicatedSpawnInfo) == 0x000058, "Wrong size on FReplicatedSpawnInfo");
static_assert(offsetof(FReplicatedSpawnInfo, SpawnLocation) == 0x000000, "Member 'FReplicatedSpawnInfo::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedSpawnInfo, SpawnRotation) == 0x000018, "Member 'FReplicatedSpawnInfo::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FReplicatedSpawnInfo, ServerSpawnTime) == 0x000030, "Member 'FReplicatedSpawnInfo::ServerSpawnTime' has a wrong offset!");
static_assert(offsetof(FReplicatedSpawnInfo, LastLocation) == 0x000038, "Member 'FReplicatedSpawnInfo::LastLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedSpawnInfo, MinTimeForCameraFadeTransition) == 0x000050, "Member 'FReplicatedSpawnInfo::MinTimeForCameraFadeTransition' has a wrong offset!");
static_assert(offsetof(FReplicatedSpawnInfo, bIsPlayerRespawning) == 0x000054, "Member 'FReplicatedSpawnInfo::bIsPlayerRespawning' has a wrong offset!");

// ScriptStruct PlayspaceSystem.PlayspaceSpawningInfo
// 0x0098 (0x0098 - 0x0000)
struct FPlayspaceSpawningInfo final
{
public:
	struct FUniqueNetIdRepl                       UserId;                                            // 0x0000(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APlayspace>              RequestingPlayspace;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnLocationActor;                                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpawnTimeServer;                                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLocation;                                      // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeForCameraFadeTransition;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRespawnFromDeath;                               // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayspaceSpawningInfo) == 0x000008, "Wrong alignment on FPlayspaceSpawningInfo");
static_assert(sizeof(FPlayspaceSpawningInfo) == 0x000098, "Wrong size on FPlayspaceSpawningInfo");
static_assert(offsetof(FPlayspaceSpawningInfo, UserId) == 0x000000, "Member 'FPlayspaceSpawningInfo::UserId' has a wrong offset!");
static_assert(offsetof(FPlayspaceSpawningInfo, RequestingPlayspace) == 0x000030, "Member 'FPlayspaceSpawningInfo::RequestingPlayspace' has a wrong offset!");
static_assert(offsetof(FPlayspaceSpawningInfo, SpawnLocationActor) == 0x000038, "Member 'FPlayspaceSpawningInfo::SpawnLocationActor' has a wrong offset!");
static_assert(offsetof(FPlayspaceSpawningInfo, SpawnLocation) == 0x000040, "Member 'FPlayspaceSpawningInfo::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FPlayspaceSpawningInfo, SpawnRotation) == 0x000058, "Member 'FPlayspaceSpawningInfo::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FPlayspaceSpawningInfo, SpawnTimeServer) == 0x000070, "Member 'FPlayspaceSpawningInfo::SpawnTimeServer' has a wrong offset!");
static_assert(offsetof(FPlayspaceSpawningInfo, LastLocation) == 0x000078, "Member 'FPlayspaceSpawningInfo::LastLocation' has a wrong offset!");
static_assert(offsetof(FPlayspaceSpawningInfo, MinTimeForCameraFadeTransition) == 0x000090, "Member 'FPlayspaceSpawningInfo::MinTimeForCameraFadeTransition' has a wrong offset!");
static_assert(offsetof(FPlayspaceSpawningInfo, bIsRespawnFromDeath) == 0x000094, "Member 'FPlayspaceSpawningInfo::bIsRespawnFromDeath' has a wrong offset!");

// ScriptStruct PlayspaceSystem.PlayspaceConfiguration
// 0x0028 (0x0028 - 0x0000)
struct FPlayspaceConfiguration final
{
public:
	TSoftClassPtr<class UClass>                   PlayspaceClass;                                    // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayspaceCreationType                        CreationType;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSyncLoad;                                    // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayspaceConfiguration) == 0x000008, "Wrong alignment on FPlayspaceConfiguration");
static_assert(sizeof(FPlayspaceConfiguration) == 0x000028, "Wrong size on FPlayspaceConfiguration");
static_assert(offsetof(FPlayspaceConfiguration, PlayspaceClass) == 0x000000, "Member 'FPlayspaceConfiguration::PlayspaceClass' has a wrong offset!");
static_assert(offsetof(FPlayspaceConfiguration, CreationType) == 0x000020, "Member 'FPlayspaceConfiguration::CreationType' has a wrong offset!");
static_assert(offsetof(FPlayspaceConfiguration, bForceSyncLoad) == 0x000021, "Member 'FPlayspaceConfiguration::bForceSyncLoad' has a wrong offset!");

// ScriptStruct PlayspaceSystem.Playspace_ComponentInfo_Base
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPlayspace_ComponentInfo_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCreateOnClient;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateOnServer;                                   // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayspace_ComponentInfo_Base) == 0x000008, "Wrong alignment on FPlayspace_ComponentInfo_Base");
static_assert(sizeof(FPlayspace_ComponentInfo_Base) == 0x000010, "Wrong size on FPlayspace_ComponentInfo_Base");
static_assert(offsetof(FPlayspace_ComponentInfo_Base, bCreateOnClient) == 0x000008, "Member 'FPlayspace_ComponentInfo_Base::bCreateOnClient' has a wrong offset!");
static_assert(offsetof(FPlayspace_ComponentInfo_Base, bCreateOnServer) == 0x000009, "Member 'FPlayspace_ComponentInfo_Base::bCreateOnServer' has a wrong offset!");

// ScriptStruct PlayspaceSystem.Playspace_ControllerComponentInfo
// 0x0008 (0x0018 - 0x0010)
struct FPlayspace_ControllerComponentInfo final : public FPlayspace_ComponentInfo_Base
{
public:
	TSubclassOf<class UControllerComponent>       ComponentClass;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayspace_ControllerComponentInfo) == 0x000008, "Wrong alignment on FPlayspace_ControllerComponentInfo");
static_assert(sizeof(FPlayspace_ControllerComponentInfo) == 0x000018, "Wrong size on FPlayspace_ControllerComponentInfo");
static_assert(offsetof(FPlayspace_ControllerComponentInfo, ComponentClass) == 0x000010, "Member 'FPlayspace_ControllerComponentInfo::ComponentClass' has a wrong offset!");

// ScriptStruct PlayspaceSystem.Playspace_PlayerStateComponentInfo
// 0x0008 (0x0018 - 0x0010)
struct FPlayspace_PlayerStateComponentInfo final : public FPlayspace_ComponentInfo_Base
{
public:
	TSubclassOf<class UPlayerStateComponent>      ComponentClass;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayspace_PlayerStateComponentInfo) == 0x000008, "Wrong alignment on FPlayspace_PlayerStateComponentInfo");
static_assert(sizeof(FPlayspace_PlayerStateComponentInfo) == 0x000018, "Wrong size on FPlayspace_PlayerStateComponentInfo");
static_assert(offsetof(FPlayspace_PlayerStateComponentInfo, ComponentClass) == 0x000010, "Member 'FPlayspace_PlayerStateComponentInfo::ComponentClass' has a wrong offset!");

// ScriptStruct PlayspaceSystem.Playspace_ActorComponentInfo
// 0x0008 (0x0018 - 0x0010)
struct FPlayspace_ActorComponentInfo final : public FPlayspace_ComponentInfo_Base
{
public:
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayspace_ActorComponentInfo) == 0x000008, "Wrong alignment on FPlayspace_ActorComponentInfo");
static_assert(sizeof(FPlayspace_ActorComponentInfo) == 0x000018, "Wrong size on FPlayspace_ActorComponentInfo");
static_assert(offsetof(FPlayspace_ActorComponentInfo, ComponentClass) == 0x000010, "Member 'FPlayspace_ActorComponentInfo::ComponentClass' has a wrong offset!");

// ScriptStruct PlayspaceSystem.ActorOverlapEvent
// 0x0010 (0x0010 - 0x0000)
struct FActorOverlapEvent final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayVolume*                        Volume;                                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorOverlapEvent) == 0x000008, "Wrong alignment on FActorOverlapEvent");
static_assert(sizeof(FActorOverlapEvent) == 0x000010, "Wrong size on FActorOverlapEvent");
static_assert(offsetof(FActorOverlapEvent, PlayerState) == 0x000000, "Member 'FActorOverlapEvent::PlayerState' has a wrong offset!");
static_assert(offsetof(FActorOverlapEvent, Volume) == 0x000008, "Member 'FActorOverlapEvent::Volume' has a wrong offset!");

// ScriptStruct PlayspaceSystem.PlayspaceUserList
// 0x0070 (0x0178 - 0x0108)
struct FPlayspaceUserList final : public FFastArraySerializer
{
public:
	TArray<struct FPlayspaceUser>                 PlayspaceUsers;                                    // 0x0108(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_118[0x54];                                     // 0x0118(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsInitialized;                                    // 0x016C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayspace*                             Playspace;                                         // 0x0170(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayspaceUserList) == 0x000008, "Wrong alignment on FPlayspaceUserList");
static_assert(sizeof(FPlayspaceUserList) == 0x000178, "Wrong size on FPlayspaceUserList");
static_assert(offsetof(FPlayspaceUserList, PlayspaceUsers) == 0x000108, "Member 'FPlayspaceUserList::PlayspaceUsers' has a wrong offset!");
static_assert(offsetof(FPlayspaceUserList, bIsInitialized) == 0x00016C, "Member 'FPlayspaceUserList::bIsInitialized' has a wrong offset!");
static_assert(offsetof(FPlayspaceUserList, Playspace) == 0x000170, "Member 'FPlayspaceUserList::Playspace' has a wrong offset!");

}

