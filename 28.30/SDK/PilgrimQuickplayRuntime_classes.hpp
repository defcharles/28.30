#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PilgrimQuickplayRuntime

#include "Basic.hpp"

#include "PilgrimQuickplayRuntime_structs.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "SparksCameraDirectorRuntime_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "SparksCoreRuntime_structs.hpp"
#include "PilgrimCoreRuntime_structs.hpp"
#include "PilgrimCoreRuntime_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "PilgrimQPSharedRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayStateMachine_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class PilgrimQuickplayRuntime.PilgrimGreenRoomLayoutSwitcher
// 0x0010 (0x00B0 - 0x00A0)
class UPilgrimGreenRoomLayoutSwitcher final : public UPlayspaceComponent
{
public:
	int32                                         CurrentLayout;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnum*                                  LayoutEnumType;                                    // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CycleLayout();
	void OnLayoutChanged(int32 NewLayout);
	void OnRep_CurrentLayout();
	void SetLayout(int32 NewLayout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGreenRoomLayoutSwitcher">();
	}
	static class UPilgrimGreenRoomLayoutSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimGreenRoomLayoutSwitcher>();
	}
};
static_assert(alignof(UPilgrimGreenRoomLayoutSwitcher) == 0x000008, "Wrong alignment on UPilgrimGreenRoomLayoutSwitcher");
static_assert(sizeof(UPilgrimGreenRoomLayoutSwitcher) == 0x0000B0, "Wrong size on UPilgrimGreenRoomLayoutSwitcher");
static_assert(offsetof(UPilgrimGreenRoomLayoutSwitcher, CurrentLayout) == 0x0000A0, "Member 'UPilgrimGreenRoomLayoutSwitcher::CurrentLayout' has a wrong offset!");
static_assert(offsetof(UPilgrimGreenRoomLayoutSwitcher, LayoutEnumType) == 0x0000A8, "Member 'UPilgrimGreenRoomLayoutSwitcher::LayoutEnumType' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimLeaderboardScoreReporter
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimLeaderboardScoreReporter final : public UPlayspaceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimLeaderboardScoreReporter">();
	}
	static class UPilgrimLeaderboardScoreReporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimLeaderboardScoreReporter>();
	}
};
static_assert(alignof(UPilgrimLeaderboardScoreReporter) == 0x000008, "Wrong alignment on UPilgrimLeaderboardScoreReporter");
static_assert(sizeof(UPilgrimLeaderboardScoreReporter) == 0x0000A0, "Wrong size on UPilgrimLeaderboardScoreReporter");

// Class PilgrimQuickplayRuntime.PilgrimPawnComponent
// 0x0008 (0x00B0 - 0x00A8)
class UPilgrimPawnComponent : public UFortPawnComponent
{
public:
	bool                                          bInteractionEffectsEnabled;                        // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetInteractionEffectsEnabled(bool bEnable);

	bool GetInteractionEffectsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPawnComponent">();
	}
	static class UPilgrimPawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPawnComponent>();
	}
};
static_assert(alignof(UPilgrimPawnComponent) == 0x000008, "Wrong alignment on UPilgrimPawnComponent");
static_assert(sizeof(UPilgrimPawnComponent) == 0x0000B0, "Wrong size on UPilgrimPawnComponent");
static_assert(offsetof(UPilgrimPawnComponent, bInteractionEffectsEnabled) == 0x0000A8, "Member 'UPilgrimPawnComponent::bInteractionEffectsEnabled' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimPlayspaceComponent_IntroDirector
// 0x00F8 (0x01F0 - 0x00F8)
class alignas(0x10) UPilgrimPlayspaceComponent_IntroDirector final : public UFortPlayspaceComponent
{
public:
	TArray<class UFortMontageItemDefinitionBase*> GuitarSpotlights;                                  // 0x00F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UFortMontageItemDefinitionBase*> DrumSpotlights;                                    // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UFortMontageItemDefinitionBase*> BassSpotlights;                                    // 0x0118(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UFortMontageItemDefinitionBase*> MicSpotlights;                                     // 0x0128(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UFortMontageItemDefinitionBase*> KeytarSpotlights;                                  // 0x0138(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0xA8];                                     // 0x0148(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearSpotlightMontageHandles();
	bool EnqueueSpotlightMontages(ESparksInstrumentType InstrumentType);
	bool HasSpotlightMontageLoadFinished(int32 PlayerIndex);
	void OnSpotlightMontageLoaded(int32 PlayerIndex, class UAnimMontage* LoadedMontage);
	void RequestNextMontageForInstrument(ESparksInstrumentType InstrumentType, class AFortPlayerPawn* PlayerPawn, int32 PlayerIndex);

	bool EnableFloatingPawnFix() const;
	float GetFloatingPawnFixIntervalSeconds() const;
	void StartPlayerIntro(class APlayerState* PlayerState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPlayspaceComponent_IntroDirector">();
	}
	static class UPilgrimPlayspaceComponent_IntroDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPlayspaceComponent_IntroDirector>();
	}
};
static_assert(alignof(UPilgrimPlayspaceComponent_IntroDirector) == 0x000010, "Wrong alignment on UPilgrimPlayspaceComponent_IntroDirector");
static_assert(sizeof(UPilgrimPlayspaceComponent_IntroDirector) == 0x0001F0, "Wrong size on UPilgrimPlayspaceComponent_IntroDirector");
static_assert(offsetof(UPilgrimPlayspaceComponent_IntroDirector, GuitarSpotlights) == 0x0000F8, "Member 'UPilgrimPlayspaceComponent_IntroDirector::GuitarSpotlights' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayspaceComponent_IntroDirector, DrumSpotlights) == 0x000108, "Member 'UPilgrimPlayspaceComponent_IntroDirector::DrumSpotlights' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayspaceComponent_IntroDirector, BassSpotlights) == 0x000118, "Member 'UPilgrimPlayspaceComponent_IntroDirector::BassSpotlights' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayspaceComponent_IntroDirector, MicSpotlights) == 0x000128, "Member 'UPilgrimPlayspaceComponent_IntroDirector::MicSpotlights' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayspaceComponent_IntroDirector, KeytarSpotlights) == 0x000138, "Member 'UPilgrimPlayspaceComponent_IntroDirector::KeytarSpotlights' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimPlayspaceComponent_ServerExpiration
// 0x0000 (0x01B8 - 0x01B8)
class UPilgrimPlayspaceComponent_ServerExpiration final : public UPlayspaceComponent_ServerExpiration
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPlayspaceComponent_ServerExpiration">();
	}
	static class UPilgrimPlayspaceComponent_ServerExpiration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPlayspaceComponent_ServerExpiration>();
	}
};
static_assert(alignof(UPilgrimPlayspaceComponent_ServerExpiration) == 0x000008, "Wrong alignment on UPilgrimPlayspaceComponent_ServerExpiration");
static_assert(sizeof(UPilgrimPlayspaceComponent_ServerExpiration) == 0x0001B8, "Wrong size on UPilgrimPlayspaceComponent_ServerExpiration");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayBandStateComponent
// 0x0078 (0x0128 - 0x00B0)
class UPilgrimQuickplayBandStateComponent final : public UPilgrimCoreBandStateComponent
{
public:
	TMulticastInlineDelegate<void(bool bIsReplaying)> OnSongReplayingChanged;                            // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPilgrimPremadeSetlist*                 SetlistVoteWinner;                                 // 0x00C0(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentSetlistIndex;                               // 0x00C8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsReplayingPreviousSong;                          // 0x00CC(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FPilgrimQuickplaySongResultData> SetlistResultMap;                                  // 0x00D0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPilgrimQuickplayBandStateComponent* GetBandState(class AActor* ContextActor);

	void OnRep_CurrentSetlistIndex(int32 PrevSetlistIndex);
	void OnRep_IsReplayingPreviousSong();
	void OnRep_SetlistVoteWinner(class UPilgrimPremadeSetlist* PrevSetlist);
	void ServerAdvanceSetlistIndex();
	void ServerResetSetlistIndex();

	bool AreAllPlayersReady() const;
	TScriptInterface<class IPilgrimSetlistInterface> GetCurrentSetlist() const;
	int32 GetCurrentSetlistIndex() const;
	int32 GetCurrentSetlistLength() const;
	TArray<class APlayerState*> GetPlayersInBand(uint8 Team) const;
	TArray<class APlayerState*> GetPlayersInBandByController(class APlayerController* Controller) const;
	class UPilgrimPremadeSetlist* GetSetlistVoteWinner() const;
	int32 GetVoteCountForSetlist(class UPilgrimPremadeSetlist* Setlist) const;
	TArray<class APlayerState*> GetVotersForSetlist(class UPilgrimPremadeSetlist* Setlist) const;
	bool IsReplayingPreviousSong() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayBandStateComponent">();
	}
	static class UPilgrimQuickplayBandStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayBandStateComponent>();
	}
};
static_assert(alignof(UPilgrimQuickplayBandStateComponent) == 0x000008, "Wrong alignment on UPilgrimQuickplayBandStateComponent");
static_assert(sizeof(UPilgrimQuickplayBandStateComponent) == 0x000128, "Wrong size on UPilgrimQuickplayBandStateComponent");
static_assert(offsetof(UPilgrimQuickplayBandStateComponent, OnSongReplayingChanged) == 0x0000B0, "Member 'UPilgrimQuickplayBandStateComponent::OnSongReplayingChanged' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayBandStateComponent, SetlistVoteWinner) == 0x0000C0, "Member 'UPilgrimQuickplayBandStateComponent::SetlistVoteWinner' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayBandStateComponent, CurrentSetlistIndex) == 0x0000C8, "Member 'UPilgrimQuickplayBandStateComponent::CurrentSetlistIndex' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayBandStateComponent, bIsReplayingPreviousSong) == 0x0000CC, "Member 'UPilgrimQuickplayBandStateComponent::bIsReplayingPreviousSong' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayBandStateComponent, SetlistResultMap) == 0x0000D0, "Member 'UPilgrimQuickplayBandStateComponent::SetlistResultMap' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayCameraDataSource
// 0x0010 (0x00C0 - 0x00B0)
class UPilgrimQuickplayCameraDataSource final : public USparksCameraPluginDataProvider
{
public:
	bool                                          bCutOnMeasuresInsteadOfBeats;                      // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UPilgrimGame>            PilgrimGame;                                       // 0x00B4(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayCameraDataSource">();
	}
	static class UPilgrimQuickplayCameraDataSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayCameraDataSource>();
	}
};
static_assert(alignof(UPilgrimQuickplayCameraDataSource) == 0x000008, "Wrong alignment on UPilgrimQuickplayCameraDataSource");
static_assert(sizeof(UPilgrimQuickplayCameraDataSource) == 0x0000C0, "Wrong size on UPilgrimQuickplayCameraDataSource");
static_assert(offsetof(UPilgrimQuickplayCameraDataSource, bCutOnMeasuresInsteadOfBeats) == 0x0000B0, "Member 'UPilgrimQuickplayCameraDataSource::bCutOnMeasuresInsteadOfBeats' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayCameraDataSource, PilgrimGame) == 0x0000B4, "Member 'UPilgrimQuickplayCameraDataSource::PilgrimGame' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayDeveloperSettings
// 0x00B8 (0x00E8 - 0x0030)
class UPilgrimQuickplayDeveloperSettings final : public UDeveloperSettings
{
public:
	bool                                          OverrideGamestateSettings;                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SongGameplay_SkipToGreenRoom;                      // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SongResults_TransitionTimeInSeconds;               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SongResults_OverrideSongData;                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimQuickplaySongResultData        SongResults_SongData;                              // 0x0040(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	bool                                          SongResults_OverrideSetlistResultData;             // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPilgrimQuickplaySetlistResultData> SongResults_SetlistResultsData;                    // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          Gameplay_ShowSongStats;                            // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SongResults_SetlistChallengeOverrideConsole;       // 0x00C9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SongResults_SetlistChallengeDebug;                 // 0x00CA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SongResults_SetlistChallengeFilenameAbsolute;      // 0x00CB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SongResults_SetlistChallengeJSONDumpFilename;      // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SongResults_SetlistChallengeIncludeHistogramData;  // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayDeveloperSettings">();
	}
	static class UPilgrimQuickplayDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayDeveloperSettings>();
	}
};
static_assert(alignof(UPilgrimQuickplayDeveloperSettings) == 0x000008, "Wrong alignment on UPilgrimQuickplayDeveloperSettings");
static_assert(sizeof(UPilgrimQuickplayDeveloperSettings) == 0x0000E8, "Wrong size on UPilgrimQuickplayDeveloperSettings");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, OverrideGamestateSettings) == 0x000030, "Member 'UPilgrimQuickplayDeveloperSettings::OverrideGamestateSettings' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongGameplay_SkipToGreenRoom) == 0x000031, "Member 'UPilgrimQuickplayDeveloperSettings::SongGameplay_SkipToGreenRoom' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_TransitionTimeInSeconds) == 0x000034, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_TransitionTimeInSeconds' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_OverrideSongData) == 0x000038, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_OverrideSongData' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_SongData) == 0x000040, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_SongData' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_OverrideSetlistResultData) == 0x0000B0, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_OverrideSetlistResultData' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_SetlistResultsData) == 0x0000B8, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_SetlistResultsData' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, Gameplay_ShowSongStats) == 0x0000C8, "Member 'UPilgrimQuickplayDeveloperSettings::Gameplay_ShowSongStats' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_SetlistChallengeOverrideConsole) == 0x0000C9, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_SetlistChallengeOverrideConsole' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_SetlistChallengeDebug) == 0x0000CA, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_SetlistChallengeDebug' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_SetlistChallengeFilenameAbsolute) == 0x0000CB, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_SetlistChallengeFilenameAbsolute' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_SetlistChallengeJSONDumpFilename) == 0x0000D0, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_SetlistChallengeJSONDumpFilename' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayDeveloperSettings, SongResults_SetlistChallengeIncludeHistogramData) == 0x0000E0, "Member 'UPilgrimQuickplayDeveloperSettings::SongResults_SetlistChallengeIncludeHistogramData' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayEmoteBPFL
// 0x0000 (0x0028 - 0x0028)
class UPilgrimQuickplayEmoteBPFL final : public UBlueprintFunctionLibrary
{
public:
	static void GetEmoteActionBinding(const class FString& EmoteTemplateID, struct FEmoteActionBinding* OutCreatedEmote);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayEmoteBPFL">();
	}
	static class UPilgrimQuickplayEmoteBPFL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayEmoteBPFL>();
	}
};
static_assert(alignof(UPilgrimQuickplayEmoteBPFL) == 0x000008, "Wrong alignment on UPilgrimQuickplayEmoteBPFL");
static_assert(sizeof(UPilgrimQuickplayEmoteBPFL) == 0x000028, "Wrong size on UPilgrimQuickplayEmoteBPFL");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayPlayerSpawningComponent
// 0x0020 (0x00D0 - 0x00B0)
class UPilgrimQuickplayPlayerSpawningComponent final : public UPlayspaceComponent_PlayerSpawning
{
public:
	struct FGameplayTagContainer                  PregameSpawnTags;                                  // 0x00B0(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayPlayerSpawningComponent">();
	}
	static class UPilgrimQuickplayPlayerSpawningComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayPlayerSpawningComponent>();
	}
};
static_assert(alignof(UPilgrimQuickplayPlayerSpawningComponent) == 0x000008, "Wrong alignment on UPilgrimQuickplayPlayerSpawningComponent");
static_assert(sizeof(UPilgrimQuickplayPlayerSpawningComponent) == 0x0000D0, "Wrong size on UPilgrimQuickplayPlayerSpawningComponent");
static_assert(offsetof(UPilgrimQuickplayPlayerSpawningComponent, PregameSpawnTags) == 0x0000B0, "Member 'UPilgrimQuickplayPlayerSpawningComponent::PregameSpawnTags' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayPlayerStateComponent
// 0x00C8 (0x0178 - 0x00B0)
class UPilgrimQuickplayPlayerStateComponent final : public UPilgrimCorePlayerStateComponent
{
public:
	class UPilgrimSongMetadata*                   SongVote;                                          // 0x00B0(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimPremadeSetlist*                 SetlistVote;                                       // 0x00B8(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<int32, struct FPilgrimPersonalBestHistoryRpl> SetlistHighscoreMap;                               // 0x00C0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class UPilgrimQuickplaySetlistResultProxyInstance*> SetlistResultMap;                                  // 0x0110(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	float                                         CloseupCameraTime;                                 // 0x0160(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TScriptInterface<class IQuestInstanceInterface>> GrantedQuests;                                     // 0x0168(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UPilgrimQuickplayPlayerStateComponent* GetPilgrimQuickplayPlayerStateComponent(const class APlayerState* PlayerState);
	static class UPilgrimSongMetadata* GetSongVote(class APlayerState* PlayerState);

	void BroadcastEvent_SongResultDataChanged(int32 SetlistIndex);
	void ClientMatchRecorded(int32 SetlistIndex, bool bIsSoloMatch);
	void MulticastBroadcastNewHighscore(int32 TotalScore, int32 DeltaScore, EPilgrimPersonalBestType BestType);
	void OnRep_SetlistVote(class UPilgrimPremadeSetlist* PrevSetlistVote);
	void OnRep_SongVote(class UPilgrimSongMetadata* PrevSongVote);
	void ResetSetlistResultData();
	void SendHighscoreToServer(const struct FPilgrimPersonalBestResult& Highscore, int32 SetlistIndex, bool bLoaded);
	void SendToClientsPerformanceData(int32 SetlistIndex, const struct FPilgrimQuickplayPlayerPerformanceData& NewPerformanceData);
	void SendToClientsResetSetlistResultData();
	void SendToClientsSongResultData(int32 SetlistIndex, const struct FPilgrimQuickplaySongResultData& NewPerformanceData);
	void SendToServerAllIntrosFinished(class UPilgrimQuickplayState_Intro* IntroState);
	void SendToServerPerformanceData(const struct FPilgrimQuickplayPlayerPerformanceData& NewPerformanceData);
	void Server_GrantDefaultQuests();
	void Server_ResetDefaultQuests();
	void ServerSetHighscore(const struct FPilgrimPersonalBestResultRpl& Highscore, int32 SetlistIndex, bool bLoaded);
	void SetCloseupCameraTime(float TotalTime);
	void SetHighscore(const struct FPilgrimPersonalBestResultRpl& Highscore, int32 SetlistIndex, bool bLoaded);
	void SetPerformanceData(const struct FPilgrimQuickplayPlayerPerformanceData& NewPerformanceData);
	void SetReachedNewHighscore(int32 TotalScore, int32 DeltaScore, EPilgrimPersonalBestType BestType);
	void SetSetlistVote(class UPilgrimPremadeSetlist* PlayerChosenSetlist);
	void SetSongResultData(const struct FPilgrimQuickplaySongResultData& NewSongResultData);
	void SetSongVote(class UPilgrimSongMetadata* PlayerChosenSong);

	class UPilgrimQuickplayBandStateComponent* GetBandState() const;
	float GetCloseupCameraTime() const;
	class UPilgrimPremadeSetlist* GetCurrentSetlistVote() const;
	class UPilgrimSongMetadata* GetCurrentSongVote() const;
	bool GetHighscoreResult(struct FPilgrimPersonalBestResultRpl* OutResult, int32 SetlistIndex, bool bLoaded) const;
	class UGameplayStateMachine* GetMainStateMachine() const;
	const struct FPilgrimQuickplayPlayerPerformanceData GetPerformanceData() const;
	bool GetReachedNewHighscore(EPilgrimPersonalBestType BestType, int32 SetlistIndex) const;
	struct FPilgrimQuickplaySetlistResultData GetSetlistResultDataByIndex(int32 SetlistIndex) const;
	void GetSetlistResultProxies(TArray<class UPilgrimQuickplaySetlistResultProxyInstance*>* SetlistProxy) const;
	const struct FPilgrimQuickplaySongResultData GetSongResultData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayPlayerStateComponent">();
	}
	static class UPilgrimQuickplayPlayerStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayPlayerStateComponent>();
	}
};
static_assert(alignof(UPilgrimQuickplayPlayerStateComponent) == 0x000008, "Wrong alignment on UPilgrimQuickplayPlayerStateComponent");
static_assert(sizeof(UPilgrimQuickplayPlayerStateComponent) == 0x000178, "Wrong size on UPilgrimQuickplayPlayerStateComponent");
static_assert(offsetof(UPilgrimQuickplayPlayerStateComponent, SongVote) == 0x0000B0, "Member 'UPilgrimQuickplayPlayerStateComponent::SongVote' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayPlayerStateComponent, SetlistVote) == 0x0000B8, "Member 'UPilgrimQuickplayPlayerStateComponent::SetlistVote' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayPlayerStateComponent, SetlistHighscoreMap) == 0x0000C0, "Member 'UPilgrimQuickplayPlayerStateComponent::SetlistHighscoreMap' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayPlayerStateComponent, SetlistResultMap) == 0x000110, "Member 'UPilgrimQuickplayPlayerStateComponent::SetlistResultMap' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayPlayerStateComponent, CloseupCameraTime) == 0x000160, "Member 'UPilgrimQuickplayPlayerStateComponent::CloseupCameraTime' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayPlayerStateComponent, GrantedQuests) == 0x000168, "Member 'UPilgrimQuickplayPlayerStateComponent::GrantedQuests' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayPlayspace
// 0x0030 (0x0800 - 0x07D0)
class APilgrimQuickplayPlayspace final : public APilgrimPlayspace
{
public:
	class UPilgrimStandinDirector*                StandinDirector;                                   // 0x07D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPilgrimQuickplayStateMachine> PilgrimQuickplayStateMachineClass;                 // 0x07D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayStateMachineManager*           StateMachineManager;                               // 0x07E0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayStateMachine*                  MainStateMachine;                                  // 0x07E8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPilgrimQuickplayBandStateComponent*    BandState;                                         // 0x07F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPilgrimQuickplayCameraDataSource*      CameraDataSource;                                  // 0x07F8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ForceActiveCameraDirector();
	void HandleDirectorResetEvent(const struct FSparksCommonResetCameraDirectorEvent& Payload);
	void HandleDirectorStartEvent(const struct FSparksCommonStartCameraDirectorEvent& Payload);
	void HandleDirectorStopEvent(const struct FSparksCommonStopCameraDirectorEvent& Payload);

	class UPilgrimQuickplayStateBase* GetActivePilgrimQuickplayState() const;
	EPilgrimQuickplayState GetActivePilgrimStateId() const;
	bool GetIsSinglePlayerGame() const;
	class UPilgrimQuickplayStateMachine* GetPilgrimQuickplayStateMachine() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayPlayspace">();
	}
	static class APilgrimQuickplayPlayspace* GetDefaultObj()
	{
		return GetDefaultObjImpl<APilgrimQuickplayPlayspace>();
	}
};
static_assert(alignof(APilgrimQuickplayPlayspace) == 0x000008, "Wrong alignment on APilgrimQuickplayPlayspace");
static_assert(sizeof(APilgrimQuickplayPlayspace) == 0x000800, "Wrong size on APilgrimQuickplayPlayspace");
static_assert(offsetof(APilgrimQuickplayPlayspace, StandinDirector) == 0x0007D0, "Member 'APilgrimQuickplayPlayspace::StandinDirector' has a wrong offset!");
static_assert(offsetof(APilgrimQuickplayPlayspace, PilgrimQuickplayStateMachineClass) == 0x0007D8, "Member 'APilgrimQuickplayPlayspace::PilgrimQuickplayStateMachineClass' has a wrong offset!");
static_assert(offsetof(APilgrimQuickplayPlayspace, StateMachineManager) == 0x0007E0, "Member 'APilgrimQuickplayPlayspace::StateMachineManager' has a wrong offset!");
static_assert(offsetof(APilgrimQuickplayPlayspace, MainStateMachine) == 0x0007E8, "Member 'APilgrimQuickplayPlayspace::MainStateMachine' has a wrong offset!");
static_assert(offsetof(APilgrimQuickplayPlayspace, BandState) == 0x0007F0, "Member 'APilgrimQuickplayPlayspace::BandState' has a wrong offset!");
static_assert(offsetof(APilgrimQuickplayPlayspace, CameraDataSource) == 0x0007F8, "Member 'APilgrimQuickplayPlayspace::CameraDataSource' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayPlayspaceComponent_PlayerManager
// 0x0010 (0x0108 - 0x00F8)
class UPilgrimQuickplayPlayspaceComponent_PlayerManager final : public UFortPlayspaceComponent
{
public:
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnAppResumed(float ElapsedTimeSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayPlayspaceComponent_PlayerManager">();
	}
	static class UPilgrimQuickplayPlayspaceComponent_PlayerManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayPlayspaceComponent_PlayerManager>();
	}
};
static_assert(alignof(UPilgrimQuickplayPlayspaceComponent_PlayerManager) == 0x000008, "Wrong alignment on UPilgrimQuickplayPlayspaceComponent_PlayerManager");
static_assert(sizeof(UPilgrimQuickplayPlayspaceComponent_PlayerManager) == 0x000108, "Wrong size on UPilgrimQuickplayPlayspaceComponent_PlayerManager");

// Class PilgrimQuickplayRuntime.PilgrimQuickplaySetlistResultProxyInstance
// 0x00C0 (0x00E8 - 0x0028)
class UPilgrimQuickplaySetlistResultProxyInstance final : public UObject
{
public:
	struct FPilgrimQuickplaySetlistResultData     ResultData;                                        // 0x0028(0x00C0)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplaySetlistResultProxyInstance">();
	}
	static class UPilgrimQuickplaySetlistResultProxyInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplaySetlistResultProxyInstance>();
	}
};
static_assert(alignof(UPilgrimQuickplaySetlistResultProxyInstance) == 0x000008, "Wrong alignment on UPilgrimQuickplaySetlistResultProxyInstance");
static_assert(sizeof(UPilgrimQuickplaySetlistResultProxyInstance) == 0x0000E8, "Wrong size on UPilgrimQuickplaySetlistResultProxyInstance");
static_assert(offsetof(UPilgrimQuickplaySetlistResultProxyInstance, ResultData) == 0x000028, "Member 'UPilgrimQuickplaySetlistResultProxyInstance::ResultData' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayStateBase
// 0x0060 (0x00D8 - 0x0078)
class UPilgrimQuickplayStateBase : public UGameplayState
{
public:
	class UFortAbilitySet*                        AbilitySetForState;                                // 0x0078(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TWeakObjectPtr<class APlayerState>, struct FFortAbilitySetHandle> GrantedAbilitySets;                                // 0x0080(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UFortInputMappingContext*               InputMappingContext;                               // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool MarkStateDone();

	class UGameplayEventRouterComponent* GetEventRouter() const;
	class APilgrimQuickplayPlayspace* GetPilgrimPlayspace() const;
	EPilgrimQuickplayState GetPilgrimStateId() const;
	class UPilgrimQuickplayStateMachine* GetPilgrimStateMachine() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayStateBase">();
	}
	static class UPilgrimQuickplayStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayStateBase>();
	}
};
static_assert(alignof(UPilgrimQuickplayStateBase) == 0x000008, "Wrong alignment on UPilgrimQuickplayStateBase");
static_assert(sizeof(UPilgrimQuickplayStateBase) == 0x0000D8, "Wrong size on UPilgrimQuickplayStateBase");
static_assert(offsetof(UPilgrimQuickplayStateBase, AbilitySetForState) == 0x000078, "Member 'UPilgrimQuickplayStateBase::AbilitySetForState' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayStateBase, GrantedAbilitySets) == 0x000080, "Member 'UPilgrimQuickplayStateBase::GrantedAbilitySets' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayStateBase, InputMappingContext) == 0x0000D0, "Member 'UPilgrimQuickplayStateBase::InputMappingContext' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayStateBPFL
// 0x0000 (0x0028 - 0x0028)
class UPilgrimQuickplayStateBPFL final : public UBlueprintFunctionLibrary
{
public:
	static EPilgrimQuickplayState GetPilgrimState(const struct FGameplayTag& tag);
	static struct FGameplayTag GetStateTag(const EPilgrimQuickplayState& State);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayStateBPFL">();
	}
	static class UPilgrimQuickplayStateBPFL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayStateBPFL>();
	}
};
static_assert(alignof(UPilgrimQuickplayStateBPFL) == 0x000008, "Wrong alignment on UPilgrimQuickplayStateBPFL");
static_assert(sizeof(UPilgrimQuickplayStateBPFL) == 0x000028, "Wrong size on UPilgrimQuickplayStateBPFL");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayStateMachine
// 0x0010 (0x00D8 - 0x00C8)
class UPilgrimQuickplayStateMachine final : public UGameplayStateMachine
{
public:
	TArray<class UFortQuestItemDefinition*>       GrantedQuests;                                     // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void CleanUpStageForPlayer(class AFortPlayerPawn* Pawn);
	void GetPlayerPawnsInPlayspace(TArray<class AFortPlayerPawn*>* PlayerPawns);
	void PrepareStageForPlayer(class AFortPlayerPawn* Pawn, const struct FVector& TeleportLocation, const struct FRotator& TeleportRotation);
	void TeleportAllPlayers(const struct FGameplayTagContainer& TeleportTagRequirements);

	EPilgrimQuickplayState GetActivePilgrimStateId() const;
	class UPilgrimQuickplayStateBase* GetActivePilgrimStateObject() const;
	void GetDailyQuests(TArray<class UFortQuestItemDefinition*>* OutDailyQuests) const;
	class UGameplayEventRouterComponent* GetEventRouter() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayStateMachine">();
	}
	static class UPilgrimQuickplayStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayStateMachine>();
	}
};
static_assert(alignof(UPilgrimQuickplayStateMachine) == 0x000008, "Wrong alignment on UPilgrimQuickplayStateMachine");
static_assert(sizeof(UPilgrimQuickplayStateMachine) == 0x0000D8, "Wrong size on UPilgrimQuickplayStateMachine");
static_assert(offsetof(UPilgrimQuickplayStateMachine, GrantedQuests) == 0x0000C8, "Member 'UPilgrimQuickplayStateMachine::GrantedQuests' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayState_Intro
// 0x00A0 (0x0178 - 0x00D8)
class UPilgrimQuickplayState_Intro final : public UPilgrimQuickplayStateBase
{
public:
	struct FGameplayTagContainer                  TeleportTagRequirements;                           // 0x00D8(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         CameraWaitTime;                                    // 0x00F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0x7C];                                      // 0x00FC(0x007C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateCameraWaitTime(const float NewWaitTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayState_Intro">();
	}
	static class UPilgrimQuickplayState_Intro* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayState_Intro>();
	}
};
static_assert(alignof(UPilgrimQuickplayState_Intro) == 0x000008, "Wrong alignment on UPilgrimQuickplayState_Intro");
static_assert(sizeof(UPilgrimQuickplayState_Intro) == 0x000178, "Wrong size on UPilgrimQuickplayState_Intro");
static_assert(offsetof(UPilgrimQuickplayState_Intro, TeleportTagRequirements) == 0x0000D8, "Member 'UPilgrimQuickplayState_Intro::TeleportTagRequirements' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayState_Intro, CameraWaitTime) == 0x0000F8, "Member 'UPilgrimQuickplayState_Intro::CameraWaitTime' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayState_Loading
// 0x0008 (0x00E0 - 0x00D8)
class UPilgrimQuickplayState_Loading final : public UPilgrimQuickplayStateBase
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayState_Loading">();
	}
	static class UPilgrimQuickplayState_Loading* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayState_Loading>();
	}
};
static_assert(alignof(UPilgrimQuickplayState_Loading) == 0x000008, "Wrong alignment on UPilgrimQuickplayState_Loading");
static_assert(sizeof(UPilgrimQuickplayState_Loading) == 0x0000E0, "Wrong size on UPilgrimQuickplayState_Loading");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayState_Outro
// 0x0010 (0x00E8 - 0x00D8)
class UPilgrimQuickplayState_Outro final : public UPilgrimQuickplayStateBase
{
public:
	float                                         StateTTL;                                          // 0x00D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DC[0xC];                                       // 0x00DC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayState_Outro">();
	}
	static class UPilgrimQuickplayState_Outro* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayState_Outro>();
	}
};
static_assert(alignof(UPilgrimQuickplayState_Outro) == 0x000008, "Wrong alignment on UPilgrimQuickplayState_Outro");
static_assert(sizeof(UPilgrimQuickplayState_Outro) == 0x0000E8, "Wrong size on UPilgrimQuickplayState_Outro");
static_assert(offsetof(UPilgrimQuickplayState_Outro, StateTTL) == 0x0000D8, "Member 'UPilgrimQuickplayState_Outro::StateTTL' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayState_Pregame
// 0x0040 (0x0118 - 0x00D8)
class UPilgrimQuickplayState_Pregame final : public UPilgrimQuickplayStateBase
{
public:
	struct FGameplayTagContainer                  TeleportTagRequirements;                           // 0x00D8(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x20];                                      // 0x00F8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayState_Pregame">();
	}
	static class UPilgrimQuickplayState_Pregame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayState_Pregame>();
	}
};
static_assert(alignof(UPilgrimQuickplayState_Pregame) == 0x000008, "Wrong alignment on UPilgrimQuickplayState_Pregame");
static_assert(sizeof(UPilgrimQuickplayState_Pregame) == 0x000118, "Wrong size on UPilgrimQuickplayState_Pregame");
static_assert(offsetof(UPilgrimQuickplayState_Pregame, TeleportTagRequirements) == 0x0000D8, "Member 'UPilgrimQuickplayState_Pregame::TeleportTagRequirements' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayState_PreIntro
// 0x0010 (0x00E8 - 0x00D8)
class UPilgrimQuickplayState_PreIntro final : public UPilgrimQuickplayStateBase
{
public:
	float                                         StateTTLSeconds;                                   // 0x00D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DC[0xC];                                       // 0x00DC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayState_PreIntro">();
	}
	static class UPilgrimQuickplayState_PreIntro* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayState_PreIntro>();
	}
};
static_assert(alignof(UPilgrimQuickplayState_PreIntro) == 0x000008, "Wrong alignment on UPilgrimQuickplayState_PreIntro");
static_assert(sizeof(UPilgrimQuickplayState_PreIntro) == 0x0000E8, "Wrong size on UPilgrimQuickplayState_PreIntro");
static_assert(offsetof(UPilgrimQuickplayState_PreIntro, StateTTLSeconds) == 0x0000D8, "Member 'UPilgrimQuickplayState_PreIntro::StateTTLSeconds' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayState_SetResults
// 0x0000 (0x00D8 - 0x00D8)
class UPilgrimQuickplayState_SetResults final : public UPilgrimQuickplayStateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayState_SetResults">();
	}
	static class UPilgrimQuickplayState_SetResults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayState_SetResults>();
	}
};
static_assert(alignof(UPilgrimQuickplayState_SetResults) == 0x000008, "Wrong alignment on UPilgrimQuickplayState_SetResults");
static_assert(sizeof(UPilgrimQuickplayState_SetResults) == 0x0000D8, "Wrong size on UPilgrimQuickplayState_SetResults");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayState_SongGameplay
// 0x0048 (0x0120 - 0x00D8)
class UPilgrimQuickplayState_SongGameplay final : public UPilgrimQuickplayStateBase
{
public:
	struct FGameplayTagContainer                  StageTeleportTagRequirements;                      // 0x00D8(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class APilgrimMusicBattleInstance> PilgrimMusicBattleInstanceClass;                   // 0x00F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHaveTriggeredMBIFinished;                         // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_101[0x1F];                                     // 0x0101(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BuildSongResultData();
	void OnMusicBattleFinished(EMusicBattleEndReason EndReason);
	void OnMusicBattleStoppedEarly(EMusicBattleEndReason EndReason);

	const TArray<class APilgrimMusicBattleInstance*> GetPilgrimMusicBattleInstances() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayState_SongGameplay">();
	}
	static class UPilgrimQuickplayState_SongGameplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayState_SongGameplay>();
	}
};
static_assert(alignof(UPilgrimQuickplayState_SongGameplay) == 0x000008, "Wrong alignment on UPilgrimQuickplayState_SongGameplay");
static_assert(sizeof(UPilgrimQuickplayState_SongGameplay) == 0x000120, "Wrong size on UPilgrimQuickplayState_SongGameplay");
static_assert(offsetof(UPilgrimQuickplayState_SongGameplay, StageTeleportTagRequirements) == 0x0000D8, "Member 'UPilgrimQuickplayState_SongGameplay::StageTeleportTagRequirements' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayState_SongGameplay, PilgrimMusicBattleInstanceClass) == 0x0000F8, "Member 'UPilgrimQuickplayState_SongGameplay::PilgrimMusicBattleInstanceClass' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayState_SongGameplay, bHaveTriggeredMBIFinished) == 0x000100, "Member 'UPilgrimQuickplayState_SongGameplay::bHaveTriggeredMBIFinished' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplayState_SongResults
// 0x0128 (0x0200 - 0x00D8)
class UPilgrimQuickplayState_SongResults final : public UPilgrimQuickplayStateBase
{
public:
	double                                        ServerEndTime;                                     // 0x00D8(0x0008)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         WaitTimeWithMoreSongs;                             // 0x00E0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         WaitTimeWithNoMoreSongs;                           // 0x0108(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         WaitTimeAllPlayersReady;                           // 0x0130(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                           WaitTimerHandle;                                   // 0x0158(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<TWeakObjectPtr<class AFortPlayerStateAthena>> PlayerList;                                        // 0x0160(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSet<TWeakObjectPtr<class AFortPlayerStateAthena>> ReadyPlayers;                                      // 0x01B0(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void ClientUpdateStateEndTime(float ServerWorldEndTimeSeconds);
	void GoToNextState();
	void HandleTimerFinished();
	void OnPlayerDisconnected(class AFortPlayerStateAthena* PlayerState, bool bIsDisconnected);
	void OnRep_ServerEndTime();
	void ServerRecievedPlayPreviousSongFromClient(class UPilgrimPlayerControllerComponent* ControllerComponent, EPilgrimStateMachineMessage StateMachineMessage);
	void ServerSetEndTime(float ServerWorldEndTimeSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplayState_SongResults">();
	}
	static class UPilgrimQuickplayState_SongResults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplayState_SongResults>();
	}
};
static_assert(alignof(UPilgrimQuickplayState_SongResults) == 0x000008, "Wrong alignment on UPilgrimQuickplayState_SongResults");
static_assert(sizeof(UPilgrimQuickplayState_SongResults) == 0x000200, "Wrong size on UPilgrimQuickplayState_SongResults");
static_assert(offsetof(UPilgrimQuickplayState_SongResults, ServerEndTime) == 0x0000D8, "Member 'UPilgrimQuickplayState_SongResults::ServerEndTime' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayState_SongResults, WaitTimeWithMoreSongs) == 0x0000E0, "Member 'UPilgrimQuickplayState_SongResults::WaitTimeWithMoreSongs' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayState_SongResults, WaitTimeWithNoMoreSongs) == 0x000108, "Member 'UPilgrimQuickplayState_SongResults::WaitTimeWithNoMoreSongs' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayState_SongResults, WaitTimeAllPlayersReady) == 0x000130, "Member 'UPilgrimQuickplayState_SongResults::WaitTimeAllPlayersReady' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayState_SongResults, WaitTimerHandle) == 0x000158, "Member 'UPilgrimQuickplayState_SongResults::WaitTimerHandle' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayState_SongResults, PlayerList) == 0x000160, "Member 'UPilgrimQuickplayState_SongResults::PlayerList' has a wrong offset!");
static_assert(offsetof(UPilgrimQuickplayState_SongResults, ReadyPlayers) == 0x0001B0, "Member 'UPilgrimQuickplayState_SongResults::ReadyPlayers' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimQuickplaySuspendHandleComponent
// 0x0028 (0x00C8 - 0x00A0)
class UPilgrimQuickplaySuspendHandleComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x28];                                      // 0x00A0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ServerOnTimedInputReceived(class UPilgrimPlayerControllerComponent* PilgrimPC, const struct FPilgrimTimedInput& TimedInput);
	void ServerSyncHeartbeatMessageReceived(class UPilgrimPlayerControllerComponent* PilgrimPC);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuickplaySuspendHandleComponent">();
	}
	static class UPilgrimQuickplaySuspendHandleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuickplaySuspendHandleComponent>();
	}
};
static_assert(alignof(UPilgrimQuickplaySuspendHandleComponent) == 0x000008, "Wrong alignment on UPilgrimQuickplaySuspendHandleComponent");
static_assert(sizeof(UPilgrimQuickplaySuspendHandleComponent) == 0x0000C8, "Wrong size on UPilgrimQuickplaySuspendHandleComponent");

// Class PilgrimQuickplayRuntime.PilgrimStandinDirector
// 0x0090 (0x0188 - 0x00F8)
class UPilgrimStandinDirector final : public UFortPlayspaceComponent
{
public:
	TMap<ESparksInstrumentType, class UFortWeaponItemDefinition*> InstrumentToWeaponMap;                             // 0x00F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAthenaAISpawnerData>   AISpawnerData;                                     // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPrimaryAssetId>                Emotes;                                            // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AFortPlayerPawnAthena>> SpawnedStandinPawns;                               // 0x0160(0x0010)(Net, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AFortPlayerStateAthena>> SpawnedStandinStates;                              // 0x0170(0x0010)(Net, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x8];                                      // 0x0180(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupListeners(class UGameplayEventRouterComponent* EventRouter);
	void TeleportSpawnedStandins(const TArray<class AFortPlayerStart*>& Destinations);

	TArray<class AFortPlayerPawnAthena*> GetStandinPawns() const;
	TArray<class AFortPlayerStateAthena*> GetStandinStates() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimStandinDirector">();
	}
	static class UPilgrimStandinDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimStandinDirector>();
	}
};
static_assert(alignof(UPilgrimStandinDirector) == 0x000008, "Wrong alignment on UPilgrimStandinDirector");
static_assert(sizeof(UPilgrimStandinDirector) == 0x000188, "Wrong size on UPilgrimStandinDirector");
static_assert(offsetof(UPilgrimStandinDirector, InstrumentToWeaponMap) == 0x0000F8, "Member 'UPilgrimStandinDirector::InstrumentToWeaponMap' has a wrong offset!");
static_assert(offsetof(UPilgrimStandinDirector, AISpawnerData) == 0x000148, "Member 'UPilgrimStandinDirector::AISpawnerData' has a wrong offset!");
static_assert(offsetof(UPilgrimStandinDirector, Emotes) == 0x000150, "Member 'UPilgrimStandinDirector::Emotes' has a wrong offset!");
static_assert(offsetof(UPilgrimStandinDirector, SpawnedStandinPawns) == 0x000160, "Member 'UPilgrimStandinDirector::SpawnedStandinPawns' has a wrong offset!");
static_assert(offsetof(UPilgrimStandinDirector, SpawnedStandinStates) == 0x000170, "Member 'UPilgrimStandinDirector::SpawnedStandinStates' has a wrong offset!");

// Class PilgrimQuickplayRuntime.PilgrimStandinPawnComponent
// 0x0008 (0x00B8 - 0x00B0)
class UPilgrimStandinPawnComponent final : public UPilgrimPawnComponent
{
public:
	struct FGameplayTag                           SpawninEffect;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupListeners(class UGameplayEventRouterComponent* EventRouter);
	void StartInstrumentAnimation(class APlayerState* PlayerState, class ASparksMusicPlayspace* Playspace);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimStandinPawnComponent">();
	}
	static class UPilgrimStandinPawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimStandinPawnComponent>();
	}
};
static_assert(alignof(UPilgrimStandinPawnComponent) == 0x000008, "Wrong alignment on UPilgrimStandinPawnComponent");
static_assert(sizeof(UPilgrimStandinPawnComponent) == 0x0000B8, "Wrong size on UPilgrimStandinPawnComponent");
static_assert(offsetof(UPilgrimStandinPawnComponent, SpawninEffect) == 0x0000B0, "Member 'UPilgrimStandinPawnComponent::SpawninEffect' has a wrong offset!");

// Class PilgrimQuickplayRuntime.BandReplicationGraphNode
// 0x0010 (0x0060 - 0x0050)
class UBandReplicationGraphNode final : public UFortReplicationGraphNode_Custom
{
public:
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BandReplicationGraphNode">();
	}
	static class UBandReplicationGraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBandReplicationGraphNode>();
	}
};
static_assert(alignof(UBandReplicationGraphNode) == 0x000008, "Wrong alignment on UBandReplicationGraphNode");
static_assert(sizeof(UBandReplicationGraphNode) == 0x000060, "Wrong size on UBandReplicationGraphNode");

}

