#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CosmeticsFrameworkLoadouts

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct CosmeticsFrameworkLoadouts.CosmeticCustomizationInfo
// 0x0018 (0x0018 - 0x0000)
struct FCosmeticCustomizationInfo final
{
public:
	struct FGameplayTag                           ChannelTag;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantTag;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalData;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticCustomizationInfo) == 0x000008, "Wrong alignment on FCosmeticCustomizationInfo");
static_assert(sizeof(FCosmeticCustomizationInfo) == 0x000018, "Wrong size on FCosmeticCustomizationInfo");
static_assert(offsetof(FCosmeticCustomizationInfo, ChannelTag) == 0x000000, "Member 'FCosmeticCustomizationInfo::ChannelTag' has a wrong offset!");
static_assert(offsetof(FCosmeticCustomizationInfo, VariantTag) == 0x000004, "Member 'FCosmeticCustomizationInfo::VariantTag' has a wrong offset!");
static_assert(offsetof(FCosmeticCustomizationInfo, AdditionalData) == 0x000008, "Member 'FCosmeticCustomizationInfo::AdditionalData' has a wrong offset!");

// ScriptStruct CosmeticsFrameworkLoadouts.CosmeticLoadoutSlot
// 0x0020 (0x0020 - 0x0000)
struct FCosmeticLoadoutSlot final
{
public:
	class UCosmeticLoadoutSlotTemplate*           SlotTemplate;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                EquippedItemDefinitionObject;                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FCosmeticCustomizationInfo>     CustomizationInfo;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCosmeticLoadoutSlot) == 0x000008, "Wrong alignment on FCosmeticLoadoutSlot");
static_assert(sizeof(FCosmeticLoadoutSlot) == 0x000020, "Wrong size on FCosmeticLoadoutSlot");
static_assert(offsetof(FCosmeticLoadoutSlot, SlotTemplate) == 0x000000, "Member 'FCosmeticLoadoutSlot::SlotTemplate' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutSlot, EquippedItemDefinitionObject) == 0x000008, "Member 'FCosmeticLoadoutSlot::EquippedItemDefinitionObject' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutSlot, CustomizationInfo) == 0x000010, "Member 'FCosmeticLoadoutSlot::CustomizationInfo' has a wrong offset!");

// ScriptStruct CosmeticsFrameworkLoadouts.CosmeticLoadout
// 0x0010 (0x0010 - 0x0000)
struct FCosmeticLoadout final
{
public:
	TArray<struct FCosmeticLoadoutSlot>           Slots;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCosmeticLoadout) == 0x000008, "Wrong alignment on FCosmeticLoadout");
static_assert(sizeof(FCosmeticLoadout) == 0x000010, "Wrong size on FCosmeticLoadout");
static_assert(offsetof(FCosmeticLoadout, Slots) == 0x000000, "Member 'FCosmeticLoadout::Slots' has a wrong offset!");

// ScriptStruct CosmeticsFrameworkLoadouts.CosmeticBackendLoadoutSlot
// 0x0020 (0x0020 - 0x0000)
struct FCosmeticBackendLoadoutSlot final
{
public:
	struct FPrimaryAssetId                        SlotTemplate;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        EquippedItem;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmeticCustomizationInfo>     CustomizationInfo;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticBackendLoadoutSlot) == 0x000008, "Wrong alignment on FCosmeticBackendLoadoutSlot");
static_assert(sizeof(FCosmeticBackendLoadoutSlot) == 0x000020, "Wrong size on FCosmeticBackendLoadoutSlot");
static_assert(offsetof(FCosmeticBackendLoadoutSlot, SlotTemplate) == 0x000000, "Member 'FCosmeticBackendLoadoutSlot::SlotTemplate' has a wrong offset!");
static_assert(offsetof(FCosmeticBackendLoadoutSlot, EquippedItem) == 0x000008, "Member 'FCosmeticBackendLoadoutSlot::EquippedItem' has a wrong offset!");
static_assert(offsetof(FCosmeticBackendLoadoutSlot, CustomizationInfo) == 0x000010, "Member 'FCosmeticBackendLoadoutSlot::CustomizationInfo' has a wrong offset!");

// ScriptStruct CosmeticsFrameworkLoadouts.CosmeticBackendLoadout
// 0x0040 (0x0040 - 0x0000)
struct FCosmeticBackendLoadout final
{
public:
	TArray<struct FCosmeticBackendLoadoutSlot>    Slots;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UserTags;                                          // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticBackendLoadout) == 0x000008, "Wrong alignment on FCosmeticBackendLoadout");
static_assert(sizeof(FCosmeticBackendLoadout) == 0x000040, "Wrong size on FCosmeticBackendLoadout");
static_assert(offsetof(FCosmeticBackendLoadout, Slots) == 0x000000, "Member 'FCosmeticBackendLoadout::Slots' has a wrong offset!");
static_assert(offsetof(FCosmeticBackendLoadout, UserTags) == 0x000010, "Member 'FCosmeticBackendLoadout::UserTags' has a wrong offset!");
static_assert(offsetof(FCosmeticBackendLoadout, DisplayName) == 0x000030, "Member 'FCosmeticBackendLoadout::DisplayName' has a wrong offset!");

// ScriptStruct CosmeticsFrameworkLoadouts.CosmeticLoadoutSlotRequirements
// 0x0050 (0x0050 - 0x0000)
struct FCosmeticLoadoutSlotRequirements final
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DeniedTags;                                        // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetType>              AllowedItemTypes;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticLoadoutSlotRequirements) == 0x000008, "Wrong alignment on FCosmeticLoadoutSlotRequirements");
static_assert(sizeof(FCosmeticLoadoutSlotRequirements) == 0x000050, "Wrong size on FCosmeticLoadoutSlotRequirements");
static_assert(offsetof(FCosmeticLoadoutSlotRequirements, RequiredTags) == 0x000000, "Member 'FCosmeticLoadoutSlotRequirements::RequiredTags' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutSlotRequirements, DeniedTags) == 0x000020, "Member 'FCosmeticLoadoutSlotRequirements::DeniedTags' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutSlotRequirements, AllowedItemTypes) == 0x000040, "Member 'FCosmeticLoadoutSlotRequirements::AllowedItemTypes' has a wrong offset!");

}

