#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PilgrimCoreRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "SparksCoreRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "HarmonixMidi_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Enum PilgrimCoreRuntime.EPilgrimTrackLane
// NumValues: 0x0008
enum class EPilgrimTrackLane : uint8
{
	TrackLaneNone                            = 0,
	TrackLane0                               = 1,
	TrackLane1                               = 2,
	TrackLane2                               = 4,
	TrackLane3                               = 8,
	TrackLane4                               = 16,
	TrackLane5                               = 32,
	NumTrackLanes                            = 6,
};

// Enum PilgrimCoreRuntime.EBeatMarkerType
// NumValues: 0x0003
enum class EBeatMarkerType : uint8
{
	None                                     = 0,
	OnBeat                                   = 1,
	OnDownbeat                               = 2,
};

// Enum PilgrimCoreRuntime.EPilgrimTrackType
// NumValues: 0x000A
enum class EPilgrimTrackType : uint8
{
	TrackGuitar                              = 0,
	TrackBass                                = 1,
	TrackVocals                              = 2,
	TrackDrum                                = 3,
	TrackPlasticGuitar                       = 4,
	TrackPlasticBass                         = 5,
	TrackPlasticDrum                         = 6,
	TrackEvents                              = 7,
	TrackNone                                = 8,
	NumTrackTypes                            = 8,
};

// Enum PilgrimCoreRuntime.EOverdriveScoringState
// NumValues: 0x0003
enum class EOverdriveScoringState : uint8
{
	None                                     = 0,
	FailedSection                            = 1,
	ActiveSection                            = 2,
};

// Enum PilgrimCoreRuntime.EMusicBattleProjectileType
// NumValues: 0x0005
enum class EMusicBattleProjectileType : uint8
{
	None                                     = 0,
	BeamSuccess                              = 1,
	BeamFailure                              = 2,
	BeamClash                                = 3,
	BothMiss                                 = 4,
};

// Enum PilgrimCoreRuntime.EPilgrimSongDifficulty
// NumValues: 0x0006
enum class EPilgrimSongDifficulty : uint8
{
	DifficultyEasy                           = 0,
	DifficultyMedium                         = 1,
	DifficultyHard                           = 2,
	DifficultyExpert                         = 3,
	None                                     = 4,
	NumDifficulties                          = 5,
};

// Enum PilgrimCoreRuntime.EPilgrimSongPlayMethod
// NumValues: 0x0003
enum class EPilgrimSongPlayMethod : uint8
{
	Invalid                                  = 0,
	Streaming                                = 1,
	LocalMetasounds                          = 2,
};

// Enum PilgrimCoreRuntime.EMusicBattleEndReason
// NumValues: 0x0005
enum class EMusicBattleEndReason : uint8
{
	NoReason                                 = 0,
	CompletedNormally                        = 1,
	HardStopAndSkipPostGame                  = 2,
	HardStopAndContinueFlow                  = 3,
	RestartingSong                           = 4,
};

// Enum PilgrimCoreRuntime.EMusicBattleClientUpdate
// NumValues: 0x0004
enum class EMusicBattleClientUpdate : uint8
{
	SongFinished                             = 0,
	TearDownFinished                         = 1,
	StopAndSkipPostGame                      = 2,
	StopAndRestartSong                       = 3,
};

// Enum PilgrimCoreRuntime.EPilgrimTimedInputType
// NumValues: 0x0003
enum class EPilgrimTimedInputType : uint8
{
	None                                     = 0,
	Lane                                     = 1,
	DeployOverdrive                          = 2,
};

// Enum PilgrimCoreRuntime.EMusicBattleType
// NumValues: 0x0005
enum class EMusicBattleType : uint8
{
	None                                     = 0,
	SinglePlayerLocalVs                      = 1,
	MultiplayerVs                            = 2,
	SinglePlayerSparks                       = 3,
	TeamQuickplay                            = 4,
};

// Enum PilgrimCoreRuntime.EPilgrimLeaderboardType
// NumValues: 0x0008
enum class EPilgrimLeaderboardType : uint8
{
	SoloGuitar                               = 0,
	SoloBass                                 = 1,
	SoloVocals                               = 2,
	SoloDrum                                 = 3,
	BandDuo                                  = 4,
	BandTrio                                 = 5,
	BandQuad                                 = 6,
	Invalid                                  = 7,
};

// Enum PilgrimCoreRuntime.EPilgrimPlayerFeedSortType
// NumValues: 0x0004
enum class EPilgrimPlayerFeedSortType : uint8
{
	NewestScore                              = 0,
	OldestScore                              = 1,
	HighestScore                             = 2,
	LowestScore                              = 3,
};

// Enum PilgrimCoreRuntime.ESongShortNameMatchType
// NumValues: 0x0004
enum class ESongShortNameMatchType : uint8
{
	AlwaysMatch                              = 0,
	MatchAny                                 = 1,
	MatchAll                                 = 2,
	MatchNone                                = 3,
};

// Enum PilgrimCoreRuntime.EPilgrimCantAddSongReason
// NumValues: 0x0007
enum class EPilgrimCantAddSongReason : uint8
{
	None                                     = 0,
	SetlistLocked                            = 1,
	SongAlreadyAdded                         = 2,
	PlayerHasAddedMaxSongs                   = 3,
	InvalidSongShortName                     = 4,
	MissingSong                              = 5,
	SongNotAvailable                         = 6,
};

// Enum PilgrimCoreRuntime.EPilgrimPlayerHistoryScoreParam
// NumValues: 0x0003
enum class EPilgrimPlayerHistoryScoreParam : uint8
{
	AllScores                                = 0,
	HigherScores                             = 1,
	LowerScores                              = 2,
};

// Enum PilgrimCoreRuntime.EPilgrimStreamerStatus
// NumValues: 0x0007
enum class EPilgrimStreamerStatus : uint8
{
	Idle                                     = 0,
	DownloadingMidi                          = 1,
	Preparing                                = 2,
	Opening                                  = 3,
	Ready                                    = 4,
	Streaming                                = 5,
	Errored                                  = 6,
};

// Enum PilgrimCoreRuntime.EPilgrimStateMachineMessage
// NumValues: 0x0005
enum class EPilgrimStateMachineMessage : uint8
{
	None                                     = 0,
	Solo_PlayPreviousSong                    = 1,
	Solo_PlayNextSong                        = 2,
	Solo_LeaveStage                          = 3,
	Multiplayer_LeaveStage                   = 4,
};

// Enum PilgrimCoreRuntime.EPilgrimAnalyticsSongEndReason
// NumValues: 0x0003
enum class EPilgrimAnalyticsSongEndReason : uint8
{
	SongFinished                             = 0,
	SongRestarted                            = 1,
	PlayerDisconnected                       = 2,
};

// Enum PilgrimCoreRuntime.EPilgrimAnalyticsSongAccessScope
// NumValues: 0x0004
enum class EPilgrimAnalyticsSongAccessScope : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Party                                    = 2,
	All                                      = 3,
};

// Enum PilgrimCoreRuntime.EPilgrimAnalyticsResultsReturn
// NumValues: 0x0004
enum class EPilgrimAnalyticsResultsReturn : uint8
{
	None                                     = 0,
	LeaveToLobby                             = 1,
	LeaveStage                               = 2,
	LeaveStage_Timer                         = 3,
};

// Enum PilgrimCoreRuntime.EPresetLanesDifficulty
// NumValues: 0x0002
enum class EPresetLanesDifficulty : uint8
{
	General                                  = 4,
	Expert                                   = 5,
};

// Enum PilgrimCoreRuntime.EPilgrimGemInputState
// NumValues: 0x0004
enum class EPilgrimGemInputState : uint8
{
	GemHit                                   = 0,
	UserSwingAndMiss                         = 1,
	GemPassed                                = 2,
	NumGemInputStates                        = 3,
};

// Enum PilgrimCoreRuntime.EPilgrimPersonalBestType
// NumValues: 0x0004
enum class EPilgrimPersonalBestType : uint8
{
	SoloScore                                = 0,
	BandScore                                = 1,
	SpotlightScore                           = 2,
	Invalid                                  = 3,
};

// Enum PilgrimCoreRuntime.EPilgrimAccumulateStarsMessageType
// NumValues: 0x0003
enum class EPilgrimAccumulateStarsMessageType : uint8
{
	BandStars                                = 0,
	SoloStars                                = 1,
	Count                                    = 2,
};

// Enum PilgrimCoreRuntime.EPilgrimAccumulateStarTypes
// NumValues: 0x0003
enum class EPilgrimAccumulateStarTypes : uint8
{
	None                                     = 0,
	Regular                                  = 1,
	Golden                                   = 2,
};

// Enum PilgrimCoreRuntime.EPilgrimNoteEventMessageIncrementType
// NumValues: 0x0003
enum class EPilgrimNoteEventMessageIncrementType : uint8
{
	ByTime                                   = 0,
	ByValue                                  = 1,
	Count                                    = 2,
};

// Enum PilgrimCoreRuntime.EPilgrimScoreEventMessageType
// NumValues: 0x0003
enum class EPilgrimScoreEventMessageType : uint8
{
	BandScore                                = 0,
	SoloScore                                = 1,
	Count                                    = 2,
};

// Enum PilgrimCoreRuntime.EPilgrimScoreEventMessageIncrementType
// NumValues: 0x0004
enum class EPilgrimScoreEventMessageIncrementType : uint8
{
	ByScore                                  = 0,
	ByStars                                  = 1,
	ByValue                                  = 2,
	Count                                    = 3,
};

// Enum PilgrimCoreRuntime.EScoringMistakeType
// NumValues: 0x0002
enum class EScoringMistakeType : uint8
{
	Miss                                     = 0,
	Pass                                     = 1,
};

// Enum PilgrimCoreRuntime.EPilgrimScoringMode
// NumValues: 0x0002
enum class EPilgrimScoringMode : uint8
{
	IncludeModifiers                         = 0,
	ExcludeModifiers                         = 1,
};

// Enum PilgrimCoreRuntime.EPilgrimScoringTarget
// NumValues: 0x0006
enum class EPilgrimScoringTarget : uint8
{
	None                                     = 0,
	BaseGem                                  = 1,
	StreakMultiplier                         = 2,
	OverdriveMultiplier                      = 3,
	SustainPerBeat                           = 4,
	AccuracyMultiplier                       = 5,
};

// Enum PilgrimCoreRuntime.EPilgrimSongSortMethod
// NumValues: 0x0003
enum class EPilgrimSongSortMethod : uint8
{
	Artist                                   = 0,
	Title                                    = 1,
	Year                                     = 2,
};

// Enum PilgrimCoreRuntime.EPilgrimSongSortDirection
// NumValues: 0x0002
enum class EPilgrimSongSortDirection : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
};

// Enum PilgrimCoreRuntime.EWidgetTouchKbmControllerTransitionType
// NumValues: 0x0004
enum class EWidgetTouchKbmControllerTransitionType : uint8
{
	Opacity                                  = 0,
	Collapse                                 = 1,
	DoNothing                                = 2,
	Count                                    = 3,
};

// Enum PilgrimCoreRuntime.EComboType
// NumValues: 0x0003
enum class EComboType : uint8
{
	None                                     = 0,
	Full                                     = 1,
	Perfect                                  = 2,
};

// ScriptStruct PilgrimCoreRuntime.TrackItemInfo
// 0x0030 (0x0030 - 0x0000)
struct FTrackItemInfo final
{
public:
	int32                                         StartTick;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTick;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumScorables;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ms;                                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationMs;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationTicks;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             Track;                                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackLane                             Lane;                                              // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeatMarkerType                               BeatType;                                          // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrackItemIndex;                                    // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverdriveGem;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverdriveSectionNum;                               // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEndOfOverdriveSection;                           // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowHitOnPress;                                  // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowHitOnRelease;                                // 0x002A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSustain;                                        // 0x002B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackItemInfo) == 0x000004, "Wrong alignment on FTrackItemInfo");
static_assert(sizeof(FTrackItemInfo) == 0x000030, "Wrong size on FTrackItemInfo");
static_assert(offsetof(FTrackItemInfo, StartTick) == 0x000000, "Member 'FTrackItemInfo::StartTick' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, EndTick) == 0x000004, "Member 'FTrackItemInfo::EndTick' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, NumScorables) == 0x000008, "Member 'FTrackItemInfo::NumScorables' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, Ms) == 0x00000C, "Member 'FTrackItemInfo::Ms' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, DurationMs) == 0x000010, "Member 'FTrackItemInfo::DurationMs' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, DurationTicks) == 0x000014, "Member 'FTrackItemInfo::DurationTicks' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, Track) == 0x000018, "Member 'FTrackItemInfo::Track' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, Lane) == 0x000019, "Member 'FTrackItemInfo::Lane' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, BeatType) == 0x00001A, "Member 'FTrackItemInfo::BeatType' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, TrackItemIndex) == 0x00001C, "Member 'FTrackItemInfo::TrackItemIndex' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, IsOverdriveGem) == 0x000020, "Member 'FTrackItemInfo::IsOverdriveGem' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, OverdriveSectionNum) == 0x000024, "Member 'FTrackItemInfo::OverdriveSectionNum' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, IsEndOfOverdriveSection) == 0x000028, "Member 'FTrackItemInfo::IsEndOfOverdriveSection' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, bAllowHitOnPress) == 0x000029, "Member 'FTrackItemInfo::bAllowHitOnPress' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, bAllowHitOnRelease) == 0x00002A, "Member 'FTrackItemInfo::bAllowHitOnRelease' has a wrong offset!");
static_assert(offsetof(FTrackItemInfo, bIsSustain) == 0x00002B, "Member 'FTrackItemInfo::bIsSustain' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimLeaderboardScoreData
// 0x0020 (0x0020 - 0x0000)
struct FPilgrimLeaderboardScoreData final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StarsEarned;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accuracy;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullCombo;                                        // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPilgrimTrackType>                     InstrumentsPlayed;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimLeaderboardScoreData) == 0x000008, "Wrong alignment on FPilgrimLeaderboardScoreData");
static_assert(sizeof(FPilgrimLeaderboardScoreData) == 0x000020, "Wrong size on FPilgrimLeaderboardScoreData");
static_assert(offsetof(FPilgrimLeaderboardScoreData, Score) == 0x000000, "Member 'FPilgrimLeaderboardScoreData::Score' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardScoreData, StarsEarned) == 0x000004, "Member 'FPilgrimLeaderboardScoreData::StarsEarned' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardScoreData, Accuracy) == 0x000008, "Member 'FPilgrimLeaderboardScoreData::Accuracy' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardScoreData, bFullCombo) == 0x00000C, "Member 'FPilgrimLeaderboardScoreData::bFullCombo' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardScoreData, Difficulty) == 0x00000D, "Member 'FPilgrimLeaderboardScoreData::Difficulty' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardScoreData, InstrumentsPlayed) == 0x000010, "Member 'FPilgrimLeaderboardScoreData::InstrumentsPlayed' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerSessionHistory
// 0x0038 (0x0038 - 0x0000)
struct FPilgrimPlayerSessionHistory final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimLeaderboardScoreData           TrackedStats;                                      // 0x0018(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPlayerSessionHistory) == 0x000008, "Wrong alignment on FPilgrimPlayerSessionHistory");
static_assert(sizeof(FPilgrimPlayerSessionHistory) == 0x000038, "Wrong size on FPilgrimPlayerSessionHistory");
static_assert(offsetof(FPilgrimPlayerSessionHistory, SessionId) == 0x000000, "Member 'FPilgrimPlayerSessionHistory::SessionId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerSessionHistory, EndTime) == 0x000010, "Member 'FPilgrimPlayerSessionHistory::EndTime' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerSessionHistory, TrackedStats) == 0x000018, "Member 'FPilgrimPlayerSessionHistory::TrackedStats' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimGameProgress
// 0x006C (0x006C - 0x0000)
struct FPilgrimGameProgress final
{
public:
	int32                                         NumHits;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMisses;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPasses;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFullCombo;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPerfectCombo;                                  // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentTick;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoteStreak;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentScore;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentModifierBonus;                              // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentStar;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextStarProgress;                                  // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakScoreMultiplier;                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotesPastLastMultiplier;                           // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotesToNextMultiplier;                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentHealth;                                     // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverdriveActive;                                 // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentOverdrive;                                  // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentOverdriveSectionNum;                        // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BandScoreContribution;                             // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BandModifierBonusContribution;                     // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOverdriveScoringState                        OverdriveScoringState;                             // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxScore;                                          // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAtMaxStreak;                                    // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentSustainScore;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentChordScore;                                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverdriveTime;                                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPerfects;                                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x4];                                       // 0x0068(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGameProgress) == 0x000004, "Wrong alignment on FPilgrimGameProgress");
static_assert(sizeof(FPilgrimGameProgress) == 0x00006C, "Wrong size on FPilgrimGameProgress");
static_assert(offsetof(FPilgrimGameProgress, NumHits) == 0x000000, "Member 'FPilgrimGameProgress::NumHits' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, NumMisses) == 0x000004, "Member 'FPilgrimGameProgress::NumMisses' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, NumPasses) == 0x000008, "Member 'FPilgrimGameProgress::NumPasses' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, bHasFullCombo) == 0x00000C, "Member 'FPilgrimGameProgress::bHasFullCombo' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, bHasPerfectCombo) == 0x00000D, "Member 'FPilgrimGameProgress::bHasPerfectCombo' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, CurrentTick) == 0x000010, "Member 'FPilgrimGameProgress::CurrentTick' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, NoteStreak) == 0x000014, "Member 'FPilgrimGameProgress::NoteStreak' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, CurrentScore) == 0x000018, "Member 'FPilgrimGameProgress::CurrentScore' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, CurrentModifierBonus) == 0x00001C, "Member 'FPilgrimGameProgress::CurrentModifierBonus' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, CurrentStar) == 0x000020, "Member 'FPilgrimGameProgress::CurrentStar' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, NextStarProgress) == 0x000024, "Member 'FPilgrimGameProgress::NextStarProgress' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, StreakScoreMultiplier) == 0x000028, "Member 'FPilgrimGameProgress::StreakScoreMultiplier' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, NotesPastLastMultiplier) == 0x00002C, "Member 'FPilgrimGameProgress::NotesPastLastMultiplier' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, NotesToNextMultiplier) == 0x000030, "Member 'FPilgrimGameProgress::NotesToNextMultiplier' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, CurrentHealth) == 0x000034, "Member 'FPilgrimGameProgress::CurrentHealth' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, IsOverdriveActive) == 0x000038, "Member 'FPilgrimGameProgress::IsOverdriveActive' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, CurrentOverdrive) == 0x00003C, "Member 'FPilgrimGameProgress::CurrentOverdrive' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, CurrentOverdriveSectionNum) == 0x000040, "Member 'FPilgrimGameProgress::CurrentOverdriveSectionNum' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, BandScoreContribution) == 0x000044, "Member 'FPilgrimGameProgress::BandScoreContribution' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, BandModifierBonusContribution) == 0x000048, "Member 'FPilgrimGameProgress::BandModifierBonusContribution' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, OverdriveScoringState) == 0x00004C, "Member 'FPilgrimGameProgress::OverdriveScoringState' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, MaxScore) == 0x000050, "Member 'FPilgrimGameProgress::MaxScore' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, bIsAtMaxStreak) == 0x000054, "Member 'FPilgrimGameProgress::bIsAtMaxStreak' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, CurrentSustainScore) == 0x000058, "Member 'FPilgrimGameProgress::CurrentSustainScore' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, CurrentChordScore) == 0x00005C, "Member 'FPilgrimGameProgress::CurrentChordScore' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, OverdriveTime) == 0x000060, "Member 'FPilgrimGameProgress::OverdriveTime' has a wrong offset!");
static_assert(offsetof(FPilgrimGameProgress, NumPerfects) == 0x000064, "Member 'FPilgrimGameProgress::NumPerfects' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_MBI_EventBase
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimEvent_MBI_EventBase
{
public:
	TWeakObjectPtr<class APilgrimMusicBattleInstance> MusicBattleInstance;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_MBI_EventBase) == 0x000004, "Wrong alignment on FPilgrimEvent_MBI_EventBase");
static_assert(sizeof(FPilgrimEvent_MBI_EventBase) == 0x000008, "Wrong size on FPilgrimEvent_MBI_EventBase");
static_assert(offsetof(FPilgrimEvent_MBI_EventBase, MusicBattleInstance) == 0x000000, "Member 'FPilgrimEvent_MBI_EventBase::MusicBattleInstance' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimMusicBattlePlayerState
// 0x00B8 (0x00B8 - 0x0000)
struct FPilgrimMusicBattlePlayerState final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             TrackType;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InstrumentTags;                                    // 0x0010(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimGameProgress>           ScoreUpdateHistory;                                // 0x0030(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	int32                                         LastPlayableIndexProcessed;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastPlayableIndexReceived;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimGameProgress                   PilgrimGameProgress;                               // 0x0048(0x006C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimMusicBattlePlayerState) == 0x000008, "Wrong alignment on FPilgrimMusicBattlePlayerState");
static_assert(sizeof(FPilgrimMusicBattlePlayerState) == 0x0000B8, "Wrong size on FPilgrimMusicBattlePlayerState");
static_assert(offsetof(FPilgrimMusicBattlePlayerState, PlayerState) == 0x000000, "Member 'FPilgrimMusicBattlePlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattlePlayerState, Team) == 0x000008, "Member 'FPilgrimMusicBattlePlayerState::Team' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattlePlayerState, TrackType) == 0x000009, "Member 'FPilgrimMusicBattlePlayerState::TrackType' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattlePlayerState, InstrumentTags) == 0x000010, "Member 'FPilgrimMusicBattlePlayerState::InstrumentTags' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattlePlayerState, ScoreUpdateHistory) == 0x000030, "Member 'FPilgrimMusicBattlePlayerState::ScoreUpdateHistory' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattlePlayerState, LastPlayableIndexProcessed) == 0x000040, "Member 'FPilgrimMusicBattlePlayerState::LastPlayableIndexProcessed' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattlePlayerState, LastPlayableIndexReceived) == 0x000044, "Member 'FPilgrimMusicBattlePlayerState::LastPlayableIndexReceived' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattlePlayerState, PilgrimGameProgress) == 0x000048, "Member 'FPilgrimMusicBattlePlayerState::PilgrimGameProgress' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimBandState
// 0x002C (0x002C - 0x0000)
struct FPilgrimBandState final
{
public:
	float                                         BandHealth;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BandScore;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BandModifierBonus;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentScoreFromOverdrive;                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalScoreFromOverdrive;                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BandStar;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextBandStarProgress;                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BandVarietyBonus;                                  // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseBandScore;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BandMultiplier;                                    // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllPlayersHaveMaxStreak;                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllPlayersHaveOverdriveReady;                     // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllPlayersHaveOverdriveActive;                    // 0x002A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyPlayersHaveOverdriveActive;                    // 0x002B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimBandState) == 0x000004, "Wrong alignment on FPilgrimBandState");
static_assert(sizeof(FPilgrimBandState) == 0x00002C, "Wrong size on FPilgrimBandState");
static_assert(offsetof(FPilgrimBandState, BandHealth) == 0x000000, "Member 'FPilgrimBandState::BandHealth' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, BandScore) == 0x000004, "Member 'FPilgrimBandState::BandScore' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, BandModifierBonus) == 0x000008, "Member 'FPilgrimBandState::BandModifierBonus' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, CurrentScoreFromOverdrive) == 0x00000C, "Member 'FPilgrimBandState::CurrentScoreFromOverdrive' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, TotalScoreFromOverdrive) == 0x000010, "Member 'FPilgrimBandState::TotalScoreFromOverdrive' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, BandStar) == 0x000014, "Member 'FPilgrimBandState::BandStar' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, NextBandStarProgress) == 0x000018, "Member 'FPilgrimBandState::NextBandStarProgress' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, BandVarietyBonus) == 0x00001C, "Member 'FPilgrimBandState::BandVarietyBonus' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, BaseBandScore) == 0x000020, "Member 'FPilgrimBandState::BaseBandScore' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, BandMultiplier) == 0x000024, "Member 'FPilgrimBandState::BandMultiplier' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, bAllPlayersHaveMaxStreak) == 0x000028, "Member 'FPilgrimBandState::bAllPlayersHaveMaxStreak' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, bAllPlayersHaveOverdriveReady) == 0x000029, "Member 'FPilgrimBandState::bAllPlayersHaveOverdriveReady' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, bAllPlayersHaveOverdriveActive) == 0x00002A, "Member 'FPilgrimBandState::bAllPlayersHaveOverdriveActive' has a wrong offset!");
static_assert(offsetof(FPilgrimBandState, bAnyPlayersHaveOverdriveActive) == 0x00002B, "Member 'FPilgrimBandState::bAnyPlayersHaveOverdriveActive' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimMusicBattleData
// 0x0048 (0x0048 - 0x0000)
struct FPilgrimMusicBattleData final
{
public:
	TArray<struct FPilgrimMusicBattlePlayerState> MusicBattleStates;                                 // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LastPlayableIndexProcessed;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastPlayableIndexReceived;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimBandState                      BandState;                                         // 0x0018(0x002C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimMusicBattleData) == 0x000008, "Wrong alignment on FPilgrimMusicBattleData");
static_assert(sizeof(FPilgrimMusicBattleData) == 0x000048, "Wrong size on FPilgrimMusicBattleData");
static_assert(offsetof(FPilgrimMusicBattleData, MusicBattleStates) == 0x000000, "Member 'FPilgrimMusicBattleData::MusicBattleStates' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattleData, LastPlayableIndexProcessed) == 0x000010, "Member 'FPilgrimMusicBattleData::LastPlayableIndexProcessed' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattleData, LastPlayableIndexReceived) == 0x000014, "Member 'FPilgrimMusicBattleData::LastPlayableIndexReceived' has a wrong offset!");
static_assert(offsetof(FPilgrimMusicBattleData, BandState) == 0x000018, "Member 'FPilgrimMusicBattleData::BandState' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_MBI_CVarEnableTraversalChanged
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_MBI_CVarEnableTraversalChanged final
{
public:
	bool                                          EnabledTraversal;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_MBI_CVarEnableTraversalChanged) == 0x000001, "Wrong alignment on FPilgrimEvent_MBI_CVarEnableTraversalChanged");
static_assert(sizeof(FPilgrimEvent_MBI_CVarEnableTraversalChanged) == 0x000001, "Wrong size on FPilgrimEvent_MBI_CVarEnableTraversalChanged");
static_assert(offsetof(FPilgrimEvent_MBI_CVarEnableTraversalChanged, EnabledTraversal) == 0x000000, "Member 'FPilgrimEvent_MBI_CVarEnableTraversalChanged::EnabledTraversal' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimTrackTypesStateMembership
// 0x00A0 (0x00A0 - 0x0000)
struct FPilgrimTrackTypesStateMembership final
{
public:
	TSet<EPilgrimTrackType>                       TrackTypesInState;                                 // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<EPilgrimTrackType>                       TrackTypesNotInState;                              // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimTrackTypesStateMembership) == 0x000008, "Wrong alignment on FPilgrimTrackTypesStateMembership");
static_assert(sizeof(FPilgrimTrackTypesStateMembership) == 0x0000A0, "Wrong size on FPilgrimTrackTypesStateMembership");
static_assert(offsetof(FPilgrimTrackTypesStateMembership, TrackTypesInState) == 0x000000, "Member 'FPilgrimTrackTypesStateMembership::TrackTypesInState' has a wrong offset!");
static_assert(offsetof(FPilgrimTrackTypesStateMembership, TrackTypesNotInState) == 0x000050, "Member 'FPilgrimTrackTypesStateMembership::TrackTypesNotInState' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_OverdriveReadyTrackTypesChanged
// 0x00A0 (0x00A0 - 0x0000)
struct FPilgrimEvent_BandState_OverdriveReadyTrackTypesChanged final
{
public:
	struct FPilgrimTrackTypesStateMembership      Membership;                                        // 0x0000(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_OverdriveReadyTrackTypesChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_BandState_OverdriveReadyTrackTypesChanged");
static_assert(sizeof(FPilgrimEvent_BandState_OverdriveReadyTrackTypesChanged) == 0x0000A0, "Wrong size on FPilgrimEvent_BandState_OverdriveReadyTrackTypesChanged");
static_assert(offsetof(FPilgrimEvent_BandState_OverdriveReadyTrackTypesChanged, Membership) == 0x000000, "Member 'FPilgrimEvent_BandState_OverdriveReadyTrackTypesChanged::Membership' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.MusicBattleSinglePlayerOptions
// 0x0008 (0x0008 - 0x0000)
struct FMusicBattleSinglePlayerOptions final
{
public:
	bool                                          bOpponentFiresBack;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OpponentGemSuccessRate;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicBattleSinglePlayerOptions) == 0x000004, "Wrong alignment on FMusicBattleSinglePlayerOptions");
static_assert(sizeof(FMusicBattleSinglePlayerOptions) == 0x000008, "Wrong size on FMusicBattleSinglePlayerOptions");
static_assert(offsetof(FMusicBattleSinglePlayerOptions, bOpponentFiresBack) == 0x000000, "Member 'FMusicBattleSinglePlayerOptions::bOpponentFiresBack' has a wrong offset!");
static_assert(offsetof(FMusicBattleSinglePlayerOptions, OpponentGemSuccessRate) == 0x000004, "Member 'FMusicBattleSinglePlayerOptions::OpponentGemSuccessRate' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_OverdriveReadyChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_BandState_OverdriveReadyChanged final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_OverdriveReadyChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_BandState_OverdriveReadyChanged");
static_assert(sizeof(FPilgrimEvent_BandState_OverdriveReadyChanged) == 0x000010, "Wrong size on FPilgrimEvent_BandState_OverdriveReadyChanged");
static_assert(offsetof(FPilgrimEvent_BandState_OverdriveReadyChanged, IsReady) == 0x000000, "Member 'FPilgrimEvent_BandState_OverdriveReadyChanged::IsReady' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_BandState_OverdriveReadyChanged, ForPlayer) == 0x000008, "Member 'FPilgrimEvent_BandState_OverdriveReadyChanged::ForPlayer' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_AllMaxStreakChanged
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_BandState_AllMaxStreakChanged final
{
public:
	bool                                          bAllPlayersHaveMaxStreak;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_AllMaxStreakChanged) == 0x000001, "Wrong alignment on FPilgrimEvent_BandState_AllMaxStreakChanged");
static_assert(sizeof(FPilgrimEvent_BandState_AllMaxStreakChanged) == 0x000001, "Wrong size on FPilgrimEvent_BandState_AllMaxStreakChanged");
static_assert(offsetof(FPilgrimEvent_BandState_AllMaxStreakChanged, bAllPlayersHaveMaxStreak) == 0x000000, "Member 'FPilgrimEvent_BandState_AllMaxStreakChanged::bAllPlayersHaveMaxStreak' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_Base
// 0x0014 (0x0014 - 0x0000)
struct FPilgrimEvent_Midi_Base
{
public:
	EPilgrimTrackType                             TrackType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AtMidiTick;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndsAtMidiTick;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPilgrimGame>            PilgrimGameContext;                                // 0x000C(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Midi_Base) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_Base");
static_assert(sizeof(FPilgrimEvent_Midi_Base) == 0x000014, "Wrong size on FPilgrimEvent_Midi_Base");
static_assert(offsetof(FPilgrimEvent_Midi_Base, TrackType) == 0x000000, "Member 'FPilgrimEvent_Midi_Base::TrackType' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Midi_Base, AtMidiTick) == 0x000004, "Member 'FPilgrimEvent_Midi_Base::AtMidiTick' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Midi_Base, EndsAtMidiTick) == 0x000008, "Member 'FPilgrimEvent_Midi_Base::EndsAtMidiTick' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Midi_Base, PilgrimGameContext) == 0x00000C, "Member 'FPilgrimEvent_Midi_Base::PilgrimGameContext' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextBase
// 0x0024 (0x0038 - 0x0014)
struct FPilgrimEvent_Midi_TextBase : public FPilgrimEvent_Midi_Base
{
public:
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventString;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EventPayload;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Midi_TextBase) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextBase");
static_assert(sizeof(FPilgrimEvent_Midi_TextBase) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextBase");
static_assert(offsetof(FPilgrimEvent_Midi_TextBase, EventString) == 0x000018, "Member 'FPilgrimEvent_Midi_TextBase::EventString' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Midi_TextBase, EventPayload) == 0x000028, "Member 'FPilgrimEvent_Midi_TextBase::EventPayload' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextVocals
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextVocals : public FPilgrimEvent_Midi_TextBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextVocals) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextVocals");
static_assert(sizeof(FPilgrimEvent_Midi_TextVocals) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextVocals");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextVocals_Start
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextVocals_Start final : public FPilgrimEvent_Midi_TextVocals
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextVocals_Start) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextVocals_Start");
static_assert(sizeof(FPilgrimEvent_Midi_TextVocals_Start) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextVocals_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerFeedSongSummary
// 0x0018 (0x0018 - 0x0000)
struct FPilgrimPlayerFeedSongSummary final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EntryIndexes;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPlayerFeedSongSummary) == 0x000008, "Wrong alignment on FPilgrimPlayerFeedSongSummary");
static_assert(sizeof(FPilgrimPlayerFeedSongSummary) == 0x000018, "Wrong size on FPilgrimPlayerFeedSongSummary");
static_assert(offsetof(FPilgrimPlayerFeedSongSummary, SongShortName) == 0x000000, "Member 'FPilgrimPlayerFeedSongSummary::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedSongSummary, EntryIndexes) == 0x000008, "Member 'FPilgrimPlayerFeedSongSummary::EntryIndexes' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_FullComboLost
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_Scoring_FullComboLost final
{
public:
	class AFortPlayerState*                       ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_Scoring_FullComboLost) == 0x000008, "Wrong alignment on FPilgrimEvent_Scoring_FullComboLost");
static_assert(sizeof(FPilgrimEvent_Scoring_FullComboLost) == 0x000010, "Wrong size on FPilgrimEvent_Scoring_FullComboLost");
static_assert(offsetof(FPilgrimEvent_Scoring_FullComboLost, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_Scoring_FullComboLost::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_FullComboLost, PlayerIndex) == 0x000008, "Member 'FPilgrimEvent_Scoring_FullComboLost::PlayerIndex' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimTimedInput
// 0x000C (0x000C - 0x0000)
struct FPilgrimTimedInput final
{
public:
	EPilgrimTimedInputType                        InputType;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPress;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExperiencedTick;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackLane                             TrackLane;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimTimedInput) == 0x000004, "Wrong alignment on FPilgrimTimedInput");
static_assert(sizeof(FPilgrimTimedInput) == 0x00000C, "Wrong size on FPilgrimTimedInput");
static_assert(offsetof(FPilgrimTimedInput, InputType) == 0x000000, "Member 'FPilgrimTimedInput::InputType' has a wrong offset!");
static_assert(offsetof(FPilgrimTimedInput, bIsPress) == 0x000001, "Member 'FPilgrimTimedInput::bIsPress' has a wrong offset!");
static_assert(offsetof(FPilgrimTimedInput, ExperiencedTick) == 0x000004, "Member 'FPilgrimTimedInput::ExperiencedTick' has a wrong offset!");
static_assert(offsetof(FPilgrimTimedInput, TrackLane) == 0x000008, "Member 'FPilgrimTimedInput::TrackLane' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerHistoryEvent
// 0x0080 (0x0080 - 0x0000)
struct FPilgrimPlayerHistoryEvent final
{
public:
	class FString                                 GameId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventId;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventWindowId;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TeamId;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TeamAccountIds;                                    // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PointsEarned;                                      // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Rank;                                              // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Score;                                             // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Percentile;                                        // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimPlayerSessionHistory>   SessionHistory;                                    // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPlayerHistoryEvent) == 0x000008, "Wrong alignment on FPilgrimPlayerHistoryEvent");
static_assert(sizeof(FPilgrimPlayerHistoryEvent) == 0x000080, "Wrong size on FPilgrimPlayerHistoryEvent");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, GameId) == 0x000000, "Member 'FPilgrimPlayerHistoryEvent::GameId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, EventId) == 0x000010, "Member 'FPilgrimPlayerHistoryEvent::EventId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, EventWindowId) == 0x000020, "Member 'FPilgrimPlayerHistoryEvent::EventWindowId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, TeamId) == 0x000030, "Member 'FPilgrimPlayerHistoryEvent::TeamId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, TeamAccountIds) == 0x000040, "Member 'FPilgrimPlayerHistoryEvent::TeamAccountIds' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, PointsEarned) == 0x000050, "Member 'FPilgrimPlayerHistoryEvent::PointsEarned' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, Rank) == 0x000058, "Member 'FPilgrimPlayerHistoryEvent::Rank' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, Score) == 0x000060, "Member 'FPilgrimPlayerHistoryEvent::Score' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, Percentile) == 0x000068, "Member 'FPilgrimPlayerHistoryEvent::Percentile' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryEvent, SessionHistory) == 0x000070, "Member 'FPilgrimPlayerHistoryEvent::SessionHistory' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerHistoryResult
// 0x0130 (0x0130 - 0x0000)
struct FPilgrimPlayerHistoryResult final
{
public:
	struct FUniqueNetIdRepl                       PlayerAccountId;                                   // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimPlayerHistoryEvent>     Events;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0xF0];                                      // 0x0040(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimPlayerHistoryResult) == 0x000008, "Wrong alignment on FPilgrimPlayerHistoryResult");
static_assert(sizeof(FPilgrimPlayerHistoryResult) == 0x000130, "Wrong size on FPilgrimPlayerHistoryResult");
static_assert(offsetof(FPilgrimPlayerHistoryResult, PlayerAccountId) == 0x000000, "Member 'FPilgrimPlayerHistoryResult::PlayerAccountId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryResult, Events) == 0x000030, "Member 'FPilgrimPlayerHistoryResult::Events' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_OverdriveActiveChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_BandState_OverdriveActiveChanged final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_OverdriveActiveChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_BandState_OverdriveActiveChanged");
static_assert(sizeof(FPilgrimEvent_BandState_OverdriveActiveChanged) == 0x000010, "Wrong size on FPilgrimEvent_BandState_OverdriveActiveChanged");
static_assert(offsetof(FPilgrimEvent_BandState_OverdriveActiveChanged, IsActive) == 0x000000, "Member 'FPilgrimEvent_BandState_OverdriveActiveChanged::IsActive' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_BandState_OverdriveActiveChanged, ForPlayer) == 0x000008, "Member 'FPilgrimEvent_BandState_OverdriveActiveChanged::ForPlayer' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimSinglePlayerBattleHealth
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimSinglePlayerBattleHealth final
{
public:
	float                                         MaxHp;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentHp;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimSinglePlayerBattleHealth) == 0x000004, "Wrong alignment on FPilgrimSinglePlayerBattleHealth");
static_assert(sizeof(FPilgrimSinglePlayerBattleHealth) == 0x000008, "Wrong size on FPilgrimSinglePlayerBattleHealth");
static_assert(offsetof(FPilgrimSinglePlayerBattleHealth, MaxHp) == 0x000000, "Member 'FPilgrimSinglePlayerBattleHealth::MaxHp' has a wrong offset!");
static_assert(offsetof(FPilgrimSinglePlayerBattleHealth, CurrentHp) == 0x000004, "Member 'FPilgrimSinglePlayerBattleHealth::CurrentHp' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimSinglePlayerBattleData
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimSinglePlayerBattleData final
{
public:
	TArray<struct FPilgrimSinglePlayerBattleHealth> PlayerHealths;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimSinglePlayerBattleData) == 0x000008, "Wrong alignment on FPilgrimSinglePlayerBattleData");
static_assert(sizeof(FPilgrimSinglePlayerBattleData) == 0x000010, "Wrong size on FPilgrimSinglePlayerBattleData");
static_assert(offsetof(FPilgrimSinglePlayerBattleData, PlayerHealths) == 0x000000, "Member 'FPilgrimSinglePlayerBattleData::PlayerHealths' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.SongShortNameMatcher
// 0x0018 (0x0018 - 0x0000)
struct FSongShortNameMatcher final
{
public:
	TArray<class FName>                           SongShortNames;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ESongShortNameMatchType                       MatchType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSongShortNameMatcher) == 0x000008, "Wrong alignment on FSongShortNameMatcher");
static_assert(sizeof(FSongShortNameMatcher) == 0x000018, "Wrong size on FSongShortNameMatcher");
static_assert(offsetof(FSongShortNameMatcher, SongShortNames) == 0x000000, "Member 'FSongShortNameMatcher::SongShortNames' has a wrong offset!");
static_assert(offsetof(FSongShortNameMatcher, MatchType) == 0x000010, "Member 'FSongShortNameMatcher::MatchType' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimObjectiveFilterBase
// 0x0108 (0x01A8 - 0x00A0)
struct FPilgrimObjectiveFilterBase : public FObjectiveFilter
{
public:
	struct FObjectiveSubjectTags                  SongID;                                            // 0x00A0(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FObjectiveSubjectTags                  InstrumentId;                                      // 0x00E8(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FObjectiveSubjectTags                  BandInstrumentIds;                                 // 0x0130(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FSongShortNameMatcher                  SongShortName;                                     // 0x0178(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredBandMembers;                               // 0x0190(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        RequiredDifficulty;                                // 0x01A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimObjectiveFilterBase) == 0x000008, "Wrong alignment on FPilgrimObjectiveFilterBase");
static_assert(sizeof(FPilgrimObjectiveFilterBase) == 0x0001A8, "Wrong size on FPilgrimObjectiveFilterBase");
static_assert(offsetof(FPilgrimObjectiveFilterBase, SongID) == 0x0000A0, "Member 'FPilgrimObjectiveFilterBase::SongID' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilterBase, InstrumentId) == 0x0000E8, "Member 'FPilgrimObjectiveFilterBase::InstrumentId' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilterBase, BandInstrumentIds) == 0x000130, "Member 'FPilgrimObjectiveFilterBase::BandInstrumentIds' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilterBase, SongShortName) == 0x000178, "Member 'FPilgrimObjectiveFilterBase::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilterBase, RequiredBandMembers) == 0x000190, "Member 'FPilgrimObjectiveFilterBase::RequiredBandMembers' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilterBase, RequiredDifficulty) == 0x0001A0, "Member 'FPilgrimObjectiveFilterBase::RequiredDifficulty' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimObjectiveFilter_Note
// 0x0030 (0x01D8 - 0x01A8)
struct FPilgrimObjectiveFilter_Note final : public FPilgrimObjectiveFilterBase
{
public:
	bool                                          DidHit;                                            // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DidPass;                                           // 0x01A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DidMiss;                                           // 0x01AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChord;                                           // 0x01AB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredStreak;                                    // 0x01AC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredMultiplier;                                // 0x01BC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimNoteEventMessageIncrementType         IncrementType;                                     // 0x01CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IncrementValue;                                    // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimObjectiveFilter_Note) == 0x000008, "Wrong alignment on FPilgrimObjectiveFilter_Note");
static_assert(sizeof(FPilgrimObjectiveFilter_Note) == 0x0001D8, "Wrong size on FPilgrimObjectiveFilter_Note");
static_assert(offsetof(FPilgrimObjectiveFilter_Note, DidHit) == 0x0001A8, "Member 'FPilgrimObjectiveFilter_Note::DidHit' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_Note, DidPass) == 0x0001A9, "Member 'FPilgrimObjectiveFilter_Note::DidPass' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_Note, DidMiss) == 0x0001AA, "Member 'FPilgrimObjectiveFilter_Note::DidMiss' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_Note, IsChord) == 0x0001AB, "Member 'FPilgrimObjectiveFilter_Note::IsChord' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_Note, RequiredStreak) == 0x0001AC, "Member 'FPilgrimObjectiveFilter_Note::RequiredStreak' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_Note, RequiredMultiplier) == 0x0001BC, "Member 'FPilgrimObjectiveFilter_Note::RequiredMultiplier' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_Note, IncrementType) == 0x0001CC, "Member 'FPilgrimObjectiveFilter_Note::IncrementType' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_Note, IncrementValue) == 0x0001D0, "Member 'FPilgrimObjectiveFilter_Note::IncrementValue' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PlayerHealthModifiers
// 0x000C (0x000C - 0x0000)
struct FPlayerHealthModifiers final
{
public:
	float                                         GemHit;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GemMiss;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GemPass;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerHealthModifiers) == 0x000004, "Wrong alignment on FPlayerHealthModifiers");
static_assert(sizeof(FPlayerHealthModifiers) == 0x00000C, "Wrong size on FPlayerHealthModifiers");
static_assert(offsetof(FPlayerHealthModifiers, GemHit) == 0x000000, "Member 'FPlayerHealthModifiers::GemHit' has a wrong offset!");
static_assert(offsetof(FPlayerHealthModifiers, GemMiss) == 0x000004, "Member 'FPlayerHealthModifiers::GemMiss' has a wrong offset!");
static_assert(offsetof(FPlayerHealthModifiers, GemPass) == 0x000008, "Member 'FPlayerHealthModifiers::GemPass' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimLeaderboardRequestParams
// 0x0070 (0x0070 - 0x0000)
struct FPilgrimLeaderboardRequestParams final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       RequestingPlayerAccountId;                         // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendsOnly;                                      // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCenteredOnRequestingPlayer;                       // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Page;                                              // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControllerId;                                      // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpotlightCompetition;                           // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpotlightGroup;                                    // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCache;                                         // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x17];                                      // 0x0059(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimLeaderboardRequestParams) == 0x000008, "Wrong alignment on FPilgrimLeaderboardRequestParams");
static_assert(sizeof(FPilgrimLeaderboardRequestParams) == 0x000070, "Wrong size on FPilgrimLeaderboardRequestParams");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, SongShortName) == 0x000000, "Member 'FPilgrimLeaderboardRequestParams::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, LeaderboardType) == 0x000004, "Member 'FPilgrimLeaderboardRequestParams::LeaderboardType' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, RequestingPlayerAccountId) == 0x000008, "Member 'FPilgrimLeaderboardRequestParams::RequestingPlayerAccountId' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, bFriendsOnly) == 0x000038, "Member 'FPilgrimLeaderboardRequestParams::bFriendsOnly' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, bCenteredOnRequestingPlayer) == 0x000039, "Member 'FPilgrimLeaderboardRequestParams::bCenteredOnRequestingPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, Page) == 0x00003C, "Member 'FPilgrimLeaderboardRequestParams::Page' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, ControllerId) == 0x000040, "Member 'FPilgrimLeaderboardRequestParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, bIsSpotlightCompetition) == 0x000044, "Member 'FPilgrimLeaderboardRequestParams::bIsSpotlightCompetition' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, SpotlightGroup) == 0x000048, "Member 'FPilgrimLeaderboardRequestParams::SpotlightGroup' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardRequestParams, bUseCache) == 0x000058, "Member 'FPilgrimLeaderboardRequestParams::bUseCache' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PilgrimGame_SongStopped
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimEvent_PilgrimGame_SongStopped final
{
public:
	class UPilgrimGame*                           PilgrimGame;                                       // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_PilgrimGame_SongStopped) == 0x000008, "Wrong alignment on FPilgrimEvent_PilgrimGame_SongStopped");
static_assert(sizeof(FPilgrimEvent_PilgrimGame_SongStopped) == 0x000008, "Wrong size on FPilgrimEvent_PilgrimGame_SongStopped");
static_assert(offsetof(FPilgrimEvent_PilgrimGame_SongStopped, PilgrimGame) == 0x000000, "Member 'FPilgrimEvent_PilgrimGame_SongStopped::PilgrimGame' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimGemBreak
// 0x0024 (0x0024 - 0x0000)
struct FPilgrimGemBreak final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidGemBreak;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartBreakAtBar;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartBreakAtMs;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreakBarDuration;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreakMsDuration;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndBreakAtBar;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndBreakAtMs;                                      // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStartingBreak;                                  // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEndingBreak;                                    // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGemBreak) == 0x000004, "Wrong alignment on FPilgrimGemBreak");
static_assert(sizeof(FPilgrimGemBreak) == 0x000024, "Wrong size on FPilgrimGemBreak");
static_assert(offsetof(FPilgrimGemBreak, ID) == 0x000000, "Member 'FPilgrimGemBreak::ID' has a wrong offset!");
static_assert(offsetof(FPilgrimGemBreak, bIsValidGemBreak) == 0x000004, "Member 'FPilgrimGemBreak::bIsValidGemBreak' has a wrong offset!");
static_assert(offsetof(FPilgrimGemBreak, StartBreakAtBar) == 0x000008, "Member 'FPilgrimGemBreak::StartBreakAtBar' has a wrong offset!");
static_assert(offsetof(FPilgrimGemBreak, StartBreakAtMs) == 0x00000C, "Member 'FPilgrimGemBreak::StartBreakAtMs' has a wrong offset!");
static_assert(offsetof(FPilgrimGemBreak, BreakBarDuration) == 0x000010, "Member 'FPilgrimGemBreak::BreakBarDuration' has a wrong offset!");
static_assert(offsetof(FPilgrimGemBreak, BreakMsDuration) == 0x000014, "Member 'FPilgrimGemBreak::BreakMsDuration' has a wrong offset!");
static_assert(offsetof(FPilgrimGemBreak, EndBreakAtBar) == 0x000018, "Member 'FPilgrimGemBreak::EndBreakAtBar' has a wrong offset!");
static_assert(offsetof(FPilgrimGemBreak, EndBreakAtMs) == 0x00001C, "Member 'FPilgrimGemBreak::EndBreakAtMs' has a wrong offset!");
static_assert(offsetof(FPilgrimGemBreak, bIsStartingBreak) == 0x000020, "Member 'FPilgrimGemBreak::bIsStartingBreak' has a wrong offset!");
static_assert(offsetof(FPilgrimGemBreak, bIsEndingBreak) == 0x000021, "Member 'FPilgrimGemBreak::bIsEndingBreak' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeBase
// 0x0004 (0x0018 - 0x0014)
struct FPilgrimEvent_Midi_StrikeBase : public FPilgrimEvent_Midi_Base
{
public:
	bool                                          bIsChord;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeBase) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeBase");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeBase) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeBase");
static_assert(offsetof(FPilgrimEvent_Midi_StrikeBase, bIsChord) == 0x000014, "Member 'FPilgrimEvent_Midi_StrikeBase::bIsChord' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeBass
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeBass : public FPilgrimEvent_Midi_StrikeBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeBass) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeBass");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeBass) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeBass");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeBass_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeBass_Start final : public FPilgrimEvent_Midi_StrikeBass
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeBass_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeBass_Start");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeBass_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeBass_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimLeaderboardEntryRpl
// 0x0030 (0x0030 - 0x0000)
struct FPilgrimLeaderboardEntryRpl
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentile;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimLeaderboardScoreData           ScoreData;                                         // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                              DateTime;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimLeaderboardEntryRpl) == 0x000008, "Wrong alignment on FPilgrimLeaderboardEntryRpl");
static_assert(sizeof(FPilgrimLeaderboardEntryRpl) == 0x000030, "Wrong size on FPilgrimLeaderboardEntryRpl");
static_assert(offsetof(FPilgrimLeaderboardEntryRpl, Rank) == 0x000000, "Member 'FPilgrimLeaderboardEntryRpl::Rank' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardEntryRpl, Percentile) == 0x000004, "Member 'FPilgrimLeaderboardEntryRpl::Percentile' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardEntryRpl, ScoreData) == 0x000008, "Member 'FPilgrimLeaderboardEntryRpl::ScoreData' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardEntryRpl, DateTime) == 0x000028, "Member 'FPilgrimLeaderboardEntryRpl::DateTime' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimLeaderboardEntry
// 0x0058 (0x0088 - 0x0030)
struct FPilgrimLeaderboardEntry final : public FPilgrimLeaderboardEntryRpl
{
public:
	bool                                          bHasLocalPlayer;                                   // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            PlayerAccountIdToDisplayNameMap;                   // 0x0038(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimLeaderboardEntry) == 0x000008, "Wrong alignment on FPilgrimLeaderboardEntry");
static_assert(sizeof(FPilgrimLeaderboardEntry) == 0x000088, "Wrong size on FPilgrimLeaderboardEntry");
static_assert(offsetof(FPilgrimLeaderboardEntry, bHasLocalPlayer) == 0x000030, "Member 'FPilgrimLeaderboardEntry::bHasLocalPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardEntry, PlayerAccountIdToDisplayNameMap) == 0x000038, "Member 'FPilgrimLeaderboardEntry::PlayerAccountIdToDisplayNameMap' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimLeaderboardPage
// 0x0038 (0x0038 - 0x0000)
struct FPilgrimLeaderboardPage final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Page;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimLeaderboardEntry>       Entries;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsSpotlightCompetition;                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpotlightGroup;                                    // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimLeaderboardPage) == 0x000008, "Wrong alignment on FPilgrimLeaderboardPage");
static_assert(sizeof(FPilgrimLeaderboardPage) == 0x000038, "Wrong size on FPilgrimLeaderboardPage");
static_assert(offsetof(FPilgrimLeaderboardPage, SongShortName) == 0x000000, "Member 'FPilgrimLeaderboardPage::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardPage, LeaderboardType) == 0x000004, "Member 'FPilgrimLeaderboardPage::LeaderboardType' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardPage, Page) == 0x000008, "Member 'FPilgrimLeaderboardPage::Page' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardPage, TotalPages) == 0x00000C, "Member 'FPilgrimLeaderboardPage::TotalPages' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardPage, Entries) == 0x000010, "Member 'FPilgrimLeaderboardPage::Entries' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardPage, bIsSpotlightCompetition) == 0x000020, "Member 'FPilgrimLeaderboardPage::bIsSpotlightCompetition' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardPage, SpotlightGroup) == 0x000028, "Member 'FPilgrimLeaderboardPage::SpotlightGroup' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.MusicClockCatchUpUpdated
// 0x0004 (0x0004 - 0x0000)
struct FMusicClockCatchUpUpdated final
{
public:
	float                                         DeltaTimestamp;                                    // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicClockCatchUpUpdated) == 0x000004, "Wrong alignment on FMusicClockCatchUpUpdated");
static_assert(sizeof(FMusicClockCatchUpUpdated) == 0x000004, "Wrong size on FMusicClockCatchUpUpdated");
static_assert(offsetof(FMusicClockCatchUpUpdated, DeltaTimestamp) == 0x000000, "Member 'FMusicClockCatchUpUpdated::DeltaTimestamp' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimQuestFilter
// 0x00B0 (0x00B0 - 0x0000)
struct FPilgrimQuestFilter final
{
public:
	struct FGameplayTagQuery                      QuestTagQuery;                                     // 0x0000(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      QuestObjectiveFilterQuery;                         // 0x0048(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSongShortNameMatcher                  QuestObjectiveFilterMatcher;                       // 0x0090(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShowCompletedQuests;                              // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUpdatedQuests;                                // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUnchangedQuests;                              // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimQuestFilter) == 0x000008, "Wrong alignment on FPilgrimQuestFilter");
static_assert(sizeof(FPilgrimQuestFilter) == 0x0000B0, "Wrong size on FPilgrimQuestFilter");
static_assert(offsetof(FPilgrimQuestFilter, QuestTagQuery) == 0x000000, "Member 'FPilgrimQuestFilter::QuestTagQuery' has a wrong offset!");
static_assert(offsetof(FPilgrimQuestFilter, QuestObjectiveFilterQuery) == 0x000048, "Member 'FPilgrimQuestFilter::QuestObjectiveFilterQuery' has a wrong offset!");
static_assert(offsetof(FPilgrimQuestFilter, QuestObjectiveFilterMatcher) == 0x000090, "Member 'FPilgrimQuestFilter::QuestObjectiveFilterMatcher' has a wrong offset!");
static_assert(offsetof(FPilgrimQuestFilter, bShowCompletedQuests) == 0x0000A8, "Member 'FPilgrimQuestFilter::bShowCompletedQuests' has a wrong offset!");
static_assert(offsetof(FPilgrimQuestFilter, bShowUpdatedQuests) == 0x0000A9, "Member 'FPilgrimQuestFilter::bShowUpdatedQuests' has a wrong offset!");
static_assert(offsetof(FPilgrimQuestFilter, bShowUnchangedQuests) == 0x0000AA, "Member 'FPilgrimQuestFilter::bShowUnchangedQuests' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimActorPoolParams
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimActorPoolParams final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimActorPoolParams) == 0x000008, "Wrong alignment on FPilgrimActorPoolParams");
static_assert(sizeof(FPilgrimActorPoolParams) == 0x000010, "Wrong size on FPilgrimActorPoolParams");
static_assert(offsetof(FPilgrimActorPoolParams, ActorClass) == 0x000008, "Member 'FPilgrimActorPoolParams::ActorClass' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PlayerState_ReadinessChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_PlayerState_ReadinessChanged final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReady;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_PlayerState_ReadinessChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_PlayerState_ReadinessChanged");
static_assert(sizeof(FPilgrimEvent_PlayerState_ReadinessChanged) == 0x000010, "Wrong size on FPilgrimEvent_PlayerState_ReadinessChanged");
static_assert(offsetof(FPilgrimEvent_PlayerState_ReadinessChanged, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_PlayerState_ReadinessChanged::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_ReadinessChanged, bIsReady) == 0x000008, "Member 'FPilgrimEvent_PlayerState_ReadinessChanged::bIsReady' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPersonalBestParams
// 0x0068 (0x0068 - 0x0000)
struct FPilgrimPersonalBestParams final
{
public:
	struct FUniqueNetIdRepl                       PlayerAccountId;                                   // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SongShortName;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             InstrumentType;                                    // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ControllerId;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BandSize;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetlistIndex;                                      // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCache;                                         // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpotlightCompetition;                           // 0x0045(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpotlightGroup;                                    // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimPersonalBestParams) == 0x000008, "Wrong alignment on FPilgrimPersonalBestParams");
static_assert(sizeof(FPilgrimPersonalBestParams) == 0x000068, "Wrong size on FPilgrimPersonalBestParams");
static_assert(offsetof(FPilgrimPersonalBestParams, PlayerAccountId) == 0x000000, "Member 'FPilgrimPersonalBestParams::PlayerAccountId' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestParams, SongShortName) == 0x000030, "Member 'FPilgrimPersonalBestParams::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestParams, InstrumentType) == 0x000034, "Member 'FPilgrimPersonalBestParams::InstrumentType' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestParams, ControllerId) == 0x000038, "Member 'FPilgrimPersonalBestParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestParams, BandSize) == 0x00003C, "Member 'FPilgrimPersonalBestParams::BandSize' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestParams, SetlistIndex) == 0x000040, "Member 'FPilgrimPersonalBestParams::SetlistIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestParams, bUseCache) == 0x000044, "Member 'FPilgrimPersonalBestParams::bUseCache' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestParams, bIsSpotlightCompetition) == 0x000045, "Member 'FPilgrimPersonalBestParams::bIsSpotlightCompetition' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestParams, SpotlightGroup) == 0x000048, "Member 'FPilgrimPersonalBestParams::SpotlightGroup' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_CustomSetlistChanged
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimEvent_BandState_CustomSetlistChanged final
{
public:
	TWeakObjectPtr<class UPilgrimCustomSetlist>   ChangedSetlist;                                    // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_CustomSetlistChanged) == 0x000004, "Wrong alignment on FPilgrimEvent_BandState_CustomSetlistChanged");
static_assert(sizeof(FPilgrimEvent_BandState_CustomSetlistChanged) == 0x000008, "Wrong size on FPilgrimEvent_BandState_CustomSetlistChanged");
static_assert(offsetof(FPilgrimEvent_BandState_CustomSetlistChanged, ChangedSetlist) == 0x000000, "Member 'FPilgrimEvent_BandState_CustomSetlistChanged::ChangedSetlist' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextDrum
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextDrum : public FPilgrimEvent_Midi_TextBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextDrum) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextDrum");
static_assert(sizeof(FPilgrimEvent_Midi_TextDrum) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextDrum");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextDrum_Start
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextDrum_Start final : public FPilgrimEvent_Midi_TextDrum
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextDrum_Start) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextDrum_Start");
static_assert(sizeof(FPilgrimEvent_Midi_TextDrum_Start) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextDrum_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimPersonalBestResult
// 0x0198 (0x0198 - 0x0000)
struct FPilgrimPersonalBestResult final
{
public:
	struct FPilgrimLeaderboardEntry               BestSolo;                                          // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPilgrimLeaderboardEntry               BestBand;                                          // 0x0088(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPilgrimLeaderboardEntry               BestSpotlight;                                     // 0x0110(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPersonalBestResult) == 0x000008, "Wrong alignment on FPilgrimPersonalBestResult");
static_assert(sizeof(FPilgrimPersonalBestResult) == 0x000198, "Wrong size on FPilgrimPersonalBestResult");
static_assert(offsetof(FPilgrimPersonalBestResult, BestSolo) == 0x000000, "Member 'FPilgrimPersonalBestResult::BestSolo' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestResult, BestBand) == 0x000088, "Member 'FPilgrimPersonalBestResult::BestBand' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestResult, BestSpotlight) == 0x000110, "Member 'FPilgrimPersonalBestResult::BestSpotlight' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_OverdriveActiveTrackTypesChanged
// 0x00A0 (0x00A0 - 0x0000)
struct FPilgrimEvent_BandState_OverdriveActiveTrackTypesChanged final
{
public:
	struct FPilgrimTrackTypesStateMembership      Membership;                                        // 0x0000(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_OverdriveActiveTrackTypesChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_BandState_OverdriveActiveTrackTypesChanged");
static_assert(sizeof(FPilgrimEvent_BandState_OverdriveActiveTrackTypesChanged) == 0x0000A0, "Wrong size on FPilgrimEvent_BandState_OverdriveActiveTrackTypesChanged");
static_assert(offsetof(FPilgrimEvent_BandState_OverdriveActiveTrackTypesChanged, Membership) == 0x000000, "Member 'FPilgrimEvent_BandState_OverdriveActiveTrackTypesChanged::Membership' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextEvents
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextEvents : public FPilgrimEvent_Midi_TextBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextEvents) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextEvents");
static_assert(sizeof(FPilgrimEvent_Midi_TextEvents) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextEvents");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerFeedParams
// 0x0098 (0x0098 - 0x0000)
struct FPilgrimPlayerFeedParams final
{
public:
	EPilgrimPlayerFeedSortType                    SortType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ControllerId;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SongQuery;                                         // 0x0008(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSongShortNameMatcher                  SongShortNameMatcher;                              // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<EPilgrimLeaderboardType>               Leaderboards;                                      // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               FriendIds;                                         // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimPlayerFeedParams) == 0x000008, "Wrong alignment on FPilgrimPlayerFeedParams");
static_assert(sizeof(FPilgrimPlayerFeedParams) == 0x000098, "Wrong size on FPilgrimPlayerFeedParams");
static_assert(offsetof(FPilgrimPlayerFeedParams, SortType) == 0x000000, "Member 'FPilgrimPlayerFeedParams::SortType' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedParams, ControllerId) == 0x000004, "Member 'FPilgrimPlayerFeedParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedParams, SongQuery) == 0x000008, "Member 'FPilgrimPlayerFeedParams::SongQuery' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedParams, SongShortNameMatcher) == 0x000050, "Member 'FPilgrimPlayerFeedParams::SongShortNameMatcher' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedParams, Leaderboards) == 0x000068, "Member 'FPilgrimPlayerFeedParams::Leaderboards' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedParams, FriendIds) == 0x000078, "Member 'FPilgrimPlayerFeedParams::FriendIds' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimAnalyticsEvent_ResultsReturn
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimAnalyticsEvent_ResultsReturn final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimAnalyticsResultsReturn                ResultsReturn;                                     // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimAnalyticsEvent_ResultsReturn) == 0x000008, "Wrong alignment on FPilgrimAnalyticsEvent_ResultsReturn");
static_assert(sizeof(FPilgrimAnalyticsEvent_ResultsReturn) == 0x000010, "Wrong size on FPilgrimAnalyticsEvent_ResultsReturn");
static_assert(offsetof(FPilgrimAnalyticsEvent_ResultsReturn, PlayerController) == 0x000000, "Member 'FPilgrimAnalyticsEvent_ResultsReturn::PlayerController' has a wrong offset!");
static_assert(offsetof(FPilgrimAnalyticsEvent_ResultsReturn, ResultsReturn) == 0x000008, "Member 'FPilgrimAnalyticsEvent_ResultsReturn::ResultsReturn' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteBase
// 0x0004 (0x0018 - 0x0014)
struct FPilgrimEvent_Midi_NoteBase : public FPilgrimEvent_Midi_Base
{
public:
	int32                                         EventNote;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Midi_NoteBase) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteBase");
static_assert(sizeof(FPilgrimEvent_Midi_NoteBase) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteBase");
static_assert(offsetof(FPilgrimEvent_Midi_NoteBase, EventNote) == 0x000014, "Member 'FPilgrimEvent_Midi_NoteBase::EventNote' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteEvents
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteEvents : public FPilgrimEvent_Midi_NoteBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteEvents) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteEvents");
static_assert(sizeof(FPilgrimEvent_Midi_NoteEvents) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteEvents");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteEvents_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteEvents_End final : public FPilgrimEvent_Midi_NoteEvents
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteEvents_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteEvents_End");
static_assert(sizeof(FPilgrimEvent_Midi_NoteEvents_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteEvents_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerFeedResultEntry
// 0x0038 (0x0038 - 0x0000)
struct FPilgrimPlayerFeedResultEntry final
{
public:
	class FString                                 FriendName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SongShortName;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPilgrimTrackType>                     InstrumentsPlayed;                                 // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PlayerHighscore;                                   // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendHighscore;                                   // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              FriendAchievedScoreDate;                           // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPlayerFeedResultEntry) == 0x000008, "Wrong alignment on FPilgrimPlayerFeedResultEntry");
static_assert(sizeof(FPilgrimPlayerFeedResultEntry) == 0x000038, "Wrong size on FPilgrimPlayerFeedResultEntry");
static_assert(offsetof(FPilgrimPlayerFeedResultEntry, FriendName) == 0x000000, "Member 'FPilgrimPlayerFeedResultEntry::FriendName' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedResultEntry, SongShortName) == 0x000010, "Member 'FPilgrimPlayerFeedResultEntry::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedResultEntry, LeaderboardType) == 0x000014, "Member 'FPilgrimPlayerFeedResultEntry::LeaderboardType' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedResultEntry, InstrumentsPlayed) == 0x000018, "Member 'FPilgrimPlayerFeedResultEntry::InstrumentsPlayed' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedResultEntry, PlayerHighscore) == 0x000028, "Member 'FPilgrimPlayerFeedResultEntry::PlayerHighscore' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedResultEntry, FriendHighscore) == 0x00002C, "Member 'FPilgrimPlayerFeedResultEntry::FriendHighscore' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedResultEntry, FriendAchievedScoreDate) == 0x000030, "Member 'FPilgrimPlayerFeedResultEntry::FriendAchievedScoreDate' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerFeedResult
// 0x0020 (0x0020 - 0x0000)
struct FPilgrimPlayerFeedResult final
{
public:
	TArray<struct FPilgrimPlayerFeedResultEntry>  Entries;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimPlayerFeedSongSummary>  SongSummary;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPlayerFeedResult) == 0x000008, "Wrong alignment on FPilgrimPlayerFeedResult");
static_assert(sizeof(FPilgrimPlayerFeedResult) == 0x000020, "Wrong size on FPilgrimPlayerFeedResult");
static_assert(offsetof(FPilgrimPlayerFeedResult, Entries) == 0x000000, "Member 'FPilgrimPlayerFeedResult::Entries' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerFeedResult, SongSummary) == 0x000010, "Member 'FPilgrimPlayerFeedResult::SongSummary' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.MinimalSongTimestampData
// 0x000C (0x000C - 0x0000)
struct FMinimalSongTimestampData final
{
public:
	float                                         ServerWorldTime;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsIncludingCountIn;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x4];                                        // 0x0008(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinimalSongTimestampData) == 0x000004, "Wrong alignment on FMinimalSongTimestampData");
static_assert(sizeof(FMinimalSongTimestampData) == 0x00000C, "Wrong size on FMinimalSongTimestampData");
static_assert(offsetof(FMinimalSongTimestampData, ServerWorldTime) == 0x000000, "Member 'FMinimalSongTimestampData::ServerWorldTime' has a wrong offset!");
static_assert(offsetof(FMinimalSongTimestampData, SecondsIncludingCountIn) == 0x000004, "Member 'FMinimalSongTimestampData::SecondsIncludingCountIn' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimTimestampedTargetData
// 0x0010 (0x0018 - 0x0008)
struct FPilgrimTimestampedTargetData final : public FGameplayAbilityTargetData
{
public:
	struct FMinimalSongTimestampData              SongTimestamp;                                     // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimTimestampedTargetData) == 0x000008, "Wrong alignment on FPilgrimTimestampedTargetData");
static_assert(sizeof(FPilgrimTimestampedTargetData) == 0x000018, "Wrong size on FPilgrimTimestampedTargetData");
static_assert(offsetof(FPilgrimTimestampedTargetData, SongTimestamp) == 0x000008, "Member 'FPilgrimTimestampedTargetData::SongTimestamp' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_ReadinessChanged
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_BandState_ReadinessChanged final
{
public:
	bool                                          bAreAllPlayersReady;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_ReadinessChanged) == 0x000001, "Wrong alignment on FPilgrimEvent_BandState_ReadinessChanged");
static_assert(sizeof(FPilgrimEvent_BandState_ReadinessChanged) == 0x000001, "Wrong size on FPilgrimEvent_BandState_ReadinessChanged");
static_assert(offsetof(FPilgrimEvent_BandState_ReadinessChanged, bAreAllPlayersReady) == 0x000000, "Member 'FPilgrimEvent_BandState_ReadinessChanged::bAreAllPlayersReady' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimGameInProgressSustain
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x04) FPilgrimGameInProgressSustain final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGameInProgressSustain) == 0x000004, "Wrong alignment on FPilgrimGameInProgressSustain");
static_assert(sizeof(FPilgrimGameInProgressSustain) == 0x000048, "Wrong size on FPilgrimGameInProgressSustain");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_PerfectComboLost
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_Scoring_PerfectComboLost final
{
public:
	class AFortPlayerState*                       ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_Scoring_PerfectComboLost) == 0x000008, "Wrong alignment on FPilgrimEvent_Scoring_PerfectComboLost");
static_assert(sizeof(FPilgrimEvent_Scoring_PerfectComboLost) == 0x000010, "Wrong size on FPilgrimEvent_Scoring_PerfectComboLost");
static_assert(offsetof(FPilgrimEvent_Scoring_PerfectComboLost, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_Scoring_PerfectComboLost::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerfectComboLost, PlayerIndex) == 0x000008, "Member 'FPilgrimEvent_Scoring_PerfectComboLost::PlayerIndex' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimCustomSetlistEntry
// 0x000C (0x000C - 0x0000)
struct FPilgrimCustomSetlistEntry final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APlayerState>            AddedByPlayer;                                     // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimCustomSetlistEntry) == 0x000004, "Wrong alignment on FPilgrimCustomSetlistEntry");
static_assert(sizeof(FPilgrimCustomSetlistEntry) == 0x00000C, "Wrong size on FPilgrimCustomSetlistEntry");
static_assert(offsetof(FPilgrimCustomSetlistEntry, SongShortName) == 0x000000, "Member 'FPilgrimCustomSetlistEntry::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimCustomSetlistEntry, AddedByPlayer) == 0x000004, "Member 'FPilgrimCustomSetlistEntry::AddedByPlayer' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimCheatPerformanceArgument
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FPilgrimCheatPerformanceArgument final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimCheatPerformanceArgument) == 0x000004, "Wrong alignment on FPilgrimCheatPerformanceArgument");
static_assert(sizeof(FPilgrimCheatPerformanceArgument) == 0x00000C, "Wrong size on FPilgrimCheatPerformanceArgument");

// ScriptStruct PilgrimCoreRuntime.PilgrimGemDensityDataArray
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPilgrimGemDensityDataArray final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGemDensityDataArray) == 0x000008, "Wrong alignment on FPilgrimGemDensityDataArray");
static_assert(sizeof(FPilgrimGemDensityDataArray) == 0x000010, "Wrong size on FPilgrimGemDensityDataArray");

// ScriptStruct PilgrimCoreRuntime.PilgrimSongMeasurePosition
// 0x000C (0x000C - 0x0000)
struct FPilgrimSongMeasurePosition final
{
public:
	int32                                         Measure;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Beat;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tick;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimSongMeasurePosition) == 0x000004, "Wrong alignment on FPilgrimSongMeasurePosition");
static_assert(sizeof(FPilgrimSongMeasurePosition) == 0x00000C, "Wrong size on FPilgrimSongMeasurePosition");
static_assert(offsetof(FPilgrimSongMeasurePosition, Measure) == 0x000000, "Member 'FPilgrimSongMeasurePosition::Measure' has a wrong offset!");
static_assert(offsetof(FPilgrimSongMeasurePosition, Beat) == 0x000004, "Member 'FPilgrimSongMeasurePosition::Beat' has a wrong offset!");
static_assert(offsetof(FPilgrimSongMeasurePosition, Tick) == 0x000008, "Member 'FPilgrimSongMeasurePosition::Tick' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimInputActionBrushConfig
// 0x00D0 (0x00D0 - 0x0000)
struct FPilgrimInputActionBrushConfig final
{
public:
	class UInputAction*                           BoundInputAction;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            KeyBrush;                                          // 0x0010(0x00C0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimInputActionBrushConfig) == 0x000010, "Wrong alignment on FPilgrimInputActionBrushConfig");
static_assert(sizeof(FPilgrimInputActionBrushConfig) == 0x0000D0, "Wrong size on FPilgrimInputActionBrushConfig");
static_assert(offsetof(FPilgrimInputActionBrushConfig, BoundInputAction) == 0x000000, "Member 'FPilgrimInputActionBrushConfig::BoundInputAction' has a wrong offset!");
static_assert(offsetof(FPilgrimInputActionBrushConfig, KeyBrush) == 0x000010, "Member 'FPilgrimInputActionBrushConfig::KeyBrush' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimTouchBrushesMappingConfig
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimTouchBrushesMappingConfig final
{
public:
	TArray<struct FPilgrimInputActionBrushConfig> Mappings;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimTouchBrushesMappingConfig) == 0x000008, "Wrong alignment on FPilgrimTouchBrushesMappingConfig");
static_assert(sizeof(FPilgrimTouchBrushesMappingConfig) == 0x000010, "Wrong size on FPilgrimTouchBrushesMappingConfig");
static_assert(offsetof(FPilgrimTouchBrushesMappingConfig, Mappings) == 0x000000, "Member 'FPilgrimTouchBrushesMappingConfig::Mappings' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.MusicClockCatchUpEnded
// 0x0001 (0x0001 - 0x0000)
struct FMusicClockCatchUpEnded final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMusicClockCatchUpEnded) == 0x000001, "Wrong alignment on FMusicClockCatchUpEnded");
static_assert(sizeof(FMusicClockCatchUpEnded) == 0x000001, "Wrong size on FMusicClockCatchUpEnded");

// ScriptStruct PilgrimCoreRuntime.PilgrimQuestDisplayInfo
// 0x0090 (0x0090 - 0x0000)
struct FPilgrimQuestDisplayInfo final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ShortDescription;                                  // 0x0030(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CompletionText;                                    // 0x0048(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFortRewardInfo                        RewardInfo;                                        // 0x0060(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimQuestDisplayInfo) == 0x000008, "Wrong alignment on FPilgrimQuestDisplayInfo");
static_assert(sizeof(FPilgrimQuestDisplayInfo) == 0x000090, "Wrong size on FPilgrimQuestDisplayInfo");
static_assert(offsetof(FPilgrimQuestDisplayInfo, Name) == 0x000000, "Member 'FPilgrimQuestDisplayInfo::Name' has a wrong offset!");
static_assert(offsetof(FPilgrimQuestDisplayInfo, Description) == 0x000018, "Member 'FPilgrimQuestDisplayInfo::Description' has a wrong offset!");
static_assert(offsetof(FPilgrimQuestDisplayInfo, ShortDescription) == 0x000030, "Member 'FPilgrimQuestDisplayInfo::ShortDescription' has a wrong offset!");
static_assert(offsetof(FPilgrimQuestDisplayInfo, CompletionText) == 0x000048, "Member 'FPilgrimQuestDisplayInfo::CompletionText' has a wrong offset!");
static_assert(offsetof(FPilgrimQuestDisplayInfo, RewardInfo) == 0x000060, "Member 'FPilgrimQuestDisplayInfo::RewardInfo' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimScoreMultiplierInfo
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimScoreMultiplierInfo final
{
public:
	int32                                         NotesCount;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreMultiplier;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimScoreMultiplierInfo) == 0x000004, "Wrong alignment on FPilgrimScoreMultiplierInfo");
static_assert(sizeof(FPilgrimScoreMultiplierInfo) == 0x000008, "Wrong size on FPilgrimScoreMultiplierInfo");
static_assert(offsetof(FPilgrimScoreMultiplierInfo, NotesCount) == 0x000000, "Member 'FPilgrimScoreMultiplierInfo::NotesCount' has a wrong offset!");
static_assert(offsetof(FPilgrimScoreMultiplierInfo, ScoreMultiplier) == 0x000004, "Member 'FPilgrimScoreMultiplierInfo::ScoreMultiplier' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.StarPercentageThresholds
// 0x0010 (0x0010 - 0x0000)
struct FStarPercentageThresholds final
{
public:
	TArray<float>                                 Thresholds;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStarPercentageThresholds) == 0x000008, "Wrong alignment on FStarPercentageThresholds");
static_assert(sizeof(FStarPercentageThresholds) == 0x000010, "Wrong size on FStarPercentageThresholds");
static_assert(offsetof(FStarPercentageThresholds, Thresholds) == 0x000000, "Member 'FStarPercentageThresholds::Thresholds' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimAccuracyTier
// 0x0020 (0x0020 - 0x0000)
struct FPilgrimAccuracyTier final
{
public:
	float                                         ThresholdMs;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreMultiplier;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimAccuracyTier) == 0x000008, "Wrong alignment on FPilgrimAccuracyTier");
static_assert(sizeof(FPilgrimAccuracyTier) == 0x000020, "Wrong size on FPilgrimAccuracyTier");
static_assert(offsetof(FPilgrimAccuracyTier, ThresholdMs) == 0x000000, "Member 'FPilgrimAccuracyTier::ThresholdMs' has a wrong offset!");
static_assert(offsetof(FPilgrimAccuracyTier, ScoreMultiplier) == 0x000004, "Member 'FPilgrimAccuracyTier::ScoreMultiplier' has a wrong offset!");
static_assert(offsetof(FPilgrimAccuracyTier, Name) == 0x000008, "Member 'FPilgrimAccuracyTier::Name' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimGameConfigSettings
// 0x02F0 (0x02F0 - 0x0000)
struct FPilgrimGameConfigSettings final
{
public:
	float                                         SlopMs;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GemBreakEndInputUnlockMs;                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOfTrackBuffer;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MsToNowBar;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundTrackDb;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundTrackGain;                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireMidiEventTicksEarly;                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPilgrimSongDifficulty, float>           BaseGemScoreValue;                                 // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	int32                                         SustainScorePerBeat;                               // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutroPreAlertSeconds;                              // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimScoreMultiplierInfo>    ScoreMultiplierDefinitions;                        // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<EPilgrimSongDifficulty, struct FPlayerHealthModifiers> PlayerHealthModifiers;                             // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	TArray<float>                                 PilgrimHealthCrowdResponseTiers;                   // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EPilgrimSongDifficulty, struct FStarPercentageThresholds> IndividualStarPercentageThresholds;                // 0x00E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	TArray<float>                                 BandStarPercentageThresholds;                      // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsBandMultiplierBasedOnUniqueInstruments;          // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBandVarietyBonusScoredDuringPlay;                // 0x0149(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 BandOverdriveScoreMultipliers;                     // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BandVarietyScoreMultipliers;                       // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimAccuracyTier>           AccuracyTiers;                                     // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaximumDisplayedAccuracyTierIndex;                 // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamQuickplayInitialHealth;                        // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamQuickplayOverdriveDecayRate;                   // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamQuickplayInitialOverdrive;                     // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamQuickplayOverdrive;                            // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamQuickplayOverdriveScoreMultiplier;             // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamQuickplayOverdriveHealthGainMultiplier;        // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamQuickplayRequiredOverdriveToActivate;          // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamQuickplayOverdriveAddedOnSuccesfulSection;     // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverdriveClearsGems;                              // 0x01A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverdriveClearAutoHoldSustain;                    // 0x01A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6[0x2];                                      // 0x01A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GemBreakPendingBars;                               // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInputSpecificGemsAndSmashers;               // 0x01AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimInputConfig*                    InputConfig;                                       // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOverdriveSystem;                            // 0x01B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCaptureSystem;                              // 0x01B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBandPerformanceScoring;                     // 0x01BA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB[0x1];                                      // 0x01BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArenaInitialShields;                               // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArenaInitialHealth;                                // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ArenaInitialAmmo;                                  // 0x01C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPilgrimSongDifficulty, float>           DifficultyCaptureFactors;                          // 0x01C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	TMap<EPilgrimTrackType, class UPilgrimInstrumentConfig*> PerInstrumentConfigs;                              // 0x0218(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 StreakToastThresholds;                             // 0x0268(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ESparksInstrumentType, class USoundCue*> InstrumentTypeMissCues;                            // 0x0278(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	class USoundCue*                              DefaultInstrumentTypeMissCue;                      // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateStandinBandmembers;                          // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPilgrimSongDifficulty>                SupportedDifficulties;                             // 0x02D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SongIntroEmbargoMs;                                // 0x02E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGameConfigSettings) == 0x000008, "Wrong alignment on FPilgrimGameConfigSettings");
static_assert(sizeof(FPilgrimGameConfigSettings) == 0x0002F0, "Wrong size on FPilgrimGameConfigSettings");
static_assert(offsetof(FPilgrimGameConfigSettings, SlopMs) == 0x000000, "Member 'FPilgrimGameConfigSettings::SlopMs' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, GemBreakEndInputUnlockMs) == 0x000004, "Member 'FPilgrimGameConfigSettings::GemBreakEndInputUnlockMs' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, EndOfTrackBuffer) == 0x000008, "Member 'FPilgrimGameConfigSettings::EndOfTrackBuffer' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, MsToNowBar) == 0x00000C, "Member 'FPilgrimGameConfigSettings::MsToNowBar' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, BackgroundTrackDb) == 0x000010, "Member 'FPilgrimGameConfigSettings::BackgroundTrackDb' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, BackgroundTrackGain) == 0x000014, "Member 'FPilgrimGameConfigSettings::BackgroundTrackGain' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, FireMidiEventTicksEarly) == 0x000018, "Member 'FPilgrimGameConfigSettings::FireMidiEventTicksEarly' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, BaseGemScoreValue) == 0x000020, "Member 'FPilgrimGameConfigSettings::BaseGemScoreValue' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, SustainScorePerBeat) == 0x000070, "Member 'FPilgrimGameConfigSettings::SustainScorePerBeat' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, OutroPreAlertSeconds) == 0x000074, "Member 'FPilgrimGameConfigSettings::OutroPreAlertSeconds' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, ScoreMultiplierDefinitions) == 0x000078, "Member 'FPilgrimGameConfigSettings::ScoreMultiplierDefinitions' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, PlayerHealthModifiers) == 0x000088, "Member 'FPilgrimGameConfigSettings::PlayerHealthModifiers' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, PilgrimHealthCrowdResponseTiers) == 0x0000D8, "Member 'FPilgrimGameConfigSettings::PilgrimHealthCrowdResponseTiers' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, IndividualStarPercentageThresholds) == 0x0000E8, "Member 'FPilgrimGameConfigSettings::IndividualStarPercentageThresholds' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, BandStarPercentageThresholds) == 0x000138, "Member 'FPilgrimGameConfigSettings::BandStarPercentageThresholds' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, IsBandMultiplierBasedOnUniqueInstruments) == 0x000148, "Member 'FPilgrimGameConfigSettings::IsBandMultiplierBasedOnUniqueInstruments' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, IsBandVarietyBonusScoredDuringPlay) == 0x000149, "Member 'FPilgrimGameConfigSettings::IsBandVarietyBonusScoredDuringPlay' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, BandOverdriveScoreMultipliers) == 0x000150, "Member 'FPilgrimGameConfigSettings::BandOverdriveScoreMultipliers' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, BandVarietyScoreMultipliers) == 0x000160, "Member 'FPilgrimGameConfigSettings::BandVarietyScoreMultipliers' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, AccuracyTiers) == 0x000170, "Member 'FPilgrimGameConfigSettings::AccuracyTiers' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, MaximumDisplayedAccuracyTierIndex) == 0x000180, "Member 'FPilgrimGameConfigSettings::MaximumDisplayedAccuracyTierIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, TeamQuickplayInitialHealth) == 0x000184, "Member 'FPilgrimGameConfigSettings::TeamQuickplayInitialHealth' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, TeamQuickplayOverdriveDecayRate) == 0x000188, "Member 'FPilgrimGameConfigSettings::TeamQuickplayOverdriveDecayRate' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, TeamQuickplayInitialOverdrive) == 0x00018C, "Member 'FPilgrimGameConfigSettings::TeamQuickplayInitialOverdrive' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, TeamQuickplayOverdrive) == 0x000190, "Member 'FPilgrimGameConfigSettings::TeamQuickplayOverdrive' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, TeamQuickplayOverdriveScoreMultiplier) == 0x000194, "Member 'FPilgrimGameConfigSettings::TeamQuickplayOverdriveScoreMultiplier' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, TeamQuickplayOverdriveHealthGainMultiplier) == 0x000198, "Member 'FPilgrimGameConfigSettings::TeamQuickplayOverdriveHealthGainMultiplier' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, TeamQuickplayRequiredOverdriveToActivate) == 0x00019C, "Member 'FPilgrimGameConfigSettings::TeamQuickplayRequiredOverdriveToActivate' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, TeamQuickplayOverdriveAddedOnSuccesfulSection) == 0x0001A0, "Member 'FPilgrimGameConfigSettings::TeamQuickplayOverdriveAddedOnSuccesfulSection' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, bOverdriveClearsGems) == 0x0001A4, "Member 'FPilgrimGameConfigSettings::bOverdriveClearsGems' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, bOverdriveClearAutoHoldSustain) == 0x0001A5, "Member 'FPilgrimGameConfigSettings::bOverdriveClearAutoHoldSustain' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, GemBreakPendingBars) == 0x0001A8, "Member 'FPilgrimGameConfigSettings::GemBreakPendingBars' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, bEnableInputSpecificGemsAndSmashers) == 0x0001AC, "Member 'FPilgrimGameConfigSettings::bEnableInputSpecificGemsAndSmashers' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, InputConfig) == 0x0001B0, "Member 'FPilgrimGameConfigSettings::InputConfig' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, bEnableOverdriveSystem) == 0x0001B8, "Member 'FPilgrimGameConfigSettings::bEnableOverdriveSystem' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, bEnableCaptureSystem) == 0x0001B9, "Member 'FPilgrimGameConfigSettings::bEnableCaptureSystem' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, bEnableBandPerformanceScoring) == 0x0001BA, "Member 'FPilgrimGameConfigSettings::bEnableBandPerformanceScoring' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, ArenaInitialShields) == 0x0001BC, "Member 'FPilgrimGameConfigSettings::ArenaInitialShields' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, ArenaInitialHealth) == 0x0001C0, "Member 'FPilgrimGameConfigSettings::ArenaInitialHealth' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, ArenaInitialAmmo) == 0x0001C4, "Member 'FPilgrimGameConfigSettings::ArenaInitialAmmo' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, DifficultyCaptureFactors) == 0x0001C8, "Member 'FPilgrimGameConfigSettings::DifficultyCaptureFactors' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, PerInstrumentConfigs) == 0x000218, "Member 'FPilgrimGameConfigSettings::PerInstrumentConfigs' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, StreakToastThresholds) == 0x000268, "Member 'FPilgrimGameConfigSettings::StreakToastThresholds' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, InstrumentTypeMissCues) == 0x000278, "Member 'FPilgrimGameConfigSettings::InstrumentTypeMissCues' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, DefaultInstrumentTypeMissCue) == 0x0002C8, "Member 'FPilgrimGameConfigSettings::DefaultInstrumentTypeMissCue' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, CreateStandinBandmembers) == 0x0002D0, "Member 'FPilgrimGameConfigSettings::CreateStandinBandmembers' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, SupportedDifficulties) == 0x0002D8, "Member 'FPilgrimGameConfigSettings::SupportedDifficulties' has a wrong offset!");
static_assert(offsetof(FPilgrimGameConfigSettings, SongIntroEmbargoMs) == 0x0002E8, "Member 'FPilgrimGameConfigSettings::SongIntroEmbargoMs' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_AllOverdriveReadyChanged
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_BandState_AllOverdriveReadyChanged final
{
public:
	bool                                          bAllPlayersHaveOverdriveReady;                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_AllOverdriveReadyChanged) == 0x000001, "Wrong alignment on FPilgrimEvent_BandState_AllOverdriveReadyChanged");
static_assert(sizeof(FPilgrimEvent_BandState_AllOverdriveReadyChanged) == 0x000001, "Wrong size on FPilgrimEvent_BandState_AllOverdriveReadyChanged");
static_assert(offsetof(FPilgrimEvent_BandState_AllOverdriveReadyChanged, bAllPlayersHaveOverdriveReady) == 0x000000, "Member 'FPilgrimEvent_BandState_AllOverdriveReadyChanged::bAllPlayersHaveOverdriveReady' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_BandHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_BandState_BandHealthChanged final
{
public:
	float                                         LastBandHealth;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewBandHealth;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastBandHealthTier;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewBandHealthTier;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_BandHealthChanged) == 0x000004, "Wrong alignment on FPilgrimEvent_BandState_BandHealthChanged");
static_assert(sizeof(FPilgrimEvent_BandState_BandHealthChanged) == 0x000010, "Wrong size on FPilgrimEvent_BandState_BandHealthChanged");
static_assert(offsetof(FPilgrimEvent_BandState_BandHealthChanged, LastBandHealth) == 0x000000, "Member 'FPilgrimEvent_BandState_BandHealthChanged::LastBandHealth' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_BandState_BandHealthChanged, NewBandHealth) == 0x000004, "Member 'FPilgrimEvent_BandState_BandHealthChanged::NewBandHealth' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_BandState_BandHealthChanged, LastBandHealthTier) == 0x000008, "Member 'FPilgrimEvent_BandState_BandHealthChanged::LastBandHealthTier' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_BandState_BandHealthChanged, NewBandHealthTier) == 0x00000C, "Member 'FPilgrimEvent_BandState_BandHealthChanged::NewBandHealthTier' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_MBI_ClientGotSongToPlay
// 0x0008 (0x0010 - 0x0008)
struct FPilgrimEvent_MBI_ClientGotSongToPlay final : public FPilgrimEvent_MBI_EventBase
{
public:
	class UPilgrimSongMetadata*                   SongToPlay;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_MBI_ClientGotSongToPlay) == 0x000008, "Wrong alignment on FPilgrimEvent_MBI_ClientGotSongToPlay");
static_assert(sizeof(FPilgrimEvent_MBI_ClientGotSongToPlay) == 0x000010, "Wrong size on FPilgrimEvent_MBI_ClientGotSongToPlay");
static_assert(offsetof(FPilgrimEvent_MBI_ClientGotSongToPlay, SongToPlay) == 0x000008, "Member 'FPilgrimEvent_MBI_ClientGotSongToPlay::SongToPlay' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimInputKeyBinding
// 0x0020 (0x0020 - 0x0000)
struct FPilgrimInputKeyBinding final
{
public:
	struct FKey                                   KeyBinding;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputAction;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSendToServer;                                     // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSendToClient;                                     // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimInputKeyBinding) == 0x000008, "Wrong alignment on FPilgrimInputKeyBinding");
static_assert(sizeof(FPilgrimInputKeyBinding) == 0x000020, "Wrong size on FPilgrimInputKeyBinding");
static_assert(offsetof(FPilgrimInputKeyBinding, KeyBinding) == 0x000000, "Member 'FPilgrimInputKeyBinding::KeyBinding' has a wrong offset!");
static_assert(offsetof(FPilgrimInputKeyBinding, InputAction) == 0x000018, "Member 'FPilgrimInputKeyBinding::InputAction' has a wrong offset!");
static_assert(offsetof(FPilgrimInputKeyBinding, bSendToServer) == 0x00001C, "Member 'FPilgrimInputKeyBinding::bSendToServer' has a wrong offset!");
static_assert(offsetof(FPilgrimInputKeyBinding, bSendToClient) == 0x00001D, "Member 'FPilgrimInputKeyBinding::bSendToClient' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerHistoryParams
// 0x00A0 (0x00A0 - 0x0000)
struct FPilgrimPlayerHistoryParams final
{
public:
	struct FUniqueNetIdRepl                       PlayerAccountId;                                   // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SongQuery;                                         // 0x0030(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSongShortNameMatcher                  SongShortNameMatcher;                              // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             InstrumentType;                                    // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimPlayerHistoryScoreParam               ScoreParam;                                        // 0x0091(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ControllerId;                                      // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerController>   RequestingPlayer;                                  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPlayerHistoryParams) == 0x000008, "Wrong alignment on FPilgrimPlayerHistoryParams");
static_assert(sizeof(FPilgrimPlayerHistoryParams) == 0x0000A0, "Wrong size on FPilgrimPlayerHistoryParams");
static_assert(offsetof(FPilgrimPlayerHistoryParams, PlayerAccountId) == 0x000000, "Member 'FPilgrimPlayerHistoryParams::PlayerAccountId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryParams, SongQuery) == 0x000030, "Member 'FPilgrimPlayerHistoryParams::SongQuery' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryParams, SongShortNameMatcher) == 0x000078, "Member 'FPilgrimPlayerHistoryParams::SongShortNameMatcher' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryParams, InstrumentType) == 0x000090, "Member 'FPilgrimPlayerHistoryParams::InstrumentType' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryParams, ScoreParam) == 0x000091, "Member 'FPilgrimPlayerHistoryParams::ScoreParam' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryParams, ControllerId) == 0x000094, "Member 'FPilgrimPlayerHistoryParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryParams, RequestingPlayer) == 0x000098, "Member 'FPilgrimPlayerHistoryParams::RequestingPlayer' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimSpotlightCompetition
// 0x0070 (0x0070 - 0x0000)
struct FPilgrimSpotlightCompetition final
{
public:
	class FString                                 SpotlightName;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpotlightGroup;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              BeginTime;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SongUIDs;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SongShortNames;                                    // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Constraints;                                       // 0x0050(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimSpotlightCompetition) == 0x000008, "Wrong alignment on FPilgrimSpotlightCompetition");
static_assert(sizeof(FPilgrimSpotlightCompetition) == 0x000070, "Wrong size on FPilgrimSpotlightCompetition");
static_assert(offsetof(FPilgrimSpotlightCompetition, SpotlightName) == 0x000000, "Member 'FPilgrimSpotlightCompetition::SpotlightName' has a wrong offset!");
static_assert(offsetof(FPilgrimSpotlightCompetition, SpotlightGroup) == 0x000010, "Member 'FPilgrimSpotlightCompetition::SpotlightGroup' has a wrong offset!");
static_assert(offsetof(FPilgrimSpotlightCompetition, BeginTime) == 0x000020, "Member 'FPilgrimSpotlightCompetition::BeginTime' has a wrong offset!");
static_assert(offsetof(FPilgrimSpotlightCompetition, EndTime) == 0x000028, "Member 'FPilgrimSpotlightCompetition::EndTime' has a wrong offset!");
static_assert(offsetof(FPilgrimSpotlightCompetition, SongUIDs) == 0x000030, "Member 'FPilgrimSpotlightCompetition::SongUIDs' has a wrong offset!");
static_assert(offsetof(FPilgrimSpotlightCompetition, SongShortNames) == 0x000040, "Member 'FPilgrimSpotlightCompetition::SongShortNames' has a wrong offset!");
static_assert(offsetof(FPilgrimSpotlightCompetition, Constraints) == 0x000050, "Member 'FPilgrimSpotlightCompetition::Constraints' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.MusicClockCatchUpStarted
// 0x0010 (0x0010 - 0x0000)
struct FMusicClockCatchUpStarted final
{
public:
	float                                         CatchupSpeed;                                      // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentExperiencedTime;                            // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerController>   WeakLocalPlayer;                                   // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicClockCatchUpStarted) == 0x000004, "Wrong alignment on FMusicClockCatchUpStarted");
static_assert(sizeof(FMusicClockCatchUpStarted) == 0x000010, "Wrong size on FMusicClockCatchUpStarted");
static_assert(offsetof(FMusicClockCatchUpStarted, CatchupSpeed) == 0x000000, "Member 'FMusicClockCatchUpStarted::CatchupSpeed' has a wrong offset!");
static_assert(offsetof(FMusicClockCatchUpStarted, CurrentExperiencedTime) == 0x000004, "Member 'FMusicClockCatchUpStarted::CurrentExperiencedTime' has a wrong offset!");
static_assert(offsetof(FMusicClockCatchUpStarted, WeakLocalPlayer) == 0x000008, "Member 'FMusicClockCatchUpStarted::WeakLocalPlayer' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimSpotlightCompetitionParams
// 0x0068 (0x0068 - 0x0000)
struct FPilgrimSpotlightCompetitionParams final
{
public:
	struct FGameplayTagQuery                      SongQuery;                                         // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSongShortNameMatcher                  SongShortNameMatcher;                              // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             InstrumentType;                                    // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCache;                                         // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimSpotlightCompetitionParams) == 0x000008, "Wrong alignment on FPilgrimSpotlightCompetitionParams");
static_assert(sizeof(FPilgrimSpotlightCompetitionParams) == 0x000068, "Wrong size on FPilgrimSpotlightCompetitionParams");
static_assert(offsetof(FPilgrimSpotlightCompetitionParams, SongQuery) == 0x000000, "Member 'FPilgrimSpotlightCompetitionParams::SongQuery' has a wrong offset!");
static_assert(offsetof(FPilgrimSpotlightCompetitionParams, SongShortNameMatcher) == 0x000048, "Member 'FPilgrimSpotlightCompetitionParams::SongShortNameMatcher' has a wrong offset!");
static_assert(offsetof(FPilgrimSpotlightCompetitionParams, InstrumentType) == 0x000060, "Member 'FPilgrimSpotlightCompetitionParams::InstrumentType' has a wrong offset!");
static_assert(offsetof(FPilgrimSpotlightCompetitionParams, bUseCache) == 0x000061, "Member 'FPilgrimSpotlightCompetitionParams::bUseCache' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimGetSpotlightParams
// 0x0018 (0x0018 - 0x0000)
struct FPilgrimGetSpotlightParams final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             InstrumentType;                                    // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartsBefore;                                      // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndsAfter;                                         // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimGetSpotlightParams) == 0x000008, "Wrong alignment on FPilgrimGetSpotlightParams");
static_assert(sizeof(FPilgrimGetSpotlightParams) == 0x000018, "Wrong size on FPilgrimGetSpotlightParams");
static_assert(offsetof(FPilgrimGetSpotlightParams, SongShortName) == 0x000000, "Member 'FPilgrimGetSpotlightParams::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimGetSpotlightParams, InstrumentType) == 0x000004, "Member 'FPilgrimGetSpotlightParams::InstrumentType' has a wrong offset!");
static_assert(offsetof(FPilgrimGetSpotlightParams, StartsBefore) == 0x000008, "Member 'FPilgrimGetSpotlightParams::StartsBefore' has a wrong offset!");
static_assert(offsetof(FPilgrimGetSpotlightParams, EndsAfter) == 0x000010, "Member 'FPilgrimGetSpotlightParams::EndsAfter' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PlayerState_SetlistVoteChanged
// 0x0018 (0x0018 - 0x0000)
struct FPilgrimEvent_PlayerState_SetlistVoteChanged final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimPremadeSetlist*                 NewSetlistVote;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimPremadeSetlist*                 PrevSetlistVote;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_PlayerState_SetlistVoteChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_PlayerState_SetlistVoteChanged");
static_assert(sizeof(FPilgrimEvent_PlayerState_SetlistVoteChanged) == 0x000018, "Wrong size on FPilgrimEvent_PlayerState_SetlistVoteChanged");
static_assert(offsetof(FPilgrimEvent_PlayerState_SetlistVoteChanged, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_PlayerState_SetlistVoteChanged::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_SetlistVoteChanged, NewSetlistVote) == 0x000008, "Member 'FPilgrimEvent_PlayerState_SetlistVoteChanged::NewSetlistVote' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_SetlistVoteChanged, PrevSetlistVote) == 0x000010, "Member 'FPilgrimEvent_PlayerState_SetlistVoteChanged::PrevSetlistVote' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimLaneInputMappingConfig
// 0x0030 (0x0030 - 0x0000)
struct FPilgrimLaneInputMappingConfig final
{
public:
	class UFortInputMappingContext*               DefaultPCBeatmatchInputMappingContext;             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortInputMappingContext*               DefaultConsoleBeatmatchInputMappingContext;        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortInputMappingContext*>       PCBeatmatchInputMappingContexts;                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UFortInputMappingContext*>       ConsoleBeatmatchInputMappingContexts;              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimLaneInputMappingConfig) == 0x000008, "Wrong alignment on FPilgrimLaneInputMappingConfig");
static_assert(sizeof(FPilgrimLaneInputMappingConfig) == 0x000030, "Wrong size on FPilgrimLaneInputMappingConfig");
static_assert(offsetof(FPilgrimLaneInputMappingConfig, DefaultPCBeatmatchInputMappingContext) == 0x000000, "Member 'FPilgrimLaneInputMappingConfig::DefaultPCBeatmatchInputMappingContext' has a wrong offset!");
static_assert(offsetof(FPilgrimLaneInputMappingConfig, DefaultConsoleBeatmatchInputMappingContext) == 0x000008, "Member 'FPilgrimLaneInputMappingConfig::DefaultConsoleBeatmatchInputMappingContext' has a wrong offset!");
static_assert(offsetof(FPilgrimLaneInputMappingConfig, PCBeatmatchInputMappingContexts) == 0x000010, "Member 'FPilgrimLaneInputMappingConfig::PCBeatmatchInputMappingContexts' has a wrong offset!");
static_assert(offsetof(FPilgrimLaneInputMappingConfig, ConsoleBeatmatchInputMappingContexts) == 0x000020, "Member 'FPilgrimLaneInputMappingConfig::ConsoleBeatmatchInputMappingContexts' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.SongTimestampData
// 0x0048 (0x0048 - 0x0000)
struct FSongTimestampData final
{
public:
	float                                         ServerWorldTime;                                   // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMidiSongPos                           ServerSongPosition;                                // 0x0008(0x0040)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSongTimestampData) == 0x000008, "Wrong alignment on FSongTimestampData");
static_assert(sizeof(FSongTimestampData) == 0x000048, "Wrong size on FSongTimestampData");
static_assert(offsetof(FSongTimestampData, ServerWorldTime) == 0x000000, "Member 'FSongTimestampData::ServerWorldTime' has a wrong offset!");
static_assert(offsetof(FSongTimestampData, ServerSongPosition) == 0x000008, "Member 'FSongTimestampData::ServerSongPosition' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.MusicClockCatchUpData
// 0x0018 (0x0018 - 0x0000)
struct FMusicClockCatchUpData final
{
public:
	struct FMusicClockCatchUpStarted              StartData;                                         // 0x0000(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDesyncMs;                                       // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicClockCatchUpData) == 0x000004, "Wrong alignment on FMusicClockCatchUpData");
static_assert(sizeof(FMusicClockCatchUpData) == 0x000018, "Wrong size on FMusicClockCatchUpData");
static_assert(offsetof(FMusicClockCatchUpData, StartData) == 0x000000, "Member 'FMusicClockCatchUpData::StartData' has a wrong offset!");
static_assert(offsetof(FMusicClockCatchUpData, StartTime) == 0x000010, "Member 'FMusicClockCatchUpData::StartTime' has a wrong offset!");
static_assert(offsetof(FMusicClockCatchUpData, MaxDesyncMs) == 0x000014, "Member 'FMusicClockCatchUpData::MaxDesyncMs' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimGameBandProgressDelta
// 0x0024 (0x0024 - 0x0000)
struct alignas(0x04) FPilgrimGameBandProgressDelta final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGameBandProgressDelta) == 0x000004, "Wrong alignment on FPilgrimGameBandProgressDelta");
static_assert(sizeof(FPilgrimGameBandProgressDelta) == 0x000024, "Wrong size on FPilgrimGameBandProgressDelta");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_SetlistVoteWinnerChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_BandState_SetlistVoteWinnerChanged final
{
public:
	class UPilgrimPremadeSetlist*                 NewVoteWinner;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimPremadeSetlist*                 PrevVoteWinner;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_SetlistVoteWinnerChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_BandState_SetlistVoteWinnerChanged");
static_assert(sizeof(FPilgrimEvent_BandState_SetlistVoteWinnerChanged) == 0x000010, "Wrong size on FPilgrimEvent_BandState_SetlistVoteWinnerChanged");
static_assert(offsetof(FPilgrimEvent_BandState_SetlistVoteWinnerChanged, NewVoteWinner) == 0x000000, "Member 'FPilgrimEvent_BandState_SetlistVoteWinnerChanged::NewVoteWinner' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_BandState_SetlistVoteWinnerChanged, PrevVoteWinner) == 0x000008, "Member 'FPilgrimEvent_BandState_SetlistVoteWinnerChanged::PrevVoteWinner' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_BandState_AllOverdriveActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_BandState_AllOverdriveActiveChanged final
{
public:
	bool                                          bAllPlayersHaveActiveOverdrive;                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_BandState_AllOverdriveActiveChanged) == 0x000001, "Wrong alignment on FPilgrimEvent_BandState_AllOverdriveActiveChanged");
static_assert(sizeof(FPilgrimEvent_BandState_AllOverdriveActiveChanged) == 0x000001, "Wrong size on FPilgrimEvent_BandState_AllOverdriveActiveChanged");
static_assert(offsetof(FPilgrimEvent_BandState_AllOverdriveActiveChanged, bAllPlayersHaveActiveOverdrive) == 0x000000, "Member 'FPilgrimEvent_BandState_AllOverdriveActiveChanged::bAllPlayersHaveActiveOverdrive' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvaluatorState
// 0x01A8 (0x01A8 - 0x0000)
struct alignas(0x08) FPilgrimEvaluatorState final
{
public:
	uint8                                         Pad_0[0x1A8];                                      // 0x0000(0x01A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvaluatorState) == 0x000008, "Wrong alignment on FPilgrimEvaluatorState");
static_assert(sizeof(FPilgrimEvaluatorState) == 0x0001A8, "Wrong size on FPilgrimEvaluatorState");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PilgrimGame_PlayingSong
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimEvent_PilgrimGame_PlayingSong final
{
public:
	class UPilgrimGame*                           PilgrimGame;                                       // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_PilgrimGame_PlayingSong) == 0x000008, "Wrong alignment on FPilgrimEvent_PilgrimGame_PlayingSong");
static_assert(sizeof(FPilgrimEvent_PilgrimGame_PlayingSong) == 0x000008, "Wrong size on FPilgrimEvent_PilgrimGame_PlayingSong");
static_assert(offsetof(FPilgrimEvent_PilgrimGame_PlayingSong, PilgrimGame) == 0x000000, "Member 'FPilgrimEvent_PilgrimGame_PlayingSong::PilgrimGame' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PilgrimGame_TrackFadeEnded
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimEvent_PilgrimGame_TrackFadeEnded final
{
public:
	class UPilgrimGame*                           PilgrimGame;                                       // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_PilgrimGame_TrackFadeEnded) == 0x000008, "Wrong alignment on FPilgrimEvent_PilgrimGame_TrackFadeEnded");
static_assert(sizeof(FPilgrimEvent_PilgrimGame_TrackFadeEnded) == 0x000008, "Wrong size on FPilgrimEvent_PilgrimGame_TrackFadeEnded");
static_assert(offsetof(FPilgrimEvent_PilgrimGame_TrackFadeEnded, PilgrimGame) == 0x000000, "Member 'FPilgrimEvent_PilgrimGame_TrackFadeEnded::PilgrimGame' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimDifficultyTrackTypePair
// 0x0002 (0x0002 - 0x0000)
struct FPilgrimDifficultyTrackTypePair final
{
public:
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             TrackType;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimDifficultyTrackTypePair) == 0x000001, "Wrong alignment on FPilgrimDifficultyTrackTypePair");
static_assert(sizeof(FPilgrimDifficultyTrackTypePair) == 0x000002, "Wrong size on FPilgrimDifficultyTrackTypePair");
static_assert(offsetof(FPilgrimDifficultyTrackTypePair, Difficulty) == 0x000000, "Member 'FPilgrimDifficultyTrackTypePair::Difficulty' has a wrong offset!");
static_assert(offsetof(FPilgrimDifficultyTrackTypePair, TrackType) == 0x000001, "Member 'FPilgrimDifficultyTrackTypePair::TrackType' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimGemDensityData
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimGemDensityData final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumGems;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              SustainDurationTotal;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimGemDensityData) == 0x000008, "Wrong alignment on FPilgrimGemDensityData");
static_assert(sizeof(FPilgrimGemDensityData) == 0x000010, "Wrong size on FPilgrimGemDensityData");
static_assert(offsetof(FPilgrimGemDensityData, SectionIndex) == 0x000000, "Member 'FPilgrimGemDensityData::SectionIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimGemDensityData, NumGems) == 0x000004, "Member 'FPilgrimGemDensityData::NumGems' has a wrong offset!");
static_assert(offsetof(FPilgrimGemDensityData, SustainDurationTotal) == 0x000008, "Member 'FPilgrimGemDensityData::SustainDurationTotal' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimGemBreaks
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimGemBreaks final
{
public:
	TArray<struct FPilgrimGemBreak>               Breaks;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimGemBreaks) == 0x000008, "Wrong alignment on FPilgrimGemBreaks");
static_assert(sizeof(FPilgrimGemBreaks) == 0x000010, "Wrong size on FPilgrimGemBreaks");
static_assert(offsetof(FPilgrimGemBreaks, Breaks) == 0x000000, "Member 'FPilgrimGemBreaks::Breaks' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_GemBreak_Base
// 0x0048 (0x0048 - 0x0000)
struct FPilgrimEvent_GemBreak_Base
{
public:
	struct FPilgrimGemBreak                       Break;                                             // 0x0000(0x0024)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimGemBreakListener*               Listener;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ForActor;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentSongMS;                                     // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSongBar;                                    // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_GemBreak_Base) == 0x000008, "Wrong alignment on FPilgrimEvent_GemBreak_Base");
static_assert(sizeof(FPilgrimEvent_GemBreak_Base) == 0x000048, "Wrong size on FPilgrimEvent_GemBreak_Base");
static_assert(offsetof(FPilgrimEvent_GemBreak_Base, Break) == 0x000000, "Member 'FPilgrimEvent_GemBreak_Base::Break' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_GemBreak_Base, Listener) == 0x000028, "Member 'FPilgrimEvent_GemBreak_Base::Listener' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_GemBreak_Base, ForActor) == 0x000030, "Member 'FPilgrimEvent_GemBreak_Base::ForActor' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_GemBreak_Base, bIsLocalPlayer) == 0x000038, "Member 'FPilgrimEvent_GemBreak_Base::bIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_GemBreak_Base, CurrentSongMS) == 0x00003C, "Member 'FPilgrimEvent_GemBreak_Base::CurrentSongMS' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_GemBreak_Base, CurrentSongBar) == 0x000040, "Member 'FPilgrimEvent_GemBreak_Base::CurrentSongBar' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimVerbMessageBase
// 0x00B8 (0x0130 - 0x0078)
struct FPilgrimVerbMessageBase : public FVerbMessage
{
public:
	class FName                                   SongShortName;                                     // 0x0078(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubjectTagsPair                       SongID;                                            // 0x0080(0x0038)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FSubjectTagsPair                       InstrumentId;                                      // 0x00B8(0x0038)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FSubjectTagsPair                       BandInstrumentIds;                                 // 0x00F0(0x0038)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         NumBandMembers;                                    // 0x0128(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0129(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimVerbMessageBase) == 0x000008, "Wrong alignment on FPilgrimVerbMessageBase");
static_assert(sizeof(FPilgrimVerbMessageBase) == 0x000130, "Wrong size on FPilgrimVerbMessageBase");
static_assert(offsetof(FPilgrimVerbMessageBase, SongShortName) == 0x000078, "Member 'FPilgrimVerbMessageBase::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessageBase, SongID) == 0x000080, "Member 'FPilgrimVerbMessageBase::SongID' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessageBase, InstrumentId) == 0x0000B8, "Member 'FPilgrimVerbMessageBase::InstrumentId' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessageBase, BandInstrumentIds) == 0x0000F0, "Member 'FPilgrimVerbMessageBase::BandInstrumentIds' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessageBase, NumBandMembers) == 0x000128, "Member 'FPilgrimVerbMessageBase::NumBandMembers' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessageBase, Difficulty) == 0x000129, "Member 'FPilgrimVerbMessageBase::Difficulty' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimVerbMessage_AccumulateStars
// 0x0008 (0x0138 - 0x0130)
struct FPilgrimVerbMessage_AccumulateStars final : public FPilgrimVerbMessageBase
{
public:
	uint8                                         TotalStars;                                        // 0x0130(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DeltaStars;                                        // 0x0131(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsBandStar;                                       // 0x0132(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimVerbMessage_AccumulateStars) == 0x000008, "Wrong alignment on FPilgrimVerbMessage_AccumulateStars");
static_assert(sizeof(FPilgrimVerbMessage_AccumulateStars) == 0x000138, "Wrong size on FPilgrimVerbMessage_AccumulateStars");
static_assert(offsetof(FPilgrimVerbMessage_AccumulateStars, TotalStars) == 0x000130, "Member 'FPilgrimVerbMessage_AccumulateStars::TotalStars' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_AccumulateStars, DeltaStars) == 0x000131, "Member 'FPilgrimVerbMessage_AccumulateStars::DeltaStars' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_AccumulateStars, bIsBandStar) == 0x000132, "Member 'FPilgrimVerbMessage_AccumulateStars::bIsBandStar' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_GemBreak_Started
// 0x0000 (0x0048 - 0x0048)
struct FPilgrimEvent_GemBreak_Started final : public FPilgrimEvent_GemBreak_Base
{
};
static_assert(alignof(FPilgrimEvent_GemBreak_Started) == 0x000008, "Wrong alignment on FPilgrimEvent_GemBreak_Started");
static_assert(sizeof(FPilgrimEvent_GemBreak_Started) == 0x000048, "Wrong size on FPilgrimEvent_GemBreak_Started");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_GemBreak_Ended
// 0x0000 (0x0048 - 0x0048)
struct FPilgrimEvent_GemBreak_Ended final : public FPilgrimEvent_GemBreak_Base
{
};
static_assert(alignof(FPilgrimEvent_GemBreak_Ended) == 0x000008, "Wrong alignment on FPilgrimEvent_GemBreak_Ended");
static_assert(sizeof(FPilgrimEvent_GemBreak_Ended) == 0x000048, "Wrong size on FPilgrimEvent_GemBreak_Ended");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_GemBreak_Pending
// 0x0000 (0x0048 - 0x0048)
struct FPilgrimEvent_GemBreak_Pending final : public FPilgrimEvent_GemBreak_Base
{
};
static_assert(alignof(FPilgrimEvent_GemBreak_Pending) == 0x000008, "Wrong alignment on FPilgrimEvent_GemBreak_Pending");
static_assert(sizeof(FPilgrimEvent_GemBreak_Pending) == 0x000048, "Wrong size on FPilgrimEvent_GemBreak_Pending");

// ScriptStruct PilgrimCoreRuntime.PilgrimGemHitAccuracy
// 0x0030 (0x0030 - 0x0000)
struct FPilgrimGemHitAccuracy final
{
public:
	float                                         AccuracyMs;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimAccuracyTier                   AccuracyTier;                                      // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TierIndex;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGemHitAccuracy) == 0x000008, "Wrong alignment on FPilgrimGemHitAccuracy");
static_assert(sizeof(FPilgrimGemHitAccuracy) == 0x000030, "Wrong size on FPilgrimGemHitAccuracy");
static_assert(offsetof(FPilgrimGemHitAccuracy, AccuracyMs) == 0x000000, "Member 'FPilgrimGemHitAccuracy::AccuracyMs' has a wrong offset!");
static_assert(offsetof(FPilgrimGemHitAccuracy, AccuracyTier) == 0x000008, "Member 'FPilgrimGemHitAccuracy::AccuracyTier' has a wrong offset!");
static_assert(offsetof(FPilgrimGemHitAccuracy, TierIndex) == 0x000028, "Member 'FPilgrimGemHitAccuracy::TierIndex' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimInputPresetData
// 0x0030 (0x0038 - 0x0008)
struct FPilgrimInputPresetData final : public FTableRowBase
{
public:
	class FText                                   PresetDescription;                                 // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimInputKeyBinding>        LaneBindings;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsGameplayBinding;                                // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMouseKeyboardBinding;                           // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimInputPresetData) == 0x000008, "Wrong alignment on FPilgrimInputPresetData");
static_assert(sizeof(FPilgrimInputPresetData) == 0x000038, "Wrong size on FPilgrimInputPresetData");
static_assert(offsetof(FPilgrimInputPresetData, PresetDescription) == 0x000008, "Member 'FPilgrimInputPresetData::PresetDescription' has a wrong offset!");
static_assert(offsetof(FPilgrimInputPresetData, LaneBindings) == 0x000020, "Member 'FPilgrimInputPresetData::LaneBindings' has a wrong offset!");
static_assert(offsetof(FPilgrimInputPresetData, bIsGameplayBinding) == 0x000030, "Member 'FPilgrimInputPresetData::bIsGameplayBinding' has a wrong offset!");
static_assert(offsetof(FPilgrimInputPresetData, bIsMouseKeyboardBinding) == 0x000031, "Member 'FPilgrimInputPresetData::bIsMouseKeyboardBinding' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimDefaultUnbindingData
// 0x0008 (0x0010 - 0x0008)
struct FPilgrimDefaultUnbindingData final : public FTableRowBase
{
public:
	bool                                          bDoUnbindPressed;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoUnbindReleased;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimDefaultUnbindingData) == 0x000008, "Wrong alignment on FPilgrimDefaultUnbindingData");
static_assert(sizeof(FPilgrimDefaultUnbindingData) == 0x000010, "Wrong size on FPilgrimDefaultUnbindingData");
static_assert(offsetof(FPilgrimDefaultUnbindingData, bDoUnbindPressed) == 0x000008, "Member 'FPilgrimDefaultUnbindingData::bDoUnbindPressed' has a wrong offset!");
static_assert(offsetof(FPilgrimDefaultUnbindingData, bDoUnbindReleased) == 0x000009, "Member 'FPilgrimDefaultUnbindingData::bDoUnbindReleased' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimVerbMessage_DeployOverdrive
// 0x0000 (0x0130 - 0x0130)
struct FPilgrimVerbMessage_DeployOverdrive final : public FPilgrimVerbMessageBase
{
};
static_assert(alignof(FPilgrimVerbMessage_DeployOverdrive) == 0x000008, "Wrong alignment on FPilgrimVerbMessage_DeployOverdrive");
static_assert(sizeof(FPilgrimVerbMessage_DeployOverdrive) == 0x000130, "Wrong size on FPilgrimVerbMessage_DeployOverdrive");

// ScriptStruct PilgrimCoreRuntime.PilgrimGemInputSettings
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FPilgrimGemInputSettings final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGemInputSettings) == 0x000004, "Wrong alignment on FPilgrimGemInputSettings");
static_assert(sizeof(FPilgrimGemInputSettings) == 0x000008, "Wrong size on FPilgrimGemInputSettings");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_ToggleDebugCalibrationWidget
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_ToggleDebugCalibrationWidget final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_ToggleDebugCalibrationWidget) == 0x000001, "Wrong alignment on FPilgrimEvent_ToggleDebugCalibrationWidget");
static_assert(sizeof(FPilgrimEvent_ToggleDebugCalibrationWidget) == 0x000001, "Wrong size on FPilgrimEvent_ToggleDebugCalibrationWidget");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_TrackLayoutPresetChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_TrackLayoutPresetChanged final
{
public:
	class FString                                 PresetName;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_TrackLayoutPresetChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_TrackLayoutPresetChanged");
static_assert(sizeof(FPilgrimEvent_TrackLayoutPresetChanged) == 0x000010, "Wrong size on FPilgrimEvent_TrackLayoutPresetChanged");
static_assert(offsetof(FPilgrimEvent_TrackLayoutPresetChanged, PresetName) == 0x000000, "Member 'FPilgrimEvent_TrackLayoutPresetChanged::PresetName' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_KeybindPresetChanged
// 0x0018 (0x0018 - 0x0000)
struct FPilgrimEvent_KeybindPresetChanged final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   InputMappingContext;                               // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_KeybindPresetChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_KeybindPresetChanged");
static_assert(sizeof(FPilgrimEvent_KeybindPresetChanged) == 0x000018, "Wrong size on FPilgrimEvent_KeybindPresetChanged");
static_assert(offsetof(FPilgrimEvent_KeybindPresetChanged, Name) == 0x000000, "Member 'FPilgrimEvent_KeybindPresetChanged::Name' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_KeybindPresetChanged, InputMappingContext) == 0x000010, "Member 'FPilgrimEvent_KeybindPresetChanged::InputMappingContext' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_KeybindPresetActivated
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_KeybindPresetActivated final
{
public:
	class UInputMappingContext*                   InputMappingContextGamepad;                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   InputMappingContextKeyboard;                       // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_KeybindPresetActivated) == 0x000008, "Wrong alignment on FPilgrimEvent_KeybindPresetActivated");
static_assert(sizeof(FPilgrimEvent_KeybindPresetActivated) == 0x000010, "Wrong size on FPilgrimEvent_KeybindPresetActivated");
static_assert(offsetof(FPilgrimEvent_KeybindPresetActivated, InputMappingContextGamepad) == 0x000000, "Member 'FPilgrimEvent_KeybindPresetActivated::InputMappingContextGamepad' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_KeybindPresetActivated, InputMappingContextKeyboard) == 0x000008, "Member 'FPilgrimEvent_KeybindPresetActivated::InputMappingContextKeyboard' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_CameraPresetChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_CameraPresetChanged final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_CameraPresetChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_CameraPresetChanged");
static_assert(sizeof(FPilgrimEvent_CameraPresetChanged) == 0x000010, "Wrong size on FPilgrimEvent_CameraPresetChanged");
static_assert(offsetof(FPilgrimEvent_CameraPresetChanged, Name) == 0x000000, "Member 'FPilgrimEvent_CameraPresetChanged::Name' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_InputReceived
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_InputReceived final
{
public:
	TWeakObjectPtr<class AFortPlayerControllerGameplay> UserController;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputAction;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPressEvent;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_InputReceived) == 0x000004, "Wrong alignment on FPilgrimEvent_InputReceived");
static_assert(sizeof(FPilgrimEvent_InputReceived) == 0x000010, "Wrong size on FPilgrimEvent_InputReceived");
static_assert(offsetof(FPilgrimEvent_InputReceived, UserController) == 0x000000, "Member 'FPilgrimEvent_InputReceived::UserController' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_InputReceived, InputAction) == 0x000008, "Member 'FPilgrimEvent_InputReceived::InputAction' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_InputReceived, bPressEvent) == 0x00000C, "Member 'FPilgrimEvent_InputReceived::bPressEvent' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_InputOffsetCalculated
// 0x003C (0x003C - 0x0000)
struct FPilgrimEvent_InputOffsetCalculated final
{
public:
	EPilgrimTrackLane                             Lane;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrackerGemIndex;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTrackItemInfo                         GemInfo;                                           // 0x000C(0x0030)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_InputOffsetCalculated) == 0x000004, "Wrong alignment on FPilgrimEvent_InputOffsetCalculated");
static_assert(sizeof(FPilgrimEvent_InputOffsetCalculated) == 0x00003C, "Wrong size on FPilgrimEvent_InputOffsetCalculated");
static_assert(offsetof(FPilgrimEvent_InputOffsetCalculated, Lane) == 0x000000, "Member 'FPilgrimEvent_InputOffsetCalculated::Lane' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_InputOffsetCalculated, Offset) == 0x000004, "Member 'FPilgrimEvent_InputOffsetCalculated::Offset' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_InputOffsetCalculated, TrackerGemIndex) == 0x000008, "Member 'FPilgrimEvent_InputOffsetCalculated::TrackerGemIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_InputOffsetCalculated, GemInfo) == 0x00000C, "Member 'FPilgrimEvent_InputOffsetCalculated::GemInfo' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerHistoryCacheEntry
// 0x01E8 (0x01E8 - 0x0000)
struct alignas(0x08) FPilgrimPlayerHistoryCacheEntry final
{
public:
	uint8                                         Pad_0[0x1E8];                                      // 0x0000(0x01E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimPlayerHistoryCacheEntry) == 0x000008, "Wrong alignment on FPilgrimPlayerHistoryCacheEntry");
static_assert(sizeof(FPilgrimPlayerHistoryCacheEntry) == 0x0001E8, "Wrong size on FPilgrimPlayerHistoryCacheEntry");

// ScriptStruct PilgrimCoreRuntime.PilgrimEventCacheDownload
// 0x0240 (0x0240 - 0x0000)
struct alignas(0x08) FPilgrimEventCacheDownload final
{
public:
	uint8                                         Pad_0[0x240];                                      // 0x0000(0x0240)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEventCacheDownload) == 0x000008, "Wrong alignment on FPilgrimEventCacheDownload");
static_assert(sizeof(FPilgrimEventCacheDownload) == 0x000240, "Wrong size on FPilgrimEventCacheDownload");

// ScriptStruct PilgrimCoreRuntime.PilgrimSpotlightChallengeCache
// 0x0108 (0x0108 - 0x0000)
struct alignas(0x08) FPilgrimSpotlightChallengeCache final
{
public:
	uint8                                         Pad_0[0x108];                                      // 0x0000(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimSpotlightChallengeCache) == 0x000008, "Wrong alignment on FPilgrimSpotlightChallengeCache");
static_assert(sizeof(FPilgrimSpotlightChallengeCache) == 0x000108, "Wrong size on FPilgrimSpotlightChallengeCache");

// ScriptStruct PilgrimCoreRuntime.PilgrimLeaderboardPageCache
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FPilgrimLeaderboardPageCache final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimLeaderboardPageCache) == 0x000008, "Wrong alignment on FPilgrimLeaderboardPageCache");
static_assert(sizeof(FPilgrimLeaderboardPageCache) == 0x000048, "Wrong size on FPilgrimLeaderboardPageCache");

// ScriptStruct PilgrimCoreRuntime.PilgrimLeaderboardCache
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FPilgrimLeaderboardCache final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimLeaderboardCache) == 0x000008, "Wrong alignment on FPilgrimLeaderboardCache");
static_assert(sizeof(FPilgrimLeaderboardCache) == 0x000060, "Wrong size on FPilgrimLeaderboardCache");

// ScriptStruct PilgrimCoreRuntime.PilgrimPersonalBestResultRpl
// 0x0090 (0x0090 - 0x0000)
struct FPilgrimPersonalBestResultRpl final
{
public:
	struct FPilgrimLeaderboardEntryRpl            BestSolo;                                          // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPilgrimLeaderboardEntryRpl            BestBand;                                          // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPilgrimLeaderboardEntryRpl            BestSpotlight;                                     // 0x0060(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPersonalBestResultRpl) == 0x000008, "Wrong alignment on FPilgrimPersonalBestResultRpl");
static_assert(sizeof(FPilgrimPersonalBestResultRpl) == 0x000090, "Wrong size on FPilgrimPersonalBestResultRpl");
static_assert(offsetof(FPilgrimPersonalBestResultRpl, BestSolo) == 0x000000, "Member 'FPilgrimPersonalBestResultRpl::BestSolo' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestResultRpl, BestBand) == 0x000030, "Member 'FPilgrimPersonalBestResultRpl::BestBand' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestResultRpl, BestSpotlight) == 0x000060, "Member 'FPilgrimPersonalBestResultRpl::BestSpotlight' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPersonalBestHistoryRpl
// 0x0128 (0x0128 - 0x0000)
struct FPilgrimPersonalBestHistoryRpl final
{
public:
	bool                                          bSoloReachedNewHighscore;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBandReachedNewHighscore;                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpotlightReachedNewHighscore;                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimPersonalBestResultRpl          LoadedScore;                                       // 0x0008(0x0090)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPilgrimPersonalBestResultRpl          NewScore;                                          // 0x0098(0x0090)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPersonalBestHistoryRpl) == 0x000008, "Wrong alignment on FPilgrimPersonalBestHistoryRpl");
static_assert(sizeof(FPilgrimPersonalBestHistoryRpl) == 0x000128, "Wrong size on FPilgrimPersonalBestHistoryRpl");
static_assert(offsetof(FPilgrimPersonalBestHistoryRpl, bSoloReachedNewHighscore) == 0x000000, "Member 'FPilgrimPersonalBestHistoryRpl::bSoloReachedNewHighscore' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestHistoryRpl, bBandReachedNewHighscore) == 0x000001, "Member 'FPilgrimPersonalBestHistoryRpl::bBandReachedNewHighscore' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestHistoryRpl, bSpotlightReachedNewHighscore) == 0x000002, "Member 'FPilgrimPersonalBestHistoryRpl::bSpotlightReachedNewHighscore' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestHistoryRpl, LoadedScore) == 0x000008, "Member 'FPilgrimPersonalBestHistoryRpl::LoadedScore' has a wrong offset!");
static_assert(offsetof(FPilgrimPersonalBestHistoryRpl, NewScore) == 0x000098, "Member 'FPilgrimPersonalBestHistoryRpl::NewScore' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPlayerHistoryCacheParams
// 0x0060 (0x0060 - 0x0000)
struct FPilgrimPlayerHistoryCacheParams final
{
public:
	struct FUniqueNetIdRepl                       PlayerAccountId;                                   // 0x0000(0x0030)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameId;                                            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventId;                                           // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventWindowId;                                     // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimPlayerHistoryCacheParams) == 0x000008, "Wrong alignment on FPilgrimPlayerHistoryCacheParams");
static_assert(sizeof(FPilgrimPlayerHistoryCacheParams) == 0x000060, "Wrong size on FPilgrimPlayerHistoryCacheParams");
static_assert(offsetof(FPilgrimPlayerHistoryCacheParams, PlayerAccountId) == 0x000000, "Member 'FPilgrimPlayerHistoryCacheParams::PlayerAccountId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryCacheParams, GameId) == 0x000030, "Member 'FPilgrimPlayerHistoryCacheParams::GameId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryCacheParams, EventId) == 0x000040, "Member 'FPilgrimPlayerHistoryCacheParams::EventId' has a wrong offset!");
static_assert(offsetof(FPilgrimPlayerHistoryCacheParams, EventWindowId) == 0x000050, "Member 'FPilgrimPlayerHistoryCacheParams::EventWindowId' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimLeaderboardIdParams
// 0x0018 (0x0018 - 0x0000)
struct FPilgrimLeaderboardIdParams final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimLeaderboardType                       LeaderboardType;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpotlightCompetition;                           // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpotlightGroup;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimLeaderboardIdParams) == 0x000008, "Wrong alignment on FPilgrimLeaderboardIdParams");
static_assert(sizeof(FPilgrimLeaderboardIdParams) == 0x000018, "Wrong size on FPilgrimLeaderboardIdParams");
static_assert(offsetof(FPilgrimLeaderboardIdParams, SongShortName) == 0x000000, "Member 'FPilgrimLeaderboardIdParams::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardIdParams, LeaderboardType) == 0x000004, "Member 'FPilgrimLeaderboardIdParams::LeaderboardType' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardIdParams, bIsSpotlightCompetition) == 0x000005, "Member 'FPilgrimLeaderboardIdParams::bIsSpotlightCompetition' has a wrong offset!");
static_assert(offsetof(FPilgrimLeaderboardIdParams, SpotlightGroup) == 0x000008, "Member 'FPilgrimLeaderboardIdParams::SpotlightGroup' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteGuitar
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteGuitar : public FPilgrimEvent_Midi_NoteBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteGuitar) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteGuitar");
static_assert(sizeof(FPilgrimEvent_Midi_NoteGuitar) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteGuitar");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteGuitar_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteGuitar_Start final : public FPilgrimEvent_Midi_NoteGuitar
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteGuitar_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteGuitar_Start");
static_assert(sizeof(FPilgrimEvent_Midi_NoteGuitar_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteGuitar_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteGuitar_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteGuitar_End final : public FPilgrimEvent_Midi_NoteGuitar
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteGuitar_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteGuitar_End");
static_assert(sizeof(FPilgrimEvent_Midi_NoteGuitar_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteGuitar_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteBass
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteBass : public FPilgrimEvent_Midi_NoteBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteBass) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteBass");
static_assert(sizeof(FPilgrimEvent_Midi_NoteBass) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteBass");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteBass_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteBass_Start final : public FPilgrimEvent_Midi_NoteBass
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteBass_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteBass_Start");
static_assert(sizeof(FPilgrimEvent_Midi_NoteBass_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteBass_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteBass_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteBass_End final : public FPilgrimEvent_Midi_NoteBass
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteBass_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteBass_End");
static_assert(sizeof(FPilgrimEvent_Midi_NoteBass_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteBass_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteVocals
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteVocals : public FPilgrimEvent_Midi_NoteBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteVocals) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteVocals");
static_assert(sizeof(FPilgrimEvent_Midi_NoteVocals) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteVocals");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteVocals_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteVocals_Start final : public FPilgrimEvent_Midi_NoteVocals
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteVocals_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteVocals_Start");
static_assert(sizeof(FPilgrimEvent_Midi_NoteVocals_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteVocals_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteVocals_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteVocals_End final : public FPilgrimEvent_Midi_NoteVocals
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteVocals_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteVocals_End");
static_assert(sizeof(FPilgrimEvent_Midi_NoteVocals_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteVocals_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteDrum
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteDrum : public FPilgrimEvent_Midi_NoteBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteDrum) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteDrum");
static_assert(sizeof(FPilgrimEvent_Midi_NoteDrum) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteDrum");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteDrum_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteDrum_Start final : public FPilgrimEvent_Midi_NoteDrum
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteDrum_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteDrum_Start");
static_assert(sizeof(FPilgrimEvent_Midi_NoteDrum_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteDrum_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteDrum_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteDrum_End final : public FPilgrimEvent_Midi_NoteDrum
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteDrum_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteDrum_End");
static_assert(sizeof(FPilgrimEvent_Midi_NoteDrum_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteDrum_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NoteEvents_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_NoteEvents_Start final : public FPilgrimEvent_Midi_NoteEvents
{
};
static_assert(alignof(FPilgrimEvent_Midi_NoteEvents_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_NoteEvents_Start");
static_assert(sizeof(FPilgrimEvent_Midi_NoteEvents_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_NoteEvents_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextGuitar
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextGuitar : public FPilgrimEvent_Midi_TextBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextGuitar) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextGuitar");
static_assert(sizeof(FPilgrimEvent_Midi_TextGuitar) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextGuitar");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextGuitar_Start
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextGuitar_Start final : public FPilgrimEvent_Midi_TextGuitar
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextGuitar_Start) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextGuitar_Start");
static_assert(sizeof(FPilgrimEvent_Midi_TextGuitar_Start) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextGuitar_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextBass
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextBass : public FPilgrimEvent_Midi_TextBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextBass) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextBass");
static_assert(sizeof(FPilgrimEvent_Midi_TextBass) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextBass");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextBass_Start
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextBass_Start final : public FPilgrimEvent_Midi_TextBass
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextBass_Start) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextBass_Start");
static_assert(sizeof(FPilgrimEvent_Midi_TextBass_Start) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextBass_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_TextEvents_Start
// 0x0000 (0x0038 - 0x0038)
struct FPilgrimEvent_Midi_TextEvents_Start final : public FPilgrimEvent_Midi_TextEvents
{
};
static_assert(alignof(FPilgrimEvent_Midi_TextEvents_Start) == 0x000008, "Wrong alignment on FPilgrimEvent_Midi_TextEvents_Start");
static_assert(sizeof(FPilgrimEvent_Midi_TextEvents_Start) == 0x000038, "Wrong size on FPilgrimEvent_Midi_TextEvents_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeGuitar
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeGuitar : public FPilgrimEvent_Midi_StrikeBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeGuitar) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeGuitar");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeGuitar) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeGuitar");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeGuitar_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeGuitar_Start final : public FPilgrimEvent_Midi_StrikeGuitar
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeGuitar_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeGuitar_Start");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeGuitar_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeGuitar_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeGuitar_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeGuitar_End final : public FPilgrimEvent_Midi_StrikeGuitar
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeGuitar_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeGuitar_End");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeGuitar_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeGuitar_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeBass_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeBass_End final : public FPilgrimEvent_Midi_StrikeBass
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeBass_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeBass_End");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeBass_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeBass_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimTrackItemKey
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FPilgrimTrackItemKey final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimTrackItemKey) == 0x000004, "Wrong alignment on FPilgrimTrackItemKey");
static_assert(sizeof(FPilgrimTrackItemKey) == 0x000008, "Wrong size on FPilgrimTrackItemKey");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeVocals
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeVocals : public FPilgrimEvent_Midi_StrikeBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeVocals) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeVocals");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeVocals) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeVocals");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeVocals_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeVocals_Start final : public FPilgrimEvent_Midi_StrikeVocals
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeVocals_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeVocals_Start");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeVocals_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeVocals_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimVerbMessage_ScoreEvent
// 0x0028 (0x0158 - 0x0130)
struct FPilgrimVerbMessage_ScoreEvent final : public FPilgrimVerbMessageBase
{
public:
	int32                                         CurrentScore;                                      // 0x0130(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DeltaScore;                                        // 0x0134(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentStars;                                      // 0x0138(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DeltaStars;                                        // 0x013C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentChordScore;                                 // 0x0140(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DeltaChordScore;                                   // 0x0144(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentSustainScore;                               // 0x0148(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DeltaSustainScore;                                 // 0x014C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsInOverdrive;                                    // 0x0150(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsBandScore;                                      // 0x0151(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimVerbMessage_ScoreEvent) == 0x000008, "Wrong alignment on FPilgrimVerbMessage_ScoreEvent");
static_assert(sizeof(FPilgrimVerbMessage_ScoreEvent) == 0x000158, "Wrong size on FPilgrimVerbMessage_ScoreEvent");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, CurrentScore) == 0x000130, "Member 'FPilgrimVerbMessage_ScoreEvent::CurrentScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, DeltaScore) == 0x000134, "Member 'FPilgrimVerbMessage_ScoreEvent::DeltaScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, CurrentStars) == 0x000138, "Member 'FPilgrimVerbMessage_ScoreEvent::CurrentStars' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, DeltaStars) == 0x00013C, "Member 'FPilgrimVerbMessage_ScoreEvent::DeltaStars' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, CurrentChordScore) == 0x000140, "Member 'FPilgrimVerbMessage_ScoreEvent::CurrentChordScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, DeltaChordScore) == 0x000144, "Member 'FPilgrimVerbMessage_ScoreEvent::DeltaChordScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, CurrentSustainScore) == 0x000148, "Member 'FPilgrimVerbMessage_ScoreEvent::CurrentSustainScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, DeltaSustainScore) == 0x00014C, "Member 'FPilgrimVerbMessage_ScoreEvent::DeltaSustainScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, bIsInOverdrive) == 0x000150, "Member 'FPilgrimVerbMessage_ScoreEvent::bIsInOverdrive' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_ScoreEvent, bIsBandScore) == 0x000151, "Member 'FPilgrimVerbMessage_ScoreEvent::bIsBandScore' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeVocals_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeVocals_End final : public FPilgrimEvent_Midi_StrikeVocals
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeVocals_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeVocals_End");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeVocals_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeVocals_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeDrum
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeDrum : public FPilgrimEvent_Midi_StrikeBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeDrum) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeDrum");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeDrum) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeDrum");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeDrum_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeDrum_Start final : public FPilgrimEvent_Midi_StrikeDrum
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeDrum_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeDrum_Start");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeDrum_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeDrum_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeDrum_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeDrum_End final : public FPilgrimEvent_Midi_StrikeDrum
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeDrum_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeDrum_End");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeDrum_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeDrum_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeEvents
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeEvents : public FPilgrimEvent_Midi_StrikeBase
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeEvents) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeEvents");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeEvents) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeEvents");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeEvents_Start
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeEvents_Start final : public FPilgrimEvent_Midi_StrikeEvents
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeEvents_Start) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeEvents_Start");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeEvents_Start) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeEvents_Start");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_StrikeEvents_End
// 0x0000 (0x0018 - 0x0018)
struct FPilgrimEvent_Midi_StrikeEvents_End final : public FPilgrimEvent_Midi_StrikeEvents
{
};
static_assert(alignof(FPilgrimEvent_Midi_StrikeEvents_End) == 0x000004, "Wrong alignment on FPilgrimEvent_Midi_StrikeEvents_End");
static_assert(sizeof(FPilgrimEvent_Midi_StrikeEvents_End) == 0x000018, "Wrong size on FPilgrimEvent_Midi_StrikeEvents_End");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Midi_NotifyBeginOutro
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_Midi_NotifyBeginOutro final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_Midi_NotifyBeginOutro) == 0x000001, "Wrong alignment on FPilgrimEvent_Midi_NotifyBeginOutro");
static_assert(sizeof(FPilgrimEvent_Midi_NotifyBeginOutro) == 0x000001, "Wrong size on FPilgrimEvent_Midi_NotifyBeginOutro");

// ScriptStruct PilgrimCoreRuntime.DifficultyInfo
// 0x0010 (0x0010 - 0x0000)
struct FDifficultyInfo final
{
public:
	TArray<struct FTrackItemInfo>                 GemsInProgress;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDifficultyInfo) == 0x000008, "Wrong alignment on FDifficultyInfo");
static_assert(sizeof(FDifficultyInfo) == 0x000010, "Wrong size on FDifficultyInfo");
static_assert(offsetof(FDifficultyInfo, GemsInProgress) == 0x000000, "Member 'FDifficultyInfo::GemsInProgress' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_MBI_Started
// 0x0000 (0x0008 - 0x0008)
struct FPilgrimEvent_MBI_Started final : public FPilgrimEvent_MBI_EventBase
{
};
static_assert(alignof(FPilgrimEvent_MBI_Started) == 0x000004, "Wrong alignment on FPilgrimEvent_MBI_Started");
static_assert(sizeof(FPilgrimEvent_MBI_Started) == 0x000008, "Wrong size on FPilgrimEvent_MBI_Started");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_MBI_Finished
// 0x0000 (0x0008 - 0x0008)
struct FPilgrimEvent_MBI_Finished final : public FPilgrimEvent_MBI_EventBase
{
};
static_assert(alignof(FPilgrimEvent_MBI_Finished) == 0x000004, "Wrong alignment on FPilgrimEvent_MBI_Finished");
static_assert(sizeof(FPilgrimEvent_MBI_Finished) == 0x000008, "Wrong size on FPilgrimEvent_MBI_Finished");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_MBI_ServerDecidedSongToPlay
// 0x0008 (0x0010 - 0x0008)
struct FPilgrimEvent_MBI_ServerDecidedSongToPlay final : public FPilgrimEvent_MBI_EventBase
{
public:
	class UPilgrimSongMetadata*                   SongToPlay;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_MBI_ServerDecidedSongToPlay) == 0x000008, "Wrong alignment on FPilgrimEvent_MBI_ServerDecidedSongToPlay");
static_assert(sizeof(FPilgrimEvent_MBI_ServerDecidedSongToPlay) == 0x000010, "Wrong size on FPilgrimEvent_MBI_ServerDecidedSongToPlay");
static_assert(offsetof(FPilgrimEvent_MBI_ServerDecidedSongToPlay, SongToPlay) == 0x000008, "Member 'FPilgrimEvent_MBI_ServerDecidedSongToPlay::SongToPlay' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_MBI_ServerInitializedScoring
// 0x0000 (0x0008 - 0x0008)
struct FPilgrimEvent_MBI_ServerInitializedScoring final : public FPilgrimEvent_MBI_EventBase
{
};
static_assert(alignof(FPilgrimEvent_MBI_ServerInitializedScoring) == 0x000004, "Wrong alignment on FPilgrimEvent_MBI_ServerInitializedScoring");
static_assert(sizeof(FPilgrimEvent_MBI_ServerInitializedScoring) == 0x000008, "Wrong size on FPilgrimEvent_MBI_ServerInitializedScoring");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_MBI_ClientUpdateLipSyncData
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimEvent_MBI_ClientUpdateLipSyncData final
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_MBI_ClientUpdateLipSyncData) == 0x000008, "Wrong alignment on FPilgrimEvent_MBI_ClientUpdateLipSyncData");
static_assert(sizeof(FPilgrimEvent_MBI_ClientUpdateLipSyncData) == 0x000008, "Wrong size on FPilgrimEvent_MBI_ClientUpdateLipSyncData");
static_assert(offsetof(FPilgrimEvent_MBI_ClientUpdateLipSyncData, AnimSequence) == 0x000000, "Member 'FPilgrimEvent_MBI_ClientUpdateLipSyncData::AnimSequence' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_MBI_SongLoaded
// 0x0010 (0x0018 - 0x0008)
struct FPilgrimEvent_MBI_SongLoaded final : public FPilgrimEvent_MBI_EventBase
{
public:
	class UPilgrimSongMetadata*                   LoadedSong;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongPlayMethod                        PlayMethod;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_MBI_SongLoaded) == 0x000008, "Wrong alignment on FPilgrimEvent_MBI_SongLoaded");
static_assert(sizeof(FPilgrimEvent_MBI_SongLoaded) == 0x000018, "Wrong size on FPilgrimEvent_MBI_SongLoaded");
static_assert(offsetof(FPilgrimEvent_MBI_SongLoaded, LoadedSong) == 0x000008, "Member 'FPilgrimEvent_MBI_SongLoaded::LoadedSong' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_MBI_SongLoaded, PlayMethod) == 0x000010, "Member 'FPilgrimEvent_MBI_SongLoaded::PlayMethod' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimGameInProgressOverdrive
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FPilgrimGameInProgressOverdrive final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGameInProgressOverdrive) == 0x000004, "Wrong alignment on FPilgrimGameInProgressOverdrive");
static_assert(sizeof(FPilgrimGameInProgressOverdrive) == 0x000010, "Wrong size on FPilgrimGameInProgressOverdrive");

// ScriptStruct PilgrimCoreRuntime.PilgrimRewindDetails
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FPilgrimRewindDetails final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimRewindDetails) == 0x000004, "Wrong alignment on FPilgrimRewindDetails");
static_assert(sizeof(FPilgrimRewindDetails) == 0x00000C, "Wrong size on FPilgrimRewindDetails");

// ScriptStruct PilgrimCoreRuntime.PilgrimGamePlayerProgressDelta
// 0x0054 (0x0054 - 0x0000)
struct alignas(0x04) FPilgrimGamePlayerProgressDelta final
{
public:
	uint8                                         Pad_0[0x54];                                       // 0x0000(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimGamePlayerProgressDelta) == 0x000004, "Wrong alignment on FPilgrimGamePlayerProgressDelta");
static_assert(sizeof(FPilgrimGamePlayerProgressDelta) == 0x000054, "Wrong size on FPilgrimGamePlayerProgressDelta");

// ScriptStruct PilgrimCoreRuntime.PilgrimObjectiveFilter_AccumulateStars
// 0x0008 (0x01B0 - 0x01A8)
struct FPilgrimObjectiveFilter_AccumulateStars final : public FPilgrimObjectiveFilterBase
{
public:
	EPilgrimAccumulateStarsMessageType            VerbType;                                          // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StarType;                                          // 0x01A9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimObjectiveFilter_AccumulateStars) == 0x000008, "Wrong alignment on FPilgrimObjectiveFilter_AccumulateStars");
static_assert(sizeof(FPilgrimObjectiveFilter_AccumulateStars) == 0x0001B0, "Wrong size on FPilgrimObjectiveFilter_AccumulateStars");
static_assert(offsetof(FPilgrimObjectiveFilter_AccumulateStars, VerbType) == 0x0001A8, "Member 'FPilgrimObjectiveFilter_AccumulateStars::VerbType' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_AccumulateStars, StarType) == 0x0001A9, "Member 'FPilgrimObjectiveFilter_AccumulateStars::StarType' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimObjectiveFilter_ScoreEvent
// 0x0090 (0x0238 - 0x01A8)
struct FPilgrimObjectiveFilter_ScoreEvent final : public FPilgrimObjectiveFilterBase
{
public:
	struct FInt32Range                            RequiredScore;                                     // 0x01A8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredStars;                                     // 0x01B8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredCurrentScore;                              // 0x01C8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredCurrentStars;                              // 0x01D8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredCurrentSustainScore;                       // 0x01E8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredDeltaSustainScore;                         // 0x01F8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredCurrentChordScore;                         // 0x0208(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredDeltaChordScore;                           // 0x0218(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequireSustain;                                    // 0x0228(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequireChord;                                      // 0x0229(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequireOverdrive;                                  // 0x022A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimScoreEventMessageType                 ScoreType;                                         // 0x022B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimScoreEventMessageIncrementType        IncrementType;                                     // 0x022C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IncrementValue;                                    // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimObjectiveFilter_ScoreEvent) == 0x000008, "Wrong alignment on FPilgrimObjectiveFilter_ScoreEvent");
static_assert(sizeof(FPilgrimObjectiveFilter_ScoreEvent) == 0x000238, "Wrong size on FPilgrimObjectiveFilter_ScoreEvent");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequiredScore) == 0x0001A8, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequiredScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequiredStars) == 0x0001B8, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequiredStars' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequiredCurrentScore) == 0x0001C8, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequiredCurrentScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequiredCurrentStars) == 0x0001D8, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequiredCurrentStars' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequiredCurrentSustainScore) == 0x0001E8, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequiredCurrentSustainScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequiredDeltaSustainScore) == 0x0001F8, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequiredDeltaSustainScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequiredCurrentChordScore) == 0x000208, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequiredCurrentChordScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequiredDeltaChordScore) == 0x000218, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequiredDeltaChordScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequireSustain) == 0x000228, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequireSustain' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequireChord) == 0x000229, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequireChord' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, RequireOverdrive) == 0x00022A, "Member 'FPilgrimObjectiveFilter_ScoreEvent::RequireOverdrive' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, ScoreType) == 0x00022B, "Member 'FPilgrimObjectiveFilter_ScoreEvent::ScoreType' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, IncrementType) == 0x00022C, "Member 'FPilgrimObjectiveFilter_ScoreEvent::IncrementType' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_ScoreEvent, IncrementValue) == 0x000230, "Member 'FPilgrimObjectiveFilter_ScoreEvent::IncrementValue' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimObjectiveFilter_SetlistComplete
// 0x0050 (0x01F8 - 0x01A8)
struct FPilgrimObjectiveFilter_SetlistComplete final : public FPilgrimObjectiveFilterBase
{
public:
	struct FFloatRange                            RequiredSoloScore;                                 // 0x01A8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredSoloStars;                                 // 0x01B8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            RequiredBandScore;                                 // 0x01C8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredBandStars;                                 // 0x01D8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredNumSongs;                                  // 0x01E8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimObjectiveFilter_SetlistComplete) == 0x000008, "Wrong alignment on FPilgrimObjectiveFilter_SetlistComplete");
static_assert(sizeof(FPilgrimObjectiveFilter_SetlistComplete) == 0x0001F8, "Wrong size on FPilgrimObjectiveFilter_SetlistComplete");
static_assert(offsetof(FPilgrimObjectiveFilter_SetlistComplete, RequiredSoloScore) == 0x0001A8, "Member 'FPilgrimObjectiveFilter_SetlistComplete::RequiredSoloScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SetlistComplete, RequiredSoloStars) == 0x0001B8, "Member 'FPilgrimObjectiveFilter_SetlistComplete::RequiredSoloStars' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SetlistComplete, RequiredBandScore) == 0x0001C8, "Member 'FPilgrimObjectiveFilter_SetlistComplete::RequiredBandScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SetlistComplete, RequiredBandStars) == 0x0001D8, "Member 'FPilgrimObjectiveFilter_SetlistComplete::RequiredBandStars' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SetlistComplete, RequiredNumSongs) == 0x0001E8, "Member 'FPilgrimObjectiveFilter_SetlistComplete::RequiredNumSongs' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimObjectiveFilter_SongCompleted
// 0x0080 (0x0228 - 0x01A8)
struct FPilgrimObjectiveFilter_SongCompleted final : public FPilgrimObjectiveFilterBase
{
public:
	struct FFloatRange                            RequiredSoloScore;                                 // 0x01A8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredSoloStars;                                 // 0x01B8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiredGoldSoloStars;                            // 0x01C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            RequiredBandScore;                                 // 0x01CC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredBandStars;                                 // 0x01DC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiredGoldBandStars;                            // 0x01EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            RequiredNoteAccuracy;                              // 0x01F0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComboType                                    RequiredComboType;                                 // 0x0200(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRequiredComboType;                             // 0x0201(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            RequiredOverdriveTime;                             // 0x0204(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            RequiredPercentPerfect;                            // 0x0214(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimObjectiveFilter_SongCompleted) == 0x000008, "Wrong alignment on FPilgrimObjectiveFilter_SongCompleted");
static_assert(sizeof(FPilgrimObjectiveFilter_SongCompleted) == 0x000228, "Wrong size on FPilgrimObjectiveFilter_SongCompleted");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, RequiredSoloScore) == 0x0001A8, "Member 'FPilgrimObjectiveFilter_SongCompleted::RequiredSoloScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, RequiredSoloStars) == 0x0001B8, "Member 'FPilgrimObjectiveFilter_SongCompleted::RequiredSoloStars' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, bRequiredGoldSoloStars) == 0x0001C8, "Member 'FPilgrimObjectiveFilter_SongCompleted::bRequiredGoldSoloStars' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, RequiredBandScore) == 0x0001CC, "Member 'FPilgrimObjectiveFilter_SongCompleted::RequiredBandScore' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, RequiredBandStars) == 0x0001DC, "Member 'FPilgrimObjectiveFilter_SongCompleted::RequiredBandStars' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, bRequiredGoldBandStars) == 0x0001EC, "Member 'FPilgrimObjectiveFilter_SongCompleted::bRequiredGoldBandStars' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, RequiredNoteAccuracy) == 0x0001F0, "Member 'FPilgrimObjectiveFilter_SongCompleted::RequiredNoteAccuracy' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, RequiredComboType) == 0x000200, "Member 'FPilgrimObjectiveFilter_SongCompleted::RequiredComboType' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, bUseRequiredComboType) == 0x000201, "Member 'FPilgrimObjectiveFilter_SongCompleted::bUseRequiredComboType' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, RequiredOverdriveTime) == 0x000204, "Member 'FPilgrimObjectiveFilter_SongCompleted::RequiredOverdriveTime' has a wrong offset!");
static_assert(offsetof(FPilgrimObjectiveFilter_SongCompleted, RequiredPercentPerfect) == 0x000214, "Member 'FPilgrimObjectiveFilter_SongCompleted::RequiredPercentPerfect' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimObjectiveFilter_SongStarted
// 0x0000 (0x01A8 - 0x01A8)
struct FPilgrimObjectiveFilter_SongStarted final : public FPilgrimObjectiveFilterBase
{
};
static_assert(alignof(FPilgrimObjectiveFilter_SongStarted) == 0x000008, "Wrong alignment on FPilgrimObjectiveFilter_SongStarted");
static_assert(sizeof(FPilgrimObjectiveFilter_SongStarted) == 0x0001A8, "Wrong size on FPilgrimObjectiveFilter_SongStarted");

// ScriptStruct PilgrimCoreRuntime.PilgrimPerformanceTrackerTriggerData
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FPilgrimPerformanceTrackerTriggerData final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimPerformanceTrackerTriggerData) == 0x000004, "Wrong alignment on FPilgrimPerformanceTrackerTriggerData");
static_assert(sizeof(FPilgrimPerformanceTrackerTriggerData) == 0x00001C, "Wrong size on FPilgrimPerformanceTrackerTriggerData");

// ScriptStruct PilgrimCoreRuntime.PilgrimPerformanceTrackerSampleData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPilgrimPerformanceTrackerSampleData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimPerformanceTrackerSampleData) == 0x000008, "Wrong alignment on FPilgrimPerformanceTrackerSampleData");
static_assert(sizeof(FPilgrimPerformanceTrackerSampleData) == 0x000018, "Wrong size on FPilgrimPerformanceTrackerSampleData");

// ScriptStruct PilgrimCoreRuntime.PilgrimPerformanceTrackerData
// 0x0120 (0x0120 - 0x0000)
struct alignas(0x08) FPilgrimPerformanceTrackerData final
{
public:
	uint8                                         Pad_0[0x120];                                      // 0x0000(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimPerformanceTrackerData) == 0x000008, "Wrong alignment on FPilgrimPerformanceTrackerData");
static_assert(sizeof(FPilgrimPerformanceTrackerData) == 0x000120, "Wrong size on FPilgrimPerformanceTrackerData");

// ScriptStruct PilgrimCoreRuntime.PilgrimDuelInfo
// 0x0040 (0x0040 - 0x0000)
struct FPilgrimDuelInfo final
{
public:
	struct FGameplayTag                           EventMessage;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerPawn>         Pawn;                                              // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OriginalLocation;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OriginalRotation;                                  // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimDuelInfo) == 0x000008, "Wrong alignment on FPilgrimDuelInfo");
static_assert(sizeof(FPilgrimDuelInfo) == 0x000040, "Wrong size on FPilgrimDuelInfo");
static_assert(offsetof(FPilgrimDuelInfo, EventMessage) == 0x000000, "Member 'FPilgrimDuelInfo::EventMessage' has a wrong offset!");
static_assert(offsetof(FPilgrimDuelInfo, Pawn) == 0x000004, "Member 'FPilgrimDuelInfo::Pawn' has a wrong offset!");
static_assert(offsetof(FPilgrimDuelInfo, OriginalLocation) == 0x000010, "Member 'FPilgrimDuelInfo::OriginalLocation' has a wrong offset!");
static_assert(offsetof(FPilgrimDuelInfo, OriginalRotation) == 0x000028, "Member 'FPilgrimDuelInfo::OriginalRotation' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEventMessageData
// 0x0088 (0x0088 - 0x0000)
struct FPilgrimEventMessageData final
{
public:
	struct FGameplayTag                           EventMessage;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimDuelInfo                       Challenger;                                        // 0x0008(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPilgrimDuelInfo                       Challenged;                                        // 0x0048(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEventMessageData) == 0x000008, "Wrong alignment on FPilgrimEventMessageData");
static_assert(sizeof(FPilgrimEventMessageData) == 0x000088, "Wrong size on FPilgrimEventMessageData");
static_assert(offsetof(FPilgrimEventMessageData, EventMessage) == 0x000000, "Member 'FPilgrimEventMessageData::EventMessage' has a wrong offset!");
static_assert(offsetof(FPilgrimEventMessageData, Challenger) == 0x000008, "Member 'FPilgrimEventMessageData::Challenger' has a wrong offset!");
static_assert(offsetof(FPilgrimEventMessageData, Challenged) == 0x000048, "Member 'FPilgrimEventMessageData::Challenged' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimPresetIndices
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FPilgrimPresetIndices final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimPresetIndices) == 0x000004, "Wrong alignment on FPilgrimPresetIndices");
static_assert(sizeof(FPilgrimPresetIndices) == 0x000008, "Wrong size on FPilgrimPresetIndices");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PlayerState_DifficultyChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_PlayerState_DifficultyChanged final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        NewSongDifficulty;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        PrevSongDifficulty;                                // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_PlayerState_DifficultyChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_PlayerState_DifficultyChanged");
static_assert(sizeof(FPilgrimEvent_PlayerState_DifficultyChanged) == 0x000010, "Wrong size on FPilgrimEvent_PlayerState_DifficultyChanged");
static_assert(offsetof(FPilgrimEvent_PlayerState_DifficultyChanged, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_PlayerState_DifficultyChanged::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_DifficultyChanged, NewSongDifficulty) == 0x000008, "Member 'FPilgrimEvent_PlayerState_DifficultyChanged::NewSongDifficulty' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_DifficultyChanged, PrevSongDifficulty) == 0x000009, "Member 'FPilgrimEvent_PlayerState_DifficultyChanged::PrevSongDifficulty' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PlayerState_InstrumentChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_PlayerState_InstrumentChanged final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             NewInstrumentChoice;                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             PrevInstrumentChoice;                              // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_PlayerState_InstrumentChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_PlayerState_InstrumentChanged");
static_assert(sizeof(FPilgrimEvent_PlayerState_InstrumentChanged) == 0x000010, "Wrong size on FPilgrimEvent_PlayerState_InstrumentChanged");
static_assert(offsetof(FPilgrimEvent_PlayerState_InstrumentChanged, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_PlayerState_InstrumentChanged::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_InstrumentChanged, NewInstrumentChoice) == 0x000008, "Member 'FPilgrimEvent_PlayerState_InstrumentChanged::NewInstrumentChoice' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_InstrumentChanged, PrevInstrumentChoice) == 0x000009, "Member 'FPilgrimEvent_PlayerState_InstrumentChanged::PrevInstrumentChoice' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PlayerState_SongVoteChanged
// 0x0018 (0x0018 - 0x0000)
struct FPilgrimEvent_PlayerState_SongVoteChanged final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimSongMetadata*                   NewSongVote;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimSongMetadata*                   PrevSongVote;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_PlayerState_SongVoteChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_PlayerState_SongVoteChanged");
static_assert(sizeof(FPilgrimEvent_PlayerState_SongVoteChanged) == 0x000018, "Wrong size on FPilgrimEvent_PlayerState_SongVoteChanged");
static_assert(offsetof(FPilgrimEvent_PlayerState_SongVoteChanged, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_PlayerState_SongVoteChanged::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_SongVoteChanged, NewSongVote) == 0x000008, "Member 'FPilgrimEvent_PlayerState_SongVoteChanged::NewSongVote' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_SongVoteChanged, PrevSongVote) == 0x000010, "Member 'FPilgrimEvent_PlayerState_SongVoteChanged::PrevSongVote' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PlayerState_HighscoreChanged
// 0x0128 (0x0128 - 0x0000)
struct FPilgrimEvent_PlayerState_HighscoreChanged final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimPersonalBestResultRpl          NewHighscore;                                      // 0x0008(0x0090)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPilgrimPersonalBestResultRpl          PrevHighscore;                                     // 0x0098(0x0090)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_PlayerState_HighscoreChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_PlayerState_HighscoreChanged");
static_assert(sizeof(FPilgrimEvent_PlayerState_HighscoreChanged) == 0x000128, "Wrong size on FPilgrimEvent_PlayerState_HighscoreChanged");
static_assert(offsetof(FPilgrimEvent_PlayerState_HighscoreChanged, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_PlayerState_HighscoreChanged::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_HighscoreChanged, NewHighscore) == 0x000008, "Member 'FPilgrimEvent_PlayerState_HighscoreChanged::NewHighscore' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_HighscoreChanged, PrevHighscore) == 0x000098, "Member 'FPilgrimEvent_PlayerState_HighscoreChanged::PrevHighscore' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PlayerState_NewHighscore
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_PlayerState_NewHighscore final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimPersonalBestType                      BestType;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_PlayerState_NewHighscore) == 0x000008, "Wrong alignment on FPilgrimEvent_PlayerState_NewHighscore");
static_assert(sizeof(FPilgrimEvent_PlayerState_NewHighscore) == 0x000010, "Wrong size on FPilgrimEvent_PlayerState_NewHighscore");
static_assert(offsetof(FPilgrimEvent_PlayerState_NewHighscore, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_PlayerState_NewHighscore::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_NewHighscore, Score) == 0x000008, "Member 'FPilgrimEvent_PlayerState_NewHighscore::Score' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_PlayerState_NewHighscore, BestType) == 0x00000C, "Member 'FPilgrimEvent_PlayerState_NewHighscore::BestType' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_StreakChanged
// 0x000C (0x000C - 0x0000)
struct FPilgrimEvent_Scoring_StreakChanged final
{
public:
	int32                                         CurrentStreak;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousStreak;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStreak;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Scoring_StreakChanged) == 0x000004, "Wrong alignment on FPilgrimEvent_Scoring_StreakChanged");
static_assert(sizeof(FPilgrimEvent_Scoring_StreakChanged) == 0x00000C, "Wrong size on FPilgrimEvent_Scoring_StreakChanged");
static_assert(offsetof(FPilgrimEvent_Scoring_StreakChanged, CurrentStreak) == 0x000000, "Member 'FPilgrimEvent_Scoring_StreakChanged::CurrentStreak' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_StreakChanged, PreviousStreak) == 0x000004, "Member 'FPilgrimEvent_Scoring_StreakChanged::PreviousStreak' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_StreakChanged, MaxStreak) == 0x000008, "Member 'FPilgrimEvent_Scoring_StreakChanged::MaxStreak' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_StarChanged
// 0x000C (0x000C - 0x0000)
struct FPilgrimEvent_Scoring_StarChanged final
{
public:
	int32                                         CurrentStar;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousStar;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStar;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Scoring_StarChanged) == 0x000004, "Wrong alignment on FPilgrimEvent_Scoring_StarChanged");
static_assert(sizeof(FPilgrimEvent_Scoring_StarChanged) == 0x00000C, "Wrong size on FPilgrimEvent_Scoring_StarChanged");
static_assert(offsetof(FPilgrimEvent_Scoring_StarChanged, CurrentStar) == 0x000000, "Member 'FPilgrimEvent_Scoring_StarChanged::CurrentStar' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_StarChanged, PreviousStar) == 0x000004, "Member 'FPilgrimEvent_Scoring_StarChanged::PreviousStar' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_StarChanged, MaxStar) == 0x000008, "Member 'FPilgrimEvent_Scoring_StarChanged::MaxStar' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_MaxStreakStateChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_Scoring_MaxStreakStateChanged final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAtMaxStreak;                                    // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_Scoring_MaxStreakStateChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_Scoring_MaxStreakStateChanged");
static_assert(sizeof(FPilgrimEvent_Scoring_MaxStreakStateChanged) == 0x000010, "Wrong size on FPilgrimEvent_Scoring_MaxStreakStateChanged");
static_assert(offsetof(FPilgrimEvent_Scoring_MaxStreakStateChanged, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_Scoring_MaxStreakStateChanged::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_MaxStreakStateChanged, PlayerIndex) == 0x000008, "Member 'FPilgrimEvent_Scoring_MaxStreakStateChanged::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_MaxStreakStateChanged, bIsAtMaxStreak) == 0x00000C, "Member 'FPilgrimEvent_Scoring_MaxStreakStateChanged::bIsAtMaxStreak' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_OverdriveReady
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_Scoring_OverdriveReady final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_Scoring_OverdriveReady) == 0x000001, "Wrong alignment on FPilgrimEvent_Scoring_OverdriveReady");
static_assert(sizeof(FPilgrimEvent_Scoring_OverdriveReady) == 0x000001, "Wrong size on FPilgrimEvent_Scoring_OverdriveReady");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_OverdriveActiveChanged
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_Scoring_OverdriveActiveChanged final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           DeployingPlayer;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Scoring_OverdriveActiveChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_Scoring_OverdriveActiveChanged");
static_assert(sizeof(FPilgrimEvent_Scoring_OverdriveActiveChanged) == 0x000010, "Wrong size on FPilgrimEvent_Scoring_OverdriveActiveChanged");
static_assert(offsetof(FPilgrimEvent_Scoring_OverdriveActiveChanged, IsActive) == 0x000000, "Member 'FPilgrimEvent_Scoring_OverdriveActiveChanged::IsActive' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_OverdriveActiveChanged, DeployingPlayer) == 0x000008, "Member 'FPilgrimEvent_Scoring_OverdriveActiveChanged::DeployingPlayer' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_FinishedOverdriveSection
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_Scoring_FinishedOverdriveSection final
{
public:
	bool                                          bIsSuccess;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Scoring_FinishedOverdriveSection) == 0x000001, "Wrong alignment on FPilgrimEvent_Scoring_FinishedOverdriveSection");
static_assert(sizeof(FPilgrimEvent_Scoring_FinishedOverdriveSection) == 0x000001, "Wrong size on FPilgrimEvent_Scoring_FinishedOverdriveSection");
static_assert(offsetof(FPilgrimEvent_Scoring_FinishedOverdriveSection, bIsSuccess) == 0x000000, "Member 'FPilgrimEvent_Scoring_FinishedOverdriveSection::bIsSuccess' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_PerformanceDataResult
// 0x00A0 (0x00A0 - 0x0000)
struct FPilgrimEvent_Scoring_PerformanceDataResult final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TotalOffset;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSamples;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalGems;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalHits;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalMisses;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPasses;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNotes;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardDeviation;                                 // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageOffset;                                     // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStreak;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInOverdriveMs;                                 // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            HistogramSamples;                                  // 0x0040(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 AccuracyTierCounts;                                // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Scoring_PerformanceDataResult) == 0x000008, "Wrong alignment on FPilgrimEvent_Scoring_PerformanceDataResult");
static_assert(sizeof(FPilgrimEvent_Scoring_PerformanceDataResult) == 0x0000A0, "Wrong size on FPilgrimEvent_Scoring_PerformanceDataResult");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, TotalOffset) == 0x000008, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::TotalOffset' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, TotalSamples) == 0x000010, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::TotalSamples' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, TotalGems) == 0x000014, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::TotalGems' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, TotalHits) == 0x000018, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::TotalHits' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, TotalMisses) == 0x00001C, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::TotalMisses' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, TotalPasses) == 0x000020, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::TotalPasses' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, TotalNotes) == 0x000024, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::TotalNotes' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, MaxValue) == 0x000028, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::MaxValue' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, MinValue) == 0x00002C, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::MinValue' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, StandardDeviation) == 0x000030, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::StandardDeviation' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, AverageOffset) == 0x000034, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::AverageOffset' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, MaxStreak) == 0x000038, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::MaxStreak' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, TimeInOverdriveMs) == 0x00003C, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::TimeInOverdriveMs' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, HistogramSamples) == 0x000040, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::HistogramSamples' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_PerformanceDataResult, AccuracyTierCounts) == 0x000090, "Member 'FPilgrimEvent_Scoring_PerformanceDataResult::AccuracyTierCounts' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_ScoreChanged
// 0x0020 (0x0020 - 0x0000)
struct FPilgrimEvent_Scoring_ScoreChanged final
{
public:
	class AFortPlayerPawn*                        ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoloDelta;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BandDelta;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoloScore;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BandScore;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_Scoring_ScoreChanged) == 0x000008, "Wrong alignment on FPilgrimEvent_Scoring_ScoreChanged");
static_assert(sizeof(FPilgrimEvent_Scoring_ScoreChanged) == 0x000020, "Wrong size on FPilgrimEvent_Scoring_ScoreChanged");
static_assert(offsetof(FPilgrimEvent_Scoring_ScoreChanged, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_Scoring_ScoreChanged::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_ScoreChanged, PlayerIndex) == 0x000008, "Member 'FPilgrimEvent_Scoring_ScoreChanged::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_ScoreChanged, SoloDelta) == 0x00000C, "Member 'FPilgrimEvent_Scoring_ScoreChanged::SoloDelta' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_ScoreChanged, BandDelta) == 0x000010, "Member 'FPilgrimEvent_Scoring_ScoreChanged::BandDelta' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_ScoreChanged, SoloScore) == 0x000014, "Member 'FPilgrimEvent_Scoring_ScoreChanged::SoloScore' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_ScoreChanged, BandScore) == 0x000018, "Member 'FPilgrimEvent_Scoring_ScoreChanged::BandScore' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_AutoplayActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_Scoring_AutoplayActiveChanged final
{
public:
	bool                                          bIsAutoplayActive;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Scoring_AutoplayActiveChanged) == 0x000001, "Wrong alignment on FPilgrimEvent_Scoring_AutoplayActiveChanged");
static_assert(sizeof(FPilgrimEvent_Scoring_AutoplayActiveChanged) == 0x000001, "Wrong size on FPilgrimEvent_Scoring_AutoplayActiveChanged");
static_assert(offsetof(FPilgrimEvent_Scoring_AutoplayActiveChanged, bIsAutoplayActive) == 0x000000, "Member 'FPilgrimEvent_Scoring_AutoplayActiveChanged::bIsAutoplayActive' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_GemScored
// 0x0070 (0x0070 - 0x0000)
struct FPilgrimEvent_Scoring_GemScored final
{
public:
	class AFortPlayerState*                       ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPilgrimGemHitAccuracy                 Accuracy;                                          // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FTrackItemInfo                         Gem;                                               // 0x0038(0x0030)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BaseScore;                                         // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusScore;                                        // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Scoring_GemScored) == 0x000008, "Wrong alignment on FPilgrimEvent_Scoring_GemScored");
static_assert(sizeof(FPilgrimEvent_Scoring_GemScored) == 0x000070, "Wrong size on FPilgrimEvent_Scoring_GemScored");
static_assert(offsetof(FPilgrimEvent_Scoring_GemScored, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_Scoring_GemScored::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_GemScored, Accuracy) == 0x000008, "Member 'FPilgrimEvent_Scoring_GemScored::Accuracy' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_GemScored, Gem) == 0x000038, "Member 'FPilgrimEvent_Scoring_GemScored::Gem' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_GemScored, BaseScore) == 0x000068, "Member 'FPilgrimEvent_Scoring_GemScored::BaseScore' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_GemScored, BonusScore) == 0x00006C, "Member 'FPilgrimEvent_Scoring_GemScored::BonusScore' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_LocalPlayerMiss
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_LocalPlayerMiss final
{
public:
	class AFortPlayerState*                       ForPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             CurrentTrackType;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_LocalPlayerMiss) == 0x000008, "Wrong alignment on FPilgrimEvent_LocalPlayerMiss");
static_assert(sizeof(FPilgrimEvent_LocalPlayerMiss) == 0x000010, "Wrong size on FPilgrimEvent_LocalPlayerMiss");
static_assert(offsetof(FPilgrimEvent_LocalPlayerMiss, ForPlayer) == 0x000000, "Member 'FPilgrimEvent_LocalPlayerMiss::ForPlayer' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_LocalPlayerMiss, CurrentTrackType) == 0x000008, "Member 'FPilgrimEvent_LocalPlayerMiss::CurrentTrackType' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_Scoring_OnMistake
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimEvent_Scoring_OnMistake final
{
public:
	EScoringMistakeType                           MistakeType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_Scoring_OnMistake) == 0x000008, "Wrong alignment on FPilgrimEvent_Scoring_OnMistake");
static_assert(sizeof(FPilgrimEvent_Scoring_OnMistake) == 0x000010, "Wrong size on FPilgrimEvent_Scoring_OnMistake");
static_assert(offsetof(FPilgrimEvent_Scoring_OnMistake, MistakeType) == 0x000000, "Member 'FPilgrimEvent_Scoring_OnMistake::MistakeType' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_Scoring_OnMistake, Player) == 0x000008, "Member 'FPilgrimEvent_Scoring_OnMistake::Player' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_ScoringModifierAdded
// 0x0020 (0x0020 - 0x0000)
struct FPilgrimEvent_ScoringModifierAdded final
{
public:
	class UPilgrimScoringModifier*                ScoringModifier;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPilgrimScoringModifier*>        ScoringModifiers;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EPilgrimScoringTarget                         Target;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_ScoringModifierAdded) == 0x000008, "Wrong alignment on FPilgrimEvent_ScoringModifierAdded");
static_assert(sizeof(FPilgrimEvent_ScoringModifierAdded) == 0x000020, "Wrong size on FPilgrimEvent_ScoringModifierAdded");
static_assert(offsetof(FPilgrimEvent_ScoringModifierAdded, ScoringModifier) == 0x000000, "Member 'FPilgrimEvent_ScoringModifierAdded::ScoringModifier' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_ScoringModifierAdded, ScoringModifiers) == 0x000008, "Member 'FPilgrimEvent_ScoringModifierAdded::ScoringModifiers' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_ScoringModifierAdded, Target) == 0x000018, "Member 'FPilgrimEvent_ScoringModifierAdded::Target' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_ScoringModifierRemoved
// 0x0020 (0x0020 - 0x0000)
struct FPilgrimEvent_ScoringModifierRemoved final
{
public:
	class UPilgrimScoringModifier*                ScoringModifier;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPilgrimScoringModifier*>        RemainingScoringModifiers;                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EPilgrimScoringTarget                         Target;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_ScoringModifierRemoved) == 0x000008, "Wrong alignment on FPilgrimEvent_ScoringModifierRemoved");
static_assert(sizeof(FPilgrimEvent_ScoringModifierRemoved) == 0x000020, "Wrong size on FPilgrimEvent_ScoringModifierRemoved");
static_assert(offsetof(FPilgrimEvent_ScoringModifierRemoved, ScoringModifier) == 0x000000, "Member 'FPilgrimEvent_ScoringModifierRemoved::ScoringModifier' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_ScoringModifierRemoved, RemainingScoringModifiers) == 0x000008, "Member 'FPilgrimEvent_ScoringModifierRemoved::RemainingScoringModifiers' has a wrong offset!");
static_assert(offsetof(FPilgrimEvent_ScoringModifierRemoved, Target) == 0x000018, "Member 'FPilgrimEvent_ScoringModifierRemoved::Target' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PilgrimSettings_TrackBackgroundOpacityChanged
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_PilgrimSettings_TrackBackgroundOpacityChanged final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimEvent_PilgrimSettings_TrackBackgroundOpacityChanged) == 0x000001, "Wrong alignment on FPilgrimEvent_PilgrimSettings_TrackBackgroundOpacityChanged");
static_assert(sizeof(FPilgrimEvent_PilgrimSettings_TrackBackgroundOpacityChanged) == 0x000001, "Wrong size on FPilgrimEvent_PilgrimSettings_TrackBackgroundOpacityChanged");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_PilgrimSettings_UseAlternative5LaneTouchLayoutChanged
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimEvent_PilgrimSettings_UseAlternative5LaneTouchLayoutChanged final
{
public:
	bool                                          bUseAlternative5LaneTouchLayout;                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_PilgrimSettings_UseAlternative5LaneTouchLayoutChanged) == 0x000001, "Wrong alignment on FPilgrimEvent_PilgrimSettings_UseAlternative5LaneTouchLayoutChanged");
static_assert(sizeof(FPilgrimEvent_PilgrimSettings_UseAlternative5LaneTouchLayoutChanged) == 0x000001, "Wrong size on FPilgrimEvent_PilgrimSettings_UseAlternative5LaneTouchLayoutChanged");
static_assert(offsetof(FPilgrimEvent_PilgrimSettings_UseAlternative5LaneTouchLayoutChanged, bUseAlternative5LaneTouchLayout) == 0x000000, "Member 'FPilgrimEvent_PilgrimSettings_UseAlternative5LaneTouchLayoutChanged::bUseAlternative5LaneTouchLayout' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.RBTrackInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FRBTrackInfo final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRBTrackInfo) == 0x000008, "Wrong alignment on FRBTrackInfo");
static_assert(sizeof(FRBTrackInfo) == 0x000050, "Wrong size on FRBTrackInfo");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_SongLoading_Started
// 0x0004 (0x0004 - 0x0000)
struct FPilgrimEvent_SongLoading_Started final
{
public:
	class FName                                   Song;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_SongLoading_Started) == 0x000004, "Wrong alignment on FPilgrimEvent_SongLoading_Started");
static_assert(sizeof(FPilgrimEvent_SongLoading_Started) == 0x000004, "Wrong size on FPilgrimEvent_SongLoading_Started");
static_assert(offsetof(FPilgrimEvent_SongLoading_Started, Song) == 0x000000, "Member 'FPilgrimEvent_SongLoading_Started::Song' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimEvent_SongLoading_EveryoneFinished
// 0x0004 (0x0004 - 0x0000)
struct FPilgrimEvent_SongLoading_EveryoneFinished final
{
public:
	class FName                                   Song;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimEvent_SongLoading_EveryoneFinished) == 0x000004, "Wrong alignment on FPilgrimEvent_SongLoading_EveryoneFinished");
static_assert(sizeof(FPilgrimEvent_SongLoading_EveryoneFinished) == 0x000004, "Wrong size on FPilgrimEvent_SongLoading_EveryoneFinished");
static_assert(offsetof(FPilgrimEvent_SongLoading_EveryoneFinished, Song) == 0x000000, "Member 'FPilgrimEvent_SongLoading_EveryoneFinished::Song' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimSongPlaylistEntry
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimSongPlaylistEntry final
{
public:
	class UPilgrimSongMetadata*                   Song;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        SongDifficulty;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimSongPlaylistEntry) == 0x000008, "Wrong alignment on FPilgrimSongPlaylistEntry");
static_assert(sizeof(FPilgrimSongPlaylistEntry) == 0x000010, "Wrong size on FPilgrimSongPlaylistEntry");
static_assert(offsetof(FPilgrimSongPlaylistEntry, Song) == 0x000000, "Member 'FPilgrimSongPlaylistEntry::Song' has a wrong offset!");
static_assert(offsetof(FPilgrimSongPlaylistEntry, SongDifficulty) == 0x000008, "Member 'FPilgrimSongPlaylistEntry::SongDifficulty' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimSongSettings
// 0x0010 (0x0010 - 0x0000)
struct FPilgrimSongSettings final
{
public:
	class UPilgrimSongMetadata*                   Song;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SongShortName;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             TrackType;                                         // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimSongSettings) == 0x000008, "Wrong alignment on FPilgrimSongSettings");
static_assert(sizeof(FPilgrimSongSettings) == 0x000010, "Wrong size on FPilgrimSongSettings");
static_assert(offsetof(FPilgrimSongSettings, Song) == 0x000000, "Member 'FPilgrimSongSettings::Song' has a wrong offset!");
static_assert(offsetof(FPilgrimSongSettings, SongShortName) == 0x000008, "Member 'FPilgrimSongSettings::SongShortName' has a wrong offset!");
static_assert(offsetof(FPilgrimSongSettings, Difficulty) == 0x00000C, "Member 'FPilgrimSongSettings::Difficulty' has a wrong offset!");
static_assert(offsetof(FPilgrimSongSettings, TrackType) == 0x00000D, "Member 'FPilgrimSongSettings::TrackType' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimSongTime
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FPilgrimSongTime final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimSongTime) == 0x000004, "Wrong alignment on FPilgrimSongTime");
static_assert(sizeof(FPilgrimSongTime) == 0x000018, "Wrong size on FPilgrimSongTime");

// ScriptStruct PilgrimCoreRuntime.PilgrimStreakInfo
// 0x0008 (0x0008 - 0x0000)
struct FPilgrimStreakInfo final
{
public:
	int32                                         NotesCount;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageMultiplier;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimStreakInfo) == 0x000004, "Wrong alignment on FPilgrimStreakInfo");
static_assert(sizeof(FPilgrimStreakInfo) == 0x000008, "Wrong size on FPilgrimStreakInfo");
static_assert(offsetof(FPilgrimStreakInfo, NotesCount) == 0x000000, "Member 'FPilgrimStreakInfo::NotesCount' has a wrong offset!");
static_assert(offsetof(FPilgrimStreakInfo, DamageMultiplier) == 0x000004, "Member 'FPilgrimStreakInfo::DamageMultiplier' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimCoreToggleRenderTargetEvent
// 0x0001 (0x0001 - 0x0000)
struct FPilgrimCoreToggleRenderTargetEvent final
{
public:
	bool                                          bToggleRenderTargetOn;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPilgrimCoreToggleRenderTargetEvent) == 0x000001, "Wrong alignment on FPilgrimCoreToggleRenderTargetEvent");
static_assert(sizeof(FPilgrimCoreToggleRenderTargetEvent) == 0x000001, "Wrong size on FPilgrimCoreToggleRenderTargetEvent");
static_assert(offsetof(FPilgrimCoreToggleRenderTargetEvent, bToggleRenderTargetOn) == 0x000000, "Member 'FPilgrimCoreToggleRenderTargetEvent::bToggleRenderTargetOn' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.TrackSpawnParams
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x10) FTrackSpawnParams final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackSpawnParams) == 0x000010, "Wrong alignment on FTrackSpawnParams");
static_assert(sizeof(FTrackSpawnParams) == 0x0000B0, "Wrong size on FTrackSpawnParams");

// ScriptStruct PilgrimCoreRuntime.PilgrimVerbMessage_Note
// 0x0010 (0x0140 - 0x0130)
struct FPilgrimVerbMessage_Note final : public FPilgrimVerbMessageBase
{
public:
	bool                                          DidHit;                                            // 0x0130(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          DidPass;                                           // 0x0131(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          DidMiss;                                           // 0x0132(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsChord;                                           // 0x0133(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NoteStreak;                                        // 0x0134(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Multiplier;                                        // 0x0138(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeSinceLastNoteMS;                               // 0x013C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPilgrimVerbMessage_Note) == 0x000008, "Wrong alignment on FPilgrimVerbMessage_Note");
static_assert(sizeof(FPilgrimVerbMessage_Note) == 0x000140, "Wrong size on FPilgrimVerbMessage_Note");
static_assert(offsetof(FPilgrimVerbMessage_Note, DidHit) == 0x000130, "Member 'FPilgrimVerbMessage_Note::DidHit' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_Note, DidPass) == 0x000131, "Member 'FPilgrimVerbMessage_Note::DidPass' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_Note, DidMiss) == 0x000132, "Member 'FPilgrimVerbMessage_Note::DidMiss' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_Note, IsChord) == 0x000133, "Member 'FPilgrimVerbMessage_Note::IsChord' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_Note, NoteStreak) == 0x000134, "Member 'FPilgrimVerbMessage_Note::NoteStreak' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_Note, Multiplier) == 0x000138, "Member 'FPilgrimVerbMessage_Note::Multiplier' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_Note, TimeSinceLastNoteMS) == 0x00013C, "Member 'FPilgrimVerbMessage_Note::TimeSinceLastNoteMS' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimVerbMessage_SetlistComplete
// 0x0018 (0x0148 - 0x0130)
struct FPilgrimVerbMessage_SetlistComplete final : public FPilgrimVerbMessageBase
{
public:
	float                                         SoloScore;                                         // 0x0130(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BandScore;                                         // 0x0134(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SoloStars;                                         // 0x0138(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BandStars;                                         // 0x013C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumSongs;                                          // 0x0140(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimVerbMessage_SetlistComplete) == 0x000008, "Wrong alignment on FPilgrimVerbMessage_SetlistComplete");
static_assert(sizeof(FPilgrimVerbMessage_SetlistComplete) == 0x000148, "Wrong size on FPilgrimVerbMessage_SetlistComplete");
static_assert(offsetof(FPilgrimVerbMessage_SetlistComplete, SoloScore) == 0x000130, "Member 'FPilgrimVerbMessage_SetlistComplete::SoloScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SetlistComplete, BandScore) == 0x000134, "Member 'FPilgrimVerbMessage_SetlistComplete::BandScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SetlistComplete, SoloStars) == 0x000138, "Member 'FPilgrimVerbMessage_SetlistComplete::SoloStars' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SetlistComplete, BandStars) == 0x00013C, "Member 'FPilgrimVerbMessage_SetlistComplete::BandStars' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SetlistComplete, NumSongs) == 0x000140, "Member 'FPilgrimVerbMessage_SetlistComplete::NumSongs' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimVerbMessage_SongCompleted
// 0x0028 (0x0158 - 0x0130)
struct FPilgrimVerbMessage_SongCompleted final : public FPilgrimVerbMessageBase
{
public:
	float                                         SoloScore;                                         // 0x0130(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BandScore;                                         // 0x0134(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SoloStars;                                         // 0x0138(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BandStars;                                         // 0x013C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumPlayers;                                        // 0x0140(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NoteAccuracy;                                      // 0x0144(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OverdriveTime;                                     // 0x0148(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EComboType                                    ComboType;                                         // 0x014C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentPerfect;                                    // 0x0150(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPilgrimVerbMessage_SongCompleted) == 0x000008, "Wrong alignment on FPilgrimVerbMessage_SongCompleted");
static_assert(sizeof(FPilgrimVerbMessage_SongCompleted) == 0x000158, "Wrong size on FPilgrimVerbMessage_SongCompleted");
static_assert(offsetof(FPilgrimVerbMessage_SongCompleted, SoloScore) == 0x000130, "Member 'FPilgrimVerbMessage_SongCompleted::SoloScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SongCompleted, BandScore) == 0x000134, "Member 'FPilgrimVerbMessage_SongCompleted::BandScore' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SongCompleted, SoloStars) == 0x000138, "Member 'FPilgrimVerbMessage_SongCompleted::SoloStars' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SongCompleted, BandStars) == 0x00013C, "Member 'FPilgrimVerbMessage_SongCompleted::BandStars' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SongCompleted, NumPlayers) == 0x000140, "Member 'FPilgrimVerbMessage_SongCompleted::NumPlayers' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SongCompleted, NoteAccuracy) == 0x000144, "Member 'FPilgrimVerbMessage_SongCompleted::NoteAccuracy' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SongCompleted, OverdriveTime) == 0x000148, "Member 'FPilgrimVerbMessage_SongCompleted::OverdriveTime' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SongCompleted, ComboType) == 0x00014C, "Member 'FPilgrimVerbMessage_SongCompleted::ComboType' has a wrong offset!");
static_assert(offsetof(FPilgrimVerbMessage_SongCompleted, PercentPerfect) == 0x000150, "Member 'FPilgrimVerbMessage_SongCompleted::PercentPerfect' has a wrong offset!");

// ScriptStruct PilgrimCoreRuntime.PilgrimVerbMessage_SongStarted
// 0x0000 (0x0130 - 0x0130)
struct FPilgrimVerbMessage_SongStarted final : public FPilgrimVerbMessageBase
{
};
static_assert(alignof(FPilgrimVerbMessage_SongStarted) == 0x000008, "Wrong alignment on FPilgrimVerbMessage_SongStarted");
static_assert(sizeof(FPilgrimVerbMessage_SongStarted) == 0x000130, "Wrong size on FPilgrimVerbMessage_SongStarted");

// ScriptStruct PilgrimCoreRuntime.PilgrimVerbFilter_DeployOverdrive
// 0x0000 (0x01A8 - 0x01A8)
struct FPilgrimVerbFilter_DeployOverdrive final : public FPilgrimObjectiveFilterBase
{
};
static_assert(alignof(FPilgrimVerbFilter_DeployOverdrive) == 0x000008, "Wrong alignment on FPilgrimVerbFilter_DeployOverdrive");
static_assert(sizeof(FPilgrimVerbFilter_DeployOverdrive) == 0x0001A8, "Wrong size on FPilgrimVerbFilter_DeployOverdrive");

}

