#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleCosmeticsRuntime

#include "Basic.hpp"

#include "ModularGameplay_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "CosmeticsFrameworkLoadouts_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "VehicleCosmeticsRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AssembledMeshSystem_classes.hpp"
#include "StructUtils_structs.hpp"


namespace SDK
{

// Class VehicleCosmeticsRuntime.FortItemVehiclePreviewActor
// 0x0080 (0x05A0 - 0x0520)
class AFortItemVehiclePreviewActor final : public AFortItemPreviewMultiAngleActor
{
public:
	uint8                                         Pad_520[0x8];                                      // 0x0520(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       ZoomedOutVehicleCameraComponent;                   // 0x0528(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       ZoomedInVehicleCameraComponent;                    // 0x0530(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       ZoomedOutWheelCameraComponent;                     // 0x0538(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       ZoomedInWheelCameraComponent;                      // 0x0540(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       ZoomedOutBoostCameraComponent;                     // 0x0548(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       ZoomedInBoostCameraComponent;                      // 0x0550(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       ZoomedOutDriftTrailCameraComponent;                // 0x0558(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       ZoomedInDriftTrailCameraComponent;                 // 0x0560(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSingleConfiguredCamera;                        // 0x0568(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_569[0x3];                                      // 0x0569(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrameSettingHeightOffset;                          // 0x056C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FrameSettingExpansionOffset;                       // 0x0570(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortUICameraFrameTargetBoundingBehavior      FrameSettingBoundingBehavior;                      // 0x0574(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_575[0x3];                                      // 0x0575(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrameSettingZoomInBoundsScale;                     // 0x0578(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   PreviewVehicleActorComponent;                      // 0x0580(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AVehicleCosmeticsPreviewVehicle*        PreviewVehicleActor;                               // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_590[0x10];                                     // 0x0590(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleBoostStarted();
	void HandleDriftTrailStarted();
	void HandleVehicleCosmeticsReady();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemVehiclePreviewActor">();
	}
	static class AFortItemVehiclePreviewActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortItemVehiclePreviewActor>();
	}
};
static_assert(alignof(AFortItemVehiclePreviewActor) == 0x000010, "Wrong alignment on AFortItemVehiclePreviewActor");
static_assert(sizeof(AFortItemVehiclePreviewActor) == 0x0005A0, "Wrong size on AFortItemVehiclePreviewActor");
static_assert(offsetof(AFortItemVehiclePreviewActor, ZoomedOutVehicleCameraComponent) == 0x000528, "Member 'AFortItemVehiclePreviewActor::ZoomedOutVehicleCameraComponent' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, ZoomedInVehicleCameraComponent) == 0x000530, "Member 'AFortItemVehiclePreviewActor::ZoomedInVehicleCameraComponent' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, ZoomedOutWheelCameraComponent) == 0x000538, "Member 'AFortItemVehiclePreviewActor::ZoomedOutWheelCameraComponent' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, ZoomedInWheelCameraComponent) == 0x000540, "Member 'AFortItemVehiclePreviewActor::ZoomedInWheelCameraComponent' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, ZoomedOutBoostCameraComponent) == 0x000548, "Member 'AFortItemVehiclePreviewActor::ZoomedOutBoostCameraComponent' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, ZoomedInBoostCameraComponent) == 0x000550, "Member 'AFortItemVehiclePreviewActor::ZoomedInBoostCameraComponent' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, ZoomedOutDriftTrailCameraComponent) == 0x000558, "Member 'AFortItemVehiclePreviewActor::ZoomedOutDriftTrailCameraComponent' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, ZoomedInDriftTrailCameraComponent) == 0x000560, "Member 'AFortItemVehiclePreviewActor::ZoomedInDriftTrailCameraComponent' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, bUseSingleConfiguredCamera) == 0x000568, "Member 'AFortItemVehiclePreviewActor::bUseSingleConfiguredCamera' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, FrameSettingHeightOffset) == 0x00056C, "Member 'AFortItemVehiclePreviewActor::FrameSettingHeightOffset' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, FrameSettingExpansionOffset) == 0x000570, "Member 'AFortItemVehiclePreviewActor::FrameSettingExpansionOffset' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, FrameSettingBoundingBehavior) == 0x000574, "Member 'AFortItemVehiclePreviewActor::FrameSettingBoundingBehavior' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, FrameSettingZoomInBoundsScale) == 0x000578, "Member 'AFortItemVehiclePreviewActor::FrameSettingZoomInBoundsScale' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, PreviewVehicleActorComponent) == 0x000580, "Member 'AFortItemVehiclePreviewActor::PreviewVehicleActorComponent' has a wrong offset!");
static_assert(offsetof(AFortItemVehiclePreviewActor, PreviewVehicleActor) == 0x000588, "Member 'AFortItemVehiclePreviewActor::PreviewVehicleActor' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsAIControllerInterface
// 0x0000 (0x0028 - 0x0028)
class IVehicleCosmeticsAIControllerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsAIControllerInterface">();
	}
	static class IVehicleCosmeticsAIControllerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVehicleCosmeticsAIControllerInterface>();
	}
};
static_assert(alignof(IVehicleCosmeticsAIControllerInterface) == 0x000008, "Wrong alignment on IVehicleCosmeticsAIControllerInterface");
static_assert(sizeof(IVehicleCosmeticsAIControllerInterface) == 0x000028, "Wrong size on IVehicleCosmeticsAIControllerInterface");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsPreviewConfigs
// 0x00A0 (0x00D0 - 0x0030)
class UVehicleCosmeticsPreviewConfigs final : public UPrimaryDataAsset
{
public:
	TSoftClassPtr<class UClass>                   VehiclePreviewActorClass;                          // 0x0030(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefaultBoostPreviewActorClass;                     // 0x0050(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefaultTrailPreviewActorClass;                     // 0x0070(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VehiclePreviewPrefabAssetClass;                    // 0x0090(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortVehicleCosmeticsItemDefinition_Body> VehiclePreviewDefaultPreviewBody;                  // 0x00B0(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsPreviewConfigs">();
	}
	static class UVehicleCosmeticsPreviewConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsPreviewConfigs>();
	}
};
static_assert(alignof(UVehicleCosmeticsPreviewConfigs) == 0x000008, "Wrong alignment on UVehicleCosmeticsPreviewConfigs");
static_assert(sizeof(UVehicleCosmeticsPreviewConfigs) == 0x0000D0, "Wrong size on UVehicleCosmeticsPreviewConfigs");
static_assert(offsetof(UVehicleCosmeticsPreviewConfigs, VehiclePreviewActorClass) == 0x000030, "Member 'UVehicleCosmeticsPreviewConfigs::VehiclePreviewActorClass' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsPreviewConfigs, DefaultBoostPreviewActorClass) == 0x000050, "Member 'UVehicleCosmeticsPreviewConfigs::DefaultBoostPreviewActorClass' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsPreviewConfigs, DefaultTrailPreviewActorClass) == 0x000070, "Member 'UVehicleCosmeticsPreviewConfigs::DefaultTrailPreviewActorClass' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsPreviewConfigs, VehiclePreviewPrefabAssetClass) == 0x000090, "Member 'UVehicleCosmeticsPreviewConfigs::VehiclePreviewPrefabAssetClass' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsPreviewConfigs, VehiclePreviewDefaultPreviewBody) == 0x0000B0, "Member 'UVehicleCosmeticsPreviewConfigs::VehiclePreviewDefaultPreviewBody' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsPreviewVehicle
// 0x0070 (0x1F90 - 0x1F20)
class AVehicleCosmeticsPreviewVehicle final : public AFortAthenaSKVehicle
{
public:
	uint8                                         Pad_1F18[0x78];                                    // 0x1F18(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnBoostApplied();
	void HandleOnDriftTrailApplied();
	void HandleOnVehicleCosmeticsFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsPreviewVehicle">();
	}
	static class AVehicleCosmeticsPreviewVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicleCosmeticsPreviewVehicle>();
	}
};
static_assert(alignof(AVehicleCosmeticsPreviewVehicle) == 0x000010, "Wrong alignment on AVehicleCosmeticsPreviewVehicle");
static_assert(sizeof(AVehicleCosmeticsPreviewVehicle) == 0x001F90, "Wrong size on AVehicleCosmeticsPreviewVehicle");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UVehicleCosmeticsBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetMaxSignificanceLOD_BoostFX();
	static int32 GetMaxSignificanceLOD_FrontWheelDriftFX();
	static int32 GetMaxSignificanceLOD_Generic();
	static int32 GetMaxSignificanceLOD_RearWheelDriftFX();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsBlueprintLibrary">();
	}
	static class UVehicleCosmeticsBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsBlueprintLibrary>();
	}
};
static_assert(alignof(UVehicleCosmeticsBlueprintLibrary) == 0x000008, "Wrong alignment on UVehicleCosmeticsBlueprintLibrary");
static_assert(sizeof(UVehicleCosmeticsBlueprintLibrary) == 0x000028, "Wrong size on UVehicleCosmeticsBlueprintLibrary");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsAnimInstance
// 0x0000 (0x0620 - 0x0620)
class UVehicleCosmeticsAnimInstance : public UFortVehicleAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsAnimInstance">();
	}
	static class UVehicleCosmeticsAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsAnimInstance>();
	}
};
static_assert(alignof(UVehicleCosmeticsAnimInstance) == 0x000010, "Wrong alignment on UVehicleCosmeticsAnimInstance");
static_assert(sizeof(UVehicleCosmeticsAnimInstance) == 0x000620, "Wrong size on UVehicleCosmeticsAnimInstance");

// Class VehicleCosmeticsRuntime.BouncyChassisVehicleAnimInstance
// 0x0250 (0x0870 - 0x0620)
class UBouncyChassisVehicleAnimInstance final : public UVehicleCosmeticsAnimInstance
{
public:
	struct FBouncyChassisVehicleState             BouncyChassis;                                     // 0x0620(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBouncyChassisVehicleSetup             BouncyChassisSetup;                                // 0x0630(0x0048)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BouncyChassisBlendRate;                            // 0x0678(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisualSteerAngleInterpRate;                        // 0x067C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelLerpSpeed;                                    // 0x0680(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThrottling;                                       // 0x0684(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReversing;                                        // 0x0685(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccelerating;                                     // 0x0686(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBraking;                                          // 0x0687(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Throttle;                                          // 0x0688(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steering;                                          // 0x068C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringAngle;                                     // 0x0690(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWheelsOnGround;                                   // 0x0694(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_695[0x3];                                      // 0x0695(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardSpeed;                                      // 0x0698(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriftBoostActive;                                 // 0x069C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnderthrustActive;                                // 0x069D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriftActive;                                      // 0x069E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickflipActive;                                   // 0x069F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpActive;                                       // 0x06A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurboActive;                                      // 0x06A1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartlineBoostActive;                             // 0x06A2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDraftingActive;                                   // 0x06A3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBouncyChassisVehicleWheelAnimInfo     WheelInfoFR;                                       // 0x06A4(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBouncyChassisVehicleWheelAnimInfo     WheelInfoFL;                                       // 0x06D0(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBouncyChassisVehicleWheelAnimInfo     WheelInfoBR;                                       // 0x06FC(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FBouncyChassisVehicleWheelAnimInfo     WheelInfoBL;                                       // 0x0728(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasTireMod;                                       // 0x0754(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldWheelSpinForPreview;                        // 0x0755(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_756[0x2];                                      // 0x0756(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviewWheelSpinVelocity;                          // 0x0758(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewWheelSpin;                                  // 0x075C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_760[0x110];                                    // 0x0760(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BouncyChassisVehicleAnimInstance">();
	}
	static class UBouncyChassisVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBouncyChassisVehicleAnimInstance>();
	}
};
static_assert(alignof(UBouncyChassisVehicleAnimInstance) == 0x000010, "Wrong alignment on UBouncyChassisVehicleAnimInstance");
static_assert(sizeof(UBouncyChassisVehicleAnimInstance) == 0x000870, "Wrong size on UBouncyChassisVehicleAnimInstance");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, BouncyChassis) == 0x000620, "Member 'UBouncyChassisVehicleAnimInstance::BouncyChassis' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, BouncyChassisSetup) == 0x000630, "Member 'UBouncyChassisVehicleAnimInstance::BouncyChassisSetup' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, BouncyChassisBlendRate) == 0x000678, "Member 'UBouncyChassisVehicleAnimInstance::BouncyChassisBlendRate' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, VisualSteerAngleInterpRate) == 0x00067C, "Member 'UBouncyChassisVehicleAnimInstance::VisualSteerAngleInterpRate' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, WheelLerpSpeed) == 0x000680, "Member 'UBouncyChassisVehicleAnimInstance::WheelLerpSpeed' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bThrottling) == 0x000684, "Member 'UBouncyChassisVehicleAnimInstance::bThrottling' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bReversing) == 0x000685, "Member 'UBouncyChassisVehicleAnimInstance::bReversing' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bAccelerating) == 0x000686, "Member 'UBouncyChassisVehicleAnimInstance::bAccelerating' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bBraking) == 0x000687, "Member 'UBouncyChassisVehicleAnimInstance::bBraking' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, Throttle) == 0x000688, "Member 'UBouncyChassisVehicleAnimInstance::Throttle' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, Steering) == 0x00068C, "Member 'UBouncyChassisVehicleAnimInstance::Steering' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, SteeringAngle) == 0x000690, "Member 'UBouncyChassisVehicleAnimInstance::SteeringAngle' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bWheelsOnGround) == 0x000694, "Member 'UBouncyChassisVehicleAnimInstance::bWheelsOnGround' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, ForwardSpeed) == 0x000698, "Member 'UBouncyChassisVehicleAnimInstance::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bDriftBoostActive) == 0x00069C, "Member 'UBouncyChassisVehicleAnimInstance::bDriftBoostActive' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bUnderthrustActive) == 0x00069D, "Member 'UBouncyChassisVehicleAnimInstance::bUnderthrustActive' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bDriftActive) == 0x00069E, "Member 'UBouncyChassisVehicleAnimInstance::bDriftActive' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bKickflipActive) == 0x00069F, "Member 'UBouncyChassisVehicleAnimInstance::bKickflipActive' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bJumpActive) == 0x0006A0, "Member 'UBouncyChassisVehicleAnimInstance::bJumpActive' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bTurboActive) == 0x0006A1, "Member 'UBouncyChassisVehicleAnimInstance::bTurboActive' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bStartlineBoostActive) == 0x0006A2, "Member 'UBouncyChassisVehicleAnimInstance::bStartlineBoostActive' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bDraftingActive) == 0x0006A3, "Member 'UBouncyChassisVehicleAnimInstance::bDraftingActive' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, WheelInfoFR) == 0x0006A4, "Member 'UBouncyChassisVehicleAnimInstance::WheelInfoFR' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, WheelInfoFL) == 0x0006D0, "Member 'UBouncyChassisVehicleAnimInstance::WheelInfoFL' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, WheelInfoBR) == 0x0006FC, "Member 'UBouncyChassisVehicleAnimInstance::WheelInfoBR' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, WheelInfoBL) == 0x000728, "Member 'UBouncyChassisVehicleAnimInstance::WheelInfoBL' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bHasTireMod) == 0x000754, "Member 'UBouncyChassisVehicleAnimInstance::bHasTireMod' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, bShouldWheelSpinForPreview) == 0x000755, "Member 'UBouncyChassisVehicleAnimInstance::bShouldWheelSpinForPreview' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, PreviewWheelSpinVelocity) == 0x000758, "Member 'UBouncyChassisVehicleAnimInstance::PreviewWheelSpinVelocity' has a wrong offset!");
static_assert(offsetof(UBouncyChassisVehicleAnimInstance, PreviewWheelSpin) == 0x00075C, "Member 'UBouncyChassisVehicleAnimInstance::PreviewWheelSpin' has a wrong offset!");

// Class VehicleCosmeticsRuntime.FortVehicleCosmeticsItemDefinition
// 0x00A0 (0x07E0 - 0x0740)
class UFortVehicleCosmeticsItemDefinition : public UAthenaCosmeticItemDefinition
{
public:
	uint8                                         Pad_740[0x28];                                     // 0x0740(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVehicleCosmeticsItemDefinition> VehicleCosmeticsItemDef;                           // 0x0768(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ItemTypeTag;                                       // 0x0788(0x0004)(Edit, DisableEditOnInstance, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_78C[0x4];                                      // 0x078C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVehicleCosmeticsPreviewConfigs> PreviewConfig;                                     // 0x0790(0x0020)(Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVehicleCosmeticsRestrictionDefinition> RestrictionDefinitions;                            // 0x07B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UFortVehicleCosmeticsItemDefinition> ItemPreviewVehicleBody;                            // 0x07C0(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleCosmeticsItemDefinition">();
	}
	static class UFortVehicleCosmeticsItemDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleCosmeticsItemDefinition>();
	}
};
static_assert(alignof(UFortVehicleCosmeticsItemDefinition) == 0x000008, "Wrong alignment on UFortVehicleCosmeticsItemDefinition");
static_assert(sizeof(UFortVehicleCosmeticsItemDefinition) == 0x0007E0, "Wrong size on UFortVehicleCosmeticsItemDefinition");
static_assert(offsetof(UFortVehicleCosmeticsItemDefinition, VehicleCosmeticsItemDef) == 0x000768, "Member 'UFortVehicleCosmeticsItemDefinition::VehicleCosmeticsItemDef' has a wrong offset!");
static_assert(offsetof(UFortVehicleCosmeticsItemDefinition, ItemTypeTag) == 0x000788, "Member 'UFortVehicleCosmeticsItemDefinition::ItemTypeTag' has a wrong offset!");
static_assert(offsetof(UFortVehicleCosmeticsItemDefinition, PreviewConfig) == 0x000790, "Member 'UFortVehicleCosmeticsItemDefinition::PreviewConfig' has a wrong offset!");
static_assert(offsetof(UFortVehicleCosmeticsItemDefinition, RestrictionDefinitions) == 0x0007B0, "Member 'UFortVehicleCosmeticsItemDefinition::RestrictionDefinitions' has a wrong offset!");
static_assert(offsetof(UFortVehicleCosmeticsItemDefinition, ItemPreviewVehicleBody) == 0x0007C0, "Member 'UFortVehicleCosmeticsItemDefinition::ItemPreviewVehicleBody' has a wrong offset!");

// Class VehicleCosmeticsRuntime.FortVehicleCosmeticsItemDefinition_Body
// 0x0000 (0x07E0 - 0x07E0)
class UFortVehicleCosmeticsItemDefinition_Body final : public UFortVehicleCosmeticsItemDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleCosmeticsItemDefinition_Body">();
	}
	static class UFortVehicleCosmeticsItemDefinition_Body* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleCosmeticsItemDefinition_Body>();
	}
};
static_assert(alignof(UFortVehicleCosmeticsItemDefinition_Body) == 0x000008, "Wrong alignment on UFortVehicleCosmeticsItemDefinition_Body");
static_assert(sizeof(UFortVehicleCosmeticsItemDefinition_Body) == 0x0007E0, "Wrong size on UFortVehicleCosmeticsItemDefinition_Body");

// Class VehicleCosmeticsRuntime.FortVehicleCosmeticsItemDefinition_Booster
// 0x0000 (0x07E0 - 0x07E0)
class UFortVehicleCosmeticsItemDefinition_Booster final : public UFortVehicleCosmeticsItemDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleCosmeticsItemDefinition_Booster">();
	}
	static class UFortVehicleCosmeticsItemDefinition_Booster* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleCosmeticsItemDefinition_Booster>();
	}
};
static_assert(alignof(UFortVehicleCosmeticsItemDefinition_Booster) == 0x000008, "Wrong alignment on UFortVehicleCosmeticsItemDefinition_Booster");
static_assert(sizeof(UFortVehicleCosmeticsItemDefinition_Booster) == 0x0007E0, "Wrong size on UFortVehicleCosmeticsItemDefinition_Booster");

// Class VehicleCosmeticsRuntime.FortVehicleCosmeticsItemDefinition_DriftTrail
// 0x0000 (0x07E0 - 0x07E0)
class UFortVehicleCosmeticsItemDefinition_DriftTrail final : public UFortVehicleCosmeticsItemDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleCosmeticsItemDefinition_DriftTrail">();
	}
	static class UFortVehicleCosmeticsItemDefinition_DriftTrail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleCosmeticsItemDefinition_DriftTrail>();
	}
};
static_assert(alignof(UFortVehicleCosmeticsItemDefinition_DriftTrail) == 0x000008, "Wrong alignment on UFortVehicleCosmeticsItemDefinition_DriftTrail");
static_assert(sizeof(UFortVehicleCosmeticsItemDefinition_DriftTrail) == 0x0007E0, "Wrong size on UFortVehicleCosmeticsItemDefinition_DriftTrail");

// Class VehicleCosmeticsRuntime.FortVehicleCosmeticsItemDefinition_EngineAudio
// 0x0000 (0x07E0 - 0x07E0)
class UFortVehicleCosmeticsItemDefinition_EngineAudio final : public UFortVehicleCosmeticsItemDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleCosmeticsItemDefinition_EngineAudio">();
	}
	static class UFortVehicleCosmeticsItemDefinition_EngineAudio* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleCosmeticsItemDefinition_EngineAudio>();
	}
};
static_assert(alignof(UFortVehicleCosmeticsItemDefinition_EngineAudio) == 0x000008, "Wrong alignment on UFortVehicleCosmeticsItemDefinition_EngineAudio");
static_assert(sizeof(UFortVehicleCosmeticsItemDefinition_EngineAudio) == 0x0007E0, "Wrong size on UFortVehicleCosmeticsItemDefinition_EngineAudio");

// Class VehicleCosmeticsRuntime.FortVehicleCosmeticsItemDefinition_Skin
// 0x0000 (0x07E0 - 0x07E0)
class UFortVehicleCosmeticsItemDefinition_Skin final : public UFortVehicleCosmeticsItemDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleCosmeticsItemDefinition_Skin">();
	}
	static class UFortVehicleCosmeticsItemDefinition_Skin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleCosmeticsItemDefinition_Skin>();
	}
};
static_assert(alignof(UFortVehicleCosmeticsItemDefinition_Skin) == 0x000008, "Wrong alignment on UFortVehicleCosmeticsItemDefinition_Skin");
static_assert(sizeof(UFortVehicleCosmeticsItemDefinition_Skin) == 0x0007E0, "Wrong size on UFortVehicleCosmeticsItemDefinition_Skin");

// Class VehicleCosmeticsRuntime.FortVehicleCosmeticsItemDefinition_Wheel
// 0x0000 (0x07E0 - 0x07E0)
class UFortVehicleCosmeticsItemDefinition_Wheel final : public UFortVehicleCosmeticsItemDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleCosmeticsItemDefinition_Wheel">();
	}
	static class UFortVehicleCosmeticsItemDefinition_Wheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleCosmeticsItemDefinition_Wheel>();
	}
};
static_assert(alignof(UFortVehicleCosmeticsItemDefinition_Wheel) == 0x000008, "Wrong alignment on UFortVehicleCosmeticsItemDefinition_Wheel");
static_assert(sizeof(UFortVehicleCosmeticsItemDefinition_Wheel) == 0x0007E0, "Wrong size on UFortVehicleCosmeticsItemDefinition_Wheel");

// Class VehicleCosmeticsRuntime.FortVehicleCosmeticsVariantTokenType
// 0x0000 (0x03E0 - 0x03E0)
class UFortVehicleCosmeticsVariantTokenType final : public UFortVariantTokenType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleCosmeticsVariantTokenType">();
	}
	static class UFortVehicleCosmeticsVariantTokenType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleCosmeticsVariantTokenType>();
	}
};
static_assert(alignof(UFortVehicleCosmeticsVariantTokenType) == 0x000008, "Wrong alignment on UFortVehicleCosmeticsVariantTokenType");
static_assert(sizeof(UFortVehicleCosmeticsVariantTokenType) == 0x0003E0, "Wrong size on UFortVehicleCosmeticsVariantTokenType");

// Class VehicleCosmeticsRuntime.PlayerCustomizableObjectCacheComponent
// 0x0050 (0x00F0 - 0x00A0)
class UPlayerCustomizableObjectCacheComponent final : public UPlayerStateComponent
{
public:
	TMap<TSubclassOf<class AFortAthenaVehicle>, class UCustomizableObjectInstance*> CachedInstanceMap;                                 // 0x00A0(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void OnPlayerDisconnected(class AFortPlayerStateAthena* PlayerState, bool bIsDisconnected);
	void OnSeamlessTravelStart(class UWorld* CurrentWorld, const class FString& LevelName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerCustomizableObjectCacheComponent">();
	}
	static class UPlayerCustomizableObjectCacheComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerCustomizableObjectCacheComponent>();
	}
};
static_assert(alignof(UPlayerCustomizableObjectCacheComponent) == 0x000008, "Wrong alignment on UPlayerCustomizableObjectCacheComponent");
static_assert(sizeof(UPlayerCustomizableObjectCacheComponent) == 0x0000F0, "Wrong size on UPlayerCustomizableObjectCacheComponent");
static_assert(offsetof(UPlayerCustomizableObjectCacheComponent, CachedInstanceMap) == 0x0000A0, "Member 'UPlayerCustomizableObjectCacheComponent::CachedInstanceMap' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsActorSpawnLogic
// 0x0000 (0x0028 - 0x0028)
class UVehicleCosmeticsActorSpawnLogic : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsActorSpawnLogic">();
	}
	static class UVehicleCosmeticsActorSpawnLogic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsActorSpawnLogic>();
	}
};
static_assert(alignof(UVehicleCosmeticsActorSpawnLogic) == 0x000008, "Wrong alignment on UVehicleCosmeticsActorSpawnLogic");
static_assert(sizeof(UVehicleCosmeticsActorSpawnLogic) == 0x000028, "Wrong size on UVehicleCosmeticsActorSpawnLogic");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsActorSpawnLogic_AttachTo
// 0x0008 (0x0030 - 0x0028)
class UVehicleCosmeticsActorSpawnLogic_AttachTo final : public UVehicleCosmeticsActorSpawnLogic
{
public:
	class FName                                   AttachSocket;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsActorSpawnLogic_AttachTo">();
	}
	static class UVehicleCosmeticsActorSpawnLogic_AttachTo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsActorSpawnLogic_AttachTo>();
	}
};
static_assert(alignof(UVehicleCosmeticsActorSpawnLogic_AttachTo) == 0x000008, "Wrong alignment on UVehicleCosmeticsActorSpawnLogic_AttachTo");
static_assert(sizeof(UVehicleCosmeticsActorSpawnLogic_AttachTo) == 0x000030, "Wrong size on UVehicleCosmeticsActorSpawnLogic_AttachTo");
static_assert(offsetof(UVehicleCosmeticsActorSpawnLogic_AttachTo, AttachSocket) == 0x000028, "Member 'UVehicleCosmeticsActorSpawnLogic_AttachTo::AttachSocket' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsActorSpawnLogic_AttachToEach
// 0x0010 (0x0038 - 0x0028)
class UVehicleCosmeticsActorSpawnLogic_AttachToEach final : public UVehicleCosmeticsActorSpawnLogic
{
public:
	TArray<class FName>                           AttachSockets;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsActorSpawnLogic_AttachToEach">();
	}
	static class UVehicleCosmeticsActorSpawnLogic_AttachToEach* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsActorSpawnLogic_AttachToEach>();
	}
};
static_assert(alignof(UVehicleCosmeticsActorSpawnLogic_AttachToEach) == 0x000008, "Wrong alignment on UVehicleCosmeticsActorSpawnLogic_AttachToEach");
static_assert(sizeof(UVehicleCosmeticsActorSpawnLogic_AttachToEach) == 0x000038, "Wrong size on UVehicleCosmeticsActorSpawnLogic_AttachToEach");
static_assert(offsetof(UVehicleCosmeticsActorSpawnLogic_AttachToEach, AttachSockets) == 0x000028, "Member 'UVehicleCosmeticsActorSpawnLogic_AttachToEach::AttachSockets' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsActorSpawnLogic_Booster
// 0x0000 (0x0028 - 0x0028)
class UVehicleCosmeticsActorSpawnLogic_Booster final : public UVehicleCosmeticsActorSpawnLogic
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsActorSpawnLogic_Booster">();
	}
	static class UVehicleCosmeticsActorSpawnLogic_Booster* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsActorSpawnLogic_Booster>();
	}
};
static_assert(alignof(UVehicleCosmeticsActorSpawnLogic_Booster) == 0x000008, "Wrong alignment on UVehicleCosmeticsActorSpawnLogic_Booster");
static_assert(sizeof(UVehicleCosmeticsActorSpawnLogic_Booster) == 0x000028, "Wrong size on UVehicleCosmeticsActorSpawnLogic_Booster");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsActor
// 0x0048 (0x02D8 - 0x0290)
class AVehicleCosmeticsActor final : public AActor
{
public:
	class UVehicleCosmeticsActorSpawnLogic*       SpawnLogic;                                        // 0x0290(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AVehicleCosmeticsActor>> CosmeticDependencies;                              // 0x0298(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TScriptInterface<class IFortVehicleInterface> VehicleInterface;                                  // 0x02A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TScriptInterface<class IVehicleCosmeticsInterface> VehicleCosmeticsInterface;                         // 0x02B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UActorComponent*                        VehicleCosmeticComponent;                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SocketAttachedTo;                                  // 0x02D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyCosmetic();
	void BoostFinished();
	void BoostStarted();
	void BP_OnBonusSpeedActivated();
	void BP_OnBonusSpeedDeactivated();
	void BP_OnBoostFinished();
	void BP_OnBoostStarted();
	void BP_OnColorReady(class FName Color, const struct FVehicleCosmeticsAdditionalParameterInfos& AdditionalInfo);
	void BP_OnCosmeticApplied();
	void BP_OnDeactivated();
	void BP_OnDriftFinished();
	void BP_OnDriftStarted();
	void BP_OnVehicleLanded(float LandingForced, bool bLandedKickflip);
	void BP_OnVehicleWheelsLeftGround();
	void ColorReady(const class FName InColor, const struct FVehicleCosmeticsAdditionalParameterInfos& InInfo);
	void DriftFinished();
	void DriftStarted();

	class USkeletalMeshComponent* GetBodyMeshComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsActor">();
	}
	static class AVehicleCosmeticsActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicleCosmeticsActor>();
	}
};
static_assert(alignof(AVehicleCosmeticsActor) == 0x000008, "Wrong alignment on AVehicleCosmeticsActor");
static_assert(sizeof(AVehicleCosmeticsActor) == 0x0002D8, "Wrong size on AVehicleCosmeticsActor");
static_assert(offsetof(AVehicleCosmeticsActor, SpawnLogic) == 0x000290, "Member 'AVehicleCosmeticsActor::SpawnLogic' has a wrong offset!");
static_assert(offsetof(AVehicleCosmeticsActor, CosmeticDependencies) == 0x000298, "Member 'AVehicleCosmeticsActor::CosmeticDependencies' has a wrong offset!");
static_assert(offsetof(AVehicleCosmeticsActor, VehicleInterface) == 0x0002A8, "Member 'AVehicleCosmeticsActor::VehicleInterface' has a wrong offset!");
static_assert(offsetof(AVehicleCosmeticsActor, VehicleCosmeticsInterface) == 0x0002B8, "Member 'AVehicleCosmeticsActor::VehicleCosmeticsInterface' has a wrong offset!");
static_assert(offsetof(AVehicleCosmeticsActor, VehicleCosmeticComponent) == 0x0002C8, "Member 'AVehicleCosmeticsActor::VehicleCosmeticComponent' has a wrong offset!");
static_assert(offsetof(AVehicleCosmeticsActor, SocketAttachedTo) == 0x0002D0, "Member 'AVehicleCosmeticsActor::SocketAttachedTo' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsAssembledMeshUserComponent
// 0x05A0 (0x0678 - 0x00D8)
class UVehicleCosmeticsAssembledMeshUserComponent : public UAssembledMeshUserComponent
{
public:
	uint8                                         Pad_D8[0x28];                                      // 0x00D8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomizableObjectInstance*            TempCustomizableObjectInstance;                    // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x20];                                     // 0x0108(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCosmeticLoadout                       OwningCosmeticsLoadout;                            // 0x0128(0x0010)(Net, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVehicleCosmeticsDefaultLoadoutInfo> DefaultLoadoutInfos;                               // 0x0148(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_158[0x1];                                      // 0x0158(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bVehicleCosmeticsEnabled;                          // 0x0159(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AVehicleCosmeticsActor*>         SpawnedCosmeticActors_Body;                        // 0x0160(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class AVehicleCosmeticsActor*>         SpawnedCosmeticActors_Wheel;                       // 0x0170(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class AVehicleCosmeticsActor*>         SpawnedCosmeticActors_Booster;                     // 0x0180(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class AVehicleCosmeticsActor*>         SpawnedCosmeticActors_DriftTrail;                  // 0x0190(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, bool>                       HasBeenCustomizedMap;                              // 0x01A0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class UAssembledMeshSchema*>      MeshPartDataMap;                                   // 0x01F0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_240[0x340];                                    // 0x0240(0x0340)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AVehicleCosmeticsActor* CosmeticActor)> OnCosmeticActorSpawned;                            // 0x0580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CustomizationEnabled;                              // 0x0590(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CosmeticsLoadoutFXLoopTime;                        // 0x05B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5E0[0x18];                                     // 0x05E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TSoftObjectPtr<class UVehicleCosmeticsItemDefinition_EngineAudio> Item)> OnEngineAudioUpdated;                              // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_608[0x70];                                     // 0x0608(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleBeginVehicleCosmetics();
	void HandleBodyPhysicsChanges();
	void HandleBoostFinished();
	void HandleBoostStarted();
	void HandleDriftFinished();
	void HandleDriftStarted();
	void HandleForceApplyVehicleCosmetics(const struct FSpawnerInfoForcedCosmetics& ForcedCosmetics);
	void HandleModApplied(const class AFortAthenaVehicle* Vehicle, const struct FGameplayTag& ModTag);
	void HandleOnExplode(const class AController* LastDamageInstigator, class AFortAthenaVehicle* Vehicle);
	void HandleTirePopped(const int32 TireIndex);
	void HandleTireRepaired(const int32 TireIndex);
	void OnRep_OwningCosmeticsLoadout();
	void SetVehicleCosmeticsEnabled(const bool& bEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsAssembledMeshUserComponent">();
	}
	static class UVehicleCosmeticsAssembledMeshUserComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsAssembledMeshUserComponent>();
	}
};
static_assert(alignof(UVehicleCosmeticsAssembledMeshUserComponent) == 0x000008, "Wrong alignment on UVehicleCosmeticsAssembledMeshUserComponent");
static_assert(sizeof(UVehicleCosmeticsAssembledMeshUserComponent) == 0x000678, "Wrong size on UVehicleCosmeticsAssembledMeshUserComponent");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, TempCustomizableObjectInstance) == 0x000100, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::TempCustomizableObjectInstance' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, OwningCosmeticsLoadout) == 0x000128, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::OwningCosmeticsLoadout' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, DefaultLoadoutInfos) == 0x000148, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::DefaultLoadoutInfos' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, bVehicleCosmeticsEnabled) == 0x000159, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::bVehicleCosmeticsEnabled' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, SpawnedCosmeticActors_Body) == 0x000160, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::SpawnedCosmeticActors_Body' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, SpawnedCosmeticActors_Wheel) == 0x000170, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::SpawnedCosmeticActors_Wheel' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, SpawnedCosmeticActors_Booster) == 0x000180, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::SpawnedCosmeticActors_Booster' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, SpawnedCosmeticActors_DriftTrail) == 0x000190, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::SpawnedCosmeticActors_DriftTrail' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, HasBeenCustomizedMap) == 0x0001A0, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::HasBeenCustomizedMap' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, MeshPartDataMap) == 0x0001F0, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::MeshPartDataMap' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, OnCosmeticActorSpawned) == 0x000580, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::OnCosmeticActorSpawned' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, CustomizationEnabled) == 0x000590, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::CustomizationEnabled' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, CosmeticsLoadoutFXLoopTime) == 0x0005B8, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::CosmeticsLoadoutFXLoopTime' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsAssembledMeshUserComponent, OnEngineAudioUpdated) == 0x0005F8, "Member 'UVehicleCosmeticsAssembledMeshUserComponent::OnEngineAudioUpdated' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsCheatManager
// 0x0000 (0x0028 - 0x0028)
class UVehicleCosmeticsCheatManager final : public UChildCheatManager
{
public:
	void ClearVehicleCosmeticsLoadout();
	void CustomizeAllVehicles(const class FString& BodyName, const class FString& WheelName, const class FString& SkinName, const class FString& BoosterName, const class FString& DriftTrailName, const class FString& BodyPainted, const class FString& WheelPainted, const class FString& BodyColor, const class FString& SkinColor, const class FString& SkinPainted, const class FString& BoosterPainted, const class FString& DriftTrailPainted);
	void CustomizeVehicle(const class FString& BodyName, const class FString& WheelName, const class FString& SkinName, const class FString& BoosterName, const class FString& DriftTrailName, const class FString& BodyPainted, const class FString& WheelPainted, const class FString& BodyColor, const class FString& SkinColor, const class FString& SkinPainted, const class FString& BoosterPainted, const class FString& DriftTrailPainted);
	void DumpVehicleCosmeticsLoadedAssetSkeletalMeshes();
	void DumpVehicleCosmeticsLoadedAssetTemplateIds();
	void DumpVehicleCosmeticsLoadedAssetVariantTokenTypes();
	void DumpVehicleCosmeticsPhysicsShapeCollision();
	void GrantVehicleCosmeticsLoadedAssets();
	void SetVehicleCosmetics_BoosterPainted(const class FString& PaintName);
	void SetVehicleCosmetics_DriftTrailPainted(const class FString& PaintName);
	void SetVehicleCosmeticsLoadout(const class FString& BodyName, const class FString& WheelName, const class FString& SkinName, const class FString& BoosterName, const class FString& DriftTrailName, const class FString& BodyPainted, const class FString& WheelPainted, const class FString& BodyColor, const class FString& SkinColor, const class FString& SkinPainted, const class FString& BoosterPainted, const class FString& DriftTrailPainted);
	void SetVehicleCosmeticsLoadout_Body(const class FString& BodyName);
	void SetVehicleCosmeticsLoadout_BodyColor(const class FString& BodyColor);
	void SetVehicleCosmeticsLoadout_BodyPainted(const class FString& PaintName);
	void SetVehicleCosmeticsLoadout_Booster(const class FString& BoosterName);
	void SetVehicleCosmeticsLoadout_BoosterPainted(const class FString& PaintName);
	void SetVehicleCosmeticsLoadout_DriftTrail(const class FString& DriftSmokeName);
	void SetVehicleCosmeticsLoadout_DriftTrailPainted(const class FString& PaintName);
	void SetVehicleCosmeticsLoadout_Skin(const class FString& SkinName);
	void SetVehicleCosmeticsLoadout_SkinColor(const class FString& SkinColor);
	void SetVehicleCosmeticsLoadout_SkinPainted(const class FString& PaintName);
	void SetVehicleCosmeticsLoadout_Wheel(const class FString& WheelName);
	void SetVehicleCosmeticsLoadout_WheelPainted(const class FString& PaintName);
	void VehicleCosmeticsDriftEnabled(const bool bNewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsCheatManager">();
	}
	static class UVehicleCosmeticsCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsCheatManager>();
	}
};
static_assert(alignof(UVehicleCosmeticsCheatManager) == 0x000008, "Wrong alignment on UVehicleCosmeticsCheatManager");
static_assert(sizeof(UVehicleCosmeticsCheatManager) == 0x000028, "Wrong size on UVehicleCosmeticsCheatManager");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsInterface
// 0x0000 (0x0028 - 0x0028)
class IVehicleCosmeticsInterface : public IInterface
{
public:
	class FName GetBodyItemName() const;
	float GetDraftingAppliedBonusSpeed() const;
	class FName GetDriftTrailItemName() const;
	class FName GetTurboItemName() const;
	class FName GetWheelItemName() const;
	bool IsDriftBoostActive() const;
	bool IsDrifting() const;
	bool IsJumpAbilityActive() const;
	bool IsKickflipActive() const;
	bool IsStartlineBoostActive() const;
	bool IsTurboActive() const;
	bool IsUnderthrustActive() const;
	bool ShouldWheelSpinForPreview() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsInterface">();
	}
	static class IVehicleCosmeticsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVehicleCosmeticsInterface>();
	}
};
static_assert(alignof(IVehicleCosmeticsInterface) == 0x000008, "Wrong alignment on IVehicleCosmeticsInterface");
static_assert(sizeof(IVehicleCosmeticsInterface) == 0x000028, "Wrong size on IVehicleCosmeticsInterface");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsItemDefinition
// 0x0030 (0x0210 - 0x01E0)
class UVehicleCosmeticsItemDefinition : public UAssembledMeshSchema
{
public:
	TArray<TSoftClassPtr<class UClass>>           CosmeticAttachments;                               // 0x01E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class FString>                         CheatNames;                                        // 0x01F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FString                                 CheatLoadoutSlotName;                              // 0x0200(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsItemDefinition">();
	}
	static class UVehicleCosmeticsItemDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsItemDefinition>();
	}
};
static_assert(alignof(UVehicleCosmeticsItemDefinition) == 0x000008, "Wrong alignment on UVehicleCosmeticsItemDefinition");
static_assert(sizeof(UVehicleCosmeticsItemDefinition) == 0x000210, "Wrong size on UVehicleCosmeticsItemDefinition");
static_assert(offsetof(UVehicleCosmeticsItemDefinition, CosmeticAttachments) == 0x0001E0, "Member 'UVehicleCosmeticsItemDefinition::CosmeticAttachments' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition, CheatNames) == 0x0001F0, "Member 'UVehicleCosmeticsItemDefinition::CheatNames' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition, CheatLoadoutSlotName) == 0x000200, "Member 'UVehicleCosmeticsItemDefinition::CheatLoadoutSlotName' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsItemDefinition_Body
// 0x0178 (0x0388 - 0x0210)
class UVehicleCosmeticsItemDefinition_Body final : public UVehicleCosmeticsItemDefinition
{
public:
	uint8                                         Pad_210[0x8];                                      // 0x0210(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleCosmeticsCustomizableObjectIntInfo BodyGroup;                                         // 0x0218(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   SkinDataTableParameterName;                        // 0x0220(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BodyColorParameterName;                            // 0x0224(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SkinColorParameterName;                            // 0x0228(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PaintedDataTableParameterName;                     // 0x022C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FVehicleCosmeticsAdditionalParameterInfos> AdditionalVariantInfos;                            // 0x0230(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVehicleCosmeticsBodyPhysicsQueryInfo> PhysicsQueryInfos;                                 // 0x0280(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVehicleCosmeticsAnimInfo>      AnimInfos;                                         // 0x0290(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class USkeleton>               WheelAttachSkeletonReference;                      // 0x02A0(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FWheelAttachInfo>               WheelAttachInfos;                                  // 0x02C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBoosterAttachInfo>             BoosterAttachInfos;                                // 0x02D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UVehicleCosmeticsItemDefinition_Wheel> DefaultWheelItemDef;                               // 0x02E0(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    DefaultSkinRow;                                    // 0x0300(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UVehicleCosmeticsItemDefinition_EngineAudio> AudioData;                                         // 0x0310(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      BodyTypeTagQuery;                                  // 0x0330(0x0048)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVehicleCosmeticsBodyWindowQueryInfo> WindowQueryInfos;                                  // 0x0378(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsItemDefinition_Body">();
	}
	static class UVehicleCosmeticsItemDefinition_Body* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsItemDefinition_Body>();
	}
};
static_assert(alignof(UVehicleCosmeticsItemDefinition_Body) == 0x000008, "Wrong alignment on UVehicleCosmeticsItemDefinition_Body");
static_assert(sizeof(UVehicleCosmeticsItemDefinition_Body) == 0x000388, "Wrong size on UVehicleCosmeticsItemDefinition_Body");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, BodyGroup) == 0x000218, "Member 'UVehicleCosmeticsItemDefinition_Body::BodyGroup' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, SkinDataTableParameterName) == 0x000220, "Member 'UVehicleCosmeticsItemDefinition_Body::SkinDataTableParameterName' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, BodyColorParameterName) == 0x000224, "Member 'UVehicleCosmeticsItemDefinition_Body::BodyColorParameterName' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, SkinColorParameterName) == 0x000228, "Member 'UVehicleCosmeticsItemDefinition_Body::SkinColorParameterName' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, PaintedDataTableParameterName) == 0x00022C, "Member 'UVehicleCosmeticsItemDefinition_Body::PaintedDataTableParameterName' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, AdditionalVariantInfos) == 0x000230, "Member 'UVehicleCosmeticsItemDefinition_Body::AdditionalVariantInfos' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, PhysicsQueryInfos) == 0x000280, "Member 'UVehicleCosmeticsItemDefinition_Body::PhysicsQueryInfos' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, AnimInfos) == 0x000290, "Member 'UVehicleCosmeticsItemDefinition_Body::AnimInfos' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, WheelAttachSkeletonReference) == 0x0002A0, "Member 'UVehicleCosmeticsItemDefinition_Body::WheelAttachSkeletonReference' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, WheelAttachInfos) == 0x0002C0, "Member 'UVehicleCosmeticsItemDefinition_Body::WheelAttachInfos' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, BoosterAttachInfos) == 0x0002D0, "Member 'UVehicleCosmeticsItemDefinition_Body::BoosterAttachInfos' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, DefaultWheelItemDef) == 0x0002E0, "Member 'UVehicleCosmeticsItemDefinition_Body::DefaultWheelItemDef' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, DefaultSkinRow) == 0x000300, "Member 'UVehicleCosmeticsItemDefinition_Body::DefaultSkinRow' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, AudioData) == 0x000310, "Member 'UVehicleCosmeticsItemDefinition_Body::AudioData' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, BodyTypeTagQuery) == 0x000330, "Member 'UVehicleCosmeticsItemDefinition_Body::BodyTypeTagQuery' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Body, WindowQueryInfos) == 0x000378, "Member 'UVehicleCosmeticsItemDefinition_Body::WindowQueryInfos' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsItemDefinition_Booster
// 0x0050 (0x0260 - 0x0210)
class UVehicleCosmeticsItemDefinition_Booster final : public UVehicleCosmeticsItemDefinition
{
public:
	TMap<struct FGameplayTag, struct FVehicleCosmeticsAdditionalParameterInfos> AdditionalVariantInfos;                            // 0x0210(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsItemDefinition_Booster">();
	}
	static class UVehicleCosmeticsItemDefinition_Booster* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsItemDefinition_Booster>();
	}
};
static_assert(alignof(UVehicleCosmeticsItemDefinition_Booster) == 0x000008, "Wrong alignment on UVehicleCosmeticsItemDefinition_Booster");
static_assert(sizeof(UVehicleCosmeticsItemDefinition_Booster) == 0x000260, "Wrong size on UVehicleCosmeticsItemDefinition_Booster");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Booster, AdditionalVariantInfos) == 0x000210, "Member 'UVehicleCosmeticsItemDefinition_Booster::AdditionalVariantInfos' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsItemDefinition_DriftTrail
// 0x0050 (0x0260 - 0x0210)
class UVehicleCosmeticsItemDefinition_DriftTrail final : public UVehicleCosmeticsItemDefinition
{
public:
	TMap<struct FGameplayTag, struct FVehicleCosmeticsAdditionalParameterInfos> AdditionalVariantInfos;                            // 0x0210(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsItemDefinition_DriftTrail">();
	}
	static class UVehicleCosmeticsItemDefinition_DriftTrail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsItemDefinition_DriftTrail>();
	}
};
static_assert(alignof(UVehicleCosmeticsItemDefinition_DriftTrail) == 0x000008, "Wrong alignment on UVehicleCosmeticsItemDefinition_DriftTrail");
static_assert(sizeof(UVehicleCosmeticsItemDefinition_DriftTrail) == 0x000260, "Wrong size on UVehicleCosmeticsItemDefinition_DriftTrail");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_DriftTrail, AdditionalVariantInfos) == 0x000210, "Member 'UVehicleCosmeticsItemDefinition_DriftTrail::AdditionalVariantInfos' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleAudioCosmeticData
// 0x0060 (0x0090 - 0x0030)
class UVehicleAudioCosmeticData final : public UDataAsset
{
public:
	TSoftObjectPtr<class USoundBase>              EngineSound;                                       // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              EngineSound_LowSpec;                               // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             EngineIgnitionSound;                               // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             EngineOffSound;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             HornSound;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIP;                                             // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanIgnoreLoadManagement;                          // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TSoftObjectPtr<class USoundBase> GetEngineSound(bool bHighSpec);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleAudioCosmeticData">();
	}
	static class UVehicleAudioCosmeticData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleAudioCosmeticData>();
	}
};
static_assert(alignof(UVehicleAudioCosmeticData) == 0x000008, "Wrong alignment on UVehicleAudioCosmeticData");
static_assert(sizeof(UVehicleAudioCosmeticData) == 0x000090, "Wrong size on UVehicleAudioCosmeticData");
static_assert(offsetof(UVehicleAudioCosmeticData, EngineSound) == 0x000030, "Member 'UVehicleAudioCosmeticData::EngineSound' has a wrong offset!");
static_assert(offsetof(UVehicleAudioCosmeticData, EngineSound_LowSpec) == 0x000050, "Member 'UVehicleAudioCosmeticData::EngineSound_LowSpec' has a wrong offset!");
static_assert(offsetof(UVehicleAudioCosmeticData, EngineIgnitionSound) == 0x000070, "Member 'UVehicleAudioCosmeticData::EngineIgnitionSound' has a wrong offset!");
static_assert(offsetof(UVehicleAudioCosmeticData, EngineOffSound) == 0x000078, "Member 'UVehicleAudioCosmeticData::EngineOffSound' has a wrong offset!");
static_assert(offsetof(UVehicleAudioCosmeticData, HornSound) == 0x000080, "Member 'UVehicleAudioCosmeticData::HornSound' has a wrong offset!");
static_assert(offsetof(UVehicleAudioCosmeticData, bIsIP) == 0x000088, "Member 'UVehicleAudioCosmeticData::bIsIP' has a wrong offset!");
static_assert(offsetof(UVehicleAudioCosmeticData, bCanIgnoreLoadManagement) == 0x000089, "Member 'UVehicleAudioCosmeticData::bCanIgnoreLoadManagement' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsItemDefinition_EngineAudio
// 0x0020 (0x0230 - 0x0210)
class UVehicleCosmeticsItemDefinition_EngineAudio final : public UVehicleCosmeticsItemDefinition
{
public:
	TSoftObjectPtr<class UVehicleAudioCosmeticData> Data;                                              // 0x0210(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsItemDefinition_EngineAudio">();
	}
	static class UVehicleCosmeticsItemDefinition_EngineAudio* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsItemDefinition_EngineAudio>();
	}
};
static_assert(alignof(UVehicleCosmeticsItemDefinition_EngineAudio) == 0x000008, "Wrong alignment on UVehicleCosmeticsItemDefinition_EngineAudio");
static_assert(sizeof(UVehicleCosmeticsItemDefinition_EngineAudio) == 0x000230, "Wrong size on UVehicleCosmeticsItemDefinition_EngineAudio");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_EngineAudio, Data) == 0x000210, "Member 'UVehicleCosmeticsItemDefinition_EngineAudio::Data' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsItemDefinition_Skin
// 0x0040 (0x0250 - 0x0210)
class UVehicleCosmeticsItemDefinition_Skin final : public UVehicleCosmeticsItemDefinition
{
public:
	bool                                          bLockColor;                                        // 0x0210(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LockedBodyColor;                                   // 0x0214(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           LockedSkinColor;                                   // 0x0224(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PaintedDataTableParameterName;                     // 0x0234(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PaintedEnumParameterName;                          // 0x0238(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVehicleCosmeticsAdditionalParameterInfos> AdditionalSkinInfos;                               // 0x0240(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsItemDefinition_Skin">();
	}
	static class UVehicleCosmeticsItemDefinition_Skin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsItemDefinition_Skin>();
	}
};
static_assert(alignof(UVehicleCosmeticsItemDefinition_Skin) == 0x000008, "Wrong alignment on UVehicleCosmeticsItemDefinition_Skin");
static_assert(sizeof(UVehicleCosmeticsItemDefinition_Skin) == 0x000250, "Wrong size on UVehicleCosmeticsItemDefinition_Skin");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Skin, bLockColor) == 0x000210, "Member 'UVehicleCosmeticsItemDefinition_Skin::bLockColor' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Skin, LockedBodyColor) == 0x000214, "Member 'UVehicleCosmeticsItemDefinition_Skin::LockedBodyColor' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Skin, LockedSkinColor) == 0x000224, "Member 'UVehicleCosmeticsItemDefinition_Skin::LockedSkinColor' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Skin, PaintedDataTableParameterName) == 0x000234, "Member 'UVehicleCosmeticsItemDefinition_Skin::PaintedDataTableParameterName' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Skin, PaintedEnumParameterName) == 0x000238, "Member 'UVehicleCosmeticsItemDefinition_Skin::PaintedEnumParameterName' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Skin, AdditionalSkinInfos) == 0x000240, "Member 'UVehicleCosmeticsItemDefinition_Skin::AdditionalSkinInfos' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsItemDefinition_Wheel
// 0x0098 (0x02A8 - 0x0210)
class UVehicleCosmeticsItemDefinition_Wheel final : public UVehicleCosmeticsItemDefinition
{
public:
	uint8                                         Pad_210[0x8];                                      // 0x0210(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleCosmeticsCustomizableObjectIntInfo WheelGroup;                                        // 0x0218(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   PaintedDataTableParameterName;                     // 0x0220(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedStruct                       WheelTirePoppedInfo;                               // 0x0228(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FVehicleCosmeticsAdditionalParameterInfos> AdditionalVariantInfos;                            // 0x0238(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVehicleCosmeticsAnimInfo>      AnimInfos;                                         // 0x0288(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FWheelSetupInfo>                WheelSetupInfos;                                   // 0x0298(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsItemDefinition_Wheel">();
	}
	static class UVehicleCosmeticsItemDefinition_Wheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsItemDefinition_Wheel>();
	}
};
static_assert(alignof(UVehicleCosmeticsItemDefinition_Wheel) == 0x000008, "Wrong alignment on UVehicleCosmeticsItemDefinition_Wheel");
static_assert(sizeof(UVehicleCosmeticsItemDefinition_Wheel) == 0x0002A8, "Wrong size on UVehicleCosmeticsItemDefinition_Wheel");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Wheel, WheelGroup) == 0x000218, "Member 'UVehicleCosmeticsItemDefinition_Wheel::WheelGroup' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Wheel, PaintedDataTableParameterName) == 0x000220, "Member 'UVehicleCosmeticsItemDefinition_Wheel::PaintedDataTableParameterName' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Wheel, WheelTirePoppedInfo) == 0x000228, "Member 'UVehicleCosmeticsItemDefinition_Wheel::WheelTirePoppedInfo' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Wheel, AdditionalVariantInfos) == 0x000238, "Member 'UVehicleCosmeticsItemDefinition_Wheel::AdditionalVariantInfos' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Wheel, AnimInfos) == 0x000288, "Member 'UVehicleCosmeticsItemDefinition_Wheel::AnimInfos' has a wrong offset!");
static_assert(offsetof(UVehicleCosmeticsItemDefinition_Wheel, WheelSetupInfos) == 0x000298, "Member 'UVehicleCosmeticsItemDefinition_Wheel::WheelSetupInfos' has a wrong offset!");

// Class VehicleCosmeticsRuntime.VehicleCosmeticsWheelAnimInstance
// 0x0040 (0x0660 - 0x0620)
class UVehicleCosmeticsWheelAnimInstance final : public UVehicleCosmeticsAnimInstance
{
public:
	struct FRotator                               SpinnerSpin;                                       // 0x0620(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_638[0x28];                                     // 0x0638(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleCosmeticsWheelAnimInstance">();
	}
	static class UVehicleCosmeticsWheelAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleCosmeticsWheelAnimInstance>();
	}
};
static_assert(alignof(UVehicleCosmeticsWheelAnimInstance) == 0x000010, "Wrong alignment on UVehicleCosmeticsWheelAnimInstance");
static_assert(sizeof(UVehicleCosmeticsWheelAnimInstance) == 0x000660, "Wrong size on UVehicleCosmeticsWheelAnimInstance");
static_assert(offsetof(UVehicleCosmeticsWheelAnimInstance, SpinnerSpin) == 0x000620, "Member 'UVehicleCosmeticsWheelAnimInstance::SpinnerSpin' has a wrong offset!");

}

