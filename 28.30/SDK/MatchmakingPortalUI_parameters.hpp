#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MatchmakingPortalUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function MatchmakingPortalUI.FortControllerComponent_CreativeMatchmaking.OnCreativeReadyCheckStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_CreativeMatchmaking_OnCreativeReadyCheckStatusChanged final
{
public:
	EInGameReadyCheckStatus                       InGameReadyCheckStatus;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CreativeMatchmaking_OnCreativeReadyCheckStatusChanged) == 0x000001, "Wrong alignment on FortControllerComponent_CreativeMatchmaking_OnCreativeReadyCheckStatusChanged");
static_assert(sizeof(FortControllerComponent_CreativeMatchmaking_OnCreativeReadyCheckStatusChanged) == 0x000001, "Wrong size on FortControllerComponent_CreativeMatchmaking_OnCreativeReadyCheckStatusChanged");
static_assert(offsetof(FortControllerComponent_CreativeMatchmaking_OnCreativeReadyCheckStatusChanged, InGameReadyCheckStatus) == 0x000000, "Member 'FortControllerComponent_CreativeMatchmaking_OnCreativeReadyCheckStatusChanged::InGameReadyCheckStatus' has a wrong offset!");

// Function MatchmakingPortalUI.FortCreativeMatchmakingFeedback.BP_OnCreativeReadyCheckStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMatchmakingFeedback_BP_OnCreativeReadyCheckStatusChanged final
{
public:
	EInGameReadyCheckStatus                       InGameReadyCheckStatus;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMatchmakingFeedback_BP_OnCreativeReadyCheckStatusChanged) == 0x000001, "Wrong alignment on FortCreativeMatchmakingFeedback_BP_OnCreativeReadyCheckStatusChanged");
static_assert(sizeof(FortCreativeMatchmakingFeedback_BP_OnCreativeReadyCheckStatusChanged) == 0x000001, "Wrong size on FortCreativeMatchmakingFeedback_BP_OnCreativeReadyCheckStatusChanged");
static_assert(offsetof(FortCreativeMatchmakingFeedback_BP_OnCreativeReadyCheckStatusChanged, InGameReadyCheckStatus) == 0x000000, "Member 'FortCreativeMatchmakingFeedback_BP_OnCreativeReadyCheckStatusChanged::InGameReadyCheckStatus' has a wrong offset!");

// Function MatchmakingPortalUI.FortCreativeMatchmakingFeedback.OnCreativeReadyCheckStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMatchmakingFeedback_OnCreativeReadyCheckStatusChanged final
{
public:
	EInGameReadyCheckStatus                       InGameReadyCheckStatus;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMatchmakingFeedback_OnCreativeReadyCheckStatusChanged) == 0x000001, "Wrong alignment on FortCreativeMatchmakingFeedback_OnCreativeReadyCheckStatusChanged");
static_assert(sizeof(FortCreativeMatchmakingFeedback_OnCreativeReadyCheckStatusChanged) == 0x000001, "Wrong size on FortCreativeMatchmakingFeedback_OnCreativeReadyCheckStatusChanged");
static_assert(offsetof(FortCreativeMatchmakingFeedback_OnCreativeReadyCheckStatusChanged, InGameReadyCheckStatus) == 0x000000, "Member 'FortCreativeMatchmakingFeedback_OnCreativeReadyCheckStatusChanged::InGameReadyCheckStatus' has a wrong offset!");

// Function MatchmakingPortalUI.FortCreativeMatchmakingFeedback.OnLockStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMatchmakingFeedback_OnLockStateChanged final
{
public:
	bool                                          bLockState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMatchmakingFeedback_OnLockStateChanged) == 0x000001, "Wrong alignment on FortCreativeMatchmakingFeedback_OnLockStateChanged");
static_assert(sizeof(FortCreativeMatchmakingFeedback_OnLockStateChanged) == 0x000001, "Wrong size on FortCreativeMatchmakingFeedback_OnLockStateChanged");
static_assert(offsetof(FortCreativeMatchmakingFeedback_OnLockStateChanged, bLockState) == 0x000000, "Member 'FortCreativeMatchmakingFeedback_OnLockStateChanged::bLockState' has a wrong offset!");

// Function MatchmakingPortalUI.FortCreativeMatchmakingFeedback.CanCancelMatchmaking
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMatchmakingFeedback_CanCancelMatchmaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMatchmakingFeedback_CanCancelMatchmaking) == 0x000001, "Wrong alignment on FortCreativeMatchmakingFeedback_CanCancelMatchmaking");
static_assert(sizeof(FortCreativeMatchmakingFeedback_CanCancelMatchmaking) == 0x000001, "Wrong size on FortCreativeMatchmakingFeedback_CanCancelMatchmaking");
static_assert(offsetof(FortCreativeMatchmakingFeedback_CanCancelMatchmaking, ReturnValue) == 0x000000, "Member 'FortCreativeMatchmakingFeedback_CanCancelMatchmaking::ReturnValue' has a wrong offset!");

// Function MatchmakingPortalUI.FortCreativeMatchmakingFeedback.GetTimeToDisplayMessageBeforeFadeOut
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeMatchmakingFeedback_GetTimeToDisplayMessageBeforeFadeOut final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMatchmakingFeedback_GetTimeToDisplayMessageBeforeFadeOut) == 0x000004, "Wrong alignment on FortCreativeMatchmakingFeedback_GetTimeToDisplayMessageBeforeFadeOut");
static_assert(sizeof(FortCreativeMatchmakingFeedback_GetTimeToDisplayMessageBeforeFadeOut) == 0x000004, "Wrong size on FortCreativeMatchmakingFeedback_GetTimeToDisplayMessageBeforeFadeOut");
static_assert(offsetof(FortCreativeMatchmakingFeedback_GetTimeToDisplayMessageBeforeFadeOut, ReturnValue) == 0x000000, "Member 'FortCreativeMatchmakingFeedback_GetTimeToDisplayMessageBeforeFadeOut::ReturnValue' has a wrong offset!");

// Function MatchmakingPortalUI.FortCreativeMatchmakingFeedback.IsLocalPlayerReady
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMatchmakingFeedback_IsLocalPlayerReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMatchmakingFeedback_IsLocalPlayerReady) == 0x000001, "Wrong alignment on FortCreativeMatchmakingFeedback_IsLocalPlayerReady");
static_assert(sizeof(FortCreativeMatchmakingFeedback_IsLocalPlayerReady) == 0x000001, "Wrong size on FortCreativeMatchmakingFeedback_IsLocalPlayerReady");
static_assert(offsetof(FortCreativeMatchmakingFeedback_IsLocalPlayerReady, ReturnValue) == 0x000000, "Member 'FortCreativeMatchmakingFeedback_IsLocalPlayerReady::ReturnValue' has a wrong offset!");

// Function MatchmakingPortalUI.FortCreativeMatchmakingFeedback.IsPartyLeader
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMatchmakingFeedback_IsPartyLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMatchmakingFeedback_IsPartyLeader) == 0x000001, "Wrong alignment on FortCreativeMatchmakingFeedback_IsPartyLeader");
static_assert(sizeof(FortCreativeMatchmakingFeedback_IsPartyLeader) == 0x000001, "Wrong size on FortCreativeMatchmakingFeedback_IsPartyLeader");
static_assert(offsetof(FortCreativeMatchmakingFeedback_IsPartyLeader, ReturnValue) == 0x000000, "Member 'FortCreativeMatchmakingFeedback_IsPartyLeader::ReturnValue' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.GetIslandData
// 0x0070 (0x0070 - 0x0000)
struct FortMatchmakingPortalPopup_GetIslandData final
{
public:
	struct FMatchmakingPortalPopupData            OutIslandData;                                     // 0x0000(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UHeaderDescriptionHUDComponent*         HUDComponent;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMatchmakingPortalPopup_GetIslandData) == 0x000008, "Wrong alignment on FortMatchmakingPortalPopup_GetIslandData");
static_assert(sizeof(FortMatchmakingPortalPopup_GetIslandData) == 0x000070, "Wrong size on FortMatchmakingPortalPopup_GetIslandData");
static_assert(offsetof(FortMatchmakingPortalPopup_GetIslandData, OutIslandData) == 0x000000, "Member 'FortMatchmakingPortalPopup_GetIslandData::OutIslandData' has a wrong offset!");
static_assert(offsetof(FortMatchmakingPortalPopup_GetIslandData, HUDComponent) == 0x000060, "Member 'FortMatchmakingPortalPopup_GetIslandData::HUDComponent' has a wrong offset!");
static_assert(offsetof(FortMatchmakingPortalPopup_GetIslandData, ReturnValue) == 0x000068, "Member 'FortMatchmakingPortalPopup_GetIslandData::ReturnValue' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.HandleHUDShow
// 0x0002 (0x0002 - 0x0000)
struct FortMatchmakingPortalPopup_HandleHUDShow final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimate;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_HandleHUDShow) == 0x000001, "Wrong alignment on FortMatchmakingPortalPopup_HandleHUDShow");
static_assert(sizeof(FortMatchmakingPortalPopup_HandleHUDShow) == 0x000002, "Wrong size on FortMatchmakingPortalPopup_HandleHUDShow");
static_assert(offsetof(FortMatchmakingPortalPopup_HandleHUDShow, bShow) == 0x000000, "Member 'FortMatchmakingPortalPopup_HandleHUDShow::bShow' has a wrong offset!");
static_assert(offsetof(FortMatchmakingPortalPopup_HandleHUDShow, bShouldAnimate) == 0x000001, "Member 'FortMatchmakingPortalPopup_HandleHUDShow::bShouldAnimate' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.HandleLoadScreenChanged
// 0x0028 (0x0028 - 0x0000)
struct FortMatchmakingPortalPopup_HandleLoadScreenChanged final
{
public:
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadScreenEnabled;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HUDReason;                                         // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_HandleLoadScreenChanged) == 0x000008, "Wrong alignment on FortMatchmakingPortalPopup_HandleLoadScreenChanged");
static_assert(sizeof(FortMatchmakingPortalPopup_HandleLoadScreenChanged) == 0x000028, "Wrong size on FortMatchmakingPortalPopup_HandleLoadScreenChanged");
static_assert(offsetof(FortMatchmakingPortalPopup_HandleLoadScreenChanged, PlayerController) == 0x000000, "Member 'FortMatchmakingPortalPopup_HandleLoadScreenChanged::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMatchmakingPortalPopup_HandleLoadScreenChanged, bLoadScreenEnabled) == 0x000008, "Member 'FortMatchmakingPortalPopup_HandleLoadScreenChanged::bLoadScreenEnabled' has a wrong offset!");
static_assert(offsetof(FortMatchmakingPortalPopup_HandleLoadScreenChanged, HUDReason) == 0x000010, "Member 'FortMatchmakingPortalPopup_HandleLoadScreenChanged::HUDReason' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.HandleOnPortalDetailsVisibilityCheck
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingPortalPopup_HandleOnPortalDetailsVisibilityCheck final
{
public:
	bool                                          bShowWidget;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_HandleOnPortalDetailsVisibilityCheck) == 0x000001, "Wrong alignment on FortMatchmakingPortalPopup_HandleOnPortalDetailsVisibilityCheck");
static_assert(sizeof(FortMatchmakingPortalPopup_HandleOnPortalDetailsVisibilityCheck) == 0x000001, "Wrong size on FortMatchmakingPortalPopup_HandleOnPortalDetailsVisibilityCheck");
static_assert(offsetof(FortMatchmakingPortalPopup_HandleOnPortalDetailsVisibilityCheck, bShowWidget) == 0x000000, "Member 'FortMatchmakingPortalPopup_HandleOnPortalDetailsVisibilityCheck::bShowWidget' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.HandleStartedRespawn
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingPortalPopup_HandleStartedRespawn final
{
public:
	class AFortPlayerControllerZone*              PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_HandleStartedRespawn) == 0x000008, "Wrong alignment on FortMatchmakingPortalPopup_HandleStartedRespawn");
static_assert(sizeof(FortMatchmakingPortalPopup_HandleStartedRespawn) == 0x000008, "Wrong size on FortMatchmakingPortalPopup_HandleStartedRespawn");
static_assert(offsetof(FortMatchmakingPortalPopup_HandleStartedRespawn, PlayerController) == 0x000000, "Member 'FortMatchmakingPortalPopup_HandleStartedRespawn::PlayerController' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.IsInteractingDeviceAMatchmakingPortal
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingPortalPopup_IsInteractingDeviceAMatchmakingPortal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_IsInteractingDeviceAMatchmakingPortal) == 0x000001, "Wrong alignment on FortMatchmakingPortalPopup_IsInteractingDeviceAMatchmakingPortal");
static_assert(sizeof(FortMatchmakingPortalPopup_IsInteractingDeviceAMatchmakingPortal) == 0x000001, "Wrong size on FortMatchmakingPortalPopup_IsInteractingDeviceAMatchmakingPortal");
static_assert(offsetof(FortMatchmakingPortalPopup_IsInteractingDeviceAMatchmakingPortal, ReturnValue) == 0x000000, "Member 'FortMatchmakingPortalPopup_IsInteractingDeviceAMatchmakingPortal::ReturnValue' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.OnPlayerCanInteractChanged
// 0x0020 (0x0020 - 0x0000)
struct FortMatchmakingPortalPopup_OnPlayerCanInteractChanged final
{
public:
	bool                                          bPlayerCanInteract;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_OnPlayerCanInteractChanged) == 0x000008, "Wrong alignment on FortMatchmakingPortalPopup_OnPlayerCanInteractChanged");
static_assert(sizeof(FortMatchmakingPortalPopup_OnPlayerCanInteractChanged) == 0x000020, "Wrong size on FortMatchmakingPortalPopup_OnPlayerCanInteractChanged");
static_assert(offsetof(FortMatchmakingPortalPopup_OnPlayerCanInteractChanged, bPlayerCanInteract) == 0x000000, "Member 'FortMatchmakingPortalPopup_OnPlayerCanInteractChanged::bPlayerCanInteract' has a wrong offset!");
static_assert(offsetof(FortMatchmakingPortalPopup_OnPlayerCanInteractChanged, Message) == 0x000008, "Member 'FortMatchmakingPortalPopup_OnPlayerCanInteractChanged::Message' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.OnShowPortalPopup
// 0x0002 (0x0002 - 0x0000)
struct FortMatchmakingPortalPopup_OnShowPortalPopup final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_OnShowPortalPopup) == 0x000001, "Wrong alignment on FortMatchmakingPortalPopup_OnShowPortalPopup");
static_assert(sizeof(FortMatchmakingPortalPopup_OnShowPortalPopup) == 0x000002, "Wrong size on FortMatchmakingPortalPopup_OnShowPortalPopup");
static_assert(offsetof(FortMatchmakingPortalPopup_OnShowPortalPopup, bShow) == 0x000000, "Member 'FortMatchmakingPortalPopup_OnShowPortalPopup::bShow' has a wrong offset!");
static_assert(offsetof(FortMatchmakingPortalPopup_OnShowPortalPopup, bAnimate) == 0x000001, "Member 'FortMatchmakingPortalPopup_OnShowPortalPopup::bAnimate' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.UpdateVisuals
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingPortalPopup_UpdateVisuals final
{
public:
	const class UHeaderDescriptionHUDComponent*   HUDComponent;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_UpdateVisuals) == 0x000008, "Wrong alignment on FortMatchmakingPortalPopup_UpdateVisuals");
static_assert(sizeof(FortMatchmakingPortalPopup_UpdateVisuals) == 0x000008, "Wrong size on FortMatchmakingPortalPopup_UpdateVisuals");
static_assert(offsetof(FortMatchmakingPortalPopup_UpdateVisuals, HUDComponent) == 0x000000, "Member 'FortMatchmakingPortalPopup_UpdateVisuals::HUDComponent' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.GetMatchmakingFeedbackWidget
// 0x0010 (0x0010 - 0x0000)
struct FortMatchmakingPortalPopup_GetMatchmakingFeedbackWidget final
{
public:
	const class UCommonActivatableWidget*         MatchmakingFeedbackContainer;                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaCreativeMatchmakingWidget*   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_GetMatchmakingFeedbackWidget) == 0x000008, "Wrong alignment on FortMatchmakingPortalPopup_GetMatchmakingFeedbackWidget");
static_assert(sizeof(FortMatchmakingPortalPopup_GetMatchmakingFeedbackWidget) == 0x000010, "Wrong size on FortMatchmakingPortalPopup_GetMatchmakingFeedbackWidget");
static_assert(offsetof(FortMatchmakingPortalPopup_GetMatchmakingFeedbackWidget, MatchmakingFeedbackContainer) == 0x000000, "Member 'FortMatchmakingPortalPopup_GetMatchmakingFeedbackWidget::MatchmakingFeedbackContainer' has a wrong offset!");
static_assert(offsetof(FortMatchmakingPortalPopup_GetMatchmakingFeedbackWidget, ReturnValue) == 0x000008, "Member 'FortMatchmakingPortalPopup_GetMatchmakingFeedbackWidget::ReturnValue' has a wrong offset!");

// Function MatchmakingPortalUI.FortMatchmakingPortalPopup.HasActivityToShow
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingPortalPopup_HasActivityToShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingPortalPopup_HasActivityToShow) == 0x000001, "Wrong alignment on FortMatchmakingPortalPopup_HasActivityToShow");
static_assert(sizeof(FortMatchmakingPortalPopup_HasActivityToShow) == 0x000001, "Wrong size on FortMatchmakingPortalPopup_HasActivityToShow");
static_assert(offsetof(FortMatchmakingPortalPopup_HasActivityToShow, ReturnValue) == 0x000000, "Member 'FortMatchmakingPortalPopup_HasActivityToShow::ReturnValue' has a wrong offset!");

// Function MatchmakingPortalUI.FortModalBackground.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortModalBackground_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         InTexture;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortModalBackground_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortModalBackground_OnPreviewImageChanged");
static_assert(sizeof(FortModalBackground_OnPreviewImageChanged) == 0x000010, "Wrong size on FortModalBackground_OnPreviewImageChanged");
static_assert(offsetof(FortModalBackground_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortModalBackground_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortModalBackground_OnPreviewImageChanged, InTexture) == 0x000008, "Member 'FortModalBackground_OnPreviewImageChanged::InTexture' has a wrong offset!");

}

