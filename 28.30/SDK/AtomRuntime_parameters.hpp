#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AtomRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AtomRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.AddPartInstance
// 0x0120 (0x0120 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_AddPartInstance final
{
public:
	struct FAtomModelPartsCollection              PartCollection;                                    // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FAtomModelPartInstanceInfo             PartInstance;                                      // 0x0080(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_AddPartInstance) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_AddPartInstance");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_AddPartInstance) == 0x000120, "Wrong size on AtomPartsCollectionBlueprintLibrary_AddPartInstance");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_AddPartInstance, PartCollection) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_AddPartInstance::PartCollection' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_AddPartInstance, PartInstance) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_AddPartInstance::PartInstance' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.Conv_ModelPartGuidToString
// 0x0028 (0x0028 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_Conv_ModelPartGuidToString final
{
public:
	struct FAtomModelPartGuid                     InModelPartGuid;                                   // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_Conv_ModelPartGuidToString) == 0x000008, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_Conv_ModelPartGuidToString");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_Conv_ModelPartGuidToString) == 0x000028, "Wrong size on AtomPartsCollectionBlueprintLibrary_Conv_ModelPartGuidToString");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_Conv_ModelPartGuidToString, InModelPartGuid) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_Conv_ModelPartGuidToString::InModelPartGuid' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_Conv_ModelPartGuidToString, ReturnValue) == 0x000018, "Member 'AtomPartsCollectionBlueprintLibrary_Conv_ModelPartGuidToString::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.Conv_StringToModelPartGuid
// 0x0028 (0x0028 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_Conv_StringToModelPartGuid final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartGuid                     ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_Conv_StringToModelPartGuid) == 0x000008, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_Conv_StringToModelPartGuid");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_Conv_StringToModelPartGuid) == 0x000028, "Wrong size on AtomPartsCollectionBlueprintLibrary_Conv_StringToModelPartGuid");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_Conv_StringToModelPartGuid, InString) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_Conv_StringToModelPartGuid::InString' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_Conv_StringToModelPartGuid, ReturnValue) == 0x000010, "Member 'AtomPartsCollectionBlueprintLibrary_Conv_StringToModelPartGuid::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.CreateColorInfoFromColorId
// 0x0010 (0x0010 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_CreateColorInfoFromColorId final
{
public:
	int32                                         ColorId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartColorInfo                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_CreateColorInfoFromColorId) == 0x000004, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_CreateColorInfoFromColorId");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_CreateColorInfoFromColorId) == 0x000010, "Wrong size on AtomPartsCollectionBlueprintLibrary_CreateColorInfoFromColorId");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_CreateColorInfoFromColorId, ColorId) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_CreateColorInfoFromColorId::ColorId' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_CreateColorInfoFromColorId, ReturnValue) == 0x000004, "Member 'AtomPartsCollectionBlueprintLibrary_CreateColorInfoFromColorId::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.FilterGroup
// 0x0130 (0x0130 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_FilterGroup final
{
public:
	class UAtomModel*                             Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtomModelPartsCollection              PartsCollectionToFilter;                           // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0090(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPartsCollectionName;                            // 0x00A0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartsCollection              ReturnValue;                                       // 0x00B0(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_FilterGroup) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_FilterGroup");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_FilterGroup) == 0x000130, "Wrong size on AtomPartsCollectionBlueprintLibrary_FilterGroup");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterGroup, Model) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_FilterGroup::Model' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterGroup, PartsCollectionToFilter) == 0x000010, "Member 'AtomPartsCollectionBlueprintLibrary_FilterGroup::PartsCollectionToFilter' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterGroup, GroupName) == 0x000090, "Member 'AtomPartsCollectionBlueprintLibrary_FilterGroup::GroupName' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterGroup, NewPartsCollectionName) == 0x0000A0, "Member 'AtomPartsCollectionBlueprintLibrary_FilterGroup::NewPartsCollectionName' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterGroup, ReturnValue) == 0x0000B0, "Member 'AtomPartsCollectionBlueprintLibrary_FilterGroup::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.FilterNonTransparent
// 0x0110 (0x0110 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_FilterNonTransparent final
{
public:
	struct FAtomModelPartsCollection              PartsCollectionToFilter;                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 NewPartsCollectionName;                            // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartsCollection              ReturnValue;                                       // 0x0090(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_FilterNonTransparent) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_FilterNonTransparent");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_FilterNonTransparent) == 0x000110, "Wrong size on AtomPartsCollectionBlueprintLibrary_FilterNonTransparent");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterNonTransparent, PartsCollectionToFilter) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_FilterNonTransparent::PartsCollectionToFilter' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterNonTransparent, NewPartsCollectionName) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_FilterNonTransparent::NewPartsCollectionName' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterNonTransparent, ReturnValue) == 0x000090, "Member 'AtomPartsCollectionBlueprintLibrary_FilterNonTransparent::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.FilterSelectionSet
// 0x0120 (0x0120 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_FilterSelectionSet final
{
public:
	struct FAtomModelPartsCollection              PartsCollectionToFilter;                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 SelectionSetName;                                  // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPartsCollectionName;                            // 0x0090(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartsCollection              ReturnValue;                                       // 0x00A0(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_FilterSelectionSet) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_FilterSelectionSet");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_FilterSelectionSet) == 0x000120, "Wrong size on AtomPartsCollectionBlueprintLibrary_FilterSelectionSet");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterSelectionSet, PartsCollectionToFilter) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_FilterSelectionSet::PartsCollectionToFilter' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterSelectionSet, SelectionSetName) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_FilterSelectionSet::SelectionSetName' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterSelectionSet, NewPartsCollectionName) == 0x000090, "Member 'AtomPartsCollectionBlueprintLibrary_FilterSelectionSet::NewPartsCollectionName' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterSelectionSet, ReturnValue) == 0x0000A0, "Member 'AtomPartsCollectionBlueprintLibrary_FilterSelectionSet::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.FilterTransparent
// 0x0110 (0x0110 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_FilterTransparent final
{
public:
	struct FAtomModelPartsCollection              PartsCollectionToFilter;                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 NewPartsCollectionName;                            // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartsCollection              ReturnValue;                                       // 0x0090(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_FilterTransparent) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_FilterTransparent");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_FilterTransparent) == 0x000110, "Wrong size on AtomPartsCollectionBlueprintLibrary_FilterTransparent");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterTransparent, PartsCollectionToFilter) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_FilterTransparent::PartsCollectionToFilter' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterTransparent, NewPartsCollectionName) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_FilterTransparent::NewPartsCollectionName' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_FilterTransparent, ReturnValue) == 0x000090, "Member 'AtomPartsCollectionBlueprintLibrary_FilterTransparent::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.GetName
// 0x0090 (0x0090 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_GetName final
{
public:
	struct FAtomModelPartsCollection              PartsCollection;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_GetName) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_GetName");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_GetName) == 0x000090, "Wrong size on AtomPartsCollectionBlueprintLibrary_GetName");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_GetName, PartsCollection) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_GetName::PartsCollection' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_GetName, ReturnValue) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_GetName::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.GetParts
// 0x0090 (0x0090 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_GetParts final
{
public:
	struct FAtomModelPartsCollection              PartsCollection;                                   // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FAtomModelPartInstanceInfo>     ReturnValue;                                       // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_GetParts) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_GetParts");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_GetParts) == 0x000090, "Wrong size on AtomPartsCollectionBlueprintLibrary_GetParts");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_GetParts, PartsCollection) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_GetParts::PartsCollection' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_GetParts, ReturnValue) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_GetParts::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.GetPrimitiveCommonParts
// 0x0020 (0x0020 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts final
{
public:
	class UAtomPrimitive*                         Primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Scale;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtomCommonPartAndTransform>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts) == 0x000008, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts) == 0x000020, "Wrong size on AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts, Primitive) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts::Primitive' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts, Scale) == 0x000008, "Member 'AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts::Scale' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts, ReturnValue) == 0x000010, "Member 'AtomPartsCollectionBlueprintLibrary_GetPrimitiveCommonParts::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.InitializeCommonParts
// 0x0110 (0x0110 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_InitializeCommonParts final
{
public:
	struct FAtomModelPartsCollection              PartsCollection;                                   // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UAtomModel*                       Model;                                             // 0x0080(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveConnectedParts;                             // 0x008C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveAllKnobs;                                   // 0x008D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveAllTubes;                                   // 0x008E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveAllPins;                                    // 0x008F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartsCollection              ReturnValue;                                       // 0x0090(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_InitializeCommonParts");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts) == 0x000110, "Wrong size on AtomPartsCollectionBlueprintLibrary_InitializeCommonParts");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts, PartsCollection) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_InitializeCommonParts::PartsCollection' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts, Model) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_InitializeCommonParts::Model' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts, Scale) == 0x000088, "Member 'AtomPartsCollectionBlueprintLibrary_InitializeCommonParts::Scale' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts, bRemoveConnectedParts) == 0x00008C, "Member 'AtomPartsCollectionBlueprintLibrary_InitializeCommonParts::bRemoveConnectedParts' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts, bRemoveAllKnobs) == 0x00008D, "Member 'AtomPartsCollectionBlueprintLibrary_InitializeCommonParts::bRemoveAllKnobs' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts, bRemoveAllTubes) == 0x00008E, "Member 'AtomPartsCollectionBlueprintLibrary_InitializeCommonParts::bRemoveAllTubes' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts, bRemoveAllPins) == 0x00008F, "Member 'AtomPartsCollectionBlueprintLibrary_InitializeCommonParts::bRemoveAllPins' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_InitializeCommonParts, ReturnValue) == 0x000090, "Member 'AtomPartsCollectionBlueprintLibrary_InitializeCommonParts::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.RemovePartInstance
// 0x00A0 (0x00A0 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_RemovePartInstance final
{
public:
	struct FAtomModelPartsCollection              PartCollection;                                    // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FAtomModelPartGuid                     PartInstanceId;                                    // 0x0080(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0xC];                                       // 0x0094(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_RemovePartInstance) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_RemovePartInstance");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_RemovePartInstance) == 0x0000A0, "Wrong size on AtomPartsCollectionBlueprintLibrary_RemovePartInstance");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_RemovePartInstance, PartCollection) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_RemovePartInstance::PartCollection' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_RemovePartInstance, PartInstanceId) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_RemovePartInstance::PartInstanceId' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.ReplacePartInstance
// 0x0140 (0x0140 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_ReplacePartInstance final
{
public:
	struct FAtomModelPartsCollection              PartCollection;                                    // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FAtomModelPartInstanceInfo             SourcePartInstance;                                // 0x0080(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAtomModelPartGuid                     TargetPartInstanceId;                              // 0x0120(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0xC];                                      // 0x0134(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_ReplacePartInstance) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_ReplacePartInstance");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_ReplacePartInstance) == 0x000140, "Wrong size on AtomPartsCollectionBlueprintLibrary_ReplacePartInstance");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_ReplacePartInstance, PartCollection) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_ReplacePartInstance::PartCollection' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_ReplacePartInstance, SourcePartInstance) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_ReplacePartInstance::SourcePartInstance' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_ReplacePartInstance, TargetPartInstanceId) == 0x000120, "Member 'AtomPartsCollectionBlueprintLibrary_ReplacePartInstance::TargetPartInstanceId' has a wrong offset!");

// Function AtomRuntime.AtomPartsCollectionBlueprintLibrary.SetName
// 0x0090 (0x0090 - 0x0000)
struct AtomPartsCollectionBlueprintLibrary_SetName final
{
public:
	struct FAtomModelPartsCollection              PartsCollection;                                   // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPartsCollectionBlueprintLibrary_SetName) == 0x000010, "Wrong alignment on AtomPartsCollectionBlueprintLibrary_SetName");
static_assert(sizeof(AtomPartsCollectionBlueprintLibrary_SetName) == 0x000090, "Wrong size on AtomPartsCollectionBlueprintLibrary_SetName");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_SetName, PartsCollection) == 0x000000, "Member 'AtomPartsCollectionBlueprintLibrary_SetName::PartsCollection' has a wrong offset!");
static_assert(offsetof(AtomPartsCollectionBlueprintLibrary_SetName, Name_0) == 0x000080, "Member 'AtomPartsCollectionBlueprintLibrary_SetName::Name_0' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveBlueprintLibrary.GetDefaultPrimitiveScale
// 0x0004 (0x0004 - 0x0000)
struct AtomPrimitiveBlueprintLibrary_GetDefaultPrimitiveScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveBlueprintLibrary_GetDefaultPrimitiveScale) == 0x000004, "Wrong alignment on AtomPrimitiveBlueprintLibrary_GetDefaultPrimitiveScale");
static_assert(sizeof(AtomPrimitiveBlueprintLibrary_GetDefaultPrimitiveScale) == 0x000004, "Wrong size on AtomPrimitiveBlueprintLibrary_GetDefaultPrimitiveScale");
static_assert(offsetof(AtomPrimitiveBlueprintLibrary_GetDefaultPrimitiveScale, ReturnValue) == 0x000000, "Member 'AtomPrimitiveBlueprintLibrary_GetDefaultPrimitiveScale::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.CreateAtomGeometryFromCommonPart
// 0x0030 (0x0030 - 0x0000)
struct AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart final
{
public:
	class FString                                 ExportStyleName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtomCommonPartType                           CommonPartType;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommonPartsMeshPath;                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart");
static_assert(sizeof(AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart) == 0x000030, "Wrong size on AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart");
static_assert(offsetof(AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart, ExportStyleName) == 0x000000, "Member 'AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart::ExportStyleName' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart, CommonPartType) == 0x000010, "Member 'AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart::CommonPartType' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart, LODIndex) == 0x000014, "Member 'AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart::LODIndex' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart, CommonPartsMeshPath) == 0x000018, "Member 'AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart::CommonPartsMeshPath' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart, ReturnValue) == 0x000028, "Member 'AtomPrimitiveGeometry_CreateAtomGeometryFromCommonPart::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.CreateEmptyAtomGeometry
// 0x0008 (0x0008 - 0x0000)
struct AtomPrimitiveGeometry_CreateEmptyAtomGeometry final
{
public:
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_CreateEmptyAtomGeometry) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_CreateEmptyAtomGeometry");
static_assert(sizeof(AtomPrimitiveGeometry_CreateEmptyAtomGeometry) == 0x000008, "Wrong size on AtomPrimitiveGeometry_CreateEmptyAtomGeometry");
static_assert(offsetof(AtomPrimitiveGeometry_CreateEmptyAtomGeometry, ReturnValue) == 0x000000, "Member 'AtomPrimitiveGeometry_CreateEmptyAtomGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.GetNumberOfCommonPartLODs
// 0x0030 (0x0030 - 0x0000)
struct AtomPrimitiveGeometry_GetNumberOfCommonPartLODs final
{
public:
	class FString                                 ExportStyleName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtomCommonPartType                           CommonPartType;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CommonPartsMeshPath;                               // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomPrimitiveGeometry_GetNumberOfCommonPartLODs) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_GetNumberOfCommonPartLODs");
static_assert(sizeof(AtomPrimitiveGeometry_GetNumberOfCommonPartLODs) == 0x000030, "Wrong size on AtomPrimitiveGeometry_GetNumberOfCommonPartLODs");
static_assert(offsetof(AtomPrimitiveGeometry_GetNumberOfCommonPartLODs, ExportStyleName) == 0x000000, "Member 'AtomPrimitiveGeometry_GetNumberOfCommonPartLODs::ExportStyleName' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_GetNumberOfCommonPartLODs, CommonPartType) == 0x000010, "Member 'AtomPrimitiveGeometry_GetNumberOfCommonPartLODs::CommonPartType' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_GetNumberOfCommonPartLODs, CommonPartsMeshPath) == 0x000018, "Member 'AtomPrimitiveGeometry_GetNumberOfCommonPartLODs::CommonPartsMeshPath' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_GetNumberOfCommonPartLODs, ReturnValue) == 0x000028, "Member 'AtomPrimitiveGeometry_GetNumberOfCommonPartLODs::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.Append
// 0x0050 (0x0050 - 0x0000)
struct AtomPrimitiveGeometry_Append final
{
public:
	const class UAtomPrimitiveGeometry*           GeometryToAppend;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform3f                           Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomPrimitiveGeometry_Append) == 0x000010, "Wrong alignment on AtomPrimitiveGeometry_Append");
static_assert(sizeof(AtomPrimitiveGeometry_Append) == 0x000050, "Wrong size on AtomPrimitiveGeometry_Append");
static_assert(offsetof(AtomPrimitiveGeometry_Append, GeometryToAppend) == 0x000000, "Member 'AtomPrimitiveGeometry_Append::GeometryToAppend' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_Append, Transform) == 0x000010, "Member 'AtomPrimitiveGeometry_Append::Transform' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_Append, ReturnValue) == 0x000040, "Member 'AtomPrimitiveGeometry_Append::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.AppendAndWeld
// 0x0050 (0x0050 - 0x0000)
struct AtomPrimitiveGeometry_AppendAndWeld final
{
public:
	const class UAtomPrimitiveGeometry*           GeometryToAppend;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform3f                           Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomPrimitiveGeometry_AppendAndWeld) == 0x000010, "Wrong alignment on AtomPrimitiveGeometry_AppendAndWeld");
static_assert(sizeof(AtomPrimitiveGeometry_AppendAndWeld) == 0x000050, "Wrong size on AtomPrimitiveGeometry_AppendAndWeld");
static_assert(offsetof(AtomPrimitiveGeometry_AppendAndWeld, GeometryToAppend) == 0x000000, "Member 'AtomPrimitiveGeometry_AppendAndWeld::GeometryToAppend' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_AppendAndWeld, Transform) == 0x000010, "Member 'AtomPrimitiveGeometry_AppendAndWeld::Transform' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_AppendAndWeld, ReturnValue) == 0x000040, "Member 'AtomPrimitiveGeometry_AppendAndWeld::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.AttachVerticesToBoneIndex
// 0x0004 (0x0004 - 0x0000)
struct AtomPrimitiveGeometry_AttachVerticesToBoneIndex final
{
public:
	int32                                         BoneIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_AttachVerticesToBoneIndex) == 0x000004, "Wrong alignment on AtomPrimitiveGeometry_AttachVerticesToBoneIndex");
static_assert(sizeof(AtomPrimitiveGeometry_AttachVerticesToBoneIndex) == 0x000004, "Wrong size on AtomPrimitiveGeometry_AttachVerticesToBoneIndex");
static_assert(offsetof(AtomPrimitiveGeometry_AttachVerticesToBoneIndex, BoneIndex) == 0x000000, "Member 'AtomPrimitiveGeometry_AttachVerticesToBoneIndex::BoneIndex' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.AttachVerticesToNamedBone
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometry_AttachVerticesToNamedBone final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_AttachVerticesToNamedBone) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_AttachVerticesToNamedBone");
static_assert(sizeof(AtomPrimitiveGeometry_AttachVerticesToNamedBone) == 0x000010, "Wrong size on AtomPrimitiveGeometry_AttachVerticesToNamedBone");
static_assert(offsetof(AtomPrimitiveGeometry_AttachVerticesToNamedBone, BoneName) == 0x000000, "Member 'AtomPrimitiveGeometry_AttachVerticesToNamedBone::BoneName' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.BakeScale
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometry_BakeScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_BakeScale) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_BakeScale");
static_assert(sizeof(AtomPrimitiveGeometry_BakeScale) == 0x000010, "Wrong size on AtomPrimitiveGeometry_BakeScale");
static_assert(offsetof(AtomPrimitiveGeometry_BakeScale, Scale) == 0x000000, "Member 'AtomPrimitiveGeometry_BakeScale::Scale' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_BakeScale, ReturnValue) == 0x000008, "Member 'AtomPrimitiveGeometry_BakeScale::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.BakeTransform
// 0x0040 (0x0040 - 0x0000)
struct AtomPrimitiveGeometry_BakeTransform final
{
public:
	struct FTransform3f                           Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomPrimitiveGeometry_BakeTransform) == 0x000010, "Wrong alignment on AtomPrimitiveGeometry_BakeTransform");
static_assert(sizeof(AtomPrimitiveGeometry_BakeTransform) == 0x000040, "Wrong size on AtomPrimitiveGeometry_BakeTransform");
static_assert(offsetof(AtomPrimitiveGeometry_BakeTransform, Transform) == 0x000000, "Member 'AtomPrimitiveGeometry_BakeTransform::Transform' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_BakeTransform, ReturnValue) == 0x000030, "Member 'AtomPrimitiveGeometry_BakeTransform::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.BakeTransforms
// 0x0018 (0x0018 - 0x0000)
struct AtomPrimitiveGeometry_BakeTransforms final
{
public:
	TArray<struct FTransform3f>                   Transforms;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_BakeTransforms) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_BakeTransforms");
static_assert(sizeof(AtomPrimitiveGeometry_BakeTransforms) == 0x000018, "Wrong size on AtomPrimitiveGeometry_BakeTransforms");
static_assert(offsetof(AtomPrimitiveGeometry_BakeTransforms, Transforms) == 0x000000, "Member 'AtomPrimitiveGeometry_BakeTransforms::Transforms' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_BakeTransforms, ReturnValue) == 0x000010, "Member 'AtomPrimitiveGeometry_BakeTransforms::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.SetMaterialName
// 0x0020 (0x0020 - 0x0000)
struct AtomPrimitiveGeometry_SetMaterialName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolygonGroupIndex;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_SetMaterialName) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_SetMaterialName");
static_assert(sizeof(AtomPrimitiveGeometry_SetMaterialName) == 0x000020, "Wrong size on AtomPrimitiveGeometry_SetMaterialName");
static_assert(offsetof(AtomPrimitiveGeometry_SetMaterialName, Name_0) == 0x000000, "Member 'AtomPrimitiveGeometry_SetMaterialName::Name_0' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_SetMaterialName, PolygonGroupIndex) == 0x000010, "Member 'AtomPrimitiveGeometry_SetMaterialName::PolygonGroupIndex' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_SetMaterialName, ReturnValue) == 0x000018, "Member 'AtomPrimitiveGeometry_SetMaterialName::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.SetTiledUVs
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometry_SetTiledUVs final
{
public:
	float                                         TileSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_SetTiledUVs) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_SetTiledUVs");
static_assert(sizeof(AtomPrimitiveGeometry_SetTiledUVs) == 0x000010, "Wrong size on AtomPrimitiveGeometry_SetTiledUVs");
static_assert(offsetof(AtomPrimitiveGeometry_SetTiledUVs, TileSize) == 0x000000, "Member 'AtomPrimitiveGeometry_SetTiledUVs::TileSize' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_SetTiledUVs, ReturnValue) == 0x000008, "Member 'AtomPrimitiveGeometry_SetTiledUVs::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.SetVertexColor
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometry_SetVertexColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_SetVertexColor) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_SetVertexColor");
static_assert(sizeof(AtomPrimitiveGeometry_SetVertexColor) == 0x000010, "Wrong size on AtomPrimitiveGeometry_SetVertexColor");
static_assert(offsetof(AtomPrimitiveGeometry_SetVertexColor, Color) == 0x000000, "Member 'AtomPrimitiveGeometry_SetVertexColor::Color' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_SetVertexColor, ReturnValue) == 0x000008, "Member 'AtomPrimitiveGeometry_SetVertexColor::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.DuplicateGeometry
// 0x0008 (0x0008 - 0x0000)
struct AtomPrimitiveGeometry_DuplicateGeometry final
{
public:
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_DuplicateGeometry) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_DuplicateGeometry");
static_assert(sizeof(AtomPrimitiveGeometry_DuplicateGeometry) == 0x000008, "Wrong size on AtomPrimitiveGeometry_DuplicateGeometry");
static_assert(offsetof(AtomPrimitiveGeometry_DuplicateGeometry, ReturnValue) == 0x000000, "Member 'AtomPrimitiveGeometry_DuplicateGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.GetBoneIndexForName
// 0x0018 (0x0018 - 0x0000)
struct AtomPrimitiveGeometry_GetBoneIndexForName final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomPrimitiveGeometry_GetBoneIndexForName) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_GetBoneIndexForName");
static_assert(sizeof(AtomPrimitiveGeometry_GetBoneIndexForName) == 0x000018, "Wrong size on AtomPrimitiveGeometry_GetBoneIndexForName");
static_assert(offsetof(AtomPrimitiveGeometry_GetBoneIndexForName, BoneName) == 0x000000, "Member 'AtomPrimitiveGeometry_GetBoneIndexForName::BoneName' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_GetBoneIndexForName, ReturnValue) == 0x000010, "Member 'AtomPrimitiveGeometry_GetBoneIndexForName::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.GetMaterialNames
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometry_GetMaterialNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_GetMaterialNames) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_GetMaterialNames");
static_assert(sizeof(AtomPrimitiveGeometry_GetMaterialNames) == 0x000010, "Wrong size on AtomPrimitiveGeometry_GetMaterialNames");
static_assert(offsetof(AtomPrimitiveGeometry_GetMaterialNames, ReturnValue) == 0x000000, "Member 'AtomPrimitiveGeometry_GetMaterialNames::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.SplitByPolygonGroup
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometry_SplitByPolygonGroup final
{
public:
	TArray<class UAtomPrimitiveGeometry*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_SplitByPolygonGroup) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_SplitByPolygonGroup");
static_assert(sizeof(AtomPrimitiveGeometry_SplitByPolygonGroup) == 0x000010, "Wrong size on AtomPrimitiveGeometry_SplitByPolygonGroup");
static_assert(offsetof(AtomPrimitiveGeometry_SplitByPolygonGroup, ReturnValue) == 0x000000, "Member 'AtomPrimitiveGeometry_SplitByPolygonGroup::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometry.ToSimplifiedStaticMesh
// 0x0030 (0x0030 - 0x0000)
struct AtomPrimitiveGeometry_ToSimplifiedStaticMesh final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Outer_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFastBuild;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometry_ToSimplifiedStaticMesh) == 0x000008, "Wrong alignment on AtomPrimitiveGeometry_ToSimplifiedStaticMesh");
static_assert(sizeof(AtomPrimitiveGeometry_ToSimplifiedStaticMesh) == 0x000030, "Wrong size on AtomPrimitiveGeometry_ToSimplifiedStaticMesh");
static_assert(offsetof(AtomPrimitiveGeometry_ToSimplifiedStaticMesh, Scale) == 0x000000, "Member 'AtomPrimitiveGeometry_ToSimplifiedStaticMesh::Scale' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_ToSimplifiedStaticMesh, Outer_0) == 0x000008, "Member 'AtomPrimitiveGeometry_ToSimplifiedStaticMesh::Outer_0' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_ToSimplifiedStaticMesh, Name_0) == 0x000010, "Member 'AtomPrimitiveGeometry_ToSimplifiedStaticMesh::Name_0' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_ToSimplifiedStaticMesh, bFastBuild) == 0x000020, "Member 'AtomPrimitiveGeometry_ToSimplifiedStaticMesh::bFastBuild' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometry_ToSimplifiedStaticMesh, ReturnValue) == 0x000028, "Member 'AtomPrimitiveGeometry_ToSimplifiedStaticMesh::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetCapsGeometry
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetCapsGeometry final
{
public:
	TArray<struct FAtomPrimitiveGeometryAndTransform> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetCapsGeometry) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetCapsGeometry");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetCapsGeometry) == 0x000010, "Wrong size on AtomPrimitiveGeometryContainer_GetCapsGeometry");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetCapsGeometry, ReturnValue) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetCapsGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetDetailsGeometry
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetDetailsGeometry final
{
public:
	TArray<struct FAtomPrimitiveGeometryAndTransform> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetDetailsGeometry) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetDetailsGeometry");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetDetailsGeometry) == 0x000010, "Wrong size on AtomPrimitiveGeometryContainer_GetDetailsGeometry");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetDetailsGeometry, ReturnValue) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetDetailsGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetGeometry
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetGeometry final
{
public:
	EPrimitiveGeometryComplexity                  PrimitiveGeometryComplexity;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetGeometry) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetGeometry");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetGeometry) == 0x000010, "Wrong size on AtomPrimitiveGeometryContainer_GetGeometry");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetGeometry, PrimitiveGeometryComplexity) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetGeometry::PrimitiveGeometryComplexity' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetGeometry, ReturnValue) == 0x000008, "Member 'AtomPrimitiveGeometryContainer_GetGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetGeometryWithMaterialNames
// 0x0030 (0x0030 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames final
{
public:
	EPrimitiveGeometryComplexity                  PrimitiveGeometryComplexity;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ShellMaterial;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UndersideMaterial;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames) == 0x000030, "Wrong size on AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames, PrimitiveGeometryComplexity) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames::PrimitiveGeometryComplexity' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames, ShellMaterial) == 0x000008, "Member 'AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames::ShellMaterial' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames, UndersideMaterial) == 0x000018, "Member 'AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames::UndersideMaterial' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames, ReturnValue) == 0x000028, "Member 'AtomPrimitiveGeometryContainer_GetGeometryWithMaterialNames::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetPartsGeometry
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetPartsGeometry final
{
public:
	TArray<struct FAtomPrimitiveGeometryAndTransform> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetPartsGeometry) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetPartsGeometry");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetPartsGeometry) == 0x000010, "Wrong size on AtomPrimitiveGeometryContainer_GetPartsGeometry");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetPartsGeometry, ReturnValue) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetPartsGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetScaledCapsGeometry
// 0x0018 (0x0018 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetScaledCapsGeometry final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomPrimitiveGeometryAndTransform> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetScaledCapsGeometry) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetScaledCapsGeometry");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetScaledCapsGeometry) == 0x000018, "Wrong size on AtomPrimitiveGeometryContainer_GetScaledCapsGeometry");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetScaledCapsGeometry, Scale) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetScaledCapsGeometry::Scale' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetScaledCapsGeometry, ReturnValue) == 0x000008, "Member 'AtomPrimitiveGeometryContainer_GetScaledCapsGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetScaledDetailsGeometry
// 0x0018 (0x0018 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetScaledDetailsGeometry final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomPrimitiveGeometryAndTransform> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetScaledDetailsGeometry) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetScaledDetailsGeometry");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetScaledDetailsGeometry) == 0x000018, "Wrong size on AtomPrimitiveGeometryContainer_GetScaledDetailsGeometry");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetScaledDetailsGeometry, Scale) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetScaledDetailsGeometry::Scale' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetScaledDetailsGeometry, ReturnValue) == 0x000008, "Member 'AtomPrimitiveGeometryContainer_GetScaledDetailsGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetScaledGeometry
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetScaledGeometry final
{
public:
	EPrimitiveGeometryComplexity                  PrimitiveGeometryComplexity;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitiveGeometry*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetScaledGeometry) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetScaledGeometry");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetScaledGeometry) == 0x000010, "Wrong size on AtomPrimitiveGeometryContainer_GetScaledGeometry");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetScaledGeometry, PrimitiveGeometryComplexity) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetScaledGeometry::PrimitiveGeometryComplexity' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetScaledGeometry, Scale) == 0x000004, "Member 'AtomPrimitiveGeometryContainer_GetScaledGeometry::Scale' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetScaledGeometry, ReturnValue) == 0x000008, "Member 'AtomPrimitiveGeometryContainer_GetScaledGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetScaledShellGeometry
// 0x0050 (0x0050 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetScaledShellGeometry final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtomPrimitiveGeometryAndTransform     ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetScaledShellGeometry) == 0x000010, "Wrong alignment on AtomPrimitiveGeometryContainer_GetScaledShellGeometry");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetScaledShellGeometry) == 0x000050, "Wrong size on AtomPrimitiveGeometryContainer_GetScaledShellGeometry");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetScaledShellGeometry, Scale) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetScaledShellGeometry::Scale' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetScaledShellGeometry, ReturnValue) == 0x000010, "Member 'AtomPrimitiveGeometryContainer_GetScaledShellGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetShellGeometry
// 0x0040 (0x0040 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetShellGeometry final
{
public:
	struct FAtomPrimitiveGeometryAndTransform     ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetShellGeometry) == 0x000010, "Wrong alignment on AtomPrimitiveGeometryContainer_GetShellGeometry");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetShellGeometry) == 0x000040, "Wrong size on AtomPrimitiveGeometryContainer_GetShellGeometry");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetShellGeometry, ReturnValue) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetShellGeometry::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetDefaultBoneTransforms
// 0x0018 (0x0018 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetDefaultBoneTransforms final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetDefaultBoneTransforms) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetDefaultBoneTransforms");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetDefaultBoneTransforms) == 0x000018, "Wrong size on AtomPrimitiveGeometryContainer_GetDefaultBoneTransforms");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetDefaultBoneTransforms, Scale) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetDefaultBoneTransforms::Scale' has a wrong offset!");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetDefaultBoneTransforms, ReturnValue) == 0x000008, "Member 'AtomPrimitiveGeometryContainer_GetDefaultBoneTransforms::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitiveGeometryContainer.GetExportStyleName
// 0x0010 (0x0010 - 0x0000)
struct AtomPrimitiveGeometryContainer_GetExportStyleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitiveGeometryContainer_GetExportStyleName) == 0x000008, "Wrong alignment on AtomPrimitiveGeometryContainer_GetExportStyleName");
static_assert(sizeof(AtomPrimitiveGeometryContainer_GetExportStyleName) == 0x000010, "Wrong size on AtomPrimitiveGeometryContainer_GetExportStyleName");
static_assert(offsetof(AtomPrimitiveGeometryContainer_GetExportStyleName, ReturnValue) == 0x000000, "Member 'AtomPrimitiveGeometryContainer_GetExportStyleName::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomRuntimeBlueprintLibrary.GetAllColorInfo
// 0x0050 (0x0050 - 0x0000)
struct AtomRuntimeBlueprintLibrary_GetAllColorInfo final
{
public:
	TMap<int32, struct FAtomColorInfo>            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomRuntimeBlueprintLibrary_GetAllColorInfo) == 0x000008, "Wrong alignment on AtomRuntimeBlueprintLibrary_GetAllColorInfo");
static_assert(sizeof(AtomRuntimeBlueprintLibrary_GetAllColorInfo) == 0x000050, "Wrong size on AtomRuntimeBlueprintLibrary_GetAllColorInfo");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetAllColorInfo, ReturnValue) == 0x000000, "Member 'AtomRuntimeBlueprintLibrary_GetAllColorInfo::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomRuntimeBlueprintLibrary.GetBitPackForColor
// 0x0008 (0x0008 - 0x0000)
struct AtomRuntimeBlueprintLibrary_GetBitPackForColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomRuntimeBlueprintLibrary_GetBitPackForColor) == 0x000004, "Wrong alignment on AtomRuntimeBlueprintLibrary_GetBitPackForColor");
static_assert(sizeof(AtomRuntimeBlueprintLibrary_GetBitPackForColor) == 0x000008, "Wrong size on AtomRuntimeBlueprintLibrary_GetBitPackForColor");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetBitPackForColor, Color) == 0x000000, "Member 'AtomRuntimeBlueprintLibrary_GetBitPackForColor::Color' has a wrong offset!");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetBitPackForColor, ReturnValue) == 0x000004, "Member 'AtomRuntimeBlueprintLibrary_GetBitPackForColor::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomRuntimeBlueprintLibrary.GetBitPackForColorId
// 0x0008 (0x0008 - 0x0000)
struct AtomRuntimeBlueprintLibrary_GetBitPackForColorId final
{
public:
	int32                                         AtomColorId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomRuntimeBlueprintLibrary_GetBitPackForColorId) == 0x000004, "Wrong alignment on AtomRuntimeBlueprintLibrary_GetBitPackForColorId");
static_assert(sizeof(AtomRuntimeBlueprintLibrary_GetBitPackForColorId) == 0x000008, "Wrong size on AtomRuntimeBlueprintLibrary_GetBitPackForColorId");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetBitPackForColorId, AtomColorId) == 0x000000, "Member 'AtomRuntimeBlueprintLibrary_GetBitPackForColorId::AtomColorId' has a wrong offset!");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetBitPackForColorId, ReturnValue) == 0x000004, "Member 'AtomRuntimeBlueprintLibrary_GetBitPackForColorId::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomRuntimeBlueprintLibrary.GetCommonPartAssetDescriptionFromStaticMesh
// 0x0018 (0x0018 - 0x0000)
struct AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomCommonPartAssetDescription        OutDescription;                                    // 0x0008(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EGetCommonPartDescriptionResult               OutIsValid;                                        // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh) == 0x000008, "Wrong alignment on AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh");
static_assert(sizeof(AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh) == 0x000018, "Wrong size on AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh, StaticMesh) == 0x000000, "Member 'AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh::StaticMesh' has a wrong offset!");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh, OutDescription) == 0x000008, "Member 'AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh::OutDescription' has a wrong offset!");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh, OutIsValid) == 0x000014, "Member 'AtomRuntimeBlueprintLibrary_GetCommonPartAssetDescriptionFromStaticMesh::OutIsValid' has a wrong offset!");

// Function AtomRuntime.AtomRuntimeBlueprintLibrary.GetCommonPartCategoryFromType
// 0x0002 (0x0002 - 0x0000)
struct AtomRuntimeBlueprintLibrary_GetCommonPartCategoryFromType final
{
public:
	EAtomCommonPartType                           CommonPartType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtomCommonPartCategory                       ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomRuntimeBlueprintLibrary_GetCommonPartCategoryFromType) == 0x000001, "Wrong alignment on AtomRuntimeBlueprintLibrary_GetCommonPartCategoryFromType");
static_assert(sizeof(AtomRuntimeBlueprintLibrary_GetCommonPartCategoryFromType) == 0x000002, "Wrong size on AtomRuntimeBlueprintLibrary_GetCommonPartCategoryFromType");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetCommonPartCategoryFromType, CommonPartType) == 0x000000, "Member 'AtomRuntimeBlueprintLibrary_GetCommonPartCategoryFromType::CommonPartType' has a wrong offset!");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetCommonPartCategoryFromType, ReturnValue) == 0x000001, "Member 'AtomRuntimeBlueprintLibrary_GetCommonPartCategoryFromType::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomRuntimeBlueprintLibrary.GetCommonPartDescriptionFromType
// 0x0014 (0x0014 - 0x0000)
struct AtomRuntimeBlueprintLibrary_GetCommonPartDescriptionFromType final
{
public:
	EAtomCommonPartType                           CommonPartType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtomCommonPartDescription             OutDescription;                                    // 0x0004(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomRuntimeBlueprintLibrary_GetCommonPartDescriptionFromType) == 0x000004, "Wrong alignment on AtomRuntimeBlueprintLibrary_GetCommonPartDescriptionFromType");
static_assert(sizeof(AtomRuntimeBlueprintLibrary_GetCommonPartDescriptionFromType) == 0x000014, "Wrong size on AtomRuntimeBlueprintLibrary_GetCommonPartDescriptionFromType");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetCommonPartDescriptionFromType, CommonPartType) == 0x000000, "Member 'AtomRuntimeBlueprintLibrary_GetCommonPartDescriptionFromType::CommonPartType' has a wrong offset!");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetCommonPartDescriptionFromType, OutDescription) == 0x000004, "Member 'AtomRuntimeBlueprintLibrary_GetCommonPartDescriptionFromType::OutDescription' has a wrong offset!");

// Function AtomRuntime.AtomRuntimeBlueprintLibrary.GetInfoForColorId
// 0x0030 (0x0030 - 0x0000)
struct AtomRuntimeBlueprintLibrary_GetInfoForColorId final
{
public:
	int32                                         ColorId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtomColorInfo                         ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomRuntimeBlueprintLibrary_GetInfoForColorId) == 0x000008, "Wrong alignment on AtomRuntimeBlueprintLibrary_GetInfoForColorId");
static_assert(sizeof(AtomRuntimeBlueprintLibrary_GetInfoForColorId) == 0x000030, "Wrong size on AtomRuntimeBlueprintLibrary_GetInfoForColorId");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetInfoForColorId, ColorId) == 0x000000, "Member 'AtomRuntimeBlueprintLibrary_GetInfoForColorId::ColorId' has a wrong offset!");
static_assert(offsetof(AtomRuntimeBlueprintLibrary_GetInfoForColorId, ReturnValue) == 0x000008, "Member 'AtomRuntimeBlueprintLibrary_GetInfoForColorId::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomRuntimeSettings.GetColorDataTable
// 0x0008 (0x0008 - 0x0000)
struct AtomRuntimeSettings_GetColorDataTable final
{
public:
	const class UDataTable*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomRuntimeSettings_GetColorDataTable) == 0x000008, "Wrong alignment on AtomRuntimeSettings_GetColorDataTable");
static_assert(sizeof(AtomRuntimeSettings_GetColorDataTable) == 0x000008, "Wrong size on AtomRuntimeSettings_GetColorDataTable");
static_assert(offsetof(AtomRuntimeSettings_GetColorDataTable, ReturnValue) == 0x000000, "Member 'AtomRuntimeSettings_GetColorDataTable::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.DisconnectAllObjectConnections
// 0x0004 (0x0004 - 0x0000)
struct WorldConnectivitySubsystem_DisconnectAllObjectConnections final
{
public:
	struct FWorldConnectivityHandle               Object;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_DisconnectAllObjectConnections) == 0x000004, "Wrong alignment on WorldConnectivitySubsystem_DisconnectAllObjectConnections");
static_assert(sizeof(WorldConnectivitySubsystem_DisconnectAllObjectConnections) == 0x000004, "Wrong size on WorldConnectivitySubsystem_DisconnectAllObjectConnections");
static_assert(offsetof(WorldConnectivitySubsystem_DisconnectAllObjectConnections, Object) == 0x000000, "Member 'WorldConnectivitySubsystem_DisconnectAllObjectConnections::Object' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.DisconnectObjects
// 0x0008 (0x0008 - 0x0000)
struct WorldConnectivitySubsystem_DisconnectObjects final
{
public:
	struct FWorldConnectivityHandle               ObjectA;                                           // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWorldConnectivityHandle               ObjectB;                                           // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_DisconnectObjects) == 0x000004, "Wrong alignment on WorldConnectivitySubsystem_DisconnectObjects");
static_assert(sizeof(WorldConnectivitySubsystem_DisconnectObjects) == 0x000008, "Wrong size on WorldConnectivitySubsystem_DisconnectObjects");
static_assert(offsetof(WorldConnectivitySubsystem_DisconnectObjects, ObjectA) == 0x000000, "Member 'WorldConnectivitySubsystem_DisconnectObjects::ObjectA' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_DisconnectObjects, ObjectB) == 0x000004, "Member 'WorldConnectivitySubsystem_DisconnectObjects::ObjectB' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetAtomModelAssetUserData
// 0x0010 (0x0010 - 0x0000)
struct WorldConnectivitySubsystem_GetAtomModelAssetUserData final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomModelAssetUserData*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_GetAtomModelAssetUserData) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_GetAtomModelAssetUserData");
static_assert(sizeof(WorldConnectivitySubsystem_GetAtomModelAssetUserData) == 0x000010, "Wrong size on WorldConnectivitySubsystem_GetAtomModelAssetUserData");
static_assert(offsetof(WorldConnectivitySubsystem_GetAtomModelAssetUserData, Object) == 0x000000, "Member 'WorldConnectivitySubsystem_GetAtomModelAssetUserData::Object' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetAtomModelAssetUserData, ReturnValue) == 0x000008, "Member 'WorldConnectivitySubsystem_GetAtomModelAssetUserData::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetClosestFieldToPoint
// 0x00C0 (0x00C0 - 0x0000)
struct WorldConnectivitySubsystem_GetClosestFieldToPoint final
{
public:
	struct FWorldConnectivityHandle               Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConnectionFieldGender                        Type;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0xE];                                       // 0x0022(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanarFieldInfo                       ReturnValue;                                       // 0x0030(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_GetClosestFieldToPoint) == 0x000010, "Wrong alignment on WorldConnectivitySubsystem_GetClosestFieldToPoint");
static_assert(sizeof(WorldConnectivitySubsystem_GetClosestFieldToPoint) == 0x0000C0, "Wrong size on WorldConnectivitySubsystem_GetClosestFieldToPoint");
static_assert(offsetof(WorldConnectivitySubsystem_GetClosestFieldToPoint, Handle) == 0x000000, "Member 'WorldConnectivitySubsystem_GetClosestFieldToPoint::Handle' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetClosestFieldToPoint, WorldLocation) == 0x000008, "Member 'WorldConnectivitySubsystem_GetClosestFieldToPoint::WorldLocation' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetClosestFieldToPoint, Type) == 0x000020, "Member 'WorldConnectivitySubsystem_GetClosestFieldToPoint::Type' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetClosestFieldToPoint, bSuccess) == 0x000021, "Member 'WorldConnectivitySubsystem_GetClosestFieldToPoint::bSuccess' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetClosestFieldToPoint, ReturnValue) == 0x000030, "Member 'WorldConnectivitySubsystem_GetClosestFieldToPoint::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetConnectedObjects
// 0x0018 (0x0018 - 0x0000)
struct WorldConnectivitySubsystem_GetConnectedObjects final
{
public:
	struct FWorldConnectivityHandle               Object;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorldConnectivityHandle>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_GetConnectedObjects) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_GetConnectedObjects");
static_assert(sizeof(WorldConnectivitySubsystem_GetConnectedObjects) == 0x000018, "Wrong size on WorldConnectivitySubsystem_GetConnectedObjects");
static_assert(offsetof(WorldConnectivitySubsystem_GetConnectedObjects, Object) == 0x000000, "Member 'WorldConnectivitySubsystem_GetConnectedObjects::Object' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetConnectedObjects, ReturnValue) == 0x000008, "Member 'WorldConnectivitySubsystem_GetConnectedObjects::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetConnectedObjectsRecursively
// 0x0018 (0x0018 - 0x0000)
struct WorldConnectivitySubsystem_GetConnectedObjectsRecursively final
{
public:
	struct FWorldConnectivityHandle               Object;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorldConnectivityHandle>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_GetConnectedObjectsRecursively) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_GetConnectedObjectsRecursively");
static_assert(sizeof(WorldConnectivitySubsystem_GetConnectedObjectsRecursively) == 0x000018, "Wrong size on WorldConnectivitySubsystem_GetConnectedObjectsRecursively");
static_assert(offsetof(WorldConnectivitySubsystem_GetConnectedObjectsRecursively, Object) == 0x000000, "Member 'WorldConnectivitySubsystem_GetConnectedObjectsRecursively::Object' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetConnectedObjectsRecursively, ReturnValue) == 0x000008, "Member 'WorldConnectivitySubsystem_GetConnectedObjectsRecursively::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetOverlapPenetrationDepth
// 0x0040 (0x0040 - 0x0000)
struct WorldConnectivitySubsystem_GetOverlapPenetrationDepth final
{
public:
	class AStaticMeshActor*                       Actor1;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStaticMeshActor*                       Actor2;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_GetOverlapPenetrationDepth) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_GetOverlapPenetrationDepth");
static_assert(sizeof(WorldConnectivitySubsystem_GetOverlapPenetrationDepth) == 0x000040, "Wrong size on WorldConnectivitySubsystem_GetOverlapPenetrationDepth");
static_assert(offsetof(WorldConnectivitySubsystem_GetOverlapPenetrationDepth, Actor1) == 0x000000, "Member 'WorldConnectivitySubsystem_GetOverlapPenetrationDepth::Actor1' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetOverlapPenetrationDepth, Actor2) == 0x000008, "Member 'WorldConnectivitySubsystem_GetOverlapPenetrationDepth::Actor2' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetOverlapPenetrationDepth, Offset) == 0x000010, "Member 'WorldConnectivitySubsystem_GetOverlapPenetrationDepth::Offset' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetOverlapPenetrationDepth, ReturnValue) == 0x000028, "Member 'WorldConnectivitySubsystem_GetOverlapPenetrationDepth::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetPlanarFieldCenter
// 0x00B0 (0x00B0 - 0x0000)
struct WorldConnectivitySubsystem_GetPlanarFieldCenter final
{
public:
	struct FPlanarFieldInfo                       Field;                                             // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorldConnectivitySubsystem_GetPlanarFieldCenter) == 0x000010, "Wrong alignment on WorldConnectivitySubsystem_GetPlanarFieldCenter");
static_assert(sizeof(WorldConnectivitySubsystem_GetPlanarFieldCenter) == 0x0000B0, "Wrong size on WorldConnectivitySubsystem_GetPlanarFieldCenter");
static_assert(offsetof(WorldConnectivitySubsystem_GetPlanarFieldCenter, Field) == 0x000000, "Member 'WorldConnectivitySubsystem_GetPlanarFieldCenter::Field' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetPlanarFieldCenter, ReturnValue) == 0x000090, "Member 'WorldConnectivitySubsystem_GetPlanarFieldCenter::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetPlanarFields
// 0x0018 (0x0018 - 0x0000)
struct WorldConnectivitySubsystem_GetPlanarFields final
{
public:
	struct FWorldConnectivityHandle               Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EConnectionFieldGender                        Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlanarFieldInfo>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_GetPlanarFields) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_GetPlanarFields");
static_assert(sizeof(WorldConnectivitySubsystem_GetPlanarFields) == 0x000018, "Wrong size on WorldConnectivitySubsystem_GetPlanarFields");
static_assert(offsetof(WorldConnectivitySubsystem_GetPlanarFields, Handle) == 0x000000, "Member 'WorldConnectivitySubsystem_GetPlanarFields::Handle' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetPlanarFields, Type) == 0x000004, "Member 'WorldConnectivitySubsystem_GetPlanarFields::Type' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetPlanarFields, ReturnValue) == 0x000008, "Member 'WorldConnectivitySubsystem_GetPlanarFields::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.RegisterConnectivityActor
// 0x0010 (0x0010 - 0x0000)
struct WorldConnectivitySubsystem_RegisterConnectivityActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAtomModel*                       Model;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_RegisterConnectivityActor) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_RegisterConnectivityActor");
static_assert(sizeof(WorldConnectivitySubsystem_RegisterConnectivityActor) == 0x000010, "Wrong size on WorldConnectivitySubsystem_RegisterConnectivityActor");
static_assert(offsetof(WorldConnectivitySubsystem_RegisterConnectivityActor, Actor) == 0x000000, "Member 'WorldConnectivitySubsystem_RegisterConnectivityActor::Actor' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_RegisterConnectivityActor, Model) == 0x000008, "Member 'WorldConnectivitySubsystem_RegisterConnectivityActor::Model' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.RegisterCustomConnectivityActor
// 0x0028 (0x0028 - 0x0000)
struct WorldConnectivitySubsystem_RegisterCustomConnectivityActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSerializedConnectivityObjects         ConnectivityObject;                                // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_RegisterCustomConnectivityActor) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_RegisterCustomConnectivityActor");
static_assert(sizeof(WorldConnectivitySubsystem_RegisterCustomConnectivityActor) == 0x000028, "Wrong size on WorldConnectivitySubsystem_RegisterCustomConnectivityActor");
static_assert(offsetof(WorldConnectivitySubsystem_RegisterCustomConnectivityActor, Actor) == 0x000000, "Member 'WorldConnectivitySubsystem_RegisterCustomConnectivityActor::Actor' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_RegisterCustomConnectivityActor, ConnectivityObject) == 0x000008, "Member 'WorldConnectivitySubsystem_RegisterCustomConnectivityActor::ConnectivityObject' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.RegisterModelActor
// 0x0028 (0x0028 - 0x0000)
struct WorldConnectivitySubsystem_RegisterModelActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSerializedConnectivityObjects         Connections;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_RegisterModelActor) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_RegisterModelActor");
static_assert(sizeof(WorldConnectivitySubsystem_RegisterModelActor) == 0x000028, "Wrong size on WorldConnectivitySubsystem_RegisterModelActor");
static_assert(offsetof(WorldConnectivitySubsystem_RegisterModelActor, Actor) == 0x000000, "Member 'WorldConnectivitySubsystem_RegisterModelActor::Actor' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_RegisterModelActor, Connections) == 0x000008, "Member 'WorldConnectivitySubsystem_RegisterModelActor::Connections' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.RunPlanarConnectivityQuery
// 0x0058 (0x0058 - 0x0000)
struct WorldConnectivitySubsystem_RunPlanarConnectivityQuery final
{
public:
	const class AActor*                           AtomModelActorToPlace;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           AtomModelActorToConnect;                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                QueryStartLocation;                                // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                QueryEndLocation;                                  // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             QueryCollisionChannel;                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QueryRadius;                                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FConnectivityQueryResult>       ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_RunPlanarConnectivityQuery) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_RunPlanarConnectivityQuery");
static_assert(sizeof(WorldConnectivitySubsystem_RunPlanarConnectivityQuery) == 0x000058, "Wrong size on WorldConnectivitySubsystem_RunPlanarConnectivityQuery");
static_assert(offsetof(WorldConnectivitySubsystem_RunPlanarConnectivityQuery, AtomModelActorToPlace) == 0x000000, "Member 'WorldConnectivitySubsystem_RunPlanarConnectivityQuery::AtomModelActorToPlace' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_RunPlanarConnectivityQuery, AtomModelActorToConnect) == 0x000008, "Member 'WorldConnectivitySubsystem_RunPlanarConnectivityQuery::AtomModelActorToConnect' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_RunPlanarConnectivityQuery, QueryStartLocation) == 0x000010, "Member 'WorldConnectivitySubsystem_RunPlanarConnectivityQuery::QueryStartLocation' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_RunPlanarConnectivityQuery, QueryEndLocation) == 0x000028, "Member 'WorldConnectivitySubsystem_RunPlanarConnectivityQuery::QueryEndLocation' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_RunPlanarConnectivityQuery, QueryCollisionChannel) == 0x000040, "Member 'WorldConnectivitySubsystem_RunPlanarConnectivityQuery::QueryCollisionChannel' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_RunPlanarConnectivityQuery, QueryRadius) == 0x000044, "Member 'WorldConnectivitySubsystem_RunPlanarConnectivityQuery::QueryRadius' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_RunPlanarConnectivityQuery, ReturnValue) == 0x000048, "Member 'WorldConnectivitySubsystem_RunPlanarConnectivityQuery::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.TryConnectObjectAtLocation
// 0x0090 (0x0090 - 0x0000)
struct WorldConnectivitySubsystem_TryConnectObjectAtLocation final
{
public:
	struct FWorldConnectivityHandle               ObjectToConnect;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DesiredObjectTransform;                            // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWorldConnectivityHandle>       ConnectionCandidates;                              // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          PerformConnection;                                 // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0xE];                                       // 0x0082(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorldConnectivitySubsystem_TryConnectObjectAtLocation) == 0x000010, "Wrong alignment on WorldConnectivitySubsystem_TryConnectObjectAtLocation");
static_assert(sizeof(WorldConnectivitySubsystem_TryConnectObjectAtLocation) == 0x000090, "Wrong size on WorldConnectivitySubsystem_TryConnectObjectAtLocation");
static_assert(offsetof(WorldConnectivitySubsystem_TryConnectObjectAtLocation, ObjectToConnect) == 0x000000, "Member 'WorldConnectivitySubsystem_TryConnectObjectAtLocation::ObjectToConnect' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_TryConnectObjectAtLocation, DesiredObjectTransform) == 0x000010, "Member 'WorldConnectivitySubsystem_TryConnectObjectAtLocation::DesiredObjectTransform' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_TryConnectObjectAtLocation, ConnectionCandidates) == 0x000070, "Member 'WorldConnectivitySubsystem_TryConnectObjectAtLocation::ConnectionCandidates' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_TryConnectObjectAtLocation, PerformConnection) == 0x000080, "Member 'WorldConnectivitySubsystem_TryConnectObjectAtLocation::PerformConnection' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_TryConnectObjectAtLocation, ReturnValue) == 0x000081, "Member 'WorldConnectivitySubsystem_TryConnectObjectAtLocation::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.UnregisterConnectivityActor
// 0x0008 (0x0008 - 0x0000)
struct WorldConnectivitySubsystem_UnregisterConnectivityActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_UnregisterConnectivityActor) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_UnregisterConnectivityActor");
static_assert(sizeof(WorldConnectivitySubsystem_UnregisterConnectivityActor) == 0x000008, "Wrong size on WorldConnectivitySubsystem_UnregisterConnectivityActor");
static_assert(offsetof(WorldConnectivitySubsystem_UnregisterConnectivityActor, Actor) == 0x000000, "Member 'WorldConnectivitySubsystem_UnregisterConnectivityActor::Actor' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetActor
// 0x0010 (0x0010 - 0x0000)
struct WorldConnectivitySubsystem_GetActor final
{
public:
	struct FWorldConnectivityHandle               Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_GetActor) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_GetActor");
static_assert(sizeof(WorldConnectivitySubsystem_GetActor) == 0x000010, "Wrong size on WorldConnectivitySubsystem_GetActor");
static_assert(offsetof(WorldConnectivitySubsystem_GetActor, Handle) == 0x000000, "Member 'WorldConnectivitySubsystem_GetActor::Handle' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetActor, ReturnValue) == 0x000008, "Member 'WorldConnectivitySubsystem_GetActor::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetConnectivityHandle
// 0x0010 (0x0010 - 0x0000)
struct WorldConnectivitySubsystem_GetConnectivityHandle final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWorldConnectivityHandle               ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorldConnectivitySubsystem_GetConnectivityHandle) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_GetConnectivityHandle");
static_assert(sizeof(WorldConnectivitySubsystem_GetConnectivityHandle) == 0x000010, "Wrong size on WorldConnectivitySubsystem_GetConnectivityHandle");
static_assert(offsetof(WorldConnectivitySubsystem_GetConnectivityHandle, Actor) == 0x000000, "Member 'WorldConnectivitySubsystem_GetConnectivityHandle::Actor' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetConnectivityHandle, ReturnValue) == 0x000008, "Member 'WorldConnectivitySubsystem_GetConnectivityHandle::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetConnectivityHandles
// 0x0018 (0x0018 - 0x0000)
struct WorldConnectivitySubsystem_GetConnectivityHandles final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWorldConnectivityHandle>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_GetConnectivityHandles) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_GetConnectivityHandles");
static_assert(sizeof(WorldConnectivitySubsystem_GetConnectivityHandles) == 0x000018, "Wrong size on WorldConnectivitySubsystem_GetConnectivityHandles");
static_assert(offsetof(WorldConnectivitySubsystem_GetConnectivityHandles, Actor) == 0x000000, "Member 'WorldConnectivitySubsystem_GetConnectivityHandles::Actor' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetConnectivityHandles, ReturnValue) == 0x000008, "Member 'WorldConnectivitySubsystem_GetConnectivityHandles::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.GetTransform
// 0x0070 (0x0070 - 0x0000)
struct WorldConnectivitySubsystem_GetTransform final
{
public:
	struct FWorldConnectivityHandle               Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_GetTransform) == 0x000010, "Wrong alignment on WorldConnectivitySubsystem_GetTransform");
static_assert(sizeof(WorldConnectivitySubsystem_GetTransform) == 0x000070, "Wrong size on WorldConnectivitySubsystem_GetTransform");
static_assert(offsetof(WorldConnectivitySubsystem_GetTransform, Handle) == 0x000000, "Member 'WorldConnectivitySubsystem_GetTransform::Handle' has a wrong offset!");
static_assert(offsetof(WorldConnectivitySubsystem_GetTransform, ReturnValue) == 0x000010, "Member 'WorldConnectivitySubsystem_GetTransform::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivitySubsystem.PlanarGridStepSize
// 0x0008 (0x0008 - 0x0000)
struct WorldConnectivitySubsystem_PlanarGridStepSize final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivitySubsystem_PlanarGridStepSize) == 0x000008, "Wrong alignment on WorldConnectivitySubsystem_PlanarGridStepSize");
static_assert(sizeof(WorldConnectivitySubsystem_PlanarGridStepSize) == 0x000008, "Wrong size on WorldConnectivitySubsystem_PlanarGridStepSize");
static_assert(offsetof(WorldConnectivitySubsystem_PlanarGridStepSize, ReturnValue) == 0x000000, "Member 'WorldConnectivitySubsystem_PlanarGridStepSize::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivityBlueprintLibrary.GetActor
// 0x0018 (0x0018 - 0x0000)
struct WorldConnectivityBlueprintLibrary_GetActor final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWorldConnectivityHandle               Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivityBlueprintLibrary_GetActor) == 0x000008, "Wrong alignment on WorldConnectivityBlueprintLibrary_GetActor");
static_assert(sizeof(WorldConnectivityBlueprintLibrary_GetActor) == 0x000018, "Wrong size on WorldConnectivityBlueprintLibrary_GetActor");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_GetActor, WorldContext) == 0x000000, "Member 'WorldConnectivityBlueprintLibrary_GetActor::WorldContext' has a wrong offset!");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_GetActor, Handle) == 0x000008, "Member 'WorldConnectivityBlueprintLibrary_GetActor::Handle' has a wrong offset!");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_GetActor, ReturnValue) == 0x000010, "Member 'WorldConnectivityBlueprintLibrary_GetActor::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivityBlueprintLibrary.GetFieldCenter
// 0x00C0 (0x00C0 - 0x0000)
struct WorldConnectivityBlueprintLibrary_GetFieldCenter final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlanarFieldInfo                       Field;                                             // 0x0010(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00A0(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorldConnectivityBlueprintLibrary_GetFieldCenter) == 0x000010, "Wrong alignment on WorldConnectivityBlueprintLibrary_GetFieldCenter");
static_assert(sizeof(WorldConnectivityBlueprintLibrary_GetFieldCenter) == 0x0000C0, "Wrong size on WorldConnectivityBlueprintLibrary_GetFieldCenter");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_GetFieldCenter, WorldContext) == 0x000000, "Member 'WorldConnectivityBlueprintLibrary_GetFieldCenter::WorldContext' has a wrong offset!");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_GetFieldCenter, Field) == 0x000010, "Member 'WorldConnectivityBlueprintLibrary_GetFieldCenter::Field' has a wrong offset!");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_GetFieldCenter, ReturnValue) == 0x0000A0, "Member 'WorldConnectivityBlueprintLibrary_GetFieldCenter::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivityBlueprintLibrary.GetTransform
// 0x0070 (0x0070 - 0x0000)
struct WorldConnectivityBlueprintLibrary_GetTransform final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWorldConnectivityHandle               Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldConnectivityBlueprintLibrary_GetTransform) == 0x000010, "Wrong alignment on WorldConnectivityBlueprintLibrary_GetTransform");
static_assert(sizeof(WorldConnectivityBlueprintLibrary_GetTransform) == 0x000070, "Wrong size on WorldConnectivityBlueprintLibrary_GetTransform");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_GetTransform, WorldContext) == 0x000000, "Member 'WorldConnectivityBlueprintLibrary_GetTransform::WorldContext' has a wrong offset!");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_GetTransform, Handle) == 0x000008, "Member 'WorldConnectivityBlueprintLibrary_GetTransform::Handle' has a wrong offset!");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_GetTransform, ReturnValue) == 0x000010, "Member 'WorldConnectivityBlueprintLibrary_GetTransform::ReturnValue' has a wrong offset!");

// Function AtomRuntime.WorldConnectivityBlueprintLibrary.IsValid
// 0x0008 (0x0008 - 0x0000)
struct WorldConnectivityBlueprintLibrary_IsValid final
{
public:
	struct FWorldConnectivityHandle               Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorldConnectivityBlueprintLibrary_IsValid) == 0x000004, "Wrong alignment on WorldConnectivityBlueprintLibrary_IsValid");
static_assert(sizeof(WorldConnectivityBlueprintLibrary_IsValid) == 0x000008, "Wrong size on WorldConnectivityBlueprintLibrary_IsValid");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_IsValid, Handle) == 0x000000, "Member 'WorldConnectivityBlueprintLibrary_IsValid::Handle' has a wrong offset!");
static_assert(offsetof(WorldConnectivityBlueprintLibrary_IsValid, ReturnValue) == 0x000004, "Member 'WorldConnectivityBlueprintLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModel.GetChildIdentifier
// 0x0018 (0x0018 - 0x0000)
struct AtomModel_GetChildIdentifier final
{
public:
	int32                                         InChildIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModel_GetChildIdentifier) == 0x000008, "Wrong alignment on AtomModel_GetChildIdentifier");
static_assert(sizeof(AtomModel_GetChildIdentifier) == 0x000018, "Wrong size on AtomModel_GetChildIdentifier");
static_assert(offsetof(AtomModel_GetChildIdentifier, InChildIdx) == 0x000000, "Member 'AtomModel_GetChildIdentifier::InChildIdx' has a wrong offset!");
static_assert(offsetof(AtomModel_GetChildIdentifier, ReturnValue) == 0x000008, "Member 'AtomModel_GetChildIdentifier::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModel.GetPrimitivesForChildArray
// 0x0018 (0x0018 - 0x0000)
struct AtomModel_GetPrimitivesForChildArray final
{
public:
	int32                                         InChildIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomModelPrimitiveInstance>    OutPrimitives;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModel_GetPrimitivesForChildArray) == 0x000008, "Wrong alignment on AtomModel_GetPrimitivesForChildArray");
static_assert(sizeof(AtomModel_GetPrimitivesForChildArray) == 0x000018, "Wrong size on AtomModel_GetPrimitivesForChildArray");
static_assert(offsetof(AtomModel_GetPrimitivesForChildArray, InChildIdx) == 0x000000, "Member 'AtomModel_GetPrimitivesForChildArray::InChildIdx' has a wrong offset!");
static_assert(offsetof(AtomModel_GetPrimitivesForChildArray, OutPrimitives) == 0x000008, "Member 'AtomModel_GetPrimitivesForChildArray::OutPrimitives' has a wrong offset!");

// Function AtomRuntime.AtomModel.GetGeneratedMergedMeshes
// 0x0010 (0x0010 - 0x0000)
struct AtomModel_GetGeneratedMergedMeshes final
{
public:
	TArray<TSoftObjectPtr<class UStaticMesh>>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModel_GetGeneratedMergedMeshes) == 0x000008, "Wrong alignment on AtomModel_GetGeneratedMergedMeshes");
static_assert(sizeof(AtomModel_GetGeneratedMergedMeshes) == 0x000010, "Wrong size on AtomModel_GetGeneratedMergedMeshes");
static_assert(offsetof(AtomModel_GetGeneratedMergedMeshes, ReturnValue) == 0x000000, "Member 'AtomModel_GetGeneratedMergedMeshes::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModel.GetModelName
// 0x0010 (0x0010 - 0x0000)
struct AtomModel_GetModelName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModel_GetModelName) == 0x000008, "Wrong alignment on AtomModel_GetModelName");
static_assert(sizeof(AtomModel_GetModelName) == 0x000010, "Wrong size on AtomModel_GetModelName");
static_assert(offsetof(AtomModel_GetModelName, ReturnValue) == 0x000000, "Member 'AtomModel_GetModelName::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModel.GetModelPath
// 0x0010 (0x0010 - 0x0000)
struct AtomModel_GetModelPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModel_GetModelPath) == 0x000008, "Wrong alignment on AtomModel_GetModelPath");
static_assert(sizeof(AtomModel_GetModelPath) == 0x000010, "Wrong size on AtomModel_GetModelPath");
static_assert(offsetof(AtomModel_GetModelPath, ReturnValue) == 0x000000, "Member 'AtomModel_GetModelPath::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModel.GetPartsCollection
// 0x0080 (0x0080 - 0x0000)
struct AtomModel_GetPartsCollection final
{
public:
	struct FAtomModelPartsCollection              ReturnValue;                                       // 0x0000(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModel_GetPartsCollection) == 0x000010, "Wrong alignment on AtomModel_GetPartsCollection");
static_assert(sizeof(AtomModel_GetPartsCollection) == 0x000080, "Wrong size on AtomModel_GetPartsCollection");
static_assert(offsetof(AtomModel_GetPartsCollection, ReturnValue) == 0x000000, "Member 'AtomModel_GetPartsCollection::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModel.GetTextureForDecorationTextureName
// 0x0018 (0x0018 - 0x0000)
struct AtomModel_GetTextureForDecorationTextureName final
{
public:
	class FString                                 TextureName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModel_GetTextureForDecorationTextureName) == 0x000008, "Wrong alignment on AtomModel_GetTextureForDecorationTextureName");
static_assert(sizeof(AtomModel_GetTextureForDecorationTextureName) == 0x000018, "Wrong size on AtomModel_GetTextureForDecorationTextureName");
static_assert(offsetof(AtomModel_GetTextureForDecorationTextureName, TextureName) == 0x000000, "Member 'AtomModel_GetTextureForDecorationTextureName::TextureName' has a wrong offset!");
static_assert(offsetof(AtomModel_GetTextureForDecorationTextureName, ReturnValue) == 0x000010, "Member 'AtomModel_GetTextureForDecorationTextureName::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModelProcessor.IncrementProgress
// 0x0018 (0x0018 - 0x0000)
struct AtomModelProcessor_IncrementProgress final
{
public:
	int32                                         NumSteps;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModelProcessor_IncrementProgress) == 0x000008, "Wrong alignment on AtomModelProcessor_IncrementProgress");
static_assert(sizeof(AtomModelProcessor_IncrementProgress) == 0x000018, "Wrong size on AtomModelProcessor_IncrementProgress");
static_assert(offsetof(AtomModelProcessor_IncrementProgress, NumSteps) == 0x000000, "Member 'AtomModelProcessor_IncrementProgress::NumSteps' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_IncrementProgress, Message) == 0x000008, "Member 'AtomModelProcessor_IncrementProgress::Message' has a wrong offset!");

// Function AtomRuntime.AtomModelProcessor.OnGetProcessModelTargetAssetPath
// 0x00A0 (0x00A0 - 0x0000)
struct AtomModelProcessor_OnGetProcessModelTargetAssetPath final
{
public:
	class UAtomModel*                             Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtomModelPartsCollection              AtomModelPartsCollection;                          // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModelProcessor_OnGetProcessModelTargetAssetPath) == 0x000010, "Wrong alignment on AtomModelProcessor_OnGetProcessModelTargetAssetPath");
static_assert(sizeof(AtomModelProcessor_OnGetProcessModelTargetAssetPath) == 0x0000A0, "Wrong size on AtomModelProcessor_OnGetProcessModelTargetAssetPath");
static_assert(offsetof(AtomModelProcessor_OnGetProcessModelTargetAssetPath, Model) == 0x000000, "Member 'AtomModelProcessor_OnGetProcessModelTargetAssetPath::Model' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnGetProcessModelTargetAssetPath, AtomModelPartsCollection) == 0x000010, "Member 'AtomModelProcessor_OnGetProcessModelTargetAssetPath::AtomModelPartsCollection' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnGetProcessModelTargetAssetPath, ReturnValue) == 0x000090, "Member 'AtomModelProcessor_OnGetProcessModelTargetAssetPath::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModelProcessor.OnGetProcessPrimitiveTargetAssetPath
// 0x00B0 (0x00B0 - 0x0000)
struct AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath final
{
public:
	class UAtomModel*                             Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitive*                         Primitive;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartsCollection              AtomModelPartsCollection;                          // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAtomOnProcessPrimitiveSettings        Settings;                                          // 0x0090(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath) == 0x000010, "Wrong alignment on AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath");
static_assert(sizeof(AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath) == 0x0000B0, "Wrong size on AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath");
static_assert(offsetof(AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath, Model) == 0x000000, "Member 'AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath::Model' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath, Primitive) == 0x000008, "Member 'AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath::Primitive' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath, AtomModelPartsCollection) == 0x000010, "Member 'AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath::AtomModelPartsCollection' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath, Settings) == 0x000090, "Member 'AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath::Settings' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath, ReturnValue) == 0x000098, "Member 'AtomModelProcessor_OnGetProcessPrimitiveTargetAssetPath::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModelProcessor.OnGetTargetAssetPath
// 0x00A0 (0x00A0 - 0x0000)
struct AtomModelProcessor_OnGetTargetAssetPath final
{
public:
	class UAtomModel*                             Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitive*                         Primitive;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartsCollection              AtomModelPartsCollection;                          // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModelProcessor_OnGetTargetAssetPath) == 0x000010, "Wrong alignment on AtomModelProcessor_OnGetTargetAssetPath");
static_assert(sizeof(AtomModelProcessor_OnGetTargetAssetPath) == 0x0000A0, "Wrong size on AtomModelProcessor_OnGetTargetAssetPath");
static_assert(offsetof(AtomModelProcessor_OnGetTargetAssetPath, Model) == 0x000000, "Member 'AtomModelProcessor_OnGetTargetAssetPath::Model' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnGetTargetAssetPath, Primitive) == 0x000008, "Member 'AtomModelProcessor_OnGetTargetAssetPath::Primitive' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnGetTargetAssetPath, AtomModelPartsCollection) == 0x000010, "Member 'AtomModelProcessor_OnGetTargetAssetPath::AtomModelPartsCollection' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnGetTargetAssetPath, ReturnValue) == 0x000090, "Member 'AtomModelProcessor_OnGetTargetAssetPath::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModelProcessor.OnProcessModel
// 0x00D0 (0x00D0 - 0x0000)
struct AtomModelProcessor_OnProcessModel final
{
public:
	class UAtomModel*                             Model;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtomModelPartsCollection              AtomModelPartsCollection;                          // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         ExistingObjects;                                   // 0x0090(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FAtomProcessorResult                   ReturnValue;                                       // 0x00A0(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomModelProcessor_OnProcessModel) == 0x000010, "Wrong alignment on AtomModelProcessor_OnProcessModel");
static_assert(sizeof(AtomModelProcessor_OnProcessModel) == 0x0000D0, "Wrong size on AtomModelProcessor_OnProcessModel");
static_assert(offsetof(AtomModelProcessor_OnProcessModel, Model) == 0x000000, "Member 'AtomModelProcessor_OnProcessModel::Model' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnProcessModel, AtomModelPartsCollection) == 0x000010, "Member 'AtomModelProcessor_OnProcessModel::AtomModelPartsCollection' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnProcessModel, ExistingObjects) == 0x000090, "Member 'AtomModelProcessor_OnProcessModel::ExistingObjects' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnProcessModel, ReturnValue) == 0x0000A0, "Member 'AtomModelProcessor_OnProcessModel::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomModelProcessor.OnProcessPrimitive
// 0x00C0 (0x00C0 - 0x0000)
struct AtomModelProcessor_OnProcessPrimitive final
{
public:
	class UAtomModel*                             DummyModel;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitive*                         Primitive;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomModelPartsCollection              AtomModelPartsCollection;                          // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAtomOnProcessPrimitiveSettings        Settings;                                          // 0x0090(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtomProcessorResult                   ReturnValue;                                       // 0x0098(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomModelProcessor_OnProcessPrimitive) == 0x000010, "Wrong alignment on AtomModelProcessor_OnProcessPrimitive");
static_assert(sizeof(AtomModelProcessor_OnProcessPrimitive) == 0x0000C0, "Wrong size on AtomModelProcessor_OnProcessPrimitive");
static_assert(offsetof(AtomModelProcessor_OnProcessPrimitive, DummyModel) == 0x000000, "Member 'AtomModelProcessor_OnProcessPrimitive::DummyModel' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnProcessPrimitive, Primitive) == 0x000008, "Member 'AtomModelProcessor_OnProcessPrimitive::Primitive' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnProcessPrimitive, AtomModelPartsCollection) == 0x000010, "Member 'AtomModelProcessor_OnProcessPrimitive::AtomModelPartsCollection' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnProcessPrimitive, Settings) == 0x000090, "Member 'AtomModelProcessor_OnProcessPrimitive::Settings' has a wrong offset!");
static_assert(offsetof(AtomModelProcessor_OnProcessPrimitive, ReturnValue) == 0x000098, "Member 'AtomModelProcessor_OnProcessPrimitive::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomProcessorBlueprintLibrary.AppendAtomProcessorResult
// 0x0078 (0x0078 - 0x0000)
struct AtomProcessorBlueprintLibrary_AppendAtomProcessorResult final
{
public:
	struct FAtomProcessorResult                   Result;                                            // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAtomProcessorResult                   ResultToAppend;                                    // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAtomProcessorResult                   ReturnValue;                                       // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomProcessorBlueprintLibrary_AppendAtomProcessorResult) == 0x000008, "Wrong alignment on AtomProcessorBlueprintLibrary_AppendAtomProcessorResult");
static_assert(sizeof(AtomProcessorBlueprintLibrary_AppendAtomProcessorResult) == 0x000078, "Wrong size on AtomProcessorBlueprintLibrary_AppendAtomProcessorResult");
static_assert(offsetof(AtomProcessorBlueprintLibrary_AppendAtomProcessorResult, Result) == 0x000000, "Member 'AtomProcessorBlueprintLibrary_AppendAtomProcessorResult::Result' has a wrong offset!");
static_assert(offsetof(AtomProcessorBlueprintLibrary_AppendAtomProcessorResult, ResultToAppend) == 0x000028, "Member 'AtomProcessorBlueprintLibrary_AppendAtomProcessorResult::ResultToAppend' has a wrong offset!");
static_assert(offsetof(AtomProcessorBlueprintLibrary_AppendAtomProcessorResult, ReturnValue) == 0x000050, "Member 'AtomProcessorBlueprintLibrary_AppendAtomProcessorResult::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomProcessorBlueprintLibrary.GetModelProcessor
// 0x0030 (0x0030 - 0x0000)
struct AtomProcessorBlueprintLibrary_GetModelProcessor final
{
public:
	struct FAtomModelProcessorInstance            ProcessorInstance;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UAtomModelProcessor*              ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomProcessorBlueprintLibrary_GetModelProcessor) == 0x000008, "Wrong alignment on AtomProcessorBlueprintLibrary_GetModelProcessor");
static_assert(sizeof(AtomProcessorBlueprintLibrary_GetModelProcessor) == 0x000030, "Wrong size on AtomProcessorBlueprintLibrary_GetModelProcessor");
static_assert(offsetof(AtomProcessorBlueprintLibrary_GetModelProcessor, ProcessorInstance) == 0x000000, "Member 'AtomProcessorBlueprintLibrary_GetModelProcessor::ProcessorInstance' has a wrong offset!");
static_assert(offsetof(AtomProcessorBlueprintLibrary_GetModelProcessor, ReturnValue) == 0x000028, "Member 'AtomProcessorBlueprintLibrary_GetModelProcessor::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomProcessorBlueprintLibrary.GetProcessorClass
// 0x0030 (0x0030 - 0x0000)
struct AtomProcessorBlueprintLibrary_GetProcessorClass final
{
public:
	struct FAtomModelProcessorInstance            ProcessorInstance;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UClass*                           ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomProcessorBlueprintLibrary_GetProcessorClass) == 0x000008, "Wrong alignment on AtomProcessorBlueprintLibrary_GetProcessorClass");
static_assert(sizeof(AtomProcessorBlueprintLibrary_GetProcessorClass) == 0x000030, "Wrong size on AtomProcessorBlueprintLibrary_GetProcessorClass");
static_assert(offsetof(AtomProcessorBlueprintLibrary_GetProcessorClass, ProcessorInstance) == 0x000000, "Member 'AtomProcessorBlueprintLibrary_GetProcessorClass::ProcessorInstance' has a wrong offset!");
static_assert(offsetof(AtomProcessorBlueprintLibrary_GetProcessorClass, ReturnValue) == 0x000028, "Member 'AtomProcessorBlueprintLibrary_GetProcessorClass::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomProcessorBlueprintLibrary.IsValid
// 0x0030 (0x0030 - 0x0000)
struct AtomProcessorBlueprintLibrary_IsValid final
{
public:
	struct FAtomModelProcessorInstance            ProcessorInstance;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomProcessorBlueprintLibrary_IsValid) == 0x000008, "Wrong alignment on AtomProcessorBlueprintLibrary_IsValid");
static_assert(sizeof(AtomProcessorBlueprintLibrary_IsValid) == 0x000030, "Wrong size on AtomProcessorBlueprintLibrary_IsValid");
static_assert(offsetof(AtomProcessorBlueprintLibrary_IsValid, ProcessorInstance) == 0x000000, "Member 'AtomProcessorBlueprintLibrary_IsValid::ProcessorInstance' has a wrong offset!");
static_assert(offsetof(AtomProcessorBlueprintLibrary_IsValid, ReturnValue) == 0x000028, "Member 'AtomProcessorBlueprintLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomProcessorBlueprintLibrary.SetModelProcessor
// 0x0038 (0x0038 - 0x0000)
struct AtomProcessorBlueprintLibrary_SetModelProcessor final
{
public:
	struct FAtomModelProcessorInstance            ProcessorInstance;                                 // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UAtomModelProcessor*                    ModelProcessor;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomSettings;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtomProcessorBlueprintLibrary_SetModelProcessor) == 0x000008, "Wrong alignment on AtomProcessorBlueprintLibrary_SetModelProcessor");
static_assert(sizeof(AtomProcessorBlueprintLibrary_SetModelProcessor) == 0x000038, "Wrong size on AtomProcessorBlueprintLibrary_SetModelProcessor");
static_assert(offsetof(AtomProcessorBlueprintLibrary_SetModelProcessor, ProcessorInstance) == 0x000000, "Member 'AtomProcessorBlueprintLibrary_SetModelProcessor::ProcessorInstance' has a wrong offset!");
static_assert(offsetof(AtomProcessorBlueprintLibrary_SetModelProcessor, ModelProcessor) == 0x000028, "Member 'AtomProcessorBlueprintLibrary_SetModelProcessor::ModelProcessor' has a wrong offset!");
static_assert(offsetof(AtomProcessorBlueprintLibrary_SetModelProcessor, bUseCustomSettings) == 0x000030, "Member 'AtomProcessorBlueprintLibrary_SetModelProcessor::bUseCustomSettings' has a wrong offset!");

// Function AtomRuntime.AtomPrimitive.GetMainGroupName
// 0x0008 (0x0008 - 0x0000)
struct AtomPrimitive_GetMainGroupName final
{
public:
	int32                                         MainGroupId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitive_GetMainGroupName) == 0x000004, "Wrong alignment on AtomPrimitive_GetMainGroupName");
static_assert(sizeof(AtomPrimitive_GetMainGroupName) == 0x000008, "Wrong size on AtomPrimitive_GetMainGroupName");
static_assert(offsetof(AtomPrimitive_GetMainGroupName, MainGroupId) == 0x000000, "Member 'AtomPrimitive_GetMainGroupName::MainGroupId' has a wrong offset!");
static_assert(offsetof(AtomPrimitive_GetMainGroupName, ReturnValue) == 0x000004, "Member 'AtomPrimitive_GetMainGroupName::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitive.GetSubMainGroupName
// 0x0008 (0x0008 - 0x0000)
struct AtomPrimitive_GetSubMainGroupName final
{
public:
	int32                                         SubMainGroupId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitive_GetSubMainGroupName) == 0x000004, "Wrong alignment on AtomPrimitive_GetSubMainGroupName");
static_assert(sizeof(AtomPrimitive_GetSubMainGroupName) == 0x000008, "Wrong size on AtomPrimitive_GetSubMainGroupName");
static_assert(offsetof(AtomPrimitive_GetSubMainGroupName, SubMainGroupId) == 0x000000, "Member 'AtomPrimitive_GetSubMainGroupName::SubMainGroupId' has a wrong offset!");
static_assert(offsetof(AtomPrimitive_GetSubMainGroupName, ReturnValue) == 0x000004, "Member 'AtomPrimitive_GetSubMainGroupName::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitive.GetGeometryContainerForExportStyle
// 0x0028 (0x0028 - 0x0000)
struct AtomPrimitive_GetGeometryContainerForExportStyle final
{
public:
	class FString                                 ExportStyleName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FallbackExportStyleName;                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomPrimitiveGeometryContainer*        ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitive_GetGeometryContainerForExportStyle) == 0x000008, "Wrong alignment on AtomPrimitive_GetGeometryContainerForExportStyle");
static_assert(sizeof(AtomPrimitive_GetGeometryContainerForExportStyle) == 0x000028, "Wrong size on AtomPrimitive_GetGeometryContainerForExportStyle");
static_assert(offsetof(AtomPrimitive_GetGeometryContainerForExportStyle, ExportStyleName) == 0x000000, "Member 'AtomPrimitive_GetGeometryContainerForExportStyle::ExportStyleName' has a wrong offset!");
static_assert(offsetof(AtomPrimitive_GetGeometryContainerForExportStyle, FallbackExportStyleName) == 0x000010, "Member 'AtomPrimitive_GetGeometryContainerForExportStyle::FallbackExportStyleName' has a wrong offset!");
static_assert(offsetof(AtomPrimitive_GetGeometryContainerForExportStyle, ReturnValue) == 0x000020, "Member 'AtomPrimitive_GetGeometryContainerForExportStyle::ReturnValue' has a wrong offset!");

// Function AtomRuntime.AtomPrimitive.IsFlexElement
// 0x0001 (0x0001 - 0x0000)
struct AtomPrimitive_IsFlexElement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtomPrimitive_IsFlexElement) == 0x000001, "Wrong alignment on AtomPrimitive_IsFlexElement");
static_assert(sizeof(AtomPrimitive_IsFlexElement) == 0x000001, "Wrong size on AtomPrimitive_IsFlexElement");
static_assert(offsetof(AtomPrimitive_IsFlexElement, ReturnValue) == 0x000000, "Member 'AtomPrimitive_IsFlexElement::ReturnValue' has a wrong offset!");

}

