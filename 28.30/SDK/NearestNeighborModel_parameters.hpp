#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NearestNeighborModel

#include "Basic.hpp"


namespace SDK::Params
{

// Function NearestNeighborModel.NearestNeighborOptimizedNetworkLoader.LoadOptimizedNetwork
// 0x0018 (0x0018 - 0x0000)
struct NearestNeighborOptimizedNetworkLoader_LoadOptimizedNetwork final
{
public:
	class FString                                 OnnxPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NearestNeighborOptimizedNetworkLoader_LoadOptimizedNetwork) == 0x000008, "Wrong alignment on NearestNeighborOptimizedNetworkLoader_LoadOptimizedNetwork");
static_assert(sizeof(NearestNeighborOptimizedNetworkLoader_LoadOptimizedNetwork) == 0x000018, "Wrong size on NearestNeighborOptimizedNetworkLoader_LoadOptimizedNetwork");
static_assert(offsetof(NearestNeighborOptimizedNetworkLoader_LoadOptimizedNetwork, OnnxPath) == 0x000000, "Member 'NearestNeighborOptimizedNetworkLoader_LoadOptimizedNetwork::OnnxPath' has a wrong offset!");
static_assert(offsetof(NearestNeighborOptimizedNetworkLoader_LoadOptimizedNetwork, ReturnValue) == 0x000010, "Member 'NearestNeighborOptimizedNetworkLoader_LoadOptimizedNetwork::ReturnValue' has a wrong offset!");

// Function NearestNeighborModel.NearestNeighborOptimizedNetworkLoader.GetOptimizedNetwork
// 0x0008 (0x0008 - 0x0000)
struct NearestNeighborOptimizedNetworkLoader_GetOptimizedNetwork final
{
public:
	class UNearestNeighborOptimizedNetwork*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearestNeighborOptimizedNetworkLoader_GetOptimizedNetwork) == 0x000008, "Wrong alignment on NearestNeighborOptimizedNetworkLoader_GetOptimizedNetwork");
static_assert(sizeof(NearestNeighborOptimizedNetworkLoader_GetOptimizedNetwork) == 0x000008, "Wrong size on NearestNeighborOptimizedNetworkLoader_GetOptimizedNetwork");
static_assert(offsetof(NearestNeighborOptimizedNetworkLoader_GetOptimizedNetwork, ReturnValue) == 0x000000, "Member 'NearestNeighborOptimizedNetworkLoader_GetOptimizedNetwork::ReturnValue' has a wrong offset!");

// Function NearestNeighborModel.NearestNeighborModel.ClipInputs
// 0x0020 (0x0020 - 0x0000)
struct NearestNeighborModel_ClipInputs final
{
public:
	TArray<float>                                 Input;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearestNeighborModel_ClipInputs) == 0x000008, "Wrong alignment on NearestNeighborModel_ClipInputs");
static_assert(sizeof(NearestNeighborModel_ClipInputs) == 0x000020, "Wrong size on NearestNeighborModel_ClipInputs");
static_assert(offsetof(NearestNeighborModel_ClipInputs, Input) == 0x000000, "Member 'NearestNeighborModel_ClipInputs::Input' has a wrong offset!");
static_assert(offsetof(NearestNeighborModel_ClipInputs, ReturnValue) == 0x000010, "Member 'NearestNeighborModel_ClipInputs::ReturnValue' has a wrong offset!");

// Function NearestNeighborModel.NearestNeighborModel.GetNumParts
// 0x0004 (0x0004 - 0x0000)
struct NearestNeighborModel_GetNumParts final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearestNeighborModel_GetNumParts) == 0x000004, "Wrong alignment on NearestNeighborModel_GetNumParts");
static_assert(sizeof(NearestNeighborModel_GetNumParts) == 0x000004, "Wrong size on NearestNeighborModel_GetNumParts");
static_assert(offsetof(NearestNeighborModel_GetNumParts, ReturnValue) == 0x000000, "Member 'NearestNeighborModel_GetNumParts::ReturnValue' has a wrong offset!");

// Function NearestNeighborModel.NearestNeighborModel.GetPartNumVerts
// 0x0008 (0x0008 - 0x0000)
struct NearestNeighborModel_GetPartNumVerts final
{
public:
	int32                                         PartId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearestNeighborModel_GetPartNumVerts) == 0x000004, "Wrong alignment on NearestNeighborModel_GetPartNumVerts");
static_assert(sizeof(NearestNeighborModel_GetPartNumVerts) == 0x000008, "Wrong size on NearestNeighborModel_GetPartNumVerts");
static_assert(offsetof(NearestNeighborModel_GetPartNumVerts, PartId) == 0x000000, "Member 'NearestNeighborModel_GetPartNumVerts::PartId' has a wrong offset!");
static_assert(offsetof(NearestNeighborModel_GetPartNumVerts, ReturnValue) == 0x000004, "Member 'NearestNeighborModel_GetPartNumVerts::ReturnValue' has a wrong offset!");

// Function NearestNeighborModel.NearestNeighborModel.GetPCACoeffNum
// 0x0008 (0x0008 - 0x0000)
struct NearestNeighborModel_GetPCACoeffNum final
{
public:
	int32                                         PartId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearestNeighborModel_GetPCACoeffNum) == 0x000004, "Wrong alignment on NearestNeighborModel_GetPCACoeffNum");
static_assert(sizeof(NearestNeighborModel_GetPCACoeffNum) == 0x000008, "Wrong size on NearestNeighborModel_GetPCACoeffNum");
static_assert(offsetof(NearestNeighborModel_GetPCACoeffNum, PartId) == 0x000000, "Member 'NearestNeighborModel_GetPCACoeffNum::PartId' has a wrong offset!");
static_assert(offsetof(NearestNeighborModel_GetPCACoeffNum, ReturnValue) == 0x000004, "Member 'NearestNeighborModel_GetPCACoeffNum::ReturnValue' has a wrong offset!");

// Function NearestNeighborModel.NearestNeighborModel.GetPCACoeffStart
// 0x0008 (0x0008 - 0x0000)
struct NearestNeighborModel_GetPCACoeffStart final
{
public:
	int32                                         PartId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearestNeighborModel_GetPCACoeffStart) == 0x000004, "Wrong alignment on NearestNeighborModel_GetPCACoeffStart");
static_assert(sizeof(NearestNeighborModel_GetPCACoeffStart) == 0x000008, "Wrong size on NearestNeighborModel_GetPCACoeffStart");
static_assert(offsetof(NearestNeighborModel_GetPCACoeffStart, PartId) == 0x000000, "Member 'NearestNeighborModel_GetPCACoeffStart::PartId' has a wrong offset!");
static_assert(offsetof(NearestNeighborModel_GetPCACoeffStart, ReturnValue) == 0x000004, "Member 'NearestNeighborModel_GetPCACoeffStart::ReturnValue' has a wrong offset!");

// Function NearestNeighborModel.NearestNeighborModelInstance.Eval
// 0x0020 (0x0020 - 0x0000)
struct NearestNeighborModelInstance_Eval final
{
public:
	TArray<float>                                 InputData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearestNeighborModelInstance_Eval) == 0x000008, "Wrong alignment on NearestNeighborModelInstance_Eval");
static_assert(sizeof(NearestNeighborModelInstance_Eval) == 0x000020, "Wrong size on NearestNeighborModelInstance_Eval");
static_assert(offsetof(NearestNeighborModelInstance_Eval, InputData) == 0x000000, "Member 'NearestNeighborModelInstance_Eval::InputData' has a wrong offset!");
static_assert(offsetof(NearestNeighborModelInstance_Eval, ReturnValue) == 0x000010, "Member 'NearestNeighborModelInstance_Eval::ReturnValue' has a wrong offset!");

}

