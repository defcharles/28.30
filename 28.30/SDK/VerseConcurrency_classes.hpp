#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseConcurrency

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "VerseNative_structs.hpp"
#include "VerseConcurrency_structs.hpp"


namespace SDK
{

// VerseClass VerseConcurrency.$SolarisSignatureFunctionOuter
// 0x0000 (0x0028 - 0x0028)
class VerseConcurrency::U_SolarisSignatureFunctionOuter final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseClass VerseConcurrency.$SolarisSignatureFunctionOuter", true>();
	}
	static class VerseConcurrency::U_SolarisSignatureFunctionOuter* GetDefaultObj()
	{
		return GetDefaultObjImpl<VerseConcurrency::U_SolarisSignatureFunctionOuter>();
	}
};
static_assert(alignof(VerseConcurrency::U_SolarisSignatureFunctionOuter) == 0x000008, "Wrong alignment on VerseConcurrency::U_SolarisSignatureFunctionOuter");
static_assert(sizeof(VerseConcurrency::U_SolarisSignatureFunctionOuter) == 0x000028, "Wrong size on VerseConcurrency::U_SolarisSignatureFunctionOuter");

// VerseClass VerseConcurrency._Root
// 0x0000 (0x0028 - 0x0028)
class VerseConcurrency::U_Root final : public UObject
{
public:
	static class UClass* _L_2fVerse_2eorg_2fConcurrency_N_Rawaitable(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	static class UClass* _L_2fVerse_2eorg_2fConcurrency_N_Rawaitable_L_Npayload_20where_20payload_R(class UClass* __verse_0xB2CDDD72_Argument);
	static class UClass* _L_2fVerse_2eorg_2fConcurrency_N_Rtask_L_Nt_20where_20t_R(class UClass* __verse_0xB2CDDD72_Argument);

	void _InitCDO();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseClass VerseConcurrency._Root", true>();
	}
	static class VerseConcurrency::U_Root* GetDefaultObj()
	{
		return GetDefaultObjImpl<VerseConcurrency::U_Root>();
	}
};
static_assert(alignof(VerseConcurrency::U_Root) == 0x000008, "Wrong alignment on VerseConcurrency::U_Root");
static_assert(sizeof(VerseConcurrency::U_Root) == 0x000028, "Wrong size on VerseConcurrency::U_Root");

// VerseClass VerseConcurrency.task
// 0x0128 (0x0150 - 0x0028)
class Utask : public UObject
{
public:
	FVerseFunctionProperty_                       __verse_0xBD7FB920__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RActive; // 0x0028(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseFunctionProperty_                       __verse_0x8F0684E8__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCompleted; // 0x0038(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseFunctionProperty_                       __verse_0x5648DB9F__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceling; // 0x0048(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseFunctionProperty_                       __verse_0x8F771AA8__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceled; // 0x0058(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseFunctionProperty_                       __verse_0x2C6C9D8A__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUnsettled; // 0x0068(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseFunctionProperty_                       __verse_0xBB33978A__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RSettled; // 0x0078(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseFunctionProperty_                       __verse_0x07A4A432__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUninterrupted; // 0x0088(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseFunctionProperty_                       __verse_0x2C72A17D__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RInterrupted; // 0x0098(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseFunctionProperty_                       __verse_0xAFD0D344__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCancel; // 0x00A8(0x0010)(InstancedReference, HasGetValueTypeHash)
	FVerseFunctionProperty_                       __verse_0x8DE7DBE5_Await;                          // 0x00B8(0x0010)(InstancedReference, HasGetValueTypeHash)
	uint8                                         Pad_C8[0x88];                                      // 0x00C8(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void _Block();
	void _InitCDO();
	void _InitInstance();
	TOptional<EVerseTrue> _L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RActive(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	void _L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCancel(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	TOptional<EVerseTrue> _L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceled(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	TOptional<EVerseTrue> _L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceling(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	TOptional<EVerseTrue> _L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCompleted(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	TOptional<EVerseTrue> _L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RInterrupted(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	TOptional<EVerseTrue> _L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RSettled(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	TOptional<EVerseTrue> _L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUninterrupted(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	TOptional<EVerseTrue> _L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUnsettled(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	class Utask* Await(class Utask* __verse_0xC1E81372_CallingTask, int64 __verse_0xA3A00DDB_CallerResumeState, int64 __verse_0x2AC0E4D8_CallerCancelState, const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"task">();
	}
	static class Utask* GetDefaultObj()
	{
		return GetDefaultObjImpl<Utask>();
	}
};
static_assert(alignof(Utask) == 0x000008, "Wrong alignment on Utask");
static_assert(sizeof(Utask) == 0x000150, "Wrong size on Utask");
static_assert(offsetof(Utask, __verse_0xBD7FB920__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RActive) == 0x000028, "Member 'Utask::__verse_0xBD7FB920__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RActive' has a wrong offset!");
static_assert(offsetof(Utask, __verse_0x8F0684E8__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCompleted) == 0x000038, "Member 'Utask::__verse_0x8F0684E8__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCompleted' has a wrong offset!");
static_assert(offsetof(Utask, __verse_0x5648DB9F__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceling) == 0x000048, "Member 'Utask::__verse_0x5648DB9F__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceling' has a wrong offset!");
static_assert(offsetof(Utask, __verse_0x8F771AA8__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceled) == 0x000058, "Member 'Utask::__verse_0x8F771AA8__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceled' has a wrong offset!");
static_assert(offsetof(Utask, __verse_0x2C6C9D8A__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUnsettled) == 0x000068, "Member 'Utask::__verse_0x2C6C9D8A__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUnsettled' has a wrong offset!");
static_assert(offsetof(Utask, __verse_0xBB33978A__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RSettled) == 0x000078, "Member 'Utask::__verse_0xBB33978A__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RSettled' has a wrong offset!");
static_assert(offsetof(Utask, __verse_0x07A4A432__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUninterrupted) == 0x000088, "Member 'Utask::__verse_0x07A4A432__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUninterrupted' has a wrong offset!");
static_assert(offsetof(Utask, __verse_0x2C72A17D__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RInterrupted) == 0x000098, "Member 'Utask::__verse_0x2C72A17D__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RInterrupted' has a wrong offset!");
static_assert(offsetof(Utask, __verse_0xAFD0D344__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCancel) == 0x0000A8, "Member 'Utask::__verse_0xAFD0D344__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCancel' has a wrong offset!");
static_assert(offsetof(Utask, __verse_0x8DE7DBE5_Await) == 0x0000B8, "Member 'Utask::__verse_0x8DE7DBE5_Await' has a wrong offset!");

// VerseClass VerseConcurrency.task_awaitable$Await
// 0x0020 (0x0170 - 0x0150)
class Utask_awaitable_Await final : public Utask
{
public:
	class Uawaitable*                             _Self;                                             // 0x0150(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct VerseConcurrency::Ftuple_L_R           __verse_0xB2CDDD72_Argument;                       // 0x0158(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FVerseDynamicProperty_                        _RetVal;                                           // 0x0160(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)

public:
	int64 Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"task_awaitable$Await">();
	}
	static class Utask_awaitable_Await* GetDefaultObj()
	{
		return GetDefaultObjImpl<Utask_awaitable_Await>();
	}
};
static_assert(alignof(Utask_awaitable_Await) == 0x000008, "Wrong alignment on Utask_awaitable_Await");
static_assert(sizeof(Utask_awaitable_Await) == 0x000170, "Wrong size on Utask_awaitable_Await");
static_assert(offsetof(Utask_awaitable_Await, _Self) == 0x000150, "Member 'Utask_awaitable_Await::_Self' has a wrong offset!");
static_assert(offsetof(Utask_awaitable_Await, __verse_0xB2CDDD72_Argument) == 0x000158, "Member 'Utask_awaitable_Await::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Utask_awaitable_Await, _RetVal) == 0x000160, "Member 'Utask_awaitable_Await::_RetVal' has a wrong offset!");

// VerseClass VerseConcurrency.awaitable
// 0x0000 (0x0028 - 0x0028)
class Uawaitable final : public UObject
{
public:
	class Utask* Await(class Utask* __verse_0xC1E81372_CallingTask, int64 __verse_0xA3A00DDB_CallerResumeState, int64 __verse_0x2AC0E4D8_CallerCancelState, const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"awaitable">();
	}
	static class Uawaitable* GetDefaultObj()
	{
		return GetDefaultObjImpl<Uawaitable>();
	}
};
static_assert(alignof(Uawaitable) == 0x000008, "Wrong alignment on Uawaitable");
static_assert(sizeof(Uawaitable) == 0x000028, "Wrong size on Uawaitable");

// VerseClass VerseConcurrency.task_group
// 0x0028 (0x0050 - 0x0028)
class Utask_group final : public UObject
{
public:
	FVerseFunctionProperty_                       __verse_0xE139E9C7__L_2fVerse_2eorg_2fConcurrency_2ftask__group_N_RGetNumActive; // 0x0028(0x0010)(InstancedReference, HasGetValueTypeHash)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void _Block();
	void _InitCDO();
	void _InitInstance();
	int64 _L_2fVerse_2eorg_2fConcurrency_2ftask__group_N_RGetNumActive(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"task_group">();
	}
	static class Utask_group* GetDefaultObj()
	{
		return GetDefaultObjImpl<Utask_group>();
	}
};
static_assert(alignof(Utask_group) == 0x000008, "Wrong alignment on Utask_group");
static_assert(sizeof(Utask_group) == 0x000050, "Wrong size on Utask_group");
static_assert(offsetof(Utask_group, __verse_0xE139E9C7__L_2fVerse_2eorg_2fConcurrency_2ftask__group_N_RGetNumActive) == 0x000028, "Member 'Utask_group::__verse_0xE139E9C7__L_2fVerse_2eorg_2fConcurrency_2ftask__group_N_RGetNumActive' has a wrong offset!");

// VerseClass VerseConcurrency.task_task$Await
// 0x0020 (0x0170 - 0x0150)
class Utask_task_Await final : public Utask
{
public:
	class Utask*                                  _Self;                                             // 0x0150(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct VerseConcurrency::Ftuple_L_R           __verse_0xB2CDDD72_Argument;                       // 0x0158(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FVerseDynamicProperty_                        _RetVal;                                           // 0x0160(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)

public:
	int64 Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"task_task$Await">();
	}
	static class Utask_task_Await* GetDefaultObj()
	{
		return GetDefaultObjImpl<Utask_task_Await>();
	}
};
static_assert(alignof(Utask_task_Await) == 0x000008, "Wrong alignment on Utask_task_Await");
static_assert(sizeof(Utask_task_Await) == 0x000170, "Wrong size on Utask_task_Await");
static_assert(offsetof(Utask_task_Await, _Self) == 0x000150, "Member 'Utask_task_Await::_Self' has a wrong offset!");
static_assert(offsetof(Utask_task_Await, __verse_0xB2CDDD72_Argument) == 0x000158, "Member 'Utask_task_Await::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Utask_task_Await, _RetVal) == 0x000160, "Member 'Utask_task_Await::_RetVal' has a wrong offset!");

}

