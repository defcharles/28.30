#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AssembledMeshSystem

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CosmeticsFrameworkItems_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct AssembledMeshSystem.AssembledMeshAttachmentRules
// 0x0050 (0x0050 - 0x0000)
struct FAssembledMeshAttachmentRules final
{
public:
	class FName                                   AttachSocketName;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachOffset;                                      // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AttachRotation;                                    // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AttachScale;                                       // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssembledMeshAttachmentRules) == 0x000008, "Wrong alignment on FAssembledMeshAttachmentRules");
static_assert(sizeof(FAssembledMeshAttachmentRules) == 0x000050, "Wrong size on FAssembledMeshAttachmentRules");
static_assert(offsetof(FAssembledMeshAttachmentRules, AttachSocketName) == 0x000000, "Member 'FAssembledMeshAttachmentRules::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FAssembledMeshAttachmentRules, AttachOffset) == 0x000008, "Member 'FAssembledMeshAttachmentRules::AttachOffset' has a wrong offset!");
static_assert(offsetof(FAssembledMeshAttachmentRules, AttachRotation) == 0x000020, "Member 'FAssembledMeshAttachmentRules::AttachRotation' has a wrong offset!");
static_assert(offsetof(FAssembledMeshAttachmentRules, AttachScale) == 0x000038, "Member 'FAssembledMeshAttachmentRules::AttachScale' has a wrong offset!");

// ScriptStruct AssembledMeshSystem.AssembledMeshSchemaData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FAssembledMeshSchemaData
{
};
#pragma pack(pop)
static_assert(alignof(FAssembledMeshSchemaData) == 0x000001, "Wrong alignment on FAssembledMeshSchemaData");
static_assert(sizeof(FAssembledMeshSchemaData) == 0x000001, "Wrong size on FAssembledMeshSchemaData");

// ScriptStruct AssembledMeshSystem.AssembledComponentReferences
// 0x0018 (0x0018 - 0x0000)
struct FAssembledComponentReferences final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizableObjectInstanceUsage*       CustomizableObjectInstanceUsage;                   // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssembledMeshSchemaTag;                            // 0x0010(0x0004)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAssembledComponentReferences) == 0x000008, "Wrong alignment on FAssembledComponentReferences");
static_assert(sizeof(FAssembledComponentReferences) == 0x000018, "Wrong size on FAssembledComponentReferences");
static_assert(offsetof(FAssembledComponentReferences, SkeletalMeshComponent) == 0x000000, "Member 'FAssembledComponentReferences::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FAssembledComponentReferences, CustomizableObjectInstanceUsage) == 0x000008, "Member 'FAssembledComponentReferences::CustomizableObjectInstanceUsage' has a wrong offset!");
static_assert(offsetof(FAssembledComponentReferences, AssembledMeshSchemaTag) == 0x000010, "Member 'FAssembledComponentReferences::AssembledMeshSchemaTag' has a wrong offset!");

// ScriptStruct AssembledMeshSystem.AssembledMeshSchemaData_Icons
// 0x0060 (0x0060 - 0x0000)
struct FAssembledMeshSchemaData_Icons final : public FAssembledMeshSchemaData
{
public:
	TSoftObjectPtr<class UTexture2D>              WidePreviewImage;                                  // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SmallPreviewImage;                                 // 0x0020(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LargePreviewImage;                                 // 0x0040(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssembledMeshSchemaData_Icons) == 0x000008, "Wrong alignment on FAssembledMeshSchemaData_Icons");
static_assert(sizeof(FAssembledMeshSchemaData_Icons) == 0x000060, "Wrong size on FAssembledMeshSchemaData_Icons");
static_assert(offsetof(FAssembledMeshSchemaData_Icons, WidePreviewImage) == 0x000000, "Member 'FAssembledMeshSchemaData_Icons::WidePreviewImage' has a wrong offset!");
static_assert(offsetof(FAssembledMeshSchemaData_Icons, SmallPreviewImage) == 0x000020, "Member 'FAssembledMeshSchemaData_Icons::SmallPreviewImage' has a wrong offset!");
static_assert(offsetof(FAssembledMeshSchemaData_Icons, LargePreviewImage) == 0x000040, "Member 'FAssembledMeshSchemaData_Icons::LargePreviewImage' has a wrong offset!");

// ScriptStruct AssembledMeshSystem.CosmeticProperty_AssembledMeshSchema
// 0x0024 (0x0028 - 0x0004)
struct FCosmeticProperty_AssembledMeshSchema final : public FCosmeticPropertyBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAssembledMeshSchema>    AssembledMeshSchema;                               // 0x0008(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticProperty_AssembledMeshSchema) == 0x000008, "Wrong alignment on FCosmeticProperty_AssembledMeshSchema");
static_assert(sizeof(FCosmeticProperty_AssembledMeshSchema) == 0x000028, "Wrong size on FCosmeticProperty_AssembledMeshSchema");
static_assert(offsetof(FCosmeticProperty_AssembledMeshSchema, AssembledMeshSchema) == 0x000008, "Member 'FCosmeticProperty_AssembledMeshSchema::AssembledMeshSchema' has a wrong offset!");

// ScriptStruct AssembledMeshSystem.BaseParamData
// 0x0010 (0x0010 - 0x0000)
struct FBaseParamData
{
public:
	class FString                                 ParamName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseParamData) == 0x000008, "Wrong alignment on FBaseParamData");
static_assert(sizeof(FBaseParamData) == 0x000010, "Wrong size on FBaseParamData");
static_assert(offsetof(FBaseParamData, ParamName) == 0x000000, "Member 'FBaseParamData::ParamName' has a wrong offset!");

// ScriptStruct AssembledMeshSystem.IntParamData
// 0x0010 (0x0020 - 0x0010)
struct FIntParamData final : public FBaseParamData
{
public:
	TArray<class FString>                         ParamOptions;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntParamData) == 0x000008, "Wrong alignment on FIntParamData");
static_assert(sizeof(FIntParamData) == 0x000020, "Wrong size on FIntParamData");
static_assert(offsetof(FIntParamData, ParamOptions) == 0x000010, "Member 'FIntParamData::ParamOptions' has a wrong offset!");

// ScriptStruct AssembledMeshSystem.FloatParamData
// 0x0010 (0x0020 - 0x0010)
struct FFloatParamData final : public FBaseParamData
{
public:
	float                                         FloatValue;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFloatValue;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFloatValue;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFloatParamData) == 0x000008, "Wrong alignment on FFloatParamData");
static_assert(sizeof(FFloatParamData) == 0x000020, "Wrong size on FFloatParamData");
static_assert(offsetof(FFloatParamData, FloatValue) == 0x000010, "Member 'FFloatParamData::FloatValue' has a wrong offset!");
static_assert(offsetof(FFloatParamData, MinFloatValue) == 0x000014, "Member 'FFloatParamData::MinFloatValue' has a wrong offset!");
static_assert(offsetof(FFloatParamData, MaxFloatValue) == 0x000018, "Member 'FFloatParamData::MaxFloatValue' has a wrong offset!");

}

