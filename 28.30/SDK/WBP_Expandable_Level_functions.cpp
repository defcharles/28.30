#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Expandable_Level

#include "Basic.hpp"

#include "WBP_Expandable_Level_classes.hpp"
#include "WBP_Expandable_Level_parameters.hpp"


namespace SDK
{

// Function WBP_Expandable_Level.WBP_Expandable_Level_C.BP_OnClicked
// (Event, Protected, BlueprintEvent)

void UWBP_Expandable_Level_C::BP_OnClicked()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.BP_OnFocusReceived
// (Event, Protected, BlueprintEvent)

void UWBP_Expandable_Level_C::BP_OnFocusReceived()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnFocusReceived");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.BP_OnHovered
// (Event, Protected, BlueprintEvent)

void UWBP_Expandable_Level_C::BP_OnHovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.BP_OnInputMethodChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ECommonInputType                        CurrentInputType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Expandable_Level_C::BP_OnInputMethodChanged(ECommonInputType CurrentInputType)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnInputMethodChanged");

	Params::WBP_Expandable_Level_C_BP_OnInputMethodChanged Parms{};

	Parms.CurrentInputType = CurrentInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.BP_OnUnhovered
// (Event, Protected, BlueprintEvent)

void UWBP_Expandable_Level_C::BP_OnUnhovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_Expandable_Level_C::Construct()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.ExecuteUbergraph_WBP_Expandable_Level
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Expandable_Level_C::ExecuteUbergraph_WBP_Expandable_Level(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ExecuteUbergraph_WBP_Expandable_Level");

	Params::WBP_Expandable_Level_C_ExecuteUbergraph_WBP_Expandable_Level Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_Expandable_Level_C::OnInitialized()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.SetFortPassLevelViewModel
// (Final, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortPassLevelViewModel*          ViewModel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_Expandable_Level_C::SetFortPassLevelViewModel(class UFortPassLevelViewModel* ViewModel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFortPassLevelViewModel");

	Params::WBP_Expandable_Level_C_SetFortPassLevelViewModel Parms{};

	Parms.ViewModel = ViewModel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.SetLevelCircleProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  XPProgress                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Expandable_Level_C::SetLevelCircleProgress(double XPProgress)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLevelCircleProgress");

	Params::WBP_Expandable_Level_C_SetLevelCircleProgress Parms{};

	Parms.XPProgress = XPProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.__1c8202ec-4eca-8d23-4efe-e8a2531506f0_SourceToDest
// (Final, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             RemainingXP                                            (Parm, OutParm)

void UWBP_Expandable_Level_C::__1c8202ec_4eca_8d23_4efe_e8a2531506f0_SourceToDest(class FText* RemainingXP) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("__1c8202ec-4eca-8d23-4efe-e8a2531506f0_SourceToDest");

	Params::WBP_Expandable_Level_C___1c8202ec_4eca_8d23_4efe_e8a2531506f0_SourceToDest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingXP != nullptr)
		*RemainingXP = std::move(Parms.RemainingXP);
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.__1eeaf5a8-4db5-3f28-a106-9ea69cae3560_SourceToDest
// (Final, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UWBP_Expandable_Level_C::__1eeaf5a8_4db5_3f28_a106_9ea69cae3560_SourceToDest() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("__1eeaf5a8-4db5-3f28-a106-9ea69cae3560_SourceToDest");

	Params::WBP_Expandable_Level_C___1eeaf5a8_4db5_3f28_a106_9ea69cae3560_SourceToDest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.__77da8daf-4852-cb93-27ce-cbb33b3ed865_SourceToDest
// (Final, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UWBP_Expandable_Level_C::__77da8daf_4852_cb93_27ce_cbb33b3ed865_SourceToDest() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("__77da8daf-4852-cb93-27ce-cbb33b3ed865_SourceToDest");

	Params::WBP_Expandable_Level_C___77da8daf_4852_cb93_27ce_cbb33b3ed865_SourceToDest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.__9c7cb99d-4a57-4531-f37e-edadfa5cc878_SourceToDest
// (Final, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  ProgressXP                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Expandable_Level_C::__9c7cb99d_4a57_4531_f37e_edadfa5cc878_SourceToDest(double* ProgressXP) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("__9c7cb99d-4a57-4531-f37e-edadfa5cc878_SourceToDest");

	Params::WBP_Expandable_Level_C___9c7cb99d_4a57_4531_f37e_edadfa5cc878_SourceToDest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ProgressXP != nullptr)
		*ProgressXP = Parms.ProgressXP;
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.ProgressXP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   CurrentXP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   XpToNextLevel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ProgressXP_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Expandable_Level_C::ProgressXP(int32 CurrentXP, int32 XpToNextLevel, double* ProgressXP_0) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ProgressXP");

	Params::WBP_Expandable_Level_C_ProgressXP Parms{};

	Parms.CurrentXP = CurrentXP;
	Parms.XpToNextLevel = XpToNextLevel;

	UObject::ProcessEvent(Func, &Parms);

	if (ProgressXP_0 != nullptr)
		*ProgressXP_0 = Parms.ProgressXP_0;
}


// Function WBP_Expandable_Level.WBP_Expandable_Level_C.RemainingXP
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   XpToNextLevel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CurrentXP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             RemainingXP_0                                          (Parm, OutParm)

void UWBP_Expandable_Level_C::RemainingXP(int32 XpToNextLevel, int32 CurrentXP, class FText* RemainingXP_0) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemainingXP");

	Params::WBP_Expandable_Level_C_RemainingXP Parms{};

	Parms.XpToNextLevel = XpToNextLevel;
	Parms.CurrentXP = CurrentXP;

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingXP_0 != nullptr)
		*RemainingXP_0 = std::move(Parms.RemainingXP_0);
}

}

