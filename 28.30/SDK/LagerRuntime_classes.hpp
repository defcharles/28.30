#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LagerRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "StructUtils_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "WorldConditions_structs.hpp"
#include "WorldConditions_classes.hpp"
#include "LagerRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "SlateCore_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "GameFeatures_classes.hpp"


namespace SDK
{

// Class LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler
// 0x00B8 (0x0348 - 0x0290)
class AFortAthenaLivingWorldPointProvidersEnabler : public AActor
{
public:
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> EnabledLinkedPointProviders;                       // 0x0290(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> AvailableLinkedPointProviders;                     // 0x02A0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  EnablerTags;                                       // 0x02B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> LinkedPointProviders;                              // 0x02D0(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         PointProvidersToEnable;                            // 0x02E0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         EvaluateAutomatically;                             // 0x0308(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>>& EnabledPointProviders)> OnCompletedEvaluationDelegate;                     // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	void EvaluateAndEnablePointProviders();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void RemoveClosestPointProvidersToPoint(const struct FVector& Point, const float MaximumDistance, const int32 PointsToDisable);

	bool DoesStartEnabled() const;
	const TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> GetEnabledLinkedPointProviders() const;
	const struct FGameplayTagContainer GetEnablerTags() const;
	bool HasCompletedEvaluation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldPointProvidersEnabler">();
	}
	static class AFortAthenaLivingWorldPointProvidersEnabler* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldPointProvidersEnabler>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldPointProvidersEnabler) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldPointProvidersEnabler");
static_assert(sizeof(AFortAthenaLivingWorldPointProvidersEnabler) == 0x000348, "Wrong size on AFortAthenaLivingWorldPointProvidersEnabler");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, EnabledLinkedPointProviders) == 0x000290, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::EnabledLinkedPointProviders' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, AvailableLinkedPointProviders) == 0x0002A0, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::AvailableLinkedPointProviders' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, EnablerTags) == 0x0002B0, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::EnablerTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, LinkedPointProviders) == 0x0002D0, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::LinkedPointProviders' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, PointProvidersToEnable) == 0x0002E0, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::PointProvidersToEnable' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, EvaluateAutomatically) == 0x000308, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::EvaluateAutomatically' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, OnCompletedEvaluationDelegate) == 0x000338, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::OnCompletedEvaluationDelegate' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride
// 0x0000 (0x0348 - 0x0348)
class AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride final : public AFortAthenaLivingWorldPointProvidersEnabler
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride">();
	}
	static class AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride");
static_assert(sizeof(AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride) == 0x000348, "Wrong size on AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride");

// Class LagerRuntime.FortAthenaLinearEncounterAnalyticComponent
// 0x0058 (0x00F8 - 0x00A0)
class UFortAthenaLinearEncounterAnalyticComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x58];                                      // 0x00A0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttackerSpawned(class AActor* SpawnedAttacker);
	void OnDefenderDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnDefenderDidDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnDefenderDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnDefenderSpawned(class AActor* SpawnedDefender);
	void OnEncounterEnd();
	void OnEncounterStart(class UFortAthenaLivingWorldEncounterInstance* InAttackerEncounter, class UFortAthenaLivingWorldEncounterInstance* InDefenderEncounter);
	void OnStageCompleted(const TArray<class AFortPickup*>& SpawnedRewards);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLinearEncounterAnalyticComponent">();
	}
	static class UFortAthenaLinearEncounterAnalyticComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLinearEncounterAnalyticComponent>();
	}
};
static_assert(alignof(UFortAthenaLinearEncounterAnalyticComponent) == 0x000008, "Wrong alignment on UFortAthenaLinearEncounterAnalyticComponent");
static_assert(sizeof(UFortAthenaLinearEncounterAnalyticComponent) == 0x0000F8, "Wrong size on UFortAthenaLinearEncounterAnalyticComponent");

// Class LagerRuntime.FortAthenaLivingWorldConditionSchema
// 0x0000 (0x0038 - 0x0038)
class UFortAthenaLivingWorldConditionSchema : public UWorldConditionSchema
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldConditionSchema">();
	}
	static class UFortAthenaLivingWorldConditionSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldConditionSchema>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldConditionSchema) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldConditionSchema");
static_assert(sizeof(UFortAthenaLivingWorldConditionSchema) == 0x000038, "Wrong size on UFortAthenaLivingWorldConditionSchema");

// Class LagerRuntime.FortAthenaLivingWorldEventDataConditionSchema
// 0x0008 (0x0040 - 0x0038)
class UFortAthenaLivingWorldEventDataConditionSchema final : public UFortAthenaLivingWorldConditionSchema
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldEventDataConditionSchema">();
	}
	static class UFortAthenaLivingWorldEventDataConditionSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldEventDataConditionSchema>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldEventDataConditionSchema) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldEventDataConditionSchema");
static_assert(sizeof(UFortAthenaLivingWorldEventDataConditionSchema) == 0x000040, "Wrong size on UFortAthenaLivingWorldEventDataConditionSchema");

// Class LagerRuntime.FortAthenaLivingWorldConfigData
// 0x02E8 (0x0318 - 0x0030)
class UFortAthenaLivingWorldConfigData final : public UDataAsset
{
public:
	TArray<struct FFortAthenaLivingWorldCategoryTableData> CategoryTableDatas;                                // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorCount;                                     // 0x0040(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxEventSpawnPerTick;                              // 0x0068(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorDespawnPerTick;                            // 0x0090(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinimumEventGenerationInterval;                    // 0x00B8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorDensity;                                   // 0x00E0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorUpdatesPerTick;                            // 0x0108(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxPointProviderUpdatesPerTick;                    // 0x0130(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ActorDensityGridCellSize;                          // 0x0158(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ActorDensitySparseToDenseRatio;                    // 0x0180(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         PointClusterSize;                                  // 0x01A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinNumberOfPlayerForAggressiveSpawning;            // 0x01D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldTagDensityGridData> TagDensityGridData;                                // 0x01F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      SingleUseSpawnerDataQuery;                         // 0x0208(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      ConcurrentSingleUseSpawnerDataQuery;               // 0x0250(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class AFortAthenaLivingWorldEQSHelper> EQSActorHelperClass;                               // 0x0298(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DelayEventGeneration;                              // 0x02A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         RestrictDensityReservationForReservoirs;           // 0x02C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TrackDeadPlayers;                                  // 0x02F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldConfigData">();
	}
	static class UFortAthenaLivingWorldConfigData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldConfigData>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldConfigData) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldConfigData");
static_assert(sizeof(UFortAthenaLivingWorldConfigData) == 0x000318, "Wrong size on UFortAthenaLivingWorldConfigData");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, CategoryTableDatas) == 0x000030, "Member 'UFortAthenaLivingWorldConfigData::CategoryTableDatas' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxActorCount) == 0x000040, "Member 'UFortAthenaLivingWorldConfigData::MaxActorCount' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxEventSpawnPerTick) == 0x000068, "Member 'UFortAthenaLivingWorldConfigData::MaxEventSpawnPerTick' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxActorDespawnPerTick) == 0x000090, "Member 'UFortAthenaLivingWorldConfigData::MaxActorDespawnPerTick' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MinimumEventGenerationInterval) == 0x0000B8, "Member 'UFortAthenaLivingWorldConfigData::MinimumEventGenerationInterval' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxActorDensity) == 0x0000E0, "Member 'UFortAthenaLivingWorldConfigData::MaxActorDensity' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxActorUpdatesPerTick) == 0x000108, "Member 'UFortAthenaLivingWorldConfigData::MaxActorUpdatesPerTick' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxPointProviderUpdatesPerTick) == 0x000130, "Member 'UFortAthenaLivingWorldConfigData::MaxPointProviderUpdatesPerTick' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, ActorDensityGridCellSize) == 0x000158, "Member 'UFortAthenaLivingWorldConfigData::ActorDensityGridCellSize' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, ActorDensitySparseToDenseRatio) == 0x000180, "Member 'UFortAthenaLivingWorldConfigData::ActorDensitySparseToDenseRatio' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, PointClusterSize) == 0x0001A8, "Member 'UFortAthenaLivingWorldConfigData::PointClusterSize' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MinNumberOfPlayerForAggressiveSpawning) == 0x0001D0, "Member 'UFortAthenaLivingWorldConfigData::MinNumberOfPlayerForAggressiveSpawning' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, TagDensityGridData) == 0x0001F8, "Member 'UFortAthenaLivingWorldConfigData::TagDensityGridData' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, SingleUseSpawnerDataQuery) == 0x000208, "Member 'UFortAthenaLivingWorldConfigData::SingleUseSpawnerDataQuery' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, ConcurrentSingleUseSpawnerDataQuery) == 0x000250, "Member 'UFortAthenaLivingWorldConfigData::ConcurrentSingleUseSpawnerDataQuery' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, EQSActorHelperClass) == 0x000298, "Member 'UFortAthenaLivingWorldConfigData::EQSActorHelperClass' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, DelayEventGeneration) == 0x0002A0, "Member 'UFortAthenaLivingWorldConfigData::DelayEventGeneration' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, RestrictDensityReservationForReservoirs) == 0x0002C8, "Member 'UFortAthenaLivingWorldConfigData::RestrictDensityReservationForReservoirs' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, TrackDeadPlayers) == 0x0002F0, "Member 'UFortAthenaLivingWorldConfigData::TrackDeadPlayers' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldDebugDensityMiniMapIndicator
// 0x0060 (0x01A0 - 0x0140)
class UFortAthenaLivingWorldDebugDensityMiniMapIndicator final : public UFortMiniMapIndicator
{
public:
	TArray<struct FFortAthenaActorDensityDebugInfo> ActorDebugInfos;                                   // 0x0140(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DensityGridValues;                                 // 0x0150(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FVector                                GridOrigin;                                        // 0x0160(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FIntVector                             MaxGridSize;                                       // 0x0178(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CellSize;                                          // 0x0184(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDensity;                                        // 0x0188(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName;                                       // 0x0190(0x0010)(Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldDebugDensityMiniMapIndicator">();
	}
	static class UFortAthenaLivingWorldDebugDensityMiniMapIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldDebugDensityMiniMapIndicator>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldDebugDensityMiniMapIndicator");
static_assert(sizeof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator) == 0x0001A0, "Wrong size on UFortAthenaLivingWorldDebugDensityMiniMapIndicator");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, ActorDebugInfos) == 0x000140, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::ActorDebugInfos' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, DensityGridValues) == 0x000150, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::DensityGridValues' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, GridOrigin) == 0x000160, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::GridOrigin' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, MaxGridSize) == 0x000178, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::MaxGridSize' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, CellSize) == 0x000184, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::CellSize' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, MaxDensity) == 0x000188, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::MaxDensity' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, DisplayName) == 0x000190, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::DisplayName' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldDespawnConditionSchema
// 0x0008 (0x0040 - 0x0038)
class UFortAthenaLivingWorldDespawnConditionSchema final : public UFortAthenaLivingWorldConditionSchema
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldDespawnConditionSchema">();
	}
	static class UFortAthenaLivingWorldDespawnConditionSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldDespawnConditionSchema>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldDespawnConditionSchema) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldDespawnConditionSchema");
static_assert(sizeof(UFortAthenaLivingWorldDespawnConditionSchema) == 0x000040, "Wrong size on UFortAthenaLivingWorldDespawnConditionSchema");

// Class LagerRuntime.FortAthenaLivingWorldEncounter
// 0x0038 (0x0068 - 0x0030)
class UFortAthenaLivingWorldEncounter final : public UDataAsset
{
public:
	struct FScalableFloat                         IntervalBetweenEventGeneration;                    // 0x0030(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldEncounterStage> Stages;                                            // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldEncounter">();
	}
	static class UFortAthenaLivingWorldEncounter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldEncounter>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldEncounter) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldEncounter");
static_assert(sizeof(UFortAthenaLivingWorldEncounter) == 0x000068, "Wrong size on UFortAthenaLivingWorldEncounter");
static_assert(offsetof(UFortAthenaLivingWorldEncounter, IntervalBetweenEventGeneration) == 0x000030, "Member 'UFortAthenaLivingWorldEncounter::IntervalBetweenEventGeneration' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounter, Stages) == 0x000058, "Member 'UFortAthenaLivingWorldEncounter::Stages' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldEncounterInstance
// 0x0178 (0x01A0 - 0x0028)
class UFortAthenaLivingWorldEncounterInstance final : public UObject
{
public:
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> OnActorSpawned;                                    // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> OnFirstActorSpawned;                               // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* DestroyedActor)> OnActorDestroyed;                                  // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* DestroyedActor)> OnLastActorDestroyed;                              // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* DiedActor)> OnActorDied;                                       // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLastActorDied;                                   // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(TArray<class AActor*>& SpawnedActors)> OnEventSpawned;                                    // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x50];                                      // 0x0098(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaLivingWorldConditionContainer ConditionContainer;                                // 0x00E8(0x0018)(Transient, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> AllowedPointProviders;                             // 0x0100(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> RegisteredPointProviders;                          // 0x0110(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UFortAthenaLivingWorldEventData*> RuntimeCreatedEventDatas;                          // 0x0120(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_130[0x20];                                     // 0x0130(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterDefinition;                               // 0x0150(0x0020)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 ActorDensityReservoir;                             // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         SpawnedActors;                                     // 0x0178(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentStageIndex;                                 // 0x0190(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentStageMaxActorCount;                         // 0x0194(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198[0x4];                                      // 0x0198(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsPaused;                                         // 0x019C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAllowedPointProvider(const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& PointProvider);
	void AdvanceEncounterStage();
	void OnEncounterActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void PauseEncounter();
	void RemoveAllowedPointProvider(const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& PointProvider);
	void RequestEventGeneration();
	void Reset();
	void ResumeEncounter();
	void StartEncounterStage(const int32 StageIndex);

	int32 GetAliveSpawnedActorCount() const;
	int32 GetTotalActorCount() const;
	bool HasPendingSpawnRequest() const;
	bool HasReachedMaxSpawnedCount() const;
	bool OwnsActor(class AActor* Actor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldEncounterInstance">();
	}
	static class UFortAthenaLivingWorldEncounterInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldEncounterInstance>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldEncounterInstance) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldEncounterInstance");
static_assert(sizeof(UFortAthenaLivingWorldEncounterInstance) == 0x0001A0, "Wrong size on UFortAthenaLivingWorldEncounterInstance");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OnActorSpawned) == 0x000028, "Member 'UFortAthenaLivingWorldEncounterInstance::OnActorSpawned' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OnFirstActorSpawned) == 0x000038, "Member 'UFortAthenaLivingWorldEncounterInstance::OnFirstActorSpawned' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OnActorDestroyed) == 0x000048, "Member 'UFortAthenaLivingWorldEncounterInstance::OnActorDestroyed' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OnLastActorDestroyed) == 0x000058, "Member 'UFortAthenaLivingWorldEncounterInstance::OnLastActorDestroyed' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OnActorDied) == 0x000068, "Member 'UFortAthenaLivingWorldEncounterInstance::OnActorDied' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OnLastActorDied) == 0x000078, "Member 'UFortAthenaLivingWorldEncounterInstance::OnLastActorDied' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OnEventSpawned) == 0x000088, "Member 'UFortAthenaLivingWorldEncounterInstance::OnEventSpawned' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, ConditionContainer) == 0x0000E8, "Member 'UFortAthenaLivingWorldEncounterInstance::ConditionContainer' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, AllowedPointProviders) == 0x000100, "Member 'UFortAthenaLivingWorldEncounterInstance::AllowedPointProviders' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, RegisteredPointProviders) == 0x000110, "Member 'UFortAthenaLivingWorldEncounterInstance::RegisteredPointProviders' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, RuntimeCreatedEventDatas) == 0x000120, "Member 'UFortAthenaLivingWorldEncounterInstance::RuntimeCreatedEventDatas' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, EncounterDefinition) == 0x000150, "Member 'UFortAthenaLivingWorldEncounterInstance::EncounterDefinition' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, ActorDensityReservoir) == 0x000170, "Member 'UFortAthenaLivingWorldEncounterInstance::ActorDensityReservoir' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, SpawnedActors) == 0x000178, "Member 'UFortAthenaLivingWorldEncounterInstance::SpawnedActors' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, CurrentStageIndex) == 0x000190, "Member 'UFortAthenaLivingWorldEncounterInstance::CurrentStageIndex' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, CurrentStageMaxActorCount) == 0x000194, "Member 'UFortAthenaLivingWorldEncounterInstance::CurrentStageMaxActorCount' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, bIsPaused) == 0x00019C, "Member 'UFortAthenaLivingWorldEncounterInstance::bIsPaused' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldEventData
// 0x0120 (0x0150 - 0x0030)
class UFortAthenaLivingWorldEventData : public UDataAsset
{
public:
	int32                                         TimeOfDayFilters;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WaterLevelIndexMin;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WaterLevelIndexMax;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldConditionQueryDefinition         CanSpawnCondition;                                 // 0x0040(0x0018)(Edit, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldDespawnCondition> DespawnConditions;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      ProviderFiltersTagQuery;                           // 0x0068(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FPointProviderFilterEntry>      ProviderFiltersEntries;                            // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FInstancedStruct                       PointProviderSelector;                             // 0x00C0(0x0010)(Edit, NativeAccessSpecifierPrivate)
	struct FInstancedStruct                       SpawnerDataSelector;                               // 0x00D0(0x0010)(Edit, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldTaggedSpawnActionClass> SpawnActions;                                      // 0x00E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinActorCountToSpawn;                              // 0x00F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorCountToSpawn;                              // 0x0118(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription> ActorDescriptions;                                 // 0x0140(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldEventData">();
	}
	static class UFortAthenaLivingWorldEventData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldEventData>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldEventData) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldEventData");
static_assert(sizeof(UFortAthenaLivingWorldEventData) == 0x000150, "Wrong size on UFortAthenaLivingWorldEventData");
static_assert(offsetof(UFortAthenaLivingWorldEventData, TimeOfDayFilters) == 0x000030, "Member 'UFortAthenaLivingWorldEventData::TimeOfDayFilters' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, WaterLevelIndexMin) == 0x000034, "Member 'UFortAthenaLivingWorldEventData::WaterLevelIndexMin' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, WaterLevelIndexMax) == 0x000038, "Member 'UFortAthenaLivingWorldEventData::WaterLevelIndexMax' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, CanSpawnCondition) == 0x000040, "Member 'UFortAthenaLivingWorldEventData::CanSpawnCondition' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, DespawnConditions) == 0x000058, "Member 'UFortAthenaLivingWorldEventData::DespawnConditions' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, ProviderFiltersTagQuery) == 0x000068, "Member 'UFortAthenaLivingWorldEventData::ProviderFiltersTagQuery' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, ProviderFiltersEntries) == 0x0000B0, "Member 'UFortAthenaLivingWorldEventData::ProviderFiltersEntries' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, PointProviderSelector) == 0x0000C0, "Member 'UFortAthenaLivingWorldEventData::PointProviderSelector' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, SpawnerDataSelector) == 0x0000D0, "Member 'UFortAthenaLivingWorldEventData::SpawnerDataSelector' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, SpawnActions) == 0x0000E0, "Member 'UFortAthenaLivingWorldEventData::SpawnActions' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, MinActorCountToSpawn) == 0x0000F0, "Member 'UFortAthenaLivingWorldEventData::MinActorCountToSpawn' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, MaxActorCountToSpawn) == 0x000118, "Member 'UFortAthenaLivingWorldEventData::MaxActorCountToSpawn' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, ActorDescriptions) == 0x000140, "Member 'UFortAthenaLivingWorldEventData::ActorDescriptions' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldManager
// 0x0C10 (0x0CB0 - 0x00A0)
class UFortAthenaLivingWorldManager : public UGameStateComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortAthenaLivingWorldConfigData> DefaultLagerConfig;                                // 0x00A8(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortLivingWorldConfigOverride> LagerConfigOverrides;                              // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LagerEnabled;                                      // 0x00D8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, TSubclassOf<class UFortAthenaLivingWorldSpawnAction>> TaggedSpawnActionClassMap;                         // 0x0100(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> PointProviders;                                    // 0x0150(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	int32                                         RegisteredPointProvidersCount;                     // 0x0160(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_164[0xC];                                      // 0x0164(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SpecialActorMinimapIconBrush;                      // 0x0170(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVector2D                              SpecialActorMinimapIconScale;                      // 0x0230(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            SpecialActorCompassIconBrush;                      // 0x0240(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVector2D                              SpecialActorCompassIconScale;                      // 0x0300(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldSpawnerDataLimiter SpawnerDataLimiter;                                // 0x0310(0x00B0)(Transient, NativeAccessSpecifierPrivate)
	class UWorld*                                 CachedWorld;                                       // 0x03C0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldConfigData*       CachedConfig;                                      // 0x03C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortAthenaLivingWorldEncounterInstance*> RunningEncounterInstances;                         // 0x03D0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UFortSeasonalEventManager*              CachedSeasonalEventManager;                        // 0x03E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSoftClassPtr<class UClass>>           ActorClassToPreloadOnClient;                       // 0x03E8(0x0010)(Net, ZeroConstructor, RepNotify, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldActorUpdateHandler ActorUpdateHandler;                                // 0x03F8(0x00B0)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldPointProviderUpdateHandler PointProviderUpdateHandler;                        // 0x04A8(0x0098)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldRuntimePointProviderHandler RuntimePointProviderHandler;                       // 0x0540(0x0060)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldPlayerTracker    PlayerTracker;                                     // 0x05A0(0x00C0)(Transient, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldPreloader        Preloader;                                         // 0x0660(0x00E0)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldConditionContainer GlobalConditionContainer;                          // 0x0740(0x0018)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_758[0x498];                                    // 0x0758(0x0498)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSubclassOf<class UFortAthenaLivingWorldSpawnAction>, class UFortAthenaLivingWorldSpawnAction*> SpawnActionCache;                                  // 0x0BF0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class AFortAthenaLivingWorldEQSHelper*        EQSHelper;                                         // 0x0C40(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldDebugDensityMiniMapIndicator* DebugDensityMinimapIndicator;                      // 0x0C48(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C50[0x60];                                     // 0x0C50(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortAthenaLivingWorldManager* GetLivingWorldManager(const class UObject* WorldContextObject);
	static void LivingWorldManagerDisablePointProvider(class AActor* PointProvider);
	static void LivingWorldManagerEnablePointProvider(class AActor* PointProvider);
	static void LivingWorldManagerRegisterPointProvider(class AActor* PointProvider);
	static void LivingWorldManagerUnregisterPointProvider(class AActor* PointProvider);

	void CancelSpawnRequest(const int32 RequestID);
	void EndEncounter(class UFortAthenaLivingWorldEncounterInstance* EncounterInstance);
	void LivingWorldManagerDebugEvent(const class FString& EventName, int32 DebugIndex, const class FString& RuntimeSpawnDataName, const class FString& EncounterName);
	void LivingWorldManagerDumpEventInstances();
	void LivingWorldManagerDumpPrefabLevelBounds();
	void LivingWorldManagerDumpSpawnCount();
	void LivingWorldManagerFlush();
	void LivingWorldManagerGenerateEvents();
	void LivingWorldManagerProviderDebugActor(int32 ProviderIndex);
	void LivingWorldManagerSetEventGenerationEnabled(const bool bInGenerateEvents);
	void LivingWorldManagerSwitchDensityDisplay(int32 DensityMapIndex);
	void LivingWorldManagerToggleActorMinimap(const class FString& Name_0);
	void LivingWorldManagerToggleDensityDisplay();
	void LivingWorldManagerToggleGenerateEvents();
	void LivingWorldManagerToggleVerboseLogging();
	void LWMF();
	void LWMTAM(const class FString& Name_0);
	void OnActorSpawned(class AActor* Actor, int32 RequestID);
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnDebugSpawnEventSpawned(const TArray<class AActor*>& SpawnedActors, bool bSuccess);
	void OnPatrolPathAdded(class AFortAthenaPatrolPath* PatrolPath);
	void OnPatrolPathDestroyed(class AActor* Actor);
	void OnRep_ActorClassToPreloadOnClient();
	void OnRep_DebugDensityMinimapIndicator(class UFortAthenaLivingWorldDebugDensityMiniMapIndicator* OldMapIndicator);
	void OnSpawnedActorDestroy(class AActor* DestroyedActor);
	void OnUnmanagedDensityReservoirActorDestroy(class AActor* DestroyedActor);
	void OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags);
	bool RegisterDensityReservoir(class AActor* ActorDensityReservoir, float Density, float Range);
	bool RegisterTagDensityReservoir(class AActor* ActorDensityReservoir, const TArray<struct FFortAthenaLivingWorldEventTagDensityRegistration>& TagsDensity);
	void RequestEventGeneration();
	void ResetEncounter(class UFortAthenaLivingWorldEncounterInstance* EncounterInstance);
	class UFortAthenaLivingWorldEncounterInstance* StartEncounter(const TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterType, const TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>>& EncounterPointProviders, class AActor* ActorDensityReservoir);
	bool TrySpawnEvent(const struct FDataTableRowHandle& EventEntry, const struct FTransform& SpawnLocation, const TDelegate<void(TArray<class AActor*>& SpawnedActors, bool bSuccess)>& OnRequestFinished, int32* RequestID);
	bool TrySpawnEventWithPreDespawn(const struct FDataTableRowHandle& EventEntry, const struct FTransform& SpawnLocation, const TDelegate<void(TArray<class AActor*>& SpawnedActors, bool bSuccess)>& OnRequestFinished, const struct FGameplayTag& DespawnDensityTag, float MaxAllowedDensityValue, int32* RequestID);
	void UnregisterDensityReservoir(class AActor* ActorDensityReservoir);

	bool BuildDataRegistryResolverScope_Implementation(TArray<class FName>* InOutResolverScopes, int32* InOutPriority) const;
	class UFortAthenaLivingWorldEncounterInstance* GetOwningEncounter(class AActor* Actor) const;
	bool HasPendingSpawnRequestForEncounter(const class UFortAthenaLivingWorldEncounterInstance* EncounterInstance) const;
	bool IsEncounterCategoryActive(const TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterType) const;
	float QueryActorDensityBudget(class AActor* ReferenceActor, float Range) const;
	int32 QueryEventBudget(const struct FDataTableRowHandle& EventEntry, const class AActor* SpawnLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldManager">();
	}
	static class UFortAthenaLivingWorldManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldManager>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldManager) == 0x000010, "Wrong alignment on UFortAthenaLivingWorldManager");
static_assert(sizeof(UFortAthenaLivingWorldManager) == 0x000CB0, "Wrong size on UFortAthenaLivingWorldManager");
static_assert(offsetof(UFortAthenaLivingWorldManager, DefaultLagerConfig) == 0x0000A8, "Member 'UFortAthenaLivingWorldManager::DefaultLagerConfig' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, LagerConfigOverrides) == 0x0000C8, "Member 'UFortAthenaLivingWorldManager::LagerConfigOverrides' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, LagerEnabled) == 0x0000D8, "Member 'UFortAthenaLivingWorldManager::LagerEnabled' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, TaggedSpawnActionClassMap) == 0x000100, "Member 'UFortAthenaLivingWorldManager::TaggedSpawnActionClassMap' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, PointProviders) == 0x000150, "Member 'UFortAthenaLivingWorldManager::PointProviders' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, RegisteredPointProvidersCount) == 0x000160, "Member 'UFortAthenaLivingWorldManager::RegisteredPointProvidersCount' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpecialActorMinimapIconBrush) == 0x000170, "Member 'UFortAthenaLivingWorldManager::SpecialActorMinimapIconBrush' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpecialActorMinimapIconScale) == 0x000230, "Member 'UFortAthenaLivingWorldManager::SpecialActorMinimapIconScale' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpecialActorCompassIconBrush) == 0x000240, "Member 'UFortAthenaLivingWorldManager::SpecialActorCompassIconBrush' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpecialActorCompassIconScale) == 0x000300, "Member 'UFortAthenaLivingWorldManager::SpecialActorCompassIconScale' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpawnerDataLimiter) == 0x000310, "Member 'UFortAthenaLivingWorldManager::SpawnerDataLimiter' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, CachedWorld) == 0x0003C0, "Member 'UFortAthenaLivingWorldManager::CachedWorld' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, CachedConfig) == 0x0003C8, "Member 'UFortAthenaLivingWorldManager::CachedConfig' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, RunningEncounterInstances) == 0x0003D0, "Member 'UFortAthenaLivingWorldManager::RunningEncounterInstances' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, CachedSeasonalEventManager) == 0x0003E0, "Member 'UFortAthenaLivingWorldManager::CachedSeasonalEventManager' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, ActorClassToPreloadOnClient) == 0x0003E8, "Member 'UFortAthenaLivingWorldManager::ActorClassToPreloadOnClient' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, ActorUpdateHandler) == 0x0003F8, "Member 'UFortAthenaLivingWorldManager::ActorUpdateHandler' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, PointProviderUpdateHandler) == 0x0004A8, "Member 'UFortAthenaLivingWorldManager::PointProviderUpdateHandler' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, RuntimePointProviderHandler) == 0x000540, "Member 'UFortAthenaLivingWorldManager::RuntimePointProviderHandler' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, PlayerTracker) == 0x0005A0, "Member 'UFortAthenaLivingWorldManager::PlayerTracker' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, Preloader) == 0x000660, "Member 'UFortAthenaLivingWorldManager::Preloader' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, GlobalConditionContainer) == 0x000740, "Member 'UFortAthenaLivingWorldManager::GlobalConditionContainer' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpawnActionCache) == 0x000BF0, "Member 'UFortAthenaLivingWorldManager::SpawnActionCache' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, EQSHelper) == 0x000C40, "Member 'UFortAthenaLivingWorldManager::EQSHelper' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, DebugDensityMinimapIndicator) == 0x000C48, "Member 'UFortAthenaLivingWorldManager::DebugDensityMinimapIndicator' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldNavigationInvokerComponent
// 0x0100 (0x01A0 - 0x00A0)
class UFortAthenaLivingWorldNavigationInvokerComponent final : public UActorComponent
{
public:
	struct FScalableFloat                         GenerationRadius;                                  // 0x00A0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FNavAgentSelector                      SupportedAgents;                                   // 0x00C8(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         DistanceToPlayer;                                  // 0x00D0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DistanceToPlayerHysteresis;                        // 0x00F8(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RegistrationDistanceToPlayer;                      // 0x0120(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RegistrationDistanceToPlayerHysteresis;            // 0x0148(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FortAthenaLivingWorldNavigationInvokerSettingsOverride> SettingsOverride;                                  // 0x0170(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortAthenaLivingWorldManager> LivingWorldManager;                                // 0x0180(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_188[0x18];                                     // 0x0188(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldNavigationInvokerComponent">();
	}
	static class UFortAthenaLivingWorldNavigationInvokerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldNavigationInvokerComponent>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldNavigationInvokerComponent) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldNavigationInvokerComponent");
static_assert(sizeof(UFortAthenaLivingWorldNavigationInvokerComponent) == 0x0001A0, "Wrong size on UFortAthenaLivingWorldNavigationInvokerComponent");
static_assert(offsetof(UFortAthenaLivingWorldNavigationInvokerComponent, GenerationRadius) == 0x0000A0, "Member 'UFortAthenaLivingWorldNavigationInvokerComponent::GenerationRadius' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldNavigationInvokerComponent, SupportedAgents) == 0x0000C8, "Member 'UFortAthenaLivingWorldNavigationInvokerComponent::SupportedAgents' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldNavigationInvokerComponent, DistanceToPlayer) == 0x0000D0, "Member 'UFortAthenaLivingWorldNavigationInvokerComponent::DistanceToPlayer' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldNavigationInvokerComponent, DistanceToPlayerHysteresis) == 0x0000F8, "Member 'UFortAthenaLivingWorldNavigationInvokerComponent::DistanceToPlayerHysteresis' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldNavigationInvokerComponent, RegistrationDistanceToPlayer) == 0x000120, "Member 'UFortAthenaLivingWorldNavigationInvokerComponent::RegistrationDistanceToPlayer' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldNavigationInvokerComponent, RegistrationDistanceToPlayerHysteresis) == 0x000148, "Member 'UFortAthenaLivingWorldNavigationInvokerComponent::RegistrationDistanceToPlayerHysteresis' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldNavigationInvokerComponent, SettingsOverride) == 0x000170, "Member 'UFortAthenaLivingWorldNavigationInvokerComponent::SettingsOverride' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldNavigationInvokerComponent, LivingWorldManager) == 0x000180, "Member 'UFortAthenaLivingWorldNavigationInvokerComponent::LivingWorldManager' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldPrefabLevelStreaming
// 0x0000 (0x01C0 - 0x01C0)
class UFortAthenaLivingWorldPrefabLevelStreaming final : public ULevelStreamingLevelInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldPrefabLevelStreaming">();
	}
	static class UFortAthenaLivingWorldPrefabLevelStreaming* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldPrefabLevelStreaming>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldPrefabLevelStreaming) == 0x000010, "Wrong alignment on UFortAthenaLivingWorldPrefabLevelStreaming");
static_assert(sizeof(UFortAthenaLivingWorldPrefabLevelStreaming) == 0x0001C0, "Wrong size on UFortAthenaLivingWorldPrefabLevelStreaming");

// Class LagerRuntime.FortAthenaLivingWorldPrefab
// 0x0170 (0x0940 - 0x07D0)
class AFortAthenaLivingWorldPrefab : public AFortLevelInstancePrefab
{
public:
	TArray<struct FFortAthenaLivingWorldPrefabActorSpawnerData> ActorSpawnerDatas;                                 // 0x07D0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   LocalLevelBounds;                                  // 0x07E0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   LocalGrassRemovalBox;                              // 0x0818(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(TArray<class AActor*>& SpawnedActors)> OnAllActorSpawnedDelegate;                         // 0x0850(0x0010)(ZeroConstructor, Transient, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_860[0x18];                                     // 0x0860(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ABuildingActor>>  BuildingsToKill;                                   // 0x0878(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AActor>>          SpawnedActors;                                     // 0x0888(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TDelegate<void()>                             FinishedDestroyingBuildingCallback;                // 0x0898(0x000C)(ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasFinishedSpawn;                                 // 0x08A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRemovedFoliage;                                // 0x08A5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8A6[0x2];                                      // 0x08A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         bIsEnabled;                                        // 0x08A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         Weight;                                            // 0x08D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldLevelBeVisible;                             // 0x08F8(0x0001)(Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldSpawnerBeAllowedToSpawn;                    // 0x08F9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldAlwaysSnapAboveLandscape;                   // 0x08FA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8FB[0x5];                                      // 0x08FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldConditionQueryDefinition         CanSpawnCondition;                                 // 0x0900(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_918[0x8];                                      // 0x0918(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PrefabTags;                                        // 0x0920(0x0020)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class AFortAthenaLivingWorldPrefab* GetOwningLivingWorldPrefab(const class UObject* WorldContextObject);

	void AllowSpawnerToSpawn();
	void CallWhenAllActorHaveSpawned(const TDelegate<void(TArray<class AActor*>& SpawnedActors)>& DelegateToCall);
	void DestroyBuildingsInLevelBounds(const TDelegate<void()>& FinishedDelegate);
	void MakeLevelVisible();
	void OnRep_ShouldLevelBeVisible();
	void RemoveFoliageInsideLevelBound();

	struct FBox GetLevelBounds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldPrefab">();
	}
	static class AFortAthenaLivingWorldPrefab* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldPrefab>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldPrefab) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldPrefab");
static_assert(sizeof(AFortAthenaLivingWorldPrefab) == 0x000940, "Wrong size on AFortAthenaLivingWorldPrefab");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, ActorSpawnerDatas) == 0x0007D0, "Member 'AFortAthenaLivingWorldPrefab::ActorSpawnerDatas' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, LocalLevelBounds) == 0x0007E0, "Member 'AFortAthenaLivingWorldPrefab::LocalLevelBounds' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, LocalGrassRemovalBox) == 0x000818, "Member 'AFortAthenaLivingWorldPrefab::LocalGrassRemovalBox' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, OnAllActorSpawnedDelegate) == 0x000850, "Member 'AFortAthenaLivingWorldPrefab::OnAllActorSpawnedDelegate' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, BuildingsToKill) == 0x000878, "Member 'AFortAthenaLivingWorldPrefab::BuildingsToKill' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, SpawnedActors) == 0x000888, "Member 'AFortAthenaLivingWorldPrefab::SpawnedActors' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, FinishedDestroyingBuildingCallback) == 0x000898, "Member 'AFortAthenaLivingWorldPrefab::FinishedDestroyingBuildingCallback' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, bHasFinishedSpawn) == 0x0008A4, "Member 'AFortAthenaLivingWorldPrefab::bHasFinishedSpawn' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, bHasRemovedFoliage) == 0x0008A5, "Member 'AFortAthenaLivingWorldPrefab::bHasRemovedFoliage' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, bIsEnabled) == 0x0008A8, "Member 'AFortAthenaLivingWorldPrefab::bIsEnabled' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, Weight) == 0x0008D0, "Member 'AFortAthenaLivingWorldPrefab::Weight' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, bShouldLevelBeVisible) == 0x0008F8, "Member 'AFortAthenaLivingWorldPrefab::bShouldLevelBeVisible' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, bShouldSpawnerBeAllowedToSpawn) == 0x0008F9, "Member 'AFortAthenaLivingWorldPrefab::bShouldSpawnerBeAllowedToSpawn' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, bShouldAlwaysSnapAboveLandscape) == 0x0008FA, "Member 'AFortAthenaLivingWorldPrefab::bShouldAlwaysSnapAboveLandscape' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, CanSpawnCondition) == 0x000900, "Member 'AFortAthenaLivingWorldPrefab::CanSpawnCondition' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefab, PrefabTags) == 0x000920, "Member 'AFortAthenaLivingWorldPrefab::PrefabTags' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldPrefabActorSpawner
// 0x0130 (0x03C0 - 0x0290)
class AFortAthenaLivingWorldPrefabActorSpawner final : public AActor
{
public:
	struct FFortAthenaLivingWorldActorSpawnDescription ActorDescription;                                  // 0x0290(0x0100)(Edit, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> OnActorSpawnedDelegate;                            // 0x0390(0x0010)(ZeroConstructor, Transient, InstancedReference, Protected, NativeAccessSpecifierProtected)
	class AFortAthenaPatrolPath*                  PatrolPath;                                        // 0x03A0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  Guid;                                              // 0x03A8(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  SpawnedActor;                                      // 0x03B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CallWhenActorSpawned(const TDelegate<void(class AActor* SpawnedActor)>& DelegateToCall);
	void OnSnapCompleted(class UFortSnapOnSurfaceComponent* Component, const struct FTransform& OldTransform, const struct FTransform& NewTransfom);

	class AActor* GetSpawnedActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldPrefabActorSpawner">();
	}
	static class AFortAthenaLivingWorldPrefabActorSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldPrefabActorSpawner>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldPrefabActorSpawner) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldPrefabActorSpawner");
static_assert(sizeof(AFortAthenaLivingWorldPrefabActorSpawner) == 0x0003C0, "Wrong size on AFortAthenaLivingWorldPrefabActorSpawner");
static_assert(offsetof(AFortAthenaLivingWorldPrefabActorSpawner, ActorDescription) == 0x000290, "Member 'AFortAthenaLivingWorldPrefabActorSpawner::ActorDescription' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefabActorSpawner, OnActorSpawnedDelegate) == 0x000390, "Member 'AFortAthenaLivingWorldPrefabActorSpawner::OnActorSpawnedDelegate' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefabActorSpawner, PatrolPath) == 0x0003A0, "Member 'AFortAthenaLivingWorldPrefabActorSpawner::PatrolPath' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefabActorSpawner, Guid) == 0x0003A8, "Member 'AFortAthenaLivingWorldPrefabActorSpawner::Guid' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPrefabActorSpawner, SpawnedActor) == 0x0003B8, "Member 'AFortAthenaLivingWorldPrefabActorSpawner::SpawnedActor' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldRuntimePointProviderComponent
// 0x0000 (0x00A0 - 0x00A0)
class UFortAthenaLivingWorldRuntimePointProviderComponent : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldRuntimePointProviderComponent">();
	}
	static class UFortAthenaLivingWorldRuntimePointProviderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldRuntimePointProviderComponent>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldRuntimePointProviderComponent) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldRuntimePointProviderComponent");
static_assert(sizeof(UFortAthenaLivingWorldRuntimePointProviderComponent) == 0x0000A0, "Wrong size on UFortAthenaLivingWorldRuntimePointProviderComponent");

// Class LagerRuntime.FortAthenaLivingWorldSpawnAction
// 0x0000 (0x0028 - 0x0028)
class UFortAthenaLivingWorldSpawnAction : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldSpawnAction">();
	}
	static class UFortAthenaLivingWorldSpawnAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldSpawnAction>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldSpawnAction) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldSpawnAction");
static_assert(sizeof(UFortAthenaLivingWorldSpawnAction) == 0x000028, "Wrong size on UFortAthenaLivingWorldSpawnAction");

// Class LagerRuntime.FortAthenaLivingWorldSpawnActionBlueprint
// 0x0000 (0x0028 - 0x0028)
class UFortAthenaLivingWorldSpawnActionBlueprint final : public UFortAthenaLivingWorldSpawnAction
{
public:
	void K2_ModifySpawnComponentList(class UFortAthenaAISpawnerDataComponentList* ComponentList, class UObject* ComponentOuter) const;
	void K2_OnAllActorSpawned(const TArray<class AActor*>& SpawnedActor, const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& SourcePointProvider) const;
	void K2_OnSpawnedActor(const class AActor* SpawnedActor, const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& SourcePointProvider) const;
	void K2_OnSpawnedActorFailed(const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& SourcePointProvider) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldSpawnActionBlueprint">();
	}
	static class UFortAthenaLivingWorldSpawnActionBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldSpawnActionBlueprint>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldSpawnActionBlueprint) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldSpawnActionBlueprint");
static_assert(sizeof(UFortAthenaLivingWorldSpawnActionBlueprint) == 0x000028, "Wrong size on UFortAthenaLivingWorldSpawnActionBlueprint");

// Class LagerRuntime.FortAthenaLivingWorldWardComponent
// 0x0010 (0x00B0 - 0x00A0)
class UFortAthenaLivingWorldWardComponent final : public UActorComponent
{
public:
	float                                         DefaultRadius;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags);
	void SetWardRadius(float Radius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldWardComponent">();
	}
	static class UFortAthenaLivingWorldWardComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldWardComponent>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldWardComponent) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldWardComponent");
static_assert(sizeof(UFortAthenaLivingWorldWardComponent) == 0x0000B0, "Wrong size on UFortAthenaLivingWorldWardComponent");
static_assert(offsetof(UFortAthenaLivingWorldWardComponent, DefaultRadius) == 0x0000A0, "Member 'UFortAthenaLivingWorldWardComponent::DefaultRadius' has a wrong offset!");

// Class LagerRuntime.FortCheatManager_LivingWorldManager_EnhancedInputBindingInfo
// 0x0018 (0x0040 - 0x0028)
class UFortCheatManager_LivingWorldManager_EnhancedInputBindingInfo final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_LivingWorldManager_EnhancedInputBindingInfo">();
	}
	static class UFortCheatManager_LivingWorldManager_EnhancedInputBindingInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_LivingWorldManager_EnhancedInputBindingInfo>();
	}
};
static_assert(alignof(UFortCheatManager_LivingWorldManager_EnhancedInputBindingInfo) == 0x000008, "Wrong alignment on UFortCheatManager_LivingWorldManager_EnhancedInputBindingInfo");
static_assert(sizeof(UFortCheatManager_LivingWorldManager_EnhancedInputBindingInfo) == 0x000040, "Wrong size on UFortCheatManager_LivingWorldManager_EnhancedInputBindingInfo");

// Class LagerRuntime.FortCheatManager_LivingWorldManager
// 0x0068 (0x0090 - 0x0028)
class UFortCheatManager_LivingWorldManager final : public UChildCheatManager
{
public:
	int32                                         CheatTeleportToCount;                              // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CheatTeleportLastEventDataName;                    // 0x0030(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CheatSpawnEventCount;                              // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CheatSpawnEventName;                               // 0x0048(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CheatTriggerEventCount;                            // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CheatTriggerEventName;                             // 0x0060(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortCheatManager_LivingWorldManager_EnhancedInputBindingInfo*> InputBindings;                                     // 0x0070(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UEnhancedInputComponent*                InputComponent;                                    // 0x0080(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LivingWorldManagerDisplaySpawnPoints(float MaxDisplayDistance);
	void LivingWorldManagerGDTNextDensityGrid();
	void LivingWorldManagerSpawn(const class FString& EventDataName);
	void LivingWorldManagerSpawnAtLocation(const class FString& EventDataName, const struct FVector& Location, const struct FRotator& Rotation);
	void LivingWorldManagerSpawnEvent(const class FString& EventDataName, const class FString& SpawnerDataNames);
	void LivingWorldManagerSpawnEventAtLocation(const class FString& EventDataName, const struct FVector& Location, const struct FRotator& Rotation, const class FString& SpawnerDataNames);
	void LivingWorldManagerSpawnTrackedAtLocation(const class FString& EventDataName, const class FString& TrackedActorName, const struct FVector& Location, const struct FRotator& Rotation);
	void LivingWorldManagerTeleportTo(const class FString& EventDataName);
	void LivingWorldManagerTeleportToSpawnPosition(const class FString& EventDataName);
	void LivingWorldManagerTriggerEvent(const class FString& EventDataName);
	void LWMS(const class FString& EventDataName);
	void LWMSE(const class FString& EventDataName, const class FString& SpawnerDataNames);
	void LWMTE(const class FString& EventDataName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_LivingWorldManager">();
	}
	static class UFortCheatManager_LivingWorldManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_LivingWorldManager>();
	}
};
static_assert(alignof(UFortCheatManager_LivingWorldManager) == 0x000008, "Wrong alignment on UFortCheatManager_LivingWorldManager");
static_assert(sizeof(UFortCheatManager_LivingWorldManager) == 0x000090, "Wrong size on UFortCheatManager_LivingWorldManager");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, CheatTeleportToCount) == 0x000028, "Member 'UFortCheatManager_LivingWorldManager::CheatTeleportToCount' has a wrong offset!");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, CheatTeleportLastEventDataName) == 0x000030, "Member 'UFortCheatManager_LivingWorldManager::CheatTeleportLastEventDataName' has a wrong offset!");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, CheatSpawnEventCount) == 0x000040, "Member 'UFortCheatManager_LivingWorldManager::CheatSpawnEventCount' has a wrong offset!");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, CheatSpawnEventName) == 0x000048, "Member 'UFortCheatManager_LivingWorldManager::CheatSpawnEventName' has a wrong offset!");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, CheatTriggerEventCount) == 0x000058, "Member 'UFortCheatManager_LivingWorldManager::CheatTriggerEventCount' has a wrong offset!");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, CheatTriggerEventName) == 0x000060, "Member 'UFortCheatManager_LivingWorldManager::CheatTriggerEventName' has a wrong offset!");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, InputBindings) == 0x000070, "Member 'UFortCheatManager_LivingWorldManager::InputBindings' has a wrong offset!");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, InputComponent) == 0x000080, "Member 'UFortCheatManager_LivingWorldManager::InputComponent' has a wrong offset!");

// Class LagerRuntime.FortGameFeatureAction_AddCategoryTableToConfig
// 0x0050 (0x0078 - 0x0028)
class UFortGameFeatureAction_AddCategoryTableToConfig final : public UGameFeatureAction
{
public:
	TMap<TSoftObjectPtr<class UFortAthenaLivingWorldConfigData>, struct FFortAthenaLivingWorldCategoryTableDataList> ConfigToCategoryTableDatas;                        // 0x0028(0x0050)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameFeatureAction_AddCategoryTableToConfig">();
	}
	static class UFortGameFeatureAction_AddCategoryTableToConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameFeatureAction_AddCategoryTableToConfig>();
	}
};
static_assert(alignof(UFortGameFeatureAction_AddCategoryTableToConfig) == 0x000008, "Wrong alignment on UFortGameFeatureAction_AddCategoryTableToConfig");
static_assert(sizeof(UFortGameFeatureAction_AddCategoryTableToConfig) == 0x000078, "Wrong size on UFortGameFeatureAction_AddCategoryTableToConfig");
static_assert(offsetof(UFortGameFeatureAction_AddCategoryTableToConfig, ConfigToCategoryTableDatas) == 0x000028, "Member 'UFortGameFeatureAction_AddCategoryTableToConfig::ConfigToCategoryTableDatas' has a wrong offset!");

// Class LagerRuntime.FortGameFeatureAction_AddLagerConfig
// 0x0010 (0x0038 - 0x0028)
class UFortGameFeatureAction_AddLagerConfig final : public UGameFeatureAction
{
public:
	TArray<struct FFortLivingWorldConfigOverride> LagerConfigOverrides;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameFeatureAction_AddLagerConfig">();
	}
	static class UFortGameFeatureAction_AddLagerConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameFeatureAction_AddLagerConfig>();
	}
};
static_assert(alignof(UFortGameFeatureAction_AddLagerConfig) == 0x000008, "Wrong alignment on UFortGameFeatureAction_AddLagerConfig");
static_assert(sizeof(UFortGameFeatureAction_AddLagerConfig) == 0x000038, "Wrong size on UFortGameFeatureAction_AddLagerConfig");
static_assert(offsetof(UFortGameFeatureAction_AddLagerConfig, LagerConfigOverrides) == 0x000028, "Member 'UFortGameFeatureAction_AddLagerConfig::LagerConfigOverrides' has a wrong offset!");

// Class LagerRuntime.FortGameFeatureAction_MapMarkerTagsProvider_PatrolPath
// 0x0000 (0x0028 - 0x0028)
class UFortGameFeatureAction_MapMarkerTagsProvider_PatrolPath final : public UFortGameFeatureAction_MapMarkerTagsProvider
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameFeatureAction_MapMarkerTagsProvider_PatrolPath">();
	}
	static class UFortGameFeatureAction_MapMarkerTagsProvider_PatrolPath* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameFeatureAction_MapMarkerTagsProvider_PatrolPath>();
	}
};
static_assert(alignof(UFortGameFeatureAction_MapMarkerTagsProvider_PatrolPath) == 0x000008, "Wrong alignment on UFortGameFeatureAction_MapMarkerTagsProvider_PatrolPath");
static_assert(sizeof(UFortGameFeatureAction_MapMarkerTagsProvider_PatrolPath) == 0x000028, "Wrong size on UFortGameFeatureAction_MapMarkerTagsProvider_PatrolPath");

// Class LagerRuntime.FortPawnComponent_LivingWorldSpawnAroundPlayer
// 0x0020 (0x00C8 - 0x00A8)
class UFortPawnComponent_LivingWorldSpawnAroundPlayer final : public UFortPawnComponent
{
public:
	TArray<struct FLivingWorldSpawnAroundPlayerRuntimeData> RuntimeData;                                       // 0x00A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FLivingWorldSpawnAroundPlayerConfiguration> PerPlayerConfigurations;                           // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPawnComponent_LivingWorldSpawnAroundPlayer">();
	}
	static class UFortPawnComponent_LivingWorldSpawnAroundPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPawnComponent_LivingWorldSpawnAroundPlayer>();
	}
};
static_assert(alignof(UFortPawnComponent_LivingWorldSpawnAroundPlayer) == 0x000008, "Wrong alignment on UFortPawnComponent_LivingWorldSpawnAroundPlayer");
static_assert(sizeof(UFortPawnComponent_LivingWorldSpawnAroundPlayer) == 0x0000C8, "Wrong size on UFortPawnComponent_LivingWorldSpawnAroundPlayer");
static_assert(offsetof(UFortPawnComponent_LivingWorldSpawnAroundPlayer, RuntimeData) == 0x0000A8, "Member 'UFortPawnComponent_LivingWorldSpawnAroundPlayer::RuntimeData' has a wrong offset!");
static_assert(offsetof(UFortPawnComponent_LivingWorldSpawnAroundPlayer, PerPlayerConfigurations) == 0x0000B8, "Member 'UFortPawnComponent_LivingWorldSpawnAroundPlayer::PerPlayerConfigurations' has a wrong offset!");

// Class LagerRuntime.FortQueryTest_IsCloseToLivingWorldWard
// 0x0000 (0x01F8 - 0x01F8)
class UFortQueryTest_IsCloseToLivingWorldWard final : public UEnvQueryTest
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQueryTest_IsCloseToLivingWorldWard">();
	}
	static class UFortQueryTest_IsCloseToLivingWorldWard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQueryTest_IsCloseToLivingWorldWard>();
	}
};
static_assert(alignof(UFortQueryTest_IsCloseToLivingWorldWard) == 0x000008, "Wrong alignment on UFortQueryTest_IsCloseToLivingWorldWard");
static_assert(sizeof(UFortQueryTest_IsCloseToLivingWorldWard) == 0x0001F8, "Wrong size on UFortQueryTest_IsCloseToLivingWorldWard");

// Class LagerRuntime.FortAthenaLivingWorldEQSHelper
// 0x0070 (0x0300 - 0x0290)
class AFortAthenaLivingWorldEQSHelper final : public AActor
{
public:
	uint8                                         Pad_290[0x40];                                     // 0x0290(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNavAgentProperties                    NavAgentProperties;                                // 0x02D0(0x0030)(Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldEQSHelper">();
	}
	static class AFortAthenaLivingWorldEQSHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldEQSHelper>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldEQSHelper) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldEQSHelper");
static_assert(sizeof(AFortAthenaLivingWorldEQSHelper) == 0x000300, "Wrong size on AFortAthenaLivingWorldEQSHelper");
static_assert(offsetof(AFortAthenaLivingWorldEQSHelper, NavAgentProperties) == 0x0002D0, "Member 'AFortAthenaLivingWorldEQSHelper::NavAgentProperties' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldLightStaticPointProvider
// 0x0138 (0x0160 - 0x0028)
class UFortAthenaLivingWorldLightStaticPointProvider : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x0038(0x0068)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  FiltersTags;                                       // 0x00A0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             SpawnPoint;                                        // 0x00C0(0x0060)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRandomizePointRotation;                           // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> OnActorSpawned;                                    // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FPointProviderDebugInfo                DebugInfo;                                         // 0x0138(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x0148(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortAthenaLivingWorldManager*          CachedLivingWorldManager;                          // 0x0150(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePointProvider();
	void EnablePointProvider();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldLightStaticPointProvider">();
	}
	static class UFortAthenaLivingWorldLightStaticPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldLightStaticPointProvider>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldLightStaticPointProvider) == 0x000010, "Wrong alignment on UFortAthenaLivingWorldLightStaticPointProvider");
static_assert(sizeof(UFortAthenaLivingWorldLightStaticPointProvider) == 0x000160, "Wrong size on UFortAthenaLivingWorldLightStaticPointProvider");
static_assert(offsetof(UFortAthenaLivingWorldLightStaticPointProvider, SpawnLimiter) == 0x000038, "Member 'UFortAthenaLivingWorldLightStaticPointProvider::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldLightStaticPointProvider, FiltersTags) == 0x0000A0, "Member 'UFortAthenaLivingWorldLightStaticPointProvider::FiltersTags' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldLightStaticPointProvider, SpawnPoint) == 0x0000C0, "Member 'UFortAthenaLivingWorldLightStaticPointProvider::SpawnPoint' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldLightStaticPointProvider, bRandomizePointRotation) == 0x000120, "Member 'UFortAthenaLivingWorldLightStaticPointProvider::bRandomizePointRotation' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldLightStaticPointProvider, OnActorSpawned) == 0x000128, "Member 'UFortAthenaLivingWorldLightStaticPointProvider::OnActorSpawned' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldLightStaticPointProvider, DebugInfo) == 0x000138, "Member 'UFortAthenaLivingWorldLightStaticPointProvider::DebugInfo' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldLightStaticPointProvider, CachedGameState) == 0x000148, "Member 'UFortAthenaLivingWorldLightStaticPointProvider::CachedGameState' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldLightStaticPointProvider, CachedLivingWorldManager) == 0x000150, "Member 'UFortAthenaLivingWorldLightStaticPointProvider::CachedLivingWorldManager' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldPointProviderInterface
// 0x0000 (0x0028 - 0x0028)
class IFortAthenaLivingWorldPointProviderInterface final : public IInterface
{
public:
	void DisablePointProvider();
	void EnablePointProvider();
	struct FVector GetPointProviderLocation();
	float GetPointProviderMaxRadius();

	void GetFiltersTags(struct FGameplayTagContainer* FilterTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldPointProviderInterface">();
	}
	static class IFortAthenaLivingWorldPointProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortAthenaLivingWorldPointProviderInterface>();
	}
};
static_assert(alignof(IFortAthenaLivingWorldPointProviderInterface) == 0x000008, "Wrong alignment on IFortAthenaLivingWorldPointProviderInterface");
static_assert(sizeof(IFortAthenaLivingWorldPointProviderInterface) == 0x000028, "Wrong size on IFortAthenaLivingWorldPointProviderInterface");

// Class LagerRuntime.FortAthenaLivingWorldStaticPointProvider
// 0x00F8 (0x0388 - 0x0290)
class AFortAthenaLivingWorldStaticPointProvider : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x0298(0x0068)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  FiltersTags;                                       // 0x0300(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                     SpawnPoints;                                       // 0x0320(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bStartEnabled;                                     // 0x0330(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRandomizeStartPoint;                              // 0x0331(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRandomizePointRotation;                           // 0x0332(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_333[0x5];                                      // 0x0333(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> OnActorSpawned;                                    // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FPointProviderDebugInfo                DebugInfo;                                         // 0x0348(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x0358(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortAthenaLivingWorldManager*          CachedLivingWorldManager;                          // 0x0360(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x20];                                     // 0x0368(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePointProvider();
	void EnablePointProvider();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldStaticPointProvider">();
	}
	static class AFortAthenaLivingWorldStaticPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldStaticPointProvider>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldStaticPointProvider) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldStaticPointProvider");
static_assert(sizeof(AFortAthenaLivingWorldStaticPointProvider) == 0x000388, "Wrong size on AFortAthenaLivingWorldStaticPointProvider");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, SpawnLimiter) == 0x000298, "Member 'AFortAthenaLivingWorldStaticPointProvider::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, FiltersTags) == 0x000300, "Member 'AFortAthenaLivingWorldStaticPointProvider::FiltersTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, SpawnPoints) == 0x000320, "Member 'AFortAthenaLivingWorldStaticPointProvider::SpawnPoints' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, bStartEnabled) == 0x000330, "Member 'AFortAthenaLivingWorldStaticPointProvider::bStartEnabled' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, bRandomizeStartPoint) == 0x000331, "Member 'AFortAthenaLivingWorldStaticPointProvider::bRandomizeStartPoint' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, bRandomizePointRotation) == 0x000332, "Member 'AFortAthenaLivingWorldStaticPointProvider::bRandomizePointRotation' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, OnActorSpawned) == 0x000338, "Member 'AFortAthenaLivingWorldStaticPointProvider::OnActorSpawned' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, DebugInfo) == 0x000348, "Member 'AFortAthenaLivingWorldStaticPointProvider::DebugInfo' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, CachedGameState) == 0x000358, "Member 'AFortAthenaLivingWorldStaticPointProvider::CachedGameState' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, CachedLivingWorldManager) == 0x000360, "Member 'AFortAthenaLivingWorldStaticPointProvider::CachedLivingWorldManager' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldVehiclePointProvider
// 0x00C8 (0x0450 - 0x0388)
class AFortAthenaLivingWorldVehiclePointProvider final : public AFortAthenaLivingWorldStaticPointProvider
{
public:
	EVehicleInitialOverlapBehavior                InitialOverlapBehavior;                            // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ForceModsAllowed;                                  // 0x0390(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ForceMods;                                         // 0x03B8(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForceCosmeticsAllowed;                             // 0x03D8(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSpawnerInfoForcedCosmetics            ForceCosmetics;                                    // 0x0400(0x0048)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_448[0x8];                                      // 0x0448(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldVehiclePointProvider">();
	}
	static class AFortAthenaLivingWorldVehiclePointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldVehiclePointProvider>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldVehiclePointProvider) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldVehiclePointProvider");
static_assert(sizeof(AFortAthenaLivingWorldVehiclePointProvider) == 0x000450, "Wrong size on AFortAthenaLivingWorldVehiclePointProvider");
static_assert(offsetof(AFortAthenaLivingWorldVehiclePointProvider, InitialOverlapBehavior) == 0x000388, "Member 'AFortAthenaLivingWorldVehiclePointProvider::InitialOverlapBehavior' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVehiclePointProvider, ForceModsAllowed) == 0x000390, "Member 'AFortAthenaLivingWorldVehiclePointProvider::ForceModsAllowed' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVehiclePointProvider, ForceMods) == 0x0003B8, "Member 'AFortAthenaLivingWorldVehiclePointProvider::ForceMods' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVehiclePointProvider, ForceCosmeticsAllowed) == 0x0003D8, "Member 'AFortAthenaLivingWorldVehiclePointProvider::ForceCosmeticsAllowed' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVehiclePointProvider, ForceCosmetics) == 0x000400, "Member 'AFortAthenaLivingWorldVehiclePointProvider::ForceCosmetics' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldVolume
// 0x0310 (0x05D8 - 0x02C8)
class AFortAthenaLivingWorldVolume : public AVolume
{
public:
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStartEnabled;                                     // 0x02D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bWaitForNavigation;                                // 0x02D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  FiltersTags;                                       // 0x02D8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	class UEnvQuery*                              EnvironmentQuery;                                  // 0x02F8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FAIDynamicParam>                QueryConfig;                                       // 0x0300(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bRemoveUsedPoint;                                  // 0x0310(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRemoveUsedPointPermenantly;                       // 0x0311(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x0318(0x0068)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         EQSRefreshInterval;                                // 0x0380(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         WaterLevelIndexMin;                                // 0x03A8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         WaterLevelIndexMax;                                // 0x03D0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x03F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor, bool bResult)> OnActorSpawnedResult;                              // 0x0400(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AFortAthenaLivingWorldVolume* PointProviderVolume)> OnPointProviderRegistered;                         // 0x0410(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldManager*          CachedLivingWorldManager;                          // 0x0420(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_428[0x1B0];                                    // 0x0428(0x01B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePointProvider();
	void EnablePointProvider();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnNavigationFinishedGeneration(class ANavigationData* NavData);
	void OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags);
	void ResetSpawnRotation();
	void RunEQS();
	void SetEQSQuery(class UEnvQuery* Query);
	void SetEQSQueryConfigParam(const class FName ParameterName, float Value);
	void SetFiltersTags(const struct FGameplayTagContainer& TagContainer);
	void SetSpawnRotation(const struct FRotator& Rotation);

	bool DoesStartEnabled() const;
	bool IsPointProviderEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldVolume">();
	}
	static class AFortAthenaLivingWorldVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldVolume>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldVolume) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldVolume");
static_assert(sizeof(AFortAthenaLivingWorldVolume) == 0x0005D8, "Wrong size on AFortAthenaLivingWorldVolume");
static_assert(offsetof(AFortAthenaLivingWorldVolume, bStartEnabled) == 0x0002D0, "Member 'AFortAthenaLivingWorldVolume::bStartEnabled' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, bWaitForNavigation) == 0x0002D1, "Member 'AFortAthenaLivingWorldVolume::bWaitForNavigation' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, FiltersTags) == 0x0002D8, "Member 'AFortAthenaLivingWorldVolume::FiltersTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, EnvironmentQuery) == 0x0002F8, "Member 'AFortAthenaLivingWorldVolume::EnvironmentQuery' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, QueryConfig) == 0x000300, "Member 'AFortAthenaLivingWorldVolume::QueryConfig' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, bRemoveUsedPoint) == 0x000310, "Member 'AFortAthenaLivingWorldVolume::bRemoveUsedPoint' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, bRemoveUsedPointPermenantly) == 0x000311, "Member 'AFortAthenaLivingWorldVolume::bRemoveUsedPointPermenantly' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, SpawnLimiter) == 0x000318, "Member 'AFortAthenaLivingWorldVolume::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, EQSRefreshInterval) == 0x000380, "Member 'AFortAthenaLivingWorldVolume::EQSRefreshInterval' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, WaterLevelIndexMin) == 0x0003A8, "Member 'AFortAthenaLivingWorldVolume::WaterLevelIndexMin' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, WaterLevelIndexMax) == 0x0003D0, "Member 'AFortAthenaLivingWorldVolume::WaterLevelIndexMax' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, CachedGameState) == 0x0003F8, "Member 'AFortAthenaLivingWorldVolume::CachedGameState' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, OnActorSpawnedResult) == 0x000400, "Member 'AFortAthenaLivingWorldVolume::OnActorSpawnedResult' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, OnPointProviderRegistered) == 0x000410, "Member 'AFortAthenaLivingWorldVolume::OnPointProviderRegistered' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, CachedLivingWorldManager) == 0x000420, "Member 'AFortAthenaLivingWorldVolume::CachedLivingWorldManager' has a wrong offset!");

// Class LagerRuntime.FortAthenaPatrolPathPointProvider
// 0x00E8 (0x0378 - 0x0290)
class AFortAthenaPatrolPathPointProvider : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  FiltersTags;                                       // 0x0298(0x0020)(Edit, NativeAccessSpecifierPrivate)
	class AFortAthenaPatrolPath*                  AssociatedPatrolPath;                              // 0x02B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bStartEnabled : 1;                                 // 0x02C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bSpawnOnPatrolPath : 1;                            // 0x02C0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bAlignOrientationToPath : 1;                       // 0x02C0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x02C8(0x0068)(Edit, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor, bool bResult)> OnActorSpawnedResult;                              // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortAthenaPatrolPath>   RuntimePatrolPathWeakPtr;                          // 0x0340(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x0348(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldManager*          CachedLivingWorldManager;                          // 0x0350(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x20];                                     // 0x0358(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePointProvider();
	void EnablePointProvider();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaPatrolPathPointProvider">();
	}
	static class AFortAthenaPatrolPathPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaPatrolPathPointProvider>();
	}
};
static_assert(alignof(AFortAthenaPatrolPathPointProvider) == 0x000008, "Wrong alignment on AFortAthenaPatrolPathPointProvider");
static_assert(sizeof(AFortAthenaPatrolPathPointProvider) == 0x000378, "Wrong size on AFortAthenaPatrolPathPointProvider");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, FiltersTags) == 0x000298, "Member 'AFortAthenaPatrolPathPointProvider::FiltersTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, AssociatedPatrolPath) == 0x0002B8, "Member 'AFortAthenaPatrolPathPointProvider::AssociatedPatrolPath' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, SpawnLimiter) == 0x0002C8, "Member 'AFortAthenaPatrolPathPointProvider::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, OnActorSpawnedResult) == 0x000330, "Member 'AFortAthenaPatrolPathPointProvider::OnActorSpawnedResult' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, RuntimePatrolPathWeakPtr) == 0x000340, "Member 'AFortAthenaPatrolPathPointProvider::RuntimePatrolPathWeakPtr' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, CachedGameState) == 0x000348, "Member 'AFortAthenaPatrolPathPointProvider::CachedGameState' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, CachedLivingWorldManager) == 0x000350, "Member 'AFortAthenaPatrolPathPointProvider::CachedLivingWorldManager' has a wrong offset!");

// Class LagerRuntime.FortAthenaPointAroundPlayerProvider
// 0x00E0 (0x0370 - 0x0290)
class AFortAthenaPointAroundPlayerProvider final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  FiltersTags;                                       // 0x0298(0x0020)(Edit, NativeAccessSpecifierPrivate)
	class UEnvQuery*                              QueryTemplate;                                     // 0x02B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EEnvQueryRunMode                              RunMode;                                           // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bStartEnabled : 1;                                 // 0x02C1(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bGenerateAroundPlayerBots : 1;                     // 0x02C1(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           IgnorePlayerWithTag;                               // 0x02C4(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x02C8(0x0068)(Edit, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor, bool bResult)> OnActorSpawnedResult;                              // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x0340(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x28];                                     // 0x0348(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePointProvider();
	void EnablePointProvider();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags);
	void SetForcedPawnToUse(const class APawn* InForcedPawnToUse);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaPointAroundPlayerProvider">();
	}
	static class AFortAthenaPointAroundPlayerProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaPointAroundPlayerProvider>();
	}
};
static_assert(alignof(AFortAthenaPointAroundPlayerProvider) == 0x000008, "Wrong alignment on AFortAthenaPointAroundPlayerProvider");
static_assert(sizeof(AFortAthenaPointAroundPlayerProvider) == 0x000370, "Wrong size on AFortAthenaPointAroundPlayerProvider");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, FiltersTags) == 0x000298, "Member 'AFortAthenaPointAroundPlayerProvider::FiltersTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, QueryTemplate) == 0x0002B8, "Member 'AFortAthenaPointAroundPlayerProvider::QueryTemplate' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, RunMode) == 0x0002C0, "Member 'AFortAthenaPointAroundPlayerProvider::RunMode' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, IgnorePlayerWithTag) == 0x0002C4, "Member 'AFortAthenaPointAroundPlayerProvider::IgnorePlayerWithTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, SpawnLimiter) == 0x0002C8, "Member 'AFortAthenaPointAroundPlayerProvider::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, OnActorSpawnedResult) == 0x000330, "Member 'AFortAthenaPointAroundPlayerProvider::OnActorSpawnedResult' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, CachedGameState) == 0x000340, "Member 'AFortAthenaPointAroundPlayerProvider::CachedGameState' has a wrong offset!");

// Class LagerRuntime.FortAthenaWaterBodyPointProvider
// 0x02A8 (0x02D0 - 0x0028)
class UFortAthenaWaterBodyPointProvider final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldManager*          CachedLivingWorldManager;                          // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  PointProviderFiltersTags;                          // 0x0040(0x0020)(Edit, NativeAccessSpecifierPrivate)
	class UEnvQuery*                              EnvironmentQuery;                                  // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FAIDynamicParam>                QueryConfig;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxLocationsCountByWaterArea;                      // 0x0078(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxLocationsCountBySplineLength;                   // 0x00A0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	bool                                          bRemoveUsedLocations;                              // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ActivationDistance;                                // 0x00D0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ValidationSweepRadius;                             // 0x00F8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ValidationSweepUp;                                 // 0x0120(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ValidationSweepDown;                               // 0x0148(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FCollisionProfileName                  ValidationGroundTraceCollisionProfile;             // 0x0170(0x0004)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x0178(0x0068)(Transient, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortWaterBodyActor>     AssociatedWaterBody;                               // 0x01E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0xE8];                                     // 0x01E8(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaWaterBodyPointProvider">();
	}
	static class UFortAthenaWaterBodyPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaWaterBodyPointProvider>();
	}
};
static_assert(alignof(UFortAthenaWaterBodyPointProvider) == 0x000008, "Wrong alignment on UFortAthenaWaterBodyPointProvider");
static_assert(sizeof(UFortAthenaWaterBodyPointProvider) == 0x0002D0, "Wrong size on UFortAthenaWaterBodyPointProvider");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, CachedGameState) == 0x000030, "Member 'UFortAthenaWaterBodyPointProvider::CachedGameState' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, CachedLivingWorldManager) == 0x000038, "Member 'UFortAthenaWaterBodyPointProvider::CachedLivingWorldManager' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, PointProviderFiltersTags) == 0x000040, "Member 'UFortAthenaWaterBodyPointProvider::PointProviderFiltersTags' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, EnvironmentQuery) == 0x000060, "Member 'UFortAthenaWaterBodyPointProvider::EnvironmentQuery' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, QueryConfig) == 0x000068, "Member 'UFortAthenaWaterBodyPointProvider::QueryConfig' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, MaxLocationsCountByWaterArea) == 0x000078, "Member 'UFortAthenaWaterBodyPointProvider::MaxLocationsCountByWaterArea' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, MaxLocationsCountBySplineLength) == 0x0000A0, "Member 'UFortAthenaWaterBodyPointProvider::MaxLocationsCountBySplineLength' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, bRemoveUsedLocations) == 0x0000C8, "Member 'UFortAthenaWaterBodyPointProvider::bRemoveUsedLocations' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, ActivationDistance) == 0x0000D0, "Member 'UFortAthenaWaterBodyPointProvider::ActivationDistance' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, ValidationSweepRadius) == 0x0000F8, "Member 'UFortAthenaWaterBodyPointProvider::ValidationSweepRadius' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, ValidationSweepUp) == 0x000120, "Member 'UFortAthenaWaterBodyPointProvider::ValidationSweepUp' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, ValidationSweepDown) == 0x000148, "Member 'UFortAthenaWaterBodyPointProvider::ValidationSweepDown' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, ValidationGroundTraceCollisionProfile) == 0x000170, "Member 'UFortAthenaWaterBodyPointProvider::ValidationGroundTraceCollisionProfile' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, SpawnLimiter) == 0x000178, "Member 'UFortAthenaWaterBodyPointProvider::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(UFortAthenaWaterBodyPointProvider, AssociatedWaterBody) == 0x0001E0, "Member 'UFortAthenaWaterBodyPointProvider::AssociatedWaterBody' has a wrong offset!");

// Class LagerRuntime.FortAthenaRuntimeWaterBodyPointProviderComponent
// 0x0008 (0x00A8 - 0x00A0)
class UFortAthenaRuntimeWaterBodyPointProviderComponent final : public UFortAthenaLivingWorldRuntimePointProviderComponent
{
public:
	TSubclassOf<class UFortAthenaWaterBodyPointProvider> PointProviderClass;                                // 0x00A0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaRuntimeWaterBodyPointProviderComponent">();
	}
	static class UFortAthenaRuntimeWaterBodyPointProviderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaRuntimeWaterBodyPointProviderComponent>();
	}
};
static_assert(alignof(UFortAthenaRuntimeWaterBodyPointProviderComponent) == 0x000008, "Wrong alignment on UFortAthenaRuntimeWaterBodyPointProviderComponent");
static_assert(sizeof(UFortAthenaRuntimeWaterBodyPointProviderComponent) == 0x0000A8, "Wrong size on UFortAthenaRuntimeWaterBodyPointProviderComponent");
static_assert(offsetof(UFortAthenaRuntimeWaterBodyPointProviderComponent, PointProviderClass) == 0x0000A0, "Member 'UFortAthenaRuntimeWaterBodyPointProviderComponent::PointProviderClass' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldSpawnAction_AddAIToGroup
// 0x0020 (0x0048 - 0x0028)
class UFortAthenaLivingWorldSpawnAction_AddAIToGroup final : public UFortAthenaLivingWorldSpawnAction
{
public:
	struct FGameplayTagContainer                  GroupTags;                                         // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldSpawnAction_AddAIToGroup">();
	}
	static class UFortAthenaLivingWorldSpawnAction_AddAIToGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldSpawnAction_AddAIToGroup>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldSpawnAction_AddAIToGroup) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldSpawnAction_AddAIToGroup");
static_assert(sizeof(UFortAthenaLivingWorldSpawnAction_AddAIToGroup) == 0x000048, "Wrong size on UFortAthenaLivingWorldSpawnAction_AddAIToGroup");
static_assert(offsetof(UFortAthenaLivingWorldSpawnAction_AddAIToGroup, GroupTags) == 0x000028, "Member 'UFortAthenaLivingWorldSpawnAction_AddAIToGroup::GroupTags' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldSpawnAction_SeatPawnInVehicle
// 0x0010 (0x0038 - 0x0028)
class UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle final : public UFortAthenaLivingWorldSpawnAction
{
public:
	TArray<struct FFortAthenaLivingWorldTagQueryToSeatMapping> SeatMappings;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldSpawnAction_SeatPawnInVehicle">();
	}
	static class UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle");
static_assert(sizeof(UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle) == 0x000038, "Wrong size on UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle");
static_assert(offsetof(UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle, SeatMappings) == 0x000028, "Member 'UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle::SeatMappings' has a wrong offset!");

}

