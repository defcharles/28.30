#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TankRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "TankRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "VehicleAudioRuntime_classes.hpp"


namespace SDK
{

// Class TankRuntime.FortTankVehicleConfigs
// 0x0058 (0x0A70 - 0x0A18)
class UFortTankVehicleConfigs final : public UFortTreadVehicleConfigs
{
public:
	TArray<struct FTankWeaponAimingData>          TankWeaponAimingData;                              // 0x0A18(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   SecondInteractText;                                // 0x0A28(0x0018)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	ETInteractionType                             SecondInteractType;                                // 0x0A40(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A41[0x7];                                      // 0x0A41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SecondInteractDuration;                            // 0x0A48(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicleConfigs">();
	}
	static class UFortTankVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTankVehicleConfigs>();
	}
};
static_assert(alignof(UFortTankVehicleConfigs) == 0x000008, "Wrong alignment on UFortTankVehicleConfigs");
static_assert(sizeof(UFortTankVehicleConfigs) == 0x000A70, "Wrong size on UFortTankVehicleConfigs");
static_assert(offsetof(UFortTankVehicleConfigs, TankWeaponAimingData) == 0x000A18, "Member 'UFortTankVehicleConfigs::TankWeaponAimingData' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleConfigs, SecondInteractText) == 0x000A28, "Member 'UFortTankVehicleConfigs::SecondInteractText' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleConfigs, SecondInteractType) == 0x000A40, "Member 'UFortTankVehicleConfigs::SecondInteractType' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleConfigs, SecondInteractDuration) == 0x000A48, "Member 'UFortTankVehicleConfigs::SecondInteractDuration' has a wrong offset!");

// Class TankRuntime.FortTankAnimFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFortTankAnimFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankAnimFunctionLibrary">();
	}
	static class UFortTankAnimFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTankAnimFunctionLibrary>();
	}
};
static_assert(alignof(UFortTankAnimFunctionLibrary) == 0x000008, "Wrong alignment on UFortTankAnimFunctionLibrary");
static_assert(sizeof(UFortTankAnimFunctionLibrary) == 0x000028, "Wrong size on UFortTankAnimFunctionLibrary");

// Class TankRuntime.FortTankVehicle
// 0x01A0 (0x2060 - 0x1EC0)
class AFortTankVehicle final : public AFortTreadVehicle
{
public:
	uint8                                         Pad_1EC0[0x78];                                    // 0x1EC0(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnTankRepairedDelegate;                            // 0x1F38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class FName                                   BarrelSocketName;                                  // 0x1F48(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F4C[0x4];                                     // 0x1F4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      BarrelCollision;                                   // 0x1F50(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   UnderVehicleCollision;                             // 0x1F58(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FServerSocketTransformOverride> SocketOverrideArray;                               // 0x1F60(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FTransform>          SocketTransformOverrideMap;                        // 0x1F70(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 CachedSkeletalMeshComponent;                       // 0x1FC0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortVehicleAudioController*            CachedVehicleAudioController;                      // 0x1FC8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVisibilityBasedAnimTickOption                DefaultServerVisibilityBasedAnimTickOption;        // 0x1FD0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DefaultServerSkeletalMeshTickEnabled;              // 0x1FD1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FD2[0x2];                                     // 0x1FD2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   YawPivotSocketName;                                // 0x1FD4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PitchPivotSocketName;                              // 0x1FD8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FDC[0x4];                                     // 0x1FDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULegacyCameraShake*                     DriverCameraShakeInstance;                         // 0x1FE0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULegacyCameraShake*                     AcceleratingCameraShakeInstance;                   // 0x1FE8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FF0[0x8];                                     // 0x1FF0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CachedNiagaraComponentRoadAndExhaust;              // 0x1FF8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustNiagaraComponentName;                // 0x2000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustPeelOutLeftName;                     // 0x2010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustPeelOutRightName;                    // 0x2014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustVehicleSpeedName;                    // 0x2018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustSlideDirectionName;                  // 0x201C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustMinSpeedForDust;                     // 0x2020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustColorLerpName;                   // 0x2024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustColorLerpOffRoad;                // 0x2028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustColorLerpOnRoad;                 // 0x202C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustAlphaMultiplierName;             // 0x2030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustAlphaMultiplierOffRoad;          // 0x2034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustAlphaMultiplierOnRoad;           // 0x2038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustFrontLeftName;                   // 0x203C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustFrontRightName;                  // 0x2040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustMiddleLeftName;                  // 0x2044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustMiddleRightName;                 // 0x2048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustRearLeftName;                    // 0x204C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustRearRightName;                   // 0x2050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustIsOnDirtName;                        // 0x2054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2058[0x8];                                     // 0x2058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicle">();
	}
	static class AFortTankVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortTankVehicle>();
	}
};
static_assert(alignof(AFortTankVehicle) == 0x000010, "Wrong alignment on AFortTankVehicle");
static_assert(sizeof(AFortTankVehicle) == 0x002060, "Wrong size on AFortTankVehicle");
static_assert(offsetof(AFortTankVehicle, OnTankRepairedDelegate) == 0x001F38, "Member 'AFortTankVehicle::OnTankRepairedDelegate' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, BarrelSocketName) == 0x001F48, "Member 'AFortTankVehicle::BarrelSocketName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, BarrelCollision) == 0x001F50, "Member 'AFortTankVehicle::BarrelCollision' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, UnderVehicleCollision) == 0x001F58, "Member 'AFortTankVehicle::UnderVehicleCollision' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, SocketOverrideArray) == 0x001F60, "Member 'AFortTankVehicle::SocketOverrideArray' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, SocketTransformOverrideMap) == 0x001F70, "Member 'AFortTankVehicle::SocketTransformOverrideMap' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, CachedSkeletalMeshComponent) == 0x001FC0, "Member 'AFortTankVehicle::CachedSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, CachedVehicleAudioController) == 0x001FC8, "Member 'AFortTankVehicle::CachedVehicleAudioController' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, DefaultServerVisibilityBasedAnimTickOption) == 0x001FD0, "Member 'AFortTankVehicle::DefaultServerVisibilityBasedAnimTickOption' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, DefaultServerSkeletalMeshTickEnabled) == 0x001FD1, "Member 'AFortTankVehicle::DefaultServerSkeletalMeshTickEnabled' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, YawPivotSocketName) == 0x001FD4, "Member 'AFortTankVehicle::YawPivotSocketName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, PitchPivotSocketName) == 0x001FD8, "Member 'AFortTankVehicle::PitchPivotSocketName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, DriverCameraShakeInstance) == 0x001FE0, "Member 'AFortTankVehicle::DriverCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, AcceleratingCameraShakeInstance) == 0x001FE8, "Member 'AFortTankVehicle::AcceleratingCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, CachedNiagaraComponentRoadAndExhaust) == 0x001FF8, "Member 'AFortTankVehicle::CachedNiagaraComponentRoadAndExhaust' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustNiagaraComponentName) == 0x002000, "Member 'AFortTankVehicle::RoadAndExhaustNiagaraComponentName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustPeelOutLeftName) == 0x002010, "Member 'AFortTankVehicle::RoadAndExhaustPeelOutLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustPeelOutRightName) == 0x002014, "Member 'AFortTankVehicle::RoadAndExhaustPeelOutRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustVehicleSpeedName) == 0x002018, "Member 'AFortTankVehicle::RoadAndExhaustVehicleSpeedName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustSlideDirectionName) == 0x00201C, "Member 'AFortTankVehicle::RoadAndExhaustSlideDirectionName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustMinSpeedForDust) == 0x002020, "Member 'AFortTankVehicle::RoadAndExhaustMinSpeedForDust' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustColorLerpName) == 0x002024, "Member 'AFortTankVehicle::RoadAndExhaustDustColorLerpName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustColorLerpOffRoad) == 0x002028, "Member 'AFortTankVehicle::RoadAndExhaustDustColorLerpOffRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustColorLerpOnRoad) == 0x00202C, "Member 'AFortTankVehicle::RoadAndExhaustDustColorLerpOnRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustAlphaMultiplierName) == 0x002030, "Member 'AFortTankVehicle::RoadAndExhaustDustAlphaMultiplierName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustAlphaMultiplierOffRoad) == 0x002034, "Member 'AFortTankVehicle::RoadAndExhaustDustAlphaMultiplierOffRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustAlphaMultiplierOnRoad) == 0x002038, "Member 'AFortTankVehicle::RoadAndExhaustDustAlphaMultiplierOnRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustFrontLeftName) == 0x00203C, "Member 'AFortTankVehicle::RoadAndExhaustDustFrontLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustFrontRightName) == 0x002040, "Member 'AFortTankVehicle::RoadAndExhaustDustFrontRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustMiddleLeftName) == 0x002044, "Member 'AFortTankVehicle::RoadAndExhaustDustMiddleLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustMiddleRightName) == 0x002048, "Member 'AFortTankVehicle::RoadAndExhaustDustMiddleRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustRearLeftName) == 0x00204C, "Member 'AFortTankVehicle::RoadAndExhaustDustRearLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustRearRightName) == 0x002050, "Member 'AFortTankVehicle::RoadAndExhaustDustRearRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustIsOnDirtName) == 0x002054, "Member 'AFortTankVehicle::RoadAndExhaustIsOnDirtName' has a wrong offset!");

// Class TankRuntime.FortTankVehicleAnimInstance
// 0x0110 (0x0800 - 0x06F0)
class UFortTankVehicleAnimInstance final : public UFortTreadVehicleAnimInstance
{
public:
	class AFortTankVehicle*                       TankVehicle;                                       // 0x06E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CurrentAimRotation;                                // 0x06F0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               CurrentTurretAimRotation;                          // 0x0708(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               SmoothedTurretDeltaRotation;                       // 0x0720(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         InterpolationRate;                                 // 0x0738(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEngineOverheated;                                 // 0x073C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasPassenger;                                     // 0x073D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFired;                                          // 0x073E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsReady;                                          // 0x073F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDriverCoverOnCooldown;                            // 0x0740(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_741[0x3];                                      // 0x0741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftTreadPower;                                    // 0x0744(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RightTreadPower;                                   // 0x0748(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretYawAlpha;                                    // 0x074C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretYawAlphaSmoothingRate;                       // 0x0750(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CannonYaw;                                         // 0x0754(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CannonPitch;                                       // 0x0758(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretYaw;                                         // 0x075C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretPitch;                                       // 0x0760(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           MIDTreadPositionColor;                             // 0x0764(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDTreadDamageLeft;                                // 0x0774(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDTreadDamageRight;                               // 0x0778(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDExhaustShakeSpeed;                              // 0x077C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDExhaustShakeAmp;                                // 0x0780(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDEngineBoostGlow;                                // 0x0784(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDEngineHealthRatio;                              // 0x0788(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_78C[0x4];                                      // 0x078C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVehicleSeats, struct FTankAnimAimingData> AimingData;                                        // 0x0790(0x0050)(Transient, NativeAccessSpecifierPrivate)
	struct FRotator                               PreviousTurretAimRotation;                         // 0x07E0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7F8[0x8];                                      // 0x07F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateMIDEngineProperties(const float DeltaSeconds, const float EngineHealthRatio);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicleAnimInstance">();
	}
	static class UFortTankVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTankVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortTankVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortTankVehicleAnimInstance");
static_assert(sizeof(UFortTankVehicleAnimInstance) == 0x000800, "Wrong size on UFortTankVehicleAnimInstance");
static_assert(offsetof(UFortTankVehicleAnimInstance, TankVehicle) == 0x0006E8, "Member 'UFortTankVehicleAnimInstance::TankVehicle' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CurrentAimRotation) == 0x0006F0, "Member 'UFortTankVehicleAnimInstance::CurrentAimRotation' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CurrentTurretAimRotation) == 0x000708, "Member 'UFortTankVehicleAnimInstance::CurrentTurretAimRotation' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, SmoothedTurretDeltaRotation) == 0x000720, "Member 'UFortTankVehicleAnimInstance::SmoothedTurretDeltaRotation' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, InterpolationRate) == 0x000738, "Member 'UFortTankVehicleAnimInstance::InterpolationRate' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bEngineOverheated) == 0x00073C, "Member 'UFortTankVehicleAnimInstance::bEngineOverheated' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bHasPassenger) == 0x00073D, "Member 'UFortTankVehicleAnimInstance::bHasPassenger' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bIsFired) == 0x00073E, "Member 'UFortTankVehicleAnimInstance::bIsFired' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bIsReady) == 0x00073F, "Member 'UFortTankVehicleAnimInstance::bIsReady' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bDriverCoverOnCooldown) == 0x000740, "Member 'UFortTankVehicleAnimInstance::bDriverCoverOnCooldown' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, LeftTreadPower) == 0x000744, "Member 'UFortTankVehicleAnimInstance::LeftTreadPower' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, RightTreadPower) == 0x000748, "Member 'UFortTankVehicleAnimInstance::RightTreadPower' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretYawAlpha) == 0x00074C, "Member 'UFortTankVehicleAnimInstance::TurretYawAlpha' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretYawAlphaSmoothingRate) == 0x000750, "Member 'UFortTankVehicleAnimInstance::TurretYawAlphaSmoothingRate' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CannonYaw) == 0x000754, "Member 'UFortTankVehicleAnimInstance::CannonYaw' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CannonPitch) == 0x000758, "Member 'UFortTankVehicleAnimInstance::CannonPitch' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretYaw) == 0x00075C, "Member 'UFortTankVehicleAnimInstance::TurretYaw' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretPitch) == 0x000760, "Member 'UFortTankVehicleAnimInstance::TurretPitch' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDTreadPositionColor) == 0x000764, "Member 'UFortTankVehicleAnimInstance::MIDTreadPositionColor' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDTreadDamageLeft) == 0x000774, "Member 'UFortTankVehicleAnimInstance::MIDTreadDamageLeft' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDTreadDamageRight) == 0x000778, "Member 'UFortTankVehicleAnimInstance::MIDTreadDamageRight' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDExhaustShakeSpeed) == 0x00077C, "Member 'UFortTankVehicleAnimInstance::MIDExhaustShakeSpeed' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDExhaustShakeAmp) == 0x000780, "Member 'UFortTankVehicleAnimInstance::MIDExhaustShakeAmp' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDEngineBoostGlow) == 0x000784, "Member 'UFortTankVehicleAnimInstance::MIDEngineBoostGlow' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDEngineHealthRatio) == 0x000788, "Member 'UFortTankVehicleAnimInstance::MIDEngineHealthRatio' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, AimingData) == 0x000790, "Member 'UFortTankVehicleAnimInstance::AimingData' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, PreviousTurretAimRotation) == 0x0007E0, "Member 'UFortTankVehicleAnimInstance::PreviousTurretAimRotation' has a wrong offset!");

// Class TankRuntime.FortTankVehicleAudioController
// 0x0400 (0x0700 - 0x0300)
class AFortTankVehicleAudioController final : public AFortVehicleAudioController
{
public:
	struct FFortAudioFloatParameter               SpeedParam;                                        // 0x0300(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               TurnPowerParam;                                    // 0x0338(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               OutOfFuelParam;                                    // 0x0370(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               IdleParam;                                         // 0x03A8(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               TurningParam;                                      // 0x03E0(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               ForwardParam;                                      // 0x0418(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               ReverseParam;                                      // 0x0450(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               SurfaceParam;                                      // 0x0488(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               IsInWaterParam;                                    // 0x04C0(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               IsInAirParam;                                      // 0x04F8(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               BoostParam;                                        // 0x0530(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               CannonHorizontalMovementParam;                     // 0x0568(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               CannonVerticalMovementParam;                       // 0x05A0(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               TurretHorizontalMovementParam;                     // 0x05D8(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameter               TurretVerticalMovementParam;                       // 0x0610(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTankAudioUpdateContext                Context;                                           // 0x0648(0x00B8)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void PlayAccelOneShot();
	void PlayDecelOneShot();
	void PlayTurningOneShot();

	class AFortTankVehicle* GetTankVehicleActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicleAudioController">();
	}
	static class AFortTankVehicleAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortTankVehicleAudioController>();
	}
};
static_assert(alignof(AFortTankVehicleAudioController) == 0x000008, "Wrong alignment on AFortTankVehicleAudioController");
static_assert(sizeof(AFortTankVehicleAudioController) == 0x000700, "Wrong size on AFortTankVehicleAudioController");
static_assert(offsetof(AFortTankVehicleAudioController, SpeedParam) == 0x000300, "Member 'AFortTankVehicleAudioController::SpeedParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurnPowerParam) == 0x000338, "Member 'AFortTankVehicleAudioController::TurnPowerParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, OutOfFuelParam) == 0x000370, "Member 'AFortTankVehicleAudioController::OutOfFuelParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, IdleParam) == 0x0003A8, "Member 'AFortTankVehicleAudioController::IdleParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurningParam) == 0x0003E0, "Member 'AFortTankVehicleAudioController::TurningParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, ForwardParam) == 0x000418, "Member 'AFortTankVehicleAudioController::ForwardParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, ReverseParam) == 0x000450, "Member 'AFortTankVehicleAudioController::ReverseParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, SurfaceParam) == 0x000488, "Member 'AFortTankVehicleAudioController::SurfaceParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, IsInWaterParam) == 0x0004C0, "Member 'AFortTankVehicleAudioController::IsInWaterParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, IsInAirParam) == 0x0004F8, "Member 'AFortTankVehicleAudioController::IsInAirParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, BoostParam) == 0x000530, "Member 'AFortTankVehicleAudioController::BoostParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, CannonHorizontalMovementParam) == 0x000568, "Member 'AFortTankVehicleAudioController::CannonHorizontalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, CannonVerticalMovementParam) == 0x0005A0, "Member 'AFortTankVehicleAudioController::CannonVerticalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurretHorizontalMovementParam) == 0x0005D8, "Member 'AFortTankVehicleAudioController::TurretHorizontalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurretVerticalMovementParam) == 0x000610, "Member 'AFortTankVehicleAudioController::TurretVerticalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, Context) == 0x000648, "Member 'AFortTankVehicleAudioController::Context' has a wrong offset!");

}

