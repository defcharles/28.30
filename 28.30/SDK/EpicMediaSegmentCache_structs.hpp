#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicMediaSegmentCache

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct EpicMediaSegmentCache.EpicMediaSegmentCacheConfig
// 0x0018 (0x0018 - 0x0000)
struct FEpicMediaSegmentCacheConfig final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetCache;                                       // 0x0001(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistentCache;                                  // 0x0002(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPersistentCacheAsTemporary;                  // 0x0003(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearCache;                                       // 0x0004(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CacheSizeMaxFiles;                                 // 0x0008(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CacheSizeOnDiskMaxBytes;                           // 0x0010(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEpicMediaSegmentCacheConfig) == 0x000008, "Wrong alignment on FEpicMediaSegmentCacheConfig");
static_assert(sizeof(FEpicMediaSegmentCacheConfig) == 0x000018, "Wrong size on FEpicMediaSegmentCacheConfig");
static_assert(offsetof(FEpicMediaSegmentCacheConfig, bEnabled) == 0x000000, "Member 'FEpicMediaSegmentCacheConfig::bEnabled' has a wrong offset!");
static_assert(offsetof(FEpicMediaSegmentCacheConfig, bResetCache) == 0x000001, "Member 'FEpicMediaSegmentCacheConfig::bResetCache' has a wrong offset!");
static_assert(offsetof(FEpicMediaSegmentCacheConfig, bPersistentCache) == 0x000002, "Member 'FEpicMediaSegmentCacheConfig::bPersistentCache' has a wrong offset!");
static_assert(offsetof(FEpicMediaSegmentCacheConfig, bAllowPersistentCacheAsTemporary) == 0x000003, "Member 'FEpicMediaSegmentCacheConfig::bAllowPersistentCacheAsTemporary' has a wrong offset!");
static_assert(offsetof(FEpicMediaSegmentCacheConfig, bClearCache) == 0x000004, "Member 'FEpicMediaSegmentCacheConfig::bClearCache' has a wrong offset!");
static_assert(offsetof(FEpicMediaSegmentCacheConfig, CacheSizeMaxFiles) == 0x000008, "Member 'FEpicMediaSegmentCacheConfig::CacheSizeMaxFiles' has a wrong offset!");
static_assert(offsetof(FEpicMediaSegmentCacheConfig, CacheSizeOnDiskMaxBytes) == 0x000010, "Member 'FEpicMediaSegmentCacheConfig::CacheSizeOnDiskMaxBytes' has a wrong offset!");

}

