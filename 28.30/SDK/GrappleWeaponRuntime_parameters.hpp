#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrappleWeaponRuntime

#include "Basic.hpp"

#include "GrappleWeaponRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GrappleWeaponRuntime.GrappleKnifeWeaponInterface.GetGrappleKnifeData
// 0x0010 (0x0010 - 0x0000)
struct GrappleKnifeWeaponInterface_GetGrappleKnifeData final
{
public:
	bool                                          bIsAttached;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFired;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DistanceBucket;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimStartWallBounce;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimBounceAngle;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GrappleKnifeWeaponInterface_GetGrappleKnifeData) == 0x000004, "Wrong alignment on GrappleKnifeWeaponInterface_GetGrappleKnifeData");
static_assert(sizeof(GrappleKnifeWeaponInterface_GetGrappleKnifeData) == 0x000010, "Wrong size on GrappleKnifeWeaponInterface_GetGrappleKnifeData");
static_assert(offsetof(GrappleKnifeWeaponInterface_GetGrappleKnifeData, bIsAttached) == 0x000000, "Member 'GrappleKnifeWeaponInterface_GetGrappleKnifeData::bIsAttached' has a wrong offset!");
static_assert(offsetof(GrappleKnifeWeaponInterface_GetGrappleKnifeData, bIsFired) == 0x000001, "Member 'GrappleKnifeWeaponInterface_GetGrappleKnifeData::bIsFired' has a wrong offset!");
static_assert(offsetof(GrappleKnifeWeaponInterface_GetGrappleKnifeData, DistanceBucket) == 0x000004, "Member 'GrappleKnifeWeaponInterface_GetGrappleKnifeData::DistanceBucket' has a wrong offset!");
static_assert(offsetof(GrappleKnifeWeaponInterface_GetGrappleKnifeData, bAnimStartWallBounce) == 0x000008, "Member 'GrappleKnifeWeaponInterface_GetGrappleKnifeData::bAnimStartWallBounce' has a wrong offset!");
static_assert(offsetof(GrappleKnifeWeaponInterface_GetGrappleKnifeData, AnimBounceAngle) == 0x00000C, "Member 'GrappleKnifeWeaponInterface_GetGrappleKnifeData::AnimBounceAngle' has a wrong offset!");

// Function GrappleWeaponRuntime.GrappleWeaponLibrary.CalculateDirectionalTargetOffset
// 0x0060 (0x0060 - 0x0000)
struct GrappleWeaponLibrary_CalculateDirectionalTargetOffset final
{
public:
	struct FVector                                DirToTarget;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovementOffset;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LedgeOffset;                                       // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GrappleWeaponLibrary_CalculateDirectionalTargetOffset) == 0x000008, "Wrong alignment on GrappleWeaponLibrary_CalculateDirectionalTargetOffset");
static_assert(sizeof(GrappleWeaponLibrary_CalculateDirectionalTargetOffset) == 0x000060, "Wrong size on GrappleWeaponLibrary_CalculateDirectionalTargetOffset");
static_assert(offsetof(GrappleWeaponLibrary_CalculateDirectionalTargetOffset, DirToTarget) == 0x000000, "Member 'GrappleWeaponLibrary_CalculateDirectionalTargetOffset::DirToTarget' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_CalculateDirectionalTargetOffset, MovementOffset) == 0x000018, "Member 'GrappleWeaponLibrary_CalculateDirectionalTargetOffset::MovementOffset' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_CalculateDirectionalTargetOffset, LedgeOffset) == 0x000030, "Member 'GrappleWeaponLibrary_CalculateDirectionalTargetOffset::LedgeOffset' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_CalculateDirectionalTargetOffset, ReturnValue) == 0x000048, "Member 'GrappleWeaponLibrary_CalculateDirectionalTargetOffset::ReturnValue' has a wrong offset!");

// Function GrappleWeaponRuntime.GrappleWeaponLibrary.DidHitResultImpactLedge
// 0x0190 (0x0190 - 0x0000)
struct GrappleWeaponLibrary_DidHitResultImpactLedge final
{
public:
	class ACharacter*                             SourceCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGrappleWeaponLedgeConfig              Config;                                            // 0x00F0(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          OutDidImpactWalkableSurface;                       // 0x0168(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutTargetingLedge;                                 // 0x0169(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutLedgeLocation;                                  // 0x0170(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0188(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GrappleWeaponLibrary_DidHitResultImpactLedge) == 0x000008, "Wrong alignment on GrappleWeaponLibrary_DidHitResultImpactLedge");
static_assert(sizeof(GrappleWeaponLibrary_DidHitResultImpactLedge) == 0x000190, "Wrong size on GrappleWeaponLibrary_DidHitResultImpactLedge");
static_assert(offsetof(GrappleWeaponLibrary_DidHitResultImpactLedge, SourceCharacter) == 0x000000, "Member 'GrappleWeaponLibrary_DidHitResultImpactLedge::SourceCharacter' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_DidHitResultImpactLedge, HitResult) == 0x000008, "Member 'GrappleWeaponLibrary_DidHitResultImpactLedge::HitResult' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_DidHitResultImpactLedge, Config) == 0x0000F0, "Member 'GrappleWeaponLibrary_DidHitResultImpactLedge::Config' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_DidHitResultImpactLedge, OutDidImpactWalkableSurface) == 0x000168, "Member 'GrappleWeaponLibrary_DidHitResultImpactLedge::OutDidImpactWalkableSurface' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_DidHitResultImpactLedge, OutTargetingLedge) == 0x000169, "Member 'GrappleWeaponLibrary_DidHitResultImpactLedge::OutTargetingLedge' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_DidHitResultImpactLedge, OutLedgeLocation) == 0x000170, "Member 'GrappleWeaponLibrary_DidHitResultImpactLedge::OutLedgeLocation' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_DidHitResultImpactLedge, bDrawDebug) == 0x000188, "Member 'GrappleWeaponLibrary_DidHitResultImpactLedge::bDrawDebug' has a wrong offset!");

// Function GrappleWeaponRuntime.GrappleWeaponLibrary.GetGrappleWeaponTargetInfo
// 0x01C0 (0x01C0 - 0x0000)
struct GrappleWeaponLibrary_GetGrappleWeaponTargetInfo final
{
public:
	class AFortPlayerPawn*                        SourcePlayerPawn;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGrappleWeaponTargetingConfig          Config;                                            // 0x0008(0x0178)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         DrawDebugDuration;                                 // 0x0180(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGrappleWeaponTargetInfo               ReturnValue;                                       // 0x0188(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GrappleWeaponLibrary_GetGrappleWeaponTargetInfo) == 0x000008, "Wrong alignment on GrappleWeaponLibrary_GetGrappleWeaponTargetInfo");
static_assert(sizeof(GrappleWeaponLibrary_GetGrappleWeaponTargetInfo) == 0x0001C0, "Wrong size on GrappleWeaponLibrary_GetGrappleWeaponTargetInfo");
static_assert(offsetof(GrappleWeaponLibrary_GetGrappleWeaponTargetInfo, SourcePlayerPawn) == 0x000000, "Member 'GrappleWeaponLibrary_GetGrappleWeaponTargetInfo::SourcePlayerPawn' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_GetGrappleWeaponTargetInfo, Config) == 0x000008, "Member 'GrappleWeaponLibrary_GetGrappleWeaponTargetInfo::Config' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_GetGrappleWeaponTargetInfo, DrawDebugDuration) == 0x000180, "Member 'GrappleWeaponLibrary_GetGrappleWeaponTargetInfo::DrawDebugDuration' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_GetGrappleWeaponTargetInfo, ReturnValue) == 0x000188, "Member 'GrappleWeaponLibrary_GetGrappleWeaponTargetInfo::ReturnValue' has a wrong offset!");

// Function GrappleWeaponRuntime.GrappleWeaponLibrary.IsTargetingLedge
// 0x00E0 (0x00E0 - 0x0000)
struct GrappleWeaponLibrary_IsTargetingLedge final
{
public:
	class ACharacter*                             SourceCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetNormal;                                      // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGrappleWeaponLedgeConfig              Config;                                            // 0x0040(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          OutDidImpactWalkableSurface;                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutTargetingLedge;                                 // 0x00B9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutLedgeLocation;                                  // 0x00C0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x00D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GrappleWeaponLibrary_IsTargetingLedge) == 0x000008, "Wrong alignment on GrappleWeaponLibrary_IsTargetingLedge");
static_assert(sizeof(GrappleWeaponLibrary_IsTargetingLedge) == 0x0000E0, "Wrong size on GrappleWeaponLibrary_IsTargetingLedge");
static_assert(offsetof(GrappleWeaponLibrary_IsTargetingLedge, SourceCharacter) == 0x000000, "Member 'GrappleWeaponLibrary_IsTargetingLedge::SourceCharacter' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_IsTargetingLedge, TargetActor) == 0x000008, "Member 'GrappleWeaponLibrary_IsTargetingLedge::TargetActor' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_IsTargetingLedge, TargetLocation) == 0x000010, "Member 'GrappleWeaponLibrary_IsTargetingLedge::TargetLocation' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_IsTargetingLedge, TargetNormal) == 0x000028, "Member 'GrappleWeaponLibrary_IsTargetingLedge::TargetNormal' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_IsTargetingLedge, Config) == 0x000040, "Member 'GrappleWeaponLibrary_IsTargetingLedge::Config' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_IsTargetingLedge, OutDidImpactWalkableSurface) == 0x0000B8, "Member 'GrappleWeaponLibrary_IsTargetingLedge::OutDidImpactWalkableSurface' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_IsTargetingLedge, OutTargetingLedge) == 0x0000B9, "Member 'GrappleWeaponLibrary_IsTargetingLedge::OutTargetingLedge' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_IsTargetingLedge, OutLedgeLocation) == 0x0000C0, "Member 'GrappleWeaponLibrary_IsTargetingLedge::OutLedgeLocation' has a wrong offset!");
static_assert(offsetof(GrappleWeaponLibrary_IsTargetingLedge, bDrawDebug) == 0x0000D8, "Member 'GrappleWeaponLibrary_IsTargetingLedge::bDrawDebug' has a wrong offset!");

}

