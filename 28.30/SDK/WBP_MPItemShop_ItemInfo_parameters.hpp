#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MPItemShop_ItemInfo

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_MPItemShop_ItemInfo.WBP_MPItemShop_ItemInfo_C.ExecuteUbergraph_WBP_MPItemShop_ItemInfo
// 0x0008 (0x0008 - 0x0000)
struct WBP_MPItemShop_ItemInfo_C_ExecuteUbergraph_WBP_MPItemShop_ItemInfo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MPItemShop_ItemInfo_C_ExecuteUbergraph_WBP_MPItemShop_ItemInfo) == 0x000004, "Wrong alignment on WBP_MPItemShop_ItemInfo_C_ExecuteUbergraph_WBP_MPItemShop_ItemInfo");
static_assert(sizeof(WBP_MPItemShop_ItemInfo_C_ExecuteUbergraph_WBP_MPItemShop_ItemInfo) == 0x000008, "Wrong size on WBP_MPItemShop_ItemInfo_C_ExecuteUbergraph_WBP_MPItemShop_ItemInfo");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_ExecuteUbergraph_WBP_MPItemShop_ItemInfo, EntryPoint) == 0x000000, "Member 'WBP_MPItemShop_ItemInfo_C_ExecuteUbergraph_WBP_MPItemShop_ItemInfo::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_ExecuteUbergraph_WBP_MPItemShop_ItemInfo, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_MPItemShop_ItemInfo_C_ExecuteUbergraph_WBP_MPItemShop_ItemInfo::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_MPItemShop_ItemInfo.WBP_MPItemShop_ItemInfo_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_MPItemShop_ItemInfo_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MPItemShop_ItemInfo_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_MPItemShop_ItemInfo_C_PreConstruct");
static_assert(sizeof(WBP_MPItemShop_ItemInfo_C_PreConstruct) == 0x000001, "Wrong size on WBP_MPItemShop_ItemInfo_C_PreConstruct");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_MPItemShop_ItemInfo_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_MPItemShop_ItemInfo.WBP_MPItemShop_ItemInfo_C.SetDisplayText
// 0x0018 (0x0018 - 0x0000)
struct WBP_MPItemShop_ItemInfo_C_SetDisplayText final
{
public:
	class FText                                   DisplayText_0;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_MPItemShop_ItemInfo_C_SetDisplayText) == 0x000008, "Wrong alignment on WBP_MPItemShop_ItemInfo_C_SetDisplayText");
static_assert(sizeof(WBP_MPItemShop_ItemInfo_C_SetDisplayText) == 0x000018, "Wrong size on WBP_MPItemShop_ItemInfo_C_SetDisplayText");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_SetDisplayText, DisplayText_0) == 0x000000, "Member 'WBP_MPItemShop_ItemInfo_C_SetDisplayText::DisplayText_0' has a wrong offset!");

// Function WBP_MPItemShop_ItemInfo.WBP_MPItemShop_ItemInfo_C.SetImageBrush
// 0x00C0 (0x00C0 - 0x0000)
struct WBP_MPItemShop_ItemInfo_C_SetImageBrush final
{
public:
	struct FSlateBrush                            Brush_0;                                           // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_MPItemShop_ItemInfo_C_SetImageBrush) == 0x000010, "Wrong alignment on WBP_MPItemShop_ItemInfo_C_SetImageBrush");
static_assert(sizeof(WBP_MPItemShop_ItemInfo_C_SetImageBrush) == 0x0000C0, "Wrong size on WBP_MPItemShop_ItemInfo_C_SetImageBrush");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_SetImageBrush, Brush_0) == 0x000000, "Member 'WBP_MPItemShop_ItemInfo_C_SetImageBrush::Brush_0' has a wrong offset!");

// Function WBP_MPItemShop_ItemInfo.WBP_MPItemShop_ItemInfo_C.SetImageVisibility
// 0x0005 (0x0005 - 0x0000)
struct WBP_MPItemShop_ItemInfo_C_SetImageVisibility final
{
public:
	bool                                          ShowImage_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MPItemShop_ItemInfo_C_SetImageVisibility) == 0x000001, "Wrong alignment on WBP_MPItemShop_ItemInfo_C_SetImageVisibility");
static_assert(sizeof(WBP_MPItemShop_ItemInfo_C_SetImageVisibility) == 0x000005, "Wrong size on WBP_MPItemShop_ItemInfo_C_SetImageVisibility");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_SetImageVisibility, ShowImage_0) == 0x000000, "Member 'WBP_MPItemShop_ItemInfo_C_SetImageVisibility::ShowImage_0' has a wrong offset!");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_SetImageVisibility, Temp_bool_Variable) == 0x000001, "Member 'WBP_MPItemShop_ItemInfo_C_SetImageVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_SetImageVisibility, Temp_byte_Variable) == 0x000002, "Member 'WBP_MPItemShop_ItemInfo_C_SetImageVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_SetImageVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_MPItemShop_ItemInfo_C_SetImageVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MPItemShop_ItemInfo_C_SetImageVisibility, K2Node_Select_Default) == 0x000004, "Member 'WBP_MPItemShop_ItemInfo_C_SetImageVisibility::K2Node_Select_Default' has a wrong offset!");

}

