#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Tweening

#include "Basic.hpp"

#include "Tweening_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Tweening.ActorTweening.BP_TransformAlongSplineTo
// 0x0060 (0x0060 - 0x0000)
struct ActorTweening_BP_TransformAlongSplineTo final
{
public:
	int32                                         OutTweenId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenSplineAlignmentOption                   Alignment;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePitch;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreYaw;                                        // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRoll;                                       // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenOptionalFloat                    FromOptions;                                       // 0x0024(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ToValue;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRelative;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenDelayOptions                     DelayOptions;                                      // 0x0038(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           EasingFunction;                                    // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EasingCurve;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenLoopOptions                      LoopOptions;                                       // 0x0050(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoKill;                                         // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorTweening_BP_TransformAlongSplineTo) == 0x000008, "Wrong alignment on ActorTweening_BP_TransformAlongSplineTo");
static_assert(sizeof(ActorTweening_BP_TransformAlongSplineTo) == 0x000060, "Wrong size on ActorTweening_BP_TransformAlongSplineTo");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, OutTweenId) == 0x000000, "Member 'ActorTweening_BP_TransformAlongSplineTo::OutTweenId' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, ContextObject) == 0x000008, "Member 'ActorTweening_BP_TransformAlongSplineTo::ContextObject' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, Target) == 0x000010, "Member 'ActorTweening_BP_TransformAlongSplineTo::Target' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, Spline) == 0x000018, "Member 'ActorTweening_BP_TransformAlongSplineTo::Spline' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, Alignment) == 0x000020, "Member 'ActorTweening_BP_TransformAlongSplineTo::Alignment' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, bIgnorePitch) == 0x000021, "Member 'ActorTweening_BP_TransformAlongSplineTo::bIgnorePitch' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, bIgnoreYaw) == 0x000022, "Member 'ActorTweening_BP_TransformAlongSplineTo::bIgnoreYaw' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, bIgnoreRoll) == 0x000023, "Member 'ActorTweening_BP_TransformAlongSplineTo::bIgnoreRoll' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, FromOptions) == 0x000024, "Member 'ActorTweening_BP_TransformAlongSplineTo::FromOptions' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, ToValue) == 0x00002C, "Member 'ActorTweening_BP_TransformAlongSplineTo::ToValue' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, bIsRelative) == 0x000030, "Member 'ActorTweening_BP_TransformAlongSplineTo::bIsRelative' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, duration) == 0x000034, "Member 'ActorTweening_BP_TransformAlongSplineTo::duration' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, DelayOptions) == 0x000038, "Member 'ActorTweening_BP_TransformAlongSplineTo::DelayOptions' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, EasingFunction) == 0x000044, "Member 'ActorTweening_BP_TransformAlongSplineTo::EasingFunction' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, EasingCurve) == 0x000048, "Member 'ActorTweening_BP_TransformAlongSplineTo::EasingCurve' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, LoopOptions) == 0x000050, "Member 'ActorTweening_BP_TransformAlongSplineTo::LoopOptions' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, bAutoPlay) == 0x000058, "Member 'ActorTweening_BP_TransformAlongSplineTo::bAutoPlay' has a wrong offset!");
static_assert(offsetof(ActorTweening_BP_TransformAlongSplineTo, bAutoKill) == 0x000059, "Member 'ActorTweening_BP_TransformAlongSplineTo::bAutoKill' has a wrong offset!");

// Function Tweening.MaterialTweening.BP_ColorParamTo
// 0x0070 (0x0070 - 0x0000)
struct MaterialTweening_BP_ColorParamTo final
{
public:
	int32                                         OutTweenId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Target;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenOptionalLinearColor              FromOptions;                                       // 0x001C(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ToValue;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenDelayOptions                     DelayOptions;                                      // 0x0044(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           EasingFunction;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EasingCurve;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenLoopOptions                      LoopOptions;                                       // 0x0060(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoKill;                                         // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialTweening_BP_ColorParamTo) == 0x000008, "Wrong alignment on MaterialTweening_BP_ColorParamTo");
static_assert(sizeof(MaterialTweening_BP_ColorParamTo) == 0x000070, "Wrong size on MaterialTweening_BP_ColorParamTo");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, OutTweenId) == 0x000000, "Member 'MaterialTweening_BP_ColorParamTo::OutTweenId' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, ContextObject) == 0x000008, "Member 'MaterialTweening_BP_ColorParamTo::ContextObject' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, Target) == 0x000010, "Member 'MaterialTweening_BP_ColorParamTo::Target' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, ParameterName) == 0x000018, "Member 'MaterialTweening_BP_ColorParamTo::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, FromOptions) == 0x00001C, "Member 'MaterialTweening_BP_ColorParamTo::FromOptions' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, ToValue) == 0x000030, "Member 'MaterialTweening_BP_ColorParamTo::ToValue' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, duration) == 0x000040, "Member 'MaterialTweening_BP_ColorParamTo::duration' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, DelayOptions) == 0x000044, "Member 'MaterialTweening_BP_ColorParamTo::DelayOptions' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, EasingFunction) == 0x000050, "Member 'MaterialTweening_BP_ColorParamTo::EasingFunction' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, EasingCurve) == 0x000058, "Member 'MaterialTweening_BP_ColorParamTo::EasingCurve' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, LoopOptions) == 0x000060, "Member 'MaterialTweening_BP_ColorParamTo::LoopOptions' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, bAutoPlay) == 0x000068, "Member 'MaterialTweening_BP_ColorParamTo::bAutoPlay' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ColorParamTo, bAutoKill) == 0x000069, "Member 'MaterialTweening_BP_ColorParamTo::bAutoKill' has a wrong offset!");

// Function Tweening.MaterialTweening.BP_ScalarParamTo
// 0x0058 (0x0058 - 0x0000)
struct MaterialTweening_BP_ScalarParamTo final
{
public:
	int32                                         OutTweenId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Target;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenOptionalFloat                    FromOptions;                                       // 0x001C(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ToValue;                                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRelative;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenDelayOptions                     DelayOptions;                                      // 0x0030(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           EasingFunction;                                    // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EasingCurve;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenLoopOptions                      LoopOptions;                                       // 0x0048(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoKill;                                         // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialTweening_BP_ScalarParamTo) == 0x000008, "Wrong alignment on MaterialTweening_BP_ScalarParamTo");
static_assert(sizeof(MaterialTweening_BP_ScalarParamTo) == 0x000058, "Wrong size on MaterialTweening_BP_ScalarParamTo");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, OutTweenId) == 0x000000, "Member 'MaterialTweening_BP_ScalarParamTo::OutTweenId' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, ContextObject) == 0x000008, "Member 'MaterialTweening_BP_ScalarParamTo::ContextObject' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, Target) == 0x000010, "Member 'MaterialTweening_BP_ScalarParamTo::Target' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, ParameterName) == 0x000018, "Member 'MaterialTweening_BP_ScalarParamTo::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, FromOptions) == 0x00001C, "Member 'MaterialTweening_BP_ScalarParamTo::FromOptions' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, ToValue) == 0x000024, "Member 'MaterialTweening_BP_ScalarParamTo::ToValue' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, bIsRelative) == 0x000028, "Member 'MaterialTweening_BP_ScalarParamTo::bIsRelative' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, duration) == 0x00002C, "Member 'MaterialTweening_BP_ScalarParamTo::duration' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, DelayOptions) == 0x000030, "Member 'MaterialTweening_BP_ScalarParamTo::DelayOptions' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, EasingFunction) == 0x00003C, "Member 'MaterialTweening_BP_ScalarParamTo::EasingFunction' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, EasingCurve) == 0x000040, "Member 'MaterialTweening_BP_ScalarParamTo::EasingCurve' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, LoopOptions) == 0x000048, "Member 'MaterialTweening_BP_ScalarParamTo::LoopOptions' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, bAutoPlay) == 0x000050, "Member 'MaterialTweening_BP_ScalarParamTo::bAutoPlay' has a wrong offset!");
static_assert(offsetof(MaterialTweening_BP_ScalarParamTo, bAutoKill) == 0x000051, "Member 'MaterialTweening_BP_ScalarParamTo::bAutoKill' has a wrong offset!");

// Function Tweening.TweenManager.HasTween
// 0x0008 (0x0008 - 0x0000)
struct TweenManager_HasTween final
{
public:
	int32                                         InTweenId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManager_HasTween) == 0x000004, "Wrong alignment on TweenManager_HasTween");
static_assert(sizeof(TweenManager_HasTween) == 0x000008, "Wrong size on TweenManager_HasTween");
static_assert(offsetof(TweenManager_HasTween, InTweenId) == 0x000000, "Member 'TweenManager_HasTween::InTweenId' has a wrong offset!");
static_assert(offsetof(TweenManager_HasTween, ReturnValue) == 0x000004, "Member 'TweenManager_HasTween::ReturnValue' has a wrong offset!");

// Function Tweening.TweenManager.KillTween
// 0x0008 (0x0008 - 0x0000)
struct TweenManager_KillTween final
{
public:
	int32                                         InTweenId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManager_KillTween) == 0x000004, "Wrong alignment on TweenManager_KillTween");
static_assert(sizeof(TweenManager_KillTween) == 0x000008, "Wrong size on TweenManager_KillTween");
static_assert(offsetof(TweenManager_KillTween, InTweenId) == 0x000000, "Member 'TweenManager_KillTween::InTweenId' has a wrong offset!");
static_assert(offsetof(TweenManager_KillTween, ReturnValue) == 0x000004, "Member 'TweenManager_KillTween::ReturnValue' has a wrong offset!");

// Function Tweening.TweenManager.KillTweens
// 0x0010 (0x0010 - 0x0000)
struct TweenManager_KillTweens final
{
public:
	TArray<int32>                                 InTweenIds;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenManager_KillTweens) == 0x000008, "Wrong alignment on TweenManager_KillTweens");
static_assert(sizeof(TweenManager_KillTweens) == 0x000010, "Wrong size on TweenManager_KillTweens");
static_assert(offsetof(TweenManager_KillTweens, InTweenIds) == 0x000000, "Member 'TweenManager_KillTweens::InTweenIds' has a wrong offset!");

// Function Tweening.TweenManager.PlayTween
// 0x0008 (0x0008 - 0x0000)
struct TweenManager_PlayTween final
{
public:
	int32                                         InTweenId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenPlayDirection                           InPlayDirection;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManager_PlayTween) == 0x000004, "Wrong alignment on TweenManager_PlayTween");
static_assert(sizeof(TweenManager_PlayTween) == 0x000008, "Wrong size on TweenManager_PlayTween");
static_assert(offsetof(TweenManager_PlayTween, InTweenId) == 0x000000, "Member 'TweenManager_PlayTween::InTweenId' has a wrong offset!");
static_assert(offsetof(TweenManager_PlayTween, InPlayDirection) == 0x000004, "Member 'TweenManager_PlayTween::InPlayDirection' has a wrong offset!");
static_assert(offsetof(TweenManager_PlayTween, ReturnValue) == 0x000005, "Member 'TweenManager_PlayTween::ReturnValue' has a wrong offset!");

// Function Tweening.TweenManager.PlayTweens
// 0x0018 (0x0018 - 0x0000)
struct TweenManager_PlayTweens final
{
public:
	TArray<int32>                                 InTweenIds;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ETweenPlayDirection                           InPlayDirection;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManager_PlayTweens) == 0x000008, "Wrong alignment on TweenManager_PlayTweens");
static_assert(sizeof(TweenManager_PlayTweens) == 0x000018, "Wrong size on TweenManager_PlayTweens");
static_assert(offsetof(TweenManager_PlayTweens, InTweenIds) == 0x000000, "Member 'TweenManager_PlayTweens::InTweenIds' has a wrong offset!");
static_assert(offsetof(TweenManager_PlayTweens, InPlayDirection) == 0x000010, "Member 'TweenManager_PlayTweens::InPlayDirection' has a wrong offset!");

// Function Tweening.TweenManager.PlayTweenWithLooping
// 0x0010 (0x0010 - 0x0000)
struct TweenManager_PlayTweenWithLooping final
{
public:
	int32                                         InTweenId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenLoopType                                InLoopType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InLoopCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenPlayDirection                           InPlayDirection;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManager_PlayTweenWithLooping) == 0x000004, "Wrong alignment on TweenManager_PlayTweenWithLooping");
static_assert(sizeof(TweenManager_PlayTweenWithLooping) == 0x000010, "Wrong size on TweenManager_PlayTweenWithLooping");
static_assert(offsetof(TweenManager_PlayTweenWithLooping, InTweenId) == 0x000000, "Member 'TweenManager_PlayTweenWithLooping::InTweenId' has a wrong offset!");
static_assert(offsetof(TweenManager_PlayTweenWithLooping, InLoopType) == 0x000004, "Member 'TweenManager_PlayTweenWithLooping::InLoopType' has a wrong offset!");
static_assert(offsetof(TweenManager_PlayTweenWithLooping, InLoopCount) == 0x000008, "Member 'TweenManager_PlayTweenWithLooping::InLoopCount' has a wrong offset!");
static_assert(offsetof(TweenManager_PlayTweenWithLooping, InPlayDirection) == 0x00000C, "Member 'TweenManager_PlayTweenWithLooping::InPlayDirection' has a wrong offset!");
static_assert(offsetof(TweenManager_PlayTweenWithLooping, ReturnValue) == 0x00000D, "Member 'TweenManager_PlayTweenWithLooping::ReturnValue' has a wrong offset!");

// Function Tweening.TweenManager.ResetTween
// 0x0008 (0x0008 - 0x0000)
struct TweenManager_ResetTween final
{
public:
	int32                                         InTweenId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETweenResetDestination                        InDestination;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManager_ResetTween) == 0x000004, "Wrong alignment on TweenManager_ResetTween");
static_assert(sizeof(TweenManager_ResetTween) == 0x000008, "Wrong size on TweenManager_ResetTween");
static_assert(offsetof(TweenManager_ResetTween, InTweenId) == 0x000000, "Member 'TweenManager_ResetTween::InTweenId' has a wrong offset!");
static_assert(offsetof(TweenManager_ResetTween, InDestination) == 0x000004, "Member 'TweenManager_ResetTween::InDestination' has a wrong offset!");
static_assert(offsetof(TweenManager_ResetTween, ReturnValue) == 0x000005, "Member 'TweenManager_ResetTween::ReturnValue' has a wrong offset!");

// Function Tweening.TweenManager.ResetTweens
// 0x0018 (0x0018 - 0x0000)
struct TweenManager_ResetTweens final
{
public:
	TArray<int32>                                 InTweenIds;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ETweenResetDestination                        InDestination;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManager_ResetTweens) == 0x000008, "Wrong alignment on TweenManager_ResetTweens");
static_assert(sizeof(TweenManager_ResetTweens) == 0x000018, "Wrong size on TweenManager_ResetTweens");
static_assert(offsetof(TweenManager_ResetTweens, InTweenIds) == 0x000000, "Member 'TweenManager_ResetTweens::InTweenIds' has a wrong offset!");
static_assert(offsetof(TweenManager_ResetTweens, InDestination) == 0x000010, "Member 'TweenManager_ResetTweens::InDestination' has a wrong offset!");

// Function Tweening.TweenManager.StopTween
// 0x0008 (0x0008 - 0x0000)
struct TweenManager_StopTween final
{
public:
	int32                                         InTweenId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManager_StopTween) == 0x000004, "Wrong alignment on TweenManager_StopTween");
static_assert(sizeof(TweenManager_StopTween) == 0x000008, "Wrong size on TweenManager_StopTween");
static_assert(offsetof(TweenManager_StopTween, InTweenId) == 0x000000, "Member 'TweenManager_StopTween::InTweenId' has a wrong offset!");
static_assert(offsetof(TweenManager_StopTween, ReturnValue) == 0x000004, "Member 'TweenManager_StopTween::ReturnValue' has a wrong offset!");

// Function Tweening.TweenManager.StopTweens
// 0x0010 (0x0010 - 0x0000)
struct TweenManager_StopTweens final
{
public:
	TArray<int32>                                 InTweenIds;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenManager_StopTweens) == 0x000008, "Wrong alignment on TweenManager_StopTweens");
static_assert(sizeof(TweenManager_StopTweens) == 0x000010, "Wrong size on TweenManager_StopTweens");
static_assert(offsetof(TweenManager_StopTweens, InTweenIds) == 0x000000, "Member 'TweenManager_StopTweens::InTweenIds' has a wrong offset!");

// Function Tweening.TweenManager.SetTweenTiming
// 0x0014 (0x0014 - 0x0000)
struct TweenManager_SetTweenTiming final
{
public:
	int32                                         InTweenId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtBeginning;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAtEnd;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TweenManager_SetTweenTiming) == 0x000004, "Wrong alignment on TweenManager_SetTweenTiming");
static_assert(sizeof(TweenManager_SetTweenTiming) == 0x000014, "Wrong size on TweenManager_SetTweenTiming");
static_assert(offsetof(TweenManager_SetTweenTiming, InTweenId) == 0x000000, "Member 'TweenManager_SetTweenTiming::InTweenId' has a wrong offset!");
static_assert(offsetof(TweenManager_SetTweenTiming, InDuration) == 0x000004, "Member 'TweenManager_SetTweenTiming::InDuration' has a wrong offset!");
static_assert(offsetof(TweenManager_SetTweenTiming, InDelayAtBeginning) == 0x000008, "Member 'TweenManager_SetTweenTiming::InDelayAtBeginning' has a wrong offset!");
static_assert(offsetof(TweenManager_SetTweenTiming, InDelayAtEnd) == 0x00000C, "Member 'TweenManager_SetTweenTiming::InDelayAtEnd' has a wrong offset!");
static_assert(offsetof(TweenManager_SetTweenTiming, ReturnValue) == 0x000010, "Member 'TweenManager_SetTweenTiming::ReturnValue' has a wrong offset!");

// Function Tweening.TweenSequence.BP_AppendSequence
// 0x0018 (0x0018 - 0x0000)
struct TweenSequence_BP_AppendSequence final
{
public:
	class UTweenSequence*                         SequenceToAppend;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDelayAtBeginning;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDelayAtEnd;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenSequence*                         OutSequence;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenSequence_BP_AppendSequence) == 0x000008, "Wrong alignment on TweenSequence_BP_AppendSequence");
static_assert(sizeof(TweenSequence_BP_AppendSequence) == 0x000018, "Wrong size on TweenSequence_BP_AppendSequence");
static_assert(offsetof(TweenSequence_BP_AppendSequence, SequenceToAppend) == 0x000000, "Member 'TweenSequence_BP_AppendSequence::SequenceToAppend' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_AppendSequence, AdditionalDelayAtBeginning) == 0x000008, "Member 'TweenSequence_BP_AppendSequence::AdditionalDelayAtBeginning' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_AppendSequence, AdditionalDelayAtEnd) == 0x00000C, "Member 'TweenSequence_BP_AppendSequence::AdditionalDelayAtEnd' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_AppendSequence, OutSequence) == 0x000010, "Member 'TweenSequence_BP_AppendSequence::OutSequence' has a wrong offset!");

// Function Tweening.TweenSequence.BP_AppendTween
// 0x0018 (0x0018 - 0x0000)
struct TweenSequence_BP_AppendTween final
{
public:
	int32                                         TweenId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDelayAtBeginning;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDelayAtEnd;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenSequence*                         OutSequence;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenSequence_BP_AppendTween) == 0x000008, "Wrong alignment on TweenSequence_BP_AppendTween");
static_assert(sizeof(TweenSequence_BP_AppendTween) == 0x000018, "Wrong size on TweenSequence_BP_AppendTween");
static_assert(offsetof(TweenSequence_BP_AppendTween, TweenId) == 0x000000, "Member 'TweenSequence_BP_AppendTween::TweenId' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_AppendTween, AdditionalDelayAtBeginning) == 0x000004, "Member 'TweenSequence_BP_AppendTween::AdditionalDelayAtBeginning' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_AppendTween, AdditionalDelayAtEnd) == 0x000008, "Member 'TweenSequence_BP_AppendTween::AdditionalDelayAtEnd' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_AppendTween, OutSequence) == 0x000010, "Member 'TweenSequence_BP_AppendTween::OutSequence' has a wrong offset!");

// Function Tweening.TweenSequence.BP_JoinSequence
// 0x0018 (0x0018 - 0x0000)
struct TweenSequence_BP_JoinSequence final
{
public:
	class UTweenSequence*                         SequenceToAppend;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDelayAtBeginning;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDelayAtEnd;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTweenSequence*                         OutSequence;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenSequence_BP_JoinSequence) == 0x000008, "Wrong alignment on TweenSequence_BP_JoinSequence");
static_assert(sizeof(TweenSequence_BP_JoinSequence) == 0x000018, "Wrong size on TweenSequence_BP_JoinSequence");
static_assert(offsetof(TweenSequence_BP_JoinSequence, SequenceToAppend) == 0x000000, "Member 'TweenSequence_BP_JoinSequence::SequenceToAppend' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_JoinSequence, AdditionalDelayAtBeginning) == 0x000008, "Member 'TweenSequence_BP_JoinSequence::AdditionalDelayAtBeginning' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_JoinSequence, AdditionalDelayAtEnd) == 0x00000C, "Member 'TweenSequence_BP_JoinSequence::AdditionalDelayAtEnd' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_JoinSequence, OutSequence) == 0x000010, "Member 'TweenSequence_BP_JoinSequence::OutSequence' has a wrong offset!");

// Function Tweening.TweenSequence.BP_JoinTween
// 0x0018 (0x0018 - 0x0000)
struct TweenSequence_BP_JoinTween final
{
public:
	int32                                         TweenId;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDelayAtBeginning;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDelayAtEnd;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTweenSequence*                         OutSequence;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenSequence_BP_JoinTween) == 0x000008, "Wrong alignment on TweenSequence_BP_JoinTween");
static_assert(sizeof(TweenSequence_BP_JoinTween) == 0x000018, "Wrong size on TweenSequence_BP_JoinTween");
static_assert(offsetof(TweenSequence_BP_JoinTween, TweenId) == 0x000000, "Member 'TweenSequence_BP_JoinTween::TweenId' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_JoinTween, AdditionalDelayAtBeginning) == 0x000004, "Member 'TweenSequence_BP_JoinTween::AdditionalDelayAtBeginning' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_JoinTween, AdditionalDelayAtEnd) == 0x000008, "Member 'TweenSequence_BP_JoinTween::AdditionalDelayAtEnd' has a wrong offset!");
static_assert(offsetof(TweenSequence_BP_JoinTween, OutSequence) == 0x000010, "Member 'TweenSequence_BP_JoinTween::OutSequence' has a wrong offset!");

// Function Tweening.TweenSequence.Play
// 0x0001 (0x0001 - 0x0000)
struct TweenSequence_Play final
{
public:
	ETweenPlayDirection                           InPlayDirection;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TweenSequence_Play) == 0x000001, "Wrong alignment on TweenSequence_Play");
static_assert(sizeof(TweenSequence_Play) == 0x000001, "Wrong size on TweenSequence_Play");
static_assert(offsetof(TweenSequence_Play, InPlayDirection) == 0x000000, "Member 'TweenSequence_Play::InPlayDirection' has a wrong offset!");

// Function Tweening.WidgetTweening.BP_OpacityTo
// 0x0058 (0x0058 - 0x0000)
struct WidgetTweening_BP_OpacityTo final
{
public:
	int32                                         OutTweenId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenOptionalFloat                    FromOptions;                                       // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ToValue;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRelative;                                       // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenDelayOptions                     DelayOptions;                                      // 0x002C(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           EasingFunction;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EasingCurve;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenLoopOptions                      LoopOptions;                                       // 0x0048(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoKill;                                         // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTweening_BP_OpacityTo) == 0x000008, "Wrong alignment on WidgetTweening_BP_OpacityTo");
static_assert(sizeof(WidgetTweening_BP_OpacityTo) == 0x000058, "Wrong size on WidgetTweening_BP_OpacityTo");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, OutTweenId) == 0x000000, "Member 'WidgetTweening_BP_OpacityTo::OutTweenId' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, ContextObject) == 0x000008, "Member 'WidgetTweening_BP_OpacityTo::ContextObject' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, Target) == 0x000010, "Member 'WidgetTweening_BP_OpacityTo::Target' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, FromOptions) == 0x000018, "Member 'WidgetTweening_BP_OpacityTo::FromOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, ToValue) == 0x000020, "Member 'WidgetTweening_BP_OpacityTo::ToValue' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, bIsRelative) == 0x000024, "Member 'WidgetTweening_BP_OpacityTo::bIsRelative' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, duration) == 0x000028, "Member 'WidgetTweening_BP_OpacityTo::duration' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, DelayOptions) == 0x00002C, "Member 'WidgetTweening_BP_OpacityTo::DelayOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, EasingFunction) == 0x000038, "Member 'WidgetTweening_BP_OpacityTo::EasingFunction' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, EasingCurve) == 0x000040, "Member 'WidgetTweening_BP_OpacityTo::EasingCurve' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, LoopOptions) == 0x000048, "Member 'WidgetTweening_BP_OpacityTo::LoopOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, bAutoPlay) == 0x000050, "Member 'WidgetTweening_BP_OpacityTo::bAutoPlay' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_OpacityTo, bAutoKill) == 0x000051, "Member 'WidgetTweening_BP_OpacityTo::bAutoKill' has a wrong offset!");

// Function Tweening.WidgetTweening.BP_TransformAngleTo
// 0x0058 (0x0058 - 0x0000)
struct WidgetTweening_BP_TransformAngleTo final
{
public:
	int32                                         OutTweenId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenOptionalFloat                    FromOptions;                                       // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ToValue;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRelative;                                       // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenDelayOptions                     DelayOptions;                                      // 0x002C(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           EasingFunction;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EasingCurve;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenLoopOptions                      LoopOptions;                                       // 0x0048(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoKill;                                         // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTweening_BP_TransformAngleTo) == 0x000008, "Wrong alignment on WidgetTweening_BP_TransformAngleTo");
static_assert(sizeof(WidgetTweening_BP_TransformAngleTo) == 0x000058, "Wrong size on WidgetTweening_BP_TransformAngleTo");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, OutTweenId) == 0x000000, "Member 'WidgetTweening_BP_TransformAngleTo::OutTweenId' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, ContextObject) == 0x000008, "Member 'WidgetTweening_BP_TransformAngleTo::ContextObject' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, Target) == 0x000010, "Member 'WidgetTweening_BP_TransformAngleTo::Target' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, FromOptions) == 0x000018, "Member 'WidgetTweening_BP_TransformAngleTo::FromOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, ToValue) == 0x000020, "Member 'WidgetTweening_BP_TransformAngleTo::ToValue' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, bIsRelative) == 0x000024, "Member 'WidgetTweening_BP_TransformAngleTo::bIsRelative' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, duration) == 0x000028, "Member 'WidgetTweening_BP_TransformAngleTo::duration' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, DelayOptions) == 0x00002C, "Member 'WidgetTweening_BP_TransformAngleTo::DelayOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, EasingFunction) == 0x000038, "Member 'WidgetTweening_BP_TransformAngleTo::EasingFunction' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, EasingCurve) == 0x000040, "Member 'WidgetTweening_BP_TransformAngleTo::EasingCurve' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, LoopOptions) == 0x000048, "Member 'WidgetTweening_BP_TransformAngleTo::LoopOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, bAutoPlay) == 0x000050, "Member 'WidgetTweening_BP_TransformAngleTo::bAutoPlay' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformAngleTo, bAutoKill) == 0x000051, "Member 'WidgetTweening_BP_TransformAngleTo::bAutoKill' has a wrong offset!");

// Function Tweening.WidgetTweening.BP_TransformPivotTo
// 0x0070 (0x0070 - 0x0000)
struct WidgetTweening_BP_TransformPivotTo final
{
public:
	int32                                         OutTweenId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenOptionalVector2D                 FromOptions;                                       // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ToValue;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRelative;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenDelayOptions                     DelayOptions;                                      // 0x0048(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           EasingFunction;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EasingCurve;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenLoopOptions                      LoopOptions;                                       // 0x0060(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoKill;                                         // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTweening_BP_TransformPivotTo) == 0x000008, "Wrong alignment on WidgetTweening_BP_TransformPivotTo");
static_assert(sizeof(WidgetTweening_BP_TransformPivotTo) == 0x000070, "Wrong size on WidgetTweening_BP_TransformPivotTo");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, OutTweenId) == 0x000000, "Member 'WidgetTweening_BP_TransformPivotTo::OutTweenId' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, ContextObject) == 0x000008, "Member 'WidgetTweening_BP_TransformPivotTo::ContextObject' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, Target) == 0x000010, "Member 'WidgetTweening_BP_TransformPivotTo::Target' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, FromOptions) == 0x000018, "Member 'WidgetTweening_BP_TransformPivotTo::FromOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, ToValue) == 0x000030, "Member 'WidgetTweening_BP_TransformPivotTo::ToValue' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, bIsRelative) == 0x000040, "Member 'WidgetTweening_BP_TransformPivotTo::bIsRelative' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, duration) == 0x000044, "Member 'WidgetTweening_BP_TransformPivotTo::duration' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, DelayOptions) == 0x000048, "Member 'WidgetTweening_BP_TransformPivotTo::DelayOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, EasingFunction) == 0x000054, "Member 'WidgetTweening_BP_TransformPivotTo::EasingFunction' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, EasingCurve) == 0x000058, "Member 'WidgetTweening_BP_TransformPivotTo::EasingCurve' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, LoopOptions) == 0x000060, "Member 'WidgetTweening_BP_TransformPivotTo::LoopOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, bAutoPlay) == 0x000068, "Member 'WidgetTweening_BP_TransformPivotTo::bAutoPlay' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformPivotTo, bAutoKill) == 0x000069, "Member 'WidgetTweening_BP_TransformPivotTo::bAutoKill' has a wrong offset!");

// Function Tweening.WidgetTweening.BP_TransformScaleTo
// 0x0070 (0x0070 - 0x0000)
struct WidgetTweening_BP_TransformScaleTo final
{
public:
	int32                                         OutTweenId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenOptionalVector2D                 FromOptions;                                       // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ToValue;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRelative;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenDelayOptions                     DelayOptions;                                      // 0x0048(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           EasingFunction;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EasingCurve;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenLoopOptions                      LoopOptions;                                       // 0x0060(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoKill;                                         // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTweening_BP_TransformScaleTo) == 0x000008, "Wrong alignment on WidgetTweening_BP_TransformScaleTo");
static_assert(sizeof(WidgetTweening_BP_TransformScaleTo) == 0x000070, "Wrong size on WidgetTweening_BP_TransformScaleTo");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, OutTweenId) == 0x000000, "Member 'WidgetTweening_BP_TransformScaleTo::OutTweenId' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, ContextObject) == 0x000008, "Member 'WidgetTweening_BP_TransformScaleTo::ContextObject' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, Target) == 0x000010, "Member 'WidgetTweening_BP_TransformScaleTo::Target' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, FromOptions) == 0x000018, "Member 'WidgetTweening_BP_TransformScaleTo::FromOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, ToValue) == 0x000030, "Member 'WidgetTweening_BP_TransformScaleTo::ToValue' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, bIsRelative) == 0x000040, "Member 'WidgetTweening_BP_TransformScaleTo::bIsRelative' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, duration) == 0x000044, "Member 'WidgetTweening_BP_TransformScaleTo::duration' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, DelayOptions) == 0x000048, "Member 'WidgetTweening_BP_TransformScaleTo::DelayOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, EasingFunction) == 0x000054, "Member 'WidgetTweening_BP_TransformScaleTo::EasingFunction' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, EasingCurve) == 0x000058, "Member 'WidgetTweening_BP_TransformScaleTo::EasingCurve' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, LoopOptions) == 0x000060, "Member 'WidgetTweening_BP_TransformScaleTo::LoopOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, bAutoPlay) == 0x000068, "Member 'WidgetTweening_BP_TransformScaleTo::bAutoPlay' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformScaleTo, bAutoKill) == 0x000069, "Member 'WidgetTweening_BP_TransformScaleTo::bAutoKill' has a wrong offset!");

// Function Tweening.WidgetTweening.BP_TransformShearTo
// 0x0070 (0x0070 - 0x0000)
struct WidgetTweening_BP_TransformShearTo final
{
public:
	int32                                         OutTweenId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenOptionalVector2D                 FromOptions;                                       // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ToValue;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRelative;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenDelayOptions                     DelayOptions;                                      // 0x0048(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           EasingFunction;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EasingCurve;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenLoopOptions                      LoopOptions;                                       // 0x0060(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoKill;                                         // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTweening_BP_TransformShearTo) == 0x000008, "Wrong alignment on WidgetTweening_BP_TransformShearTo");
static_assert(sizeof(WidgetTweening_BP_TransformShearTo) == 0x000070, "Wrong size on WidgetTweening_BP_TransformShearTo");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, OutTweenId) == 0x000000, "Member 'WidgetTweening_BP_TransformShearTo::OutTweenId' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, ContextObject) == 0x000008, "Member 'WidgetTweening_BP_TransformShearTo::ContextObject' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, Target) == 0x000010, "Member 'WidgetTweening_BP_TransformShearTo::Target' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, FromOptions) == 0x000018, "Member 'WidgetTweening_BP_TransformShearTo::FromOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, ToValue) == 0x000030, "Member 'WidgetTweening_BP_TransformShearTo::ToValue' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, bIsRelative) == 0x000040, "Member 'WidgetTweening_BP_TransformShearTo::bIsRelative' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, duration) == 0x000044, "Member 'WidgetTweening_BP_TransformShearTo::duration' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, DelayOptions) == 0x000048, "Member 'WidgetTweening_BP_TransformShearTo::DelayOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, EasingFunction) == 0x000054, "Member 'WidgetTweening_BP_TransformShearTo::EasingFunction' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, EasingCurve) == 0x000058, "Member 'WidgetTweening_BP_TransformShearTo::EasingCurve' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, LoopOptions) == 0x000060, "Member 'WidgetTweening_BP_TransformShearTo::LoopOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, bAutoPlay) == 0x000068, "Member 'WidgetTweening_BP_TransformShearTo::bAutoPlay' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TransformShearTo, bAutoKill) == 0x000069, "Member 'WidgetTweening_BP_TransformShearTo::bAutoKill' has a wrong offset!");

// Function Tweening.WidgetTweening.BP_TranslationTo
// 0x0070 (0x0070 - 0x0000)
struct WidgetTweening_BP_TranslationTo final
{
public:
	int32                                         OutTweenId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenOptionalVector2D                 FromOptions;                                       // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ToValue;                                           // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRelative;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenDelayOptions                     DelayOptions;                                      // 0x0048(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ETweenBuiltInEasing                           EasingFunction;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            EasingCurve;                                       // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTweenLoopOptions                      LoopOptions;                                       // 0x0060(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoKill;                                         // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTweening_BP_TranslationTo) == 0x000008, "Wrong alignment on WidgetTweening_BP_TranslationTo");
static_assert(sizeof(WidgetTweening_BP_TranslationTo) == 0x000070, "Wrong size on WidgetTweening_BP_TranslationTo");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, OutTweenId) == 0x000000, "Member 'WidgetTweening_BP_TranslationTo::OutTweenId' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, ContextObject) == 0x000008, "Member 'WidgetTweening_BP_TranslationTo::ContextObject' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, Target) == 0x000010, "Member 'WidgetTweening_BP_TranslationTo::Target' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, FromOptions) == 0x000018, "Member 'WidgetTweening_BP_TranslationTo::FromOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, ToValue) == 0x000030, "Member 'WidgetTweening_BP_TranslationTo::ToValue' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, bIsRelative) == 0x000040, "Member 'WidgetTweening_BP_TranslationTo::bIsRelative' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, duration) == 0x000044, "Member 'WidgetTweening_BP_TranslationTo::duration' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, DelayOptions) == 0x000048, "Member 'WidgetTweening_BP_TranslationTo::DelayOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, EasingFunction) == 0x000054, "Member 'WidgetTweening_BP_TranslationTo::EasingFunction' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, EasingCurve) == 0x000058, "Member 'WidgetTweening_BP_TranslationTo::EasingCurve' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, LoopOptions) == 0x000060, "Member 'WidgetTweening_BP_TranslationTo::LoopOptions' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, bAutoPlay) == 0x000068, "Member 'WidgetTweening_BP_TranslationTo::bAutoPlay' has a wrong offset!");
static_assert(offsetof(WidgetTweening_BP_TranslationTo, bAutoKill) == 0x000069, "Member 'WidgetTweening_BP_TranslationTo::bAutoKill' has a wrong offset!");

}

