#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ActiveAugments_ListEntry

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.ExecuteUbergraph_WBP_ActiveAugments_ListEntry
// 0x0080 (0x0080 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsNew;                               // 0x0004(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsBorrowed;                          // 0x0005(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 K2Node_CustomEvent_Asset;                          // 0x0018(0x0020)(HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_PinColor;                             // 0x0044(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0070(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry) == 0x000008, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry) == 0x000080, "Wrong size on WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, EntryPoint) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, K2Node_Event_bIsNew) == 0x000004, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::K2Node_Event_bIsNew' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, K2Node_Event_bIsBorrowed) == 0x000005, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::K2Node_Event_bIsBorrowed' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, Temp_object_Variable) == 0x000010, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, K2Node_CustomEvent_Asset) == 0x000018, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::K2Node_CustomEvent_Asset' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, K2Node_DynamicCast_AsTexture_2D) == 0x000038, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, K2Node_Event_PinColor) == 0x000044, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::K2Node_Event_PinColor' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000058, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x000060, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, K2Node_CustomEvent_Loaded) == 0x000068, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry, K2Node_CreateDelegate_OutputDelegate) == 0x000070, "Member 'WBP_ActiveAugments_ListEntry_C_ExecuteUbergraph_WBP_ActiveAugments_ListEntry::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.OnItemNewOrBorrowedSet
// 0x0002 (0x0002 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_OnItemNewOrBorrowedSet final
{
public:
	bool                                          bIsNew;                                            // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBorrowed;                                       // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_OnItemNewOrBorrowedSet) == 0x000001, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_OnItemNewOrBorrowedSet");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_OnItemNewOrBorrowedSet) == 0x000002, "Wrong size on WBP_ActiveAugments_ListEntry_C_OnItemNewOrBorrowedSet");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_OnItemNewOrBorrowedSet, bIsNew) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_OnItemNewOrBorrowedSet::bIsNew' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_OnItemNewOrBorrowedSet, bIsBorrowed) == 0x000001, "Member 'WBP_ActiveAugments_ListEntry_C_OnItemNewOrBorrowedSet::bIsBorrowed' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.OnItemPinColorSet
// 0x0010 (0x0010 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_OnItemPinColorSet final
{
public:
	struct FLinearColor                           PinColor;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_OnItemPinColorSet) == 0x000004, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_OnItemPinColorSet");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_OnItemPinColorSet) == 0x000010, "Wrong size on WBP_ActiveAugments_ListEntry_C_OnItemPinColorSet");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_OnItemPinColorSet, PinColor) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_OnItemPinColorSet::PinColor' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.OnLoaded_6C2C1B1643FCFBB2C34E22854297D571
// 0x0008 (0x0008 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_OnLoaded_6C2C1B1643FCFBB2C34E22854297D571 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_OnLoaded_6C2C1B1643FCFBB2C34E22854297D571) == 0x000008, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_OnLoaded_6C2C1B1643FCFBB2C34E22854297D571");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_OnLoaded_6C2C1B1643FCFBB2C34E22854297D571) == 0x000008, "Wrong size on WBP_ActiveAugments_ListEntry_C_OnLoaded_6C2C1B1643FCFBB2C34E22854297D571");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_OnLoaded_6C2C1B1643FCFBB2C34E22854297D571, Loaded) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_OnLoaded_6C2C1B1643FCFBB2C34E22854297D571::Loaded' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.PlaySpawnEntryAnim
// 0x0008 (0x0008 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_PlaySpawnEntryAnim final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_PlaySpawnEntryAnim) == 0x000008, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_PlaySpawnEntryAnim");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_PlaySpawnEntryAnim) == 0x000008, "Wrong size on WBP_ActiveAugments_ListEntry_C_PlaySpawnEntryAnim");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_PlaySpawnEntryAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_PlaySpawnEntryAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.SetAsEmptySlot
// 0x0040 (0x0040 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot final
{
public:
	bool                                          InIsEmptySlot;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FocusedSlotColor;                                  // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnfocusedSlotColor;                                // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidget*                          K2Node_Select_Default;                             // 0x0030(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot) == 0x000008, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot) == 0x000040, "Wrong size on WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, InIsEmptySlot) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::InIsEmptySlot' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, FocusedSlotColor) == 0x000004, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::FocusedSlotColor' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, UnfocusedSlotColor) == 0x000014, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::UnfocusedSlotColor' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, Temp_byte_Variable) == 0x000024, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, Temp_byte_Variable_1) == 0x000025, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, Temp_bool_Variable) == 0x000026, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, Temp_bool_Variable_1) == 0x000027, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000028, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, K2Node_Select_Default) == 0x000030, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot, K2Node_Select_Default_1) == 0x000038, "Member 'WBP_ActiveAugments_ListEntry_C_SetAsEmptySlot::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.SetAugmentIcon
// 0x0020 (0x0020 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_SetAugmentIcon final
{
public:
	TSoftObjectPtr<class UObject>                 Asset;                                             // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_SetAugmentIcon) == 0x000008, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_SetAugmentIcon");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_SetAugmentIcon) == 0x000020, "Wrong size on WBP_ActiveAugments_ListEntry_C_SetAugmentIcon");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAugmentIcon, Asset) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_SetAugmentIcon::Asset' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.SetAugmentInfo
// 0x0028 (0x0028 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_SetAugmentInfo final
{
public:
	class UFortPlayerAugmentItemDefinition*       InAugmentItemDefinition;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetHUDEffectImage_ReturnValue;            // 0x0008(0x0020)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_SetAugmentInfo) == 0x000008, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_SetAugmentInfo");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_SetAugmentInfo) == 0x000028, "Wrong size on WBP_ActiveAugments_ListEntry_C_SetAugmentInfo");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAugmentInfo, InAugmentItemDefinition) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_SetAugmentInfo::InAugmentItemDefinition' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetAugmentInfo, CallFunc_GetHUDEffectImage_ReturnValue) == 0x000008, "Member 'WBP_ActiveAugments_ListEntry_C_SetAugmentInfo::CallFunc_GetHUDEffectImage_ReturnValue' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.SetEntryFocused
// 0x0030 (0x0030 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_SetEntryFocused final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimation_StartAtTime_ImplicitCast;   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused) == 0x000008, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_SetEntryFocused");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused) == 0x000030, "Wrong size on WBP_ActiveAugments_ListEntry_C_SetEntryFocused");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, IsFocused) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::IsFocused' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, Temp_byte_Variable) == 0x000001, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, Temp_bool_Variable) == 0x000003, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, CallFunc_GetEndTime_ReturnValue) == 0x000004, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, K2Node_Select_Default) == 0x000008, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, CallFunc_SelectFloat_B_ImplicitCast) == 0x000020, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetEntryFocused, CallFunc_PlayAnimation_StartAtTime_ImplicitCast) == 0x000028, "Member 'WBP_ActiveAugments_ListEntry_C_SetEntryFocused::CallFunc_PlayAnimation_StartAtTime_ImplicitCast' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.SetMobileVisuals
// 0x0028 (0x0028 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_SetMobileVisuals final
{
public:
	EVerticalAlignment                            Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_2;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_3;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          K2Node_Select_Default_1;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals) == 0x000008, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_SetMobileVisuals");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals) == 0x000028, "Wrong size on WBP_ActiveAugments_ListEntry_C_SetMobileVisuals");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, Temp_byte_Variable) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, CallFunc_IsMobileGame_ReturnValue) == 0x000001, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, CallFunc_IsUsingTouch_ReturnValue) == 0x000002, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, Temp_bool_Variable) == 0x000005, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000008, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, K2Node_Select_Default) == 0x000010, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, Temp_byte_Variable_2) == 0x000011, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, Temp_byte_Variable_3) == 0x000012, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, Temp_bool_Variable_1) == 0x000013, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x000018, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_SetMobileVisuals, K2Node_Select_Default_1) == 0x000020, "Member 'WBP_ActiveAugments_ListEntry_C_SetMobileVisuals::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.UpdateBorrowedPrompt
// 0x0005 (0x0005 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt final
{
public:
	bool                                          IsBorrowed;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt) == 0x000001, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt) == 0x000005, "Wrong size on WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt, IsBorrowed) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt::IsBorrowed' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt, Temp_bool_Variable) == 0x000001, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt, Temp_byte_Variable) == 0x000002, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt, K2Node_Select_Default) == 0x000004, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateBorrowedPrompt::K2Node_Select_Default' has a wrong offset!");

// Function WBP_ActiveAugments_ListEntry.WBP_ActiveAugments_ListEntry_C.UpdateNewPrompt
// 0x0005 (0x0005 - 0x0000)
struct WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt final
{
public:
	bool                                          IsNew;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt) == 0x000001, "Wrong alignment on WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt");
static_assert(sizeof(WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt) == 0x000005, "Wrong size on WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt, IsNew) == 0x000000, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt::IsNew' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt, Temp_bool_Variable) == 0x000001, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt, Temp_byte_Variable) == 0x000002, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt, K2Node_Select_Default) == 0x000004, "Member 'WBP_ActiveAugments_ListEntry_C_UpdateNewPrompt::K2Node_Select_Default' has a wrong offset!");

}

