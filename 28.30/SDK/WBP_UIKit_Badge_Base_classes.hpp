#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UIKit_Badge_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"
#include "E_UI_BadgeType_structs.hpp"
#include "E_UI_StatusIndicator_Type_structs.hpp"
#include "E_UI_StatusIndicator_Configuration_structs.hpp"
#include "E_UI_BadgeIndicatorType_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_UIKit_Badge_Base.WBP_UIKit_Badge_Base_C
// 0x0108 (0x03C8 - 0x02C0)
class UWBP_UIKit_Badge_Base_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 BG;                                                // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_Indicator;                                      // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_UIKit_StatusIndicator_C*           StatusIndicator;                                   // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       TextBadge;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   BadgeText;                                         // 0x02E8(0x0018)(Edit, BlueprintVisible)
	E_UI_BadgeType                                BadgeType;                                         // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         TextFont;                                          // 0x0308(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSlateFontInfo                         NumericFont;                                       // 0x0360(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	E_UI_BadgeIndicatorType                       IndicatorConfig;                                   // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_StatusIndicator_Type                     Indicator_Type;                                    // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BA[0x6];                                      // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                IndicatorIcon;                                     // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_UIKit_Badge_Base(int32 EntryPoint);
	void InitializeBadge();
	void PreConstruct(bool IsDesignTime);
	void SetBadgeText(const class FText& Text);
	void SetBadgeType(E_UI_BadgeType Type);
	void SetIndicatorConfiguration(E_UI_BadgeIndicatorType Config);
	void SetIndicatorIcon(class UObject* IconAsset);
	void SetIndicatorType(E_UI_StatusIndicator_Type IndicatorType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_UIKit_Badge_Base_C">();
	}
	static class UWBP_UIKit_Badge_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_UIKit_Badge_Base_C>();
	}
};
static_assert(alignof(UWBP_UIKit_Badge_Base_C) == 0x000008, "Wrong alignment on UWBP_UIKit_Badge_Base_C");
static_assert(sizeof(UWBP_UIKit_Badge_Base_C) == 0x0003C8, "Wrong size on UWBP_UIKit_Badge_Base_C");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, UberGraphFrame) == 0x0002C0, "Member 'UWBP_UIKit_Badge_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, BG) == 0x0002C8, "Member 'UWBP_UIKit_Badge_Base_C::BG' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, SB_Indicator) == 0x0002D0, "Member 'UWBP_UIKit_Badge_Base_C::SB_Indicator' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, StatusIndicator) == 0x0002D8, "Member 'UWBP_UIKit_Badge_Base_C::StatusIndicator' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, TextBadge) == 0x0002E0, "Member 'UWBP_UIKit_Badge_Base_C::TextBadge' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, BadgeText) == 0x0002E8, "Member 'UWBP_UIKit_Badge_Base_C::BadgeText' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, BadgeType) == 0x000300, "Member 'UWBP_UIKit_Badge_Base_C::BadgeType' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, TextFont) == 0x000308, "Member 'UWBP_UIKit_Badge_Base_C::TextFont' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, NumericFont) == 0x000360, "Member 'UWBP_UIKit_Badge_Base_C::NumericFont' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, IndicatorConfig) == 0x0003B8, "Member 'UWBP_UIKit_Badge_Base_C::IndicatorConfig' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, Indicator_Type) == 0x0003B9, "Member 'UWBP_UIKit_Badge_Base_C::Indicator_Type' has a wrong offset!");
static_assert(offsetof(UWBP_UIKit_Badge_Base_C, IndicatorIcon) == 0x0003C0, "Member 'UWBP_UIKit_Badge_Base_C::IndicatorIcon' has a wrong offset!");

}

