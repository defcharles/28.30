#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrindRailRuntime

#include "Basic.hpp"

#include "GrindRailRuntime_classes.hpp"
#include "GrindRailRuntime_parameters.hpp"


namespace SDK
{

// Function GrindRailRuntime.FortGrindRail.BPRerunConstructionScript
// (Final, Native, Public, BlueprintCallable)

void AFortGrindRail::BPRerunConstructionScript()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BPRerunConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortGrindRail.ForceClearBoosters
// (Event, Protected, BlueprintEvent)

void AFortGrindRail::ForceClearBoosters()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ForceClearBoosters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortGrindRail.GenerateMeshesAlongSpline
// (Event, Public, BlueprintEvent)

void AFortGrindRail::GenerateMeshesAlongSpline()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GenerateMeshesAlongSpline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortGrindRail.IsTipCapped
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bStartTip                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortGrindRail::IsTipCapped(const bool bStartTip)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsTipCapped");

	Params::FortGrindRail_IsTipCapped Parms{};

	Parms.bStartTip = bStartTip;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortGrindRail.NativeGetNextPositionToGrind
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DistanceToTravel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentDistanceAlongSpline                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightLeanValue                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutNextLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGotToEnd                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NextLocationOnRail                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGrindRailBoosterMode                   BoosterMode                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHitObstacle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewRail                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DistanceAlongNewRail                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortGrindRail*                   TheNewRail                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewRailReverseDirection                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortGrindRail::NativeGetNextPositionToGrind(const float DistanceToTravel, const float CurrentDistanceAlongSpline, const float RightLeanValue, struct FVector* OutNextLocation, bool* bGotToEnd, float* NextLocationOnRail, EGrindRailBoosterMode* BoosterMode, bool* bHitObstacle, bool* bNewRail, float* DistanceAlongNewRail, class AFortGrindRail** TheNewRail, bool* bNewRailReverseDirection)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NativeGetNextPositionToGrind");

	Params::FortGrindRail_NativeGetNextPositionToGrind Parms{};

	Parms.DistanceToTravel = DistanceToTravel;
	Parms.CurrentDistanceAlongSpline = CurrentDistanceAlongSpline;
	Parms.RightLeanValue = RightLeanValue;

	UObject::ProcessEvent(Func, &Parms);

	if (OutNextLocation != nullptr)
		*OutNextLocation = std::move(Parms.OutNextLocation);

	if (bGotToEnd != nullptr)
		*bGotToEnd = Parms.bGotToEnd;

	if (NextLocationOnRail != nullptr)
		*NextLocationOnRail = Parms.NextLocationOnRail;

	if (BoosterMode != nullptr)
		*BoosterMode = Parms.BoosterMode;

	if (bHitObstacle != nullptr)
		*bHitObstacle = Parms.bHitObstacle;

	if (bNewRail != nullptr)
		*bNewRail = Parms.bNewRail;

	if (DistanceAlongNewRail != nullptr)
		*DistanceAlongNewRail = Parms.DistanceAlongNewRail;

	if (TheNewRail != nullptr)
		*TheNewRail = Parms.TheNewRail;

	if (bNewRailReverseDirection != nullptr)
		*bNewRailReverseDirection = Parms.bNewRailReverseDirection;
}


// Function GrindRailRuntime.FortGrindRail.OnPlayerBeganGrinding
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  GrindingPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortGrindRail::OnPlayerBeganGrinding(class AFortPlayerPawn* GrindingPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPlayerBeganGrinding");

	Params::FortGrindRail_OnPlayerBeganGrinding Parms{};

	Parms.GrindingPawn = GrindingPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGrindRail.OnPlayerEndedGrinding
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortGrindRail::OnPlayerEndedGrinding(class AFortPlayerPawn* Pawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPlayerEndedGrinding");

	Params::FortGrindRail_OnPlayerEndedGrinding Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGrindRail.OnPlaylistDataReady
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class AFortGameStateAthena*             GameState                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortPlaylist*                    Playlist                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortGrindRail::OnPlaylistDataReady(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPlaylistDataReady");

	Params::FortGrindRail_OnPlaylistDataReady Parms{};

	Parms.GameState = GameState;
	Parms.Playlist = Playlist;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGrindRail.OnRep_DisableBooster
// (Final, Native, Protected)

void AFortGrindRail::OnRep_DisableBooster()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_DisableBooster");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortGrindRail.SetupMeshInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineMeshComponent*             SplineMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortGrindRail::SetupMeshInfo(class USplineMeshComponent* SplineMeshComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetupMeshInfo");

	Params::FortGrindRail_SetupMeshInfo Parms{};

	Parms.SplineMeshComponent = SplineMeshComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGrindRail.UpdateTransientComponentTransforms
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<class USceneComponent*>          TransientSceneComponents                               (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFortGrindRail::UpdateTransientComponentTransforms(const TArray<class USceneComponent*>& TransientSceneComponents)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateTransientComponentTransforms");

	Params::FortGrindRail_UpdateTransientComponentTransforms Parms{};

	Parms.TransientSceneComponents = std::move(TransientSceneComponents);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGrindRail.AllowSprinting
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortGrindRail::AllowSprinting() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AllowSprinting");

	Params::FortGrindRail_AllowSprinting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortGrindRail.GetSpeedSettingsOverride
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FGrindRailSpeedSettings          SpeedSettingsOverride                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortGrindRail::GetSpeedSettingsOverride(struct FGrindRailSpeedSettings* SpeedSettingsOverride) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSpeedSettingsOverride");

	Params::FortGrindRail_GetSpeedSettingsOverride Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpeedSettingsOverride != nullptr)
		*SpeedSettingsOverride = std::move(Parms.SpeedSettingsOverride);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortGrindRail.HasHeadConnection
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortGrindRail::HasHeadConnection() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasHeadConnection");

	Params::FortGrindRail_HasHeadConnection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortGrindRail.HasTailConnection
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortGrindRail::HasTailConnection() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasTailConnection");

	Params::FortGrindRail_HasTailConnection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortGrindRail.IsGrindRailEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortGrindRail::IsGrindRailEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsGrindRailEnabled");

	Params::FortGrindRail_IsGrindRailEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortGrindRail.ShouldApplyFallDamageImmunity
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortGrindRail::ShouldApplyFallDamageImmunity() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ShouldApplyFallDamageImmunity");

	Params::FortGrindRail_ShouldApplyFallDamageImmunity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortGrindRailLayerAnimInstance.AnimNotify_EntryEnter
// (Final, Native, Public)
// Parameters:
// class UAnimNotify*                      Notify                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGrindRailLayerAnimInstance::AnimNotify_EntryEnter(const class UAnimNotify* Notify)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AnimNotify_EntryEnter");

	Params::FortGrindRailLayerAnimInstance_AnimNotify_EntryEnter Parms{};

	Parms.Notify = Notify;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGrindRailLayerAnimInstance.AnimNotify_EntryExit
// (Final, Native, Public)
// Parameters:
// class UAnimNotify*                      Notify                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGrindRailLayerAnimInstance::AnimNotify_EntryExit(const class UAnimNotify* Notify)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AnimNotify_EntryExit");

	Params::FortGrindRailLayerAnimInstance_AnimNotify_EntryExit Parms{};

	Parms.Notify = Notify;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGrindRailLayerAnimInstance.AnimNotify_IdleEnter
// (Final, Native, Public)
// Parameters:
// class UAnimNotify*                      Notify                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGrindRailLayerAnimInstance::AnimNotify_IdleEnter(const class UAnimNotify* Notify)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AnimNotify_IdleEnter");

	Params::FortGrindRailLayerAnimInstance_AnimNotify_IdleEnter Parms{};

	Parms.Notify = Notify;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGrindRailLayerAnimInstance.HandleBegunGrinding
// (Final, Native, Public, HasDefaults)
// Parameters:
// bool                                    bWasAlreadyGrinding                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasJumpingFromRail                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromInteraction                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PreviousPlayerLocation                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGrindRailLayerAnimInstance::HandleBegunGrinding(bool bWasAlreadyGrinding, bool bWasJumpingFromRail, bool bFromInteraction, const struct FVector& PreviousPlayerLocation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleBegunGrinding");

	Params::FortGrindRailLayerAnimInstance_HandleBegunGrinding Parms{};

	Parms.bWasAlreadyGrinding = bWasAlreadyGrinding;
	Parms.bWasJumpingFromRail = bWasJumpingFromRail;
	Parms.bFromInteraction = bFromInteraction;
	Parms.PreviousPlayerLocation = std::move(PreviousPlayerLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.AddTemporaryMoveIgnoreActor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IgnoreDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::AddTemporaryMoveIgnoreActor(class ABuildingActor* BuildingActor, float IgnoreDuration)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddTemporaryMoveIgnoreActor");

	Params::FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor Parms{};

	Parms.BuildingActor = BuildingActor;
	Parms.IgnoreDuration = IgnoreDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.ApplyDamageToDevice
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::ApplyDamageToDevice(class ABuildingActor* BuildingActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyDamageToDevice");

	Params::FortMovementMode_ExtLogicGrinding_ApplyDamageToDevice Parms{};

	Parms.BuildingActor = BuildingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnApplyDamageToDevice
// (Final, Native, Private)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnApplyDamageToDevice(class ABuildingActor* BuildingActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnApplyDamageToDevice");

	Params::FortMovementMode_ExtLogicGrinding_EventCallback_OnApplyDamageToDevice Parms{};

	Parms.BuildingActor = BuildingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnBaseMeshReady
// (Final, Native, Private)
// Parameters:
// class AFortPlayerPawn*                  Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnBaseMeshReady(class AFortPlayerPawn* Pawn, class USkeletalMeshComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnBaseMeshReady");

	Params::FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady Parms{};

	Parms.Pawn = Pawn;
	Parms.MeshComponent = MeshComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnDismountPlayerRequested
// (Final, Native, Private)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnDismountPlayerRequested()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnDismountPlayerRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnEnergyCompletelyDrained
// (Final, Native, Private)
// Parameters:
// class UFortComponent_Energy*            EnergyComponentDrained                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnEnergyCompletelyDrained(class UFortComponent_Energy* EnergyComponentDrained)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnEnergyCompletelyDrained");

	Params::FortMovementMode_ExtLogicGrinding_EventCallback_OnEnergyCompletelyDrained Parms{};

	Parms.EnergyComponentDrained = EnergyComponentDrained;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnFeetLanded
// (Final, Native, Private)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnFeetLanded()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnFeetLanded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnGrindLostStructuralSupport
// (Final, Native, Private)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnGrindLostStructuralSupport()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnGrindLostStructuralSupport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnJumpInput
// (Final, Native, Private)
// Parameters:
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnJumpInput(bool bPressed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnJumpInput");

	Params::FortMovementMode_ExtLogicGrinding_EventCallback_OnJumpInput Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnPawnLanded
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnPawnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnPawnLanded");

	Params::FortMovementMode_ExtLogicGrinding_EventCallback_OnPawnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnReloadInput
// (Final, Native, Private)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnReloadInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnReloadInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnSprintInputPressed
// (Final, Native, Private)
// Parameters:
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnSprintInputPressed(bool bPressed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnSprintInputPressed");

	Params::FortMovementMode_ExtLogicGrinding_EventCallback_OnSprintInputPressed Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnTeleport
// (Final, Native, Private)
// Parameters:
// class AFortPawn*                        TeleportedPawn                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::EventCallback_OnTeleport(class AFortPawn* TeleportedPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnTeleport");

	Params::FortMovementMode_ExtLogicGrinding_EventCallback_OnTeleport Parms{};

	Parms.TeleportedPawn = TeleportedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.GameplayTagCallback_BlockSprinting
// (Final, Native, Private)
// Parameters:
// struct FGameplayTag                     tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::GameplayTagCallback_BlockSprinting(const struct FGameplayTag& tag, int32 NewCount)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GameplayTagCallback_BlockSprinting");

	Params::FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting Parms{};

	Parms.tag = std::move(tag);
	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.GameplayTagCallback_BlockSprintingAndHolstering
// (Final, Native, Private)
// Parameters:
// struct FGameplayTag                     tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::GameplayTagCallback_BlockSprintingAndHolstering(const struct FGameplayTag& tag, int32 NewCount)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GameplayTagCallback_BlockSprintingAndHolstering");

	Params::FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering Parms{};

	Parms.tag = std::move(tag);
	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.GetGrindInAirGameplayEffectClass
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGameplayEffect> UFortMovementMode_ExtLogicGrinding::GetGrindInAirGameplayEffectClass(const class AFortGrindRail* GrindRail)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGrindInAirGameplayEffectClass");

	Params::FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass Parms{};

	Parms.GrindRail = GrindRail;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnBoosterModeChange
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGrindRailBoosterMode                   OldBoosterMode                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGrindRailBoosterMode                   NewBoosterMode                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::HandleGameplayCuesOnBoosterModeChange(const class AFortGrindRail* GrindRail, const EGrindRailBoosterMode OldBoosterMode, const EGrindRailBoosterMode NewBoosterMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGameplayCuesOnBoosterModeChange");

	Params::FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange Parms{};

	Parms.GrindRail = GrindRail;
	Parms.OldBoosterMode = OldBoosterMode;
	Parms.NewBoosterMode = NewBoosterMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnFeetLanding
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::HandleGameplayCuesOnFeetLanding(const class AFortGrindRail* GrindRail)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGameplayCuesOnFeetLanding");

	Params::FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnFeetLanding Parms{};

	Parms.GrindRail = GrindRail;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnHit
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::HandleGameplayCuesOnHit(const class AFortGrindRail* GrindRail)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGameplayCuesOnHit");

	Params::FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnHit Parms{};

	Parms.GrindRail = GrindRail;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnRailJump
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsAnchorJumpActive                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::HandleGameplayCuesOnRailJump(bool bIsAnchorJumpActive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGameplayCuesOnRailJump");

	Params::FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnRailJump Parms{};

	Parms.bIsAnchorJumpActive = bIsAnchorJumpActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnSprinting
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWantsToGrindSprint                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::HandleGameplayCuesOnSprinting(const class AFortGrindRail* GrindRail, const bool bWantsToGrindSprint)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGameplayCuesOnSprinting");

	Params::FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting Parms{};

	Parms.GrindRail = GrindRail;
	Parms.bWantsToGrindSprint = bWantsToGrindSprint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayEffectsOnVehicleHit
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortAthenaVehicle*               AthenaVehicle                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::HandleGameplayEffectsOnVehicleHit(class AFortAthenaVehicle* AthenaVehicle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGameplayEffectsOnVehicleHit");

	Params::FortMovementMode_ExtLogicGrinding_HandleGameplayEffectsOnVehicleHit Parms{};

	Parms.AthenaVehicle = AthenaVehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGrindingBegun
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::HandleGrindingBegun(const class AFortGrindRail* GrindRail)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGrindingBegun");

	Params::FortMovementMode_ExtLogicGrinding_HandleGrindingBegun Parms{};

	Parms.GrindRail = GrindRail;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGrindingEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::HandleGrindingEnded(const class AFortGrindRail* GrindRail)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGrindingEnded");

	Params::FortMovementMode_ExtLogicGrinding_HandleGrindingEnded Parms{};

	Parms.GrindRail = GrindRail;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.IsDamageableDevice
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMovementMode_ExtLogicGrinding::IsDamageableDevice(class ABuildingActor* BuildingActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsDamageableDevice");

	Params::FortMovementMode_ExtLogicGrinding_IsDamageableDevice Parms{};

	Parms.BuildingActor = BuildingActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.IsThrowableItem
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMovementMode_ExtLogicGrinding::IsThrowableItem(class ABuildingActor* BuildingActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsThrowableItem");

	Params::FortMovementMode_ExtLogicGrinding_IsThrowableItem Parms{};

	Parms.BuildingActor = BuildingActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.OnIgnoredBuildingEndPlay
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::OnIgnoredBuildingEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnIgnoredBuildingEndPlay");

	Params::FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.DrawDebugHUD
// (Final, Native, Protected, Const)
// Parameters:
// class AHUD*                             HUD                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCanvas*                          Canvas                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::DrawDebugHUD(class AHUD* HUD, class UCanvas* Canvas) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DrawDebugHUD");

	Params::FortMovementMode_ExtLogicGrinding_DrawDebugHUD Parms{};

	Parms.HUD = HUD;
	Parms.Canvas = Canvas;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.GameplayTagCallback_CancelGrinding
// (Final, Native, Private, Const)
// Parameters:
// struct FGameplayTag                     tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicGrinding::GameplayTagCallback_CancelGrinding(const struct FGameplayTag& tag, int32 NewCount) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GameplayTagCallback_CancelGrinding");

	Params::FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding Parms{};

	Parms.tag = std::move(tag);
	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_HandleGameplayEffectsOnPlayerJumpOff
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          PlayerPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindingProvider::BP_HandleGameplayEffectsOnPlayerJumpOff(const struct FVector& PlayerPosition)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_HandleGameplayEffectsOnPlayerJumpOff");

	Params::FortPawnComponent_GrindingProvider_BP_HandleGameplayEffectsOnPlayerJumpOff Parms{};

	Parms.PlayerPosition = std::move(PlayerPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_HandleGrindStartRequestData
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PawnLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LastUpdateVelocity                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsGrinding                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStartedFromLand                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentSpeedAlongSpline                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CurrentDirection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGrindingRequestCalculationData  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGrindingRequestCalculationData UFortPawnComponent_GrindingProvider::BP_HandleGrindStartRequestData(class AFortGrindRail* GrindRail, const struct FVector& PawnLocation, float StartDistance, const struct FVector& LastUpdateVelocity, bool bIsGrinding, bool bStartedFromLand, float CurrentSpeedAlongSpline, const struct FVector& CurrentDirection)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_HandleGrindStartRequestData");

	Params::FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData Parms{};

	Parms.GrindRail = GrindRail;
	Parms.PawnLocation = std::move(PawnLocation);
	Parms.StartDistance = StartDistance;
	Parms.LastUpdateVelocity = std::move(LastUpdateVelocity);
	Parms.bIsGrinding = bIsGrinding;
	Parms.bStartedFromLand = bStartedFromLand;
	Parms.CurrentSpeedAlongSpline = CurrentSpeedAlongSpline;
	Parms.CurrentDirection = std::move(CurrentDirection);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_OnADSPressed
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UFortPawnComponent_GrindingProvider::BP_OnADSPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnADSPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_OnADSReleased
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UFortPawnComponent_GrindingProvider::BP_OnADSReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnADSReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_OnApplyDamageToDevice
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindingProvider::BP_OnApplyDamageToDevice(class ABuildingActor* BuildingActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnApplyDamageToDevice");

	Params::FortPawnComponent_GrindingProvider_BP_OnApplyDamageToDevice Parms{};

	Parms.BuildingActor = BuildingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_OnDismount
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UFortPawnComponent_GrindingProvider::BP_OnDismount()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDismount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_OnFeetLanded
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UFortPawnComponent_GrindingProvider::BP_OnFeetLanded()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnFeetLanded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.Broadcast_ADSPressedEvent
// (Final, Native, Protected, BlueprintCallable)

void UFortPawnComponent_GrindingProvider::Broadcast_ADSPressedEvent()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Broadcast_ADSPressedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.Broadcast_ADSReleasedEvent
// (Final, Native, Protected, BlueprintCallable)

void UFortPawnComponent_GrindingProvider::Broadcast_ADSReleasedEvent()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Broadcast_ADSReleasedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.Broadcast_ApplyDamageToBuildingActorEvent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindingProvider::Broadcast_ApplyDamageToBuildingActorEvent(class ABuildingActor* BuildingActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Broadcast_ApplyDamageToBuildingActorEvent");

	Params::FortPawnComponent_GrindingProvider_Broadcast_ApplyDamageToBuildingActorEvent Parms{};

	Parms.BuildingActor = BuildingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.Broadcast_DismountPlayerEvent
// (Final, Native, Protected, BlueprintCallable)

void UFortPawnComponent_GrindingProvider::Broadcast_DismountPlayerEvent()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Broadcast_DismountPlayerEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.Broadcast_FeetLandedEvent
// (Final, Native, Protected, BlueprintCallable)

void UFortPawnComponent_GrindingProvider::Broadcast_FeetLandedEvent()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Broadcast_FeetLandedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.EventCallback_OnEndedGrinding
// (Final, Native, Private)

void UFortPawnComponent_GrindingProvider::EventCallback_OnEndedGrinding()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnEndedGrinding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.OnMovementModeChanged
// (Final, Native, Private)
// Parameters:
// class ACharacter*                       InCharacter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindingProvider::OnMovementModeChanged(class ACharacter* InCharacter, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMovementModeChanged");

	Params::FortPawnComponent_GrindingProvider_OnMovementModeChanged Parms{};

	Parms.InCharacter = InCharacter;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.OnPawnLandedCallback
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindingProvider::OnPawnLandedCallback(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPawnLandedCallback");

	Params::FortPawnComponent_GrindingProvider_OnPawnLandedCallback Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.OnWalkingBaseChanged
// (Final, Native, Private)
// Parameters:
// class AFortPawn*                        Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewBase                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindingProvider::OnWalkingBaseChanged(class AFortPawn* Pawn, class AActor* NewBase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnWalkingBaseChanged");

	Params::FortPawnComponent_GrindingProvider_OnWalkingBaseChanged Parms{};

	Parms.Pawn = Pawn;
	Parms.NewBase = NewBase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.RequestGrindingOnRail
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OptionalStartDistance                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromInteraction                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindingProvider::RequestGrindingOnRail(class AFortGrindRail* GrindRail, float OptionalStartDistance, bool bFromInteraction)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestGrindingOnRail");

	Params::FortPawnComponent_GrindingProvider_RequestGrindingOnRail Parms{};

	Parms.GrindRail = GrindRail;
	Parms.OptionalStartDistance = OptionalStartDistance;
	Parms.bFromInteraction = bFromInteraction;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_CanBeginGrinding
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindingProvider::BP_CanBeginGrinding() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_CanBeginGrinding");

	Params::FortPawnComponent_GrindingProvider_BP_CanBeginGrinding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.GetCurrentBoosterMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGrindRailBoosterMode                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGrindRailBoosterMode UFortPawnComponent_GrindingProvider::GetCurrentBoosterMode() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentBoosterMode");

	Params::FortPawnComponent_GrindingProvider_GetCurrentBoosterMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.GetCurrentGrindingRailActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AFortGrindRail*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFortGrindRail* UFortPawnComponent_GrindingProvider::GetCurrentGrindingRailActor() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentGrindingRailActor");

	Params::FortPawnComponent_GrindingProvider_GetCurrentGrindingRailActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.GetStartedGrindingFromLand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindingProvider::GetStartedGrindingFromLand() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStartedGrindingFromLand");

	Params::FortPawnComponent_GrindingProvider_GetStartedGrindingFromLand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.GetWantsToGrind
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindingProvider::GetWantsToGrind() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetWantsToGrind");

	Params::FortPawnComponent_GrindingProvider_GetWantsToGrind Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.IsGrinding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindingProvider::IsGrinding() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsGrinding");

	Params::FortPawnComponent_GrindingProvider_IsGrinding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.IsGrindingDisabledForPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindingProvider::IsGrindingDisabledForPlayers() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsGrindingDisabledForPlayers");

	Params::FortPawnComponent_GrindingProvider_IsGrindingDisabledForPlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.IsSprinting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindingProvider::IsSprinting() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsSprinting");

	Params::FortPawnComponent_GrindingProvider_IsSprinting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.IsUsingOriginalGrinding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindingProvider::IsUsingOriginalGrinding() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsUsingOriginalGrinding");

	Params::FortPawnComponent_GrindingProvider_IsUsingOriginalGrinding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.StructurallySupportedSplineComponent.Multicast_OnStructuralSupportDied
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UStructurallySupportedSplineComponent::Multicast_OnStructuralSupportDied()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Multicast_OnStructuralSupportDied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.StructurallySupportedSplineComponent.OnDestroyFromStructuralSupport
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           SupportActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStructurallySupportedSplineComponent::OnDestroyFromStructuralSupport(class AActor* SupportActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDestroyFromStructuralSupport");

	Params::StructurallySupportedSplineComponent_OnDestroyFromStructuralSupport Parms{};

	Parms.SupportActor = SupportActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.StructurallySupportedSplineComponent.OnStructuralSupportDied
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStructurallySupportedSplineComponent::OnStructuralSupportDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnStructuralSupportDied");

	Params::StructurallySupportedSplineComponent_OnStructuralSupportDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGameplayCueNotifyLoop_Grinding.CacheReferences
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAudioComponent*                  InAudioComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFXSystemComponent*               InEffectsComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerPawn*                  InPlayerPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortPawnComponent_GrindingProvider*InGrindingProvider                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortGameplayCueNotifyLoop_Grinding::CacheReferences(class UAudioComponent* InAudioComponent, class UFXSystemComponent* InEffectsComponent, class AFortPlayerPawn* InPlayerPawn, class UFortPawnComponent_GrindingProvider* InGrindingProvider)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CacheReferences");

	Params::FortGameplayCueNotifyLoop_Grinding_CacheReferences Parms{};

	Parms.InAudioComponent = InAudioComponent;
	Parms.InEffectsComponent = InEffectsComponent;
	Parms.InPlayerPawn = InPlayerPawn;
	Parms.InGrindingProvider = InGrindingProvider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortGameplayCueNotifyLoop_Grinding.OnForwardChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bNewState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortGameplayCueNotifyLoop_Grinding::OnForwardChanged(bool bNewState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnForwardChanged");

	Params::FortGameplayCueNotifyLoop_Grinding_OnForwardChanged Parms{};

	Parms.bNewState = bNewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.AddMoveIgnoreActor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::AddMoveIgnoreActor(class ABuildingActor* BuildingActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddMoveIgnoreActor");

	Params::FortPawnComponent_GrindRail_AddMoveIgnoreActor Parms{};

	Parms.BuildingActor = BuildingActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.AddTemporaryMoveIgnoreActor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IgnoreDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::AddTemporaryMoveIgnoreActor(class ABuildingActor* BuildingActor, float IgnoreDuration)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddTemporaryMoveIgnoreActor");

	Params::FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor Parms{};

	Parms.BuildingActor = BuildingActor;
	Parms.IgnoreDuration = IgnoreDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.AttemptDestroyVehicleWhileGrinding
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AFortAthenaVehicle*               Vehicle                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::AttemptDestroyVehicleWhileGrinding(class AFortAthenaVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AttemptDestroyVehicleWhileGrinding");

	Params::FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding Parms{};

	Parms.Vehicle = Vehicle;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.BeginGrinding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OptionalStartDistance                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromInteraction                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::BeginGrinding(class AFortGrindRail* GrindRail, const float OptionalStartDistance, const bool bFromInteraction)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BeginGrinding");

	Params::FortPawnComponent_GrindRail_BeginGrinding Parms{};

	Parms.GrindRail = GrindRail;
	Parms.OptionalStartDistance = OptionalStartDistance;
	Parms.bFromInteraction = bFromInteraction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.CalculateVelocity
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReplayingMovement                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::CalculateVelocity(const float DeltaTime, const bool bReplayingMovement, struct FVector* OutVelocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CalculateVelocity");

	Params::FortPawnComponent_GrindRail_CalculateVelocity Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.bReplayingMovement = bReplayingMovement;

	UObject::ProcessEvent(Func, &Parms);

	if (OutVelocity != nullptr)
		*OutVelocity = std::move(Parms.OutVelocity);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.CanBeginGrinding
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::CanBeginGrinding()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanBeginGrinding");

	Params::FortPawnComponent_GrindRail_CanBeginGrinding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.EndGrinding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSetEndMovementMode                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::EndGrinding(const bool bSetEndMovementMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EndGrinding");

	Params::FortPawnComponent_GrindRail_EndGrinding Parms{};

	Parms.bSetEndMovementMode = bSetEndMovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.EventCallback_OnBaseMeshReady
// (Final, Native, Private)
// Parameters:
// class AFortPlayerPawn*                  Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::EventCallback_OnBaseMeshReady(class AFortPlayerPawn* Pawn, class USkeletalMeshComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnBaseMeshReady");

	Params::FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady Parms{};

	Parms.Pawn = Pawn;
	Parms.MeshComponent = MeshComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.EventCallback_OnSprintInput
// (Final, Native, Private)
// Parameters:
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::EventCallback_OnSprintInput(bool bPressed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EventCallback_OnSprintInput");

	Params::FortPawnComponent_GrindRail_EventCallback_OnSprintInput Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleGrindFinishedAfterJumping
// (Event, Public, BlueprintEvent)

void UFortPawnComponent_GrindRail::HandleGrindFinishedAfterJumping()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGrindFinishedAfterJumping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleGrindingBegun
// (Event, Public, BlueprintEvent)

void UFortPawnComponent_GrindRail::HandleGrindingBegun()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGrindingBegun");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleGrindingEnded
// (Event, Public, BlueprintEvent)

void UFortPawnComponent_GrindRail::HandleGrindingEnded()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGrindingEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleGrindingEndedFromReplication
// (Event, Public, BlueprintEvent)

void UFortPawnComponent_GrindRail::HandleGrindingEndedFromReplication()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGrindingEndedFromReplication");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleHitWhenGrinding
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::HandleHitWhenGrinding(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleHitWhenGrinding");

	Params::FortPawnComponent_GrindRail_HandleHitWhenGrinding Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleJumpOffEnd
// (Event, Public, BlueprintEvent)

void UFortPawnComponent_GrindRail::HandleJumpOffEnd()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleJumpOffEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleRailJump
// (Event, Public, BlueprintEvent)

void UFortPawnComponent_GrindRail::HandleRailJump()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRailJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleSprintInput
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::HandleSprintInput(bool bPressed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleSprintInput");

	Params::FortPawnComponent_GrindRail_HandleSprintInput Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnBaseMeshReady
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::OnBaseMeshReady(class AFortPlayerPawn* Pawn, class USkeletalMeshComponent* MeshComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBaseMeshReady");

	Params::FortPawnComponent_GrindRail_OnBaseMeshReady Parms{};

	Parms.Pawn = Pawn;
	Parms.MeshComponent = MeshComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnGrindLostStructuralSupport
// (Final, Native, Private)

void UFortPawnComponent_GrindRail::OnGrindLostStructuralSupport()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnGrindLostStructuralSupport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnIgnoredBuildingEndPlay
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::OnIgnoredBuildingEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnIgnoredBuildingEndPlay");

	Params::FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnJumpInput
// (Final, Native, Protected)
// Parameters:
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::OnJumpInput(bool bPressed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnJumpInput");

	Params::FortPawnComponent_GrindRail_OnJumpInput Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnMovementModeChanged
// (Final, Native, Protected)
// Parameters:
// class ACharacter*                       InCharacter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::OnMovementModeChanged(class ACharacter* InCharacter, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMovementModeChanged");

	Params::FortPawnComponent_GrindRail_OnMovementModeChanged Parms{};

	Parms.InCharacter = InCharacter;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnReloadInput
// (Final, Native, Protected)

void UFortPawnComponent_GrindRail::OnReloadInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnReloadInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnRep_CurrentBoosterMode
// (Final, Native, Protected)
// Parameters:
// EGrindRailBoosterMode                   PreviousBoosterMode                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::OnRep_CurrentBoosterMode(const EGrindRailBoosterMode PreviousBoosterMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_CurrentBoosterMode");

	Params::FortPawnComponent_GrindRail_OnRep_CurrentBoosterMode Parms{};

	Parms.PreviousBoosterMode = PreviousBoosterMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnRep_GrindingRail
// (Final, Native, Protected)

void UFortPawnComponent_GrindRail::OnRep_GrindingRail()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_GrindingRail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnRep_IsSprinting
// (Final, Native, Protected)

void UFortPawnComponent_GrindRail::OnRep_IsSprinting()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_IsSprinting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.RemoveMoveIgnoreActors
// (Final, Native, Protected, BlueprintCallable)

void UFortPawnComponent_GrindRail::RemoveMoveIgnoreActors()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveMoveIgnoreActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.ServerBeginGrinding
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// class AFortGrindRail*                   GrindRail                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OptionalStartDistance                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromInteraction                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::ServerBeginGrinding(class AFortGrindRail* GrindRail, const float OptionalStartDistance, const bool bFromInteraction)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerBeginGrinding");

	Params::FortPawnComponent_GrindRail_ServerBeginGrinding Parms{};

	Parms.GrindRail = GrindRail;
	Parms.OptionalStartDistance = OptionalStartDistance;
	Parms.bFromInteraction = bFromInteraction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.ServerUpdateWeaponHolstered
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bNewHolstered                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayEquipAnim                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::ServerUpdateWeaponHolstered(const bool bNewHolstered, const bool bPlayEquipAnim)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerUpdateWeaponHolstered");

	Params::FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered Parms{};

	Parms.bNewHolstered = bNewHolstered;
	Parms.bPlayEquipAnim = bPlayEquipAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.SetGrindBaseActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewBaseActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::SetGrindBaseActor(class AActor* NewBaseActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGrindBaseActor");

	Params::FortPawnComponent_GrindRail_SetGrindBaseActor Parms{};

	Parms.NewBaseActor = NewBaseActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.SetGrindDistanceOnSpline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewDistanceOnSpline                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::SetGrindDistanceOnSpline(const float NewDistanceOnSpline)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGrindDistanceOnSpline");

	Params::FortPawnComponent_GrindRail_SetGrindDistanceOnSpline Parms{};

	Parms.NewDistanceOnSpline = NewDistanceOnSpline;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.SetIsSprinting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSprinting                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::SetIsSprinting(const bool bNewIsSprinting)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetIsSprinting");

	Params::FortPawnComponent_GrindRail_SetIsSprinting Parms{};

	Parms.bNewIsSprinting = bNewIsSprinting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.SetMovementStatus
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewStatus                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::SetMovementStatus(const struct FVector& NewStatus)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMovementStatus");

	Params::FortPawnComponent_GrindRail_SetMovementStatus Parms{};

	Parms.NewStatus = std::move(NewStatus);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.DrawDebugHUD
// (Final, Native, Protected, Const)
// Parameters:
// class AHUD*                             HUD                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCanvas*                          Canvas                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::DrawDebugHUD(class AHUD* HUD, class UCanvas* Canvas) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DrawDebugHUD");

	Params::FortPawnComponent_GrindRail_DrawDebugHUD Parms{};

	Parms.HUD = HUD;
	Parms.Canvas = Canvas;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetCameraOrientedLeanValues
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   RawLeanForward                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RawLeanRight                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OrientedLeanForward                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OrientedLeanRight                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_GrindRail::GetCameraOrientedLeanValues(const float RawLeanForward, const float RawLeanRight, float* OrientedLeanForward, float* OrientedLeanRight) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCameraOrientedLeanValues");

	Params::FortPawnComponent_GrindRail_GetCameraOrientedLeanValues Parms{};

	Parms.RawLeanForward = RawLeanForward;
	Parms.RawLeanRight = RawLeanRight;

	UObject::ProcessEvent(Func, &Parms);

	if (OrientedLeanForward != nullptr)
		*OrientedLeanForward = Parms.OrientedLeanForward;

	if (OrientedLeanRight != nullptr)
		*OrientedLeanRight = Parms.OrientedLeanRight;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetCurrentGrindingRailActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AFortGrindRail*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFortGrindRail* UFortPawnComponent_GrindRail::GetCurrentGrindingRailActor() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentGrindingRailActor");

	Params::FortPawnComponent_GrindRail_GetCurrentGrindingRailActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetGrindBaseActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UFortPawnComponent_GrindRail::GetGrindBaseActor() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGrindBaseActor");

	Params::FortPawnComponent_GrindRail_GetGrindBaseActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetGrindDistanceOnSpline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortPawnComponent_GrindRail::GetGrindDistanceOnSpline() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGrindDistanceOnSpline");

	Params::FortPawnComponent_GrindRail_GetGrindDistanceOnSpline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetGrindRequestJump
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::GetGrindRequestJump() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGrindRequestJump");

	Params::FortPawnComponent_GrindRail_GetGrindRequestJump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetHorizontalSplineAngleDeltaDegrees
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortPawnComponent_GrindRail::GetHorizontalSplineAngleDeltaDegrees() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetHorizontalSplineAngleDeltaDegrees");

	Params::FortPawnComponent_GrindRail_GetHorizontalSplineAngleDeltaDegrees Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetLeanForwardSpeedNormalized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortPawnComponent_GrindRail::GetLeanForwardSpeedNormalized() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLeanForwardSpeedNormalized");

	Params::FortPawnComponent_GrindRail_GetLeanForwardSpeedNormalized Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetMovementStatus
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UFortPawnComponent_GrindRail::GetMovementStatus() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMovementStatus");

	Params::FortPawnComponent_GrindRail_GetMovementStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetSpeedHardCap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortPawnComponent_GrindRail::GetSpeedHardCap() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSpeedHardCap");

	Params::FortPawnComponent_GrindRail_GetSpeedHardCap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetWantsToGrind
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::GetWantsToGrind() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetWantsToGrind");

	Params::FortPawnComponent_GrindRail_GetWantsToGrind Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsGrinding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::IsGrinding() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsGrinding");

	Params::FortPawnComponent_GrindRail_IsGrinding Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsOriginalGrindingSupported
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::IsOriginalGrindingSupported() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsOriginalGrindingSupported");

	Params::FortPawnComponent_GrindRail_IsOriginalGrindingSupported Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsUsingFirstPersonCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::IsUsingFirstPersonCamera() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsUsingFirstPersonCamera");

	Params::FortPawnComponent_GrindRail_IsUsingFirstPersonCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsUsingToggleSprint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::IsUsingToggleSprint() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsUsingToggleSprint");

	Params::FortPawnComponent_GrindRail_IsUsingToggleSprint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsWeaponActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::IsWeaponActive() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsWeaponActive");

	Params::FortPawnComponent_GrindRail_IsWeaponActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsWeaponADS
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::IsWeaponADS() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsWeaponADS");

	Params::FortPawnComponent_GrindRail_IsWeaponADS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GrindRailRuntime.FortPawnComponent_GrindRail.NativeIsShooting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortPawnComponent_GrindRail::NativeIsShooting() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NativeIsShooting");

	Params::FortPawnComponent_GrindRail_NativeIsShooting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

