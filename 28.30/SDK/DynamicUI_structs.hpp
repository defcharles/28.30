#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicUI

#include "Basic.hpp"


namespace SDK
{

// Enum DynamicUI.EDynamicUIStrength
// NumValues: 0x0004
enum class EDynamicUIStrength : uint8
{
	Weak                                     = 0,
	Medium                                   = 1,
	Strong                                   = 2,
	Required                                 = 3,
};

// Enum DynamicUI.EDynamicUIAnchor
// NumValues: 0x000A
enum class EDynamicUIAnchor : uint32
{
	TopLeft                                  = 0,
	TopCenter                                = 1,
	TopRight                                 = 2,
	CenterLeft                               = 3,
	CenterCenter                             = 4,
	CenterRight                              = 5,
	BottomLeft                               = 6,
	BottomCenter                             = 7,
	BottomRight                              = 8,
	MAX                                      = 9,
};

// Enum DynamicUI.EDynamicUIAspectRatioType
// NumValues: 0x0007
enum class EDynamicUIAspectRatioType : uint32
{
	AspectRatio_1_1                          = 0,
	AspectRatio_4_3                          = 1,
	AspectRatio_5_4                          = 2,
	AspectRatio_16_9                         = 3,
	AspectRatio_16_10                        = 4,
	AspectRatio_21_9                         = 5,
	Custom                                   = 6,
};

// Enum DynamicUI.EDynamicUISizeMatch
// NumValues: 0x0003
enum class EDynamicUISizeMatch : uint32
{
	Both                                     = 0,
	Width                                    = 1,
	Height                                   = 2,
};

// Enum DynamicUI.EDynamicUIZOrder
// NumValues: 0x0008
enum class EDynamicUIZOrder : uint32
{
	Back                                     = 1000,
	Middle                                   = 2000,
	Front                                    = 3000,
	Custom                                   = 2500,
	CustomMin                                = 0,
	CustomMax                                = 5000,
	Loading                                  = 30000,
	Top                                      = 50000,
};

// Enum DynamicUI.EDynamicUIUnallowedBehavior
// NumValues: 0x0003
enum class EDynamicUIUnallowedBehavior : uint32
{
	Hide                                     = 0,
	Collapse                                 = 1,
	Destroy                                  = 2,
};

// Enum DynamicUI.EDynamicUIDebugDisplayMode
// NumValues: 0x0003
enum class EDynamicUIDebugDisplayMode : uint8
{
	Hide                                     = 0,
	ShowSelected                             = 1,
	ShowAll                                  = 2,
};

// Enum DynamicUI.EDynamicUIUnallowLayerComparison
// NumValues: 0x0006
enum class EDynamicUIUnallowLayerComparison : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	Less                                     = 2,
	LessOrEqual                              = 3,
	Greater                                  = 4,
	GreaterOrEqual                           = 5,
};

// ScriptStruct DynamicUI.DynamicUIUnallowed
// 0x0030 (0x0030 - 0x0000)
struct FDynamicUIUnallowed final
{
public:
	TSoftClassPtr<class UClass>                   Widget;                                            // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueID;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDynamicUIUnallowedBehavior                   Behavior;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTargetAll : 1;                                    // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseUniqueID : 1;                                  // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicUIUnallowed) == 0x000008, "Wrong alignment on FDynamicUIUnallowed");
static_assert(sizeof(FDynamicUIUnallowed) == 0x000030, "Wrong size on FDynamicUIUnallowed");
static_assert(offsetof(FDynamicUIUnallowed, Widget) == 0x000000, "Member 'FDynamicUIUnallowed::Widget' has a wrong offset!");
static_assert(offsetof(FDynamicUIUnallowed, UniqueID) == 0x000020, "Member 'FDynamicUIUnallowed::UniqueID' has a wrong offset!");
static_assert(offsetof(FDynamicUIUnallowed, Behavior) == 0x000024, "Member 'FDynamicUIUnallowed::Behavior' has a wrong offset!");

// ScriptStruct DynamicUI.DynamicUIManagerDebug
// 0x0001 (0x0001 - 0x0000)
struct FDynamicUIManagerDebug final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicUIManagerDebug) == 0x000001, "Wrong alignment on FDynamicUIManagerDebug");
static_assert(sizeof(FDynamicUIManagerDebug) == 0x000001, "Wrong size on FDynamicUIManagerDebug");

// ScriptStruct DynamicUI.DynamicUIPanelDebug
// 0x0001 (0x0001 - 0x0000)
struct FDynamicUIPanelDebug final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicUIPanelDebug) == 0x000001, "Wrong alignment on FDynamicUIPanelDebug");
static_assert(sizeof(FDynamicUIPanelDebug) == 0x000001, "Wrong size on FDynamicUIPanelDebug");

// ScriptStruct DynamicUI.DynamicUIWidgetTarget
// 0x0060 (0x0060 - 0x0000)
struct FDynamicUIWidgetTarget final
{
public:
	class FName                                   WidgetPath;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0008(0x0020)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueID;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseUniqueID : 1;                                  // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D[0x33];                                      // 0x002D(0x0033)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicUIWidgetTarget) == 0x000008, "Wrong alignment on FDynamicUIWidgetTarget");
static_assert(sizeof(FDynamicUIWidgetTarget) == 0x000060, "Wrong size on FDynamicUIWidgetTarget");
static_assert(offsetof(FDynamicUIWidgetTarget, WidgetPath) == 0x000000, "Member 'FDynamicUIWidgetTarget::WidgetPath' has a wrong offset!");
static_assert(offsetof(FDynamicUIWidgetTarget, WidgetClass) == 0x000008, "Member 'FDynamicUIWidgetTarget::WidgetClass' has a wrong offset!");
static_assert(offsetof(FDynamicUIWidgetTarget, UniqueID) == 0x000028, "Member 'FDynamicUIWidgetTarget::UniqueID' has a wrong offset!");

// ScriptStruct DynamicUI.DynamicUIAdjust
// 0x0070 (0x0070 - 0x0000)
struct FDynamicUIAdjust final
{
public:
	struct FDynamicUIWidgetTarget                 TargetWidget;                                      // 0x0000(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UDynamicUIConstraintBase*               LayoutConstraint;                                  // 0x0060(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicUISizeBase*                     SizeModifier;                                      // 0x0068(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicUIAdjust) == 0x000008, "Wrong alignment on FDynamicUIAdjust");
static_assert(sizeof(FDynamicUIAdjust) == 0x000070, "Wrong size on FDynamicUIAdjust");
static_assert(offsetof(FDynamicUIAdjust, TargetWidget) == 0x000000, "Member 'FDynamicUIAdjust::TargetWidget' has a wrong offset!");
static_assert(offsetof(FDynamicUIAdjust, LayoutConstraint) == 0x000060, "Member 'FDynamicUIAdjust::LayoutConstraint' has a wrong offset!");
static_assert(offsetof(FDynamicUIAdjust, SizeModifier) == 0x000068, "Member 'FDynamicUIAdjust::SizeModifier' has a wrong offset!");

// ScriptStruct DynamicUI.DynamicUIAllowed
// 0x0068 (0x0068 - 0x0000)
struct FDynamicUIAllowed final
{
public:
	TSoftClassPtr<class UClass>                   Widget;                                            // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDynamicUIZOrder                              ZOrder;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomZOrder;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueID;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCommonInputActionDomain> ActionDomain;                                      // 0x0030(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicUIConstraintBase*               LayoutConstraint;                                  // 0x0050(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicUISizeBase*                     SizeModifier;                                      // 0x0058(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LayerIDOverride;                                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsUnique : 1;                                     // 0x0061(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseActionDomain : 1;                              // 0x0061(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseLayerOverride : 1;                             // 0x0061(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicUIAllowed) == 0x000008, "Wrong alignment on FDynamicUIAllowed");
static_assert(sizeof(FDynamicUIAllowed) == 0x000068, "Wrong size on FDynamicUIAllowed");
static_assert(offsetof(FDynamicUIAllowed, Widget) == 0x000000, "Member 'FDynamicUIAllowed::Widget' has a wrong offset!");
static_assert(offsetof(FDynamicUIAllowed, ZOrder) == 0x000020, "Member 'FDynamicUIAllowed::ZOrder' has a wrong offset!");
static_assert(offsetof(FDynamicUIAllowed, CustomZOrder) == 0x000024, "Member 'FDynamicUIAllowed::CustomZOrder' has a wrong offset!");
static_assert(offsetof(FDynamicUIAllowed, UniqueID) == 0x000028, "Member 'FDynamicUIAllowed::UniqueID' has a wrong offset!");
static_assert(offsetof(FDynamicUIAllowed, ActionDomain) == 0x000030, "Member 'FDynamicUIAllowed::ActionDomain' has a wrong offset!");
static_assert(offsetof(FDynamicUIAllowed, LayoutConstraint) == 0x000050, "Member 'FDynamicUIAllowed::LayoutConstraint' has a wrong offset!");
static_assert(offsetof(FDynamicUIAllowed, SizeModifier) == 0x000058, "Member 'FDynamicUIAllowed::SizeModifier' has a wrong offset!");
static_assert(offsetof(FDynamicUIAllowed, LayerIDOverride) == 0x000060, "Member 'FDynamicUIAllowed::LayerIDOverride' has a wrong offset!");

// ScriptStruct DynamicUI.DynamicUIAspectRatio
// 0x0008 (0x0008 - 0x0000)
struct FDynamicUIAspectRatio final
{
public:
	EDynamicUIAspectRatioType                     AspectRatio;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomAspectRatio;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicUIAspectRatio) == 0x000004, "Wrong alignment on FDynamicUIAspectRatio");
static_assert(sizeof(FDynamicUIAspectRatio) == 0x000008, "Wrong size on FDynamicUIAspectRatio");
static_assert(offsetof(FDynamicUIAspectRatio, AspectRatio) == 0x000000, "Member 'FDynamicUIAspectRatio::AspectRatio' has a wrong offset!");
static_assert(offsetof(FDynamicUIAspectRatio, CustomAspectRatio) == 0x000004, "Member 'FDynamicUIAspectRatio::CustomAspectRatio' has a wrong offset!");

// ScriptStruct DynamicUI.DynamicUIPreload
// 0x0020 (0x0020 - 0x0000)
struct FDynamicUIPreload final
{
public:
	TSoftClassPtr<class UClass>                   Widget;                                            // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicUIPreload) == 0x000008, "Wrong alignment on FDynamicUIPreload");
static_assert(sizeof(FDynamicUIPreload) == 0x000020, "Wrong size on FDynamicUIPreload");
static_assert(offsetof(FDynamicUIPreload, Widget) == 0x000000, "Member 'FDynamicUIPreload::Widget' has a wrong offset!");

// ScriptStruct DynamicUI.DynamicUISceneData
// 0x0001 (0x0001 - 0x0000)
struct FDynamicUISceneData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicUISceneData) == 0x000001, "Wrong alignment on FDynamicUISceneData");
static_assert(sizeof(FDynamicUISceneData) == 0x000001, "Wrong size on FDynamicUISceneData");

// ScriptStruct DynamicUI.DynamicUIDirectorData
// 0x0030 (0x0030 - 0x0000)
struct FDynamicUIDirectorData final
{
public:
	TSoftClassPtr<class UClass>                   DirectorClass;                                     // 0x0000(0x0020)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Instance;                                          // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicUIDirectorData) == 0x000008, "Wrong alignment on FDynamicUIDirectorData");
static_assert(sizeof(FDynamicUIDirectorData) == 0x000030, "Wrong size on FDynamicUIDirectorData");
static_assert(offsetof(FDynamicUIDirectorData, DirectorClass) == 0x000000, "Member 'FDynamicUIDirectorData::DirectorClass' has a wrong offset!");
static_assert(offsetof(FDynamicUIDirectorData, Instance) == 0x000020, "Member 'FDynamicUIDirectorData::Instance' has a wrong offset!");

// ScriptStruct DynamicUI.DynamicUIPlayerData
// 0x0090 (0x0090 - 0x0000)
struct FDynamicUIPlayerData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FDynamicUIDirectorData> ActiveDirectors;                                   // 0x0040(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicUIPlayerData) == 0x000008, "Wrong alignment on FDynamicUIPlayerData");
static_assert(sizeof(FDynamicUIPlayerData) == 0x000090, "Wrong size on FDynamicUIPlayerData");
static_assert(offsetof(FDynamicUIPlayerData, ActiveDirectors) == 0x000040, "Member 'FDynamicUIPlayerData::ActiveDirectors' has a wrong offset!");

}

