#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LinedNotebookGameplayRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class LinedNotebookGameplayRuntime.LinedNotebookItemLayerAnimInstance
// 0x0140 (0x0830 - 0x06F0)
class ULinedNotebookItemLayerAnimInstance final : public UFortItemLayerAnimInstance
{
public:
	struct FGameplayTag                           IsInAirAttackTag;                                  // 0x06F0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IsDoubleJumpingTag;                                // 0x06F4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IsSurfaceSwimmingTag;                              // 0x06F8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IsRidingMotorcycleTag;                             // 0x06FC(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IsGrindRailTag;                                    // 0x0700(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_704[0x4];                                      // 0x0704(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      DoubleJumpSequenceForward;                         // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      DoubleJumpSequenceBackward;                        // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      DoubleJumpSequenceLeft;                            // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      DoubleJumpSequenceRight;                           // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      EvergreenMotorcyclePose;                           // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      EvergreenSlidingPose;                              // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      EvergreenGrindRailPose;                            // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      TacSprintHandPose;                                 // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            DashMontage;                                       // 0x0748(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            DeltaEquipMontage;                                 // 0x0768(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    SwingMontages;                                     // 0x0788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FAlphaBlendArgs                        DeltaEquipBlendOut;                                // 0x0798(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseOceanRiverTacSprint;                           // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDeltaTacSprint;                                // 0x07A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDelta;                                          // 0x07AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7AB[0x5];                                      // 0x07AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      DoubleJumpSequence;                                // 0x07B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      EvergreenPose;                                     // 0x07B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x07C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawAdjusted;                                       // 0x07C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pitch;                                             // 0x07C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlpha;                                     // 0x07CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaDoorBashRightArmAlpha;                        // 0x07D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsDoubleJumping : 1;                              // 0x07D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDoubleJumpStart : 1;                            // 0x07D4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDashLoop : 1;                                   // 0x07D4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsNoDashOrDoubleJump : 1;                         // 0x07D4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsExitDoubleJump : 1;                             // 0x07D4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDeltaWaterJump : 1;                             // 0x07D4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsWaterLanding : 1;                               // 0x07D4(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsNotDeltaSwimJump : 1;                           // 0x07D4(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsEvergreenUB : 1;                                // 0x07D5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsOceanRiverTacSprint : 1;                        // 0x07D5(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDeltaTacSprint : 1;                             // 0x07D5(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsParachuting : 1;                                // 0x07D5(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDolphinDoubleJump : 1;                          // 0x07D5(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_7D6[0x5A];                                     // 0x07D6(0x005A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinedNotebookItemLayerAnimInstance">();
	}
	static class ULinedNotebookItemLayerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinedNotebookItemLayerAnimInstance>();
	}
};
static_assert(alignof(ULinedNotebookItemLayerAnimInstance) == 0x000010, "Wrong alignment on ULinedNotebookItemLayerAnimInstance");
static_assert(sizeof(ULinedNotebookItemLayerAnimInstance) == 0x000830, "Wrong size on ULinedNotebookItemLayerAnimInstance");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, IsInAirAttackTag) == 0x0006F0, "Member 'ULinedNotebookItemLayerAnimInstance::IsInAirAttackTag' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, IsDoubleJumpingTag) == 0x0006F4, "Member 'ULinedNotebookItemLayerAnimInstance::IsDoubleJumpingTag' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, IsSurfaceSwimmingTag) == 0x0006F8, "Member 'ULinedNotebookItemLayerAnimInstance::IsSurfaceSwimmingTag' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, IsRidingMotorcycleTag) == 0x0006FC, "Member 'ULinedNotebookItemLayerAnimInstance::IsRidingMotorcycleTag' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, IsGrindRailTag) == 0x000700, "Member 'ULinedNotebookItemLayerAnimInstance::IsGrindRailTag' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, DoubleJumpSequenceForward) == 0x000708, "Member 'ULinedNotebookItemLayerAnimInstance::DoubleJumpSequenceForward' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, DoubleJumpSequenceBackward) == 0x000710, "Member 'ULinedNotebookItemLayerAnimInstance::DoubleJumpSequenceBackward' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, DoubleJumpSequenceLeft) == 0x000718, "Member 'ULinedNotebookItemLayerAnimInstance::DoubleJumpSequenceLeft' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, DoubleJumpSequenceRight) == 0x000720, "Member 'ULinedNotebookItemLayerAnimInstance::DoubleJumpSequenceRight' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, EvergreenMotorcyclePose) == 0x000728, "Member 'ULinedNotebookItemLayerAnimInstance::EvergreenMotorcyclePose' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, EvergreenSlidingPose) == 0x000730, "Member 'ULinedNotebookItemLayerAnimInstance::EvergreenSlidingPose' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, EvergreenGrindRailPose) == 0x000738, "Member 'ULinedNotebookItemLayerAnimInstance::EvergreenGrindRailPose' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, TacSprintHandPose) == 0x000740, "Member 'ULinedNotebookItemLayerAnimInstance::TacSprintHandPose' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, DashMontage) == 0x000748, "Member 'ULinedNotebookItemLayerAnimInstance::DashMontage' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, DeltaEquipMontage) == 0x000768, "Member 'ULinedNotebookItemLayerAnimInstance::DeltaEquipMontage' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, SwingMontages) == 0x000788, "Member 'ULinedNotebookItemLayerAnimInstance::SwingMontages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, DeltaEquipBlendOut) == 0x000798, "Member 'ULinedNotebookItemLayerAnimInstance::DeltaEquipBlendOut' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, bUseOceanRiverTacSprint) == 0x0007A8, "Member 'ULinedNotebookItemLayerAnimInstance::bUseOceanRiverTacSprint' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, bUseDeltaTacSprint) == 0x0007A9, "Member 'ULinedNotebookItemLayerAnimInstance::bUseDeltaTacSprint' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, bIsDelta) == 0x0007AA, "Member 'ULinedNotebookItemLayerAnimInstance::bIsDelta' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, DoubleJumpSequence) == 0x0007B0, "Member 'ULinedNotebookItemLayerAnimInstance::DoubleJumpSequence' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, EvergreenPose) == 0x0007B8, "Member 'ULinedNotebookItemLayerAnimInstance::EvergreenPose' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, Yaw) == 0x0007C0, "Member 'ULinedNotebookItemLayerAnimInstance::Yaw' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, YawAdjusted) == 0x0007C4, "Member 'ULinedNotebookItemLayerAnimInstance::YawAdjusted' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, pitch) == 0x0007C8, "Member 'ULinedNotebookItemLayerAnimInstance::pitch' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, RotationAlpha) == 0x0007CC, "Member 'ULinedNotebookItemLayerAnimInstance::RotationAlpha' has a wrong offset!");
static_assert(offsetof(ULinedNotebookItemLayerAnimInstance, DeltaDoorBashRightArmAlpha) == 0x0007D0, "Member 'ULinedNotebookItemLayerAnimInstance::DeltaDoorBashRightArmAlpha' has a wrong offset!");

// Class LinedNotebookGameplayRuntime.LinedNotebookLakeWeaponAnimInstance
// 0x0090 (0x0500 - 0x0470)
class ULinedNotebookLakeWeaponAnimInstance final : public UFortWeaponAnimInstance
{
public:
	TArray<TSoftObjectPtr<class UAnimMontage>>    Swing01Montages;                                   // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    Swing02Montages;                                   // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    Swing03Montages;                                   // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    Swing04Montages;                                   // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    Swing05Montages;                                   // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    UpperBodySwing01Montages;                          // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    UpperBodySwing02Montages;                          // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UAnimMontage>>    InAirAttackMontages;                               // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bIsEquipping;                                      // 0x04E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwing01;                                          // 0x04E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwing02;                                          // 0x04EA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwing03;                                          // 0x04EB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwing04;                                          // 0x04EC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwing05;                                          // 0x04ED(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUpperBodySwing01;                               // 0x04EE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUpperBodySwing02;                               // 0x04EF(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAirLand;                                        // 0x04F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F1[0xF];                                      // 0x04F1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinedNotebookLakeWeaponAnimInstance">();
	}
	static class ULinedNotebookLakeWeaponAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinedNotebookLakeWeaponAnimInstance>();
	}
};
static_assert(alignof(ULinedNotebookLakeWeaponAnimInstance) == 0x000010, "Wrong alignment on ULinedNotebookLakeWeaponAnimInstance");
static_assert(sizeof(ULinedNotebookLakeWeaponAnimInstance) == 0x000500, "Wrong size on ULinedNotebookLakeWeaponAnimInstance");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, Swing01Montages) == 0x000468, "Member 'ULinedNotebookLakeWeaponAnimInstance::Swing01Montages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, Swing02Montages) == 0x000478, "Member 'ULinedNotebookLakeWeaponAnimInstance::Swing02Montages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, Swing03Montages) == 0x000488, "Member 'ULinedNotebookLakeWeaponAnimInstance::Swing03Montages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, Swing04Montages) == 0x000498, "Member 'ULinedNotebookLakeWeaponAnimInstance::Swing04Montages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, Swing05Montages) == 0x0004A8, "Member 'ULinedNotebookLakeWeaponAnimInstance::Swing05Montages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, UpperBodySwing01Montages) == 0x0004B8, "Member 'ULinedNotebookLakeWeaponAnimInstance::UpperBodySwing01Montages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, UpperBodySwing02Montages) == 0x0004C8, "Member 'ULinedNotebookLakeWeaponAnimInstance::UpperBodySwing02Montages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, InAirAttackMontages) == 0x0004D8, "Member 'ULinedNotebookLakeWeaponAnimInstance::InAirAttackMontages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, bIsEquipping) == 0x0004E8, "Member 'ULinedNotebookLakeWeaponAnimInstance::bIsEquipping' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, bSwing01) == 0x0004E9, "Member 'ULinedNotebookLakeWeaponAnimInstance::bSwing01' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, bSwing02) == 0x0004EA, "Member 'ULinedNotebookLakeWeaponAnimInstance::bSwing02' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, bSwing03) == 0x0004EB, "Member 'ULinedNotebookLakeWeaponAnimInstance::bSwing03' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, bSwing04) == 0x0004EC, "Member 'ULinedNotebookLakeWeaponAnimInstance::bSwing04' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, bSwing05) == 0x0004ED, "Member 'ULinedNotebookLakeWeaponAnimInstance::bSwing05' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, bIsUpperBodySwing01) == 0x0004EE, "Member 'ULinedNotebookLakeWeaponAnimInstance::bIsUpperBodySwing01' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, bIsUpperBodySwing02) == 0x0004EF, "Member 'ULinedNotebookLakeWeaponAnimInstance::bIsUpperBodySwing02' has a wrong offset!");
static_assert(offsetof(ULinedNotebookLakeWeaponAnimInstance, bIsAirLand) == 0x0004F0, "Member 'ULinedNotebookLakeWeaponAnimInstance::bIsAirLand' has a wrong offset!");

// Class LinedNotebookGameplayRuntime.LinedNotebookRiverWeaponAnimInstance
// 0x0010 (0x0480 - 0x0470)
class ULinedNotebookRiverWeaponAnimInstance final : public UFortWeaponAnimInstance
{
public:
	TArray<TSoftObjectPtr<class UAnimMontage>>    InAirMontages;                                     // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bIsAirLand;                                        // 0x0478(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinedNotebookRiverWeaponAnimInstance">();
	}
	static class ULinedNotebookRiverWeaponAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinedNotebookRiverWeaponAnimInstance>();
	}
};
static_assert(alignof(ULinedNotebookRiverWeaponAnimInstance) == 0x000010, "Wrong alignment on ULinedNotebookRiverWeaponAnimInstance");
static_assert(sizeof(ULinedNotebookRiverWeaponAnimInstance) == 0x000480, "Wrong size on ULinedNotebookRiverWeaponAnimInstance");
static_assert(offsetof(ULinedNotebookRiverWeaponAnimInstance, InAirMontages) == 0x000468, "Member 'ULinedNotebookRiverWeaponAnimInstance::InAirMontages' has a wrong offset!");
static_assert(offsetof(ULinedNotebookRiverWeaponAnimInstance, bIsAirLand) == 0x000478, "Member 'ULinedNotebookRiverWeaponAnimInstance::bIsAirLand' has a wrong offset!");

}

