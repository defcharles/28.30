#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LaserGameplayRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "LaserGameplayRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function LaserGameplayRuntime.BuildingGameplayActorLaserGrid.CosmeticDestroyOutletInstance
// 0x0010 (0x0010 - 0x0000)
struct BuildingGameplayActorLaserGrid_CosmeticDestroyOutletInstance final
{
public:
	struct FLaserGridOutletEntry                  OutletEntry;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActorLaserGrid_CosmeticDestroyOutletInstance) == 0x000004, "Wrong alignment on BuildingGameplayActorLaserGrid_CosmeticDestroyOutletInstance");
static_assert(sizeof(BuildingGameplayActorLaserGrid_CosmeticDestroyOutletInstance) == 0x000010, "Wrong size on BuildingGameplayActorLaserGrid_CosmeticDestroyOutletInstance");
static_assert(offsetof(BuildingGameplayActorLaserGrid_CosmeticDestroyOutletInstance, OutletEntry) == 0x000000, "Member 'BuildingGameplayActorLaserGrid_CosmeticDestroyOutletInstance::OutletEntry' has a wrong offset!");

// Function LaserGameplayRuntime.BuildingGameplayActorLaserGrid.HandleAttachedBuildingActorDied
// 0x0060 (0x0060 - 0x0000)
struct BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied) == 0x000008, "Wrong alignment on BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied");
static_assert(sizeof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied) == 0x000060, "Wrong size on BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied, DamagedActor) == 0x000000, "Member 'BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied, Damage) == 0x000008, "Member 'BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied::Damage' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied, InstigatedBy) == 0x000010, "Member 'BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied, DamageCauser) == 0x000018, "Member 'BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied, HitLocation) == 0x000020, "Member 'BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied::HitLocation' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied, HitComponent) == 0x000038, "Member 'BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied::HitComponent' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied, BoneName) == 0x000040, "Member 'BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied::BoneName' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied, Momentum) == 0x000048, "Member 'BuildingGameplayActorLaserGrid_HandleAttachedBuildingActorDied::Momentum' has a wrong offset!");

// Function LaserGameplayRuntime.BuildingGameplayActorLaserGrid.HandleLaserCollisionOverlap
// 0x0108 (0x0108 - 0x0000)
struct BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap) == 0x000008, "Wrong alignment on BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap");
static_assert(sizeof(BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap) == 0x000108, "Wrong size on BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap, OverlappedComponent) == 0x000000, "Member 'BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap, OtherActor) == 0x000008, "Member 'BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap, OtherComp) == 0x000010, "Member 'BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap, OtherBodyIndex) == 0x000018, "Member 'BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap, bFromSweep) == 0x00001C, "Member 'BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap, SweepResult) == 0x000020, "Member 'BuildingGameplayActorLaserGrid_HandleLaserCollisionOverlap::SweepResult' has a wrong offset!");

// Function LaserGameplayRuntime.BuildingGameplayActorLaserGrid.LaserGridStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct BuildingGameplayActorLaserGrid_LaserGridStateUpdated final
{
public:
	bool                                          bLaserGridEnabled;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActorLaserGrid_LaserGridStateUpdated) == 0x000001, "Wrong alignment on BuildingGameplayActorLaserGrid_LaserGridStateUpdated");
static_assert(sizeof(BuildingGameplayActorLaserGrid_LaserGridStateUpdated) == 0x000001, "Wrong size on BuildingGameplayActorLaserGrid_LaserGridStateUpdated");
static_assert(offsetof(BuildingGameplayActorLaserGrid_LaserGridStateUpdated, bLaserGridEnabled) == 0x000000, "Member 'BuildingGameplayActorLaserGrid_LaserGridStateUpdated::bLaserGridEnabled' has a wrong offset!");

// Function LaserGameplayRuntime.BuildingGameplayActorLaserGrid.LaserGridTriggered
// 0x0020 (0x0020 - 0x0000)
struct BuildingGameplayActorLaserGrid_LaserGridTriggered final
{
public:
	struct FLaserGridConnectionEntry              LaserConnectionData;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 TriggeringActor;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActorLaserGrid_LaserGridTriggered) == 0x000008, "Wrong alignment on BuildingGameplayActorLaserGrid_LaserGridTriggered");
static_assert(sizeof(BuildingGameplayActorLaserGrid_LaserGridTriggered) == 0x000020, "Wrong size on BuildingGameplayActorLaserGrid_LaserGridTriggered");
static_assert(offsetof(BuildingGameplayActorLaserGrid_LaserGridTriggered, LaserConnectionData) == 0x000000, "Member 'BuildingGameplayActorLaserGrid_LaserGridTriggered::LaserConnectionData' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_LaserGridTriggered, TriggeringActor) == 0x000018, "Member 'BuildingGameplayActorLaserGrid_LaserGridTriggered::TriggeringActor' has a wrong offset!");

// Function LaserGameplayRuntime.BuildingGameplayActorLaserGrid.SetLaserGridEnable
// 0x0001 (0x0001 - 0x0000)
struct BuildingGameplayActorLaserGrid_SetLaserGridEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActorLaserGrid_SetLaserGridEnable) == 0x000001, "Wrong alignment on BuildingGameplayActorLaserGrid_SetLaserGridEnable");
static_assert(sizeof(BuildingGameplayActorLaserGrid_SetLaserGridEnable) == 0x000001, "Wrong size on BuildingGameplayActorLaserGrid_SetLaserGridEnable");
static_assert(offsetof(BuildingGameplayActorLaserGrid_SetLaserGridEnable, bEnable) == 0x000000, "Member 'BuildingGameplayActorLaserGrid_SetLaserGridEnable::bEnable' has a wrong offset!");

// Function LaserGameplayRuntime.BuildingGameplayActorLaserGrid.CanActorTriggerLaserGrid
// 0x0010 (0x0010 - 0x0000)
struct BuildingGameplayActorLaserGrid_CanActorTriggerLaserGrid final
{
public:
	const class AActor*                           TriggeringActor;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingGameplayActorLaserGrid_CanActorTriggerLaserGrid) == 0x000008, "Wrong alignment on BuildingGameplayActorLaserGrid_CanActorTriggerLaserGrid");
static_assert(sizeof(BuildingGameplayActorLaserGrid_CanActorTriggerLaserGrid) == 0x000010, "Wrong size on BuildingGameplayActorLaserGrid_CanActorTriggerLaserGrid");
static_assert(offsetof(BuildingGameplayActorLaserGrid_CanActorTriggerLaserGrid, TriggeringActor) == 0x000000, "Member 'BuildingGameplayActorLaserGrid_CanActorTriggerLaserGrid::TriggeringActor' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActorLaserGrid_CanActorTriggerLaserGrid, ReturnValue) == 0x000008, "Member 'BuildingGameplayActorLaserGrid_CanActorTriggerLaserGrid::ReturnValue' has a wrong offset!");

// Function LaserGameplayRuntime.BuildingGameplayActorLaserGrid.GetActiveLaserGridConnections
// 0x0010 (0x0010 - 0x0000)
struct BuildingGameplayActorLaserGrid_GetActiveLaserGridConnections final
{
public:
	TArray<struct FLaserGridConnectionEntry>      OutActiveLaserGridConnections;                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActorLaserGrid_GetActiveLaserGridConnections) == 0x000008, "Wrong alignment on BuildingGameplayActorLaserGrid_GetActiveLaserGridConnections");
static_assert(sizeof(BuildingGameplayActorLaserGrid_GetActiveLaserGridConnections) == 0x000010, "Wrong size on BuildingGameplayActorLaserGrid_GetActiveLaserGridConnections");
static_assert(offsetof(BuildingGameplayActorLaserGrid_GetActiveLaserGridConnections, OutActiveLaserGridConnections) == 0x000000, "Member 'BuildingGameplayActorLaserGrid_GetActiveLaserGridConnections::OutActiveLaserGridConnections' has a wrong offset!");

}

