#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MatchObjectivesUI

#include "Basic.hpp"

#include "MatchObjectivesUI_classes.hpp"
#include "MatchObjectivesUI_parameters.hpp"


namespace SDK
{

// Function MatchObjectivesUI.FortMobileButtonBehaviorComponent_MatchObjectivePicker.HandleSkydiveModeChanged
// (Final, Native, Protected)
// Parameters:
// ESkydiveFeedbackPhase                   Phase                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMobileButtonBehaviorComponent_MatchObjectivePicker::HandleSkydiveModeChanged(ESkydiveFeedbackPhase Phase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleSkydiveModeChanged");

	Params::FortMobileButtonBehaviorComponent_MatchObjectivePicker_HandleSkydiveModeChanged Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.FortMobileHUDElement_ObjectiveSelectorWrapper.HandleSkydiveModeChanged
// (Final, Native, Public)
// Parameters:
// ESkydiveFeedbackPhase                   Phase                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMobileHUDElement_ObjectiveSelectorWrapper::HandleSkydiveModeChanged(ESkydiveFeedbackPhase Phase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleSkydiveModeChanged");

	Params::FortMobileHUDElement_ObjectiveSelectorWrapper_HandleSkydiveModeChanged Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesOptionEntryWidget.OnMatchObjectiveEntrySetup
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FUrgentQuestData                 UrgentQuestData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFortItemQuantityPair            VisibleReward                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ObjectiveCount                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchObjectivesOptionEntryWidget::OnMatchObjectiveEntrySetup(const struct FUrgentQuestData& UrgentQuestData, const struct FFortItemQuantityPair& VisibleReward, const int32 ObjectiveCount)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMatchObjectiveEntrySetup");

	Params::MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup Parms{};

	Parms.UrgentQuestData = std::move(UrgentQuestData);
	Parms.VisibleReward = std::move(VisibleReward);
	Parms.ObjectiveCount = ObjectiveCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesOptionEntryWidget.OnOptionFocusedStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsFocused                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchObjectivesOptionEntryWidget::OnOptionFocusedStateChanged(bool bIsFocused)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnOptionFocusedStateChanged");

	Params::MatchObjectivesOptionEntryWidget_OnOptionFocusedStateChanged Parms{};

	Parms.bIsFocused = bIsFocused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesOptionEntryWidget.OnOptionSelectedStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsSelected                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchObjectivesOptionEntryWidget::OnOptionSelectedStateChanged(bool bIsSelected)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnOptionSelectedStateChanged");

	Params::MatchObjectivesOptionEntryWidget_OnOptionSelectedStateChanged Parms{};

	Parms.bIsSelected = bIsSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesOptionEntryWidget.OnTeammateSelectionUpdated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class AFortPlayerState*>         PlayersThatHaveSelectedThis                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMatchObjectivesOptionEntryWidget::OnTeammateSelectionUpdated(const TArray<class AFortPlayerState*>& PlayersThatHaveSelectedThis)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTeammateSelectionUpdated");

	Params::MatchObjectivesOptionEntryWidget_OnTeammateSelectionUpdated Parms{};

	Parms.PlayersThatHaveSelectedThis = std::move(PlayersThatHaveSelectedThis);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesSocialAvatar.SetSocialAvatar
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchObjectivesSocialAvatar::SetSocialAvatar(const class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSocialAvatar");

	Params::MatchObjectivesSocialAvatar_SetSocialAvatar Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesSocialAvatar.SetSocialAvatarTexture
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        AvatarTexture                                          (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchObjectivesSocialAvatar::SetSocialAvatarTexture(const TSoftObjectPtr<class UTexture2D>& AvatarTexture)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSocialAvatarTexture");

	Params::MatchObjectivesSocialAvatar_SetSocialAvatarTexture Parms{};

	Parms.AvatarTexture = AvatarTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesUIDirectorBase.HandleSkydiveModeChanged
// (Final, Native, Public)
// Parameters:
// ESkydiveFeedbackPhase                   Phase                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMatchObjectivesUIDirectorBase::HandleSkydiveModeChanged(ESkydiveFeedbackPhase Phase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleSkydiveModeChanged");

	Params::MatchObjectivesUIDirectorBase_HandleSkydiveModeChanged Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesUIDirectorBase.OnFinishSkydiving
// (Event, Public, BlueprintEvent)

void AMatchObjectivesUIDirectorBase::OnFinishSkydiving()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnFinishSkydiving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MatchObjectivesUI.MatchObjectivesUIDirectorBase.IsAnyChallengeAvailable
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMatchObjectivesUIDirectorBase::IsAnyChallengeAvailable() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsAnyChallengeAvailable");

	Params::MatchObjectivesUIDirectorBase_IsAnyChallengeAvailable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.GetDailyChallengesFromMCP
// (Final, Native, Protected, BlueprintCallable)

void UMatchObjectivesSelectorWidget::GetDailyChallengesFromMCP()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDailyChallengesFromMCP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.OnQuestEntrySelected
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUserWidget*                      SelectedEntry                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchObjectivesSelectorWidget::OnQuestEntrySelected(class UUserWidget* SelectedEntry)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnQuestEntrySelected");

	Params::MatchObjectivesSelectorWidget_OnQuestEntrySelected Parms{};

	Parms.SelectedEntry = SelectedEntry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.OnSelectorOpenStateChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UMatchObjectivesSelectorWidget::OnSelectorOpenStateChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSelectorOpenStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.SetSelectorState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EMatchQuestsSelectorState               State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchObjectivesSelectorWidget::SetSelectorState(const EMatchQuestsSelectorState State)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSelectorState");

	Params::MatchObjectivesSelectorWidget_SetSelectorState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.UpdateKeybindings
// (Final, Native, Protected)

void UMatchObjectivesSelectorWidget::UpdateKeybindings()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateKeybindings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.IsOpenByDefault
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMatchObjectivesSelectorWidget::IsOpenByDefault() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsOpenByDefault");

	Params::MatchObjectivesSelectorWidget_IsOpenByDefault Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.PopulateChallengeEntries
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// TArray<TScriptInterface<class IQuestDefinitionInterface>>QuestOffering                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UMatchObjectivesSelectorWidget::PopulateChallengeEntries(const TArray<TScriptInterface<class IQuestDefinitionInterface>>& QuestOffering) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PopulateChallengeEntries");

	Params::MatchObjectivesSelectorWidget_PopulateChallengeEntries Parms{};

	Parms.QuestOffering = std::move(QuestOffering);

	UObject::ProcessEvent(Func, &Parms);
}

}

