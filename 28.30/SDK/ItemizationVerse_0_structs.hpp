#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationVerse_0

#include "Basic.hpp"


namespace SDK
{

// VerseEnum ItemizationVerse.item_state
// NumValues: 0x0003
enum class Eitem_state : uint8
{
	NotInInventory                           = 0,
	InInventory                              = 1,
	Equipped                                 = 2,
};

// VerseStruct ItemizationVerse.tuple_L_R
// 0x0001 (0x0001 - 0x0000)
struct ItemizationVerse_0::Ftuple_L_R final
{
public:
	uint8                                         _StructPaddingDummy;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemizationVerse_0::Ftuple_L_R) == 0x000001, "Wrong alignment on ItemizationVerse_0::Ftuple_L_R");
static_assert(sizeof(ItemizationVerse_0::Ftuple_L_R) == 0x000001, "Wrong size on ItemizationVerse_0::Ftuple_L_R");
static_assert(offsetof(ItemizationVerse_0::Ftuple_L_R, _StructPaddingDummy) == 0x000000, "Member 'ItemizationVerse_0::Ftuple_L_R::_StructPaddingDummy' has a wrong offset!");

// VerseStruct ItemizationVerse.tuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R
// 0x0010 (0x0010 - 0x0000)
struct ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R final
{
public:
	class UDevices_creative_object*               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct ItemizationVerse_0::Ftuple_L_R         __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0001)(InstancedReference, HasGetValueTypeHash)
	struct ItemizationVerse_0::Ftuple_L_R         __verse_0x932BF92E_Elem2;                          // 0x0009(0x0001)(InstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R) == 0x000008, "Wrong alignment on ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R");
static_assert(sizeof(ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R) == 0x000010, "Wrong size on ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R");
static_assert(offsetof(ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R, __verse_0x932BF92E_Elem2) == 0x000009, "Member 'ItemizationVerse_0::Ftuple_Lcreative__object_Mtuple_L_R_Mtuple_L_R_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// VerseStruct ItemizationVerse.tuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R
// 0x0010 (0x0010 - 0x0000)
struct ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R final
{
public:
	class UObject*                                __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct ItemizationVerse_0::Ftuple_L_R         __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0001)(InstancedReference, HasGetValueTypeHash)
	struct ItemizationVerse_0::Ftuple_L_R         __verse_0x932BF92E_Elem2;                          // 0x0009(0x0001)(InstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R) == 0x000008, "Wrong alignment on ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R");
static_assert(sizeof(ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R) == 0x000010, "Wrong size on ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R");
static_assert(offsetof(ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R, __verse_0x932BF92E_Elem2) == 0x000009, "Member 'ItemizationVerse_0::Ftuple_Lfort__character_Mtuple_L_R_Mtuple_L_R_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// VerseStruct ItemizationVerse.tuple_Lfort__item_Mitem__state_R
// 0x0010 (0x0010 - 0x0000)
struct Ftuple_Lfort__item_Mitem__state_R final
{
public:
	class Ufort_item*                             __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	Eitem_state                                   __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lfort__item_Mitem__state_R) == 0x000008, "Wrong alignment on Ftuple_Lfort__item_Mitem__state_R");
static_assert(sizeof(Ftuple_Lfort__item_Mitem__state_R) == 0x000010, "Wrong size on Ftuple_Lfort__item_Mitem__state_R");
static_assert(offsetof(Ftuple_Lfort__item_Mitem__state_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lfort__item_Mitem__state_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfort__item_Mitem__state_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lfort__item_Mitem__state_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct ItemizationVerse.tuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R
// 0x0010 (0x0010 - 0x0000)
struct Ftuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R final
{
public:
	class UClass*                                 __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UItemComponentBase*                     __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R) == 0x000008, "Wrong alignment on Ftuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R");
static_assert(sizeof(Ftuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R) == 0x000010, "Wrong size on Ftuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R");
static_assert(offsetof(Ftuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lsubtype_Lfort__item__component__base_R_Mfort__item__component__base_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct ItemizationVerse.tuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R
// 0x0010 (0x0010 - 0x0000)
struct Ftuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R final
{
public:
	class UClass*                                 __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UItemComponentLocalStorage*             __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R) == 0x000008, "Wrong alignment on Ftuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R");
static_assert(sizeof(Ftuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R) == 0x000010, "Wrong size on Ftuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R");
static_assert(offsetof(Ftuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lsubtype_Lfort__item__component__local__storage_R_Mfort__item__component__local__storage_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct ItemizationVerse.tuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R
// 0x0010 (0x0010 - 0x0000)
struct Ftuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R final
{
public:
	class UClass*                                 __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UItemComponentSharedLocalStorage*       __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R) == 0x000008, "Wrong alignment on Ftuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R");
static_assert(sizeof(Ftuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R) == 0x000010, "Wrong size on Ftuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R");
static_assert(offsetof(Ftuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lsubtype_Lfort__item__component__shared__local__storage_R_Mfort__item__component__shared__local__storage_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct ItemizationVerse.tuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R
// 0x0010 (0x0010 - 0x0000)
struct Ftuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R final
{
public:
	class UClass*                                 __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UItemAttributeValueBase*                __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R) == 0x000008, "Wrong alignment on Ftuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R");
static_assert(sizeof(Ftuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R) == 0x000010, "Wrong size on Ftuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R");
static_assert(offsetof(Ftuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lsubtype_Litem__attribute__base_R_Mitem__attribute__value__base_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

}

