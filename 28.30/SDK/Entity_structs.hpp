#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Entity

#include "Basic.hpp"

#include "NetCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum Entity.EEntityNotificationState
// NumValues: 0x0012
enum class EEntityNotificationState : uint8
{
	Created                                  = 0,
	Initializing                             = 1,
	Initialized                              = 2,
	AddingToWorld                            = 3,
	AddedToWorld                             = 4,
	BeginningPlay                            = 5,
	BeganPlay                                = 6,
	EndingPlay                               = 7,
	EndedPlay                                = 8,
	RemovingFromWorld                        = 9,
	RemovedFromWorld                         = 10,
	Uninitializing                           = 11,
	Uninitialized                            = 12,
	TearingDown                              = 13,
	TearedDown                               = 14,
	ClientDenied                             = 15,
	Disposing                                = 16,
	Disposed                                 = 17,
};

// Enum Entity.EEntityEndPlayReason
// NumValues: 0x0003
enum class EEntityEndPlayReason : uint8
{
	RemoveFromWorld                          = 0,
	RemoveFromEntity                         = 1,
	Destroy                                  = 2,
};

// ScriptStruct Entity.FastCoreEntityComponentArrayItem
// 0x0024 (0x0030 - 0x000C)
struct FFastCoreEntityComponentArrayItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 Component;                                         // 0x0010(0x0020)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFastCoreEntityComponentArrayItem) == 0x000008, "Wrong alignment on FFastCoreEntityComponentArrayItem");
static_assert(sizeof(FFastCoreEntityComponentArrayItem) == 0x000030, "Wrong size on FFastCoreEntityComponentArrayItem");
static_assert(offsetof(FFastCoreEntityComponentArrayItem, Component) == 0x000010, "Member 'FFastCoreEntityComponentArrayItem::Component' has a wrong offset!");

// ScriptStruct Entity.FastCoreEntityComponentArray
// 0x0010 (0x0118 - 0x0108)
struct FFastCoreEntityComponentArray final : public FFastArraySerializer
{
public:
	TArray<struct FFastCoreEntityComponentArrayItem> Components;                                        // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFastCoreEntityComponentArray) == 0x000008, "Wrong alignment on FFastCoreEntityComponentArray");
static_assert(sizeof(FFastCoreEntityComponentArray) == 0x000118, "Wrong size on FFastCoreEntityComponentArray");
static_assert(offsetof(FFastCoreEntityComponentArray, Components) == 0x000108, "Member 'FFastCoreEntityComponentArray::Components' has a wrong offset!");

// ScriptStruct Entity.WorldExecutionPhase
// 0x0030 (0x0058 - 0x0028)
struct FWorldExecutionPhase final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldExecutionPhase) == 0x000008, "Wrong alignment on FWorldExecutionPhase");
static_assert(sizeof(FWorldExecutionPhase) == 0x000058, "Wrong size on FWorldExecutionPhase");

// ScriptStruct Entity.ReplicatedDataEntry
// 0x0018 (0x0018 - 0x0000)
struct FReplicatedDataEntry final
{
public:
	class UObject*                                ReplicatedData;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedDataEntry) == 0x000008, "Wrong alignment on FReplicatedDataEntry");
static_assert(sizeof(FReplicatedDataEntry) == 0x000018, "Wrong size on FReplicatedDataEntry");
static_assert(offsetof(FReplicatedDataEntry, ReplicatedData) == 0x000000, "Member 'FReplicatedDataEntry::ReplicatedData' has a wrong offset!");

// ScriptStruct Entity.ReplicatedDataRegistry
// 0x0010 (0x0010 - 0x0000)
struct FReplicatedDataRegistry final
{
public:
	TArray<struct FReplicatedDataEntry>           Registry;                                          // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FReplicatedDataRegistry) == 0x000008, "Wrong alignment on FReplicatedDataRegistry");
static_assert(sizeof(FReplicatedDataRegistry) == 0x000010, "Wrong size on FReplicatedDataRegistry");
static_assert(offsetof(FReplicatedDataRegistry, Registry) == 0x000000, "Member 'FReplicatedDataRegistry::Registry' has a wrong offset!");

}

