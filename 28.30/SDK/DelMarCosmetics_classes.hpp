#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarCosmetics

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AudioGameplayBehavior_structs.hpp"
#include "CosmeticsFrameworkLoadouts_structs.hpp"
#include "Engine_classes.hpp"
#include "DelMarCosmetics_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "DelMarCore_structs.hpp"
#include "DelMarCore_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// Class DelMarCosmetics.DelMarCosmeticsSettings
// 0x0018 (0x0048 - 0x0030)
class UDelMarCosmeticsSettings final : public UPrimaryDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                RandomCharacters;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarCosmeticsSettings">();
	}
	static class UDelMarCosmeticsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarCosmeticsSettings>();
	}
};
static_assert(alignof(UDelMarCosmeticsSettings) == 0x000008, "Wrong alignment on UDelMarCosmeticsSettings");
static_assert(sizeof(UDelMarCosmeticsSettings) == 0x000048, "Wrong size on UDelMarCosmeticsSettings");
static_assert(offsetof(UDelMarCosmeticsSettings, RandomCharacters) == 0x000038, "Member 'UDelMarCosmeticsSettings::RandomCharacters' has a wrong offset!");

// Class DelMarCosmetics.DelMarPreviewVehicle
// 0x0630 (0x24C0 - 0x1E90)
class ADelMarPreviewVehicle : public AFortAthenaVehicle
{
public:
	uint8                                         Pad_1E88[0x8];                                     // 0x1E88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCosmeticLoadout                       PreviewLoadout;                                    // 0x1E90(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	class UDelMarVehicleCosmeticComponent*        CosmeticComponent;                                 // 0x1EA0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDelMarPreviewConfigs                  PreviewConfigs;                                    // 0x1EA8(0x00F8)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1FA0[0x88];                                    // 0x1FA0(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SpringTravelOffset;                                // 0x2028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FDelMarBouncyChassisState              BouncyChassisConfig;                               // 0x2038(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2044[0x54];                                    // 0x2044(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float ImpactMagnitude, const struct FVector& WorldLocation, float ForwardRotationDegrees)> OnDelMarVehicleHitWall;                            // 0x2098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Magnitude, const struct FVector& WorldLocation)> OnDelMarVehicleHitVehicle;                         // 0x20A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Magnitude, const struct FVector& WorldLocation)> OnDelMarVehicleHitByVehicle;                       // 0x20B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C8[0x388];                                   // 0x20C8(0x0388)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnHazardHit;                                       // 0x2450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnVehicleTeleportEntered;                          // 0x2460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnVehicleTeleportExit;                             // 0x2470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnVehicleAppliedTeleportRotation;                  // 0x2480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2490[0x30];                                    // 0x2490(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BroadcastVehicleDemolished(const struct FGameplayTag& DemolishCausedByTag);

	struct FDelMarBouncyChassisState GetBouncyChassisConfig() const;
	bool IsWheelOnGround(EDelMarVehicleWheelIndex WheelIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPreviewVehicle">();
	}
	static class ADelMarPreviewVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarPreviewVehicle>();
	}
};
static_assert(alignof(ADelMarPreviewVehicle) == 0x000010, "Wrong alignment on ADelMarPreviewVehicle");
static_assert(sizeof(ADelMarPreviewVehicle) == 0x0024C0, "Wrong size on ADelMarPreviewVehicle");
static_assert(offsetof(ADelMarPreviewVehicle, PreviewLoadout) == 0x001E90, "Member 'ADelMarPreviewVehicle::PreviewLoadout' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, CosmeticComponent) == 0x001EA0, "Member 'ADelMarPreviewVehicle::CosmeticComponent' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, PreviewConfigs) == 0x001EA8, "Member 'ADelMarPreviewVehicle::PreviewConfigs' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, SpringTravelOffset) == 0x002028, "Member 'ADelMarPreviewVehicle::SpringTravelOffset' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, BouncyChassisConfig) == 0x002038, "Member 'ADelMarPreviewVehicle::BouncyChassisConfig' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, OnDelMarVehicleHitWall) == 0x002098, "Member 'ADelMarPreviewVehicle::OnDelMarVehicleHitWall' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, OnDelMarVehicleHitVehicle) == 0x0020A8, "Member 'ADelMarPreviewVehicle::OnDelMarVehicleHitVehicle' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, OnDelMarVehicleHitByVehicle) == 0x0020B8, "Member 'ADelMarPreviewVehicle::OnDelMarVehicleHitByVehicle' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, OnHazardHit) == 0x002450, "Member 'ADelMarPreviewVehicle::OnHazardHit' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, OnVehicleTeleportEntered) == 0x002460, "Member 'ADelMarPreviewVehicle::OnVehicleTeleportEntered' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, OnVehicleTeleportExit) == 0x002470, "Member 'ADelMarPreviewVehicle::OnVehicleTeleportExit' has a wrong offset!");
static_assert(offsetof(ADelMarPreviewVehicle, OnVehicleAppliedTeleportRotation) == 0x002480, "Member 'ADelMarPreviewVehicle::OnVehicleAppliedTeleportRotation' has a wrong offset!");

// Class DelMarCosmetics.DelMarGaragePreviewVehicle
// 0x0200 (0x26C0 - 0x24C0)
class ADelMarGaragePreviewVehicle final : public ADelMarPreviewVehicle
{
public:
	uint8                                         Pad_24C0[0x8];                                     // 0x24C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UCameraComponent* Camera)> OnActiveCameraUpdatedDelegate;                     // 0x24C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsTransitioning)> OnRotationTransitionStateChanged;                  // 0x24D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USceneComponent*                        PreviewPivotComponent;                             // 0x24E8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24F0[0x8];                                     // 0x24F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       ActiveCameraComponent;                             // 0x24F8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                       DefaultZoomInCameraComponent;                      // 0x2500(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                       DefaultZoomOutCameraComponent;                     // 0x2508(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2510[0xA0];                                    // 0x2510(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FRotator>    SlotPreviewRotations;                              // 0x25B0(0x0050)(Edit, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, struct FDelMarPreviewConfigs> SlotPreviewConfigs;                                // 0x2600(0x0050)(Edit, NativeAccessSpecifierPrivate)
	float                                         ZoomLevel;                                         // 0x2650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2654[0x4];                                     // 0x2654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UserRotationOffset;                                // 0x2658(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           PreviewSlot;                                       // 0x2670(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           PreviewVehicleTag;                                 // 0x2674(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationTransitionTime;                            // 0x2678(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_267C[0x44];                                    // 0x267C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_OnActiveCameraUpdated();
	void PreviewItem(const class UDelMarCosmeticItemDefinition* Item);
	void PreviewLoadout(const struct FDelMarLoadout& Loadout);
	void ResetPreviewToCurrentLoadout();
	void SetPreviewSlot(const struct FGameplayTag& InSlot);
	void SetUserRotationOffset(const struct FRotator& InRotationOffset);
	void SetZoomLevel(float InZoomLevel);
	void UpdateActiveCamera();

	struct FRotator GetRotationOffset() const;
	bool IsRotationTransitioning() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarGaragePreviewVehicle">();
	}
	static class ADelMarGaragePreviewVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarGaragePreviewVehicle>();
	}
};
static_assert(alignof(ADelMarGaragePreviewVehicle) == 0x000010, "Wrong alignment on ADelMarGaragePreviewVehicle");
static_assert(sizeof(ADelMarGaragePreviewVehicle) == 0x0026C0, "Wrong size on ADelMarGaragePreviewVehicle");
static_assert(offsetof(ADelMarGaragePreviewVehicle, OnActiveCameraUpdatedDelegate) == 0x0024C8, "Member 'ADelMarGaragePreviewVehicle::OnActiveCameraUpdatedDelegate' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, OnRotationTransitionStateChanged) == 0x0024D8, "Member 'ADelMarGaragePreviewVehicle::OnRotationTransitionStateChanged' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, PreviewPivotComponent) == 0x0024E8, "Member 'ADelMarGaragePreviewVehicle::PreviewPivotComponent' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, ActiveCameraComponent) == 0x0024F8, "Member 'ADelMarGaragePreviewVehicle::ActiveCameraComponent' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, DefaultZoomInCameraComponent) == 0x002500, "Member 'ADelMarGaragePreviewVehicle::DefaultZoomInCameraComponent' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, DefaultZoomOutCameraComponent) == 0x002508, "Member 'ADelMarGaragePreviewVehicle::DefaultZoomOutCameraComponent' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, SlotPreviewRotations) == 0x0025B0, "Member 'ADelMarGaragePreviewVehicle::SlotPreviewRotations' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, SlotPreviewConfigs) == 0x002600, "Member 'ADelMarGaragePreviewVehicle::SlotPreviewConfigs' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, ZoomLevel) == 0x002650, "Member 'ADelMarGaragePreviewVehicle::ZoomLevel' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, UserRotationOffset) == 0x002658, "Member 'ADelMarGaragePreviewVehicle::UserRotationOffset' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, PreviewSlot) == 0x002670, "Member 'ADelMarGaragePreviewVehicle::PreviewSlot' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, PreviewVehicleTag) == 0x002674, "Member 'ADelMarGaragePreviewVehicle::PreviewVehicleTag' has a wrong offset!");
static_assert(offsetof(ADelMarGaragePreviewVehicle, RotationTransitionTime) == 0x002678, "Member 'ADelMarGaragePreviewVehicle::RotationTransitionTime' has a wrong offset!");

// Class DelMarCosmetics.DelMarParamOverrideCosmeticActor
// 0x0050 (0x0318 - 0x02C8)
class ADelMarParamOverrideCosmeticActor final : public ADelMarCosmeticActor
{
public:
	TMap<TSubclassOf<class ADelMarCosmeticActor>, struct FDelMarParameterOverrides> CosmeticActorsParamterOverrides;                   // 0x02C8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarParamOverrideCosmeticActor">();
	}
	static class ADelMarParamOverrideCosmeticActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarParamOverrideCosmeticActor>();
	}
};
static_assert(alignof(ADelMarParamOverrideCosmeticActor) == 0x000008, "Wrong alignment on ADelMarParamOverrideCosmeticActor");
static_assert(sizeof(ADelMarParamOverrideCosmeticActor) == 0x000318, "Wrong size on ADelMarParamOverrideCosmeticActor");
static_assert(offsetof(ADelMarParamOverrideCosmeticActor, CosmeticActorsParamterOverrides) == 0x0002C8, "Member 'ADelMarParamOverrideCosmeticActor::CosmeticActorsParamterOverrides' has a wrong offset!");

// Class DelMarCosmetics.DelMarPreviewCameraComponent
// 0x0010 (0x09C0 - 0x09B0)
class UDelMarPreviewCameraComponent final : public UCameraComponent
{
public:
	struct FGameplayTag                           PreviewSlot;                                       // 0x09B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDelMarPreviewCameraType                      PreviewType;                                       // 0x09B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9B5[0xB];                                      // 0x09B5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPreviewCameraComponent">();
	}
	static class UDelMarPreviewCameraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPreviewCameraComponent>();
	}
};
static_assert(alignof(UDelMarPreviewCameraComponent) == 0x000010, "Wrong alignment on UDelMarPreviewCameraComponent");
static_assert(sizeof(UDelMarPreviewCameraComponent) == 0x0009C0, "Wrong size on UDelMarPreviewCameraComponent");
static_assert(offsetof(UDelMarPreviewCameraComponent, PreviewSlot) == 0x0009B0, "Member 'UDelMarPreviewCameraComponent::PreviewSlot' has a wrong offset!");
static_assert(offsetof(UDelMarPreviewCameraComponent, PreviewType) == 0x0009B4, "Member 'UDelMarPreviewCameraComponent::PreviewType' has a wrong offset!");

// Class DelMarCosmetics.DelMarPreviewPivot
// 0x0008 (0x0298 - 0x0290)
class ADelMarPreviewPivot final : public AActor
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0290(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPreviewPivot">();
	}
	static class ADelMarPreviewPivot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarPreviewPivot>();
	}
};
static_assert(alignof(ADelMarPreviewPivot) == 0x000008, "Wrong alignment on ADelMarPreviewPivot");
static_assert(sizeof(ADelMarPreviewPivot) == 0x000298, "Wrong size on ADelMarPreviewPivot");
static_assert(offsetof(ADelMarPreviewPivot, SceneComponent) == 0x000290, "Member 'ADelMarPreviewPivot::SceneComponent' has a wrong offset!");

// Class DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor
// 0x0220 (0x04E8 - 0x02C8)
class ADelMarUnifiedVehicleCosmeticActor final : public ADelMarCosmeticActor
{
public:
	TArray<class UNiagaraComponent*>              CachedSideBoosters;                                // 0x02C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>              CachedDownBoosters;                                // 0x02D8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E8[0x4];                                      // 0x02E8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SideBoosterParam_Scale;                            // 0x02EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleBooster>          LeftBoosters;                                      // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleBooster>          RightBoosters;                                     // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 BodySkeletalMeshComponent;                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAudioGameplayBehaviorInstance         KickflipAudioBehavior;                             // 0x0318(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FAudioGameplayBehaviorInstance         JumpAudioBehavior;                                 // 0x0328(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      JumpFX;                                            // 0x0338(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      SuperSonicFX;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     SuperSonicRadialBlurMaterial;                      // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               SuperSonicRadialBlurMID;                           // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SuperSonicBlurOffset;                              // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SuperSonicForwardSpeedMin;                         // 0x035C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SuperSonicForwardSpeedMax;                         // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SuperSonicParam_Spawn;                             // 0x0364(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RadialBlurParam_Offset;                            // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RadialBlurParam_Transition;                        // 0x036C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioGameplayBehaviorInstance         DraftingAudioBehavior;                             // 0x0378(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      DraftingFX;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DraftingParam_Spawn;                               // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DraftingParam_SpeedGain;                           // 0x0394(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DraftingParam_Amount;                              // 0x0398(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioGameplayBehaviorInstance         WorldBonusSpeedAudioBehavior;                      // 0x03A0(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FName                                   WBSGroupEvent_OnBonusSpeedActivated;               // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WBSGroupEvent_OnBonusSpeedDeactivated;             // 0x03B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   WBSGroupEvent_OnWorldBonusSpeedStackGained;        // 0x03B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DemolishTag_RaceFinished;                          // 0x03BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAudioGameplayBehaviorInstance         RespawnAudioBehavior;                              // 0x03C0(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FAudioGameplayBehaviorInstance         DespawnAudioBehavior;                              // 0x03D0(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      TaillightTrailFX_Left;                             // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      TaillightTrailFX_Right;                            // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TaillightTrailSocket_Left;                         // 0x03F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TaillightTrailSocket_Right;                        // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TaillightTrail_MinForwardSpeed;                    // 0x03F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioGameplayBehaviorInstance         UnderthrustAudioBehavior;                          // 0x0400(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FAudioGameplayBehaviorInstance         WheelsAudioBehavior;                               // 0x0410(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FName                                   FrontLeftWheelContactBone;                         // 0x0420(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FrontRightWheelContactBone;                        // 0x0424(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BackRightWheelContactBone;                         // 0x0428(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BackLeftWheelContactBone;                          // 0x042C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleCosmeticWheelInfo> WheelInfos;                                        // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_440[0xA0];                                     // 0x0440(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FxSideSpeedThreshold;                              // 0x04E0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FxForwardSpeedThreshold;                           // 0x04E4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBonusSpeedActivated();
	void OnBonusSpeedDeactivated();
	void OnDraftStateChanged(EDelmarDraftingState CurrentState);
	void OnDriftDeactivated();
	void OnDriftDurationChanged(float duration);
	void OnDriftKickActivated(float DriftDirection, EDelMarVehicleDriftState DriftState);
	void OnDriftKickDeactivated();
	void OnJumpActivated();
	void OnKickflipActivated(bool bLeftSide);
	void OnKickflipDeactivated();
	void OnUnderthrustActivated();
	void OnUnderthrustDeactivated();
	void OnVehicleDemolished(const struct FGameplayTag& CausedByTag);
	void OnVehicleLanded(float LandingForce, bool bLandedKickflip);
	void OnWorldBonusSpeedStackGained(const struct FGameplayTag& Source, int32 Stacks);
	void SetAllBoostersEnabled(bool bSetFrontBoosters, bool bSetBackBoosters, bool bSetSideBoosters, bool bSetDownBoosters, bool bEnabled, bool bReset);
	void SetLeftBoostersEnabled(bool bSetFrontBoosters, bool bSetBackBoosters, bool bSetSideBoosters, bool bSetDownBoosters, bool bEnabled, bool bReset);
	void SetRightBoostersEnabled(bool bSetFrontBoosters, bool bSetBackBoosters, bool bSetSideBoosters, bool bSetDownBoosters, bool bEnabled, bool bReset);

	TArray<class UNiagaraComponent*> GetAllBoosters(bool bFrontBoosters, bool bBackBoosters, bool bSideBoosters, bool bDownBoosters) const;
	TArray<class UNiagaraComponent*> GetLeftBoosters(bool bFrontBoosters, bool bBackBoosters, bool bSideBoosters, bool bDownBoosters) const;
	TArray<class UNiagaraComponent*> GetRightBoosters(bool bFrontBoosters, bool bBackBoosters, bool bSideBoosters, bool bDownBoosters) const;
	class FName GetWheelContactBoneName(EDelMarVehicleWheelIndex WheelIndex) const;
	bool ShouldTriggerFX() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarUnifiedVehicleCosmeticActor">();
	}
	static class ADelMarUnifiedVehicleCosmeticActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarUnifiedVehicleCosmeticActor>();
	}
};
static_assert(alignof(ADelMarUnifiedVehicleCosmeticActor) == 0x000008, "Wrong alignment on ADelMarUnifiedVehicleCosmeticActor");
static_assert(sizeof(ADelMarUnifiedVehicleCosmeticActor) == 0x0004E8, "Wrong size on ADelMarUnifiedVehicleCosmeticActor");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, CachedSideBoosters) == 0x0002C8, "Member 'ADelMarUnifiedVehicleCosmeticActor::CachedSideBoosters' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, CachedDownBoosters) == 0x0002D8, "Member 'ADelMarUnifiedVehicleCosmeticActor::CachedDownBoosters' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, SideBoosterParam_Scale) == 0x0002EC, "Member 'ADelMarUnifiedVehicleCosmeticActor::SideBoosterParam_Scale' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, LeftBoosters) == 0x0002F0, "Member 'ADelMarUnifiedVehicleCosmeticActor::LeftBoosters' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, RightBoosters) == 0x000300, "Member 'ADelMarUnifiedVehicleCosmeticActor::RightBoosters' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, BodySkeletalMeshComponent) == 0x000310, "Member 'ADelMarUnifiedVehicleCosmeticActor::BodySkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, KickflipAudioBehavior) == 0x000318, "Member 'ADelMarUnifiedVehicleCosmeticActor::KickflipAudioBehavior' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, JumpAudioBehavior) == 0x000328, "Member 'ADelMarUnifiedVehicleCosmeticActor::JumpAudioBehavior' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, JumpFX) == 0x000338, "Member 'ADelMarUnifiedVehicleCosmeticActor::JumpFX' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, SuperSonicFX) == 0x000340, "Member 'ADelMarUnifiedVehicleCosmeticActor::SuperSonicFX' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, SuperSonicRadialBlurMaterial) == 0x000348, "Member 'ADelMarUnifiedVehicleCosmeticActor::SuperSonicRadialBlurMaterial' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, SuperSonicRadialBlurMID) == 0x000350, "Member 'ADelMarUnifiedVehicleCosmeticActor::SuperSonicRadialBlurMID' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, SuperSonicBlurOffset) == 0x000358, "Member 'ADelMarUnifiedVehicleCosmeticActor::SuperSonicBlurOffset' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, SuperSonicForwardSpeedMin) == 0x00035C, "Member 'ADelMarUnifiedVehicleCosmeticActor::SuperSonicForwardSpeedMin' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, SuperSonicForwardSpeedMax) == 0x000360, "Member 'ADelMarUnifiedVehicleCosmeticActor::SuperSonicForwardSpeedMax' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, SuperSonicParam_Spawn) == 0x000364, "Member 'ADelMarUnifiedVehicleCosmeticActor::SuperSonicParam_Spawn' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, RadialBlurParam_Offset) == 0x000368, "Member 'ADelMarUnifiedVehicleCosmeticActor::RadialBlurParam_Offset' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, RadialBlurParam_Transition) == 0x00036C, "Member 'ADelMarUnifiedVehicleCosmeticActor::RadialBlurParam_Transition' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, DraftingAudioBehavior) == 0x000378, "Member 'ADelMarUnifiedVehicleCosmeticActor::DraftingAudioBehavior' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, DraftingFX) == 0x000388, "Member 'ADelMarUnifiedVehicleCosmeticActor::DraftingFX' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, DraftingParam_Spawn) == 0x000390, "Member 'ADelMarUnifiedVehicleCosmeticActor::DraftingParam_Spawn' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, DraftingParam_SpeedGain) == 0x000394, "Member 'ADelMarUnifiedVehicleCosmeticActor::DraftingParam_SpeedGain' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, DraftingParam_Amount) == 0x000398, "Member 'ADelMarUnifiedVehicleCosmeticActor::DraftingParam_Amount' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, WorldBonusSpeedAudioBehavior) == 0x0003A0, "Member 'ADelMarUnifiedVehicleCosmeticActor::WorldBonusSpeedAudioBehavior' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, WBSGroupEvent_OnBonusSpeedActivated) == 0x0003B0, "Member 'ADelMarUnifiedVehicleCosmeticActor::WBSGroupEvent_OnBonusSpeedActivated' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, WBSGroupEvent_OnBonusSpeedDeactivated) == 0x0003B4, "Member 'ADelMarUnifiedVehicleCosmeticActor::WBSGroupEvent_OnBonusSpeedDeactivated' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, WBSGroupEvent_OnWorldBonusSpeedStackGained) == 0x0003B8, "Member 'ADelMarUnifiedVehicleCosmeticActor::WBSGroupEvent_OnWorldBonusSpeedStackGained' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, DemolishTag_RaceFinished) == 0x0003BC, "Member 'ADelMarUnifiedVehicleCosmeticActor::DemolishTag_RaceFinished' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, RespawnAudioBehavior) == 0x0003C0, "Member 'ADelMarUnifiedVehicleCosmeticActor::RespawnAudioBehavior' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, DespawnAudioBehavior) == 0x0003D0, "Member 'ADelMarUnifiedVehicleCosmeticActor::DespawnAudioBehavior' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, TaillightTrailFX_Left) == 0x0003E0, "Member 'ADelMarUnifiedVehicleCosmeticActor::TaillightTrailFX_Left' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, TaillightTrailFX_Right) == 0x0003E8, "Member 'ADelMarUnifiedVehicleCosmeticActor::TaillightTrailFX_Right' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, TaillightTrailSocket_Left) == 0x0003F0, "Member 'ADelMarUnifiedVehicleCosmeticActor::TaillightTrailSocket_Left' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, TaillightTrailSocket_Right) == 0x0003F4, "Member 'ADelMarUnifiedVehicleCosmeticActor::TaillightTrailSocket_Right' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, TaillightTrail_MinForwardSpeed) == 0x0003F8, "Member 'ADelMarUnifiedVehicleCosmeticActor::TaillightTrail_MinForwardSpeed' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, UnderthrustAudioBehavior) == 0x000400, "Member 'ADelMarUnifiedVehicleCosmeticActor::UnderthrustAudioBehavior' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, WheelsAudioBehavior) == 0x000410, "Member 'ADelMarUnifiedVehicleCosmeticActor::WheelsAudioBehavior' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, FrontLeftWheelContactBone) == 0x000420, "Member 'ADelMarUnifiedVehicleCosmeticActor::FrontLeftWheelContactBone' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, FrontRightWheelContactBone) == 0x000424, "Member 'ADelMarUnifiedVehicleCosmeticActor::FrontRightWheelContactBone' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, BackRightWheelContactBone) == 0x000428, "Member 'ADelMarUnifiedVehicleCosmeticActor::BackRightWheelContactBone' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, BackLeftWheelContactBone) == 0x00042C, "Member 'ADelMarUnifiedVehicleCosmeticActor::BackLeftWheelContactBone' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, WheelInfos) == 0x000430, "Member 'ADelMarUnifiedVehicleCosmeticActor::WheelInfos' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, FxSideSpeedThreshold) == 0x0004E0, "Member 'ADelMarUnifiedVehicleCosmeticActor::FxSideSpeedThreshold' has a wrong offset!");
static_assert(offsetof(ADelMarUnifiedVehicleCosmeticActor, FxForwardSpeedThreshold) == 0x0004E4, "Member 'ADelMarUnifiedVehicleCosmeticActor::FxForwardSpeedThreshold' has a wrong offset!");

// Class DelMarCosmetics.DelMarVehicleAnimInstance
// 0x0240 (0x06A0 - 0x0460)
class UDelMarVehicleAnimInstance final : public UFortBaseAnimInstance
{
public:
	struct FDelMarBouncyChassisState              BouncyChassis;                                     // 0x0458(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarBouncyChassisSetup              BouncyChassisSetup;                                // 0x0468(0x0058)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         BouncyChassisBlendRate;                            // 0x04C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VisualSteerAngleInterpRate;                        // 0x04C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WheelLerpSpeed;                                    // 0x04C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SuspensionInterpRate;                              // 0x04CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AirSpinAccel;                                      // 0x04D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AirSpinBrake;                                      // 0x04D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AirSpinDecayRate;                                  // 0x04D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDelMarVehicleAnimInfo                 VehicleInfo;                                       // 0x04DC(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bThrottling;                                       // 0x04E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReversing;                                        // 0x04E5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAccelerating;                                     // 0x04E6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBraking;                                          // 0x04E7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Throttle;                                          // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Steering;                                          // 0x04EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SteeringAngle;                                     // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWheelsOnGround;                                   // 0x04F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardSpeed;                                      // 0x04F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDriftBoostActive;                                 // 0x04FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUnderthrustActive;                                // 0x04FD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDriftActive;                                      // 0x04FE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bKickflipActive;                                   // 0x04FF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bJumpActive;                                       // 0x0500(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTurboActive;                                      // 0x0501(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_502[0x2];                                      // 0x0502(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarVehicleWheelAnimInfo            WheelInfoFR;                                       // 0x0504(0x001C)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDelMarVehicleWheelAnimInfo            WheelInfoFL;                                       // 0x0520(0x001C)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDelMarVehicleWheelAnimInfo            WheelInfoBR;                                       // 0x053C(0x001C)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDelMarVehicleWheelAnimInfo            WheelInfoBL;                                       // 0x0558(0x001C)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_574[0x12C];                                    // 0x0574(0x012C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarVehicleAnimInstance">();
	}
	static class UDelMarVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarVehicleAnimInstance>();
	}
};
static_assert(alignof(UDelMarVehicleAnimInstance) == 0x000010, "Wrong alignment on UDelMarVehicleAnimInstance");
static_assert(sizeof(UDelMarVehicleAnimInstance) == 0x0006A0, "Wrong size on UDelMarVehicleAnimInstance");
static_assert(offsetof(UDelMarVehicleAnimInstance, BouncyChassis) == 0x000458, "Member 'UDelMarVehicleAnimInstance::BouncyChassis' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, BouncyChassisSetup) == 0x000468, "Member 'UDelMarVehicleAnimInstance::BouncyChassisSetup' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, BouncyChassisBlendRate) == 0x0004C0, "Member 'UDelMarVehicleAnimInstance::BouncyChassisBlendRate' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, VisualSteerAngleInterpRate) == 0x0004C4, "Member 'UDelMarVehicleAnimInstance::VisualSteerAngleInterpRate' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, WheelLerpSpeed) == 0x0004C8, "Member 'UDelMarVehicleAnimInstance::WheelLerpSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, SuspensionInterpRate) == 0x0004CC, "Member 'UDelMarVehicleAnimInstance::SuspensionInterpRate' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, AirSpinAccel) == 0x0004D0, "Member 'UDelMarVehicleAnimInstance::AirSpinAccel' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, AirSpinBrake) == 0x0004D4, "Member 'UDelMarVehicleAnimInstance::AirSpinBrake' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, AirSpinDecayRate) == 0x0004D8, "Member 'UDelMarVehicleAnimInstance::AirSpinDecayRate' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, VehicleInfo) == 0x0004DC, "Member 'UDelMarVehicleAnimInstance::VehicleInfo' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bThrottling) == 0x0004E4, "Member 'UDelMarVehicleAnimInstance::bThrottling' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bReversing) == 0x0004E5, "Member 'UDelMarVehicleAnimInstance::bReversing' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bAccelerating) == 0x0004E6, "Member 'UDelMarVehicleAnimInstance::bAccelerating' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bBraking) == 0x0004E7, "Member 'UDelMarVehicleAnimInstance::bBraking' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, Throttle) == 0x0004E8, "Member 'UDelMarVehicleAnimInstance::Throttle' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, Steering) == 0x0004EC, "Member 'UDelMarVehicleAnimInstance::Steering' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, SteeringAngle) == 0x0004F0, "Member 'UDelMarVehicleAnimInstance::SteeringAngle' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bWheelsOnGround) == 0x0004F4, "Member 'UDelMarVehicleAnimInstance::bWheelsOnGround' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, ForwardSpeed) == 0x0004F8, "Member 'UDelMarVehicleAnimInstance::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bDriftBoostActive) == 0x0004FC, "Member 'UDelMarVehicleAnimInstance::bDriftBoostActive' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bUnderthrustActive) == 0x0004FD, "Member 'UDelMarVehicleAnimInstance::bUnderthrustActive' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bDriftActive) == 0x0004FE, "Member 'UDelMarVehicleAnimInstance::bDriftActive' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bKickflipActive) == 0x0004FF, "Member 'UDelMarVehicleAnimInstance::bKickflipActive' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bJumpActive) == 0x000500, "Member 'UDelMarVehicleAnimInstance::bJumpActive' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, bTurboActive) == 0x000501, "Member 'UDelMarVehicleAnimInstance::bTurboActive' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, WheelInfoFR) == 0x000504, "Member 'UDelMarVehicleAnimInstance::WheelInfoFR' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, WheelInfoFL) == 0x000520, "Member 'UDelMarVehicleAnimInstance::WheelInfoFL' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, WheelInfoBR) == 0x00053C, "Member 'UDelMarVehicleAnimInstance::WheelInfoBR' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleAnimInstance, WheelInfoBL) == 0x000558, "Member 'UDelMarVehicleAnimInstance::WheelInfoBL' has a wrong offset!");

// Class DelMarCosmetics.DelMarWheelAnimInstance
// 0x0020 (0x0480 - 0x0460)
class UDelMarWheelAnimInstance final : public UFortBaseAnimInstance
{
public:
	uint8                                         Pad_458[0x1C];                                     // 0x0458(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpinDegrees;                                       // 0x0474(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarVehicleAnimInstance*             ParentAnimInstance;                                // 0x0478(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarWheelAnimInstance">();
	}
	static class UDelMarWheelAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarWheelAnimInstance>();
	}
};
static_assert(alignof(UDelMarWheelAnimInstance) == 0x000010, "Wrong alignment on UDelMarWheelAnimInstance");
static_assert(sizeof(UDelMarWheelAnimInstance) == 0x000480, "Wrong size on UDelMarWheelAnimInstance");
static_assert(offsetof(UDelMarWheelAnimInstance, SpinDegrees) == 0x000474, "Member 'UDelMarWheelAnimInstance::SpinDegrees' has a wrong offset!");
static_assert(offsetof(UDelMarWheelAnimInstance, ParentAnimInstance) == 0x000478, "Member 'UDelMarWheelAnimInstance::ParentAnimInstance' has a wrong offset!");

// Class DelMarCosmetics.DelMarDriverCosmeticPlayerComponent
// 0x0060 (0x0100 - 0x00A0)
class UDelMarDriverCosmeticPlayerComponent final : public UPlayerStateComponent
{
public:
	uint8                                         Pad_A0[0x38];                                      // 0x00A0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SequenceBindingTags;                               // 0x00D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDelMarDriverCosmeticData              CosmeticData;                                      // 0x00E8(0x0018)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)

public:
	void HandleBotControllerLoadoutChanged(class ADelMarAIController* AIController, const struct FFortAthenaLoadout& Loadout);
	void HandlePlayerControllerLoadoutChanged(const struct FCosmeticLoadout& Loadout);
	void On_RepCosmeticData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDriverCosmeticPlayerComponent">();
	}
	static class UDelMarDriverCosmeticPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDriverCosmeticPlayerComponent>();
	}
};
static_assert(alignof(UDelMarDriverCosmeticPlayerComponent) == 0x000008, "Wrong alignment on UDelMarDriverCosmeticPlayerComponent");
static_assert(sizeof(UDelMarDriverCosmeticPlayerComponent) == 0x000100, "Wrong size on UDelMarDriverCosmeticPlayerComponent");
static_assert(offsetof(UDelMarDriverCosmeticPlayerComponent, SequenceBindingTags) == 0x0000D8, "Member 'UDelMarDriverCosmeticPlayerComponent::SequenceBindingTags' has a wrong offset!");
static_assert(offsetof(UDelMarDriverCosmeticPlayerComponent, CosmeticData) == 0x0000E8, "Member 'UDelMarDriverCosmeticPlayerComponent::CosmeticData' has a wrong offset!");

// Class DelMarCosmetics.DelMarBodyCosmeticActor
// 0x0098 (0x0360 - 0x02C8)
class ADelMarBodyCosmeticActor final : public ADelMarCosmeticActor
{
public:
	TArray<struct FDelMarVehicleWheelSetup>       FrontLeftWheelsBoneNames;                          // 0x02C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleWheelSetup>       FrontRightWheelsBoneNames;                         // 0x02D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleWheelSetup>       BackRightWheelsBoneNames;                          // 0x02E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleWheelSetup>       BackLeftWheelsBoneNames;                           // 0x02F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleBooster>          LeftBoostersInfo;                                  // 0x0308(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleBooster>          RightBoostersInfo;                                 // 0x0318(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0328(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsAsset*                          PhysicsAsset;                                      // 0x0330(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UAnimInstance>              AnimInstanceClass;                                 // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarVehicleBodySetup*                BodySetup;                                         // 0x0340(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                WheelContactFxOffset;                              // 0x0348(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TSubclassOf<class UAnimInstance> GetAnimInstanceClass() const;
	TArray<struct FDelMarVehicleWheelSetup> GetBackLeftWheelsBoneNames() const;
	TArray<struct FDelMarVehicleWheelSetup> GetBackRightWheelsBoneNames() const;
	const class UDelMarVehicleBodySetup* GetBodySetup() const;
	class UNiagaraComponent* GetBoosterBySocketName(const class FName& SocketName) const;
	TArray<struct FDelMarVehicleWheelSetup> GetFrontLeftWheelsBoneNames() const;
	TArray<struct FDelMarVehicleWheelSetup> GetFrontRightWheelsBoneNames() const;
	TArray<struct FDelMarVehicleBooster> GetLeftBoostersInfo() const;
	class UPhysicsAsset* GetPhysicsAsset() const;
	TArray<struct FDelMarVehicleBooster> GetRightBoostersInfo() const;
	class USkeletalMesh* GetSkeletalMesh() const;
	struct FVector GetWheelCosmeticActorOffset() const;
	TArray<struct FDelMarVehicleWheelSetup> GetWheelSetups(EDelMarVehicleWheelIndex WheelIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarBodyCosmeticActor">();
	}
	static class ADelMarBodyCosmeticActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarBodyCosmeticActor>();
	}
};
static_assert(alignof(ADelMarBodyCosmeticActor) == 0x000008, "Wrong alignment on ADelMarBodyCosmeticActor");
static_assert(sizeof(ADelMarBodyCosmeticActor) == 0x000360, "Wrong size on ADelMarBodyCosmeticActor");
static_assert(offsetof(ADelMarBodyCosmeticActor, FrontLeftWheelsBoneNames) == 0x0002C8, "Member 'ADelMarBodyCosmeticActor::FrontLeftWheelsBoneNames' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, FrontRightWheelsBoneNames) == 0x0002D8, "Member 'ADelMarBodyCosmeticActor::FrontRightWheelsBoneNames' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, BackRightWheelsBoneNames) == 0x0002E8, "Member 'ADelMarBodyCosmeticActor::BackRightWheelsBoneNames' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, BackLeftWheelsBoneNames) == 0x0002F8, "Member 'ADelMarBodyCosmeticActor::BackLeftWheelsBoneNames' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, LeftBoostersInfo) == 0x000308, "Member 'ADelMarBodyCosmeticActor::LeftBoostersInfo' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, RightBoostersInfo) == 0x000318, "Member 'ADelMarBodyCosmeticActor::RightBoostersInfo' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, SkeletalMesh) == 0x000328, "Member 'ADelMarBodyCosmeticActor::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, PhysicsAsset) == 0x000330, "Member 'ADelMarBodyCosmeticActor::PhysicsAsset' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, AnimInstanceClass) == 0x000338, "Member 'ADelMarBodyCosmeticActor::AnimInstanceClass' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, BodySetup) == 0x000340, "Member 'ADelMarBodyCosmeticActor::BodySetup' has a wrong offset!");
static_assert(offsetof(ADelMarBodyCosmeticActor, WheelContactFxOffset) == 0x000348, "Member 'ADelMarBodyCosmeticActor::WheelContactFxOffset' has a wrong offset!");

// Class DelMarCosmetics.DelMarBoosterCosmeticActor
// 0x0030 (0x02F8 - 0x02C8)
class ADelMarBoosterCosmeticActor final : public ADelMarCosmeticActor
{
public:
	class UNiagaraSystem*                         BoosterFx;                                         // 0x02C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleBooster>          LeftBoosters;                                      // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarVehicleBooster>          RightBoosters;                                     // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 BodySkeletalMeshComponent;                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetAllBoostersEnabled(bool bSetFrontBoosters, bool bSetBackBoosters, bool bSetSideBoosters, bool bSetDownBoosters, bool bEnabled, bool bReset);
	void SetLeftBoostersEnabled(bool bSetFrontBoosters, bool bSetBackBoosters, bool bSetSideBoosters, bool bSetDownBoosters, bool bEnabled, bool bReset);
	void SetRightBoostersEnabled(bool bSetFrontBoosters, bool bSetBackBoosters, bool bSetSideBoosters, bool bSetDownBoosters, bool bEnabled, bool bReset);

	TArray<class UNiagaraComponent*> GetAllBoosters(bool bFrontBoosters, bool bBackBoosters, bool bSideBoosters, bool bDownBoosters) const;
	TArray<class UNiagaraComponent*> GetLeftBoosters(bool bFrontBoosters, bool bBackBoosters, bool bSideBoosters, bool bDownBoosters) const;
	TArray<class UNiagaraComponent*> GetRightBoosters(bool bFrontBoosters, bool bBackBoosters, bool bSideBoosters, bool bDownBoosters) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarBoosterCosmeticActor">();
	}
	static class ADelMarBoosterCosmeticActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarBoosterCosmeticActor>();
	}
};
static_assert(alignof(ADelMarBoosterCosmeticActor) == 0x000008, "Wrong alignment on ADelMarBoosterCosmeticActor");
static_assert(sizeof(ADelMarBoosterCosmeticActor) == 0x0002F8, "Wrong size on ADelMarBoosterCosmeticActor");
static_assert(offsetof(ADelMarBoosterCosmeticActor, BoosterFx) == 0x0002C8, "Member 'ADelMarBoosterCosmeticActor::BoosterFx' has a wrong offset!");
static_assert(offsetof(ADelMarBoosterCosmeticActor, LeftBoosters) == 0x0002D0, "Member 'ADelMarBoosterCosmeticActor::LeftBoosters' has a wrong offset!");
static_assert(offsetof(ADelMarBoosterCosmeticActor, RightBoosters) == 0x0002E0, "Member 'ADelMarBoosterCosmeticActor::RightBoosters' has a wrong offset!");
static_assert(offsetof(ADelMarBoosterCosmeticActor, BodySkeletalMeshComponent) == 0x0002F0, "Member 'ADelMarBoosterCosmeticActor::BodySkeletalMeshComponent' has a wrong offset!");

// Class DelMarCosmetics.DelMarEngineAudioCosmeticActor
// 0x0048 (0x0310 - 0x02C8)
class ADelMarEngineAudioCosmeticActor final : public ADelMarCosmeticActor
{
public:
	struct FAudioGameplayBehaviorInstance         EngineAudio;                                       // 0x02C8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         NonLocalVelocityInterpSpeed;                       // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x02DC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponentGroup*                   ComponentGroup;                                    // 0x02E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioMotorModelComponent*              MotorModel;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x20];                                     // 0x02F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UAudioComponentGroup* GetComponentGroup() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarEngineAudioCosmeticActor">();
	}
	static class ADelMarEngineAudioCosmeticActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarEngineAudioCosmeticActor>();
	}
};
static_assert(alignof(ADelMarEngineAudioCosmeticActor) == 0x000008, "Wrong alignment on ADelMarEngineAudioCosmeticActor");
static_assert(sizeof(ADelMarEngineAudioCosmeticActor) == 0x000310, "Wrong size on ADelMarEngineAudioCosmeticActor");
static_assert(offsetof(ADelMarEngineAudioCosmeticActor, EngineAudio) == 0x0002C8, "Member 'ADelMarEngineAudioCosmeticActor::EngineAudio' has a wrong offset!");
static_assert(offsetof(ADelMarEngineAudioCosmeticActor, NonLocalVelocityInterpSpeed) == 0x0002D8, "Member 'ADelMarEngineAudioCosmeticActor::NonLocalVelocityInterpSpeed' has a wrong offset!");
static_assert(offsetof(ADelMarEngineAudioCosmeticActor, bDisabled) == 0x0002DC, "Member 'ADelMarEngineAudioCosmeticActor::bDisabled' has a wrong offset!");
static_assert(offsetof(ADelMarEngineAudioCosmeticActor, ComponentGroup) == 0x0002E0, "Member 'ADelMarEngineAudioCosmeticActor::ComponentGroup' has a wrong offset!");
static_assert(offsetof(ADelMarEngineAudioCosmeticActor, MotorModel) == 0x0002E8, "Member 'ADelMarEngineAudioCosmeticActor::MotorModel' has a wrong offset!");

// Class DelMarCosmetics.DelMarWheelContactFxCosmeticActor
// 0x00E0 (0x03A8 - 0x02C8)
class ADelMarWheelContactFxCosmeticActor final : public ADelMarCosmeticActor
{
public:
	struct FAudioGameplayBehaviorInstance         WheelSounds;                                       // 0x02C8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         FxSideSpeedThreshold;                              // 0x02D8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FxForwardSpeedThreshold;                           // 0x02DC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicalMaterial*                      ContactMaterial;                                   // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarVehicleCosmeticWheelInfo> WheelInfos;                                        // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FName                                   FrontLeftWheelContactBone;                         // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FrontRightWheelContactBone;                        // 0x0304(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BackRightWheelContactBone;                         // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BackLeftWheelContactBone;                          // 0x030C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_310[0x98];                                     // 0x0310(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_UpdateWheelContactFx(const struct FDelMarVehicleCosmeticWheelInfo& WheelInfo, bool bActive, float AbsForwardSpeed, float AbsSideSpeed);
	void HandleVehicleLanded(float LandingForce, bool bLandedKickflip);

	class UAudioGameplayBehavior* GetAudioBehavior() const;
	class FName GetWheelContactBoneName(EDelMarVehicleWheelIndex WheelIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarWheelContactFxCosmeticActor">();
	}
	static class ADelMarWheelContactFxCosmeticActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarWheelContactFxCosmeticActor>();
	}
};
static_assert(alignof(ADelMarWheelContactFxCosmeticActor) == 0x000008, "Wrong alignment on ADelMarWheelContactFxCosmeticActor");
static_assert(sizeof(ADelMarWheelContactFxCosmeticActor) == 0x0003A8, "Wrong size on ADelMarWheelContactFxCosmeticActor");
static_assert(offsetof(ADelMarWheelContactFxCosmeticActor, WheelSounds) == 0x0002C8, "Member 'ADelMarWheelContactFxCosmeticActor::WheelSounds' has a wrong offset!");
static_assert(offsetof(ADelMarWheelContactFxCosmeticActor, FxSideSpeedThreshold) == 0x0002D8, "Member 'ADelMarWheelContactFxCosmeticActor::FxSideSpeedThreshold' has a wrong offset!");
static_assert(offsetof(ADelMarWheelContactFxCosmeticActor, FxForwardSpeedThreshold) == 0x0002DC, "Member 'ADelMarWheelContactFxCosmeticActor::FxForwardSpeedThreshold' has a wrong offset!");
static_assert(offsetof(ADelMarWheelContactFxCosmeticActor, ContactMaterial) == 0x0002E0, "Member 'ADelMarWheelContactFxCosmeticActor::ContactMaterial' has a wrong offset!");
static_assert(offsetof(ADelMarWheelContactFxCosmeticActor, WheelInfos) == 0x0002F0, "Member 'ADelMarWheelContactFxCosmeticActor::WheelInfos' has a wrong offset!");
static_assert(offsetof(ADelMarWheelContactFxCosmeticActor, FrontLeftWheelContactBone) == 0x000300, "Member 'ADelMarWheelContactFxCosmeticActor::FrontLeftWheelContactBone' has a wrong offset!");
static_assert(offsetof(ADelMarWheelContactFxCosmeticActor, FrontRightWheelContactBone) == 0x000304, "Member 'ADelMarWheelContactFxCosmeticActor::FrontRightWheelContactBone' has a wrong offset!");
static_assert(offsetof(ADelMarWheelContactFxCosmeticActor, BackRightWheelContactBone) == 0x000308, "Member 'ADelMarWheelContactFxCosmeticActor::BackRightWheelContactBone' has a wrong offset!");
static_assert(offsetof(ADelMarWheelContactFxCosmeticActor, BackLeftWheelContactBone) == 0x00030C, "Member 'ADelMarWheelContactFxCosmeticActor::BackLeftWheelContactBone' has a wrong offset!");

// Class DelMarCosmetics.DelMarCosmeticActorSpawnLogic_Wheel
// 0x0008 (0x0030 - 0x0028)
class UDelMarCosmeticActorSpawnLogic_Wheel final : public UDelMarCosmeticActorSpawnLogic
{
public:
	bool                                          bFrontWheel;                                       // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackWheel;                                        // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarWheelAttachPoint                       AttachPoint;                                       // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarWheelMirrorType                        MirrorType;                                        // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyFxEligibleWheels;                             // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarCosmeticActorSpawnLogic_Wheel">();
	}
	static class UDelMarCosmeticActorSpawnLogic_Wheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarCosmeticActorSpawnLogic_Wheel>();
	}
};
static_assert(alignof(UDelMarCosmeticActorSpawnLogic_Wheel) == 0x000008, "Wrong alignment on UDelMarCosmeticActorSpawnLogic_Wheel");
static_assert(sizeof(UDelMarCosmeticActorSpawnLogic_Wheel) == 0x000030, "Wrong size on UDelMarCosmeticActorSpawnLogic_Wheel");
static_assert(offsetof(UDelMarCosmeticActorSpawnLogic_Wheel, bFrontWheel) == 0x000028, "Member 'UDelMarCosmeticActorSpawnLogic_Wheel::bFrontWheel' has a wrong offset!");
static_assert(offsetof(UDelMarCosmeticActorSpawnLogic_Wheel, bBackWheel) == 0x000029, "Member 'UDelMarCosmeticActorSpawnLogic_Wheel::bBackWheel' has a wrong offset!");
static_assert(offsetof(UDelMarCosmeticActorSpawnLogic_Wheel, AttachPoint) == 0x00002A, "Member 'UDelMarCosmeticActorSpawnLogic_Wheel::AttachPoint' has a wrong offset!");
static_assert(offsetof(UDelMarCosmeticActorSpawnLogic_Wheel, MirrorType) == 0x00002B, "Member 'UDelMarCosmeticActorSpawnLogic_Wheel::MirrorType' has a wrong offset!");
static_assert(offsetof(UDelMarCosmeticActorSpawnLogic_Wheel, bOnlyFxEligibleWheels) == 0x00002C, "Member 'UDelMarCosmeticActorSpawnLogic_Wheel::bOnlyFxEligibleWheels' has a wrong offset!");

// Class DelMarCosmetics.DelMarWheelsCosmeticActor
// 0x0008 (0x02D0 - 0x02C8)
class ADelMarWheelsCosmeticActor : public ADelMarCosmeticActor
{
public:
	EDelMarVehicleWheelIndex                      WheelIndex;                                        // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EDelMarWheelMirrorType GetMirrorType() const;
	bool IsBackWheel() const;
	bool IsFrontWheel() const;
	bool IsLeftWheel() const;
	bool IsMirrored() const;
	bool IsRightWheel() const;
	bool IsWheelOnGround() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarWheelsCosmeticActor">();
	}
	static class ADelMarWheelsCosmeticActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarWheelsCosmeticActor>();
	}
};
static_assert(alignof(ADelMarWheelsCosmeticActor) == 0x000008, "Wrong alignment on ADelMarWheelsCosmeticActor");
static_assert(sizeof(ADelMarWheelsCosmeticActor) == 0x0002D0, "Wrong size on ADelMarWheelsCosmeticActor");
static_assert(offsetof(ADelMarWheelsCosmeticActor, WheelIndex) == 0x0002C8, "Member 'ADelMarWheelsCosmeticActor::WheelIndex' has a wrong offset!");

// Class DelMarCosmetics.DelMarWheelSKCosmeticActor
// 0x0008 (0x02D8 - 0x02D0)
class ADelMarWheelSKCosmeticActor final : public ADelMarWheelsCosmeticActor
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarWheelSKCosmeticActor">();
	}
	static class ADelMarWheelSKCosmeticActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarWheelSKCosmeticActor>();
	}
};
static_assert(alignof(ADelMarWheelSKCosmeticActor) == 0x000008, "Wrong alignment on ADelMarWheelSKCosmeticActor");
static_assert(sizeof(ADelMarWheelSKCosmeticActor) == 0x0002D8, "Wrong size on ADelMarWheelSKCosmeticActor");
static_assert(offsetof(ADelMarWheelSKCosmeticActor, SkeletalMeshComponent) == 0x0002D0, "Member 'ADelMarWheelSKCosmeticActor::SkeletalMeshComponent' has a wrong offset!");

}

