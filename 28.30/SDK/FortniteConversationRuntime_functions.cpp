#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteConversationRuntime

#include "Basic.hpp"

#include "FortniteConversationRuntime_classes.hpp"
#include "FortniteConversationRuntime_parameters.hpp"


namespace SDK
{

// Function FortniteConversationRuntime.FortConversationContextCondition.DoesContextPass
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FConversationContext             Context                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortConversationContextCondition::DoesContextPass(const struct FConversationContext& Context) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DoesContextPass");

	Params::FortConversationContextCondition_DoesContextPass Parms{};

	Parms.Context = std::move(Context);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FortniteConversationRuntime.FortConversationContextConditionHelpers.GetMessageForContext
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortConversationNodeConditionalMessagesMessages                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FConversationContext             Context                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FText                             OutText                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortConversationContextConditionHelpers::GetMessageForContext(const struct FFortConversationNodeConditionalMessages& Messages, const struct FConversationContext& Context, class FText* OutText)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMessageForContext");

	Params::FortConversationContextConditionHelpers_GetMessageForContext Parms{};

	Parms.Messages = std::move(Messages);
	Parms.Context = std::move(Context);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);

	return Parms.ReturnValue;
}


// Function FortniteConversationRuntime.FortConversationParamLibrary.ExtractConversationParameterValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FConversationNodeParameterPair>ConversationParameters                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           DesiredParameterName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterValueOut                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortConversationParamLibrary::ExtractConversationParameterValue(const TArray<struct FConversationNodeParameterPair>& ConversationParameters, const class FString& DesiredParameterName, class FString* ParameterValueOut)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ExtractConversationParameterValue");

	Params::FortConversationParamLibrary_ExtractConversationParameterValue Parms{};

	Parms.ConversationParameters = std::move(ConversationParameters);
	Parms.DesiredParameterName = std::move(DesiredParameterName);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (ParameterValueOut != nullptr)
		*ParameterValueOut = std::move(Parms.ParameterValueOut);

	return Parms.ReturnValue;
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.ClientReceiveConversationGiftUINotification
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FGiftUINotificationInfo          ConversationGiftUINotification                         (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortPlayerConversationComponent::ClientReceiveConversationGiftUINotification(const struct FGiftUINotificationInfo& ConversationGiftUINotification)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientReceiveConversationGiftUINotification");

	Params::FortPlayerConversationComponent_ClientReceiveConversationGiftUINotification Parms{};

	Parms.ConversationGiftUINotification = std::move(ConversationGiftUINotification);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.ClientSpectatorCloseUI
// (Net, NetReliable, Native, Event, Public, NetClient)

void UFortPlayerConversationComponent::ClientSpectatorCloseUI()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientSpectatorCloseUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.ClientSpectatorEnterConversationState
// (Net, NetReliable, Native, Event, Public, NetClient)

void UFortPlayerConversationComponent::ClientSpectatorEnterConversationState()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientSpectatorEnterConversationState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.ClientSpectatorLeaveConversationState
// (Net, NetReliable, Native, Event, Public, NetClient)

void UFortPlayerConversationComponent::ClientSpectatorLeaveConversationState()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientSpectatorLeaveConversationState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.ClientSpectatorOpenUI
// (Net, NetReliable, Native, Event, Public, NetClient)

void UFortPlayerConversationComponent::ClientSpectatorOpenUI()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientSpectatorOpenUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.HandleDBNOChanged
// (Final, Native, Private)
// Parameters:
// class AFortPawn*                        Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsDBNO                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerConversationComponent::HandleDBNOChanged(class AFortPawn* Pawn, bool bIsDBNO)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDBNOChanged");

	Params::FortPlayerConversationComponent_HandleDBNOChanged Parms{};

	Parms.Pawn = Pawn;
	Parms.bIsDBNO = bIsDBNO;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.HandleFollowedPlayerChanged
// (Final, Native, Private)
// Parameters:
// class AFortPlayerControllerSpectating*  SpectatingPC                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerState*                 FollowedPlayerState                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerConversationComponent::HandleFollowedPlayerChanged(class AFortPlayerControllerSpectating* SpectatingPC, class AFortPlayerState* FollowedPlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleFollowedPlayerChanged");

	Params::FortPlayerConversationComponent_HandleFollowedPlayerChanged Parms{};

	Parms.SpectatingPC = SpectatingPC;
	Parms.FollowedPlayerState = FollowedPlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.HandleViewTargetChanged
// (Final, Native, Private)

void UFortPlayerConversationComponent::HandleViewTargetChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleViewTargetChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.HandleWeaponEquipped
// (Final, Native, Private)
// Parameters:
// class AFortWeapon*                      NewWeapon                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      PrevWeapon                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerConversationComponent::HandleWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWeaponEquipped");

	Params::FortPlayerConversationComponent_HandleWeaponEquipped Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.PrevWeapon = PrevWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.RequestServerAbortConversation
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UFortPlayerConversationComponent::RequestServerAbortConversation()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestServerAbortConversation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FortniteConversationRuntime.FortPlayerConversationComponent.RequestServerAbortConversationWithParticipant
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UFortNonPlayerConversationParticipantComponent*Participant                                            (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerConversationComponent::RequestServerAbortConversationWithParticipant(const class UFortNonPlayerConversationParticipantComponent* Participant)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestServerAbortConversationWithParticipant");

	Params::FortPlayerConversationComponent_RequestServerAbortConversationWithParticipant Parms{};

	Parms.Participant = Participant;

	UObject::ProcessEvent(Func, &Parms);
}

}

