#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseConcurrency

#include "Basic.hpp"

#include "VerseConcurrency_classes.hpp"
#include "VerseConcurrency_parameters.hpp"


namespace SDK
{

// Function VerseConcurrency._Root._L_2fVerse_2eorg_2fConcurrency_N_Rawaitable
// (Final, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// class UClass*                           RetVal                                                 (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)

class UClass* VerseConcurrency::U_Root::_L_2fVerse_2eorg_2fConcurrency_N_Rawaitable(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("_L_2fVerse_2eorg_2fConcurrency_N_Rawaitable");

	Params::_Root__L_2fVerse_2eorg_2fConcurrency_N_Rawaitable Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency._Root._L_2fVerse_2eorg_2fConcurrency_N_Rawaitable_L_Npayload_20where_20payload_R
// (Final, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           __verse_0xB2CDDD72_Argument                            (ExportObject, Parm, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
// class UClass*                           RetVal                                                 (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)

class UClass* VerseConcurrency::U_Root::_L_2fVerse_2eorg_2fConcurrency_N_Rawaitable_L_Npayload_20where_20payload_R(class UClass* __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("_L_2fVerse_2eorg_2fConcurrency_N_Rawaitable_L_Npayload_20where_20payload_R");

	Params::_Root__L_2fVerse_2eorg_2fConcurrency_N_Rawaitable_L_Npayload_20where_20payload_R Parms{};

	Parms.__verse_0xB2CDDD72_Argument = __verse_0xB2CDDD72_Argument;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency._Root._L_2fVerse_2eorg_2fConcurrency_N_Rtask_L_Nt_20where_20t_R
// (Final, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           __verse_0xB2CDDD72_Argument                            (ExportObject, Parm, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
// class UClass*                           RetVal                                                 (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)

class UClass* VerseConcurrency::U_Root::_L_2fVerse_2eorg_2fConcurrency_N_Rtask_L_Nt_20where_20t_R(class UClass* __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("_L_2fVerse_2eorg_2fConcurrency_N_Rtask_L_Nt_20where_20t_R");

	Params::_Root__L_2fVerse_2eorg_2fConcurrency_N_Rtask_L_Nt_20where_20t_R Parms{};

	Parms.__verse_0xB2CDDD72_Argument = __verse_0xB2CDDD72_Argument;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency._Root.$InitCDO
// ()

void VerseConcurrency::U_Root::_InitCDO()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("$InitCDO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VerseConcurrency.task.$Block
// ()

void Utask::_Block()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("$Block");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VerseConcurrency.task.$InitCDO
// ()

void Utask::_InitCDO()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("$InitCDO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VerseConcurrency.task.$InitInstance
// ()

void Utask::_InitInstance()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("$InitInstance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VerseConcurrency.task._L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RActive
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// TOptional<EVerseTrue>                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TOptional<EVerseTrue> Utask::_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RActive(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RActive");

	Params::task__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RActive Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task._L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCancel
// (Native, Public, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)

void Utask::_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCancel(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCancel");

	Params::task__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCancel Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VerseConcurrency.task._L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceled
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// TOptional<EVerseTrue>                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TOptional<EVerseTrue> Utask::_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceled(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceled");

	Params::task__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceled Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task._L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceling
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// TOptional<EVerseTrue>                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TOptional<EVerseTrue> Utask::_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceling(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceling");

	Params::task__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCanceling Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task._L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCompleted
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// TOptional<EVerseTrue>                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TOptional<EVerseTrue> Utask::_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCompleted(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCompleted");

	Params::task__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RCompleted Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task._L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RInterrupted
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// TOptional<EVerseTrue>                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TOptional<EVerseTrue> Utask::_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RInterrupted(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RInterrupted");

	Params::task__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RInterrupted Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task._L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RSettled
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// TOptional<EVerseTrue>                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TOptional<EVerseTrue> Utask::_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RSettled(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RSettled");

	Params::task__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RSettled Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task._L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUninterrupted
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// TOptional<EVerseTrue>                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TOptional<EVerseTrue> Utask::_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUninterrupted(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUninterrupted");

	Params::task__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUninterrupted Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task._L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUnsettled
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// TOptional<EVerseTrue>                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TOptional<EVerseTrue> Utask::_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUnsettled(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUnsettled");

	Params::task__L_2fVerse_2eorg_2fConcurrency_2ftask_2ftask_Lt_R_N_RUnsettled Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task.Await
// (Public, HasOutParams, BlueprintCallable)
// Parameters:
// class Utask*                            __verse_0xC1E81372_CallingTask                         (ExportObject, Parm, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
// int64                                   __verse_0xA3A00DDB_CallerResumeState                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   __verse_0x2AC0E4D8_CallerCancelState                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// class Utask*                            RetVal                                                 (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)

class Utask* Utask::Await(class Utask* __verse_0xC1E81372_CallingTask, int64 __verse_0xA3A00DDB_CallerResumeState, int64 __verse_0x2AC0E4D8_CallerCancelState, const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Await");

	Params::task_Await Parms{};

	Parms.__verse_0xC1E81372_CallingTask = __verse_0xC1E81372_CallingTask;
	Parms.__verse_0xA3A00DDB_CallerResumeState = __verse_0xA3A00DDB_CallerResumeState;
	Parms.__verse_0x2AC0E4D8_CallerCancelState = __verse_0x2AC0E4D8_CallerCancelState;
	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task_awaitable$Await.Update
// (Public, HasOutParams)
// Parameters:
// int64                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int64 Utask_awaitable_Await::Update()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Update");

	Params::task_awaitable_Await_Update Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.awaitable.Await
// (Public, HasOutParams, BlueprintCallable)
// Parameters:
// class Utask*                            __verse_0xC1E81372_CallingTask                         (ExportObject, Parm, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)
// int64                                   __verse_0xA3A00DDB_CallerResumeState                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   __verse_0x2AC0E4D8_CallerCancelState                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// class Utask*                            RetVal                                                 (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash)

class Utask* Uawaitable::Await(class Utask* __verse_0xC1E81372_CallingTask, int64 __verse_0xA3A00DDB_CallerResumeState, int64 __verse_0x2AC0E4D8_CallerCancelState, const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Await");

	Params::awaitable_Await Parms{};

	Parms.__verse_0xC1E81372_CallingTask = __verse_0xC1E81372_CallingTask;
	Parms.__verse_0xA3A00DDB_CallerResumeState = __verse_0xA3A00DDB_CallerResumeState;
	Parms.__verse_0x2AC0E4D8_CallerCancelState = __verse_0x2AC0E4D8_CallerCancelState;
	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task_group.$Block
// ()

void Utask_group::_Block()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("$Block");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VerseConcurrency.task_group.$InitCDO
// ()

void Utask_group::_InitCDO()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("$InitCDO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VerseConcurrency.task_group.$InitInstance
// ()

void Utask_group::_InitInstance()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("$InitInstance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VerseConcurrency.task_group._L_2fVerse_2eorg_2fConcurrency_2ftask__group_N_RGetNumActive
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct VerseConcurrency::Ftuple_L_R     __verse_0xB2CDDD72_Argument                            (Parm, HasGetValueTypeHash)
// int64                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int64 Utask_group::_L_2fVerse_2eorg_2fConcurrency_2ftask__group_N_RGetNumActive(const struct VerseConcurrency::Ftuple_L_R& __verse_0xB2CDDD72_Argument)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("_L_2fVerse_2eorg_2fConcurrency_2ftask__group_N_RGetNumActive");

	Params::task_group__L_2fVerse_2eorg_2fConcurrency_2ftask__group_N_RGetNumActive Parms{};

	Parms.__verse_0xB2CDDD72_Argument = std::move(__verse_0xB2CDDD72_Argument);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VerseConcurrency.task_task$Await.Update
// (Native, Public, HasOutParams)
// Parameters:
// int64                                   RetVal                                                 (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int64 Utask_task_Await::Update()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Update");

	Params::task_task_Await_Update Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

