#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicBacchusHUD

#include "Basic.hpp"

#include "DynamicUI_structs.hpp"
#include "DynamicUI_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK
{

// Class DynamicBacchusHUD.DynamicBacchusHUDDirector
// 0x01C8 (0x0478 - 0x02B0)
class ADynamicBacchusHUDDirector : public ADynamicUIDirectorBase
{
public:
	struct FDynamicUIWidgetTarget                 TouchControlRegionWidget;                          // 0x02B0(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UFortMobileHUDWidgetRegistry*           BaseHUDWidgetRegistry;                             // 0x0310(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDynamicUIScene*                        WatermarkScene;                                    // 0x0318(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, class UDynamicUIMobileScene*> ScenesPool;                                        // 0x0320(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UFortMobileHUDWidgetRegistry*           HUDWidgetRegistry;                                 // 0x0370(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0xA0];                                     // 0x0378(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CurrentContextTags;                                // 0x0418(0x0020)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FFortMobileHUDLayoutProfile            LayoutProfile;                                     // 0x0438(0x0040)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicBacchusHUDDirector">();
	}
	static class ADynamicBacchusHUDDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADynamicBacchusHUDDirector>();
	}
};
static_assert(alignof(ADynamicBacchusHUDDirector) == 0x000008, "Wrong alignment on ADynamicBacchusHUDDirector");
static_assert(sizeof(ADynamicBacchusHUDDirector) == 0x000478, "Wrong size on ADynamicBacchusHUDDirector");
static_assert(offsetof(ADynamicBacchusHUDDirector, TouchControlRegionWidget) == 0x0002B0, "Member 'ADynamicBacchusHUDDirector::TouchControlRegionWidget' has a wrong offset!");
static_assert(offsetof(ADynamicBacchusHUDDirector, BaseHUDWidgetRegistry) == 0x000310, "Member 'ADynamicBacchusHUDDirector::BaseHUDWidgetRegistry' has a wrong offset!");
static_assert(offsetof(ADynamicBacchusHUDDirector, WatermarkScene) == 0x000318, "Member 'ADynamicBacchusHUDDirector::WatermarkScene' has a wrong offset!");
static_assert(offsetof(ADynamicBacchusHUDDirector, ScenesPool) == 0x000320, "Member 'ADynamicBacchusHUDDirector::ScenesPool' has a wrong offset!");
static_assert(offsetof(ADynamicBacchusHUDDirector, HUDWidgetRegistry) == 0x000370, "Member 'ADynamicBacchusHUDDirector::HUDWidgetRegistry' has a wrong offset!");
static_assert(offsetof(ADynamicBacchusHUDDirector, CurrentContextTags) == 0x000418, "Member 'ADynamicBacchusHUDDirector::CurrentContextTags' has a wrong offset!");
static_assert(offsetof(ADynamicBacchusHUDDirector, LayoutProfile) == 0x000438, "Member 'ADynamicBacchusHUDDirector::LayoutProfile' has a wrong offset!");

// Class DynamicBacchusHUD.DynamicUIMobileScene
// 0x00C0 (0x0138 - 0x0078)
class UDynamicUIMobileScene final : public UDynamicUIScene
{
public:
	uint8                                         Pad_78[0xC0];                                      // 0x0078(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIMobileScene">();
	}
	static class UDynamicUIMobileScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIMobileScene>();
	}
};
static_assert(alignof(UDynamicUIMobileScene) == 0x000008, "Wrong alignment on UDynamicUIMobileScene");
static_assert(sizeof(UDynamicUIMobileScene) == 0x000138, "Wrong size on UDynamicUIMobileScene");

}

