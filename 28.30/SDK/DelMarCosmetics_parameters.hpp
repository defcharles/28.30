#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarCosmetics

#include "Basic.hpp"

#include "DelMarCore_structs.hpp"
#include "DelMarCosmetics_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CosmeticsFrameworkLoadouts_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function DelMarCosmetics.DelMarPreviewVehicle.BroadcastVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarPreviewVehicle_BroadcastVehicleDemolished final
{
public:
	struct FGameplayTag                           DemolishCausedByTag;                               // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPreviewVehicle_BroadcastVehicleDemolished) == 0x000004, "Wrong alignment on DelMarPreviewVehicle_BroadcastVehicleDemolished");
static_assert(sizeof(DelMarPreviewVehicle_BroadcastVehicleDemolished) == 0x000004, "Wrong size on DelMarPreviewVehicle_BroadcastVehicleDemolished");
static_assert(offsetof(DelMarPreviewVehicle_BroadcastVehicleDemolished, DemolishCausedByTag) == 0x000000, "Member 'DelMarPreviewVehicle_BroadcastVehicleDemolished::DemolishCausedByTag' has a wrong offset!");

// Function DelMarCosmetics.DelMarPreviewVehicle.GetBouncyChassisConfig
// 0x000C (0x000C - 0x0000)
struct DelMarPreviewVehicle_GetBouncyChassisConfig final
{
public:
	struct FDelMarBouncyChassisState              ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPreviewVehicle_GetBouncyChassisConfig) == 0x000004, "Wrong alignment on DelMarPreviewVehicle_GetBouncyChassisConfig");
static_assert(sizeof(DelMarPreviewVehicle_GetBouncyChassisConfig) == 0x00000C, "Wrong size on DelMarPreviewVehicle_GetBouncyChassisConfig");
static_assert(offsetof(DelMarPreviewVehicle_GetBouncyChassisConfig, ReturnValue) == 0x000000, "Member 'DelMarPreviewVehicle_GetBouncyChassisConfig::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarPreviewVehicle.IsWheelOnGround
// 0x0002 (0x0002 - 0x0000)
struct DelMarPreviewVehicle_IsWheelOnGround final
{
public:
	EDelMarVehicleWheelIndex                      WheelIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPreviewVehicle_IsWheelOnGround) == 0x000001, "Wrong alignment on DelMarPreviewVehicle_IsWheelOnGround");
static_assert(sizeof(DelMarPreviewVehicle_IsWheelOnGround) == 0x000002, "Wrong size on DelMarPreviewVehicle_IsWheelOnGround");
static_assert(offsetof(DelMarPreviewVehicle_IsWheelOnGround, WheelIndex) == 0x000000, "Member 'DelMarPreviewVehicle_IsWheelOnGround::WheelIndex' has a wrong offset!");
static_assert(offsetof(DelMarPreviewVehicle_IsWheelOnGround, ReturnValue) == 0x000001, "Member 'DelMarPreviewVehicle_IsWheelOnGround::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarGaragePreviewVehicle.PreviewItem
// 0x0008 (0x0008 - 0x0000)
struct DelMarGaragePreviewVehicle_PreviewItem final
{
public:
	const class UDelMarCosmeticItemDefinition*    Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGaragePreviewVehicle_PreviewItem) == 0x000008, "Wrong alignment on DelMarGaragePreviewVehicle_PreviewItem");
static_assert(sizeof(DelMarGaragePreviewVehicle_PreviewItem) == 0x000008, "Wrong size on DelMarGaragePreviewVehicle_PreviewItem");
static_assert(offsetof(DelMarGaragePreviewVehicle_PreviewItem, Item) == 0x000000, "Member 'DelMarGaragePreviewVehicle_PreviewItem::Item' has a wrong offset!");

// Function DelMarCosmetics.DelMarGaragePreviewVehicle.PreviewLoadout
// 0x0050 (0x0050 - 0x0000)
struct DelMarGaragePreviewVehicle_PreviewLoadout final
{
public:
	struct FDelMarLoadout                         Loadout;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGaragePreviewVehicle_PreviewLoadout) == 0x000008, "Wrong alignment on DelMarGaragePreviewVehicle_PreviewLoadout");
static_assert(sizeof(DelMarGaragePreviewVehicle_PreviewLoadout) == 0x000050, "Wrong size on DelMarGaragePreviewVehicle_PreviewLoadout");
static_assert(offsetof(DelMarGaragePreviewVehicle_PreviewLoadout, Loadout) == 0x000000, "Member 'DelMarGaragePreviewVehicle_PreviewLoadout::Loadout' has a wrong offset!");

// Function DelMarCosmetics.DelMarGaragePreviewVehicle.SetPreviewSlot
// 0x0004 (0x0004 - 0x0000)
struct DelMarGaragePreviewVehicle_SetPreviewSlot final
{
public:
	struct FGameplayTag                           InSlot;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGaragePreviewVehicle_SetPreviewSlot) == 0x000004, "Wrong alignment on DelMarGaragePreviewVehicle_SetPreviewSlot");
static_assert(sizeof(DelMarGaragePreviewVehicle_SetPreviewSlot) == 0x000004, "Wrong size on DelMarGaragePreviewVehicle_SetPreviewSlot");
static_assert(offsetof(DelMarGaragePreviewVehicle_SetPreviewSlot, InSlot) == 0x000000, "Member 'DelMarGaragePreviewVehicle_SetPreviewSlot::InSlot' has a wrong offset!");

// Function DelMarCosmetics.DelMarGaragePreviewVehicle.SetUserRotationOffset
// 0x0018 (0x0018 - 0x0000)
struct DelMarGaragePreviewVehicle_SetUserRotationOffset final
{
public:
	struct FRotator                               InRotationOffset;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGaragePreviewVehicle_SetUserRotationOffset) == 0x000008, "Wrong alignment on DelMarGaragePreviewVehicle_SetUserRotationOffset");
static_assert(sizeof(DelMarGaragePreviewVehicle_SetUserRotationOffset) == 0x000018, "Wrong size on DelMarGaragePreviewVehicle_SetUserRotationOffset");
static_assert(offsetof(DelMarGaragePreviewVehicle_SetUserRotationOffset, InRotationOffset) == 0x000000, "Member 'DelMarGaragePreviewVehicle_SetUserRotationOffset::InRotationOffset' has a wrong offset!");

// Function DelMarCosmetics.DelMarGaragePreviewVehicle.SetZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct DelMarGaragePreviewVehicle_SetZoomLevel final
{
public:
	float                                         InZoomLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGaragePreviewVehicle_SetZoomLevel) == 0x000004, "Wrong alignment on DelMarGaragePreviewVehicle_SetZoomLevel");
static_assert(sizeof(DelMarGaragePreviewVehicle_SetZoomLevel) == 0x000004, "Wrong size on DelMarGaragePreviewVehicle_SetZoomLevel");
static_assert(offsetof(DelMarGaragePreviewVehicle_SetZoomLevel, InZoomLevel) == 0x000000, "Member 'DelMarGaragePreviewVehicle_SetZoomLevel::InZoomLevel' has a wrong offset!");

// Function DelMarCosmetics.DelMarGaragePreviewVehicle.GetRotationOffset
// 0x0018 (0x0018 - 0x0000)
struct DelMarGaragePreviewVehicle_GetRotationOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGaragePreviewVehicle_GetRotationOffset) == 0x000008, "Wrong alignment on DelMarGaragePreviewVehicle_GetRotationOffset");
static_assert(sizeof(DelMarGaragePreviewVehicle_GetRotationOffset) == 0x000018, "Wrong size on DelMarGaragePreviewVehicle_GetRotationOffset");
static_assert(offsetof(DelMarGaragePreviewVehicle_GetRotationOffset, ReturnValue) == 0x000000, "Member 'DelMarGaragePreviewVehicle_GetRotationOffset::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarGaragePreviewVehicle.IsRotationTransitioning
// 0x0001 (0x0001 - 0x0000)
struct DelMarGaragePreviewVehicle_IsRotationTransitioning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGaragePreviewVehicle_IsRotationTransitioning) == 0x000001, "Wrong alignment on DelMarGaragePreviewVehicle_IsRotationTransitioning");
static_assert(sizeof(DelMarGaragePreviewVehicle_IsRotationTransitioning) == 0x000001, "Wrong size on DelMarGaragePreviewVehicle_IsRotationTransitioning");
static_assert(offsetof(DelMarGaragePreviewVehicle_IsRotationTransitioning, ReturnValue) == 0x000000, "Member 'DelMarGaragePreviewVehicle_IsRotationTransitioning::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.OnDraftStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_OnDraftStateChanged final
{
public:
	EDelmarDraftingState                          CurrentState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_OnDraftStateChanged) == 0x000001, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_OnDraftStateChanged");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_OnDraftStateChanged) == 0x000001, "Wrong size on DelMarUnifiedVehicleCosmeticActor_OnDraftStateChanged");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnDraftStateChanged, CurrentState) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_OnDraftStateChanged::CurrentState' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.OnDriftDurationChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_OnDriftDurationChanged final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_OnDriftDurationChanged) == 0x000004, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_OnDriftDurationChanged");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_OnDriftDurationChanged) == 0x000004, "Wrong size on DelMarUnifiedVehicleCosmeticActor_OnDriftDurationChanged");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnDriftDurationChanged, duration) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_OnDriftDurationChanged::duration' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.OnDriftKickActivated
// 0x0008 (0x0008 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_OnDriftKickActivated final
{
public:
	float                                         DriftDirection;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleDriftState                      DriftState;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_OnDriftKickActivated) == 0x000004, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_OnDriftKickActivated");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_OnDriftKickActivated) == 0x000008, "Wrong size on DelMarUnifiedVehicleCosmeticActor_OnDriftKickActivated");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnDriftKickActivated, DriftDirection) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_OnDriftKickActivated::DriftDirection' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnDriftKickActivated, DriftState) == 0x000004, "Member 'DelMarUnifiedVehicleCosmeticActor_OnDriftKickActivated::DriftState' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.OnKickflipActivated
// 0x0001 (0x0001 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_OnKickflipActivated final
{
public:
	bool                                          bLeftSide;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_OnKickflipActivated) == 0x000001, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_OnKickflipActivated");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_OnKickflipActivated) == 0x000001, "Wrong size on DelMarUnifiedVehicleCosmeticActor_OnKickflipActivated");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnKickflipActivated, bLeftSide) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_OnKickflipActivated::bLeftSide' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.OnVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_OnVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_OnVehicleDemolished) == 0x000004, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_OnVehicleDemolished");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_OnVehicleDemolished) == 0x000004, "Wrong size on DelMarUnifiedVehicleCosmeticActor_OnVehicleDemolished");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_OnVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.OnVehicleLanded
// 0x0008 (0x0008 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_OnVehicleLanded final
{
public:
	float                                         LandingForce;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandedKickflip;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_OnVehicleLanded) == 0x000004, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_OnVehicleLanded");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_OnVehicleLanded) == 0x000008, "Wrong size on DelMarUnifiedVehicleCosmeticActor_OnVehicleLanded");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnVehicleLanded, LandingForce) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_OnVehicleLanded::LandingForce' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnVehicleLanded, bLandedKickflip) == 0x000004, "Member 'DelMarUnifiedVehicleCosmeticActor_OnVehicleLanded::bLandedKickflip' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.OnWorldBonusSpeedStackGained
// 0x0008 (0x0008 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_OnWorldBonusSpeedStackGained final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_OnWorldBonusSpeedStackGained) == 0x000004, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_OnWorldBonusSpeedStackGained");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_OnWorldBonusSpeedStackGained) == 0x000008, "Wrong size on DelMarUnifiedVehicleCosmeticActor_OnWorldBonusSpeedStackGained");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnWorldBonusSpeedStackGained, Source) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_OnWorldBonusSpeedStackGained::Source' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_OnWorldBonusSpeedStackGained, Stacks) == 0x000004, "Member 'DelMarUnifiedVehicleCosmeticActor_OnWorldBonusSpeedStackGained::Stacks' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.SetAllBoostersEnabled
// 0x0006 (0x0006 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled final
{
public:
	bool                                          bSetFrontBoosters;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetBackBoosters;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSideBoosters;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDownBoosters;                                  // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled) == 0x000001, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled) == 0x000006, "Wrong size on DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled, bSetFrontBoosters) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled::bSetFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled, bSetBackBoosters) == 0x000001, "Member 'DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled::bSetBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled, bSetSideBoosters) == 0x000002, "Member 'DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled::bSetSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled, bSetDownBoosters) == 0x000003, "Member 'DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled::bSetDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled, bEnabled) == 0x000004, "Member 'DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled, bReset) == 0x000005, "Member 'DelMarUnifiedVehicleCosmeticActor_SetAllBoostersEnabled::bReset' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.SetLeftBoostersEnabled
// 0x0006 (0x0006 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled final
{
public:
	bool                                          bSetFrontBoosters;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetBackBoosters;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSideBoosters;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDownBoosters;                                  // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled) == 0x000001, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled) == 0x000006, "Wrong size on DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled, bSetFrontBoosters) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled::bSetFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled, bSetBackBoosters) == 0x000001, "Member 'DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled::bSetBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled, bSetSideBoosters) == 0x000002, "Member 'DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled::bSetSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled, bSetDownBoosters) == 0x000003, "Member 'DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled::bSetDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled, bEnabled) == 0x000004, "Member 'DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled, bReset) == 0x000005, "Member 'DelMarUnifiedVehicleCosmeticActor_SetLeftBoostersEnabled::bReset' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.SetRightBoostersEnabled
// 0x0006 (0x0006 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled final
{
public:
	bool                                          bSetFrontBoosters;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetBackBoosters;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSideBoosters;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDownBoosters;                                  // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled) == 0x000001, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled) == 0x000006, "Wrong size on DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled, bSetFrontBoosters) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled::bSetFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled, bSetBackBoosters) == 0x000001, "Member 'DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled::bSetBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled, bSetSideBoosters) == 0x000002, "Member 'DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled::bSetSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled, bSetDownBoosters) == 0x000003, "Member 'DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled::bSetDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled, bEnabled) == 0x000004, "Member 'DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled, bReset) == 0x000005, "Member 'DelMarUnifiedVehicleCosmeticActor_SetRightBoostersEnabled::bReset' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.GetAllBoosters
// 0x0018 (0x0018 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_GetAllBoosters final
{
public:
	bool                                          bFrontBoosters;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackBoosters;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSideBoosters;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownBoosters;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_GetAllBoosters) == 0x000008, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_GetAllBoosters");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_GetAllBoosters) == 0x000018, "Wrong size on DelMarUnifiedVehicleCosmeticActor_GetAllBoosters");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetAllBoosters, bFrontBoosters) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_GetAllBoosters::bFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetAllBoosters, bBackBoosters) == 0x000001, "Member 'DelMarUnifiedVehicleCosmeticActor_GetAllBoosters::bBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetAllBoosters, bSideBoosters) == 0x000002, "Member 'DelMarUnifiedVehicleCosmeticActor_GetAllBoosters::bSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetAllBoosters, bDownBoosters) == 0x000003, "Member 'DelMarUnifiedVehicleCosmeticActor_GetAllBoosters::bDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetAllBoosters, ReturnValue) == 0x000008, "Member 'DelMarUnifiedVehicleCosmeticActor_GetAllBoosters::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.GetLeftBoosters
// 0x0018 (0x0018 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters final
{
public:
	bool                                          bFrontBoosters;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackBoosters;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSideBoosters;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownBoosters;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters) == 0x000008, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters) == 0x000018, "Wrong size on DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters, bFrontBoosters) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters::bFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters, bBackBoosters) == 0x000001, "Member 'DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters::bBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters, bSideBoosters) == 0x000002, "Member 'DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters::bSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters, bDownBoosters) == 0x000003, "Member 'DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters::bDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters, ReturnValue) == 0x000008, "Member 'DelMarUnifiedVehicleCosmeticActor_GetLeftBoosters::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.GetRightBoosters
// 0x0018 (0x0018 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_GetRightBoosters final
{
public:
	bool                                          bFrontBoosters;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackBoosters;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSideBoosters;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownBoosters;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_GetRightBoosters) == 0x000008, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_GetRightBoosters");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_GetRightBoosters) == 0x000018, "Wrong size on DelMarUnifiedVehicleCosmeticActor_GetRightBoosters");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetRightBoosters, bFrontBoosters) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_GetRightBoosters::bFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetRightBoosters, bBackBoosters) == 0x000001, "Member 'DelMarUnifiedVehicleCosmeticActor_GetRightBoosters::bBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetRightBoosters, bSideBoosters) == 0x000002, "Member 'DelMarUnifiedVehicleCosmeticActor_GetRightBoosters::bSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetRightBoosters, bDownBoosters) == 0x000003, "Member 'DelMarUnifiedVehicleCosmeticActor_GetRightBoosters::bDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetRightBoosters, ReturnValue) == 0x000008, "Member 'DelMarUnifiedVehicleCosmeticActor_GetRightBoosters::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.GetWheelContactBoneName
// 0x0008 (0x0008 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_GetWheelContactBoneName final
{
public:
	EDelMarVehicleWheelIndex                      WheelIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_GetWheelContactBoneName) == 0x000004, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_GetWheelContactBoneName");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_GetWheelContactBoneName) == 0x000008, "Wrong size on DelMarUnifiedVehicleCosmeticActor_GetWheelContactBoneName");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetWheelContactBoneName, WheelIndex) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_GetWheelContactBoneName::WheelIndex' has a wrong offset!");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_GetWheelContactBoneName, ReturnValue) == 0x000004, "Member 'DelMarUnifiedVehicleCosmeticActor_GetWheelContactBoneName::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarUnifiedVehicleCosmeticActor.ShouldTriggerFX
// 0x0001 (0x0001 - 0x0000)
struct DelMarUnifiedVehicleCosmeticActor_ShouldTriggerFX final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUnifiedVehicleCosmeticActor_ShouldTriggerFX) == 0x000001, "Wrong alignment on DelMarUnifiedVehicleCosmeticActor_ShouldTriggerFX");
static_assert(sizeof(DelMarUnifiedVehicleCosmeticActor_ShouldTriggerFX) == 0x000001, "Wrong size on DelMarUnifiedVehicleCosmeticActor_ShouldTriggerFX");
static_assert(offsetof(DelMarUnifiedVehicleCosmeticActor_ShouldTriggerFX, ReturnValue) == 0x000000, "Member 'DelMarUnifiedVehicleCosmeticActor_ShouldTriggerFX::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarDriverCosmeticPlayerComponent.HandleBotControllerLoadoutChanged
// 0x0178 (0x0178 - 0x0000)
struct DelMarDriverCosmeticPlayerComponent_HandleBotControllerLoadoutChanged final
{
public:
	class ADelMarAIController*                    AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAthenaLoadout                     Loadout;                                           // 0x0008(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCosmeticPlayerComponent_HandleBotControllerLoadoutChanged) == 0x000008, "Wrong alignment on DelMarDriverCosmeticPlayerComponent_HandleBotControllerLoadoutChanged");
static_assert(sizeof(DelMarDriverCosmeticPlayerComponent_HandleBotControllerLoadoutChanged) == 0x000178, "Wrong size on DelMarDriverCosmeticPlayerComponent_HandleBotControllerLoadoutChanged");
static_assert(offsetof(DelMarDriverCosmeticPlayerComponent_HandleBotControllerLoadoutChanged, AIController) == 0x000000, "Member 'DelMarDriverCosmeticPlayerComponent_HandleBotControllerLoadoutChanged::AIController' has a wrong offset!");
static_assert(offsetof(DelMarDriverCosmeticPlayerComponent_HandleBotControllerLoadoutChanged, Loadout) == 0x000008, "Member 'DelMarDriverCosmeticPlayerComponent_HandleBotControllerLoadoutChanged::Loadout' has a wrong offset!");

// Function DelMarCosmetics.DelMarDriverCosmeticPlayerComponent.HandlePlayerControllerLoadoutChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarDriverCosmeticPlayerComponent_HandlePlayerControllerLoadoutChanged final
{
public:
	struct FCosmeticLoadout                       Loadout;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCosmeticPlayerComponent_HandlePlayerControllerLoadoutChanged) == 0x000008, "Wrong alignment on DelMarDriverCosmeticPlayerComponent_HandlePlayerControllerLoadoutChanged");
static_assert(sizeof(DelMarDriverCosmeticPlayerComponent_HandlePlayerControllerLoadoutChanged) == 0x000010, "Wrong size on DelMarDriverCosmeticPlayerComponent_HandlePlayerControllerLoadoutChanged");
static_assert(offsetof(DelMarDriverCosmeticPlayerComponent_HandlePlayerControllerLoadoutChanged, Loadout) == 0x000000, "Member 'DelMarDriverCosmeticPlayerComponent_HandlePlayerControllerLoadoutChanged::Loadout' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetAnimInstanceClass
// 0x0008 (0x0008 - 0x0000)
struct DelMarBodyCosmeticActor_GetAnimInstanceClass final
{
public:
	TSubclassOf<class UAnimInstance>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetAnimInstanceClass) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetAnimInstanceClass");
static_assert(sizeof(DelMarBodyCosmeticActor_GetAnimInstanceClass) == 0x000008, "Wrong size on DelMarBodyCosmeticActor_GetAnimInstanceClass");
static_assert(offsetof(DelMarBodyCosmeticActor_GetAnimInstanceClass, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetAnimInstanceClass::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetBackLeftWheelsBoneNames
// 0x0010 (0x0010 - 0x0000)
struct DelMarBodyCosmeticActor_GetBackLeftWheelsBoneNames final
{
public:
	TArray<struct FDelMarVehicleWheelSetup>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetBackLeftWheelsBoneNames) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetBackLeftWheelsBoneNames");
static_assert(sizeof(DelMarBodyCosmeticActor_GetBackLeftWheelsBoneNames) == 0x000010, "Wrong size on DelMarBodyCosmeticActor_GetBackLeftWheelsBoneNames");
static_assert(offsetof(DelMarBodyCosmeticActor_GetBackLeftWheelsBoneNames, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetBackLeftWheelsBoneNames::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetBackRightWheelsBoneNames
// 0x0010 (0x0010 - 0x0000)
struct DelMarBodyCosmeticActor_GetBackRightWheelsBoneNames final
{
public:
	TArray<struct FDelMarVehicleWheelSetup>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetBackRightWheelsBoneNames) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetBackRightWheelsBoneNames");
static_assert(sizeof(DelMarBodyCosmeticActor_GetBackRightWheelsBoneNames) == 0x000010, "Wrong size on DelMarBodyCosmeticActor_GetBackRightWheelsBoneNames");
static_assert(offsetof(DelMarBodyCosmeticActor_GetBackRightWheelsBoneNames, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetBackRightWheelsBoneNames::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetBodySetup
// 0x0008 (0x0008 - 0x0000)
struct DelMarBodyCosmeticActor_GetBodySetup final
{
public:
	const class UDelMarVehicleBodySetup*          ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetBodySetup) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetBodySetup");
static_assert(sizeof(DelMarBodyCosmeticActor_GetBodySetup) == 0x000008, "Wrong size on DelMarBodyCosmeticActor_GetBodySetup");
static_assert(offsetof(DelMarBodyCosmeticActor_GetBodySetup, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetBodySetup::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetBoosterBySocketName
// 0x0010 (0x0010 - 0x0000)
struct DelMarBodyCosmeticActor_GetBoosterBySocketName final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetBoosterBySocketName) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetBoosterBySocketName");
static_assert(sizeof(DelMarBodyCosmeticActor_GetBoosterBySocketName) == 0x000010, "Wrong size on DelMarBodyCosmeticActor_GetBoosterBySocketName");
static_assert(offsetof(DelMarBodyCosmeticActor_GetBoosterBySocketName, SocketName) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetBoosterBySocketName::SocketName' has a wrong offset!");
static_assert(offsetof(DelMarBodyCosmeticActor_GetBoosterBySocketName, ReturnValue) == 0x000008, "Member 'DelMarBodyCosmeticActor_GetBoosterBySocketName::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetFrontLeftWheelsBoneNames
// 0x0010 (0x0010 - 0x0000)
struct DelMarBodyCosmeticActor_GetFrontLeftWheelsBoneNames final
{
public:
	TArray<struct FDelMarVehicleWheelSetup>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetFrontLeftWheelsBoneNames) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetFrontLeftWheelsBoneNames");
static_assert(sizeof(DelMarBodyCosmeticActor_GetFrontLeftWheelsBoneNames) == 0x000010, "Wrong size on DelMarBodyCosmeticActor_GetFrontLeftWheelsBoneNames");
static_assert(offsetof(DelMarBodyCosmeticActor_GetFrontLeftWheelsBoneNames, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetFrontLeftWheelsBoneNames::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetFrontRightWheelsBoneNames
// 0x0010 (0x0010 - 0x0000)
struct DelMarBodyCosmeticActor_GetFrontRightWheelsBoneNames final
{
public:
	TArray<struct FDelMarVehicleWheelSetup>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetFrontRightWheelsBoneNames) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetFrontRightWheelsBoneNames");
static_assert(sizeof(DelMarBodyCosmeticActor_GetFrontRightWheelsBoneNames) == 0x000010, "Wrong size on DelMarBodyCosmeticActor_GetFrontRightWheelsBoneNames");
static_assert(offsetof(DelMarBodyCosmeticActor_GetFrontRightWheelsBoneNames, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetFrontRightWheelsBoneNames::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetLeftBoostersInfo
// 0x0010 (0x0010 - 0x0000)
struct DelMarBodyCosmeticActor_GetLeftBoostersInfo final
{
public:
	TArray<struct FDelMarVehicleBooster>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetLeftBoostersInfo) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetLeftBoostersInfo");
static_assert(sizeof(DelMarBodyCosmeticActor_GetLeftBoostersInfo) == 0x000010, "Wrong size on DelMarBodyCosmeticActor_GetLeftBoostersInfo");
static_assert(offsetof(DelMarBodyCosmeticActor_GetLeftBoostersInfo, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetLeftBoostersInfo::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetPhysicsAsset
// 0x0008 (0x0008 - 0x0000)
struct DelMarBodyCosmeticActor_GetPhysicsAsset final
{
public:
	class UPhysicsAsset*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetPhysicsAsset) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetPhysicsAsset");
static_assert(sizeof(DelMarBodyCosmeticActor_GetPhysicsAsset) == 0x000008, "Wrong size on DelMarBodyCosmeticActor_GetPhysicsAsset");
static_assert(offsetof(DelMarBodyCosmeticActor_GetPhysicsAsset, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetPhysicsAsset::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetRightBoostersInfo
// 0x0010 (0x0010 - 0x0000)
struct DelMarBodyCosmeticActor_GetRightBoostersInfo final
{
public:
	TArray<struct FDelMarVehicleBooster>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetRightBoostersInfo) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetRightBoostersInfo");
static_assert(sizeof(DelMarBodyCosmeticActor_GetRightBoostersInfo) == 0x000010, "Wrong size on DelMarBodyCosmeticActor_GetRightBoostersInfo");
static_assert(offsetof(DelMarBodyCosmeticActor_GetRightBoostersInfo, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetRightBoostersInfo::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct DelMarBodyCosmeticActor_GetSkeletalMesh final
{
public:
	class USkeletalMesh*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetSkeletalMesh) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetSkeletalMesh");
static_assert(sizeof(DelMarBodyCosmeticActor_GetSkeletalMesh) == 0x000008, "Wrong size on DelMarBodyCosmeticActor_GetSkeletalMesh");
static_assert(offsetof(DelMarBodyCosmeticActor_GetSkeletalMesh, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetWheelCosmeticActorOffset
// 0x0018 (0x0018 - 0x0000)
struct DelMarBodyCosmeticActor_GetWheelCosmeticActorOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetWheelCosmeticActorOffset) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetWheelCosmeticActorOffset");
static_assert(sizeof(DelMarBodyCosmeticActor_GetWheelCosmeticActorOffset) == 0x000018, "Wrong size on DelMarBodyCosmeticActor_GetWheelCosmeticActorOffset");
static_assert(offsetof(DelMarBodyCosmeticActor_GetWheelCosmeticActorOffset, ReturnValue) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetWheelCosmeticActorOffset::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBodyCosmeticActor.GetWheelSetups
// 0x0018 (0x0018 - 0x0000)
struct DelMarBodyCosmeticActor_GetWheelSetups final
{
public:
	EDelMarVehicleWheelIndex                      WheelIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarVehicleWheelSetup>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBodyCosmeticActor_GetWheelSetups) == 0x000008, "Wrong alignment on DelMarBodyCosmeticActor_GetWheelSetups");
static_assert(sizeof(DelMarBodyCosmeticActor_GetWheelSetups) == 0x000018, "Wrong size on DelMarBodyCosmeticActor_GetWheelSetups");
static_assert(offsetof(DelMarBodyCosmeticActor_GetWheelSetups, WheelIndex) == 0x000000, "Member 'DelMarBodyCosmeticActor_GetWheelSetups::WheelIndex' has a wrong offset!");
static_assert(offsetof(DelMarBodyCosmeticActor_GetWheelSetups, ReturnValue) == 0x000008, "Member 'DelMarBodyCosmeticActor_GetWheelSetups::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBoosterCosmeticActor.SetAllBoostersEnabled
// 0x0006 (0x0006 - 0x0000)
struct DelMarBoosterCosmeticActor_SetAllBoostersEnabled final
{
public:
	bool                                          bSetFrontBoosters;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetBackBoosters;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSideBoosters;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDownBoosters;                                  // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBoosterCosmeticActor_SetAllBoostersEnabled) == 0x000001, "Wrong alignment on DelMarBoosterCosmeticActor_SetAllBoostersEnabled");
static_assert(sizeof(DelMarBoosterCosmeticActor_SetAllBoostersEnabled) == 0x000006, "Wrong size on DelMarBoosterCosmeticActor_SetAllBoostersEnabled");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetAllBoostersEnabled, bSetFrontBoosters) == 0x000000, "Member 'DelMarBoosterCosmeticActor_SetAllBoostersEnabled::bSetFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetAllBoostersEnabled, bSetBackBoosters) == 0x000001, "Member 'DelMarBoosterCosmeticActor_SetAllBoostersEnabled::bSetBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetAllBoostersEnabled, bSetSideBoosters) == 0x000002, "Member 'DelMarBoosterCosmeticActor_SetAllBoostersEnabled::bSetSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetAllBoostersEnabled, bSetDownBoosters) == 0x000003, "Member 'DelMarBoosterCosmeticActor_SetAllBoostersEnabled::bSetDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetAllBoostersEnabled, bEnabled) == 0x000004, "Member 'DelMarBoosterCosmeticActor_SetAllBoostersEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetAllBoostersEnabled, bReset) == 0x000005, "Member 'DelMarBoosterCosmeticActor_SetAllBoostersEnabled::bReset' has a wrong offset!");

// Function DelMarCosmetics.DelMarBoosterCosmeticActor.SetLeftBoostersEnabled
// 0x0006 (0x0006 - 0x0000)
struct DelMarBoosterCosmeticActor_SetLeftBoostersEnabled final
{
public:
	bool                                          bSetFrontBoosters;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetBackBoosters;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSideBoosters;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDownBoosters;                                  // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBoosterCosmeticActor_SetLeftBoostersEnabled) == 0x000001, "Wrong alignment on DelMarBoosterCosmeticActor_SetLeftBoostersEnabled");
static_assert(sizeof(DelMarBoosterCosmeticActor_SetLeftBoostersEnabled) == 0x000006, "Wrong size on DelMarBoosterCosmeticActor_SetLeftBoostersEnabled");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetLeftBoostersEnabled, bSetFrontBoosters) == 0x000000, "Member 'DelMarBoosterCosmeticActor_SetLeftBoostersEnabled::bSetFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetLeftBoostersEnabled, bSetBackBoosters) == 0x000001, "Member 'DelMarBoosterCosmeticActor_SetLeftBoostersEnabled::bSetBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetLeftBoostersEnabled, bSetSideBoosters) == 0x000002, "Member 'DelMarBoosterCosmeticActor_SetLeftBoostersEnabled::bSetSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetLeftBoostersEnabled, bSetDownBoosters) == 0x000003, "Member 'DelMarBoosterCosmeticActor_SetLeftBoostersEnabled::bSetDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetLeftBoostersEnabled, bEnabled) == 0x000004, "Member 'DelMarBoosterCosmeticActor_SetLeftBoostersEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetLeftBoostersEnabled, bReset) == 0x000005, "Member 'DelMarBoosterCosmeticActor_SetLeftBoostersEnabled::bReset' has a wrong offset!");

// Function DelMarCosmetics.DelMarBoosterCosmeticActor.SetRightBoostersEnabled
// 0x0006 (0x0006 - 0x0000)
struct DelMarBoosterCosmeticActor_SetRightBoostersEnabled final
{
public:
	bool                                          bSetFrontBoosters;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetBackBoosters;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSideBoosters;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDownBoosters;                                  // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBoosterCosmeticActor_SetRightBoostersEnabled) == 0x000001, "Wrong alignment on DelMarBoosterCosmeticActor_SetRightBoostersEnabled");
static_assert(sizeof(DelMarBoosterCosmeticActor_SetRightBoostersEnabled) == 0x000006, "Wrong size on DelMarBoosterCosmeticActor_SetRightBoostersEnabled");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetRightBoostersEnabled, bSetFrontBoosters) == 0x000000, "Member 'DelMarBoosterCosmeticActor_SetRightBoostersEnabled::bSetFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetRightBoostersEnabled, bSetBackBoosters) == 0x000001, "Member 'DelMarBoosterCosmeticActor_SetRightBoostersEnabled::bSetBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetRightBoostersEnabled, bSetSideBoosters) == 0x000002, "Member 'DelMarBoosterCosmeticActor_SetRightBoostersEnabled::bSetSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetRightBoostersEnabled, bSetDownBoosters) == 0x000003, "Member 'DelMarBoosterCosmeticActor_SetRightBoostersEnabled::bSetDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetRightBoostersEnabled, bEnabled) == 0x000004, "Member 'DelMarBoosterCosmeticActor_SetRightBoostersEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_SetRightBoostersEnabled, bReset) == 0x000005, "Member 'DelMarBoosterCosmeticActor_SetRightBoostersEnabled::bReset' has a wrong offset!");

// Function DelMarCosmetics.DelMarBoosterCosmeticActor.GetAllBoosters
// 0x0018 (0x0018 - 0x0000)
struct DelMarBoosterCosmeticActor_GetAllBoosters final
{
public:
	bool                                          bFrontBoosters;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackBoosters;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSideBoosters;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownBoosters;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBoosterCosmeticActor_GetAllBoosters) == 0x000008, "Wrong alignment on DelMarBoosterCosmeticActor_GetAllBoosters");
static_assert(sizeof(DelMarBoosterCosmeticActor_GetAllBoosters) == 0x000018, "Wrong size on DelMarBoosterCosmeticActor_GetAllBoosters");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetAllBoosters, bFrontBoosters) == 0x000000, "Member 'DelMarBoosterCosmeticActor_GetAllBoosters::bFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetAllBoosters, bBackBoosters) == 0x000001, "Member 'DelMarBoosterCosmeticActor_GetAllBoosters::bBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetAllBoosters, bSideBoosters) == 0x000002, "Member 'DelMarBoosterCosmeticActor_GetAllBoosters::bSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetAllBoosters, bDownBoosters) == 0x000003, "Member 'DelMarBoosterCosmeticActor_GetAllBoosters::bDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetAllBoosters, ReturnValue) == 0x000008, "Member 'DelMarBoosterCosmeticActor_GetAllBoosters::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBoosterCosmeticActor.GetLeftBoosters
// 0x0018 (0x0018 - 0x0000)
struct DelMarBoosterCosmeticActor_GetLeftBoosters final
{
public:
	bool                                          bFrontBoosters;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackBoosters;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSideBoosters;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownBoosters;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBoosterCosmeticActor_GetLeftBoosters) == 0x000008, "Wrong alignment on DelMarBoosterCosmeticActor_GetLeftBoosters");
static_assert(sizeof(DelMarBoosterCosmeticActor_GetLeftBoosters) == 0x000018, "Wrong size on DelMarBoosterCosmeticActor_GetLeftBoosters");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetLeftBoosters, bFrontBoosters) == 0x000000, "Member 'DelMarBoosterCosmeticActor_GetLeftBoosters::bFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetLeftBoosters, bBackBoosters) == 0x000001, "Member 'DelMarBoosterCosmeticActor_GetLeftBoosters::bBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetLeftBoosters, bSideBoosters) == 0x000002, "Member 'DelMarBoosterCosmeticActor_GetLeftBoosters::bSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetLeftBoosters, bDownBoosters) == 0x000003, "Member 'DelMarBoosterCosmeticActor_GetLeftBoosters::bDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetLeftBoosters, ReturnValue) == 0x000008, "Member 'DelMarBoosterCosmeticActor_GetLeftBoosters::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarBoosterCosmeticActor.GetRightBoosters
// 0x0018 (0x0018 - 0x0000)
struct DelMarBoosterCosmeticActor_GetRightBoosters final
{
public:
	bool                                          bFrontBoosters;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBackBoosters;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSideBoosters;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownBoosters;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBoosterCosmeticActor_GetRightBoosters) == 0x000008, "Wrong alignment on DelMarBoosterCosmeticActor_GetRightBoosters");
static_assert(sizeof(DelMarBoosterCosmeticActor_GetRightBoosters) == 0x000018, "Wrong size on DelMarBoosterCosmeticActor_GetRightBoosters");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetRightBoosters, bFrontBoosters) == 0x000000, "Member 'DelMarBoosterCosmeticActor_GetRightBoosters::bFrontBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetRightBoosters, bBackBoosters) == 0x000001, "Member 'DelMarBoosterCosmeticActor_GetRightBoosters::bBackBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetRightBoosters, bSideBoosters) == 0x000002, "Member 'DelMarBoosterCosmeticActor_GetRightBoosters::bSideBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetRightBoosters, bDownBoosters) == 0x000003, "Member 'DelMarBoosterCosmeticActor_GetRightBoosters::bDownBoosters' has a wrong offset!");
static_assert(offsetof(DelMarBoosterCosmeticActor_GetRightBoosters, ReturnValue) == 0x000008, "Member 'DelMarBoosterCosmeticActor_GetRightBoosters::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarEngineAudioCosmeticActor.GetComponentGroup
// 0x0008 (0x0008 - 0x0000)
struct DelMarEngineAudioCosmeticActor_GetComponentGroup final
{
public:
	class UAudioComponentGroup*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarEngineAudioCosmeticActor_GetComponentGroup) == 0x000008, "Wrong alignment on DelMarEngineAudioCosmeticActor_GetComponentGroup");
static_assert(sizeof(DelMarEngineAudioCosmeticActor_GetComponentGroup) == 0x000008, "Wrong size on DelMarEngineAudioCosmeticActor_GetComponentGroup");
static_assert(offsetof(DelMarEngineAudioCosmeticActor_GetComponentGroup, ReturnValue) == 0x000000, "Member 'DelMarEngineAudioCosmeticActor_GetComponentGroup::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelContactFxCosmeticActor.BP_UpdateWheelContactFx
// 0x0040 (0x0040 - 0x0000)
struct DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx final
{
public:
	struct FDelMarVehicleCosmeticWheelInfo        WheelInfo;                                         // 0x0000(0x0030)(ConstParm, Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbsForwardSpeed;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsSideSpeed;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx) == 0x000008, "Wrong alignment on DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx");
static_assert(sizeof(DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx) == 0x000040, "Wrong size on DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx");
static_assert(offsetof(DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx, WheelInfo) == 0x000000, "Member 'DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx::WheelInfo' has a wrong offset!");
static_assert(offsetof(DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx, bActive) == 0x000030, "Member 'DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx::bActive' has a wrong offset!");
static_assert(offsetof(DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx, AbsForwardSpeed) == 0x000034, "Member 'DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx::AbsForwardSpeed' has a wrong offset!");
static_assert(offsetof(DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx, AbsSideSpeed) == 0x000038, "Member 'DelMarWheelContactFxCosmeticActor_BP_UpdateWheelContactFx::AbsSideSpeed' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelContactFxCosmeticActor.HandleVehicleLanded
// 0x0008 (0x0008 - 0x0000)
struct DelMarWheelContactFxCosmeticActor_HandleVehicleLanded final
{
public:
	float                                         LandingForce;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandedKickflip;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarWheelContactFxCosmeticActor_HandleVehicleLanded) == 0x000004, "Wrong alignment on DelMarWheelContactFxCosmeticActor_HandleVehicleLanded");
static_assert(sizeof(DelMarWheelContactFxCosmeticActor_HandleVehicleLanded) == 0x000008, "Wrong size on DelMarWheelContactFxCosmeticActor_HandleVehicleLanded");
static_assert(offsetof(DelMarWheelContactFxCosmeticActor_HandleVehicleLanded, LandingForce) == 0x000000, "Member 'DelMarWheelContactFxCosmeticActor_HandleVehicleLanded::LandingForce' has a wrong offset!");
static_assert(offsetof(DelMarWheelContactFxCosmeticActor_HandleVehicleLanded, bLandedKickflip) == 0x000004, "Member 'DelMarWheelContactFxCosmeticActor_HandleVehicleLanded::bLandedKickflip' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelContactFxCosmeticActor.GetAudioBehavior
// 0x0008 (0x0008 - 0x0000)
struct DelMarWheelContactFxCosmeticActor_GetAudioBehavior final
{
public:
	class UAudioGameplayBehavior*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarWheelContactFxCosmeticActor_GetAudioBehavior) == 0x000008, "Wrong alignment on DelMarWheelContactFxCosmeticActor_GetAudioBehavior");
static_assert(sizeof(DelMarWheelContactFxCosmeticActor_GetAudioBehavior) == 0x000008, "Wrong size on DelMarWheelContactFxCosmeticActor_GetAudioBehavior");
static_assert(offsetof(DelMarWheelContactFxCosmeticActor_GetAudioBehavior, ReturnValue) == 0x000000, "Member 'DelMarWheelContactFxCosmeticActor_GetAudioBehavior::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelContactFxCosmeticActor.GetWheelContactBoneName
// 0x0008 (0x0008 - 0x0000)
struct DelMarWheelContactFxCosmeticActor_GetWheelContactBoneName final
{
public:
	EDelMarVehicleWheelIndex                      WheelIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarWheelContactFxCosmeticActor_GetWheelContactBoneName) == 0x000004, "Wrong alignment on DelMarWheelContactFxCosmeticActor_GetWheelContactBoneName");
static_assert(sizeof(DelMarWheelContactFxCosmeticActor_GetWheelContactBoneName) == 0x000008, "Wrong size on DelMarWheelContactFxCosmeticActor_GetWheelContactBoneName");
static_assert(offsetof(DelMarWheelContactFxCosmeticActor_GetWheelContactBoneName, WheelIndex) == 0x000000, "Member 'DelMarWheelContactFxCosmeticActor_GetWheelContactBoneName::WheelIndex' has a wrong offset!");
static_assert(offsetof(DelMarWheelContactFxCosmeticActor_GetWheelContactBoneName, ReturnValue) == 0x000004, "Member 'DelMarWheelContactFxCosmeticActor_GetWheelContactBoneName::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelsCosmeticActor.GetMirrorType
// 0x0001 (0x0001 - 0x0000)
struct DelMarWheelsCosmeticActor_GetMirrorType final
{
public:
	EDelMarWheelMirrorType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarWheelsCosmeticActor_GetMirrorType) == 0x000001, "Wrong alignment on DelMarWheelsCosmeticActor_GetMirrorType");
static_assert(sizeof(DelMarWheelsCosmeticActor_GetMirrorType) == 0x000001, "Wrong size on DelMarWheelsCosmeticActor_GetMirrorType");
static_assert(offsetof(DelMarWheelsCosmeticActor_GetMirrorType, ReturnValue) == 0x000000, "Member 'DelMarWheelsCosmeticActor_GetMirrorType::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelsCosmeticActor.IsBackWheel
// 0x0001 (0x0001 - 0x0000)
struct DelMarWheelsCosmeticActor_IsBackWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarWheelsCosmeticActor_IsBackWheel) == 0x000001, "Wrong alignment on DelMarWheelsCosmeticActor_IsBackWheel");
static_assert(sizeof(DelMarWheelsCosmeticActor_IsBackWheel) == 0x000001, "Wrong size on DelMarWheelsCosmeticActor_IsBackWheel");
static_assert(offsetof(DelMarWheelsCosmeticActor_IsBackWheel, ReturnValue) == 0x000000, "Member 'DelMarWheelsCosmeticActor_IsBackWheel::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelsCosmeticActor.IsFrontWheel
// 0x0001 (0x0001 - 0x0000)
struct DelMarWheelsCosmeticActor_IsFrontWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarWheelsCosmeticActor_IsFrontWheel) == 0x000001, "Wrong alignment on DelMarWheelsCosmeticActor_IsFrontWheel");
static_assert(sizeof(DelMarWheelsCosmeticActor_IsFrontWheel) == 0x000001, "Wrong size on DelMarWheelsCosmeticActor_IsFrontWheel");
static_assert(offsetof(DelMarWheelsCosmeticActor_IsFrontWheel, ReturnValue) == 0x000000, "Member 'DelMarWheelsCosmeticActor_IsFrontWheel::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelsCosmeticActor.IsLeftWheel
// 0x0001 (0x0001 - 0x0000)
struct DelMarWheelsCosmeticActor_IsLeftWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarWheelsCosmeticActor_IsLeftWheel) == 0x000001, "Wrong alignment on DelMarWheelsCosmeticActor_IsLeftWheel");
static_assert(sizeof(DelMarWheelsCosmeticActor_IsLeftWheel) == 0x000001, "Wrong size on DelMarWheelsCosmeticActor_IsLeftWheel");
static_assert(offsetof(DelMarWheelsCosmeticActor_IsLeftWheel, ReturnValue) == 0x000000, "Member 'DelMarWheelsCosmeticActor_IsLeftWheel::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelsCosmeticActor.IsMirrored
// 0x0001 (0x0001 - 0x0000)
struct DelMarWheelsCosmeticActor_IsMirrored final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarWheelsCosmeticActor_IsMirrored) == 0x000001, "Wrong alignment on DelMarWheelsCosmeticActor_IsMirrored");
static_assert(sizeof(DelMarWheelsCosmeticActor_IsMirrored) == 0x000001, "Wrong size on DelMarWheelsCosmeticActor_IsMirrored");
static_assert(offsetof(DelMarWheelsCosmeticActor_IsMirrored, ReturnValue) == 0x000000, "Member 'DelMarWheelsCosmeticActor_IsMirrored::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelsCosmeticActor.IsRightWheel
// 0x0001 (0x0001 - 0x0000)
struct DelMarWheelsCosmeticActor_IsRightWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarWheelsCosmeticActor_IsRightWheel) == 0x000001, "Wrong alignment on DelMarWheelsCosmeticActor_IsRightWheel");
static_assert(sizeof(DelMarWheelsCosmeticActor_IsRightWheel) == 0x000001, "Wrong size on DelMarWheelsCosmeticActor_IsRightWheel");
static_assert(offsetof(DelMarWheelsCosmeticActor_IsRightWheel, ReturnValue) == 0x000000, "Member 'DelMarWheelsCosmeticActor_IsRightWheel::ReturnValue' has a wrong offset!");

// Function DelMarCosmetics.DelMarWheelsCosmeticActor.IsWheelOnGround
// 0x0001 (0x0001 - 0x0000)
struct DelMarWheelsCosmeticActor_IsWheelOnGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarWheelsCosmeticActor_IsWheelOnGround) == 0x000001, "Wrong alignment on DelMarWheelsCosmeticActor_IsWheelOnGround");
static_assert(sizeof(DelMarWheelsCosmeticActor_IsWheelOnGround) == 0x000001, "Wrong size on DelMarWheelsCosmeticActor_IsWheelOnGround");
static_assert(offsetof(DelMarWheelsCosmeticActor_IsWheelOnGround, ReturnValue) == 0x000000, "Member 'DelMarWheelsCosmeticActor_IsWheelOnGround::ReturnValue' has a wrong offset!");

}

