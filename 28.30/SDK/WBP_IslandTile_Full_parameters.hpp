#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_IslandTile_Full

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_IslandTile_Full.WBP_IslandTile_Full_C.ExecuteUbergraph_WBP_IslandTile_Full
// 0x0018 (0x0018 - 0x0000)
struct WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full) == 0x000004, "Wrong alignment on WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full");
static_assert(sizeof(WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full) == 0x000018, "Wrong size on WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full");
static_assert(offsetof(WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full, EntryPoint) == 0x000000, "Member 'WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full, K2Node_MakeStruct_LinearColor) == 0x000004, "Member 'WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full, K2Node_Event_IsDesignTime) == 0x000014, "Member 'WBP_IslandTile_Full_C_ExecuteUbergraph_WBP_IslandTile_Full::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_IslandTile_Full.WBP_IslandTile_Full_C.OnTileSelectionActive
// 0x0008 (0x0008 - 0x0000)
struct WBP_IslandTile_Full_C_OnTileSelectionActive final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Full_C_OnTileSelectionActive) == 0x000008, "Wrong alignment on WBP_IslandTile_Full_C_OnTileSelectionActive");
static_assert(sizeof(WBP_IslandTile_Full_C_OnTileSelectionActive) == 0x000008, "Wrong size on WBP_IslandTile_Full_C_OnTileSelectionActive");
static_assert(offsetof(WBP_IslandTile_Full_C_OnTileSelectionActive, CallFunc_PlayAnimationForward_ReturnValue) == 0x000000, "Member 'WBP_IslandTile_Full_C_OnTileSelectionActive::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Full.WBP_IslandTile_Full_C.OnTileSelectionNotActive
// 0x0008 (0x0008 - 0x0000)
struct WBP_IslandTile_Full_C_OnTileSelectionNotActive final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Full_C_OnTileSelectionNotActive) == 0x000008, "Wrong alignment on WBP_IslandTile_Full_C_OnTileSelectionNotActive");
static_assert(sizeof(WBP_IslandTile_Full_C_OnTileSelectionNotActive) == 0x000008, "Wrong size on WBP_IslandTile_Full_C_OnTileSelectionNotActive");
static_assert(offsetof(WBP_IslandTile_Full_C_OnTileSelectionNotActive, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000000, "Member 'WBP_IslandTile_Full_C_OnTileSelectionNotActive::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");

// Function WBP_IslandTile_Full.WBP_IslandTile_Full_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_IslandTile_Full_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IslandTile_Full_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_IslandTile_Full_C_PreConstruct");
static_assert(sizeof(WBP_IslandTile_Full_C_PreConstruct) == 0x000001, "Wrong size on WBP_IslandTile_Full_C_PreConstruct");
static_assert(offsetof(WBP_IslandTile_Full_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_IslandTile_Full_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_IslandTile_Full.WBP_IslandTile_Full_C.SetIslandName
// 0x0018 (0x0018 - 0x0000)
struct WBP_IslandTile_Full_C_SetIslandName final
{
public:
	class FText                                   IslandName;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_IslandTile_Full_C_SetIslandName) == 0x000008, "Wrong alignment on WBP_IslandTile_Full_C_SetIslandName");
static_assert(sizeof(WBP_IslandTile_Full_C_SetIslandName) == 0x000018, "Wrong size on WBP_IslandTile_Full_C_SetIslandName");
static_assert(offsetof(WBP_IslandTile_Full_C_SetIslandName, IslandName) == 0x000000, "Member 'WBP_IslandTile_Full_C_SetIslandName::IslandName' has a wrong offset!");

}

