#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarUI

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum DelMarUI.EWidgetTransitionerInitialStatus
// NumValues: 0x0002
enum class EWidgetTransitionerInitialStatus : uint8
{
	Hidden                                   = 0,
	Shown                                    = 1,
};

// Enum DelMarUI.EWidgetTransitionerStatus
// NumValues: 0x0004
enum class EWidgetTransitionerStatus : uint8
{
	Hidden                                   = 0,
	AnimatingIn                              = 1,
	Shown                                    = 2,
	AnimatingOut                             = 3,
};

// Enum DelMarUI.EDelMarRearAlertVerticalHint
// NumValues: 0x0003
enum class EDelMarRearAlertVerticalHint : uint8
{
	Level                                    = 0,
	Up                                       = 1,
	Down                                     = 2,
};

// Enum DelMarUI.EDelMarRankedProgressError
// NumValues: 0x0010
enum class EDelMarRankedProgressError : uint8
{
	None                                     = 0,
	MissingRankedComponent                   = 1,
	RankedComponentSocialUserNotBound        = 2,
	RankedComponentUnableToQueryProgress     = 3,
	EmptyRankType                            = 4,
	InitialProgressMapInvalid                = 5,
	CurrentProgressMapInvalid                = 6,
	InvalidCurrentTrack                      = 7,
	InitialProgressEntryNotFound             = 8,
	CurrentProgressEntryNotFound             = 9,
	GameModeNotFound                         = 10,
	CurrentTierLessThanZero                  = 11,
	NotEnoughTiersForInitialTier             = 12,
	NotEnoughTiersForCurrentTier             = 13,
	FailedToFindUnrankedTier                 = 14,
	UnknownError                             = 15,
};

// Enum DelMarUI.EDelMarTouchActionButtonState
// NumValues: 0x0007
enum class EDelMarTouchActionButtonState : uint8
{
	None                                     = 0,
	FullyDisabled                            = 1,
	Disabled                                 = 2,
	Enabled                                  = 3,
	Ready                                    = 4,
	Pressed                                  = 5,
	Supercharged                             = 6,
};

// Enum DelMarUI.EDelMarInputInjectionState
// NumValues: 0x0004
enum class EDelMarInputInjectionState : uint8
{
	FIRST_PRESSED                            = 0,
	PRESSED                                  = 1,
	RELEASED                                 = 2,
	CANCELLED                                = 3,
};

// Enum DelMarUI.EDelMarTouchInputTrackingState
// NumValues: 0x0003
enum class EDelMarTouchInputTrackingState : uint8
{
	NOT_TRACKING                             = 0,
	TRACKING_WITH_INJECTION                  = 1,
	TRACKING_WITHOUT_INJECTION               = 2,
};

// Enum DelMarUI.EDelMarDriftSteerState
// NumValues: 0x0004
enum class EDelMarDriftSteerState : uint8
{
	None                                     = 0,
	Controlled                               = 1,
	DriftBoost                               = 2,
	Uncontrolled                             = 3,
};

// Enum DelMarUI.EDelMarSpeedometerState
// NumValues: 0x0003
enum class EDelMarSpeedometerState : uint8
{
	Normal                                   = 0,
	SlowingDown                              = 1,
	BonusSpeed                               = 2,
};

// ScriptStruct DelMarUI.DelMarReactiveWidgetAnimation
// 0x0008 (0x0008 - 0x0000)
struct FDelMarReactiveWidgetAnimation final
{
public:
	class FName                                   Intro;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Outro;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarReactiveWidgetAnimation) == 0x000004, "Wrong alignment on FDelMarReactiveWidgetAnimation");
static_assert(sizeof(FDelMarReactiveWidgetAnimation) == 0x000008, "Wrong size on FDelMarReactiveWidgetAnimation");
static_assert(offsetof(FDelMarReactiveWidgetAnimation, Intro) == 0x000000, "Member 'FDelMarReactiveWidgetAnimation::Intro' has a wrong offset!");
static_assert(offsetof(FDelMarReactiveWidgetAnimation, Outro) == 0x000004, "Member 'FDelMarReactiveWidgetAnimation::Outro' has a wrong offset!");

// ScriptStruct DelMarUI.DelMarPlayerIndicatorData
// 0x0028 (0x0028 - 0x0000)
struct FDelMarPlayerIndicatorData final
{
public:
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralRatio;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScreenPosition;                                    // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquareDistance;                                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarRearAlertVerticalHint                  VerticalHint;                                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRearIndicator;                                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarPlayerIndicatorData) == 0x000008, "Wrong alignment on FDelMarPlayerIndicatorData");
static_assert(sizeof(FDelMarPlayerIndicatorData) == 0x000028, "Wrong size on FDelMarPlayerIndicatorData");
static_assert(offsetof(FDelMarPlayerIndicatorData, PlayerState) == 0x000000, "Member 'FDelMarPlayerIndicatorData::PlayerState' has a wrong offset!");
static_assert(offsetof(FDelMarPlayerIndicatorData, LateralRatio) == 0x000008, "Member 'FDelMarPlayerIndicatorData::LateralRatio' has a wrong offset!");
static_assert(offsetof(FDelMarPlayerIndicatorData, ScreenPosition) == 0x000010, "Member 'FDelMarPlayerIndicatorData::ScreenPosition' has a wrong offset!");
static_assert(offsetof(FDelMarPlayerIndicatorData, SquareDistance) == 0x000020, "Member 'FDelMarPlayerIndicatorData::SquareDistance' has a wrong offset!");
static_assert(offsetof(FDelMarPlayerIndicatorData, VerticalHint) == 0x000024, "Member 'FDelMarPlayerIndicatorData::VerticalHint' has a wrong offset!");
static_assert(offsetof(FDelMarPlayerIndicatorData, bRearIndicator) == 0x000025, "Member 'FDelMarPlayerIndicatorData::bRearIndicator' has a wrong offset!");
static_assert(offsetof(FDelMarPlayerIndicatorData, bShow) == 0x000026, "Member 'FDelMarPlayerIndicatorData::bShow' has a wrong offset!");

// ScriptStruct DelMarUI.DelMarKeyPair
// 0x0030 (0x0030 - 0x0000)
struct FDelMarKeyPair final
{
public:
	struct FKey                                   KBMKey;                                            // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   GamepadKey;                                        // 0x0018(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarKeyPair) == 0x000008, "Wrong alignment on FDelMarKeyPair");
static_assert(sizeof(FDelMarKeyPair) == 0x000030, "Wrong size on FDelMarKeyPair");
static_assert(offsetof(FDelMarKeyPair, KBMKey) == 0x000000, "Member 'FDelMarKeyPair::KBMKey' has a wrong offset!");
static_assert(offsetof(FDelMarKeyPair, GamepadKey) == 0x000018, "Member 'FDelMarKeyPair::GamepadKey' has a wrong offset!");

// ScriptStruct DelMarUI.DelMarTouchActionButtonStateData
// 0x0190 (0x0190 - 0x0000)
struct FDelMarTouchActionButtonStateData final
{
public:
	struct FSlateBrush                            IconBrush;                                         // 0x0000(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundBrush;                                   // 0x00C0(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESlateVisibility                              ButtonVisibility;                                  // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelInputOnEnter;                               // 0x0181(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelInputOnLeave;                               // 0x0182(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_183[0xD];                                      // 0x0183(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarTouchActionButtonStateData) == 0x000010, "Wrong alignment on FDelMarTouchActionButtonStateData");
static_assert(sizeof(FDelMarTouchActionButtonStateData) == 0x000190, "Wrong size on FDelMarTouchActionButtonStateData");
static_assert(offsetof(FDelMarTouchActionButtonStateData, IconBrush) == 0x000000, "Member 'FDelMarTouchActionButtonStateData::IconBrush' has a wrong offset!");
static_assert(offsetof(FDelMarTouchActionButtonStateData, BackgroundBrush) == 0x0000C0, "Member 'FDelMarTouchActionButtonStateData::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FDelMarTouchActionButtonStateData, ButtonVisibility) == 0x000180, "Member 'FDelMarTouchActionButtonStateData::ButtonVisibility' has a wrong offset!");
static_assert(offsetof(FDelMarTouchActionButtonStateData, bCancelInputOnEnter) == 0x000181, "Member 'FDelMarTouchActionButtonStateData::bCancelInputOnEnter' has a wrong offset!");
static_assert(offsetof(FDelMarTouchActionButtonStateData, bCancelInputOnLeave) == 0x000182, "Member 'FDelMarTouchActionButtonStateData::bCancelInputOnLeave' has a wrong offset!");

// ScriptStruct DelMarUI.DelMarTouchInputDefinition
// 0x0030 (0x0030 - 0x0000)
struct FDelMarTouchInputDefinition final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInputModifier*>                 Modifiers;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UInputTrigger*>                  Triggers;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bUseYAxis;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarTouchInputDefinition) == 0x000008, "Wrong alignment on FDelMarTouchInputDefinition");
static_assert(sizeof(FDelMarTouchInputDefinition) == 0x000030, "Wrong size on FDelMarTouchInputDefinition");
static_assert(offsetof(FDelMarTouchInputDefinition, InputAction) == 0x000000, "Member 'FDelMarTouchInputDefinition::InputAction' has a wrong offset!");
static_assert(offsetof(FDelMarTouchInputDefinition, Modifiers) == 0x000008, "Member 'FDelMarTouchInputDefinition::Modifiers' has a wrong offset!");
static_assert(offsetof(FDelMarTouchInputDefinition, Triggers) == 0x000018, "Member 'FDelMarTouchInputDefinition::Triggers' has a wrong offset!");
static_assert(offsetof(FDelMarTouchInputDefinition, bUseYAxis) == 0x000028, "Member 'FDelMarTouchInputDefinition::bUseYAxis' has a wrong offset!");

// ScriptStruct DelMarUI.DelMarSectionData
// 0x0018 (0x0018 - 0x0000)
struct FDelMarSectionData final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LapDurationAtSection;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DeltaTime;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarSectionData) == 0x000008, "Wrong alignment on FDelMarSectionData");
static_assert(sizeof(FDelMarSectionData) == 0x000018, "Wrong size on FDelMarSectionData");
static_assert(offsetof(FDelMarSectionData, SectionIndex) == 0x000000, "Member 'FDelMarSectionData::SectionIndex' has a wrong offset!");
static_assert(offsetof(FDelMarSectionData, LapDurationAtSection) == 0x000008, "Member 'FDelMarSectionData::LapDurationAtSection' has a wrong offset!");
static_assert(offsetof(FDelMarSectionData, DeltaTime) == 0x000010, "Member 'FDelMarSectionData::DeltaTime' has a wrong offset!");

}

