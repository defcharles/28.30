#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FabricRuntime

#include "Basic.hpp"

#include "FabricRuntime_classes.hpp"
#include "FabricRuntime_parameters.hpp"


namespace SDK
{

// Function FabricRuntime.FabricAnimatableButtonInterface.PlayCloseAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IFabricAnimatableButtonInterface::PlayCloseAnimation()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlayCloseAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricAnimatableButtonInterface.PlayOpenAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IFabricAnimatableButtonInterface::PlayOpenAnimation()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlayOpenAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.GetCloseTimeline
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTimelineComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTimelineComponent* AFabricButtonBase::GetCloseTimeline()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCloseTimeline");

	Params::FabricButtonBase_GetCloseTimeline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonBase.GetOpenTimeline
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTimelineComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTimelineComponent* AFabricButtonBase::GetOpenTimeline()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetOpenTimeline");

	Params::FabricButtonBase_GetOpenTimeline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonBase.HandleButtonClicked
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::HandleButtonClicked()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.HandleButtonDoubleClicked
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::HandleButtonDoubleClicked()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonDoubleClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.HandleButtonHovered
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::HandleButtonHovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.HandleButtonPressed
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::HandleButtonPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.HandleButtonReleased
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::HandleButtonReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.HandleButtonUnhovered
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::HandleButtonUnhovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFabricButtonBase::IsEnabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsEnabled");

	Params::FabricButtonBase_IsEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonBase.IsHovered
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFabricButtonBase::IsHovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsHovered");

	Params::FabricButtonBase_IsHovered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonBase.IsPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFabricButtonBase::IsPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsPressed");

	Params::FabricButtonBase_IsPressed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonBase.IsToggledOn
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFabricButtonBase::IsToggledOn()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsToggledOn");

	Params::FabricButtonBase_IsToggledOn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonBase.OnButtonClicked
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::OnButtonClicked()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnButtonClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.OnButtonDoubleClicked
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::OnButtonDoubleClicked()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnButtonDoubleClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.OnButtonPressed
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::OnButtonPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnButtonPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.OnButtonReleased
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::OnButtonReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnButtonReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.OnDisabled
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::OnDisabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.OnEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AFabricButtonBase::OnEnabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.OnHovered
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::OnHovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.OnToggleStateChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsToggled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFabricButtonBase::OnToggleStateChanged(bool bIsToggled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnToggleStateChanged");

	Params::FabricButtonBase_OnToggleStateChanged Parms{};

	Parms.bIsToggled = bIsToggled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricButtonBase.OnUnhovered
// (Native, Event, Public, BlueprintEvent)

void AFabricButtonBase::OnUnhovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonBase.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFabricButtonBase::SetEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::FabricButtonBase_SetEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricButtonBase.SetToggleState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewToggleState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBroadcast                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFabricButtonBase::SetToggleState(bool bNewToggleState, bool bBroadcast, bool bForce)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetToggleState");

	Params::FabricButtonBase_SetToggleState Parms{};

	Parms.bNewToggleState = bNewToggleState;
	Parms.bBroadcast = bBroadcast;
	Parms.bForce = bForce;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricButtonBase.SetWidgetViewModel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFabricInteractableViewModel*     ViewModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFabricButtonBase::SetWidgetViewModel(class UFabricInteractableViewModel* ViewModel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWidgetViewModel");

	Params::FabricButtonBase_SetWidgetViewModel Parms{};

	Parms.ViewModel = ViewModel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricButtonBase.SwapToggle
// (Final, Native, Public, BlueprintCallable)

void AFabricButtonBase::SwapToggle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SwapToggle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.ConstructButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFabricButtonComponentBase::ConstructButton()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ConstructButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.GetCloseTimeline
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTimelineComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTimelineComponent* UFabricButtonComponentBase::GetCloseTimeline()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCloseTimeline");

	Params::FabricButtonComponentBase_GetCloseTimeline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonComponentBase.GetOpenTimeline
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTimelineComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTimelineComponent* UFabricButtonComponentBase::GetOpenTimeline()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetOpenTimeline");

	Params::FabricButtonComponentBase_GetOpenTimeline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonComponentBase.HandleButtonClicked
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::HandleButtonClicked()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.HandleButtonDoubleClicked
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::HandleButtonDoubleClicked()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonDoubleClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.HandleButtonHovered
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::HandleButtonHovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.HandleButtonPressed
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::HandleButtonPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.HandleButtonReleased
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::HandleButtonReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.HandleButtonUnhovered
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::HandleButtonUnhovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleButtonUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricButtonComponentBase::IsEnabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsEnabled");

	Params::FabricButtonComponentBase_IsEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonComponentBase.IsHovered
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricButtonComponentBase::IsHovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsHovered");

	Params::FabricButtonComponentBase_IsHovered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonComponentBase.IsPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricButtonComponentBase::IsPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsPressed");

	Params::FabricButtonComponentBase_IsPressed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonComponentBase.IsToggledOn
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricButtonComponentBase::IsToggledOn()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsToggledOn");

	Params::FabricButtonComponentBase_IsToggledOn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricButtonComponentBase.OnButtonClicked
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::OnButtonClicked()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnButtonClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.OnButtonDoubleClicked
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::OnButtonDoubleClicked()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnButtonDoubleClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.OnButtonPressed
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::OnButtonPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnButtonPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.OnButtonReleased
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::OnButtonReleased()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnButtonReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.OnDisabled
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::OnDisabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.OnEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFabricButtonComponentBase::OnEnabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.OnHovered
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::OnHovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.OnToggleStateChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsToggled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricButtonComponentBase::OnToggleStateChanged(bool bIsToggled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnToggleStateChanged");

	Params::FabricButtonComponentBase_OnToggleStateChanged Parms{};

	Parms.bIsToggled = bIsToggled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricButtonComponentBase.OnUnhovered
// (Native, Event, Public, BlueprintEvent)

void UFabricButtonComponentBase::OnUnhovered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricButtonComponentBase.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricButtonComponentBase::SetEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::FabricButtonComponentBase_SetEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricButtonComponentBase.SetToggleState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewToggleState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBroadcast                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricButtonComponentBase::SetToggleState(bool bNewToggleState, bool bBroadcast, bool bForce)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetToggleState");

	Params::FabricButtonComponentBase_SetToggleState Parms{};

	Parms.bNewToggleState = bNewToggleState;
	Parms.bBroadcast = bBroadcast;
	Parms.bForce = bForce;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricButtonComponentBase.SetWidgetViewModel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFabricInteractableViewModel*     ViewModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricButtonComponentBase::SetWidgetViewModel(class UFabricInteractableViewModel* ViewModel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWidgetViewModel");

	Params::FabricButtonComponentBase_SetWidgetViewModel Parms{};

	Parms.ViewModel = ViewModel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricButtonComponentBase.SwapToggle
// (Final, Native, Public, BlueprintCallable)

void UFabricButtonComponentBase::SwapToggle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SwapToggle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundPatchOwner.GetMetaSoundPatchWrapper
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UFabricMetaSoundPatchWrapper*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFabricMetaSoundPatchWrapper* IFabricMetaSoundPatchOwner::GetMetaSoundPatchWrapper()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMetaSoundPatchWrapper");

	Params::FabricMetaSoundPatchOwner_GetMetaSoundPatchWrapper Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricAudioGenerator.GetAudioAnalyzer
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FSourceEffectChainEntry          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSourceEffectChainEntry IFabricAudioGenerator::GetAudioAnalyzer()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAudioAnalyzer");

	Params::FabricAudioGenerator_GetAudioAnalyzer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricAudioModifier.GetSourceEffectChainEntries
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TArray<struct FSourceEffectChainEntry>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSourceEffectChainEntry> IFabricAudioModifier::GetSourceEffectChainEntries()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSourceEffectChainEntries");

	Params::FabricAudioModifier_GetSourceEffectChainEntries Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricAudioReceiver.GetSoundSourceBus
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USoundSourceBus*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundSourceBus* IFabricAudioReceiver::GetSoundSourceBus()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSoundSourceBus");

	Params::FabricAudioReceiver_GetSoundSourceBus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatGenerator.GetFloatProvider
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UFabricFloatProviderBase*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFabricFloatProviderBase* IFabricFloatGenerator::GetFloatProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFloatProvider");

	Params::FabricFloatGenerator_GetFloatProvider Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatReceiver.SetFloatProviders
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class UFabricFloatProviderBase*> FloatProvider                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IFabricFloatReceiver::SetFloatProviders(const TArray<class UFabricFloatProviderBase*>& FloatProvider)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFloatProviders");

	Params::FabricFloatReceiver_SetFloatProviders Parms{};

	Parms.FloatProvider = std::move(FloatProvider);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricTextureGenerator.GetTextureProvider
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UFabricTextureProviderBase*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFabricTextureProviderBase* IFabricTextureGenerator::GetTextureProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTextureProvider");

	Params::FabricTextureGenerator_GetTextureProvider Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricTextureModifier.GetTextureModifier
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UFabricTextureModifierBase*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFabricTextureModifierBase* IFabricTextureModifier::GetTextureModifier()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTextureModifier");

	Params::FabricTextureModifier_GetTextureModifier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricTextureModifier.IsShowingTexturePreview
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IFabricTextureModifier::IsShowingTexturePreview() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsShowingTexturePreview");

	Params::FabricTextureModifier_IsShowingTexturePreview Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricTextureReceiver.OnTexturesChanged
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FFabricTextureProviderTexture>Texture                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IFabricTextureReceiver::OnTexturesChanged(const TArray<struct FFabricTextureProviderTexture>& Texture)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTexturesChanged");

	Params::FabricTextureReceiver_OnTexturesChanged Parms{};

	Parms.Texture = std::move(Texture);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMeshGenerator.GetMeshProvider
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UFabricMeshProviderBase*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFabricMeshProviderBase* IFabricMeshGenerator::GetMeshProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMeshProvider");

	Params::FabricMeshGenerator_GetMeshProvider Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMeshModifier.OnMeshesChanged
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FFabricMeshInstanceReference>InstanceMeshReferences                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bInstancesChanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricMeshModifier::OnMeshesChanged(const TArray<struct FFabricMeshInstanceReference>& InstanceMeshReferences, bool bInstancesChanged)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMeshesChanged");

	Params::FabricMeshModifier_OnMeshesChanged Parms{};

	Parms.InstanceMeshReferences = std::move(InstanceMeshReferences);
	Parms.bInstancesChanged = bInstancesChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMeshModifier.GetMeshModifier
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UFabricMeshModifierBase*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFabricMeshModifierBase* IFabricMeshModifier::GetMeshModifier() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMeshModifier");

	Params::FabricMeshModifier_GetMeshModifier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMeshModifier.IsShowingMeshPreview
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IFabricMeshModifier::IsShowingMeshPreview() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsShowingMeshPreview");

	Params::FabricMeshModifier_IsShowingMeshPreview Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMeshReceiver.OnMeshInstanceReferencesChanged
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FFabricMeshInstanceReference>MeshInstanceReferences                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bMeshChanged                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInstancesChanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricMeshReceiver::OnMeshInstanceReferencesChanged(const TArray<struct FFabricMeshInstanceReference>& MeshInstanceReferences, bool bMeshChanged, bool bInstancesChanged)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMeshInstanceReferencesChanged");

	Params::FabricMeshReceiver_OnMeshInstanceReferencesChanged Parms{};

	Parms.MeshInstanceReferences = std::move(MeshInstanceReferences);
	Parms.bMeshChanged = bMeshChanged;
	Parms.bInstancesChanged = bInstancesChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMeshReceiver.OnMeshInstancesChanged
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FTransform>               Meshes                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IFabricMeshReceiver::OnMeshInstancesChanged(const TArray<struct FTransform>& Meshes)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMeshInstancesChanged");

	Params::FabricMeshReceiver_OnMeshInstancesChanged Parms{};

	Parms.Meshes = std::move(Meshes);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMeshReceiver.OnMeshReferenceChanged
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FFabricMeshProviderMeshReference ReferenceMesh                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricMeshReceiver::OnMeshReferenceChanged(const struct FFabricMeshProviderMeshReference& ReferenceMesh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMeshReferenceChanged");

	Params::FabricMeshReceiver_OnMeshReferenceChanged Parms{};

	Parms.ReferenceMesh = std::move(ReferenceMesh);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricModulatable.OnAnyOptionUpdated
// (Final, Native, Protected)

void UFabricModulatable::OnAnyOptionUpdated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAnyOptionUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricModulatable.OnModulatedPropertyChanged
// (Final, Native, Private)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ModulatorObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricModulatable::OnModulatedPropertyChanged(const class FString& Value, class UObject* ModulatorObject)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnModulatedPropertyChanged");

	Params::FabricModulatable_OnModulatedPropertyChanged Parms{};

	Parms.Value = std::move(Value);
	Parms.ModulatorObject = ModulatorObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricModulatable.OnModulatorFloatProviderConnectionChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bConnected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ModulatorObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricModulatable::OnModulatorFloatProviderConnectionChanged(bool bConnected, class UObject* ModulatorObject)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnModulatorFloatProviderConnectionChanged");

	Params::FabricModulatable_OnModulatorFloatProviderConnectionChanged Parms{};

	Parms.bConnected = bConnected;
	Parms.ModulatorObject = ModulatorObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricModulatable.OnOptionsLoaded
// (Final, Native, Protected)

void UFabricModulatable::OnOptionsLoaded()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnOptionsLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricModulatable.GetModulatedActor
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UFabricModulatable::GetModulatedActor() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetModulatedActor");

	Params::FabricModulatable_GetModulatedActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricModulatable.GetModulatedBool
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Param                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiSongPos                     SongPos                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    OutBool                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricModulatable::GetModulatedBool(const class FString& Param, const struct FMidiSongPos& SongPos, bool* OutBool) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetModulatedBool");

	Params::FabricModulatable_GetModulatedBool Parms{};

	Parms.Param = std::move(Param);
	Parms.SongPos = std::move(SongPos);

	UObject::ProcessEvent(Func, &Parms);

	if (OutBool != nullptr)
		*OutBool = Parms.OutBool;

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricModulatable.GetModulatedEnum
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Param                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiSongPos                     SongPos                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   OutEnum                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricModulatable::GetModulatedEnum(const class FString& Param, const struct FMidiSongPos& SongPos, uint8* OutEnum) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetModulatedEnum");

	Params::FabricModulatable_GetModulatedEnum Parms{};

	Parms.Param = std::move(Param);
	Parms.SongPos = std::move(SongPos);

	UObject::ProcessEvent(Func, &Parms);

	if (OutEnum != nullptr)
		*OutEnum = Parms.OutEnum;

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricModulatable.GetModulatedFloat
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Param                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiSongPos                     SongPos                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   OutFloat                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricModulatable::GetModulatedFloat(const class FString& Param, const struct FMidiSongPos& SongPos, float* OutFloat) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetModulatedFloat");

	Params::FabricModulatable_GetModulatedFloat Parms{};

	Parms.Param = std::move(Param);
	Parms.SongPos = std::move(SongPos);

	UObject::ProcessEvent(Func, &Parms);

	if (OutFloat != nullptr)
		*OutFloat = Parms.OutFloat;

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricModulatable.GetModulatedInt
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Param                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiSongPos                     SongPos                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   OutInt                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricModulatable::GetModulatedInt(const class FString& Param, const struct FMidiSongPos& SongPos, int32* OutInt) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetModulatedInt");

	Params::FabricModulatable_GetModulatedInt Parms{};

	Parms.Param = std::move(Param);
	Parms.SongPos = std::move(SongPos);

	UObject::ProcessEvent(Func, &Parms);

	if (OutInt != nullptr)
		*OutInt = Parms.OutInt;

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricModulatable.GetModulatedString
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Param                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiSongPos                     SongPos                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           OutString                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricModulatable::GetModulatedString(const class FString& Param, const struct FMidiSongPos& SongPos, class FString* OutString) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetModulatedString");

	Params::FabricModulatable_GetModulatedString Parms{};

	Parms.Param = std::move(Param);
	Parms.SongPos = std::move(SongPos);

	UObject::ProcessEvent(Func, &Parms);

	if (OutString != nullptr)
		*OutString = std::move(Parms.OutString);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricModulatable.IsParamModulated
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Param                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricModulatable::IsParamModulated(const class FString& Param) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsParamModulated");

	Params::FabricModulatable_IsParamModulated Parms{};

	Parms.Param = std::move(Param);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderBase.ReceiveTick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricFloatProviderBase::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ReceiveTick");

	Params::FabricFloatProviderBase_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricFloatProviderBase.SetAssociatedPatchWrapper
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFabricMetaSoundModulatorPatchWrapper*PatchWrapper                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricFloatProviderBase::SetAssociatedPatchWrapper(class UFabricMetaSoundModulatorPatchWrapper* PatchWrapper)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAssociatedPatchWrapper");

	Params::FabricFloatProviderBase_SetAssociatedPatchWrapper Parms{};

	Parms.PatchWrapper = PatchWrapper;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricFloatProviderBase.SetMusicClock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicClockComponent*             NewMusicClock                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricFloatProviderBase::SetMusicClock(class UMusicClockComponent* NewMusicClock)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicClock");

	Params::FabricFloatProviderBase_SetMusicClock Parms{};

	Parms.NewMusicClock = NewMusicClock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricFloatProviderBase.SetProviderEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsEnabled                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricFloatProviderBase::SetProviderEnabled(bool bInIsEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetProviderEnabled");

	Params::FabricFloatProviderBase_SetProviderEnabled Parms{};

	Parms.bInIsEnabled = bInIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricFloatProviderBase.GetAssociatedPatchWrapper
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFabricMetaSoundModulatorPatchWrapper*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFabricMetaSoundModulatorPatchWrapper* UFabricFloatProviderBase::GetAssociatedPatchWrapper() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAssociatedPatchWrapper");

	Params::FabricFloatProviderBase_GetAssociatedPatchWrapper Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderBase.GetCurrentFloat
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricFloatProviderBase::GetCurrentFloat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentFloat");

	Params::FabricFloatProviderBase_GetCurrentFloat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderBase.GetCurrentSongPos
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMidiSongPos                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMidiSongPos UFabricFloatProviderBase::GetCurrentSongPos() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentSongPos");

	Params::FabricFloatProviderBase_GetCurrentSongPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderBase.GetCurrentSongPosWithOffset
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   OffsetSeconds                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiSongPos                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMidiSongPos UFabricFloatProviderBase::GetCurrentSongPosWithOffset(float OffsetSeconds) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentSongPosWithOffset");

	Params::FabricFloatProviderBase_GetCurrentSongPosWithOffset Parms{};

	Parms.OffsetSeconds = OffsetSeconds;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderBase.GetFloatAtSongPos
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMidiSongPos                     SongPos                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricFloatProviderBase::GetFloatAtSongPos(const struct FMidiSongPos& SongPos) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFloatAtSongPos");

	Params::FabricFloatProviderBase_GetFloatAtSongPos Parms{};

	Parms.SongPos = std::move(SongPos);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderBase.GetFloatProviderType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFabricFloatProviderType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFabricFloatProviderType UFabricFloatProviderBase::GetFloatProviderType() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFloatProviderType");

	Params::FabricFloatProviderBase_GetFloatProviderType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderWave.AddPreviewDisplayMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricFloatProviderWave::AddPreviewDisplayMesh(class UStaticMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddPreviewDisplayMesh");

	Params::FabricFloatProviderWave_AddPreviewDisplayMesh Parms{};

	Parms.Mesh = Mesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricFloatProviderWave.ClearPreviewDisplayMeshes
// (Final, Native, Public, BlueprintCallable)

void UFabricFloatProviderWave::ClearPreviewDisplayMeshes()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearPreviewDisplayMeshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricFloatProviderWave.GetPreviewDisplayMeshes
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UStaticMeshComponent*>     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UStaticMeshComponent*> UFabricFloatProviderWave::GetPreviewDisplayMeshes()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPreviewDisplayMeshes");

	Params::FabricFloatProviderWave_GetPreviewDisplayMeshes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderWave.RemovePreviewDisplayMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricFloatProviderWave::RemovePreviewDisplayMesh(class UStaticMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemovePreviewDisplayMesh");

	Params::FabricFloatProviderWave_RemovePreviewDisplayMesh Parms{};

	Parms.Mesh = Mesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricFloatProviderWave.SetFreePhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFreePhase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricFloatProviderWave::SetFreePhase(float InFreePhase)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFreePhase");

	Params::FabricFloatProviderWave_SetFreePhase Parms{};

	Parms.InFreePhase = InFreePhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricFloatProviderWave.SetRandomSeedByGuid
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            InRandomGuid                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricFloatProviderWave::SetRandomSeedByGuid(const struct FGuid& InRandomGuid)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRandomSeedByGuid");

	Params::FabricFloatProviderWave_SetRandomSeedByGuid Parms{};

	Parms.InRandomGuid = std::move(InRandomGuid);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricFloatProviderWave.GetCurrentFreePhase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricFloatProviderWave::GetCurrentFreePhase() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentFreePhase");

	Params::FabricFloatProviderWave_GetCurrentFreePhase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderWave.GetCurrentPhase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricFloatProviderWave::GetCurrentPhase() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentPhase");

	Params::FabricFloatProviderWave_GetCurrentPhase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderWave.GetRandomSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFabricFloatProviderWave::GetRandomSeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRandomSeed");

	Params::FabricFloatProviderWave_GetRandomSeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderStep.GetStepLengthBeats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricFloatProviderStep::GetStepLengthBeats() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStepLengthBeats");

	Params::FabricFloatProviderStep_GetStepLengthBeats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderValueSetter.BroadcastCurrentValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   OverriddenBeat                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricFloatProviderValueSetter::BroadcastCurrentValue(float OverriddenBeat)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BroadcastCurrentValue");

	Params::FabricFloatProviderValueSetter_BroadcastCurrentValue Parms{};

	Parms.OverriddenBeat = OverriddenBeat;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderValueSetter.CalculateTransitionTiming
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricFloatProviderValueSetter::CalculateTransitionTiming() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CalculateTransitionTiming");

	Params::FabricFloatProviderValueSetter_CalculateTransitionTiming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderValueSetter.CanUsePredictiveBeatBroadcasting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricFloatProviderValueSetter::CanUsePredictiveBeatBroadcasting() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanUsePredictiveBeatBroadcasting");

	Params::FabricFloatProviderValueSetter_CanUsePredictiveBeatBroadcasting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricFloatProviderValueSetter.GetUpdateBeat
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricFloatProviderValueSetter::GetUpdateBeat() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetUpdateBeat");

	Params::FabricFloatProviderValueSetter_GetUpdateBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractableControllerComponent.ClientReceiveDoesIslandContainFabricDevices
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// bool                                    bIslandContainsFabricDevices                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricInteractableControllerComponent::ClientReceiveDoesIslandContainFabricDevices(const bool bIslandContainsFabricDevices)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientReceiveDoesIslandContainFabricDevices");

	Params::FabricInteractableControllerComponent_ClientReceiveDoesIslandContainFabricDevices Parms{};

	Parms.bIslandContainsFabricDevices = bIslandContainsFabricDevices;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractableControllerComponent.EnsurePlayerHasInteractionTool
// (Final, Native, Public, BlueprintCallable)

void UFabricInteractableControllerComponent::EnsurePlayerHasInteractionTool()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnsurePlayerHasInteractionTool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractableControllerComponent.GiveBackInteractionTool
// (Final, Native, Public, BlueprintCallable)

void UFabricInteractableControllerComponent::GiveBackInteractionTool()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GiveBackInteractionTool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractableControllerComponent.OnCreativeModeEnabledChangedDelegate
// (Final, Native, Public)
// Parameters:
// bool                                    bCreativeEnabled                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricInteractableControllerComponent::OnCreativeModeEnabledChangedDelegate(bool bCreativeEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCreativeModeEnabledChangedDelegate");

	Params::FabricInteractableControllerComponent_OnCreativeModeEnabledChangedDelegate Parms{};

	Parms.bCreativeEnabled = bCreativeEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractableControllerComponent.ServerGivePlayerFabricInteractionTool
// (Net, NetReliable, Native, Event, Public, NetServer)

void UFabricInteractableControllerComponent::ServerGivePlayerFabricInteractionTool()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerGivePlayerFabricInteractionTool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractableControllerComponent.ServerRequestDoesIslandContainFabricDevices
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UFabricInteractableControllerComponent::ServerRequestDoesIslandContainFabricDevices()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestDoesIslandContainFabricDevices");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractable.CanInteractWithHoldable
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IFabricHoldable> Holdable                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IFabricInteractable::CanInteractWithHoldable(const TScriptInterface<class IFabricHoldable>& Holdable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanInteractWithHoldable");

	Params::FabricInteractable_CanInteractWithHoldable Parms{};

	Parms.Holdable = Holdable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.EndInteraction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasDragAndDropInteraction                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricInteractable::EndInteraction(class APlayerController* PlayerController, bool bWasDragAndDropInteraction)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EndInteraction");

	Params::FabricInteractable_EndInteraction Parms{};

	Parms.PlayerController = PlayerController;
	Parms.bWasDragAndDropInteraction = bWasDragAndDropInteraction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractable.GetContinuousInteractableDirection
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFabricContinuousInteractionDirection   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFabricContinuousInteractionDirection IFabricInteractable::GetContinuousInteractableDirection()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContinuousInteractableDirection");

	Params::FabricInteractable_GetContinuousInteractableDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.GetContinuousInteractableValueNormalized
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IFabricInteractable::GetContinuousInteractableValueNormalized()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContinuousInteractableValueNormalized");

	Params::FabricInteractable_GetContinuousInteractableValueNormalized Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.GetInteractableComponentLocation
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Interactable                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector IFabricInteractable::GetInteractableComponentLocation(class USceneComponent* Interactable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInteractableComponentLocation");

	Params::FabricInteractable_GetInteractableComponentLocation Parms{};

	Parms.Interactable = Interactable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.GetInteractableForwardVector
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Interactable                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector IFabricInteractable::GetInteractableForwardVector(class USceneComponent* Interactable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInteractableForwardVector");

	Params::FabricInteractable_GetInteractableForwardVector Parms{};

	Parms.Interactable = Interactable;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.GetInteractableType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFabricInteractableType                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFabricInteractableType IFabricInteractable::GetInteractableType()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInteractableType");

	Params::FabricInteractable_GetInteractableType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.GetInteractionSFX
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* IFabricInteractable::GetInteractionSFX()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInteractionSFX");

	Params::FabricInteractable_GetInteractionSFX Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.GetLinkedInteractable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* IFabricInteractable::GetLinkedInteractable()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLinkedInteractable");

	Params::FabricInteractable_GetLinkedInteractable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.IsFocusDependentOnInteractionContext
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IFabricInteractable::IsFocusDependentOnInteractionContext(class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsFocusDependentOnInteractionContext");

	Params::FabricInteractable_IsFocusDependentOnInteractionContext Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.IsValidToInteractWith
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IFabricInteractable::IsValidToInteractWith(class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsValidToInteractWith");

	Params::FabricInteractable_IsValidToInteractWith Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.OnInteractionFocusTargetChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          FocusTarget                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFocused                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricInteractable::OnInteractionFocusTargetChanged(class APlayerController* Controller, class UObject* FocusTarget, bool bIsFocused)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnInteractionFocusTargetChanged");

	Params::FabricInteractable_OnInteractionFocusTargetChanged Parms{};

	Parms.Controller = Controller;
	Parms.FocusTarget = FocusTarget;
	Parms.bIsFocused = bIsFocused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractable.SetFocused
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsFocused                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricInteractable::SetFocused(bool bIsFocused)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFocused");

	Params::FabricInteractable_SetFocused Parms{};

	Parms.bIsFocused = bIsFocused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractable.SetHitComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricInteractable::SetHitComponent(class USceneComponent* HitComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetHitComponent");

	Params::FabricInteractable_SetHitComponent Parms{};

	Parms.HitComponent = HitComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractable.SetInteractable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInteractable                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricInteractable::SetInteractable(bool bInteractable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetInteractable");

	Params::FabricInteractable_SetInteractable Parms{};

	Parms.bInteractable = bInteractable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractable.ShouldPassInteractionToComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFabricInteractionTool*           InteractionTool                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IFabricInteractable::ShouldPassInteractionToComponent(class AFabricInteractionTool* InteractionTool)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ShouldPassInteractionToComponent");

	Params::FabricInteractable_ShouldPassInteractionToComponent Parms{};

	Parms.InteractionTool = InteractionTool;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractable.StartInteraction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricInteractable::StartInteraction(class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartInteraction");

	Params::FabricInteractable_StartInteraction Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractable.StartSpecialInteraction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricInteractable::StartSpecialInteraction(class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartSpecialInteraction");

	Params::FabricInteractable_StartSpecialInteraction Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractable.DoesInteractionRequireHoldable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IFabricInteractable::DoesInteractionRequireHoldable() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DoesInteractionRequireHoldable");

	Params::FabricInteractable_DoesInteractionRequireHoldable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractablePlayspaceComponent.OnDownloadOnDemandCompleteIndividualClient
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FEventMessageTag                 Channel                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FClientFinishedDownloadOnDemand  Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFabricInteractablePlayspaceComponent::OnDownloadOnDemandCompleteIndividualClient(const struct FEventMessageTag& Channel, const struct FClientFinishedDownloadOnDemand& Context)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDownloadOnDemandCompleteIndividualClient");

	Params::FabricInteractablePlayspaceComponent_OnDownloadOnDemandCompleteIndividualClient Parms{};

	Parms.Channel = std::move(Channel);
	Parms.Context = std::move(Context);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractablePlayspaceComponent.OnPlayspaceUserAdded
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FPlayspaceUser                   PlayspaceUser                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFabricInteractablePlayspaceComponent::OnPlayspaceUserAdded(const struct FPlayspaceUser& PlayspaceUser)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPlayspaceUserAdded");

	Params::FabricInteractablePlayspaceComponent_OnPlayspaceUserAdded Parms{};

	Parms.PlayspaceUser = std::move(PlayspaceUser);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractablePlayspaceComponent.SetFabricDeviceExistsInPlayspace
// (Final, Native, Public, BlueprintCallable)

void UFabricInteractablePlayspaceComponent::SetFabricDeviceExistsInPlayspace()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFabricDeviceExistsInPlayspace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.ClientDeactiveWeaponAndState
// (Net, NetReliable, Native, Event, Protected, NetClient)

void AFabricInteractionTool::ClientDeactiveWeaponAndState()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientDeactiveWeaponAndState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.ClientStopInteracting
// (Net, NetReliable, Native, Event, Protected, NetClient)

void AFabricInteractionTool::ClientStopInteracting()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientStopInteracting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.DeactiveWeaponAndState
// (Native, Protected, BlueprintCallable)

void AFabricInteractionTool::DeactiveWeaponAndState()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DeactiveWeaponAndState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.GetContinuousInteractableValueNormalized
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFabricInteractionTool::GetContinuousInteractableValueNormalized()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContinuousInteractableValueNormalized");

	Params::FabricInteractionTool_GetContinuousInteractableValueNormalized Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractionTool.GetContinuousInteractionDirection
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EFabricContinuousInteractionDirection   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFabricContinuousInteractionDirection AFabricInteractionTool::GetContinuousInteractionDirection()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContinuousInteractionDirection");

	Params::FabricInteractionTool_GetContinuousInteractionDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractionTool.GetContinuousMovementValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFabricInteractionTool::GetContinuousMovementValue()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContinuousMovementValue");

	Params::FabricInteractionTool_GetContinuousMovementValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractionTool.GetContinuousStateValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AFabricInteractionTool::GetContinuousStateValue()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContinuousStateValue");

	Params::FabricInteractionTool_GetContinuousStateValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractionTool.GetFabricInteractionToolState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// EFabricInteractionToolStates            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFabricInteractionToolStates AFabricInteractionTool::GetFabricInteractionToolState()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFabricInteractionToolState");

	Params::FabricInteractionTool_GetFabricInteractionToolState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractionTool.GetHoveredInteractableHitComponent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* AFabricInteractionTool::GetHoveredInteractableHitComponent()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetHoveredInteractableHitComponent");

	Params::FabricInteractionTool_GetHoveredInteractableHitComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractionTool.GetHoveredInteractableType
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EFabricInteractableType                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFabricInteractableType AFabricInteractionTool::GetHoveredInteractableType()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetHoveredInteractableType");

	Params::FabricInteractionTool_GetHoveredInteractableType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractionTool.GetPressedInteractable
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* AFabricInteractionTool::GetPressedInteractable()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPressedInteractable");

	Params::FabricInteractionTool_GetPressedInteractable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractionTool.HandleMetasoundGeneratorCrossfade
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CrossfadeSeconds                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFabricInteractionTool::HandleMetasoundGeneratorCrossfade(float CrossfadeSeconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleMetasoundGeneratorCrossfade");

	Params::FabricInteractionTool_HandleMetasoundGeneratorCrossfade Parms{};

	Parms.CrossfadeSeconds = CrossfadeSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractionTool.IsHoldingCables
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFabricInteractionTool::IsHoldingCables()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsHoldingCables");

	Params::FabricInteractionTool_IsHoldingCables Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricInteractionTool.OnRep_ServerContinuousInteractableValue
// (Final, Native, Protected)

void AFabricInteractionTool::OnRep_ServerContinuousInteractableValue()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ServerContinuousInteractableValue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.OnRep_ServerInteractionData
// (Final, Native, Protected)

void AFabricInteractionTool::OnRep_ServerInteractionData()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ServerInteractionData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.OnRep_ServerIsHoldingCable
// (Final, Native, Protected)

void AFabricInteractionTool::OnRep_ServerIsHoldingCable()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ServerIsHoldingCable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.OnRep_ServerTriggerPressed
// (Final, Native, Protected)

void AFabricInteractionTool::OnRep_ServerTriggerPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ServerTriggerPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.OnSplineUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFabricInteractionToolStates            NewInteractionState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFabricInteractionTool::OnSplineUpdated(EFabricInteractionToolStates NewInteractionState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSplineUpdated");

	Params::FabricInteractionTool_OnSplineUpdated Parms{};

	Parms.NewInteractionState = NewInteractionState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractionTool.ServerHandleFITFired
// (Net, Native, Event, Protected, NetServer)

void AFabricInteractionTool::ServerHandleFITFired()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerHandleFITFired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.ServerSetContinuousInteractableValue
// (Net, Native, Event, Protected, NetServer)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFabricInteractionTool::ServerSetContinuousInteractableValue(float Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetContinuousInteractableValue");

	Params::FabricInteractionTool_ServerSetContinuousInteractableValue Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractionTool.ServerSetInteractionData
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FInteractionData                 NewData                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AFabricInteractionTool::ServerSetInteractionData(const struct FInteractionData& NewData)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetInteractionData");

	Params::FabricInteractionTool_ServerSetInteractionData Parms{};

	Parms.NewData = std::move(NewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractionTool.ServerSetIsHoldingCable
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bHoldingCable                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFabricInteractionTool::ServerSetIsHoldingCable(bool bHoldingCable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetIsHoldingCable");

	Params::FabricInteractionTool_ServerSetIsHoldingCable Parms{};

	Parms.bHoldingCable = bHoldingCable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractionTool.ServerSetSplinePoints
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FInteractionSplinePoints         SplinePoints                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AFabricInteractionTool::ServerSetSplinePoints(const struct FInteractionSplinePoints& SplinePoints)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetSplinePoints");

	Params::FabricInteractionTool_ServerSetSplinePoints Parms{};

	Parms.SplinePoints = std::move(SplinePoints);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractionTool.ServerSetTriggerPressed
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFabricInteractionTool::ServerSetTriggerPressed(bool bPressed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetTriggerPressed");

	Params::FabricInteractionTool_ServerSetTriggerPressed Parms{};

	Parms.bPressed = bPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricInteractionTool.UnholsterWeapon
// (Final, Native, Protected, BlueprintCallable)

void AFabricInteractionTool::UnholsterWeapon()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UnholsterWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricInteractionTool.IsRunningOnOwningClient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFabricInteractionTool::IsRunningOnOwningClient() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsRunningOnOwningClient");

	Params::FabricInteractionTool_IsRunningOnOwningClient Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMeshTreeNode.CopyProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFabricMeshTreeNode*              Other                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMeshTreeNode::CopyProperties(const class UFabricMeshTreeNode* Other)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CopyProperties");

	Params::FabricMeshTreeNode_CopyProperties Parms{};

	Parms.Other = Other;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMeshTreeNode.Reset
// (Final, Native, Public, BlueprintCallable)

void UFabricMeshTreeNode::Reset()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMeshTreeNode.GenerateMeshInstanceReferences
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FFabricMeshInstanceReference>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFabricMeshInstanceReference> UFabricMeshTreeNode::GenerateMeshInstanceReferences() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GenerateMeshInstanceReferences");

	Params::FabricMeshTreeNode_GenerateMeshInstanceReferences Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMeshProviderBase.SetReferenceMesh
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFabricMeshProviderMeshReference InMesh                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMeshProviderBase::SetReferenceMesh(const struct FFabricMeshProviderMeshReference& InMesh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetReferenceMesh");

	Params::FabricMeshProviderBase_SetReferenceMesh Parms{};

	Parms.InMesh = std::move(InMesh);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.AddToGraphOnFirstConnect
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricMetaSoundPatchWrapper::AddToGraphOnFirstConnect()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddToGraphOnFirstConnect");

	Params::FabricMetaSoundPatchWrapper_AddToGraphOnFirstConnect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.AddToManagerGraph
// (Native, Public, BlueprintCallable)
// Parameters:
// class UFabricMetaSoundManagerComponent* Manager                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::AddToManagerGraph(class UFabricMetaSoundManagerComponent* Manager)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddToManagerGraph");

	Params::FabricMetaSoundPatchWrapper_AddToManagerGraph Parms{};

	Parms.Manager = Manager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.NeedsGeneratorHandleUpdate
// (Final, Native, Protected, BlueprintCallable)

void UFabricMetaSoundPatchWrapper::NeedsGeneratorHandleUpdate()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NeedsGeneratorHandleUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.NeedsOutputWatcherUpdate
// (Final, Native, Protected, BlueprintCallable)

void UFabricMetaSoundPatchWrapper::NeedsOutputWatcherUpdate()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NeedsOutputWatcherUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.NeedsParameterPackUpdate
// (Final, Native, Protected, BlueprintCallable)

void UFabricMetaSoundPatchWrapper::NeedsParameterPackUpdate()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NeedsParameterPackUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.OnAddedToManagerGraph
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UFabricMetaSoundManagerComponent* Manager                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::OnAddedToManagerGraph(class UFabricMetaSoundManagerComponent* Manager)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAddedToManagerGraph");

	Params::FabricMetaSoundPatchWrapper_OnAddedToManagerGraph Parms{};

	Parms.Manager = Manager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.OnConnectedModulatorEnable
// (Final, Native, Private)
// Parameters:
// class UFabricMetaSoundPatchWrapper*     EnabledPatchWrapper                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::OnConnectedModulatorEnable(class UFabricMetaSoundPatchWrapper* EnabledPatchWrapper)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnConnectedModulatorEnable");

	Params::FabricMetaSoundPatchWrapper_OnConnectedModulatorEnable Parms{};

	Parms.EnabledPatchWrapper = EnabledPatchWrapper;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.OnMetasoundManagerEndPlay
// (Final, Native, Protected)

void UFabricMetaSoundPatchWrapper::OnMetasoundManagerEndPlay()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMetasoundManagerEndPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.OnMetaSoundOutputChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             OutputName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMetaSoundOutput                 Output                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::OnMetaSoundOutputChanged(class FName OutputName, const struct FMetaSoundOutput& Output)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMetaSoundOutputChanged");

	Params::FabricMetaSoundPatchWrapper_OnMetaSoundOutputChanged Parms{};

	Parms.OutputName = OutputName;
	Parms.Output = std::move(Output);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.OnMetaSoundOutputValueChanged
// (Native, Protected, HasOutParams)
// Parameters:
// class FName                             OutputName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMetaSoundOutput                 MetaSoundOutput                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::OnMetaSoundOutputValueChanged(class FName OutputName, const struct FMetaSoundOutput& MetaSoundOutput)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMetaSoundOutputValueChanged");

	Params::FabricMetaSoundPatchWrapper_OnMetaSoundOutputValueChanged Parms{};

	Parms.OutputName = OutputName;
	Parms.MetaSoundOutput = std::move(MetaSoundOutput);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.RemoveFromCurrentGraph
// (Native, Public, BlueprintCallable)

void UFabricMetaSoundPatchWrapper::RemoveFromCurrentGraph()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveFromCurrentGraph");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.SetBoolInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             MetaSoundInputName                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::SetBoolInput(const class FName& MetaSoundInputName, bool bValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBoolInput");

	Params::FabricMetaSoundPatchWrapper_SetBoolInput Parms{};

	Parms.MetaSoundInputName = MetaSoundInputName;
	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.SetEnumInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             MetaSoundInputName                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::SetEnumInput(const class FName& MetaSoundInputName, uint8 Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnumInput");

	Params::FabricMetaSoundPatchWrapper_SetEnumInput Parms{};

	Parms.MetaSoundInputName = MetaSoundInputName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.SetFloatInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             MetaSoundInputName                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::SetFloatInput(const class FName& MetaSoundInputName, float Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFloatInput");

	Params::FabricMetaSoundPatchWrapper_SetFloatInput Parms{};

	Parms.MetaSoundInputName = MetaSoundInputName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.SetIntInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             MetaSoundInputName                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::SetIntInput(const class FName& MetaSoundInputName, int32 Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetIntInput");

	Params::FabricMetaSoundPatchWrapper_SetIntInput Parms{};

	Parms.MetaSoundInputName = MetaSoundInputName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.SetNodeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::SetNodeEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNodeEnabled");

	Params::FabricMetaSoundPatchWrapper_SetNodeEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.SetPositionalProxyActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InLocationProxyActor                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::SetPositionalProxyActor(class AActor* InLocationProxyActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPositionalProxyActor");

	Params::FabricMetaSoundPatchWrapper_SetPositionalProxyActor Parms{};

	Parms.InLocationProxyActor = InLocationProxyActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.SetRunsOnServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowRunOnServer                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::SetRunsOnServer(bool bAllowRunOnServer)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRunsOnServer");

	Params::FabricMetaSoundPatchWrapper_SetRunsOnServer Parms{};

	Parms.bAllowRunOnServer = bAllowRunOnServer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.SetStringInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             MetaSoundInputName                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundPatchWrapper::SetStringInput(const class FName& MetaSoundInputName, const class FString& Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStringInput");

	Params::FabricMetaSoundPatchWrapper_SetStringInput Parms{};

	Parms.MetaSoundInputName = MetaSoundInputName;
	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.GetMetaSoundInputNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSet<class FName>                       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TSet<class FName> UFabricMetaSoundPatchWrapper::GetMetaSoundInputNames() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMetaSoundInputNames");

	Params::FabricMetaSoundPatchWrapper_GetMetaSoundInputNames Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.GetMusicClock
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMusicClockComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicClockComponent* UFabricMetaSoundPatchWrapper::GetMusicClock() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMusicClock");

	Params::FabricMetaSoundPatchWrapper_GetMusicClock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.GetNodeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricMetaSoundPatchWrapper::GetNodeEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNodeEnabled");

	Params::FabricMetaSoundPatchWrapper_GetNodeEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundPatchWrapper.GetRunsOnServer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricMetaSoundPatchWrapper::GetRunsOnServer() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRunsOnServer");

	Params::FabricMetaSoundPatchWrapper_GetRunsOnServer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundDrumPlayerPatchWrapper.KitIndexChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             Param                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundDrumPlayerPatchWrapper::KitIndexChanged(const class FName& Param, int32 Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("KitIndexChanged");

	Params::FabricMetaSoundDrumPlayerPatchWrapper_KitIndexChanged Parms{};

	Parms.Param = Param;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundDrumPlayerPatchWrapper.LoadDrumPlayerSampleBanks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<TSoftObjectPtr<class UFabricMetasoundDrumPlayerSampleBankAsset>>SampleBankArray                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// TSet<int32>                             KitNumbersToLoad                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFabricMetaSoundDrumPlayerPatchWrapper::LoadDrumPlayerSampleBanks(const TArray<TSoftObjectPtr<class UFabricMetasoundDrumPlayerSampleBankAsset>>& SampleBankArray, const TSet<int32>& KitNumbersToLoad)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LoadDrumPlayerSampleBanks");

	Params::FabricMetaSoundDrumPlayerPatchWrapper_LoadDrumPlayerSampleBanks Parms{};

	Parms.SampleBankArray = std::move(SampleBankArray);
	Parms.KitNumbersToLoad = std::move(KitNumbersToLoad);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundDrumPlayerPatchWrapper.PitchSampleParamChanged
// (Final, Native, Private)
// Parameters:
// int32                                   PitchSampleIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundDrumPlayerPatchWrapper::PitchSampleParamChanged(int32 PitchSampleIndex, int32 Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PitchSampleParamChanged");

	Params::FabricMetaSoundDrumPlayerPatchWrapper_PitchSampleParamChanged Parms{};

	Parms.PitchSampleIndex = PitchSampleIndex;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundDrumPlayerPatchWrapper.SlotLinkedParamChanged
// (Final, Native, Private)
// Parameters:
// int32                                   PitchSampleIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundDrumPlayerPatchWrapper::SlotLinkedParamChanged(int32 PitchSampleIndex, bool Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SlotLinkedParamChanged");

	Params::FabricMetaSoundDrumPlayerPatchWrapper_SlotLinkedParamChanged Parms{};

	Parms.PitchSampleIndex = PitchSampleIndex;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundDrumPlayerPatchWrapper.SlotUnlinkedKitParamChanged
// (Final, Native, Private)
// Parameters:
// int32                                   PitchSampleIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundDrumPlayerPatchWrapper::SlotUnlinkedKitParamChanged(int32 PitchSampleIndex, int32 Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SlotUnlinkedKitParamChanged");

	Params::FabricMetaSoundDrumPlayerPatchWrapper_SlotUnlinkedKitParamChanged Parms{};

	Parms.PitchSampleIndex = PitchSampleIndex;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundInstrumentPlayerPatchWrapper.DriveFFTDataOnPrimitive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Primitive                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundInstrumentPlayerPatchWrapper::DriveFFTDataOnPrimitive(class UPrimitiveComponent* Primitive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DriveFFTDataOnPrimitive");

	Params::FabricMetaSoundInstrumentPlayerPatchWrapper_DriveFFTDataOnPrimitive Parms{};

	Parms.Primitive = Primitive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundInstrumentPlayerPatchWrapper.SetFusionPatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFusionPatch*                     FusionPatch                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundInstrumentPlayerPatchWrapper::SetFusionPatch(class UFusionPatch* FusionPatch)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFusionPatch");

	Params::FabricMetaSoundInstrumentPlayerPatchWrapper_SetFusionPatch Parms{};

	Parms.FusionPatch = FusionPatch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundModulatorPatchWrapper.ConnectToInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFabricMetaSoundNodeInfo         Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             InputName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricMetaSoundModulatorPatchWrapper::ConnectToInput(const struct FFabricMetaSoundNodeInfo& Node, class FName InputName, class FName InputType)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ConnectToInput");

	Params::FabricMetaSoundModulatorPatchWrapper_ConnectToInput Parms{};

	Parms.Node = std::move(Node);
	Parms.InputName = InputName;
	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundModulatorPatchWrapper.SetUserOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPlaylistUserOptionBase*          UserOption                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundModulatorPatchWrapper::SetUserOption(class UPlaylistUserOptionBase* UserOption)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetUserOption");

	Params::FabricMetaSoundModulatorPatchWrapper_SetUserOption Parms{};

	Parms.UserOption = UserOption;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundLFOPatchWrapper.UpdateRandomSeed
// (Final, Native, Public, BlueprintCallable)

void UFabricMetaSoundLFOPatchWrapper::UpdateRandomSeed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateRandomSeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetMetasoundInputNodeName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             NodeName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InputName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UFabricMetaSoundManagerComponent::GetMetasoundInputNodeName(class FName NodeName, class FName InputName)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMetasoundInputNodeName");

	Params::FabricMetaSoundManagerComponent_GetMetasoundInputNodeName Parms{};

	Parms.NodeName = NodeName;
	Parms.InputName = InputName;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetMetasoundOutputNodeName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             NodeName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OutputName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UFabricMetaSoundManagerComponent::GetMetasoundOutputNodeName(class FName NodeName, class FName OutputName)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetMetasoundOutputNodeName");

	Params::FabricMetaSoundManagerComponent_GetMetasoundOutputNodeName Parms{};

	Parms.NodeName = NodeName;
	Parms.OutputName = OutputName;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.AddInputNodeForNodeByNameBP
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFabricMetaSoundNodeInfo         InOutNode                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EFabricUserOptionType                   UserOptionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InputName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::AddInputNodeForNodeByNameBP(struct FFabricMetaSoundNodeInfo& InOutNode, EFabricUserOptionType UserOptionType, const class FName& InputName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddInputNodeForNodeByNameBP");

	Params::FabricMetaSoundManagerComponent_AddInputNodeForNodeByNameBP Parms{};

	Parms.InOutNode = std::move(InOutNode);
	Parms.UserOptionType = UserOptionType;
	Parms.InputName = InputName;

	UObject::ProcessEvent(Func, &Parms);

	InOutNode = std::move(Parms.InOutNode);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.AddOutputNodeForOutputVertex
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMetaSoundBuilderNodeOutputHandleOutputVertex                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NodeName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OutOutputName                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMetaSoundBuilderResult                 Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::AddOutputNodeForOutputVertex(const struct FMetaSoundBuilderNodeOutputHandle& OutputVertex, const class FName& NodeName, class FName* OutOutputName, EMetaSoundBuilderResult* Result)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddOutputNodeForOutputVertex");

	Params::FabricMetaSoundManagerComponent_AddOutputNodeForOutputVertex Parms{};

	Parms.OutputVertex = std::move(OutputVertex);
	Parms.NodeName = NodeName;

	UObject::ProcessEvent(Func, &Parms);

	if (OutOutputName != nullptr)
		*OutOutputName = Parms.OutOutputName;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.FreeMetaSoundNode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFabricMetaSoundNodeInfo         Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::FreeMetaSoundNode(const struct FFabricMetaSoundNodeInfo& Node)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FreeMetaSoundNode");

	Params::FabricMetaSoundManagerComponent_FreeMetaSoundNode Parms{};

	Parms.Node = std::move(Node);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetMetaSoundNodeForWrapper
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFabricMetaSoundPatchWrapper*     PatchWrapper                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFabricMetaSoundNodeInfo         ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFabricMetaSoundNodeInfo UFabricMetaSoundManagerComponent::GetMetaSoundNodeForWrapper(class UFabricMetaSoundPatchWrapper* PatchWrapper)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMetaSoundNodeForWrapper");

	Params::FabricMetaSoundManagerComponent_GetMetaSoundNodeForWrapper Parms{};

	Parms.PatchWrapper = PatchWrapper;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.InvalidateMetasoundGeneratorHandle
// (Final, Native, Public, BlueprintCallable)

void UFabricMetaSoundManagerComponent::InvalidateMetasoundGeneratorHandle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InvalidateMetasoundGeneratorHandle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.NotifyGraphChanged
// (Final, Native, Public, BlueprintCallable)

void UFabricMetaSoundManagerComponent::NotifyGraphChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NotifyGraphChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.OnGeneratorJustStarted
// (Final, Native, Private)
// Parameters:
// int32                                   ComponentIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::OnGeneratorJustStarted(int32 ComponentIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnGeneratorJustStarted");

	Params::FabricMetaSoundManagerComponent_OnGeneratorJustStarted Parms{};

	Parms.ComponentIndex = ComponentIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.PauseMetasound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricMetaSoundManagerComponent::PauseMetasound()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PauseMetasound");

	Params::FabricMetaSoundManagerComponent_PauseMetasound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.PlayMetasound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABuildingActor*                   InStartMetasoundLockDevice                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricMetaSoundManagerComponent::PlayMetasound(class ABuildingActor* InStartMetasoundLockDevice)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlayMetasound");

	Params::FabricMetaSoundManagerComponent_PlayMetasound Parms{};

	Parms.InStartMetasoundLockDevice = InStartMetasoundLockDevice;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.RegisterAsAudible
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Device                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AudibleEventGroup                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::RegisterAsAudible(class AActor* Device, const class FName& AudibleEventGroup)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterAsAudible");

	Params::FabricMetaSoundManagerComponent_RegisterAsAudible Parms{};

	Parms.Device = Device;
	Parms.AudibleEventGroup = AudibleEventGroup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SeekToMs
// (Final, Native, Public)
// Parameters:
// float                                   Ms                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SeekToMs(float Ms)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SeekToMs");

	Params::FabricMetaSoundManagerComponent_SeekToMs Parms{};

	Parms.Ms = Ms;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SeekToTimestamp
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMusicTimestamp                  Timestamp                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SeekToTimestamp(const struct FMusicTimestamp& Timestamp)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SeekToTimestamp");

	Params::FabricMetaSoundManagerComponent_SeekToTimestamp Parms{};

	Parms.Timestamp = std::move(Timestamp);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SetAudioComponents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UAudioComponent*>          AudioComponents                                        (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SetAudioComponents(const TArray<class UAudioComponent*>& AudioComponents)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAudioComponents");

	Params::FabricMetaSoundManagerComponent_SetAudioComponents Parms{};

	Parms.AudioComponents = std::move(AudioComponents);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SetCurrentJamSyncType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EJamFabricSyncType                      InJamSyncType                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SetCurrentJamSyncType(const EJamFabricSyncType& InJamSyncType)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCurrentJamSyncType");

	Params::FabricMetaSoundManagerComponent_SetCurrentJamSyncType Parms{};

	Parms.InJamSyncType = InJamSyncType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SetMusicClock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicClockComponent*             MusicClockComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SetMusicClock(class UMusicClockComponent* MusicClockComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicClock");

	Params::FabricMetaSoundManagerComponent_SetMusicClock Parms{};

	Parms.MusicClockComponent = MusicClockComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SetMusicEventPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFabricMetasoundMusicEventPriority      InMusicEventPriority                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SetMusicEventPriority(EFabricMetasoundMusicEventPriority InMusicEventPriority)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicEventPriority");

	Params::FabricMetaSoundManagerComponent_SetMusicEventPriority Parms{};

	Parms.InMusicEventPriority = InMusicEventPriority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SetMusicKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMusicKey                               Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicKeyMode                           Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SetMusicKey(EMusicKey Key, EMusicKeyMode Mode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicKey");

	Params::FabricMetaSoundManagerComponent_SetMusicKey Parms{};

	Parms.Key = Key;
	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SetSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SetSpeed(float Speed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpeed");

	Params::FabricMetaSoundManagerComponent_SetSpeed Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SetTempo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Tempo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SetTempo(float Tempo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTempo");

	Params::FabricMetaSoundManagerComponent_SetTempo Parms{};

	Parms.Tempo = Tempo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.SetTimeSignature
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Numerator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Denominator                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::SetTimeSignature(int32 Numerator, int32 Denominator)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeSignature");

	Params::FabricMetaSoundManagerComponent_SetTimeSignature Parms{};

	Parms.Numerator = Numerator;
	Parms.Denominator = Denominator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.StopMetasound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABuildingActor*                   InStartMetasoundLockDevice                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricMetaSoundManagerComponent::StopMetasound(class ABuildingActor* InStartMetasoundLockDevice)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StopMetasound");

	Params::FabricMetaSoundManagerComponent_StopMetasound Parms{};

	Parms.InStartMetasoundLockDevice = InStartMetasoundLockDevice;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.UnregisterAsAudible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Device                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundManagerComponent::UnregisterAsAudible(class AActor* Device)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UnregisterAsAudible");

	Params::FabricMetaSoundManagerComponent_UnregisterAsAudible Parms{};

	Parms.Device = Device;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.AreAllPatchesReady
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricMetaSoundManagerComponent::AreAllPatchesReady() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AreAllPatchesReady");

	Params::FabricMetaSoundManagerComponent_AreAllPatchesReady Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetBuilder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMetaSoundSourceBuilder*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMetaSoundSourceBuilder* UFabricMetaSoundManagerComponent::GetBuilder() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBuilder");

	Params::FabricMetaSoundManagerComponent_GetBuilder Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetCurrentClientAudibleMusicEventGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UFabricMetaSoundManagerComponent::GetCurrentClientAudibleMusicEventGroup() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentClientAudibleMusicEventGroup");

	Params::FabricMetaSoundManagerComponent_GetCurrentClientAudibleMusicEventGroup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetCurrentJamSyncType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EJamFabricSyncType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EJamFabricSyncType UFabricMetaSoundManagerComponent::GetCurrentJamSyncType() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentJamSyncType");

	Params::FabricMetaSoundManagerComponent_GetCurrentJamSyncType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetCurrentMusicEventTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UFabricMetaSoundManagerComponent::GetCurrentMusicEventTag() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentMusicEventTag");

	Params::FabricMetaSoundManagerComponent_GetCurrentMusicEventTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetCurrentPlaybackAudioComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* UFabricMetaSoundManagerComponent::GetCurrentPlaybackAudioComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentPlaybackAudioComponent");

	Params::FabricMetaSoundManagerComponent_GetCurrentPlaybackAudioComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetCurrentPlaystate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFabricMetasoundPlayState               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFabricMetasoundPlayState UFabricMetaSoundManagerComponent::GetCurrentPlaystate() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentPlaystate");

	Params::FabricMetaSoundManagerComponent_GetCurrentPlaystate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetMusicClock
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMusicClockComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMusicClockComponent* UFabricMetaSoundManagerComponent::GetMusicClock() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMusicClock");

	Params::FabricMetaSoundManagerComponent_GetMusicClock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetMusicEventPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFabricMetasoundMusicEventPriority      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFabricMetasoundMusicEventPriority UFabricMetaSoundManagerComponent::GetMusicEventPriority() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMusicEventPriority");

	Params::FabricMetaSoundManagerComponent_GetMusicEventPriority Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.GetMusicEventTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFabricMetasoundMusicEventPriority      InMusicEventPriority                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UFabricMetaSoundManagerComponent::GetMusicEventTag(EFabricMetasoundMusicEventPriority InMusicEventPriority) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMusicEventTag");

	Params::FabricMetaSoundManagerComponent_GetMusicEventTag Parms{};

	Parms.InMusicEventPriority = InMusicEventPriority;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundManagerComponent.ShouldSeekToStartOnGameReset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricMetaSoundManagerComponent::ShouldSeekToStartOnGameReset() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ShouldSeekToStartOnGameReset");

	Params::FabricMetaSoundManagerComponent_ShouldSeekToStartOnGameReset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricNoteTriggerPatchWrapper.OnMetaSoundMidiEventPassed
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FName                             OutputName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMetaSoundOutput                 Output                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFabricNoteTriggerPatchWrapper::OnMetaSoundMidiEventPassed(class FName OutputName, const struct FMetaSoundOutput& Output)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMetaSoundMidiEventPassed");

	Params::FabricNoteTriggerPatchWrapper_OnMetaSoundMidiEventPassed Parms{};

	Parms.OutputName = OutputName;
	Parms.Output = std::move(Output);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricNoteTriggerPatchWrapper.OnOctaveChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FName                             ParamName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InOctave                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricNoteTriggerPatchWrapper::OnOctaveChanged(const class FName& ParamName, int32 InOctave)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnOctaveChanged");

	Params::FabricNoteTriggerPatchWrapper_OnOctaveChanged Parms{};

	Parms.ParamName = ParamName;
	Parms.InOctave = InOctave;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricNoteTriggerPatchWrapper.OnTriggerNoteChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   NoteIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTriggerActive                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricNoteTriggerPatchWrapper::OnTriggerNoteChanged(int32 NoteIndex, bool bTriggerActive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTriggerNoteChanged");

	Params::FabricNoteTriggerPatchWrapper_OnTriggerNoteChanged Parms{};

	Parms.NoteIndex = NoteIndex;
	Parms.bTriggerActive = bTriggerActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundTreeNode.ConnectToChildNodes
// (Final, Native, Public, BlueprintCallable)

void UFabricMetaSoundTreeNode::ConnectToChildNodes()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ConnectToChildNodes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundTreeNode.GetValidChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UFabricMetaSoundTreeNode*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UFabricMetaSoundTreeNode*> UFabricMetaSoundTreeNode::GetValidChildren()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetValidChildren");

	Params::FabricMetaSoundTreeNode_GetValidChildren Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricMetaSoundTreeNode.Reset
// (Final, Native, Public, BlueprintCallable)

void UFabricMetaSoundTreeNode::Reset()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricMetaSoundSequencerPatchWrapper.SetMidiStepSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMidiStepSequence*                StepSequence                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundSequencerPatchWrapper::SetMidiStepSequence(class UMidiStepSequence* StepSequence)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMidiStepSequence");

	Params::FabricMetaSoundSequencerPatchWrapper_SetMidiStepSequence Parms{};

	Parms.StepSequence = StepSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricMetaSoundSpeakerPatchWrapper.SetAudioBusFromSourceBus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundSourceBus*                  Bus                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricMetaSoundSpeakerPatchWrapper::SetAudioBusFromSourceBus(class USoundSourceBus* Bus)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAudioBusFromSourceBus");

	Params::FabricMetaSoundSpeakerPatchWrapper_SetAudioBusFromSourceBus Parms{};

	Parms.Bus = Bus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricModulatorSource.GetModulators
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UFabricModulatable*               Modulatable                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricModulatorSource::GetModulators(class UFabricModulatable* Modulatable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetModulators");

	Params::FabricModulatorSource_GetModulators Parms{};

	Parms.Modulatable = Modulatable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricModulatorSource.GetUserOption
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                           Property                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlaylistUserOptionBase*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlaylistUserOptionBase* IFabricModulatorSource::GetUserOption(const class FString& Property) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetUserOption");

	Params::FabricModulatorSource_GetUserOption Parms{};

	Parms.Property = std::move(Property);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricModulatorDevice.SetUserOption
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EFabricUserOptionType                   UserOptionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlaylistUserOptionBase*          UserOption                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ModulatorObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IFabricModulatorDevice::SetUserOption(EFabricUserOptionType UserOptionType, class UPlaylistUserOptionBase* UserOption, class UObject* ModulatorObject)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetUserOption");

	Params::FabricModulatorDevice_SetUserOption Parms{};

	Parms.UserOptionType = UserOptionType;
	Parms.UserOption = UserOption;
	Parms.ModulatorObject = ModulatorObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricProgressorManager.IsProgressionGlobal
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFabricProgressionPreset         InProgression                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricProgressorManager::IsProgressionGlobal(const struct FFabricProgressionPreset& InProgression)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsProgressionGlobal");

	Params::FabricProgressorManager_IsProgressionGlobal Parms{};

	Parms.InProgression = std::move(InProgression);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricProgressorManager.SetGlobalProgression
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFabricProgressionPreset         InProgression                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InPresetNumber                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricProgressorManager::SetGlobalProgression(const struct FFabricProgressionPreset& InProgression, int32 InPresetNumber)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGlobalProgression");

	Params::FabricProgressorManager_SetGlobalProgression Parms{};

	Parms.InProgression = std::move(InProgression);
	Parms.InPresetNumber = InPresetNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricProgressorManager.GetGlobalPresetNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFabricProgressorManager::GetGlobalPresetNumber() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGlobalPresetNumber");

	Params::FabricProgressorManager_GetGlobalPresetNumber Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricProgressorManager.GetGlobalProgression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FFabricProgressionPreset   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FFabricProgressionPreset UFabricProgressorManager::GetGlobalProgression() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGlobalProgression");

	Params::FabricProgressorManager_GetGlobalProgression Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricProgressorManager.HasActiveGlobalProgression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricProgressorManager::HasActiveGlobalProgression() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasActiveGlobalProgression");

	Params::FabricProgressorManager_HasActiveGlobalProgression Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.ConstructPreviewVisuals
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepBeatLength                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceUpdateTransform                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInTestNotesOn                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::ConstructPreviewVisuals(int32 NumSteps, float StepBeatLength, bool bForceUpdateTransform, bool bInTestNotesOn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ConstructPreviewVisuals");

	Params::FabricSteppedPreviewFXComponent_ConstructPreviewVisuals Parms{};

	Parms.NumSteps = NumSteps;
	Parms.StepBeatLength = StepBeatLength;
	Parms.bForceUpdateTransform = bForceUpdateTransform;
	Parms.bInTestNotesOn = bInTestNotesOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.GetNoteOn
// (Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricSteppedPreviewFXComponent::GetNoteOn(int32 InstanceIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNoteOn");

	Params::FabricSteppedPreviewFXComponent_GetNoteOn Parms{};

	Parms.InstanceIndex = InstanceIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.OnBeatOffsetChanged
// (Native, Protected)
// Parameters:
// float                                   BeatOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::OnBeatOffsetChanged(float BeatOffset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBeatOffsetChanged");

	Params::FabricSteppedPreviewFXComponent_OnBeatOffsetChanged Parms{};

	Parms.BeatOffset = BeatOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.OnBeatScaleChanged
// (Native, Protected)
// Parameters:
// float                                   BeatScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::OnBeatScaleChanged(float BeatScale)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBeatScaleChanged");

	Params::FabricSteppedPreviewFXComponent_OnBeatScaleChanged Parms{};

	Parms.BeatScale = BeatScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.OnNoteStyleChanged
// (Native, Protected)
// Parameters:
// EFabricNoteStyle                        style                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::OnNoteStyleChanged(EFabricNoteStyle style)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNoteStyleChanged");

	Params::FabricSteppedPreviewFXComponent_OnNoteStyleChanged Parms{};

	Parms.style = style;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.OnNumStepsChanged
// (Native, Protected)
// Parameters:
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::OnNumStepsChanged(int32 NumSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNumStepsChanged");

	Params::FabricSteppedPreviewFXComponent_OnNumStepsChanged Parms{};

	Parms.NumSteps = NumSteps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.OnNumTracksChanged
// (Native, Protected)
// Parameters:
// int32                                   NumTracks                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::OnNumTracksChanged(int32 NumTracks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNumTracksChanged");

	Params::FabricSteppedPreviewFXComponent_OnNumTracksChanged Parms{};

	Parms.NumTracks = NumTracks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.OnPageChanged
// (Native, Protected)
// Parameters:
// int32                                   CurrentPage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::OnPageChanged(int32 CurrentPage)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPageChanged");

	Params::FabricSteppedPreviewFXComponent_OnPageChanged Parms{};

	Parms.CurrentPage = CurrentPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.OnQuarterNotesLengthChanged
// (Native, Protected)
// Parameters:
// float                                   QuarterNoteLength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::OnQuarterNotesLengthChanged(float QuarterNoteLength)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnQuarterNotesLengthChanged");

	Params::FabricSteppedPreviewFXComponent_OnQuarterNotesLengthChanged Parms{};

	Parms.QuarterNoteLength = QuarterNoteLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.SetGenericFloatValue
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FloatValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMarkRenderStateDirty                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::SetGenericFloatValue(int32 InstanceIndex, float FloatValue, bool bMarkRenderStateDirty)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGenericFloatValue");

	Params::FabricSteppedPreviewFXComponent_SetGenericFloatValue Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.FloatValue = FloatValue;
	Parms.bMarkRenderStateDirty = bMarkRenderStateDirty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.SetNoteLength
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NoteLengthBeats                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::SetNoteLength(int32 InstanceIndex, float NoteLengthBeats)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNoteLength");

	Params::FabricSteppedPreviewFXComponent_SetNoteLength Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.NoteLengthBeats = NoteLengthBeats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.SetNoteOn
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NoteOn                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMarkRenderStateDirty                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::SetNoteOn(int32 InstanceIndex, float NoteOn, bool bMarkRenderStateDirty)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNoteOn");

	Params::FabricSteppedPreviewFXComponent_SetNoteOn Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.NoteOn = NoteOn;
	Parms.bMarkRenderStateDirty = bMarkRenderStateDirty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.SetNoteTime
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NoteTimeOffsetBeats                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::SetNoteTime(int32 InstanceIndex, float NoteTimeOffsetBeats)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNoteTime");

	Params::FabricSteppedPreviewFXComponent_SetNoteTime Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.NoteTimeOffsetBeats = NoteTimeOffsetBeats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.SetNumSteps
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::SetNumSteps(int32 NumSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumSteps");

	Params::FabricSteppedPreviewFXComponent_SetNumSteps Parms{};

	Parms.NumSteps = NumSteps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.SetSpanLength
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpanLengthBeats                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::SetSpanLength(int32 InstanceIndex, float SpanLengthBeats)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpanLength");

	Params::FabricSteppedPreviewFXComponent_SetSpanLength Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.SpanLengthBeats = SpanLengthBeats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.UpdateAllCurrentStepData
// (Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StepLengthBeats                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::UpdateAllCurrentStepData(int32 NumSteps, float StepLengthBeats)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateAllCurrentStepData");

	Params::FabricSteppedPreviewFXComponent_UpdateAllCurrentStepData Parms{};

	Parms.NumSteps = NumSteps;
	Parms.StepLengthBeats = StepLengthBeats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.UpdateDeviceEnabledFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::UpdateDeviceEnabledFX(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateDeviceEnabledFX");

	Params::FabricSteppedPreviewFXComponent_UpdateDeviceEnabledFX Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.UpdateExistingTransforms
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumInstances                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::UpdateExistingTransforms(int32 NumInstances, int32 NumSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateExistingTransforms");

	Params::FabricSteppedPreviewFXComponent_UpdateExistingTransforms Parms{};

	Parms.NumInstances = NumInstances;
	Parms.NumSteps = NumSteps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSteppedPreviewFXComponent.UpdateStepData
// (Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMarkRenderStateDirty                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSteppedPreviewFXComponent::UpdateStepData(int32 Index_0, bool bMarkRenderStateDirty)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateStepData");

	Params::FabricSteppedPreviewFXComponent_UpdateStepData Parms{};

	Parms.Index_0 = Index_0;
	Parms.bMarkRenderStateDirty = bMarkRenderStateDirty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerPreviewFXComponent.InitializePreviewFXComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFabricStepSequencerComponent*    InStepSequencer                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFabricStepSequencerGridComponent*InStepSequencerGrid                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInTestNotesOn                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerPreviewFXComponent::InitializePreviewFXComponent(class UFabricStepSequencerComponent* InStepSequencer, class UFabricStepSequencerGridComponent* InStepSequencerGrid, bool bInTestNotesOn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InitializePreviewFXComponent");

	Params::FabricSequencerPreviewFXComponent_InitializePreviewFXComponent Parms{};

	Parms.InStepSequencer = InStepSequencer;
	Parms.InStepSequencerGrid = InStepSequencerGrid;
	Parms.bInTestNotesOn = bInTestNotesOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerPreviewFXComponent.OnFullTableChanged
// (Final, Native, Protected)

void UFabricSequencerPreviewFXComponent::OnFullTableChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnFullTableChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricSequencerPreviewFXComponent.OnStepChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FFabricSequencerStepChangedInfo  StepInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFabricSequencerPreviewFXComponent::OnStepChanged(const struct FFabricSequencerStepChangedInfo& StepInfo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnStepChanged");

	Params::FabricSequencerPreviewFXComponent_OnStepChanged Parms{};

	Parms.StepInfo = std::move(StepInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerPreviewFXComponent.SetSingleTrackNoteOn
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackPICDIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NoteOn                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMarkRenderStateDirty                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerPreviewFXComponent::SetSingleTrackNoteOn(int32 InstanceIndex, int32 TrackPICDIndex, float NoteOn, bool bMarkRenderStateDirty)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSingleTrackNoteOn");

	Params::FabricSequencerPreviewFXComponent_SetSingleTrackNoteOn Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.TrackPICDIndex = TrackPICDIndex;
	Parms.NoteOn = NoteOn;
	Parms.bMarkRenderStateDirty = bMarkRenderStateDirty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerPreviewFXComponent.SetSustainLength
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SustainLengthBeats                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerPreviewFXComponent::SetSustainLength(int32 InstanceIndex, float SustainLengthBeats)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSustainLength");

	Params::FabricSequencerPreviewFXComponent_SetSustainLength Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.SustainLengthBeats = SustainLengthBeats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerPreviewFXComponent.UpdateNoteOn
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMarkRenderStateDirty                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerPreviewFXComponent::UpdateNoteOn(int32 Index_0, int32 NumSteps, bool bMarkRenderStateDirty)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateNoteOn");

	Params::FabricSequencerPreviewFXComponent_UpdateNoteOn Parms{};

	Parms.Index_0 = Index_0;
	Parms.NumSteps = NumSteps;
	Parms.bMarkRenderStateDirty = bMarkRenderStateDirty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.AddSustainInstance
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   StepIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::AddSustainInstance(int32 StepIndex, int32 TrackIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddSustainInstance");

	Params::FabricSequencerSustainComponent_AddSustainInstance Parms{};

	Parms.StepIndex = StepIndex;
	Parms.TrackIndex = TrackIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.CalculateSustainLength
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   NumStepsCoveredBySustain                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricSequencerSustainComponent::CalculateSustainLength(float NumStepsCoveredBySustain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CalculateSustainLength");

	Params::FabricSequencerSustainComponent_CalculateSustainLength Parms{};

	Parms.NumStepsCoveredBySustain = NumStepsCoveredBySustain;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricSequencerSustainComponent.ConstructSustains
// (Final, Native, Protected, BlueprintCallable)

void UFabricSequencerSustainComponent::ConstructSustains()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ConstructSustains");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricSequencerSustainComponent.FindAndDeleteInstance
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   StepIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::FindAndDeleteInstance(int32 StepIndex, int32 TrackIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindAndDeleteInstance");

	Params::FabricSequencerSustainComponent_FindAndDeleteInstance Parms{};

	Parms.StepIndex = StepIndex;
	Parms.TrackIndex = TrackIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.FindHeadNoteAndUpdateInstance
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   StepIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::FindHeadNoteAndUpdateInstance(int32 StepIndex, int32 TrackIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindHeadNoteAndUpdateInstance");

	Params::FabricSequencerSustainComponent_FindHeadNoteAndUpdateInstance Parms{};

	Parms.StepIndex = StepIndex;
	Parms.TrackIndex = TrackIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.InitializeSustainComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFabricStepSequencerComponent*    InStepSequencer                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFabricStepSequencerGridComponent*InStepSequencerGrid                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::InitializeSustainComponent(class UFabricStepSequencerComponent* InStepSequencer, class UFabricStepSequencerGridComponent* InStepSequencerGrid)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InitializeSustainComponent");

	Params::FabricSequencerSustainComponent_InitializeSustainComponent Parms{};

	Parms.InStepSequencer = InStepSequencer;
	Parms.InStepSequencerGrid = InStepSequencerGrid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.OnFullTableChanged
// (Final, Native, Protected)

void UFabricSequencerSustainComponent::OnFullTableChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnFullTableChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricSequencerSustainComponent.OnNumStepsChanged
// (Native, Protected)
// Parameters:
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::OnNumStepsChanged(int32 NumSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNumStepsChanged");

	Params::FabricSequencerSustainComponent_OnNumStepsChanged Parms{};

	Parms.NumSteps = NumSteps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.OnNumTracksChanged
// (Native, Protected)
// Parameters:
// int32                                   NumTracks                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::OnNumTracksChanged(int32 NumTracks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNumTracksChanged");

	Params::FabricSequencerSustainComponent_OnNumTracksChanged Parms{};

	Parms.NumTracks = NumTracks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.OnPageChanged
// (Native, Protected)
// Parameters:
// int32                                   CurrentPage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::OnPageChanged(int32 CurrentPage)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPageChanged");

	Params::FabricSequencerSustainComponent_OnPageChanged Parms{};

	Parms.CurrentPage = CurrentPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.OnStepChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FFabricSequencerStepChangedInfo  StepInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::OnStepChanged(const struct FFabricSequencerStepChangedInfo& StepInfo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnStepChanged");

	Params::FabricSequencerSustainComponent_OnStepChanged Parms{};

	Parms.StepInfo = std::move(StepInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.SetEndBeat
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndBeatValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::SetEndBeat(int32 InstanceIndex, float EndBeatValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEndBeat");

	Params::FabricSequencerSustainComponent_SetEndBeat Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.EndBeatValue = EndBeatValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.SetLoopBeat
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LoopBeatValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::SetLoopBeat(int32 InstanceIndex, float LoopBeatValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLoopBeat");

	Params::FabricSequencerSustainComponent_SetLoopBeat Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.LoopBeatValue = LoopBeatValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.SetStartBeat
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartBeatValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::SetStartBeat(int32 InstanceIndex, float StartBeatValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStartBeat");

	Params::FabricSequencerSustainComponent_SetStartBeat Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.StartBeatValue = StartBeatValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.UpdateDeviceEnabledOnSustain
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::UpdateDeviceEnabledOnSustain(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateDeviceEnabledOnSustain");

	Params::FabricSequencerSustainComponent_UpdateDeviceEnabledOnSustain Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.UpdatePipsOnGridChanged
// (Final, Native, Protected, BlueprintCallable)

void UFabricSequencerSustainComponent::UpdatePipsOnGridChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdatePipsOnGridChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricSequencerSustainComponent.UpdateSustainInstance
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   StepIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContinuous                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStepChanged                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::UpdateSustainInstance(int32 StepIndex, int32 TrackIndex, int32 PageIndex, bool bEnabled, bool bContinuous, bool bStepChanged)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateSustainInstance");

	Params::FabricSequencerSustainComponent_UpdateSustainInstance Parms{};

	Parms.StepIndex = StepIndex;
	Parms.TrackIndex = TrackIndex;
	Parms.PageIndex = PageIndex;
	Parms.bEnabled = bEnabled;
	Parms.bContinuous = bContinuous;
	Parms.bStepChanged = bStepChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.UpdateSustainMaterial
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HeadNoteStepIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricSequencerSustainComponent::UpdateSustainMaterial(int32 InstanceIndex, int32 HeadNoteStepIndex, int32 TrackIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateSustainMaterial");

	Params::FabricSequencerSustainComponent_UpdateSustainMaterial Parms{};

	Parms.InstanceIndex = InstanceIndex;
	Parms.HeadNoteStepIndex = HeadNoteStepIndex;
	Parms.TrackIndex = TrackIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricSequencerSustainComponent.UpdateVisibilityOfInstances
// (Final, Native, Protected, BlueprintCallable)

void UFabricSequencerSustainComponent::UpdateVisibilityOfInstances()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateVisibilityOfInstances");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricStepSequencerComponent.ApplyPage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   PageIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStepSequencePage                PageData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::ApplyPage(int32 PageIndex, const struct FStepSequencePage& PageData)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyPage");

	Params::FabricStepSequencerComponent_ApplyPage Parms{};

	Parms.PageIndex = PageIndex;
	Parms.PageData = std::move(PageData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.ApplyTemplate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMidiStepSequence*                Template                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StepSequencePageIndex                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateSaveRecord                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::ApplyTemplate(const class UMidiStepSequence* Template, int32 StepSequencePageIndex, const bool bUpdateSaveRecord)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyTemplate");

	Params::FabricStepSequencerComponent_ApplyTemplate Parms{};

	Parms.Template = Template;
	Parms.StepSequencePageIndex = StepSequencePageIndex;
	Parms.bUpdateSaveRecord = bUpdateSaveRecord;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.ClearCurrentPage
// (Final, Native, Public, BlueprintCallable)

void UFabricStepSequencerComponent::ClearCurrentPage()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearCurrentPage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricStepSequencerComponent.ClearPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateSaveRecord                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::ClearPage(int32 Page, const bool bUpdateSaveRecord)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearPage");

	Params::FabricStepSequencerComponent_ClearPage Parms{};

	Parms.Page = Page;
	Parms.bUpdateSaveRecord = bUpdateSaveRecord;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.GetContinuationFocusIndeces
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   OutRowIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutStepIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutNumContinuationSteps                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::GetContinuationFocusIndeces(int32* OutRowIndex, int32* OutStepIndex, int32* OutNumContinuationSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContinuationFocusIndeces");

	Params::FabricStepSequencerComponent_GetContinuationFocusIndeces Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutRowIndex != nullptr)
		*OutRowIndex = Parms.OutRowIndex;

	if (OutStepIndex != nullptr)
		*OutStepIndex = Parms.OutStepIndex;

	if (OutNumContinuationSteps != nullptr)
		*OutNumContinuationSteps = Parms.OutNumContinuationSteps;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetMidiStepSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMidiStepSequence*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMidiStepSequence* UFabricStepSequencerComponent::GetMidiStepSequence()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidiStepSequence");

	Params::FabricStepSequencerComponent_GetMidiStepSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.OnRep_PackedStepTable
// (Final, Native, Private)

void UFabricStepSequencerComponent::OnRep_PackedStepTable()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_PackedStepTable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricStepSequencerComponent.RandomizeCurrentPage
// (Final, Native, Public, BlueprintCallable)

void UFabricStepSequencerComponent::RandomizeCurrentPage()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RandomizeCurrentPage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricStepSequencerComponent.RandomizePage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::RandomizePage(int32 Page)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RandomizePage");

	Params::FabricStepSequencerComponent_RandomizePage Parms{};

	Parms.Page = Page;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetBeatScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BeatScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetBeatScale(float BeatScale)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBeatScale");

	Params::FabricStepSequencerComponent_SetBeatScale Parms{};

	Parms.BeatScale = BeatScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetCurrentPage(int32 NewPage)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCurrentPage");

	Params::FabricStepSequencerComponent_SetCurrentPage Parms{};

	Parms.NewPage = NewPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewLoop                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetLoop(bool bNewLoop)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLoop");

	Params::FabricStepSequencerComponent_SetLoop Parms{};

	Parms.bNewLoop = bNewLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetMaxSteps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetMaxSteps(int32 NumSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMaxSteps");

	Params::FabricStepSequencerComponent_SetMaxSteps Parms{};

	Parms.NumSteps = NumSteps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetMonophonic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewMonophonic                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetMonophonic(bool bNewMonophonic)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMonophonic");

	Params::FabricStepSequencerComponent_SetMonophonic Parms{};

	Parms.bNewMonophonic = bNewMonophonic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetMusicClock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMusicClockComponent*             InMusicClock                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetMusicClock(class UMusicClockComponent* InMusicClock)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicClock");

	Params::FabricStepSequencerComponent_SetMusicClock Parms{};

	Parms.InMusicClock = InMusicClock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetNoteForTrack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMidiNote                        Note                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Track                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetNoteForTrack(const struct FMidiNote& Note, int32 Track)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNoteForTrack");

	Params::FabricStepSequencerComponent_SetNoteForTrack Parms{};

	Parms.Note = std::move(Note);
	Parms.Track = Track;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetNoteStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFabricNoteStyle                        style                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetNoteStyle(EFabricNoteStyle style)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNoteStyle");

	Params::FabricStepSequencerComponent_SetNoteStyle Parms{};

	Parms.style = style;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetNumberPages
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumPages                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetNumberPages(int32 NumPages)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumberPages");

	Params::FabricStepSequencerComponent_SetNumberPages Parms{};

	Parms.NumPages = NumPages;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetNumberSteps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetNumberSteps(int32 NumSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumberSteps");

	Params::FabricStepSequencerComponent_SetNumberSteps Parms{};

	Parms.NumSteps = NumSteps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetNumberTracks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumTracks                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetNumberTracks(int32 NumTracks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNumberTracks");

	Params::FabricStepSequencerComponent_SetNumberTracks Parms{};

	Parms.NumTracks = NumTracks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewPlaying                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetPlaying(bool bNewPlaying)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPlaying");

	Params::FabricStepSequencerComponent_SetPlaying Parms{};

	Parms.bNewPlaying = bNewPlaying;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetQuarterNotesLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   QuarterNotes                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetQuarterNotesLength(float QuarterNotes)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetQuarterNotesLength");

	Params::FabricStepSequencerComponent_SetQuarterNotesLength Parms{};

	Parms.QuarterNotes = QuarterNotes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetStepContinuation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsContinuation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetStepContinuation(int32 Row, int32 Column, bool bIsContinuation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStepContinuation");

	Params::FabricStepSequencerComponent_SetStepContinuation Parms{};

	Parms.Row = Row;
	Parms.Column = Column;
	Parms.bIsContinuation = bIsContinuation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetStepContinuationOnPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsContinuation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetStepContinuationOnPage(int32 Page, int32 Row, int32 Column, bool bIsContinuation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStepContinuationOnPage");

	Params::FabricStepSequencerComponent_SetStepContinuationOnPage Parms{};

	Parms.Page = Page;
	Parms.Row = Row;
	Parms.Column = Column;
	Parms.bIsContinuation = bIsContinuation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetStepEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bState                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetStepEnabled(int32 Row, int32 Column, bool bState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStepEnabled");

	Params::FabricStepSequencerComponent_SetStepEnabled Parms{};

	Parms.Row = Row;
	Parms.Column = Column;
	Parms.bState = bState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.SetStepEnabledOnPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bState                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::SetStepEnabledOnPage(int32 Page, int32 Row, int32 Column, bool bState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetStepEnabledOnPage");

	Params::FabricStepSequencerComponent_SetStepEnabledOnPage Parms{};

	Parms.Page = Page;
	Parms.Row = Row;
	Parms.Column = Column;
	Parms.bState = bState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.ToggleStepEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::ToggleStepEnabled(int32 Row, int32 Column)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ToggleStepEnabled");

	Params::FabricStepSequencerComponent_ToggleStepEnabled Parms{};

	Parms.Row = Row;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.ToggleStepEnabledOnPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::ToggleStepEnabledOnPage(int32 Page, int32 Row, int32 Column)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ToggleStepEnabledOnPage");

	Params::FabricStepSequencerComponent_ToggleStepEnabledOnPage Parms{};

	Parms.Page = Page;
	Parms.Row = Row;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.UpdatePackedStepTableSaveRecordIfChanged
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFabricStepTablePacked           InPackedStepTable                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::UpdatePackedStepTableSaveRecordIfChanged(const struct FFabricStepTablePacked& InPackedStepTable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdatePackedStepTableSaveRecordIfChanged");

	Params::FabricStepSequencerComponent_UpdatePackedStepTableSaveRecordIfChanged Parms{};

	Parms.InPackedStepTable = std::move(InPackedStepTable);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerComponent.GetCurrentPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFabricStepSequencerComponent::GetCurrentPage() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentPage");

	Params::FabricStepSequencerComponent_GetCurrentPage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetLengthStepBeats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetLengthStepBeats() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthStepBeats");

	Params::FabricStepSequencerComponent_GetLengthStepBeats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetLengthStepQuarterNotes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetLengthStepQuarterNotes() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthStepQuarterNotes");

	Params::FabricStepSequencerComponent_GetLengthStepQuarterNotes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetLengthTrackBeats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetLengthTrackBeats() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthTrackBeats");

	Params::FabricStepSequencerComponent_GetLengthTrackBeats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetLengthTrackQuarterNotes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetLengthTrackQuarterNotes() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLengthTrackQuarterNotes");

	Params::FabricStepSequencerComponent_GetLengthTrackQuarterNotes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetLongestContinuationLengthForColumn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetLongestContinuationLengthForColumn(int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLongestContinuationLengthForColumn");

	Params::FabricStepSequencerComponent_GetLongestContinuationLengthForColumn Parms{};

	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetLongestContinuationLengthForColumnOnPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetLongestContinuationLengthForColumnOnPage(int32 Page, int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLongestContinuationLengthForColumnOnPage");

	Params::FabricStepSequencerComponent_GetLongestContinuationLengthForColumnOnPage Parms{};

	Parms.Page = Page;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetMaxSteps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFabricStepSequencerComponent::GetMaxSteps() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMaxSteps");

	Params::FabricStepSequencerComponent_GetMaxSteps Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetNumberSteps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFabricStepSequencerComponent::GetNumberSteps() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumberSteps");

	Params::FabricStepSequencerComponent_GetNumberSteps Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetNumberTracks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFabricStepSequencerComponent::GetNumberTracks() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumberTracks");

	Params::FabricStepSequencerComponent_GetNumberTracks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetNumUsedSteps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TotalSteps                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFabricStepSequencerComponent::GetNumUsedSteps(int32 TotalSteps) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumUsedSteps");

	Params::FabricStepSequencerComponent_GetNumUsedSteps Parms{};

	Parms.TotalSteps = TotalSteps;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetPageData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PageIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStepSequencePage                OutPageData                                            (Parm, OutParm, NativeAccessSpecifierPublic)

void UFabricStepSequencerComponent::GetPageData(int32 PageIndex, struct FStepSequencePage* OutPageData) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPageData");

	Params::FabricStepSequencerComponent_GetPageData Parms{};

	Parms.PageIndex = PageIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (OutPageData != nullptr)
		*OutPageData = std::move(Parms.OutPageData);
}


// Function FabricRuntime.FabricStepSequencerComponent.GetStepContinuationLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetStepContinuationLength(int32 Row, int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStepContinuationLength");

	Params::FabricStepSequencerComponent_GetStepContinuationLength Parms{};

	Parms.Row = Row;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetStepContinuationLengthOnPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetStepContinuationLengthOnPage(int32 Page, int32 Row, int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStepContinuationLengthOnPage");

	Params::FabricStepSequencerComponent_GetStepContinuationLengthOnPage Parms{};

	Parms.Page = Page;
	Parms.Row = Row;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetStepEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerComponent::GetStepEnabled(int32 Row, int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStepEnabled");

	Params::FabricStepSequencerComponent_GetStepEnabled Parms{};

	Parms.Row = Row;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetStepEnabledOnPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerComponent::GetStepEnabledOnPage(int32 Page, int32 Row, int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStepEnabledOnPage");

	Params::FabricStepSequencerComponent_GetStepEnabledOnPage Parms{};

	Parms.Page = Page;
	Parms.Row = Row;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetStepIsContinuation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerComponent::GetStepIsContinuation(int32 Row, int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStepIsContinuation");

	Params::FabricStepSequencerComponent_GetStepIsContinuation Parms{};

	Parms.Row = Row;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetStepIsContinuationOnPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerComponent::GetStepIsContinuationOnPage(int32 Page, int32 Row, int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStepIsContinuationOnPage");

	Params::FabricStepSequencerComponent_GetStepIsContinuationOnPage Parms{};

	Parms.Page = Page;
	Parms.Row = Row;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetStepStartBeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Step                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetStepStartBeat(int32 Step) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStepStartBeat");

	Params::FabricStepSequencerComponent_GetStepStartBeat Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetStepStartQuarterNotes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Step                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerComponent::GetStepStartQuarterNotes(int32 Step) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStepStartQuarterNotes");

	Params::FabricStepSequencerComponent_GetStepStartQuarterNotes Parms{};

	Parms.Step = Step;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.GetSupportsContinuation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerComponent::GetSupportsContinuation() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSupportsContinuation");

	Params::FabricStepSequencerComponent_GetSupportsContinuation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.IsPageBlank
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PageIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerComponent::IsPageBlank(int32 PageIndex) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsPageBlank");

	Params::FabricStepSequencerComponent_IsPageBlank Parms{};

	Parms.PageIndex = PageIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.IsStepEnabledForAnyTrack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerComponent::IsStepEnabledForAnyTrack(int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsStepEnabledForAnyTrack");

	Params::FabricStepSequencerComponent_IsStepEnabledForAnyTrack Parms{};

	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerComponent.IsStepEnabledForAnyTrackOnPage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerComponent::IsStepEnabledForAnyTrackOnPage(int32 Page, int32 Column) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsStepEnabledForAnyTrackOnPage");

	Params::FabricStepSequencerComponent_IsStepEnabledForAnyTrackOnPage Parms{};

	Parms.Page = Page;
	Parms.Column = Column;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerGridComponent.GetGridSquareXPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   NumSteps                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StepIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerGridComponent::GetGridSquareXPosition(const int32 NumSteps, const int32 StepIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGridSquareXPosition");

	Params::FabricStepSequencerGridComponent_GetGridSquareXPosition Parms{};

	Parms.NumSteps = NumSteps;
	Parms.StepIndex = StepIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerGridComponent.GetGridSquareYPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   NumRows                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RowIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFabricStepSequencerGridComponent::GetGridSquareYPosition(const int32 NumRows, const int32 RowIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGridSquareYPosition");

	Params::FabricStepSequencerGridComponent_GetGridSquareYPosition Parms{};

	Parms.NumRows = NumRows;
	Parms.RowIndex = RowIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerGridComponent.IsBypassed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerGridComponent::IsBypassed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsBypassed");

	Params::FabricStepSequencerGridComponent_IsBypassed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerGridComponent.NotifyInteractionFocusTargetExternallyChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SourceRowIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SourceColumnIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FocusRowIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FocusColumnIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFocused                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::NotifyInteractionFocusTargetExternallyChanged(class APlayerController* PlayerController, int32 SourceRowIndex, int32 SourceColumnIndex, int32 FocusRowIndex, int32 FocusColumnIndex, bool bIsFocused)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NotifyInteractionFocusTargetExternallyChanged");

	Params::FabricStepSequencerGridComponent_NotifyInteractionFocusTargetExternallyChanged Parms{};

	Parms.PlayerController = PlayerController;
	Parms.SourceRowIndex = SourceRowIndex;
	Parms.SourceColumnIndex = SourceColumnIndex;
	Parms.FocusRowIndex = FocusRowIndex;
	Parms.FocusColumnIndex = FocusColumnIndex;
	Parms.bIsFocused = bIsFocused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.OnBeatOffsetChanged
// (Final, Native, Protected)
// Parameters:
// float                                   BeatOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::OnBeatOffsetChanged(float BeatOffset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBeatOffsetChanged");

	Params::FabricStepSequencerGridComponent_OnBeatOffsetChanged Parms{};

	Parms.BeatOffset = BeatOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.OnBeatScaleChanged
// (Final, Native, Protected)
// Parameters:
// float                                   BeatScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::OnBeatScaleChanged(float BeatScale)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBeatScaleChanged");

	Params::FabricStepSequencerGridComponent_OnBeatScaleChanged Parms{};

	Parms.BeatScale = BeatScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.OnCurrentPageChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   NewPage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::OnCurrentPageChanged(int32 NewPage)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCurrentPageChanged");

	Params::FabricStepSequencerGridComponent_OnCurrentPageChanged Parms{};

	Parms.NewPage = NewPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.OnFullTableChanged
// (Final, Native, Protected)

void UFabricStepSequencerGridComponent::OnFullTableChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnFullTableChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.OnNoteStyleChanged
// (Final, Native, Protected)
// Parameters:
// EFabricNoteStyle                        style                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::OnNoteStyleChanged(EFabricNoteStyle style)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNoteStyleChanged");

	Params::FabricStepSequencerGridComponent_OnNoteStyleChanged Parms{};

	Parms.style = style;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.OnNumStepsChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   NumSteps                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::OnNumStepsChanged(int32 NumSteps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNumStepsChanged");

	Params::FabricStepSequencerGridComponent_OnNumStepsChanged Parms{};

	Parms.NumSteps = NumSteps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.OnNumTracksChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   NumTracks                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::OnNumTracksChanged(int32 NumTracks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNumTracksChanged");

	Params::FabricStepSequencerGridComponent_OnNumTracksChanged Parms{};

	Parms.NumTracks = NumTracks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.OnQuarterNotesLengthChanged
// (Final, Native, Protected)
// Parameters:
// float                                   QuarterNotesLength                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::OnQuarterNotesLengthChanged(float QuarterNotesLength)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnQuarterNotesLengthChanged");

	Params::FabricStepSequencerGridComponent_OnQuarterNotesLengthChanged Parms{};

	Parms.QuarterNotesLength = QuarterNotesLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.OnStepChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FFabricSequencerStepChangedInfo  StepInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::OnStepChanged(const struct FFabricSequencerStepChangedInfo& StepInfo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnStepChanged");

	Params::FabricStepSequencerGridComponent_OnStepChanged Parms{};

	Parms.StepInfo = std::move(StepInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.SetActiveTrackIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ActiveTrackIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::SetActiveTrackIndex(int32 ActiveTrackIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetActiveTrackIndex");

	Params::FabricStepSequencerGridComponent_SetActiveTrackIndex Parms{};

	Parms.ActiveTrackIndex = ActiveTrackIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.SetBypassed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bBypassed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::SetBypassed(bool bBypassed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBypassed");

	Params::FabricStepSequencerGridComponent_SetBypassed Parms{};

	Parms.bBypassed = bBypassed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.SetGridVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInGridVisible                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceRefresh                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridComponent::SetGridVisible(bool bInGridVisible, bool bForceRefresh)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGridVisible");

	Params::FabricStepSequencerGridComponent_SetGridVisible Parms{};

	Parms.bInGridVisible = bInGridVisible;
	Parms.bForceRefresh = bForceRefresh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridComponent.GetGridSquareExtents
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   RowIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ColumnIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UFabricStepSequencerGridComponent::GetGridSquareExtents(const int32 RowIndex, const int32 ColumnIndex) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGridSquareExtents");

	Params::FabricStepSequencerGridComponent_GetGridSquareExtents Parms{};

	Parms.RowIndex = RowIndex;
	Parms.ColumnIndex = ColumnIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerGridComponent.GetGridSquareSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   NumSteps                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumRows                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UFabricStepSequencerGridComponent::GetGridSquareSize(const int32 NumSteps, const int32 NumRows) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetGridSquareSize");

	Params::FabricStepSequencerGridComponent_GetGridSquareSize Parms{};

	Parms.NumSteps = NumSteps;
	Parms.NumRows = NumRows;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerGridComponent.IsStepToggledOnForAnyTrack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   StepIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerGridComponent::IsStepToggledOnForAnyTrack(int32 StepIndex) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsStepToggledOnForAnyTrack");

	Params::FabricStepSequencerGridComponent_IsStepToggledOnForAnyTrack Parms{};

	Parms.StepIndex = StepIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerGridSquareComponent.OnContinuationControl_EndInteraction
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridSquareComponent::OnContinuationControl_EndInteraction(class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnContinuationControl_EndInteraction");

	Params::FabricStepSequencerGridSquareComponent_OnContinuationControl_EndInteraction Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridSquareComponent.OnContinuationControl_StartInteraction
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridSquareComponent::OnContinuationControl_StartInteraction(class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnContinuationControl_StartInteraction");

	Params::FabricStepSequencerGridSquareComponent_OnContinuationControl_StartInteraction Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridSquareComponent.SetActiveTrack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Track                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricStepSequencerGridSquareComponent::SetActiveTrack(int32 Track)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetActiveTrack");

	Params::FabricStepSequencerGridSquareComponent_SetActiveTrack Parms{};

	Parms.Track = Track;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricStepSequencerGridSquareComponent.CanDoInteractionLogicOnEndInteraction
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerGridSquareComponent::CanDoInteractionLogicOnEndInteraction() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanDoInteractionLogicOnEndInteraction");

	Params::FabricStepSequencerGridSquareComponent_CanDoInteractionLogicOnEndInteraction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricStepSequencerGridSquareComponent.CanDoInteractionLogicOnStartInteraction
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricStepSequencerGridSquareComponent::CanDoInteractionLogicOnStartInteraction() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanDoInteractionLogicOnStartInteraction");

	Params::FabricStepSequencerGridSquareComponent_CanDoInteractionLogicOnStartInteraction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricTextureTreeNode.CopyProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFabricTextureTreeNode*           Other                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricTextureTreeNode::CopyProperties(const class UFabricTextureTreeNode* Other)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CopyProperties");

	Params::FabricTextureTreeNode_CopyProperties Parms{};

	Parms.Other = Other;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricTextureTreeNode.Reset
// (Final, Native, Public, BlueprintCallable)

void UFabricTextureTreeNode::Reset()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricTextureProviderBase.SetSourceTexture
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFabricTextureProviderTexture    InTexture                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFabricTextureProviderBase::SetSourceTexture(const struct FFabricTextureProviderTexture& InTexture)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSourceTexture");

	Params::FabricTextureProviderBase_SetSourceTexture Parms{};

	Parms.InTexture = std::move(InTexture);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricTimelinePreviewComponent.PreviewTimeline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTimelineComponent*               Timeline                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SecondsToPlay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReverseAnimation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricTimelinePreviewComponent::PreviewTimeline(class UTimelineComponent* Timeline, float SecondsToPlay, bool bReverseAnimation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PreviewTimeline");

	Params::FabricTimelinePreviewComponent_PreviewTimeline Parms{};

	Parms.Timeline = Timeline;
	Parms.SecondsToPlay = SecondsToPlay;
	Parms.bReverseAnimation = bReverseAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricTimelinePreviewComponent.GetShouldPreview
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFabricTimelinePreviewComponent::GetShouldPreview() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetShouldPreview");

	Params::FabricTimelinePreviewComponent_GetShouldPreview Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FabricRuntime.FabricTimelineSyncComponent.OnRep_ServerCurrentSongPos
// (Final, Native, Public)

void UFabricTimelineSyncComponent::OnRep_ServerCurrentSongPos()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ServerCurrentSongPos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricTimelineSyncComponent.OnTimelinePlayingChanged
// (Final, Native, Public)
// Parameters:
// EMusicClockState                        State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricTimelineSyncComponent::OnTimelinePlayingChanged(EMusicClockState State)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTimelinePlayingChanged");

	Params::FabricTimelineSyncComponent_OnTimelinePlayingChanged Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricTimelineSyncComponent.SetFabricMetaSoundManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFabricMetaSoundManagerComponent* InMetaSoundManager                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricTimelineSyncComponent::SetFabricMetaSoundManager(class UFabricMetaSoundManagerComponent* InMetaSoundManager)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFabricMetaSoundManager");

	Params::FabricTimelineSyncComponent_SetFabricMetaSoundManager Parms{};

	Parms.InMetaSoundManager = InMetaSoundManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricWaveformTexture.AddMultipleValuesToWaveformTexture
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           Values                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UFabricWaveformTexture::AddMultipleValuesToWaveformTexture(TArray<float>* Values)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddMultipleValuesToWaveformTexture");

	Params::FabricWaveformTexture_AddMultipleValuesToWaveformTexture Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Values != nullptr)
		*Values = std::move(Parms.Values);
}


// Function FabricRuntime.FabricWaveformTexture.AddNewValueToWaveformTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFabricWaveformTexture::AddNewValueToWaveformTexture(float Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddNewValueToWaveformTexture");

	Params::FabricWaveformTexture_AddNewValueToWaveformTexture Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FabricRuntime.FabricWaveformTexture.Initialize
// (Final, Native, Public, BlueprintCallable)

void UFabricWaveformTexture::Initialize()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FabricRuntime.FabricWaveformTexture.GetWaveformTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UFabricWaveformTexture::GetWaveformTexture() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetWaveformTexture");

	Params::FabricWaveformTexture_GetWaveformTexture Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

