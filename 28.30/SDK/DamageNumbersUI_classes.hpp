#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DamageNumbersUI

#include "Basic.hpp"

#include "FortniteUI_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// Class DamageNumbersUI.CommonUserWidget_DamageNumbers
// 0x01B8 (0x04A0 - 0x02E8)
class UCommonUserWidget_DamageNumbers final : public UCommonUserWidget
{
public:
	uint8                                         Pad_2E8[0x10];                                     // 0x02E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldSpacePos;                                     // 0x02F8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CheckAnimalTag;                                    // 0x0310(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Damage;                                            // 0x0314(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AdditionalVerticalScreenOffset;                    // 0x0318(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpawnTime;                                         // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DamageNumberScaleVector;                           // 0x0328(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              ScreenSpaceOffsetFromHitActor;                     // 0x0338(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              InverseHUDScaleVector;                             // 0x0348(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 HitActor;                                          // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHitAnimal;                                        // 0x0360(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHitVehicle;                                       // 0x0361(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPlayingCritAnimation;                           // 0x0362(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_363[0x1];                                      // 0x0363(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           HitColor;                                          // 0x0364(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           VehicleColor;                                      // 0x0374(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           CritColor;                                         // 0x0384(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           HealthColor;                                       // 0x0394(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ShieldColor;                                       // 0x03A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           CritColor_Text;                                    // 0x03B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ShieldColor_Text;                                  // 0x03C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           HealthColor_InnerStroke;                           // 0x03D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ShieldColor_InnerStroke;                           // 0x03E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           CritColor_InnerStroke;                             // 0x03F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DamageIconVehicleColor;                            // 0x0404(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DamageIconShieldColor;                             // 0x0414(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DamageIconShieldOutline1Color;                     // 0x0424(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DamageIconShieldOutline2Color;                     // 0x0434(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DamageIconVehicleOutline1Color;                    // 0x0444(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DamageIconVehicleOutline2Color;                    // 0x0454(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       OnDamage;                                          // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       OnDamage_Crit;                                     // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_Number;                                       // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_Number_Stroke;                                // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DamageTypeCrit;                                    // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DamageTypeIcon;                                    // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 DamageTypeIcon_EMP;                                // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnDamageDealt(double InDamage, class AActor* InActor, bool bInShield, bool bInCrit, const struct FVector& InWorldSpacePos, bool bInEMP);
	void OnShieldBreak(bool bIsOvershield);
	void Reset();
	void UpdateScreenSpacePosition();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUserWidget_DamageNumbers">();
	}
	static class UCommonUserWidget_DamageNumbers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUserWidget_DamageNumbers>();
	}
};
static_assert(alignof(UCommonUserWidget_DamageNumbers) == 0x000008, "Wrong alignment on UCommonUserWidget_DamageNumbers");
static_assert(sizeof(UCommonUserWidget_DamageNumbers) == 0x0004A0, "Wrong size on UCommonUserWidget_DamageNumbers");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, WorldSpacePos) == 0x0002F8, "Member 'UCommonUserWidget_DamageNumbers::WorldSpacePos' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, CheckAnimalTag) == 0x000310, "Member 'UCommonUserWidget_DamageNumbers::CheckAnimalTag' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, Damage) == 0x000314, "Member 'UCommonUserWidget_DamageNumbers::Damage' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, AdditionalVerticalScreenOffset) == 0x000318, "Member 'UCommonUserWidget_DamageNumbers::AdditionalVerticalScreenOffset' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, SpawnTime) == 0x000320, "Member 'UCommonUserWidget_DamageNumbers::SpawnTime' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageNumberScaleVector) == 0x000328, "Member 'UCommonUserWidget_DamageNumbers::DamageNumberScaleVector' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, ScreenSpaceOffsetFromHitActor) == 0x000338, "Member 'UCommonUserWidget_DamageNumbers::ScreenSpaceOffsetFromHitActor' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, InverseHUDScaleVector) == 0x000348, "Member 'UCommonUserWidget_DamageNumbers::InverseHUDScaleVector' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, HitActor) == 0x000358, "Member 'UCommonUserWidget_DamageNumbers::HitActor' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, bHitAnimal) == 0x000360, "Member 'UCommonUserWidget_DamageNumbers::bHitAnimal' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, bHitVehicle) == 0x000361, "Member 'UCommonUserWidget_DamageNumbers::bHitVehicle' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, bIsPlayingCritAnimation) == 0x000362, "Member 'UCommonUserWidget_DamageNumbers::bIsPlayingCritAnimation' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, HitColor) == 0x000364, "Member 'UCommonUserWidget_DamageNumbers::HitColor' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, VehicleColor) == 0x000374, "Member 'UCommonUserWidget_DamageNumbers::VehicleColor' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, CritColor) == 0x000384, "Member 'UCommonUserWidget_DamageNumbers::CritColor' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, HealthColor) == 0x000394, "Member 'UCommonUserWidget_DamageNumbers::HealthColor' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, ShieldColor) == 0x0003A4, "Member 'UCommonUserWidget_DamageNumbers::ShieldColor' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, CritColor_Text) == 0x0003B4, "Member 'UCommonUserWidget_DamageNumbers::CritColor_Text' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, ShieldColor_Text) == 0x0003C4, "Member 'UCommonUserWidget_DamageNumbers::ShieldColor_Text' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, HealthColor_InnerStroke) == 0x0003D4, "Member 'UCommonUserWidget_DamageNumbers::HealthColor_InnerStroke' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, ShieldColor_InnerStroke) == 0x0003E4, "Member 'UCommonUserWidget_DamageNumbers::ShieldColor_InnerStroke' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, CritColor_InnerStroke) == 0x0003F4, "Member 'UCommonUserWidget_DamageNumbers::CritColor_InnerStroke' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageIconVehicleColor) == 0x000404, "Member 'UCommonUserWidget_DamageNumbers::DamageIconVehicleColor' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageIconShieldColor) == 0x000414, "Member 'UCommonUserWidget_DamageNumbers::DamageIconShieldColor' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageIconShieldOutline1Color) == 0x000424, "Member 'UCommonUserWidget_DamageNumbers::DamageIconShieldOutline1Color' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageIconShieldOutline2Color) == 0x000434, "Member 'UCommonUserWidget_DamageNumbers::DamageIconShieldOutline2Color' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageIconVehicleOutline1Color) == 0x000444, "Member 'UCommonUserWidget_DamageNumbers::DamageIconVehicleOutline1Color' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageIconVehicleOutline2Color) == 0x000454, "Member 'UCommonUserWidget_DamageNumbers::DamageIconVehicleOutline2Color' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, OnDamage) == 0x000468, "Member 'UCommonUserWidget_DamageNumbers::OnDamage' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, OnDamage_Crit) == 0x000470, "Member 'UCommonUserWidget_DamageNumbers::OnDamage_Crit' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, Text_Number) == 0x000478, "Member 'UCommonUserWidget_DamageNumbers::Text_Number' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, Text_Number_Stroke) == 0x000480, "Member 'UCommonUserWidget_DamageNumbers::Text_Number_Stroke' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageTypeCrit) == 0x000488, "Member 'UCommonUserWidget_DamageNumbers::DamageTypeCrit' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageTypeIcon) == 0x000490, "Member 'UCommonUserWidget_DamageNumbers::DamageTypeIcon' has a wrong offset!");
static_assert(offsetof(UCommonUserWidget_DamageNumbers, DamageTypeIcon_EMP) == 0x000498, "Member 'UCommonUserWidget_DamageNumbers::DamageTypeIcon_EMP' has a wrong offset!");

// Class DamageNumbersUI.FortUserWidget_DamageNumbers
// 0x0088 (0x0358 - 0x02D0)
class UFortUserWidget_DamageNumbers final : public UFortUserWidget
{
public:
	double                                        VerticalShiftForNewDamage;                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        AccumulationTime;                                  // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumberCount;                                    // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetFromPawnLocationDBNO;                        // 0x02E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                OffsetFromPawnLocation;                            // 0x0300(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortPlayerPawn*                        BoundPawn;                                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           HideDamageNumbersTag;                              // 0x0320(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DamageAtLocTag;                                    // 0x0324(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TagsToNotDisplayDmgNumbersOnSpecificActors;        // 0x0328(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UDynamicEntryBox*                       DynamicEntryBox_Numbers;                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DamageCueEMPTag;                                   // 0x0350(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPrecreateDamageNumberEntries;                     // 0x0354(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_355[0x3];                                      // 0x0355(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearBinding();
	void OnDamageDealt(double InDamage, bool bInCritical, bool bInFatal, bool bInShield, class AActor* HitActor, const struct FVector& HitLocation, const struct FGameplayTagContainer& Tags);
	void OnPawnSet();
	void OnShieldBreak(bool bInOverShield);
	void UpdateBinding();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUserWidget_DamageNumbers">();
	}
	static class UFortUserWidget_DamageNumbers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUserWidget_DamageNumbers>();
	}
};
static_assert(alignof(UFortUserWidget_DamageNumbers) == 0x000008, "Wrong alignment on UFortUserWidget_DamageNumbers");
static_assert(sizeof(UFortUserWidget_DamageNumbers) == 0x000358, "Wrong size on UFortUserWidget_DamageNumbers");
static_assert(offsetof(UFortUserWidget_DamageNumbers, VerticalShiftForNewDamage) == 0x0002D0, "Member 'UFortUserWidget_DamageNumbers::VerticalShiftForNewDamage' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, AccumulationTime) == 0x0002D8, "Member 'UFortUserWidget_DamageNumbers::AccumulationTime' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, MaxNumberCount) == 0x0002E0, "Member 'UFortUserWidget_DamageNumbers::MaxNumberCount' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, OffsetFromPawnLocationDBNO) == 0x0002E8, "Member 'UFortUserWidget_DamageNumbers::OffsetFromPawnLocationDBNO' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, OffsetFromPawnLocation) == 0x000300, "Member 'UFortUserWidget_DamageNumbers::OffsetFromPawnLocation' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, BoundPawn) == 0x000318, "Member 'UFortUserWidget_DamageNumbers::BoundPawn' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, HideDamageNumbersTag) == 0x000320, "Member 'UFortUserWidget_DamageNumbers::HideDamageNumbersTag' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, DamageAtLocTag) == 0x000324, "Member 'UFortUserWidget_DamageNumbers::DamageAtLocTag' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, TagsToNotDisplayDmgNumbersOnSpecificActors) == 0x000328, "Member 'UFortUserWidget_DamageNumbers::TagsToNotDisplayDmgNumbersOnSpecificActors' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, DynamicEntryBox_Numbers) == 0x000348, "Member 'UFortUserWidget_DamageNumbers::DynamicEntryBox_Numbers' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, DamageCueEMPTag) == 0x000350, "Member 'UFortUserWidget_DamageNumbers::DamageCueEMPTag' has a wrong offset!");
static_assert(offsetof(UFortUserWidget_DamageNumbers, bPrecreateDamageNumberEntries) == 0x000354, "Member 'UFortUserWidget_DamageNumbers::bPrecreateDamageNumberEntries' has a wrong offset!");

// Class DamageNumbersUI.FortGameSettingRegistryExtension_DamageNumbers
// 0x0000 (0x0028 - 0x0028)
class UFortGameSettingRegistryExtension_DamageNumbers final : public UFortGameSettingRegistryExtension
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameSettingRegistryExtension_DamageNumbers">();
	}
	static class UFortGameSettingRegistryExtension_DamageNumbers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameSettingRegistryExtension_DamageNumbers>();
	}
};
static_assert(alignof(UFortGameSettingRegistryExtension_DamageNumbers) == 0x000008, "Wrong alignment on UFortGameSettingRegistryExtension_DamageNumbers");
static_assert(sizeof(UFortGameSettingRegistryExtension_DamageNumbers) == 0x000028, "Wrong size on UFortGameSettingRegistryExtension_DamageNumbers");

}

