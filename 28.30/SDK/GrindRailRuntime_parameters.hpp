#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrindRailRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GrindRailRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GrindRailRuntime.FortGrindRail.IsTipCapped
// 0x0002 (0x0002 - 0x0000)
struct FortGrindRail_IsTipCapped final
{
public:
	bool                                          bStartTip;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_IsTipCapped) == 0x000001, "Wrong alignment on FortGrindRail_IsTipCapped");
static_assert(sizeof(FortGrindRail_IsTipCapped) == 0x000002, "Wrong size on FortGrindRail_IsTipCapped");
static_assert(offsetof(FortGrindRail_IsTipCapped, bStartTip) == 0x000000, "Member 'FortGrindRail_IsTipCapped::bStartTip' has a wrong offset!");
static_assert(offsetof(FortGrindRail_IsTipCapped, ReturnValue) == 0x000001, "Member 'FortGrindRail_IsTipCapped::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.NativeGetNextPositionToGrind
// 0x0048 (0x0048 - 0x0000)
struct FortGrindRail_NativeGetNextPositionToGrind final
{
public:
	float                                         DistanceToTravel;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDistanceAlongSpline;                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightLeanValue;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutNextLocation;                                   // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGotToEnd;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NextLocationOnRail;                                // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrindRailBoosterMode                         BoosterMode;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitObstacle;                                      // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewRail;                                          // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceAlongNewRail;                              // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortGrindRail*                         TheNewRail;                                        // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewRailReverseDirection;                          // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGrindRail_NativeGetNextPositionToGrind) == 0x000008, "Wrong alignment on FortGrindRail_NativeGetNextPositionToGrind");
static_assert(sizeof(FortGrindRail_NativeGetNextPositionToGrind) == 0x000048, "Wrong size on FortGrindRail_NativeGetNextPositionToGrind");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, DistanceToTravel) == 0x000000, "Member 'FortGrindRail_NativeGetNextPositionToGrind::DistanceToTravel' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, CurrentDistanceAlongSpline) == 0x000004, "Member 'FortGrindRail_NativeGetNextPositionToGrind::CurrentDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, RightLeanValue) == 0x000008, "Member 'FortGrindRail_NativeGetNextPositionToGrind::RightLeanValue' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, OutNextLocation) == 0x000010, "Member 'FortGrindRail_NativeGetNextPositionToGrind::OutNextLocation' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, bGotToEnd) == 0x000028, "Member 'FortGrindRail_NativeGetNextPositionToGrind::bGotToEnd' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, NextLocationOnRail) == 0x00002C, "Member 'FortGrindRail_NativeGetNextPositionToGrind::NextLocationOnRail' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, BoosterMode) == 0x000030, "Member 'FortGrindRail_NativeGetNextPositionToGrind::BoosterMode' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, bHitObstacle) == 0x000031, "Member 'FortGrindRail_NativeGetNextPositionToGrind::bHitObstacle' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, bNewRail) == 0x000032, "Member 'FortGrindRail_NativeGetNextPositionToGrind::bNewRail' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, DistanceAlongNewRail) == 0x000034, "Member 'FortGrindRail_NativeGetNextPositionToGrind::DistanceAlongNewRail' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, TheNewRail) == 0x000038, "Member 'FortGrindRail_NativeGetNextPositionToGrind::TheNewRail' has a wrong offset!");
static_assert(offsetof(FortGrindRail_NativeGetNextPositionToGrind, bNewRailReverseDirection) == 0x000040, "Member 'FortGrindRail_NativeGetNextPositionToGrind::bNewRailReverseDirection' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.OnPlayerBeganGrinding
// 0x0008 (0x0008 - 0x0000)
struct FortGrindRail_OnPlayerBeganGrinding final
{
public:
	class AFortPlayerPawn*                        GrindingPawn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_OnPlayerBeganGrinding) == 0x000008, "Wrong alignment on FortGrindRail_OnPlayerBeganGrinding");
static_assert(sizeof(FortGrindRail_OnPlayerBeganGrinding) == 0x000008, "Wrong size on FortGrindRail_OnPlayerBeganGrinding");
static_assert(offsetof(FortGrindRail_OnPlayerBeganGrinding, GrindingPawn) == 0x000000, "Member 'FortGrindRail_OnPlayerBeganGrinding::GrindingPawn' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.OnPlayerEndedGrinding
// 0x0008 (0x0008 - 0x0000)
struct FortGrindRail_OnPlayerEndedGrinding final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_OnPlayerEndedGrinding) == 0x000008, "Wrong alignment on FortGrindRail_OnPlayerEndedGrinding");
static_assert(sizeof(FortGrindRail_OnPlayerEndedGrinding) == 0x000008, "Wrong size on FortGrindRail_OnPlayerEndedGrinding");
static_assert(offsetof(FortGrindRail_OnPlayerEndedGrinding, Pawn) == 0x000000, "Member 'FortGrindRail_OnPlayerEndedGrinding::Pawn' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.OnPlaylistDataReady
// 0x0030 (0x0030 - 0x0000)
struct FortGrindRail_OnPlaylistDataReady final
{
public:
	class AFortGameStateAthena*                   GameState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortPlaylist*                    Playlist;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_OnPlaylistDataReady) == 0x000008, "Wrong alignment on FortGrindRail_OnPlaylistDataReady");
static_assert(sizeof(FortGrindRail_OnPlaylistDataReady) == 0x000030, "Wrong size on FortGrindRail_OnPlaylistDataReady");
static_assert(offsetof(FortGrindRail_OnPlaylistDataReady, GameState) == 0x000000, "Member 'FortGrindRail_OnPlaylistDataReady::GameState' has a wrong offset!");
static_assert(offsetof(FortGrindRail_OnPlaylistDataReady, Playlist) == 0x000008, "Member 'FortGrindRail_OnPlaylistDataReady::Playlist' has a wrong offset!");
static_assert(offsetof(FortGrindRail_OnPlaylistDataReady, PlaylistContextTags) == 0x000010, "Member 'FortGrindRail_OnPlaylistDataReady::PlaylistContextTags' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.SetupMeshInfo
// 0x0008 (0x0008 - 0x0000)
struct FortGrindRail_SetupMeshInfo final
{
public:
	class USplineMeshComponent*                   SplineMeshComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_SetupMeshInfo) == 0x000008, "Wrong alignment on FortGrindRail_SetupMeshInfo");
static_assert(sizeof(FortGrindRail_SetupMeshInfo) == 0x000008, "Wrong size on FortGrindRail_SetupMeshInfo");
static_assert(offsetof(FortGrindRail_SetupMeshInfo, SplineMeshComponent) == 0x000000, "Member 'FortGrindRail_SetupMeshInfo::SplineMeshComponent' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.UpdateTransientComponentTransforms
// 0x0010 (0x0010 - 0x0000)
struct FortGrindRail_UpdateTransientComponentTransforms final
{
public:
	TArray<class USceneComponent*>                TransientSceneComponents;                          // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_UpdateTransientComponentTransforms) == 0x000008, "Wrong alignment on FortGrindRail_UpdateTransientComponentTransforms");
static_assert(sizeof(FortGrindRail_UpdateTransientComponentTransforms) == 0x000010, "Wrong size on FortGrindRail_UpdateTransientComponentTransforms");
static_assert(offsetof(FortGrindRail_UpdateTransientComponentTransforms, TransientSceneComponents) == 0x000000, "Member 'FortGrindRail_UpdateTransientComponentTransforms::TransientSceneComponents' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.AllowSprinting
// 0x0001 (0x0001 - 0x0000)
struct FortGrindRail_AllowSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_AllowSprinting) == 0x000001, "Wrong alignment on FortGrindRail_AllowSprinting");
static_assert(sizeof(FortGrindRail_AllowSprinting) == 0x000001, "Wrong size on FortGrindRail_AllowSprinting");
static_assert(offsetof(FortGrindRail_AllowSprinting, ReturnValue) == 0x000000, "Member 'FortGrindRail_AllowSprinting::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.GetSpeedSettingsOverride
// 0x001C (0x001C - 0x0000)
struct FortGrindRail_GetSpeedSettingsOverride final
{
public:
	struct FGrindRailSpeedSettings                SpeedSettingsOverride;                             // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGrindRail_GetSpeedSettingsOverride) == 0x000004, "Wrong alignment on FortGrindRail_GetSpeedSettingsOverride");
static_assert(sizeof(FortGrindRail_GetSpeedSettingsOverride) == 0x00001C, "Wrong size on FortGrindRail_GetSpeedSettingsOverride");
static_assert(offsetof(FortGrindRail_GetSpeedSettingsOverride, SpeedSettingsOverride) == 0x000000, "Member 'FortGrindRail_GetSpeedSettingsOverride::SpeedSettingsOverride' has a wrong offset!");
static_assert(offsetof(FortGrindRail_GetSpeedSettingsOverride, ReturnValue) == 0x000018, "Member 'FortGrindRail_GetSpeedSettingsOverride::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.HasHeadConnection
// 0x0001 (0x0001 - 0x0000)
struct FortGrindRail_HasHeadConnection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_HasHeadConnection) == 0x000001, "Wrong alignment on FortGrindRail_HasHeadConnection");
static_assert(sizeof(FortGrindRail_HasHeadConnection) == 0x000001, "Wrong size on FortGrindRail_HasHeadConnection");
static_assert(offsetof(FortGrindRail_HasHeadConnection, ReturnValue) == 0x000000, "Member 'FortGrindRail_HasHeadConnection::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.HasTailConnection
// 0x0001 (0x0001 - 0x0000)
struct FortGrindRail_HasTailConnection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_HasTailConnection) == 0x000001, "Wrong alignment on FortGrindRail_HasTailConnection");
static_assert(sizeof(FortGrindRail_HasTailConnection) == 0x000001, "Wrong size on FortGrindRail_HasTailConnection");
static_assert(offsetof(FortGrindRail_HasTailConnection, ReturnValue) == 0x000000, "Member 'FortGrindRail_HasTailConnection::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.IsGrindRailEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGrindRail_IsGrindRailEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_IsGrindRailEnabled) == 0x000001, "Wrong alignment on FortGrindRail_IsGrindRailEnabled");
static_assert(sizeof(FortGrindRail_IsGrindRailEnabled) == 0x000001, "Wrong size on FortGrindRail_IsGrindRailEnabled");
static_assert(offsetof(FortGrindRail_IsGrindRailEnabled, ReturnValue) == 0x000000, "Member 'FortGrindRail_IsGrindRailEnabled::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRail.ShouldApplyFallDamageImmunity
// 0x0001 (0x0001 - 0x0000)
struct FortGrindRail_ShouldApplyFallDamageImmunity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRail_ShouldApplyFallDamageImmunity) == 0x000001, "Wrong alignment on FortGrindRail_ShouldApplyFallDamageImmunity");
static_assert(sizeof(FortGrindRail_ShouldApplyFallDamageImmunity) == 0x000001, "Wrong size on FortGrindRail_ShouldApplyFallDamageImmunity");
static_assert(offsetof(FortGrindRail_ShouldApplyFallDamageImmunity, ReturnValue) == 0x000000, "Member 'FortGrindRail_ShouldApplyFallDamageImmunity::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRailLayerAnimInstance.AnimNotify_EntryEnter
// 0x0008 (0x0008 - 0x0000)
struct FortGrindRailLayerAnimInstance_AnimNotify_EntryEnter final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRailLayerAnimInstance_AnimNotify_EntryEnter) == 0x000008, "Wrong alignment on FortGrindRailLayerAnimInstance_AnimNotify_EntryEnter");
static_assert(sizeof(FortGrindRailLayerAnimInstance_AnimNotify_EntryEnter) == 0x000008, "Wrong size on FortGrindRailLayerAnimInstance_AnimNotify_EntryEnter");
static_assert(offsetof(FortGrindRailLayerAnimInstance_AnimNotify_EntryEnter, Notify) == 0x000000, "Member 'FortGrindRailLayerAnimInstance_AnimNotify_EntryEnter::Notify' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRailLayerAnimInstance.AnimNotify_EntryExit
// 0x0008 (0x0008 - 0x0000)
struct FortGrindRailLayerAnimInstance_AnimNotify_EntryExit final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRailLayerAnimInstance_AnimNotify_EntryExit) == 0x000008, "Wrong alignment on FortGrindRailLayerAnimInstance_AnimNotify_EntryExit");
static_assert(sizeof(FortGrindRailLayerAnimInstance_AnimNotify_EntryExit) == 0x000008, "Wrong size on FortGrindRailLayerAnimInstance_AnimNotify_EntryExit");
static_assert(offsetof(FortGrindRailLayerAnimInstance_AnimNotify_EntryExit, Notify) == 0x000000, "Member 'FortGrindRailLayerAnimInstance_AnimNotify_EntryExit::Notify' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRailLayerAnimInstance.AnimNotify_IdleEnter
// 0x0008 (0x0008 - 0x0000)
struct FortGrindRailLayerAnimInstance_AnimNotify_IdleEnter final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRailLayerAnimInstance_AnimNotify_IdleEnter) == 0x000008, "Wrong alignment on FortGrindRailLayerAnimInstance_AnimNotify_IdleEnter");
static_assert(sizeof(FortGrindRailLayerAnimInstance_AnimNotify_IdleEnter) == 0x000008, "Wrong size on FortGrindRailLayerAnimInstance_AnimNotify_IdleEnter");
static_assert(offsetof(FortGrindRailLayerAnimInstance_AnimNotify_IdleEnter, Notify) == 0x000000, "Member 'FortGrindRailLayerAnimInstance_AnimNotify_IdleEnter::Notify' has a wrong offset!");

// Function GrindRailRuntime.FortGrindRailLayerAnimInstance.HandleBegunGrinding
// 0x0020 (0x0020 - 0x0000)
struct FortGrindRailLayerAnimInstance_HandleBegunGrinding final
{
public:
	bool                                          bWasAlreadyGrinding;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasJumpingFromRail;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromInteraction;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousPlayerLocation;                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGrindRailLayerAnimInstance_HandleBegunGrinding) == 0x000008, "Wrong alignment on FortGrindRailLayerAnimInstance_HandleBegunGrinding");
static_assert(sizeof(FortGrindRailLayerAnimInstance_HandleBegunGrinding) == 0x000020, "Wrong size on FortGrindRailLayerAnimInstance_HandleBegunGrinding");
static_assert(offsetof(FortGrindRailLayerAnimInstance_HandleBegunGrinding, bWasAlreadyGrinding) == 0x000000, "Member 'FortGrindRailLayerAnimInstance_HandleBegunGrinding::bWasAlreadyGrinding' has a wrong offset!");
static_assert(offsetof(FortGrindRailLayerAnimInstance_HandleBegunGrinding, bWasJumpingFromRail) == 0x000001, "Member 'FortGrindRailLayerAnimInstance_HandleBegunGrinding::bWasJumpingFromRail' has a wrong offset!");
static_assert(offsetof(FortGrindRailLayerAnimInstance_HandleBegunGrinding, bFromInteraction) == 0x000002, "Member 'FortGrindRailLayerAnimInstance_HandleBegunGrinding::bFromInteraction' has a wrong offset!");
static_assert(offsetof(FortGrindRailLayerAnimInstance_HandleBegunGrinding, PreviousPlayerLocation) == 0x000008, "Member 'FortGrindRailLayerAnimInstance_HandleBegunGrinding::PreviousPlayerLocation' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.AddTemporaryMoveIgnoreActor
// 0x0010 (0x0010 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreDuration;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor) == 0x000010, "Wrong size on FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor, BuildingActor) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor, IgnoreDuration) == 0x000008, "Member 'FortMovementMode_ExtLogicGrinding_AddTemporaryMoveIgnoreActor::IgnoreDuration' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.ApplyDamageToDevice
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_ApplyDamageToDevice final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_ApplyDamageToDevice) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_ApplyDamageToDevice");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_ApplyDamageToDevice) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_ApplyDamageToDevice");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_ApplyDamageToDevice, BuildingActor) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_ApplyDamageToDevice::BuildingActor' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnApplyDamageToDevice
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_EventCallback_OnApplyDamageToDevice final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_EventCallback_OnApplyDamageToDevice) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_EventCallback_OnApplyDamageToDevice");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_EventCallback_OnApplyDamageToDevice) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_EventCallback_OnApplyDamageToDevice");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_EventCallback_OnApplyDamageToDevice, BuildingActor) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_EventCallback_OnApplyDamageToDevice::BuildingActor' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnBaseMeshReady
// 0x0010 (0x0010 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady) == 0x000010, "Wrong size on FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady, Pawn) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady::Pawn' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady, MeshComponent) == 0x000008, "Member 'FortMovementMode_ExtLogicGrinding_EventCallback_OnBaseMeshReady::MeshComponent' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnEnergyCompletelyDrained
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_EventCallback_OnEnergyCompletelyDrained final
{
public:
	class UFortComponent_Energy*                  EnergyComponentDrained;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_EventCallback_OnEnergyCompletelyDrained) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_EventCallback_OnEnergyCompletelyDrained");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_EventCallback_OnEnergyCompletelyDrained) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_EventCallback_OnEnergyCompletelyDrained");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_EventCallback_OnEnergyCompletelyDrained, EnergyComponentDrained) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_EventCallback_OnEnergyCompletelyDrained::EnergyComponentDrained' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnJumpInput
// 0x0001 (0x0001 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_EventCallback_OnJumpInput final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_EventCallback_OnJumpInput) == 0x000001, "Wrong alignment on FortMovementMode_ExtLogicGrinding_EventCallback_OnJumpInput");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_EventCallback_OnJumpInput) == 0x000001, "Wrong size on FortMovementMode_ExtLogicGrinding_EventCallback_OnJumpInput");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_EventCallback_OnJumpInput, bPressed) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_EventCallback_OnJumpInput::bPressed' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnPawnLanded
// 0x00E8 (0x00E8 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_EventCallback_OnPawnLanded final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_EventCallback_OnPawnLanded) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_EventCallback_OnPawnLanded");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_EventCallback_OnPawnLanded) == 0x0000E8, "Wrong size on FortMovementMode_ExtLogicGrinding_EventCallback_OnPawnLanded");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_EventCallback_OnPawnLanded, Hit) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_EventCallback_OnPawnLanded::Hit' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnSprintInputPressed
// 0x0001 (0x0001 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_EventCallback_OnSprintInputPressed final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_EventCallback_OnSprintInputPressed) == 0x000001, "Wrong alignment on FortMovementMode_ExtLogicGrinding_EventCallback_OnSprintInputPressed");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_EventCallback_OnSprintInputPressed) == 0x000001, "Wrong size on FortMovementMode_ExtLogicGrinding_EventCallback_OnSprintInputPressed");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_EventCallback_OnSprintInputPressed, bPressed) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_EventCallback_OnSprintInputPressed::bPressed' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.EventCallback_OnTeleport
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_EventCallback_OnTeleport final
{
public:
	class AFortPawn*                              TeleportedPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_EventCallback_OnTeleport) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_EventCallback_OnTeleport");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_EventCallback_OnTeleport) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_EventCallback_OnTeleport");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_EventCallback_OnTeleport, TeleportedPawn) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_EventCallback_OnTeleport::TeleportedPawn' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.GameplayTagCallback_BlockSprinting
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting) == 0x000004, "Wrong alignment on FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting, tag) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting::tag' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting, NewCount) == 0x000004, "Member 'FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprinting::NewCount' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.GameplayTagCallback_BlockSprintingAndHolstering
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering) == 0x000004, "Wrong alignment on FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering, tag) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering::tag' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering, NewCount) == 0x000004, "Member 'FortMovementMode_ExtLogicGrinding_GameplayTagCallback_BlockSprintingAndHolstering::NewCount' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.GetGrindInAirGameplayEffectClass
// 0x0010 (0x0010 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass final
{
public:
	const class AFortGrindRail*                   GrindRail;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass) == 0x000010, "Wrong size on FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass, GrindRail) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass::GrindRail' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass, ReturnValue) == 0x000008, "Member 'FortMovementMode_ExtLogicGrinding_GetGrindInAirGameplayEffectClass::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnBoosterModeChange
// 0x0010 (0x0010 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange final
{
public:
	const class AFortGrindRail*                   GrindRail;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrindRailBoosterMode                         OldBoosterMode;                                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrindRailBoosterMode                         NewBoosterMode;                                    // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange) == 0x000010, "Wrong size on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange, GrindRail) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange::GrindRail' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange, OldBoosterMode) == 0x000008, "Member 'FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange::OldBoosterMode' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange, NewBoosterMode) == 0x000009, "Member 'FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnBoosterModeChange::NewBoosterMode' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnFeetLanding
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnFeetLanding final
{
public:
	const class AFortGrindRail*                   GrindRail;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnFeetLanding) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnFeetLanding");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnFeetLanding) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnFeetLanding");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnFeetLanding, GrindRail) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnFeetLanding::GrindRail' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnHit
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnHit final
{
public:
	const class AFortGrindRail*                   GrindRail;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnHit) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnHit");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnHit) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnHit");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnHit, GrindRail) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnHit::GrindRail' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnRailJump
// 0x0001 (0x0001 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnRailJump final
{
public:
	bool                                          bIsAnchorJumpActive;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnRailJump) == 0x000001, "Wrong alignment on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnRailJump");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnRailJump) == 0x000001, "Wrong size on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnRailJump");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnRailJump, bIsAnchorJumpActive) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnRailJump::bIsAnchorJumpActive' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayCuesOnSprinting
// 0x0010 (0x0010 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting final
{
public:
	const class AFortGrindRail*                   GrindRail;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantsToGrindSprint;                               // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting) == 0x000010, "Wrong size on FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting, GrindRail) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting::GrindRail' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting, bWantsToGrindSprint) == 0x000008, "Member 'FortMovementMode_ExtLogicGrinding_HandleGameplayCuesOnSprinting::bWantsToGrindSprint' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGameplayEffectsOnVehicleHit
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_HandleGameplayEffectsOnVehicleHit final
{
public:
	class AFortAthenaVehicle*                     AthenaVehicle;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_HandleGameplayEffectsOnVehicleHit) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_HandleGameplayEffectsOnVehicleHit");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_HandleGameplayEffectsOnVehicleHit) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_HandleGameplayEffectsOnVehicleHit");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGameplayEffectsOnVehicleHit, AthenaVehicle) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_HandleGameplayEffectsOnVehicleHit::AthenaVehicle' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGrindingBegun
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_HandleGrindingBegun final
{
public:
	const class AFortGrindRail*                   GrindRail;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_HandleGrindingBegun) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_HandleGrindingBegun");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_HandleGrindingBegun) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_HandleGrindingBegun");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGrindingBegun, GrindRail) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_HandleGrindingBegun::GrindRail' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.HandleGrindingEnded
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_HandleGrindingEnded final
{
public:
	const class AFortGrindRail*                   GrindRail;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_HandleGrindingEnded) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_HandleGrindingEnded");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_HandleGrindingEnded) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_HandleGrindingEnded");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_HandleGrindingEnded, GrindRail) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_HandleGrindingEnded::GrindRail' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.IsDamageableDevice
// 0x0010 (0x0010 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_IsDamageableDevice final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_IsDamageableDevice) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_IsDamageableDevice");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_IsDamageableDevice) == 0x000010, "Wrong size on FortMovementMode_ExtLogicGrinding_IsDamageableDevice");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_IsDamageableDevice, BuildingActor) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_IsDamageableDevice::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_IsDamageableDevice, ReturnValue) == 0x000008, "Member 'FortMovementMode_ExtLogicGrinding_IsDamageableDevice::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.IsThrowableItem
// 0x0010 (0x0010 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_IsThrowableItem final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_IsThrowableItem) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_IsThrowableItem");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_IsThrowableItem) == 0x000010, "Wrong size on FortMovementMode_ExtLogicGrinding_IsThrowableItem");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_IsThrowableItem, BuildingActor) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_IsThrowableItem::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_IsThrowableItem, ReturnValue) == 0x000008, "Member 'FortMovementMode_ExtLogicGrinding_IsThrowableItem::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.OnIgnoredBuildingEndPlay
// 0x0010 (0x0010 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay) == 0x000010, "Wrong size on FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay, Actor) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay, EndPlayReason) == 0x000008, "Member 'FortMovementMode_ExtLogicGrinding_OnIgnoredBuildingEndPlay::EndPlayReason' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.DrawDebugHUD
// 0x0010 (0x0010 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_DrawDebugHUD final
{
public:
	class AHUD*                                   HUD;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvas*                                Canvas;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_DrawDebugHUD) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicGrinding_DrawDebugHUD");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_DrawDebugHUD) == 0x000010, "Wrong size on FortMovementMode_ExtLogicGrinding_DrawDebugHUD");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_DrawDebugHUD, HUD) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_DrawDebugHUD::HUD' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_DrawDebugHUD, Canvas) == 0x000008, "Member 'FortMovementMode_ExtLogicGrinding_DrawDebugHUD::Canvas' has a wrong offset!");

// Function GrindRailRuntime.FortMovementMode_ExtLogicGrinding.GameplayTagCallback_CancelGrinding
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding) == 0x000004, "Wrong alignment on FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding");
static_assert(sizeof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding) == 0x000008, "Wrong size on FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding, tag) == 0x000000, "Member 'FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding::tag' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding, NewCount) == 0x000004, "Member 'FortMovementMode_ExtLogicGrinding_GameplayTagCallback_CancelGrinding::NewCount' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_HandleGameplayEffectsOnPlayerJumpOff
// 0x0018 (0x0018 - 0x0000)
struct FortPawnComponent_GrindingProvider_BP_HandleGameplayEffectsOnPlayerJumpOff final
{
public:
	struct FVector                                PlayerPosition;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_BP_HandleGameplayEffectsOnPlayerJumpOff) == 0x000008, "Wrong alignment on FortPawnComponent_GrindingProvider_BP_HandleGameplayEffectsOnPlayerJumpOff");
static_assert(sizeof(FortPawnComponent_GrindingProvider_BP_HandleGameplayEffectsOnPlayerJumpOff) == 0x000018, "Wrong size on FortPawnComponent_GrindingProvider_BP_HandleGameplayEffectsOnPlayerJumpOff");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGameplayEffectsOnPlayerJumpOff, PlayerPosition) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGameplayEffectsOnPlayerJumpOff::PlayerPosition' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_HandleGrindStartRequestData
// 0x0098 (0x0098 - 0x0000)
struct FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData final
{
public:
	class AFortGrindRail*                         GrindRail;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PawnLocation;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastUpdateVelocity;                                // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGrinding;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartedFromLand;                                  // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentSpeedAlongSpline;                           // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentDirection;                                  // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGrindingRequestCalculationData        ReturnValue;                                       // 0x0060(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData) == 0x000008, "Wrong alignment on FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData");
static_assert(sizeof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData) == 0x000098, "Wrong size on FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData, GrindRail) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData::GrindRail' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData, PawnLocation) == 0x000008, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData::PawnLocation' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData, StartDistance) == 0x000020, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData::StartDistance' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData, LastUpdateVelocity) == 0x000028, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData::LastUpdateVelocity' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData, bIsGrinding) == 0x000040, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData::bIsGrinding' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData, bStartedFromLand) == 0x000041, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData::bStartedFromLand' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData, CurrentSpeedAlongSpline) == 0x000044, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData::CurrentSpeedAlongSpline' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData, CurrentDirection) == 0x000048, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData::CurrentDirection' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData, ReturnValue) == 0x000060, "Member 'FortPawnComponent_GrindingProvider_BP_HandleGrindStartRequestData::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_OnApplyDamageToDevice
// 0x0008 (0x0008 - 0x0000)
struct FortPawnComponent_GrindingProvider_BP_OnApplyDamageToDevice final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_BP_OnApplyDamageToDevice) == 0x000008, "Wrong alignment on FortPawnComponent_GrindingProvider_BP_OnApplyDamageToDevice");
static_assert(sizeof(FortPawnComponent_GrindingProvider_BP_OnApplyDamageToDevice) == 0x000008, "Wrong size on FortPawnComponent_GrindingProvider_BP_OnApplyDamageToDevice");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_OnApplyDamageToDevice, BuildingActor) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_BP_OnApplyDamageToDevice::BuildingActor' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.Broadcast_ApplyDamageToBuildingActorEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPawnComponent_GrindingProvider_Broadcast_ApplyDamageToBuildingActorEvent final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_Broadcast_ApplyDamageToBuildingActorEvent) == 0x000008, "Wrong alignment on FortPawnComponent_GrindingProvider_Broadcast_ApplyDamageToBuildingActorEvent");
static_assert(sizeof(FortPawnComponent_GrindingProvider_Broadcast_ApplyDamageToBuildingActorEvent) == 0x000008, "Wrong size on FortPawnComponent_GrindingProvider_Broadcast_ApplyDamageToBuildingActorEvent");
static_assert(offsetof(FortPawnComponent_GrindingProvider_Broadcast_ApplyDamageToBuildingActorEvent, BuildingActor) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_Broadcast_ApplyDamageToBuildingActorEvent::BuildingActor' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.OnMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindingProvider_OnMovementModeChanged final
{
public:
	class ACharacter*                             InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawnComponent_GrindingProvider_OnMovementModeChanged) == 0x000008, "Wrong alignment on FortPawnComponent_GrindingProvider_OnMovementModeChanged");
static_assert(sizeof(FortPawnComponent_GrindingProvider_OnMovementModeChanged) == 0x000010, "Wrong size on FortPawnComponent_GrindingProvider_OnMovementModeChanged");
static_assert(offsetof(FortPawnComponent_GrindingProvider_OnMovementModeChanged, InCharacter) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_OnMovementModeChanged::InCharacter' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_OnMovementModeChanged, PrevMovementMode) == 0x000008, "Member 'FortPawnComponent_GrindingProvider_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_OnMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'FortPawnComponent_GrindingProvider_OnMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.OnPawnLandedCallback
// 0x00E8 (0x00E8 - 0x0000)
struct FortPawnComponent_GrindingProvider_OnPawnLandedCallback final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_OnPawnLandedCallback) == 0x000008, "Wrong alignment on FortPawnComponent_GrindingProvider_OnPawnLandedCallback");
static_assert(sizeof(FortPawnComponent_GrindingProvider_OnPawnLandedCallback) == 0x0000E8, "Wrong size on FortPawnComponent_GrindingProvider_OnPawnLandedCallback");
static_assert(offsetof(FortPawnComponent_GrindingProvider_OnPawnLandedCallback, Hit) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_OnPawnLandedCallback::Hit' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.OnWalkingBaseChanged
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindingProvider_OnWalkingBaseChanged final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewBase;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_OnWalkingBaseChanged) == 0x000008, "Wrong alignment on FortPawnComponent_GrindingProvider_OnWalkingBaseChanged");
static_assert(sizeof(FortPawnComponent_GrindingProvider_OnWalkingBaseChanged) == 0x000010, "Wrong size on FortPawnComponent_GrindingProvider_OnWalkingBaseChanged");
static_assert(offsetof(FortPawnComponent_GrindingProvider_OnWalkingBaseChanged, Pawn) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_OnWalkingBaseChanged::Pawn' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_OnWalkingBaseChanged, NewBase) == 0x000008, "Member 'FortPawnComponent_GrindingProvider_OnWalkingBaseChanged::NewBase' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.RequestGrindingOnRail
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindingProvider_RequestGrindingOnRail final
{
public:
	class AFortGrindRail*                         GrindRail;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OptionalStartDistance;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromInteraction;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawnComponent_GrindingProvider_RequestGrindingOnRail) == 0x000008, "Wrong alignment on FortPawnComponent_GrindingProvider_RequestGrindingOnRail");
static_assert(sizeof(FortPawnComponent_GrindingProvider_RequestGrindingOnRail) == 0x000010, "Wrong size on FortPawnComponent_GrindingProvider_RequestGrindingOnRail");
static_assert(offsetof(FortPawnComponent_GrindingProvider_RequestGrindingOnRail, GrindRail) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_RequestGrindingOnRail::GrindRail' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_RequestGrindingOnRail, OptionalStartDistance) == 0x000008, "Member 'FortPawnComponent_GrindingProvider_RequestGrindingOnRail::OptionalStartDistance' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_RequestGrindingOnRail, bFromInteraction) == 0x00000C, "Member 'FortPawnComponent_GrindingProvider_RequestGrindingOnRail::bFromInteraction' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindingProvider_RequestGrindingOnRail, ReturnValue) == 0x00000D, "Member 'FortPawnComponent_GrindingProvider_RequestGrindingOnRail::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.BP_CanBeginGrinding
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindingProvider_BP_CanBeginGrinding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_BP_CanBeginGrinding) == 0x000001, "Wrong alignment on FortPawnComponent_GrindingProvider_BP_CanBeginGrinding");
static_assert(sizeof(FortPawnComponent_GrindingProvider_BP_CanBeginGrinding) == 0x000001, "Wrong size on FortPawnComponent_GrindingProvider_BP_CanBeginGrinding");
static_assert(offsetof(FortPawnComponent_GrindingProvider_BP_CanBeginGrinding, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_BP_CanBeginGrinding::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.GetCurrentBoosterMode
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindingProvider_GetCurrentBoosterMode final
{
public:
	EGrindRailBoosterMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_GetCurrentBoosterMode) == 0x000001, "Wrong alignment on FortPawnComponent_GrindingProvider_GetCurrentBoosterMode");
static_assert(sizeof(FortPawnComponent_GrindingProvider_GetCurrentBoosterMode) == 0x000001, "Wrong size on FortPawnComponent_GrindingProvider_GetCurrentBoosterMode");
static_assert(offsetof(FortPawnComponent_GrindingProvider_GetCurrentBoosterMode, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_GetCurrentBoosterMode::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.GetCurrentGrindingRailActor
// 0x0008 (0x0008 - 0x0000)
struct FortPawnComponent_GrindingProvider_GetCurrentGrindingRailActor final
{
public:
	class AFortGrindRail*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_GetCurrentGrindingRailActor) == 0x000008, "Wrong alignment on FortPawnComponent_GrindingProvider_GetCurrentGrindingRailActor");
static_assert(sizeof(FortPawnComponent_GrindingProvider_GetCurrentGrindingRailActor) == 0x000008, "Wrong size on FortPawnComponent_GrindingProvider_GetCurrentGrindingRailActor");
static_assert(offsetof(FortPawnComponent_GrindingProvider_GetCurrentGrindingRailActor, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_GetCurrentGrindingRailActor::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.GetStartedGrindingFromLand
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindingProvider_GetStartedGrindingFromLand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_GetStartedGrindingFromLand) == 0x000001, "Wrong alignment on FortPawnComponent_GrindingProvider_GetStartedGrindingFromLand");
static_assert(sizeof(FortPawnComponent_GrindingProvider_GetStartedGrindingFromLand) == 0x000001, "Wrong size on FortPawnComponent_GrindingProvider_GetStartedGrindingFromLand");
static_assert(offsetof(FortPawnComponent_GrindingProvider_GetStartedGrindingFromLand, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_GetStartedGrindingFromLand::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.GetWantsToGrind
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindingProvider_GetWantsToGrind final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_GetWantsToGrind) == 0x000001, "Wrong alignment on FortPawnComponent_GrindingProvider_GetWantsToGrind");
static_assert(sizeof(FortPawnComponent_GrindingProvider_GetWantsToGrind) == 0x000001, "Wrong size on FortPawnComponent_GrindingProvider_GetWantsToGrind");
static_assert(offsetof(FortPawnComponent_GrindingProvider_GetWantsToGrind, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_GetWantsToGrind::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.IsGrinding
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindingProvider_IsGrinding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_IsGrinding) == 0x000001, "Wrong alignment on FortPawnComponent_GrindingProvider_IsGrinding");
static_assert(sizeof(FortPawnComponent_GrindingProvider_IsGrinding) == 0x000001, "Wrong size on FortPawnComponent_GrindingProvider_IsGrinding");
static_assert(offsetof(FortPawnComponent_GrindingProvider_IsGrinding, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_IsGrinding::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.IsGrindingDisabledForPlayers
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindingProvider_IsGrindingDisabledForPlayers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_IsGrindingDisabledForPlayers) == 0x000001, "Wrong alignment on FortPawnComponent_GrindingProvider_IsGrindingDisabledForPlayers");
static_assert(sizeof(FortPawnComponent_GrindingProvider_IsGrindingDisabledForPlayers) == 0x000001, "Wrong size on FortPawnComponent_GrindingProvider_IsGrindingDisabledForPlayers");
static_assert(offsetof(FortPawnComponent_GrindingProvider_IsGrindingDisabledForPlayers, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_IsGrindingDisabledForPlayers::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindingProvider_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_IsSprinting) == 0x000001, "Wrong alignment on FortPawnComponent_GrindingProvider_IsSprinting");
static_assert(sizeof(FortPawnComponent_GrindingProvider_IsSprinting) == 0x000001, "Wrong size on FortPawnComponent_GrindingProvider_IsSprinting");
static_assert(offsetof(FortPawnComponent_GrindingProvider_IsSprinting, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_IsSprinting::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindingProvider.IsUsingOriginalGrinding
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindingProvider_IsUsingOriginalGrinding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindingProvider_IsUsingOriginalGrinding) == 0x000001, "Wrong alignment on FortPawnComponent_GrindingProvider_IsUsingOriginalGrinding");
static_assert(sizeof(FortPawnComponent_GrindingProvider_IsUsingOriginalGrinding) == 0x000001, "Wrong size on FortPawnComponent_GrindingProvider_IsUsingOriginalGrinding");
static_assert(offsetof(FortPawnComponent_GrindingProvider_IsUsingOriginalGrinding, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindingProvider_IsUsingOriginalGrinding::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.StructurallySupportedSplineComponent.OnDestroyFromStructuralSupport
// 0x0008 (0x0008 - 0x0000)
struct StructurallySupportedSplineComponent_OnDestroyFromStructuralSupport final
{
public:
	class AActor*                                 SupportActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StructurallySupportedSplineComponent_OnDestroyFromStructuralSupport) == 0x000008, "Wrong alignment on StructurallySupportedSplineComponent_OnDestroyFromStructuralSupport");
static_assert(sizeof(StructurallySupportedSplineComponent_OnDestroyFromStructuralSupport) == 0x000008, "Wrong size on StructurallySupportedSplineComponent_OnDestroyFromStructuralSupport");
static_assert(offsetof(StructurallySupportedSplineComponent_OnDestroyFromStructuralSupport, SupportActor) == 0x000000, "Member 'StructurallySupportedSplineComponent_OnDestroyFromStructuralSupport::SupportActor' has a wrong offset!");

// Function GrindRailRuntime.StructurallySupportedSplineComponent.OnStructuralSupportDied
// 0x0060 (0x0060 - 0x0000)
struct StructurallySupportedSplineComponent_OnStructuralSupportDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StructurallySupportedSplineComponent_OnStructuralSupportDied) == 0x000008, "Wrong alignment on StructurallySupportedSplineComponent_OnStructuralSupportDied");
static_assert(sizeof(StructurallySupportedSplineComponent_OnStructuralSupportDied) == 0x000060, "Wrong size on StructurallySupportedSplineComponent_OnStructuralSupportDied");
static_assert(offsetof(StructurallySupportedSplineComponent_OnStructuralSupportDied, DamagedActor) == 0x000000, "Member 'StructurallySupportedSplineComponent_OnStructuralSupportDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(StructurallySupportedSplineComponent_OnStructuralSupportDied, Damage) == 0x000008, "Member 'StructurallySupportedSplineComponent_OnStructuralSupportDied::Damage' has a wrong offset!");
static_assert(offsetof(StructurallySupportedSplineComponent_OnStructuralSupportDied, InstigatedBy) == 0x000010, "Member 'StructurallySupportedSplineComponent_OnStructuralSupportDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(StructurallySupportedSplineComponent_OnStructuralSupportDied, DamageCauser) == 0x000018, "Member 'StructurallySupportedSplineComponent_OnStructuralSupportDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(StructurallySupportedSplineComponent_OnStructuralSupportDied, HitLocation) == 0x000020, "Member 'StructurallySupportedSplineComponent_OnStructuralSupportDied::HitLocation' has a wrong offset!");
static_assert(offsetof(StructurallySupportedSplineComponent_OnStructuralSupportDied, FHitComponent) == 0x000038, "Member 'StructurallySupportedSplineComponent_OnStructuralSupportDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(StructurallySupportedSplineComponent_OnStructuralSupportDied, BoneName) == 0x000040, "Member 'StructurallySupportedSplineComponent_OnStructuralSupportDied::BoneName' has a wrong offset!");
static_assert(offsetof(StructurallySupportedSplineComponent_OnStructuralSupportDied, Momentum) == 0x000048, "Member 'StructurallySupportedSplineComponent_OnStructuralSupportDied::Momentum' has a wrong offset!");

// Function GrindRailRuntime.FortGameplayCueNotifyLoop_Grinding.CacheReferences
// 0x0020 (0x0020 - 0x0000)
struct FortGameplayCueNotifyLoop_Grinding_CacheReferences final
{
public:
	class UAudioComponent*                        InAudioComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     InEffectsComponent;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        InPlayerPawn;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPawnComponent_GrindingProvider*    InGrindingProvider;                                // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayCueNotifyLoop_Grinding_CacheReferences) == 0x000008, "Wrong alignment on FortGameplayCueNotifyLoop_Grinding_CacheReferences");
static_assert(sizeof(FortGameplayCueNotifyLoop_Grinding_CacheReferences) == 0x000020, "Wrong size on FortGameplayCueNotifyLoop_Grinding_CacheReferences");
static_assert(offsetof(FortGameplayCueNotifyLoop_Grinding_CacheReferences, InAudioComponent) == 0x000000, "Member 'FortGameplayCueNotifyLoop_Grinding_CacheReferences::InAudioComponent' has a wrong offset!");
static_assert(offsetof(FortGameplayCueNotifyLoop_Grinding_CacheReferences, InEffectsComponent) == 0x000008, "Member 'FortGameplayCueNotifyLoop_Grinding_CacheReferences::InEffectsComponent' has a wrong offset!");
static_assert(offsetof(FortGameplayCueNotifyLoop_Grinding_CacheReferences, InPlayerPawn) == 0x000010, "Member 'FortGameplayCueNotifyLoop_Grinding_CacheReferences::InPlayerPawn' has a wrong offset!");
static_assert(offsetof(FortGameplayCueNotifyLoop_Grinding_CacheReferences, InGrindingProvider) == 0x000018, "Member 'FortGameplayCueNotifyLoop_Grinding_CacheReferences::InGrindingProvider' has a wrong offset!");

// Function GrindRailRuntime.FortGameplayCueNotifyLoop_Grinding.OnForwardChanged
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayCueNotifyLoop_Grinding_OnForwardChanged final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayCueNotifyLoop_Grinding_OnForwardChanged) == 0x000001, "Wrong alignment on FortGameplayCueNotifyLoop_Grinding_OnForwardChanged");
static_assert(sizeof(FortGameplayCueNotifyLoop_Grinding_OnForwardChanged) == 0x000001, "Wrong size on FortGameplayCueNotifyLoop_Grinding_OnForwardChanged");
static_assert(offsetof(FortGameplayCueNotifyLoop_Grinding_OnForwardChanged, bNewState) == 0x000000, "Member 'FortGameplayCueNotifyLoop_Grinding_OnForwardChanged::bNewState' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.AddMoveIgnoreActor
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_AddMoveIgnoreActor final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawnComponent_GrindRail_AddMoveIgnoreActor) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_AddMoveIgnoreActor");
static_assert(sizeof(FortPawnComponent_GrindRail_AddMoveIgnoreActor) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_AddMoveIgnoreActor");
static_assert(offsetof(FortPawnComponent_GrindRail_AddMoveIgnoreActor, BuildingActor) == 0x000000, "Member 'FortPawnComponent_GrindRail_AddMoveIgnoreActor::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_AddMoveIgnoreActor, ReturnValue) == 0x000008, "Member 'FortPawnComponent_GrindRail_AddMoveIgnoreActor::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.AddTemporaryMoveIgnoreActor
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreDuration;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor");
static_assert(sizeof(FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor");
static_assert(offsetof(FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor, BuildingActor) == 0x000000, "Member 'FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor, IgnoreDuration) == 0x000008, "Member 'FortPawnComponent_GrindRail_AddTemporaryMoveIgnoreActor::IgnoreDuration' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.AttemptDestroyVehicleWhileGrinding
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding final
{
public:
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding");
static_assert(sizeof(FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding");
static_assert(offsetof(FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding, Vehicle) == 0x000000, "Member 'FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding::Vehicle' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding, ReturnValue) == 0x000008, "Member 'FortPawnComponent_GrindRail_AttemptDestroyVehicleWhileGrinding::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.BeginGrinding
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_BeginGrinding final
{
public:
	class AFortGrindRail*                         GrindRail;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OptionalStartDistance;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromInteraction;                                  // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawnComponent_GrindRail_BeginGrinding) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_BeginGrinding");
static_assert(sizeof(FortPawnComponent_GrindRail_BeginGrinding) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_BeginGrinding");
static_assert(offsetof(FortPawnComponent_GrindRail_BeginGrinding, GrindRail) == 0x000000, "Member 'FortPawnComponent_GrindRail_BeginGrinding::GrindRail' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_BeginGrinding, OptionalStartDistance) == 0x000008, "Member 'FortPawnComponent_GrindRail_BeginGrinding::OptionalStartDistance' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_BeginGrinding, bFromInteraction) == 0x00000C, "Member 'FortPawnComponent_GrindRail_BeginGrinding::bFromInteraction' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.CalculateVelocity
// 0x0020 (0x0020 - 0x0000)
struct FortPawnComponent_GrindRail_CalculateVelocity final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplayingMovement;                                // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutVelocity;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_CalculateVelocity) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_CalculateVelocity");
static_assert(sizeof(FortPawnComponent_GrindRail_CalculateVelocity) == 0x000020, "Wrong size on FortPawnComponent_GrindRail_CalculateVelocity");
static_assert(offsetof(FortPawnComponent_GrindRail_CalculateVelocity, DeltaTime) == 0x000000, "Member 'FortPawnComponent_GrindRail_CalculateVelocity::DeltaTime' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_CalculateVelocity, bReplayingMovement) == 0x000004, "Member 'FortPawnComponent_GrindRail_CalculateVelocity::bReplayingMovement' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_CalculateVelocity, OutVelocity) == 0x000008, "Member 'FortPawnComponent_GrindRail_CalculateVelocity::OutVelocity' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.CanBeginGrinding
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_CanBeginGrinding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_CanBeginGrinding) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_CanBeginGrinding");
static_assert(sizeof(FortPawnComponent_GrindRail_CanBeginGrinding) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_CanBeginGrinding");
static_assert(offsetof(FortPawnComponent_GrindRail_CanBeginGrinding, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_CanBeginGrinding::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.EndGrinding
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_EndGrinding final
{
public:
	bool                                          bSetEndMovementMode;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_EndGrinding) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_EndGrinding");
static_assert(sizeof(FortPawnComponent_GrindRail_EndGrinding) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_EndGrinding");
static_assert(offsetof(FortPawnComponent_GrindRail_EndGrinding, bSetEndMovementMode) == 0x000000, "Member 'FortPawnComponent_GrindRail_EndGrinding::bSetEndMovementMode' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.EventCallback_OnBaseMeshReady
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady");
static_assert(sizeof(FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady");
static_assert(offsetof(FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady, Pawn) == 0x000000, "Member 'FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady::Pawn' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady, MeshComponent) == 0x000008, "Member 'FortPawnComponent_GrindRail_EventCallback_OnBaseMeshReady::MeshComponent' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.EventCallback_OnSprintInput
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_EventCallback_OnSprintInput final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_EventCallback_OnSprintInput) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_EventCallback_OnSprintInput");
static_assert(sizeof(FortPawnComponent_GrindRail_EventCallback_OnSprintInput) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_EventCallback_OnSprintInput");
static_assert(offsetof(FortPawnComponent_GrindRail_EventCallback_OnSprintInput, bPressed) == 0x000000, "Member 'FortPawnComponent_GrindRail_EventCallback_OnSprintInput::bPressed' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleHitWhenGrinding
// 0x00E8 (0x00E8 - 0x0000)
struct FortPawnComponent_GrindRail_HandleHitWhenGrinding final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_HandleHitWhenGrinding) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_HandleHitWhenGrinding");
static_assert(sizeof(FortPawnComponent_GrindRail_HandleHitWhenGrinding) == 0x0000E8, "Wrong size on FortPawnComponent_GrindRail_HandleHitWhenGrinding");
static_assert(offsetof(FortPawnComponent_GrindRail_HandleHitWhenGrinding, Hit) == 0x000000, "Member 'FortPawnComponent_GrindRail_HandleHitWhenGrinding::Hit' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.HandleSprintInput
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_HandleSprintInput final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_HandleSprintInput) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_HandleSprintInput");
static_assert(sizeof(FortPawnComponent_GrindRail_HandleSprintInput) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_HandleSprintInput");
static_assert(offsetof(FortPawnComponent_GrindRail_HandleSprintInput, bPressed) == 0x000000, "Member 'FortPawnComponent_GrindRail_HandleSprintInput::bPressed' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnBaseMeshReady
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_OnBaseMeshReady final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_OnBaseMeshReady) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_OnBaseMeshReady");
static_assert(sizeof(FortPawnComponent_GrindRail_OnBaseMeshReady) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_OnBaseMeshReady");
static_assert(offsetof(FortPawnComponent_GrindRail_OnBaseMeshReady, Pawn) == 0x000000, "Member 'FortPawnComponent_GrindRail_OnBaseMeshReady::Pawn' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_OnBaseMeshReady, MeshComponent) == 0x000008, "Member 'FortPawnComponent_GrindRail_OnBaseMeshReady::MeshComponent' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnIgnoredBuildingEndPlay
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay");
static_assert(sizeof(FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay");
static_assert(offsetof(FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay, Actor) == 0x000000, "Member 'FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay, EndPlayReason) == 0x000008, "Member 'FortPawnComponent_GrindRail_OnIgnoredBuildingEndPlay::EndPlayReason' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnJumpInput
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_OnJumpInput final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_OnJumpInput) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_OnJumpInput");
static_assert(sizeof(FortPawnComponent_GrindRail_OnJumpInput) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_OnJumpInput");
static_assert(offsetof(FortPawnComponent_GrindRail_OnJumpInput, bPressed) == 0x000000, "Member 'FortPawnComponent_GrindRail_OnJumpInput::bPressed' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_OnMovementModeChanged final
{
public:
	class ACharacter*                             InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawnComponent_GrindRail_OnMovementModeChanged) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_OnMovementModeChanged");
static_assert(sizeof(FortPawnComponent_GrindRail_OnMovementModeChanged) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_OnMovementModeChanged");
static_assert(offsetof(FortPawnComponent_GrindRail_OnMovementModeChanged, InCharacter) == 0x000000, "Member 'FortPawnComponent_GrindRail_OnMovementModeChanged::InCharacter' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_OnMovementModeChanged, PrevMovementMode) == 0x000008, "Member 'FortPawnComponent_GrindRail_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_OnMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'FortPawnComponent_GrindRail_OnMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.OnRep_CurrentBoosterMode
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_OnRep_CurrentBoosterMode final
{
public:
	EGrindRailBoosterMode                         PreviousBoosterMode;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_OnRep_CurrentBoosterMode) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_OnRep_CurrentBoosterMode");
static_assert(sizeof(FortPawnComponent_GrindRail_OnRep_CurrentBoosterMode) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_OnRep_CurrentBoosterMode");
static_assert(offsetof(FortPawnComponent_GrindRail_OnRep_CurrentBoosterMode, PreviousBoosterMode) == 0x000000, "Member 'FortPawnComponent_GrindRail_OnRep_CurrentBoosterMode::PreviousBoosterMode' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.ServerBeginGrinding
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_ServerBeginGrinding final
{
public:
	class AFortGrindRail*                         GrindRail;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OptionalStartDistance;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromInteraction;                                  // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawnComponent_GrindRail_ServerBeginGrinding) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_ServerBeginGrinding");
static_assert(sizeof(FortPawnComponent_GrindRail_ServerBeginGrinding) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_ServerBeginGrinding");
static_assert(offsetof(FortPawnComponent_GrindRail_ServerBeginGrinding, GrindRail) == 0x000000, "Member 'FortPawnComponent_GrindRail_ServerBeginGrinding::GrindRail' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_ServerBeginGrinding, OptionalStartDistance) == 0x000008, "Member 'FortPawnComponent_GrindRail_ServerBeginGrinding::OptionalStartDistance' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_ServerBeginGrinding, bFromInteraction) == 0x00000C, "Member 'FortPawnComponent_GrindRail_ServerBeginGrinding::bFromInteraction' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.ServerUpdateWeaponHolstered
// 0x0002 (0x0002 - 0x0000)
struct FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered final
{
public:
	bool                                          bNewHolstered;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayEquipAnim;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered");
static_assert(sizeof(FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered) == 0x000002, "Wrong size on FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered");
static_assert(offsetof(FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered, bNewHolstered) == 0x000000, "Member 'FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered::bNewHolstered' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered, bPlayEquipAnim) == 0x000001, "Member 'FortPawnComponent_GrindRail_ServerUpdateWeaponHolstered::bPlayEquipAnim' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.SetGrindBaseActor
// 0x0008 (0x0008 - 0x0000)
struct FortPawnComponent_GrindRail_SetGrindBaseActor final
{
public:
	class AActor*                                 NewBaseActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_SetGrindBaseActor) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_SetGrindBaseActor");
static_assert(sizeof(FortPawnComponent_GrindRail_SetGrindBaseActor) == 0x000008, "Wrong size on FortPawnComponent_GrindRail_SetGrindBaseActor");
static_assert(offsetof(FortPawnComponent_GrindRail_SetGrindBaseActor, NewBaseActor) == 0x000000, "Member 'FortPawnComponent_GrindRail_SetGrindBaseActor::NewBaseActor' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.SetGrindDistanceOnSpline
// 0x0004 (0x0004 - 0x0000)
struct FortPawnComponent_GrindRail_SetGrindDistanceOnSpline final
{
public:
	float                                         NewDistanceOnSpline;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_SetGrindDistanceOnSpline) == 0x000004, "Wrong alignment on FortPawnComponent_GrindRail_SetGrindDistanceOnSpline");
static_assert(sizeof(FortPawnComponent_GrindRail_SetGrindDistanceOnSpline) == 0x000004, "Wrong size on FortPawnComponent_GrindRail_SetGrindDistanceOnSpline");
static_assert(offsetof(FortPawnComponent_GrindRail_SetGrindDistanceOnSpline, NewDistanceOnSpline) == 0x000000, "Member 'FortPawnComponent_GrindRail_SetGrindDistanceOnSpline::NewDistanceOnSpline' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.SetIsSprinting
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_SetIsSprinting final
{
public:
	bool                                          bNewIsSprinting;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_SetIsSprinting) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_SetIsSprinting");
static_assert(sizeof(FortPawnComponent_GrindRail_SetIsSprinting) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_SetIsSprinting");
static_assert(offsetof(FortPawnComponent_GrindRail_SetIsSprinting, bNewIsSprinting) == 0x000000, "Member 'FortPawnComponent_GrindRail_SetIsSprinting::bNewIsSprinting' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.SetMovementStatus
// 0x0018 (0x0018 - 0x0000)
struct FortPawnComponent_GrindRail_SetMovementStatus final
{
public:
	struct FVector                                NewStatus;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_SetMovementStatus) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_SetMovementStatus");
static_assert(sizeof(FortPawnComponent_GrindRail_SetMovementStatus) == 0x000018, "Wrong size on FortPawnComponent_GrindRail_SetMovementStatus");
static_assert(offsetof(FortPawnComponent_GrindRail_SetMovementStatus, NewStatus) == 0x000000, "Member 'FortPawnComponent_GrindRail_SetMovementStatus::NewStatus' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.DrawDebugHUD
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_DrawDebugHUD final
{
public:
	class AHUD*                                   HUD;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvas*                                Canvas;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_DrawDebugHUD) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_DrawDebugHUD");
static_assert(sizeof(FortPawnComponent_GrindRail_DrawDebugHUD) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_DrawDebugHUD");
static_assert(offsetof(FortPawnComponent_GrindRail_DrawDebugHUD, HUD) == 0x000000, "Member 'FortPawnComponent_GrindRail_DrawDebugHUD::HUD' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_DrawDebugHUD, Canvas) == 0x000008, "Member 'FortPawnComponent_GrindRail_DrawDebugHUD::Canvas' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetCameraOrientedLeanValues
// 0x0010 (0x0010 - 0x0000)
struct FortPawnComponent_GrindRail_GetCameraOrientedLeanValues final
{
public:
	float                                         RawLeanForward;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawLeanRight;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrientedLeanForward;                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrientedLeanRight;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetCameraOrientedLeanValues) == 0x000004, "Wrong alignment on FortPawnComponent_GrindRail_GetCameraOrientedLeanValues");
static_assert(sizeof(FortPawnComponent_GrindRail_GetCameraOrientedLeanValues) == 0x000010, "Wrong size on FortPawnComponent_GrindRail_GetCameraOrientedLeanValues");
static_assert(offsetof(FortPawnComponent_GrindRail_GetCameraOrientedLeanValues, RawLeanForward) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetCameraOrientedLeanValues::RawLeanForward' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_GetCameraOrientedLeanValues, RawLeanRight) == 0x000004, "Member 'FortPawnComponent_GrindRail_GetCameraOrientedLeanValues::RawLeanRight' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_GetCameraOrientedLeanValues, OrientedLeanForward) == 0x000008, "Member 'FortPawnComponent_GrindRail_GetCameraOrientedLeanValues::OrientedLeanForward' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_GrindRail_GetCameraOrientedLeanValues, OrientedLeanRight) == 0x00000C, "Member 'FortPawnComponent_GrindRail_GetCameraOrientedLeanValues::OrientedLeanRight' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetCurrentGrindingRailActor
// 0x0008 (0x0008 - 0x0000)
struct FortPawnComponent_GrindRail_GetCurrentGrindingRailActor final
{
public:
	class AFortGrindRail*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetCurrentGrindingRailActor) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_GetCurrentGrindingRailActor");
static_assert(sizeof(FortPawnComponent_GrindRail_GetCurrentGrindingRailActor) == 0x000008, "Wrong size on FortPawnComponent_GrindRail_GetCurrentGrindingRailActor");
static_assert(offsetof(FortPawnComponent_GrindRail_GetCurrentGrindingRailActor, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetCurrentGrindingRailActor::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetGrindBaseActor
// 0x0008 (0x0008 - 0x0000)
struct FortPawnComponent_GrindRail_GetGrindBaseActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetGrindBaseActor) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_GetGrindBaseActor");
static_assert(sizeof(FortPawnComponent_GrindRail_GetGrindBaseActor) == 0x000008, "Wrong size on FortPawnComponent_GrindRail_GetGrindBaseActor");
static_assert(offsetof(FortPawnComponent_GrindRail_GetGrindBaseActor, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetGrindBaseActor::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetGrindDistanceOnSpline
// 0x0004 (0x0004 - 0x0000)
struct FortPawnComponent_GrindRail_GetGrindDistanceOnSpline final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetGrindDistanceOnSpline) == 0x000004, "Wrong alignment on FortPawnComponent_GrindRail_GetGrindDistanceOnSpline");
static_assert(sizeof(FortPawnComponent_GrindRail_GetGrindDistanceOnSpline) == 0x000004, "Wrong size on FortPawnComponent_GrindRail_GetGrindDistanceOnSpline");
static_assert(offsetof(FortPawnComponent_GrindRail_GetGrindDistanceOnSpline, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetGrindDistanceOnSpline::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetGrindRequestJump
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_GetGrindRequestJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetGrindRequestJump) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_GetGrindRequestJump");
static_assert(sizeof(FortPawnComponent_GrindRail_GetGrindRequestJump) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_GetGrindRequestJump");
static_assert(offsetof(FortPawnComponent_GrindRail_GetGrindRequestJump, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetGrindRequestJump::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetHorizontalSplineAngleDeltaDegrees
// 0x0004 (0x0004 - 0x0000)
struct FortPawnComponent_GrindRail_GetHorizontalSplineAngleDeltaDegrees final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetHorizontalSplineAngleDeltaDegrees) == 0x000004, "Wrong alignment on FortPawnComponent_GrindRail_GetHorizontalSplineAngleDeltaDegrees");
static_assert(sizeof(FortPawnComponent_GrindRail_GetHorizontalSplineAngleDeltaDegrees) == 0x000004, "Wrong size on FortPawnComponent_GrindRail_GetHorizontalSplineAngleDeltaDegrees");
static_assert(offsetof(FortPawnComponent_GrindRail_GetHorizontalSplineAngleDeltaDegrees, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetHorizontalSplineAngleDeltaDegrees::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetLeanForwardSpeedNormalized
// 0x0004 (0x0004 - 0x0000)
struct FortPawnComponent_GrindRail_GetLeanForwardSpeedNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetLeanForwardSpeedNormalized) == 0x000004, "Wrong alignment on FortPawnComponent_GrindRail_GetLeanForwardSpeedNormalized");
static_assert(sizeof(FortPawnComponent_GrindRail_GetLeanForwardSpeedNormalized) == 0x000004, "Wrong size on FortPawnComponent_GrindRail_GetLeanForwardSpeedNormalized");
static_assert(offsetof(FortPawnComponent_GrindRail_GetLeanForwardSpeedNormalized, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetLeanForwardSpeedNormalized::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetMovementStatus
// 0x0018 (0x0018 - 0x0000)
struct FortPawnComponent_GrindRail_GetMovementStatus final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetMovementStatus) == 0x000008, "Wrong alignment on FortPawnComponent_GrindRail_GetMovementStatus");
static_assert(sizeof(FortPawnComponent_GrindRail_GetMovementStatus) == 0x000018, "Wrong size on FortPawnComponent_GrindRail_GetMovementStatus");
static_assert(offsetof(FortPawnComponent_GrindRail_GetMovementStatus, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetMovementStatus::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetSpeedHardCap
// 0x0004 (0x0004 - 0x0000)
struct FortPawnComponent_GrindRail_GetSpeedHardCap final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetSpeedHardCap) == 0x000004, "Wrong alignment on FortPawnComponent_GrindRail_GetSpeedHardCap");
static_assert(sizeof(FortPawnComponent_GrindRail_GetSpeedHardCap) == 0x000004, "Wrong size on FortPawnComponent_GrindRail_GetSpeedHardCap");
static_assert(offsetof(FortPawnComponent_GrindRail_GetSpeedHardCap, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetSpeedHardCap::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.GetWantsToGrind
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_GetWantsToGrind final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_GetWantsToGrind) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_GetWantsToGrind");
static_assert(sizeof(FortPawnComponent_GrindRail_GetWantsToGrind) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_GetWantsToGrind");
static_assert(offsetof(FortPawnComponent_GrindRail_GetWantsToGrind, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_GetWantsToGrind::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsGrinding
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_IsGrinding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_IsGrinding) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_IsGrinding");
static_assert(sizeof(FortPawnComponent_GrindRail_IsGrinding) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_IsGrinding");
static_assert(offsetof(FortPawnComponent_GrindRail_IsGrinding, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_IsGrinding::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsOriginalGrindingSupported
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_IsOriginalGrindingSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_IsOriginalGrindingSupported) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_IsOriginalGrindingSupported");
static_assert(sizeof(FortPawnComponent_GrindRail_IsOriginalGrindingSupported) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_IsOriginalGrindingSupported");
static_assert(offsetof(FortPawnComponent_GrindRail_IsOriginalGrindingSupported, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_IsOriginalGrindingSupported::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsUsingFirstPersonCamera
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_IsUsingFirstPersonCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_IsUsingFirstPersonCamera) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_IsUsingFirstPersonCamera");
static_assert(sizeof(FortPawnComponent_GrindRail_IsUsingFirstPersonCamera) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_IsUsingFirstPersonCamera");
static_assert(offsetof(FortPawnComponent_GrindRail_IsUsingFirstPersonCamera, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_IsUsingFirstPersonCamera::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsUsingToggleSprint
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_IsUsingToggleSprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_IsUsingToggleSprint) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_IsUsingToggleSprint");
static_assert(sizeof(FortPawnComponent_GrindRail_IsUsingToggleSprint) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_IsUsingToggleSprint");
static_assert(offsetof(FortPawnComponent_GrindRail_IsUsingToggleSprint, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_IsUsingToggleSprint::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsWeaponActive
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_IsWeaponActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_IsWeaponActive) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_IsWeaponActive");
static_assert(sizeof(FortPawnComponent_GrindRail_IsWeaponActive) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_IsWeaponActive");
static_assert(offsetof(FortPawnComponent_GrindRail_IsWeaponActive, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_IsWeaponActive::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.IsWeaponADS
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_IsWeaponADS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_IsWeaponADS) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_IsWeaponADS");
static_assert(sizeof(FortPawnComponent_GrindRail_IsWeaponADS) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_IsWeaponADS");
static_assert(offsetof(FortPawnComponent_GrindRail_IsWeaponADS, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_IsWeaponADS::ReturnValue' has a wrong offset!");

// Function GrindRailRuntime.FortPawnComponent_GrindRail.NativeIsShooting
// 0x0001 (0x0001 - 0x0000)
struct FortPawnComponent_GrindRail_NativeIsShooting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_GrindRail_NativeIsShooting) == 0x000001, "Wrong alignment on FortPawnComponent_GrindRail_NativeIsShooting");
static_assert(sizeof(FortPawnComponent_GrindRail_NativeIsShooting) == 0x000001, "Wrong size on FortPawnComponent_GrindRail_NativeIsShooting");
static_assert(offsetof(FortPawnComponent_GrindRail_NativeIsShooting, ReturnValue) == 0x000000, "Member 'FortPawnComponent_GrindRail_NativeIsShooting::ReturnValue' has a wrong offset!");

}

