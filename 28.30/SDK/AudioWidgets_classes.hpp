#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioWidgets

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AudioWidgets_structs.hpp"


namespace SDK
{

// Class AudioWidgets.AudioMeter
// 0x0538 (0x06B0 - 0x0178)
class UAudioMeter final : public UWidget
{
public:
	TArray<struct FMeterChannelInfo>              MeterChannelInfo;                                  // 0x0178(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             MeterChannelInfoDelegate;                          // 0x0188(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0xC];                                      // 0x0194(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioMeterStyle                       WidgetStyle;                                       // 0x01A0(0x0480)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EOrientation                                  orientation;                                       // 0x0620(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_621[0x3];                                      // 0x0621(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BackgroundColor;                                   // 0x0624(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterBackgroundColor;                              // 0x0634(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterValueColor;                                   // 0x0644(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterPeakColor;                                    // 0x0654(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterClippingColor;                                // 0x0664(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterScaleColor;                                   // 0x0674(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterScaleLabelColor;                              // 0x0684(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_694[0x1C];                                     // 0x0694(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBackgroundColor(const struct FLinearColor& InValue);
	void SetMeterBackgroundColor(const struct FLinearColor& InValue);
	void SetMeterChannelInfo(const TArray<struct FMeterChannelInfo>& InMeterChannelInfo);
	void SetMeterClippingColor(const struct FLinearColor& InValue);
	void SetMeterPeakColor(const struct FLinearColor& InValue);
	void SetMeterScaleColor(const struct FLinearColor& InValue);
	void SetMeterScaleLabelColor(const struct FLinearColor& InValue);
	void SetMeterValueColor(const struct FLinearColor& InValue);

	TArray<struct FMeterChannelInfo> GetMeterChannelInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioMeter">();
	}
	static class UAudioMeter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioMeter>();
	}
};
static_assert(alignof(UAudioMeter) == 0x000010, "Wrong alignment on UAudioMeter");
static_assert(sizeof(UAudioMeter) == 0x0006B0, "Wrong size on UAudioMeter");
static_assert(offsetof(UAudioMeter, MeterChannelInfo) == 0x000178, "Member 'UAudioMeter::MeterChannelInfo' has a wrong offset!");
static_assert(offsetof(UAudioMeter, MeterChannelInfoDelegate) == 0x000188, "Member 'UAudioMeter::MeterChannelInfoDelegate' has a wrong offset!");
static_assert(offsetof(UAudioMeter, WidgetStyle) == 0x0001A0, "Member 'UAudioMeter::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UAudioMeter, orientation) == 0x000620, "Member 'UAudioMeter::orientation' has a wrong offset!");
static_assert(offsetof(UAudioMeter, BackgroundColor) == 0x000624, "Member 'UAudioMeter::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UAudioMeter, MeterBackgroundColor) == 0x000634, "Member 'UAudioMeter::MeterBackgroundColor' has a wrong offset!");
static_assert(offsetof(UAudioMeter, MeterValueColor) == 0x000644, "Member 'UAudioMeter::MeterValueColor' has a wrong offset!");
static_assert(offsetof(UAudioMeter, MeterPeakColor) == 0x000654, "Member 'UAudioMeter::MeterPeakColor' has a wrong offset!");
static_assert(offsetof(UAudioMeter, MeterClippingColor) == 0x000664, "Member 'UAudioMeter::MeterClippingColor' has a wrong offset!");
static_assert(offsetof(UAudioMeter, MeterScaleColor) == 0x000674, "Member 'UAudioMeter::MeterScaleColor' has a wrong offset!");
static_assert(offsetof(UAudioMeter, MeterScaleLabelColor) == 0x000684, "Member 'UAudioMeter::MeterScaleLabelColor' has a wrong offset!");

// Class AudioWidgets.AudioOscilloscope
// 0x04E8 (0x0660 - 0x0178)
class UAudioOscilloscope final : public UWidget
{
public:
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioOscilloscopePanelStyle           OscilloscopeStyle;                                 // 0x0180(0x0470)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeWindowMs;                                      // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnalysisPeriodMs;                                  // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTimeGrid;                                     // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXAxisLabelsUnit                              TimeGridLabelsUnit;                                // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAmplitudeGrid;                                // 0x0602(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAmplitudeLabels;                              // 0x0603(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EYAxisLabelsUnit                              AmplitudeGridLabelsUnit;                           // 0x0604(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTriggerThresholdLine;                         // 0x0605(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_606[0x2];                                      // 0x0606(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggerThreshold;                                  // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioPanelLayoutType                         PanelLayoutType;                                   // 0x060C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60D[0x53];                                     // 0x060D(0x0053)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartProcessing();
	void StopProcessing();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioOscilloscope">();
	}
	static class UAudioOscilloscope* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioOscilloscope>();
	}
};
static_assert(alignof(UAudioOscilloscope) == 0x000010, "Wrong alignment on UAudioOscilloscope");
static_assert(sizeof(UAudioOscilloscope) == 0x000660, "Wrong size on UAudioOscilloscope");
static_assert(offsetof(UAudioOscilloscope, OscilloscopeStyle) == 0x000180, "Member 'UAudioOscilloscope::OscilloscopeStyle' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, AudioBus) == 0x0005F0, "Member 'UAudioOscilloscope::AudioBus' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, TimeWindowMs) == 0x0005F8, "Member 'UAudioOscilloscope::TimeWindowMs' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, AnalysisPeriodMs) == 0x0005FC, "Member 'UAudioOscilloscope::AnalysisPeriodMs' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, bShowTimeGrid) == 0x000600, "Member 'UAudioOscilloscope::bShowTimeGrid' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, TimeGridLabelsUnit) == 0x000601, "Member 'UAudioOscilloscope::TimeGridLabelsUnit' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, bShowAmplitudeGrid) == 0x000602, "Member 'UAudioOscilloscope::bShowAmplitudeGrid' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, bShowAmplitudeLabels) == 0x000603, "Member 'UAudioOscilloscope::bShowAmplitudeLabels' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, AmplitudeGridLabelsUnit) == 0x000604, "Member 'UAudioOscilloscope::AmplitudeGridLabelsUnit' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, bShowTriggerThresholdLine) == 0x000605, "Member 'UAudioOscilloscope::bShowTriggerThresholdLine' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, TriggerThreshold) == 0x000608, "Member 'UAudioOscilloscope::TriggerThreshold' has a wrong offset!");
static_assert(offsetof(UAudioOscilloscope, PanelLayoutType) == 0x00060C, "Member 'UAudioOscilloscope::PanelLayoutType' has a wrong offset!");

// Class AudioWidgets.AudioRadialSlider
// 0x0208 (0x0380 - 0x0178)
class alignas(0x10) UAudioRadialSlider : public UWidget
{
public:
	float                                         Value;                                             // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x017C(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioRadialSliderLayout                      WidgetLayout;                                      // 0x0188(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CenterBackgroundColor;                             // 0x018C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderProgressColor;                               // 0x019C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderBarColor;                                    // 0x01AC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              HandStartEndRatio;                                 // 0x01C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UnitsText;                                         // 0x01D0(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextLabelBackgroundColor;                          // 0x01E8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLabelOnlyOnHover;                              // 0x01F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowUnitsText;                                     // 0x01F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnitsTextReadOnly;                               // 0x01FA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValueTextReadOnly;                               // 0x01FB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderThickness;                                   // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutputRange;                                       // 0x0200(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_220[0x160];                                    // 0x0220(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetOutputValue(const float InSliderValue);
	float GetSliderValue(const float OutputValue);
	void SetCenterBackgroundColor(const struct FLinearColor& InValue);
	void SetHandStartEndRatio(const struct FVector2D& InHandStartEndRatio);
	void SetOutputRange(const struct FVector2D& InOutputRange);
	void SetShowLabelOnlyOnHover(const bool bShowLabelOnlyOnHover);
	void SetShowUnitsText(const bool bShowUnitsText);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetSliderProgressColor(const struct FLinearColor& InValue);
	void SetSliderThickness(const float InThickness);
	void SetTextLabelBackgroundColor(const struct FSlateColor& InColor);
	void SetUnitsText(const class FText& Units);
	void SetUnitsTextReadOnly(const bool bIsReadOnly);
	void SetValueTextReadOnly(const bool bIsReadOnly);
	void SetWidgetLayout(EAudioRadialSliderLayout InLayout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioRadialSlider">();
	}
	static class UAudioRadialSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioRadialSlider>();
	}
};
static_assert(alignof(UAudioRadialSlider) == 0x000010, "Wrong alignment on UAudioRadialSlider");
static_assert(sizeof(UAudioRadialSlider) == 0x000380, "Wrong size on UAudioRadialSlider");
static_assert(offsetof(UAudioRadialSlider, Value) == 0x000178, "Member 'UAudioRadialSlider::Value' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, ValueDelegate) == 0x00017C, "Member 'UAudioRadialSlider::ValueDelegate' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, WidgetLayout) == 0x000188, "Member 'UAudioRadialSlider::WidgetLayout' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, CenterBackgroundColor) == 0x00018C, "Member 'UAudioRadialSlider::CenterBackgroundColor' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, SliderProgressColor) == 0x00019C, "Member 'UAudioRadialSlider::SliderProgressColor' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, SliderBarColor) == 0x0001AC, "Member 'UAudioRadialSlider::SliderBarColor' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, HandStartEndRatio) == 0x0001C0, "Member 'UAudioRadialSlider::HandStartEndRatio' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, UnitsText) == 0x0001D0, "Member 'UAudioRadialSlider::UnitsText' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, TextLabelBackgroundColor) == 0x0001E8, "Member 'UAudioRadialSlider::TextLabelBackgroundColor' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, ShowLabelOnlyOnHover) == 0x0001F8, "Member 'UAudioRadialSlider::ShowLabelOnlyOnHover' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, ShowUnitsText) == 0x0001F9, "Member 'UAudioRadialSlider::ShowUnitsText' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, IsUnitsTextReadOnly) == 0x0001FA, "Member 'UAudioRadialSlider::IsUnitsTextReadOnly' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, IsValueTextReadOnly) == 0x0001FB, "Member 'UAudioRadialSlider::IsValueTextReadOnly' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, SliderThickness) == 0x0001FC, "Member 'UAudioRadialSlider::SliderThickness' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, OutputRange) == 0x000200, "Member 'UAudioRadialSlider::OutputRange' has a wrong offset!");
static_assert(offsetof(UAudioRadialSlider, OnValueChanged) == 0x000210, "Member 'UAudioRadialSlider::OnValueChanged' has a wrong offset!");

// Class AudioWidgets.AudioVolumeRadialSlider
// 0x0000 (0x0380 - 0x0380)
class UAudioVolumeRadialSlider final : public UAudioRadialSlider
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioVolumeRadialSlider">();
	}
	static class UAudioVolumeRadialSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioVolumeRadialSlider>();
	}
};
static_assert(alignof(UAudioVolumeRadialSlider) == 0x000010, "Wrong alignment on UAudioVolumeRadialSlider");
static_assert(sizeof(UAudioVolumeRadialSlider) == 0x000380, "Wrong size on UAudioVolumeRadialSlider");

// Class AudioWidgets.AudioFrequencyRadialSlider
// 0x0000 (0x0380 - 0x0380)
class UAudioFrequencyRadialSlider final : public UAudioRadialSlider
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioFrequencyRadialSlider">();
	}
	static class UAudioFrequencyRadialSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioFrequencyRadialSlider>();
	}
};
static_assert(alignof(UAudioFrequencyRadialSlider) == 0x000010, "Wrong alignment on UAudioFrequencyRadialSlider");
static_assert(sizeof(UAudioFrequencyRadialSlider) == 0x000380, "Wrong size on UAudioFrequencyRadialSlider");

// Class AudioWidgets.AudioSliderBase
// 0x07B8 (0x0930 - 0x0178)
class alignas(0x10) UAudioSliderBase : public UWidget
{
public:
	float                                         Value;                                             // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnitsText;                                         // 0x0180(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextLabelBackgroundColor;                          // 0x0198(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextLabelBackgroundColorDelegate;                  // 0x01A8(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLabelOnlyOnHover;                              // 0x01B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowUnitsText;                                     // 0x01B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnitsTextReadOnly;                               // 0x01B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValueTextReadOnly;                               // 0x01B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x01B8(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderBackgroundColor;                             // 0x01C4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SliderBackgroundColorDelegate;                     // 0x01D4(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderBarColor;                                    // 0x01E0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SliderBarColorDelegate;                            // 0x01F0(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderThumbColor;                                  // 0x01FC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SliderThumbColorDelegate;                          // 0x020C(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WidgetBackgroundColor;                             // 0x0218(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             WidgetBackgroundColorDelegate;                     // 0x0228(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientation                                  orientation;                                       // 0x0234(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x6E8];                                    // 0x0248(0x06E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetLinValue(const float OutputValue);
	float GetOutputValue(const float InSliderValue);
	float GetSliderValue(const float OutputValue);
	void SetShowLabelOnlyOnHover(const bool bShowLabelOnlyOnHover);
	void SetShowUnitsText(const bool bShowUnitsText);
	void SetSliderBackgroundColor(const struct FLinearColor& InValue);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetSliderThumbColor(const struct FLinearColor& InValue);
	void SetTextLabelBackgroundColor(const struct FSlateColor& InColor);
	void SetUnitsText(const class FText& Units);
	void SetUnitsTextReadOnly(const bool bIsReadOnly);
	void SetValueTextReadOnly(const bool bIsReadOnly);
	void SetWidgetBackgroundColor(const struct FLinearColor& InValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioSliderBase">();
	}
	static class UAudioSliderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioSliderBase>();
	}
};
static_assert(alignof(UAudioSliderBase) == 0x000010, "Wrong alignment on UAudioSliderBase");
static_assert(sizeof(UAudioSliderBase) == 0x000930, "Wrong size on UAudioSliderBase");
static_assert(offsetof(UAudioSliderBase, Value) == 0x000178, "Member 'UAudioSliderBase::Value' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, UnitsText) == 0x000180, "Member 'UAudioSliderBase::UnitsText' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, TextLabelBackgroundColor) == 0x000198, "Member 'UAudioSliderBase::TextLabelBackgroundColor' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, TextLabelBackgroundColorDelegate) == 0x0001A8, "Member 'UAudioSliderBase::TextLabelBackgroundColorDelegate' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, ShowLabelOnlyOnHover) == 0x0001B4, "Member 'UAudioSliderBase::ShowLabelOnlyOnHover' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, ShowUnitsText) == 0x0001B5, "Member 'UAudioSliderBase::ShowUnitsText' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, IsUnitsTextReadOnly) == 0x0001B6, "Member 'UAudioSliderBase::IsUnitsTextReadOnly' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, IsValueTextReadOnly) == 0x0001B7, "Member 'UAudioSliderBase::IsValueTextReadOnly' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, ValueDelegate) == 0x0001B8, "Member 'UAudioSliderBase::ValueDelegate' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, SliderBackgroundColor) == 0x0001C4, "Member 'UAudioSliderBase::SliderBackgroundColor' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, SliderBackgroundColorDelegate) == 0x0001D4, "Member 'UAudioSliderBase::SliderBackgroundColorDelegate' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, SliderBarColor) == 0x0001E0, "Member 'UAudioSliderBase::SliderBarColor' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, SliderBarColorDelegate) == 0x0001F0, "Member 'UAudioSliderBase::SliderBarColorDelegate' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, SliderThumbColor) == 0x0001FC, "Member 'UAudioSliderBase::SliderThumbColor' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, SliderThumbColorDelegate) == 0x00020C, "Member 'UAudioSliderBase::SliderThumbColorDelegate' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, WidgetBackgroundColor) == 0x000218, "Member 'UAudioSliderBase::WidgetBackgroundColor' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, WidgetBackgroundColorDelegate) == 0x000228, "Member 'UAudioSliderBase::WidgetBackgroundColorDelegate' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, orientation) == 0x000234, "Member 'UAudioSliderBase::orientation' has a wrong offset!");
static_assert(offsetof(UAudioSliderBase, OnValueChanged) == 0x000238, "Member 'UAudioSliderBase::OnValueChanged' has a wrong offset!");

// Class AudioWidgets.AudioSlider
// 0x0010 (0x0940 - 0x0930)
class UAudioSlider : public UAudioSliderBase
{
public:
	TWeakObjectPtr<class UCurveFloat>             LinToOutputCurve;                                  // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UCurveFloat>             OutputToLinCurve;                                  // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioSlider">();
	}
	static class UAudioSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioSlider>();
	}
};
static_assert(alignof(UAudioSlider) == 0x000010, "Wrong alignment on UAudioSlider");
static_assert(sizeof(UAudioSlider) == 0x000940, "Wrong size on UAudioSlider");
static_assert(offsetof(UAudioSlider, LinToOutputCurve) == 0x000930, "Member 'UAudioSlider::LinToOutputCurve' has a wrong offset!");
static_assert(offsetof(UAudioSlider, OutputToLinCurve) == 0x000938, "Member 'UAudioSlider::OutputToLinCurve' has a wrong offset!");

// Class AudioWidgets.AudioVolumeSlider
// 0x0000 (0x0940 - 0x0940)
class UAudioVolumeSlider final : public UAudioSlider
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioVolumeSlider">();
	}
	static class UAudioVolumeSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioVolumeSlider>();
	}
};
static_assert(alignof(UAudioVolumeSlider) == 0x000010, "Wrong alignment on UAudioVolumeSlider");
static_assert(sizeof(UAudioVolumeSlider) == 0x000940, "Wrong size on UAudioVolumeSlider");

// Class AudioWidgets.AudioFrequencySlider
// 0x0010 (0x0940 - 0x0930)
class UAudioFrequencySlider final : public UAudioSliderBase
{
public:
	struct FVector2D                              OutputRange;                                       // 0x0930(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioFrequencySlider">();
	}
	static class UAudioFrequencySlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioFrequencySlider>();
	}
};
static_assert(alignof(UAudioFrequencySlider) == 0x000010, "Wrong alignment on UAudioFrequencySlider");
static_assert(sizeof(UAudioFrequencySlider) == 0x000940, "Wrong size on UAudioFrequencySlider");
static_assert(offsetof(UAudioFrequencySlider, OutputRange) == 0x000930, "Member 'UAudioFrequencySlider::OutputRange' has a wrong offset!");

// Class AudioWidgets.AudioVectorscope
// 0x0218 (0x0390 - 0x0178)
class UAudioVectorscope final : public UWidget
{
public:
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioVectorscopePanelStyle            VectorscopeStyle;                                  // 0x0180(0x01A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowGrid;                                         // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GridDivisions;                                     // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayPersistenceMs;                              // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioPanelLayoutType                         PanelLayoutType;                                   // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x57];                                     // 0x0339(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartProcessing();
	void StopProcessing();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioVectorscope">();
	}
	static class UAudioVectorscope* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioVectorscope>();
	}
};
static_assert(alignof(UAudioVectorscope) == 0x000010, "Wrong alignment on UAudioVectorscope");
static_assert(sizeof(UAudioVectorscope) == 0x000390, "Wrong size on UAudioVectorscope");
static_assert(offsetof(UAudioVectorscope, VectorscopeStyle) == 0x000180, "Member 'UAudioVectorscope::VectorscopeStyle' has a wrong offset!");
static_assert(offsetof(UAudioVectorscope, AudioBus) == 0x000320, "Member 'UAudioVectorscope::AudioBus' has a wrong offset!");
static_assert(offsetof(UAudioVectorscope, bShowGrid) == 0x000328, "Member 'UAudioVectorscope::bShowGrid' has a wrong offset!");
static_assert(offsetof(UAudioVectorscope, GridDivisions) == 0x00032C, "Member 'UAudioVectorscope::GridDivisions' has a wrong offset!");
static_assert(offsetof(UAudioVectorscope, DisplayPersistenceMs) == 0x000330, "Member 'UAudioVectorscope::DisplayPersistenceMs' has a wrong offset!");
static_assert(offsetof(UAudioVectorscope, Scale) == 0x000334, "Member 'UAudioVectorscope::Scale' has a wrong offset!");
static_assert(offsetof(UAudioVectorscope, PanelLayoutType) == 0x000338, "Member 'UAudioVectorscope::PanelLayoutType' has a wrong offset!");

}

