#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HarmonixAudioReactivity

#include "Basic.hpp"

#include "HarmonixDsp_structs.hpp"


namespace SDK
{

// Enum HarmonixAudioReactivity.EHarmonixAudioAnalysisType
// NumValues: 0x0005
enum class EHarmonixAudioAnalysisType : uint8
{
	VUMeter                                  = 0,
	FFT                                      = 1,
	Waveform                                 = 2,
	Arbitrary                                = 3,
	Count                                    = 4,
};

// Enum HarmonixAudioReactivity.EHarmonixTextureFilterMode
// NumValues: 0x0004
enum class EHarmonixTextureFilterMode : uint8
{
	Point                                    = 0,
	Linear                                   = 1,
	Count                                    = 2,
	Invalid                                  = 3,
};

// ScriptStruct HarmonixAudioReactivity.HarmonixAudioAnalyzerResults
// 0x0060 (0x0060 - 0x0000)
struct FHarmonixAudioAnalyzerResults final
{
public:
	struct FHarmonixVuMeterAnalyzerResults        VuMeterResults;                                    // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FHarmonixFFTAnalyzerResults            FFTResults;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FHarmonixWaveformAnalyzerResults       WaveformAnalyzerResults;                           // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<float>                                 ArbitraryTextureData;                              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixAudioAnalyzerResults) == 0x000008, "Wrong alignment on FHarmonixAudioAnalyzerResults");
static_assert(sizeof(FHarmonixAudioAnalyzerResults) == 0x000060, "Wrong size on FHarmonixAudioAnalyzerResults");
static_assert(offsetof(FHarmonixAudioAnalyzerResults, VuMeterResults) == 0x000000, "Member 'FHarmonixAudioAnalyzerResults::VuMeterResults' has a wrong offset!");
static_assert(offsetof(FHarmonixAudioAnalyzerResults, FFTResults) == 0x000020, "Member 'FHarmonixAudioAnalyzerResults::FFTResults' has a wrong offset!");
static_assert(offsetof(FHarmonixAudioAnalyzerResults, WaveformAnalyzerResults) == 0x000030, "Member 'FHarmonixAudioAnalyzerResults::WaveformAnalyzerResults' has a wrong offset!");
static_assert(offsetof(FHarmonixAudioAnalyzerResults, ArbitraryTextureData) == 0x000050, "Member 'FHarmonixAudioAnalyzerResults::ArbitraryTextureData' has a wrong offset!");

// ScriptStruct HarmonixAudioReactivity.HarmonixAudioAnalyzerSettings
// 0x0050 (0x0050 - 0x0000)
struct FHarmonixAudioAnalyzerSettings final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHarmonixVuMeterAnalyzerSettings       VuMeterSettings;                                   // 0x0004(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHarmonixFFTAnalyzerSettings           FFTAnalyzerSettings;                               // 0x001C(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHarmonixWaveformAnalyzerSettings      WaveformAnalyzerSettings;                          // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixAudioAnalyzerSettings) == 0x000004, "Wrong alignment on FHarmonixAudioAnalyzerSettings");
static_assert(sizeof(FHarmonixAudioAnalyzerSettings) == 0x000050, "Wrong size on FHarmonixAudioAnalyzerSettings");
static_assert(offsetof(FHarmonixAudioAnalyzerSettings, Name) == 0x000000, "Member 'FHarmonixAudioAnalyzerSettings::Name' has a wrong offset!");
static_assert(offsetof(FHarmonixAudioAnalyzerSettings, VuMeterSettings) == 0x000004, "Member 'FHarmonixAudioAnalyzerSettings::VuMeterSettings' has a wrong offset!");
static_assert(offsetof(FHarmonixAudioAnalyzerSettings, FFTAnalyzerSettings) == 0x00001C, "Member 'FHarmonixAudioAnalyzerSettings::FFTAnalyzerSettings' has a wrong offset!");
static_assert(offsetof(FHarmonixAudioAnalyzerSettings, WaveformAnalyzerSettings) == 0x000040, "Member 'FHarmonixAudioAnalyzerSettings::WaveformAnalyzerSettings' has a wrong offset!");

// ScriptStruct HarmonixAudioReactivity.HarmonixAudioAnalyzerSourceEffectSettings
// 0x0050 (0x0050 - 0x0000)
struct FHarmonixAudioAnalyzerSourceEffectSettings final
{
public:
	struct FHarmonixAudioAnalyzerSettings         AnalyzerSettings;                                  // 0x0000(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixAudioAnalyzerSourceEffectSettings) == 0x000004, "Wrong alignment on FHarmonixAudioAnalyzerSourceEffectSettings");
static_assert(sizeof(FHarmonixAudioAnalyzerSourceEffectSettings) == 0x000050, "Wrong size on FHarmonixAudioAnalyzerSourceEffectSettings");
static_assert(offsetof(FHarmonixAudioAnalyzerSourceEffectSettings, AnalyzerSettings) == 0x000000, "Member 'FHarmonixAudioAnalyzerSourceEffectSettings::AnalyzerSettings' has a wrong offset!");

// ScriptStruct HarmonixAudioReactivity.HarmonixAudioAnalyzerSubmixEffectSettings
// 0x0050 (0x0050 - 0x0000)
struct FHarmonixAudioAnalyzerSubmixEffectSettings final
{
public:
	struct FHarmonixAudioAnalyzerSettings         AnalyzerSettings;                                  // 0x0000(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixAudioAnalyzerSubmixEffectSettings) == 0x000004, "Wrong alignment on FHarmonixAudioAnalyzerSubmixEffectSettings");
static_assert(sizeof(FHarmonixAudioAnalyzerSubmixEffectSettings) == 0x000050, "Wrong size on FHarmonixAudioAnalyzerSubmixEffectSettings");
static_assert(offsetof(FHarmonixAudioAnalyzerSubmixEffectSettings, AnalyzerSettings) == 0x000000, "Member 'FHarmonixAudioAnalyzerSubmixEffectSettings::AnalyzerSettings' has a wrong offset!");

// ScriptStruct HarmonixAudioReactivity.HarmonixPeakTamerSettings
// 0x0014 (0x0014 - 0x0000)
struct FHarmonixPeakTamerSettings final
{
public:
	float                                         PeakAttackTimeSeconds;                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakReleaseTimeSeconds;                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableValueSmoothing;                             // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValueAttackTimeSeconds;                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueReleaseTimeSeconds;                           // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarmonixPeakTamerSettings) == 0x000004, "Wrong alignment on FHarmonixPeakTamerSettings");
static_assert(sizeof(FHarmonixPeakTamerSettings) == 0x000014, "Wrong size on FHarmonixPeakTamerSettings");
static_assert(offsetof(FHarmonixPeakTamerSettings, PeakAttackTimeSeconds) == 0x000000, "Member 'FHarmonixPeakTamerSettings::PeakAttackTimeSeconds' has a wrong offset!");
static_assert(offsetof(FHarmonixPeakTamerSettings, PeakReleaseTimeSeconds) == 0x000004, "Member 'FHarmonixPeakTamerSettings::PeakReleaseTimeSeconds' has a wrong offset!");
static_assert(offsetof(FHarmonixPeakTamerSettings, bEnableValueSmoothing) == 0x000008, "Member 'FHarmonixPeakTamerSettings::bEnableValueSmoothing' has a wrong offset!");
static_assert(offsetof(FHarmonixPeakTamerSettings, ValueAttackTimeSeconds) == 0x00000C, "Member 'FHarmonixPeakTamerSettings::ValueAttackTimeSeconds' has a wrong offset!");
static_assert(offsetof(FHarmonixPeakTamerSettings, ValueReleaseTimeSeconds) == 0x000010, "Member 'FHarmonixPeakTamerSettings::ValueReleaseTimeSeconds' has a wrong offset!");

}

