#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayBehaviorSmartObjectsModule

#include "Basic.hpp"

#include "SmartObjectsModule_structs.hpp"


namespace SDK::Params
{

// Function GameplayBehaviorSmartObjectsModule.AITask_UseGameplayBehaviorSmartObject.MoveToAndUseSmartObjectWithGameplayBehavior
// 0x0038 (0x0038 - 0x0000)
struct AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectClaimHandle                ClaimHandle;                                       // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLockAILogic;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESmartObjectClaimPriority                     ClaimPriority;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAITask_UseGameplayBehaviorSmartObject* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior) == 0x000008, "Wrong alignment on AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior");
static_assert(sizeof(AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior) == 0x000038, "Wrong size on AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior, Controller) == 0x000000, "Member 'AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior::Controller' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior, ClaimHandle) == 0x000008, "Member 'AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior::ClaimHandle' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior, bLockAILogic) == 0x000028, "Member 'AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior::bLockAILogic' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior, ClaimPriority) == 0x000029, "Member 'AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior::ClaimPriority' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior, ReturnValue) == 0x000030, "Member 'AITask_UseGameplayBehaviorSmartObject_MoveToAndUseSmartObjectWithGameplayBehavior::ReturnValue' has a wrong offset!");

// Function GameplayBehaviorSmartObjectsModule.AITask_UseGameplayBehaviorSmartObject.UseGameplayBehaviorSmartObject
// 0x0028 (0x0028 - 0x0000)
struct AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SmartObjectActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USmartObjectComponent*                  SmartObjectComponent;                              // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockAILogic;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAITask_UseGameplayBehaviorSmartObject* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject) == 0x000008, "Wrong alignment on AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject");
static_assert(sizeof(AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject) == 0x000028, "Wrong size on AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject, Controller) == 0x000000, "Member 'AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject::Controller' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject, SmartObjectActor) == 0x000008, "Member 'AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject::SmartObjectActor' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject, SmartObjectComponent) == 0x000010, "Member 'AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject::SmartObjectComponent' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject, bLockAILogic) == 0x000018, "Member 'AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject::bLockAILogic' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject, ReturnValue) == 0x000020, "Member 'AITask_UseGameplayBehaviorSmartObject_UseGameplayBehaviorSmartObject::ReturnValue' has a wrong offset!");

// Function GameplayBehaviorSmartObjectsModule.AITask_UseGameplayBehaviorSmartObject.UseSmartObjectWithGameplayBehavior
// 0x0038 (0x0038 - 0x0000)
struct AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectClaimHandle                ClaimHandle;                                       // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLockAILogic;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESmartObjectClaimPriority                     ClaimPriority;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAITask_UseGameplayBehaviorSmartObject* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior) == 0x000008, "Wrong alignment on AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior");
static_assert(sizeof(AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior) == 0x000038, "Wrong size on AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior, Controller) == 0x000000, "Member 'AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior::Controller' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior, ClaimHandle) == 0x000008, "Member 'AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior::ClaimHandle' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior, bLockAILogic) == 0x000028, "Member 'AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior::bLockAILogic' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior, ClaimPriority) == 0x000029, "Member 'AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior::ClaimPriority' has a wrong offset!");
static_assert(offsetof(AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior, ReturnValue) == 0x000030, "Member 'AITask_UseGameplayBehaviorSmartObject_UseSmartObjectWithGameplayBehavior::ReturnValue' has a wrong offset!");

// Function GameplayBehaviorSmartObjectsModule.GameplayBehaviorSmartObjectsBlueprintFunctionLibrary.UseGameplayBehaviorSmartObject
// 0x0018 (0x0018 - 0x0000)
struct GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject final
{
public:
	class AActor*                                 Avatar;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SmartObject;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject) == 0x000008, "Wrong alignment on GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject");
static_assert(sizeof(GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject) == 0x000018, "Wrong size on GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject");
static_assert(offsetof(GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject, Avatar) == 0x000000, "Member 'GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject::Avatar' has a wrong offset!");
static_assert(offsetof(GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject, SmartObject) == 0x000008, "Member 'GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject::SmartObject' has a wrong offset!");
static_assert(offsetof(GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject, ReturnValue) == 0x000010, "Member 'GameplayBehaviorSmartObjectsBlueprintFunctionLibrary_UseGameplayBehaviorSmartObject::ReturnValue' has a wrong offset!");

}

