#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationUI

#include "Basic.hpp"

#include "ItemizationUI_classes.hpp"
#include "ItemizationUI_parameters.hpp"


namespace SDK
{

// Function ItemizationUI.GenericInventoryPanel.OnDropAllInput
// (Event, Protected, BlueprintEvent)

void UGenericInventoryPanel::OnDropAllInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDropAllInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationUI.GenericInventoryPanel.OnDropHalfInput
// (Event, Protected, BlueprintEvent)

void UGenericInventoryPanel::OnDropHalfInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDropHalfInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationUI.GenericInventoryPanel.OnDropItemInput
// (Event, Protected, BlueprintEvent)

void UGenericInventoryPanel::OnDropItemInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDropItemInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationUI.GenericInventoryPanel.OnDropStackInput
// (Event, Protected, BlueprintEvent)

void UGenericInventoryPanel::OnDropStackInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDropStackInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationUI.GenericInventoryPanel.OnMakeItemActiveInput
// (Event, Protected, BlueprintEvent)

void UGenericInventoryPanel::OnMakeItemActiveInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMakeItemActiveInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationUI.GenericInventoryPanel.OnMakeItemInactiveInput
// (Event, Protected, BlueprintEvent)

void UGenericInventoryPanel::OnMakeItemInactiveInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnMakeItemInactiveInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationUI.GenericInventoryPanel.UpdateDropInputs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AmountOfSelectedItem                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericInventoryPanel::UpdateDropInputs(const int32 AmountOfSelectedItem)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateDropInputs");

	Params::GenericInventoryPanel_UpdateDropInputs Parms{};

	Parms.AmountOfSelectedItem = AmountOfSelectedItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationUI.GenericInventoryPanel.UpdateMakeItemActiveInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCanItemBeMadeActive                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericInventoryPanel::UpdateMakeItemActiveInput(const bool bCanItemBeMadeActive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateMakeItemActiveInput");

	Params::GenericInventoryPanel_UpdateMakeItemActiveInput Parms{};

	Parms.bCanItemBeMadeActive = bCanItemBeMadeActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationUI.GenericInventoryPanel.UpdateMakeItemInactiveInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCanItemBeMadeInactive                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericInventoryPanel::UpdateMakeItemInactiveInput(const bool bCanItemBeMadeInactive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateMakeItemInactiveInput");

	Params::GenericInventoryPanel_UpdateMakeItemInactiveInput Parms{};

	Parms.bCanItemBeMadeInactive = bCanItemBeMadeInactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationUI.ItemizationDynamicUIDirector.HandleInventorySwitched
// (Final, Native, Private)
// Parameters:
// class AFortPlayerController*            PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AItemizationDynamicUIDirector::HandleInventorySwitched(class AFortPlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleInventorySwitched");

	Params::ItemizationDynamicUIDirector_HandleInventorySwitched Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}

}

