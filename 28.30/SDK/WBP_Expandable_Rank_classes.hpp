#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Expandable_Rank

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "WBP_Expandable_Base_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Expandable_Rank.WBP_Expandable_Rank_C
// 0x0110 (0x1600 - 0x14F0)
class UWBP_Expandable_Rank_C final : public UWBP_Expandable_Base_C
{
public:
	uint8                                         Pad_14E2[0x6];                                     // 0x14E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_WBP_Expandable_Rank_C;              // 0x14E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortRankedViewModel*                   FortRankedViewModel;                               // 0x14F0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, DuplicateTransient, RepSkip, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UDynamicEntryBox*                       DynamicEntryBox;                                   // 0x14F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RadialDropShadow;                                  // 0x1500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonVisibilitySwitcher*              RankedUnranked_Switcher;                           // 0x1508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RankProgressBar;                                   // 0x1510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_RankName;                                     // 0x1518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_ToNextRankPercent;                            // 0x1520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_Unranked;                                     // 0x1528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_RankInfo;                              // 0x1530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Habanero_Icon_C*                   WBP_Habanero_Icon;                                 // 0x1538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Habanero_ShieldSmall_C*            WBP_Habanero_ShieldSmall;                          // 0x1540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UWBP_HeroRank_Rectangle_C*>      RectangleArray;                                    // 0x1548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class FString, int32>                    RectangleMap;                                      // 0x1558(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 Rank_Type;                                         // 0x15A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   ProgressParameter;                                 // 0x15B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Played_Rank_Position;                              // 0x15BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsUnreal;                                         // 0x15C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHabaneroTierType                             CurrentTierCategory;                               // 0x15C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsUnranked;                                       // 0x15C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C3[0x5];                                     // 0x15C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ProgressValue;                                     // 0x15C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Player_Ranked;                                  // 0x15D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Island_Ranked;                                  // 0x15D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15D2[0x6];                                     // 0x15D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnrealRankCapText;                                 // 0x15D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Has_Rank_Protection;                               // 0x15F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnClicked();
	void BP_OnFocusLost();
	void BP_OnFocusReceived();
	void BP_OnHovered();
	void BP_OnUnhovered();
	void Construct();
	void ExecuteUbergraph_WBP_Expandable_Rank(int32 EntryPoint);
	void OnPrimaryContentPushed_3F807EA84C251E9044A17FA1CCB7CFE9(class UCommonActivatableWidget* ActivatableWidget);
	void Set_Current_Player_Rank(int32 CurrentRankIndex);
	void Set_Current_Player_Rank_Position(int32 CurrentPlayerRankPosition);
	void Set_Default_Player_UnRank();
	void Set_Has_Rank_Protection(bool Has_Protection);
	void Set_Is_Island_Ranked(bool IsIslandRanked);
	void Set_Is_Player_Ranked(bool IsPlayerRanked);
	void Set_Rank_Circle_Progress(double Progress);
	void Set_Rank_Rectangle(const class FText& RankName);
	void SetFortRankedViewModel(class UFortRankedViewModel* ViewModel);
	void SetRankText();
	void SetRankType(const class FString& RankType);
	void Setup_Rank_Rectangle(const class FString& ArabicNum);
	void Setup_Rank_Visual();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Expandable_Rank_C">();
	}
	static class UWBP_Expandable_Rank_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Expandable_Rank_C>();
	}
};
static_assert(alignof(UWBP_Expandable_Rank_C) == 0x000010, "Wrong alignment on UWBP_Expandable_Rank_C");
static_assert(sizeof(UWBP_Expandable_Rank_C) == 0x001600, "Wrong size on UWBP_Expandable_Rank_C");
static_assert(offsetof(UWBP_Expandable_Rank_C, UberGraphFrame_WBP_Expandable_Rank_C) == 0x0014E8, "Member 'UWBP_Expandable_Rank_C::UberGraphFrame_WBP_Expandable_Rank_C' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, FortRankedViewModel) == 0x0014F0, "Member 'UWBP_Expandable_Rank_C::FortRankedViewModel' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, DynamicEntryBox) == 0x0014F8, "Member 'UWBP_Expandable_Rank_C::DynamicEntryBox' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, RadialDropShadow) == 0x001500, "Member 'UWBP_Expandable_Rank_C::RadialDropShadow' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, RankedUnranked_Switcher) == 0x001508, "Member 'UWBP_Expandable_Rank_C::RankedUnranked_Switcher' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, RankProgressBar) == 0x001510, "Member 'UWBP_Expandable_Rank_C::RankProgressBar' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, Text_RankName) == 0x001518, "Member 'UWBP_Expandable_Rank_C::Text_RankName' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, Text_ToNextRankPercent) == 0x001520, "Member 'UWBP_Expandable_Rank_C::Text_ToNextRankPercent' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, Text_Unranked) == 0x001528, "Member 'UWBP_Expandable_Rank_C::Text_Unranked' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, VerticalBox_RankInfo) == 0x001530, "Member 'UWBP_Expandable_Rank_C::VerticalBox_RankInfo' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, WBP_Habanero_Icon) == 0x001538, "Member 'UWBP_Expandable_Rank_C::WBP_Habanero_Icon' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, WBP_Habanero_ShieldSmall) == 0x001540, "Member 'UWBP_Expandable_Rank_C::WBP_Habanero_ShieldSmall' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, RectangleArray) == 0x001548, "Member 'UWBP_Expandable_Rank_C::RectangleArray' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, RectangleMap) == 0x001558, "Member 'UWBP_Expandable_Rank_C::RectangleMap' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, Rank_Type) == 0x0015A8, "Member 'UWBP_Expandable_Rank_C::Rank_Type' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, ProgressParameter) == 0x0015B8, "Member 'UWBP_Expandable_Rank_C::ProgressParameter' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, Played_Rank_Position) == 0x0015BC, "Member 'UWBP_Expandable_Rank_C::Played_Rank_Position' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, bIsUnreal) == 0x0015C0, "Member 'UWBP_Expandable_Rank_C::bIsUnreal' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, CurrentTierCategory) == 0x0015C1, "Member 'UWBP_Expandable_Rank_C::CurrentTierCategory' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, bIsUnranked) == 0x0015C2, "Member 'UWBP_Expandable_Rank_C::bIsUnranked' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, ProgressValue) == 0x0015C8, "Member 'UWBP_Expandable_Rank_C::ProgressValue' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, Is_Player_Ranked) == 0x0015D0, "Member 'UWBP_Expandable_Rank_C::Is_Player_Ranked' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, Is_Island_Ranked) == 0x0015D1, "Member 'UWBP_Expandable_Rank_C::Is_Island_Ranked' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, UnrealRankCapText) == 0x0015D8, "Member 'UWBP_Expandable_Rank_C::UnrealRankCapText' has a wrong offset!");
static_assert(offsetof(UWBP_Expandable_Rank_C, Has_Rank_Protection) == 0x0015F0, "Member 'UWBP_Expandable_Rank_C::Has_Rank_Protection' has a wrong offset!");

}

