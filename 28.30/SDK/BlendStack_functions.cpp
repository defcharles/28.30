#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlendStack

#include "Basic.hpp"

#include "BlendStack_classes.hpp"
#include "BlendStack_parameters.hpp"


namespace SDK
{

// Function BlendStack.BlendStackAnimNodeLibrary.BlendTo
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAnimUpdateContext               Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBlendStackAnimNodeReference     BlendStackNode                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimationTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMirrored                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BlendParameters                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WantedPlayRate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlendStackAnimNodeLibrary::BlendTo(const struct FAnimUpdateContext& Context, const struct FBlendStackAnimNodeReference& BlendStackNode, class UAnimationAsset* AnimationAsset, float AnimationTime, bool bLoop, bool bMirrored, float BlendTime, const struct FVector& BlendParameters, float WantedPlayRate)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("BlendTo");

	Params::BlendStackAnimNodeLibrary_BlendTo Parms{};

	Parms.Context = std::move(Context);
	Parms.BlendStackNode = std::move(BlendStackNode);
	Parms.AnimationAsset = AnimationAsset;
	Parms.AnimationTime = AnimationTime;
	Parms.bLoop = bLoop;
	Parms.bMirrored = bMirrored;
	Parms.BlendTime = BlendTime;
	Parms.BlendParameters = std::move(BlendParameters);
	Parms.WantedPlayRate = WantedPlayRate;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function BlendStack.BlendStackAnimNodeLibrary.ConvertToBlendStackNode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAnimNodeReferenceConversionResult      Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlendStackAnimNodeReference     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlendStackAnimNodeReference UBlendStackAnimNodeLibrary::ConvertToBlendStackNode(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ConvertToBlendStackNode");

	Params::BlendStackAnimNodeLibrary_ConvertToBlendStackNode Parms{};

	Parms.Node = std::move(Node);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function BlendStack.BlendStackAnimNodeLibrary.ConvertToBlendStackNodePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBlendStackAnimNodeReference     BlendStackNode                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlendStackAnimNodeLibrary::ConvertToBlendStackNodePure(const struct FAnimNodeReference& Node, struct FBlendStackAnimNodeReference* BlendStackNode, bool* Result)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ConvertToBlendStackNodePure");

	Params::BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure Parms{};

	Parms.Node = std::move(Node);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (BlendStackNode != nullptr)
		*BlendStackNode = std::move(Parms.BlendStackNode);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BlendStack.BlendStackAnimNodeLibrary.ForceBlendNextUpdate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlendStackAnimNodeReference     BlendStackNode                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBlendStackAnimNodeLibrary::ForceBlendNextUpdate(const struct FBlendStackAnimNodeReference& BlendStackNode)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("ForceBlendNextUpdate");

	Params::BlendStackAnimNodeLibrary_ForceBlendNextUpdate Parms{};

	Parms.BlendStackNode = std::move(BlendStackNode);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}

}

