#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioGameplayBehavior

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AudioGameplayBehavior_structs.hpp"


namespace SDK
{

// Class AudioGameplayBehavior.AudioGameplayBehavior
// 0x0058 (0x00F8 - 0x00A0)
class UAudioGameplayBehavior final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bKillOnSoundsFinished;                             // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickWhileStopped;                                 // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UAudioGameplayBehavior* sound)> OnAllSoundsFinished;                               // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FActiveVoice& Voice)> OnSoundFinished;                                   // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FActiveVoice>                   PlayingSounds;                                     // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UAudioComponentGroup*                   ComponentGroupOwner;                               // 0x00E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8[0x10];                                      // 0x00E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnFinished();
	void BP_OnGroupSet(class UAudioComponentGroup* SoundGroup);
	void BP_OnStart();
	void BP_OnStop();
	void BP_OnUnvirtualized();
	void BP_OnVirtualized();
	void DisableVirtualization();
	void EnableVirtualization();
	EAudioGameplayBehaviorPlayState GetPlayState();
	EAudioGameplayBehaviorPlayState GetStopState();
	void Kill();
	void PlayFrom(class UAudioComponentGroup* SoundGroup);
	struct FActiveVoice PlaySound(class USoundBase* sound, float InFadeInTime, float InTargetVolume, float InStartTime, bool bDisableAttenuation, const EAudioFaderCurve InFadeCurve, const struct FVector& InRelativeLocation, const struct FRotator& InRelativeRotation);
	void SetPlayState(EAudioGameplayBehaviorPlayState NewState);
	void Start();
	void Stop();
	void StopAllPlayingVoices(float InFadeOutTime);
	void StopById(const struct FPlayingId& ID, float InFadeOutTime, const EAudioFaderCurve InFadeCurve);
	void StopComponent(class UAudioComponent* Comp, float InFadeOutTime, const EAudioFaderCurve InFadeCurve);
	void StopSound(class USoundBase* sound, float InFadeOutTime, const EAudioFaderCurve InFadeCurve);
	void SubscribeToBoolParam(class FName ParamName, TDelegate<void(bool ParamValue)> Delegate);
	void SubscribeToEvent(class FName EventName, TDelegate<void(class FName& EventName)> Delegate);
	void SubscribeToStringParam(class FName ParamName, TDelegate<void(const class FString& Value)> Delegate);

	bool GetBoolParamValue(const class FName ParamName) const;
	float GetFloatParamValue(const class FName ParamName) const;
	class UAudioComponentGroup* GetSoundGroup() const;
	class FString GetStringParamValue(const class FName ParamName) const;
	bool IsPlayingAny() const;
	bool IsVirtualized() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioGameplayBehavior">();
	}
	static class UAudioGameplayBehavior* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioGameplayBehavior>();
	}
};
static_assert(alignof(UAudioGameplayBehavior) == 0x000008, "Wrong alignment on UAudioGameplayBehavior");
static_assert(sizeof(UAudioGameplayBehavior) == 0x0000F8, "Wrong size on UAudioGameplayBehavior");
static_assert(offsetof(UAudioGameplayBehavior, bKillOnSoundsFinished) == 0x0000A8, "Member 'UAudioGameplayBehavior::bKillOnSoundsFinished' has a wrong offset!");
static_assert(offsetof(UAudioGameplayBehavior, bTickWhileStopped) == 0x0000A9, "Member 'UAudioGameplayBehavior::bTickWhileStopped' has a wrong offset!");
static_assert(offsetof(UAudioGameplayBehavior, OnAllSoundsFinished) == 0x0000B0, "Member 'UAudioGameplayBehavior::OnAllSoundsFinished' has a wrong offset!");
static_assert(offsetof(UAudioGameplayBehavior, OnSoundFinished) == 0x0000C0, "Member 'UAudioGameplayBehavior::OnSoundFinished' has a wrong offset!");
static_assert(offsetof(UAudioGameplayBehavior, PlayingSounds) == 0x0000D0, "Member 'UAudioGameplayBehavior::PlayingSounds' has a wrong offset!");
static_assert(offsetof(UAudioGameplayBehavior, ComponentGroupOwner) == 0x0000E0, "Member 'UAudioGameplayBehavior::ComponentGroupOwner' has a wrong offset!");

}

