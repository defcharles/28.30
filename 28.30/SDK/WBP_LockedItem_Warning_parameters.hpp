#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LockedItem_Warning

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_LockedItem_Warning.WBP_LockedItem_Warning_C.ExecuteUbergraph_WBP_LockedItem_Warning
// 0x0130 (0x0130 - 0x0000)
struct WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_CustomEvent_InText;                         // 0x0018(0x0018)()
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_CustomEvent_InSize;                         // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Show_Icon;                      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0050(0x00C0)()
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_4;                           // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDeprecateSlateVector2D                K2Node_MakeStruct_ImageSize_ImplicitCast;          // 0x011C(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning) == 0x000010, "Wrong alignment on WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning");
static_assert(sizeof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning) == 0x000130, "Wrong size on WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, EntryPoint) == 0x000000, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_byte_Variable) == 0x000004, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_bool_Variable) == 0x000006, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_byte_Variable_2) == 0x000007, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_byte_Variable_3) == 0x000008, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_bool_Variable_1) == 0x000009, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_byte_Variable_4) == 0x00000A, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_Select_Default) == 0x00000B, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_byte_Variable_5) == 0x00000C, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_bool_Variable_2) == 0x00000D, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_real_Variable) == 0x000010, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_real_Variable_1) == 0x000014, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_CustomEvent_InText) == 0x000018, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_CustomEvent_InText' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_byte_Variable_6) == 0x000030, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000031, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_bool_Variable_3) == 0x000032, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_Event_IsDesignTime) == 0x000033, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, CallFunc_BooleanOR_ReturnValue) == 0x000034, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_byte_Variable_7) == 0x000035, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_Select_Default_1) == 0x000036, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_CustomEvent_InSize) == 0x000038, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_CustomEvent_InSize' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, Temp_bool_Variable_4) == 0x000048, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_Select_Default_2) == 0x000049, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_CustomEvent_Show_Icon) == 0x00004A, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_CustomEvent_Show_Icon' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_MakeStruct_SlateBrush) == 0x000050, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_Select_Default_3) == 0x000110, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_Select_Default_4) == 0x000114, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast) == 0x000118, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning, K2Node_MakeStruct_ImageSize_ImplicitCast) == 0x00011C, "Member 'WBP_LockedItem_Warning_C_ExecuteUbergraph_WBP_LockedItem_Warning::K2Node_MakeStruct_ImageSize_ImplicitCast' has a wrong offset!");

// Function WBP_LockedItem_Warning.WBP_LockedItem_Warning_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_LockedItem_Warning_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LockedItem_Warning_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_LockedItem_Warning_C_PreConstruct");
static_assert(sizeof(WBP_LockedItem_Warning_C_PreConstruct) == 0x000001, "Wrong size on WBP_LockedItem_Warning_C_PreConstruct");
static_assert(offsetof(WBP_LockedItem_Warning_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_LockedItem_Warning_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_LockedItem_Warning.WBP_LockedItem_Warning_C.SetDisclaimerText
// 0x0018 (0x0018 - 0x0000)
struct WBP_LockedItem_Warning_C_SetDisclaimerText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_LockedItem_Warning_C_SetDisclaimerText) == 0x000008, "Wrong alignment on WBP_LockedItem_Warning_C_SetDisclaimerText");
static_assert(sizeof(WBP_LockedItem_Warning_C_SetDisclaimerText) == 0x000018, "Wrong size on WBP_LockedItem_Warning_C_SetDisclaimerText");
static_assert(offsetof(WBP_LockedItem_Warning_C_SetDisclaimerText, InText) == 0x000000, "Member 'WBP_LockedItem_Warning_C_SetDisclaimerText::InText' has a wrong offset!");

// Function WBP_LockedItem_Warning.WBP_LockedItem_Warning_C.SetIconSize
// 0x0010 (0x0010 - 0x0000)
struct WBP_LockedItem_Warning_C_SetIconSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LockedItem_Warning_C_SetIconSize) == 0x000008, "Wrong alignment on WBP_LockedItem_Warning_C_SetIconSize");
static_assert(sizeof(WBP_LockedItem_Warning_C_SetIconSize) == 0x000010, "Wrong size on WBP_LockedItem_Warning_C_SetIconSize");
static_assert(offsetof(WBP_LockedItem_Warning_C_SetIconSize, InSize) == 0x000000, "Member 'WBP_LockedItem_Warning_C_SetIconSize::InSize' has a wrong offset!");

// Function WBP_LockedItem_Warning.WBP_LockedItem_Warning_C.SetShowIcon
// 0x0001 (0x0001 - 0x0000)
struct WBP_LockedItem_Warning_C_SetShowIcon final
{
public:
	bool                                          Show_Icon;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_LockedItem_Warning_C_SetShowIcon) == 0x000001, "Wrong alignment on WBP_LockedItem_Warning_C_SetShowIcon");
static_assert(sizeof(WBP_LockedItem_Warning_C_SetShowIcon) == 0x000001, "Wrong size on WBP_LockedItem_Warning_C_SetShowIcon");
static_assert(offsetof(WBP_LockedItem_Warning_C_SetShowIcon, Show_Icon) == 0x000000, "Member 'WBP_LockedItem_Warning_C_SetShowIcon::Show_Icon' has a wrong offset!");

}

