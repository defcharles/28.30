#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarUI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DelMarUI_structs.hpp"
#include "DelMarCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function DelMarUI.DelMarUserWidget.BP_Hide
// 0x0001 (0x0001 - 0x0000)
struct DelMarUserWidget_BP_Hide final
{
public:
	bool                                          bSkipAnimation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUserWidget_BP_Hide) == 0x000001, "Wrong alignment on DelMarUserWidget_BP_Hide");
static_assert(sizeof(DelMarUserWidget_BP_Hide) == 0x000001, "Wrong size on DelMarUserWidget_BP_Hide");
static_assert(offsetof(DelMarUserWidget_BP_Hide, bSkipAnimation) == 0x000000, "Member 'DelMarUserWidget_BP_Hide::bSkipAnimation' has a wrong offset!");

// Function DelMarUI.DelMarUserWidget.BP_Show
// 0x0001 (0x0001 - 0x0000)
struct DelMarUserWidget_BP_Show final
{
public:
	bool                                          bSkipAnimation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUserWidget_BP_Show) == 0x000001, "Wrong alignment on DelMarUserWidget_BP_Show");
static_assert(sizeof(DelMarUserWidget_BP_Show) == 0x000001, "Wrong size on DelMarUserWidget_BP_Show");
static_assert(offsetof(DelMarUserWidget_BP_Show, bSkipAnimation) == 0x000000, "Member 'DelMarUserWidget_BP_Show::bSkipAnimation' has a wrong offset!");

// Function DelMarUI.DelMarUserWidget.GetUIStateChartManager
// 0x0008 (0x0008 - 0x0000)
struct DelMarUserWidget_GetUIStateChartManager final
{
public:
	class UUIStateChartManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUserWidget_GetUIStateChartManager) == 0x000008, "Wrong alignment on DelMarUserWidget_GetUIStateChartManager");
static_assert(sizeof(DelMarUserWidget_GetUIStateChartManager) == 0x000008, "Wrong size on DelMarUserWidget_GetUIStateChartManager");
static_assert(offsetof(DelMarUserWidget_GetUIStateChartManager, ReturnValue) == 0x000000, "Member 'DelMarUserWidget_GetUIStateChartManager::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarUserWidget.HandleWidgetTransitionerStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarUserWidget_HandleWidgetTransitionerStatusChanged final
{
public:
	class UWidgetTransitioner*                    InTransitioner;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetTransitionerStatus                     InStatus;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarUserWidget_HandleWidgetTransitionerStatusChanged) == 0x000008, "Wrong alignment on DelMarUserWidget_HandleWidgetTransitionerStatusChanged");
static_assert(sizeof(DelMarUserWidget_HandleWidgetTransitionerStatusChanged) == 0x000010, "Wrong size on DelMarUserWidget_HandleWidgetTransitionerStatusChanged");
static_assert(offsetof(DelMarUserWidget_HandleWidgetTransitionerStatusChanged, InTransitioner) == 0x000000, "Member 'DelMarUserWidget_HandleWidgetTransitionerStatusChanged::InTransitioner' has a wrong offset!");
static_assert(offsetof(DelMarUserWidget_HandleWidgetTransitionerStatusChanged, InStatus) == 0x000008, "Member 'DelMarUserWidget_HandleWidgetTransitionerStatusChanged::InStatus' has a wrong offset!");

// Function DelMarUI.DelMarUserWidget.SetDisplayEnabled
// 0x0002 (0x0002 - 0x0000)
struct DelMarUserWidget_SetDisplayEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipAnimation;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUserWidget_SetDisplayEnabled) == 0x000001, "Wrong alignment on DelMarUserWidget_SetDisplayEnabled");
static_assert(sizeof(DelMarUserWidget_SetDisplayEnabled) == 0x000002, "Wrong size on DelMarUserWidget_SetDisplayEnabled");
static_assert(offsetof(DelMarUserWidget_SetDisplayEnabled, bEnabled) == 0x000000, "Member 'DelMarUserWidget_SetDisplayEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(DelMarUserWidget_SetDisplayEnabled, bSkipAnimation) == 0x000001, "Member 'DelMarUserWidget_SetDisplayEnabled::bSkipAnimation' has a wrong offset!");

// Function DelMarUI.DelMarUserWidget.GetWidgetTransitioner
// 0x0008 (0x0008 - 0x0000)
struct DelMarUserWidget_GetWidgetTransitioner final
{
public:
	class UWidgetTransitioner*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUserWidget_GetWidgetTransitioner) == 0x000008, "Wrong alignment on DelMarUserWidget_GetWidgetTransitioner");
static_assert(sizeof(DelMarUserWidget_GetWidgetTransitioner) == 0x000008, "Wrong size on DelMarUserWidget_GetWidgetTransitioner");
static_assert(offsetof(DelMarUserWidget_GetWidgetTransitioner, ReturnValue) == 0x000000, "Member 'DelMarUserWidget_GetWidgetTransitioner::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarUserWidget.IsDisplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarUserWidget_IsDisplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUserWidget_IsDisplayEnabled) == 0x000001, "Wrong alignment on DelMarUserWidget_IsDisplayEnabled");
static_assert(sizeof(DelMarUserWidget_IsDisplayEnabled) == 0x000001, "Wrong size on DelMarUserWidget_IsDisplayEnabled");
static_assert(offsetof(DelMarUserWidget_IsDisplayEnabled, ReturnValue) == 0x000000, "Member 'DelMarUserWidget_IsDisplayEnabled::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarCountdownTimerWidget.SetInitialCountdownTime
// 0x0008 (0x0008 - 0x0000)
struct DelMarCountdownTimerWidget_SetInitialCountdownTime final
{
public:
	double                                        InTime;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCountdownTimerWidget_SetInitialCountdownTime) == 0x000008, "Wrong alignment on DelMarCountdownTimerWidget_SetInitialCountdownTime");
static_assert(sizeof(DelMarCountdownTimerWidget_SetInitialCountdownTime) == 0x000008, "Wrong size on DelMarCountdownTimerWidget_SetInitialCountdownTime");
static_assert(offsetof(DelMarCountdownTimerWidget_SetInitialCountdownTime, InTime) == 0x000000, "Member 'DelMarCountdownTimerWidget_SetInitialCountdownTime::InTime' has a wrong offset!");

// Function DelMarUI.DelMarCountdownTimerWidget.GetTimeRemainingSeconds
// 0x0008 (0x0008 - 0x0000)
struct DelMarCountdownTimerWidget_GetTimeRemainingSeconds final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCountdownTimerWidget_GetTimeRemainingSeconds) == 0x000008, "Wrong alignment on DelMarCountdownTimerWidget_GetTimeRemainingSeconds");
static_assert(sizeof(DelMarCountdownTimerWidget_GetTimeRemainingSeconds) == 0x000008, "Wrong size on DelMarCountdownTimerWidget_GetTimeRemainingSeconds");
static_assert(offsetof(DelMarCountdownTimerWidget_GetTimeRemainingSeconds, ReturnValue) == 0x000000, "Member 'DelMarCountdownTimerWidget_GetTimeRemainingSeconds::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarDriverCameraWidget.GetAnimationNames
// 0x0010 (0x0010 - 0x0000)
struct DelMarDriverCameraWidget_GetAnimationNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverCameraWidget_GetAnimationNames) == 0x000008, "Wrong alignment on DelMarDriverCameraWidget_GetAnimationNames");
static_assert(sizeof(DelMarDriverCameraWidget_GetAnimationNames) == 0x000010, "Wrong size on DelMarDriverCameraWidget_GetAnimationNames");
static_assert(offsetof(DelMarDriverCameraWidget_GetAnimationNames, ReturnValue) == 0x000000, "Member 'DelMarDriverCameraWidget_GetAnimationNames::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarListViewModel.GetElementAt
// 0x0010 (0x0010 - 0x0000)
struct DelMarListViewModel_GetElementAt final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMVVMViewModelBase*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarListViewModel_GetElementAt) == 0x000008, "Wrong alignment on DelMarListViewModel_GetElementAt");
static_assert(sizeof(DelMarListViewModel_GetElementAt) == 0x000010, "Wrong size on DelMarListViewModel_GetElementAt");
static_assert(offsetof(DelMarListViewModel_GetElementAt, InIndex) == 0x000000, "Member 'DelMarListViewModel_GetElementAt::InIndex' has a wrong offset!");
static_assert(offsetof(DelMarListViewModel_GetElementAt, ReturnValue) == 0x000008, "Member 'DelMarListViewModel_GetElementAt::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarListViewModel.GetElements
// 0x0010 (0x0010 - 0x0000)
struct DelMarListViewModel_GetElements final
{
public:
	TArray<class UMVVMViewModelBase*>             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarListViewModel_GetElements) == 0x000008, "Wrong alignment on DelMarListViewModel_GetElements");
static_assert(sizeof(DelMarListViewModel_GetElements) == 0x000010, "Wrong size on DelMarListViewModel_GetElements");
static_assert(offsetof(DelMarListViewModel_GetElements, ReturnValue) == 0x000000, "Member 'DelMarListViewModel_GetElements::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarPlayerIndicatorsContainer.HandleIconOnlySettingChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayerIndicatorsContainer_HandleIconOnlySettingChanged final
{
public:
	bool                                          bUseIconOnly;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerIndicatorsContainer_HandleIconOnlySettingChanged) == 0x000001, "Wrong alignment on DelMarPlayerIndicatorsContainer_HandleIconOnlySettingChanged");
static_assert(sizeof(DelMarPlayerIndicatorsContainer_HandleIconOnlySettingChanged) == 0x000001, "Wrong size on DelMarPlayerIndicatorsContainer_HandleIconOnlySettingChanged");
static_assert(offsetof(DelMarPlayerIndicatorsContainer_HandleIconOnlySettingChanged, bUseIconOnly) == 0x000000, "Member 'DelMarPlayerIndicatorsContainer_HandleIconOnlySettingChanged::bUseIconOnly' has a wrong offset!");

// Function DelMarUI.DelMarPlayerIndicatorsContainer.HandleRacePlayersChanged
// 0x0050 (0x0050 - 0x0000)
struct DelMarPlayerIndicatorsContainer_HandleRacePlayersChanged final
{
public:
	TMap<int32, class UDelMarPlayerViewModel*>    RacePlayers;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerIndicatorsContainer_HandleRacePlayersChanged) == 0x000008, "Wrong alignment on DelMarPlayerIndicatorsContainer_HandleRacePlayersChanged");
static_assert(sizeof(DelMarPlayerIndicatorsContainer_HandleRacePlayersChanged) == 0x000050, "Wrong size on DelMarPlayerIndicatorsContainer_HandleRacePlayersChanged");
static_assert(offsetof(DelMarPlayerIndicatorsContainer_HandleRacePlayersChanged, RacePlayers) == 0x000000, "Member 'DelMarPlayerIndicatorsContainer_HandleRacePlayersChanged::RacePlayers' has a wrong offset!");

// Function DelMarUI.DelMarPlayerIndicatorsContainer.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarPlayerIndicatorsContainer_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerIndicatorsContainer_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarPlayerIndicatorsContainer_HandleViewTargetChanged");
static_assert(sizeof(DelMarPlayerIndicatorsContainer_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarPlayerIndicatorsContainer_HandleViewTargetChanged");
static_assert(offsetof(DelMarPlayerIndicatorsContainer_HandleViewTargetChanged, InController) == 0x000000, "Member 'DelMarPlayerIndicatorsContainer_HandleViewTargetChanged::InController' has a wrong offset!");
static_assert(offsetof(DelMarPlayerIndicatorsContainer_HandleViewTargetChanged, OldViewTarget) == 0x000008, "Member 'DelMarPlayerIndicatorsContainer_HandleViewTargetChanged::OldViewTarget' has a wrong offset!");
static_assert(offsetof(DelMarPlayerIndicatorsContainer_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarPlayerIndicatorsContainer_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarUI.DelMarPlayerIndicatorWidget.BP_SetViewModel
// 0x0008 (0x0008 - 0x0000)
struct DelMarPlayerIndicatorWidget_BP_SetViewModel final
{
public:
	class UDelMarPlayerViewModel*                 ViewModel;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerIndicatorWidget_BP_SetViewModel) == 0x000008, "Wrong alignment on DelMarPlayerIndicatorWidget_BP_SetViewModel");
static_assert(sizeof(DelMarPlayerIndicatorWidget_BP_SetViewModel) == 0x000008, "Wrong size on DelMarPlayerIndicatorWidget_BP_SetViewModel");
static_assert(offsetof(DelMarPlayerIndicatorWidget_BP_SetViewModel, ViewModel) == 0x000000, "Member 'DelMarPlayerIndicatorWidget_BP_SetViewModel::ViewModel' has a wrong offset!");

// Function DelMarUI.DelMarPlayerIndicatorWidget.BP_UpdateIndicator
// 0x000C (0x000C - 0x0000)
struct DelMarPlayerIndicatorWidget_BP_UpdateIndicator final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Opacity;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRearIndicator;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarRearAlertVerticalHint                  VerticalHint;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarPlayerIndicatorWidget_BP_UpdateIndicator) == 0x000004, "Wrong alignment on DelMarPlayerIndicatorWidget_BP_UpdateIndicator");
static_assert(sizeof(DelMarPlayerIndicatorWidget_BP_UpdateIndicator) == 0x00000C, "Wrong size on DelMarPlayerIndicatorWidget_BP_UpdateIndicator");
static_assert(offsetof(DelMarPlayerIndicatorWidget_BP_UpdateIndicator, Scale) == 0x000000, "Member 'DelMarPlayerIndicatorWidget_BP_UpdateIndicator::Scale' has a wrong offset!");
static_assert(offsetof(DelMarPlayerIndicatorWidget_BP_UpdateIndicator, Opacity) == 0x000004, "Member 'DelMarPlayerIndicatorWidget_BP_UpdateIndicator::Opacity' has a wrong offset!");
static_assert(offsetof(DelMarPlayerIndicatorWidget_BP_UpdateIndicator, bRearIndicator) == 0x000008, "Member 'DelMarPlayerIndicatorWidget_BP_UpdateIndicator::bRearIndicator' has a wrong offset!");
static_assert(offsetof(DelMarPlayerIndicatorWidget_BP_UpdateIndicator, VerticalHint) == 0x000009, "Member 'DelMarPlayerIndicatorWidget_BP_UpdateIndicator::VerticalHint' has a wrong offset!");

// Function DelMarUI.DelMarExpandableHudWidget.BP_HandlePlayerPreferencesAdded
// 0x0008 (0x0008 - 0x0000)
struct DelMarExpandableHudWidget_BP_HandlePlayerPreferencesAdded final
{
public:
	class UDelMarPlayerPreferencesComponent*      InPlayerPreferences;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarExpandableHudWidget_BP_HandlePlayerPreferencesAdded) == 0x000008, "Wrong alignment on DelMarExpandableHudWidget_BP_HandlePlayerPreferencesAdded");
static_assert(sizeof(DelMarExpandableHudWidget_BP_HandlePlayerPreferencesAdded) == 0x000008, "Wrong size on DelMarExpandableHudWidget_BP_HandlePlayerPreferencesAdded");
static_assert(offsetof(DelMarExpandableHudWidget_BP_HandlePlayerPreferencesAdded, InPlayerPreferences) == 0x000000, "Member 'DelMarExpandableHudWidget_BP_HandlePlayerPreferencesAdded::InPlayerPreferences' has a wrong offset!");

// Function DelMarUI.DelMarExpandableHudWidget.HandleToggleSettingChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarExpandableHudWidget_HandleToggleSettingChanged final
{
public:
	bool                                          bUseToggle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarExpandableHudWidget_HandleToggleSettingChanged) == 0x000001, "Wrong alignment on DelMarExpandableHudWidget_HandleToggleSettingChanged");
static_assert(sizeof(DelMarExpandableHudWidget_HandleToggleSettingChanged) == 0x000001, "Wrong size on DelMarExpandableHudWidget_HandleToggleSettingChanged");
static_assert(offsetof(DelMarExpandableHudWidget_HandleToggleSettingChanged, bUseToggle) == 0x000000, "Member 'DelMarExpandableHudWidget_HandleToggleSettingChanged::bUseToggle' has a wrong offset!");

// Function DelMarUI.DelMarExpandableHudWidget.SetTargetInterpTransformY
// 0x0004 (0x0004 - 0x0000)
struct DelMarExpandableHudWidget_SetTargetInterpTransformY final
{
public:
	float                                         InTargetInterpTransformY;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarExpandableHudWidget_SetTargetInterpTransformY) == 0x000004, "Wrong alignment on DelMarExpandableHudWidget_SetTargetInterpTransformY");
static_assert(sizeof(DelMarExpandableHudWidget_SetTargetInterpTransformY) == 0x000004, "Wrong size on DelMarExpandableHudWidget_SetTargetInterpTransformY");
static_assert(offsetof(DelMarExpandableHudWidget_SetTargetInterpTransformY, InTargetInterpTransformY) == 0x000000, "Member 'DelMarExpandableHudWidget_SetTargetInterpTransformY::InTargetInterpTransformY' has a wrong offset!");

// Function DelMarUI.DelMarPositionalTrackerWidget.UpdatePlayerPositions
// 0x0010 (0x0010 - 0x0000)
struct DelMarPositionalTrackerWidget_UpdatePlayerPositions final
{
public:
	TArray<class UDelMarPlayerViewModel*>         InPlayers;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPositionalTrackerWidget_UpdatePlayerPositions) == 0x000008, "Wrong alignment on DelMarPositionalTrackerWidget_UpdatePlayerPositions");
static_assert(sizeof(DelMarPositionalTrackerWidget_UpdatePlayerPositions) == 0x000010, "Wrong size on DelMarPositionalTrackerWidget_UpdatePlayerPositions");
static_assert(offsetof(DelMarPositionalTrackerWidget_UpdatePlayerPositions, InPlayers) == 0x000000, "Member 'DelMarPositionalTrackerWidget_UpdatePlayerPositions::InPlayers' has a wrong offset!");

// Function DelMarUI.DelMarScreenBase.BP_Hide
// 0x0001 (0x0001 - 0x0000)
struct DelMarScreenBase_BP_Hide final
{
public:
	bool                                          bSkipAnimation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarScreenBase_BP_Hide) == 0x000001, "Wrong alignment on DelMarScreenBase_BP_Hide");
static_assert(sizeof(DelMarScreenBase_BP_Hide) == 0x000001, "Wrong size on DelMarScreenBase_BP_Hide");
static_assert(offsetof(DelMarScreenBase_BP_Hide, bSkipAnimation) == 0x000000, "Member 'DelMarScreenBase_BP_Hide::bSkipAnimation' has a wrong offset!");

// Function DelMarUI.DelMarScreenBase.BP_Show
// 0x0001 (0x0001 - 0x0000)
struct DelMarScreenBase_BP_Show final
{
public:
	bool                                          bSkipAnimation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarScreenBase_BP_Show) == 0x000001, "Wrong alignment on DelMarScreenBase_BP_Show");
static_assert(sizeof(DelMarScreenBase_BP_Show) == 0x000001, "Wrong size on DelMarScreenBase_BP_Show");
static_assert(offsetof(DelMarScreenBase_BP_Show, bSkipAnimation) == 0x000000, "Member 'DelMarScreenBase_BP_Show::bSkipAnimation' has a wrong offset!");

// Function DelMarUI.DelMarScreenBase.GetUIStateChartManager
// 0x0008 (0x0008 - 0x0000)
struct DelMarScreenBase_GetUIStateChartManager final
{
public:
	class UUIStateChartManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarScreenBase_GetUIStateChartManager) == 0x000008, "Wrong alignment on DelMarScreenBase_GetUIStateChartManager");
static_assert(sizeof(DelMarScreenBase_GetUIStateChartManager) == 0x000008, "Wrong size on DelMarScreenBase_GetUIStateChartManager");
static_assert(offsetof(DelMarScreenBase_GetUIStateChartManager, ReturnValue) == 0x000000, "Member 'DelMarScreenBase_GetUIStateChartManager::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarScreenBase.HandleWidgetTransitionerStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarScreenBase_HandleWidgetTransitionerStatusChanged final
{
public:
	class UWidgetTransitioner*                    InTransitioner;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetTransitionerStatus                     InStatus;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarScreenBase_HandleWidgetTransitionerStatusChanged) == 0x000008, "Wrong alignment on DelMarScreenBase_HandleWidgetTransitionerStatusChanged");
static_assert(sizeof(DelMarScreenBase_HandleWidgetTransitionerStatusChanged) == 0x000010, "Wrong size on DelMarScreenBase_HandleWidgetTransitionerStatusChanged");
static_assert(offsetof(DelMarScreenBase_HandleWidgetTransitionerStatusChanged, InTransitioner) == 0x000000, "Member 'DelMarScreenBase_HandleWidgetTransitionerStatusChanged::InTransitioner' has a wrong offset!");
static_assert(offsetof(DelMarScreenBase_HandleWidgetTransitionerStatusChanged, InStatus) == 0x000008, "Member 'DelMarScreenBase_HandleWidgetTransitionerStatusChanged::InStatus' has a wrong offset!");

// Function DelMarUI.DelMarScreenBase.SetDisplayEnabled
// 0x0002 (0x0002 - 0x0000)
struct DelMarScreenBase_SetDisplayEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipAnimation;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarScreenBase_SetDisplayEnabled) == 0x000001, "Wrong alignment on DelMarScreenBase_SetDisplayEnabled");
static_assert(sizeof(DelMarScreenBase_SetDisplayEnabled) == 0x000002, "Wrong size on DelMarScreenBase_SetDisplayEnabled");
static_assert(offsetof(DelMarScreenBase_SetDisplayEnabled, bEnabled) == 0x000000, "Member 'DelMarScreenBase_SetDisplayEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(DelMarScreenBase_SetDisplayEnabled, bSkipAnimation) == 0x000001, "Member 'DelMarScreenBase_SetDisplayEnabled::bSkipAnimation' has a wrong offset!");

// Function DelMarUI.DelMarScreenBase.GetWidgetTransitioner
// 0x0008 (0x0008 - 0x0000)
struct DelMarScreenBase_GetWidgetTransitioner final
{
public:
	class UWidgetTransitioner*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarScreenBase_GetWidgetTransitioner) == 0x000008, "Wrong alignment on DelMarScreenBase_GetWidgetTransitioner");
static_assert(sizeof(DelMarScreenBase_GetWidgetTransitioner) == 0x000008, "Wrong size on DelMarScreenBase_GetWidgetTransitioner");
static_assert(offsetof(DelMarScreenBase_GetWidgetTransitioner, ReturnValue) == 0x000000, "Member 'DelMarScreenBase_GetWidgetTransitioner::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarScreenBase.IsDisplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarScreenBase_IsDisplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarScreenBase_IsDisplayEnabled) == 0x000001, "Wrong alignment on DelMarScreenBase_IsDisplayEnabled");
static_assert(sizeof(DelMarScreenBase_IsDisplayEnabled) == 0x000001, "Wrong size on DelMarScreenBase_IsDisplayEnabled");
static_assert(offsetof(DelMarScreenBase_IsDisplayEnabled, ReturnValue) == 0x000000, "Member 'DelMarScreenBase_IsDisplayEnabled::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarPostRaceScreen.BP_OnReadyUpChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarPostRaceScreen_BP_OnReadyUpChanged final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPostRaceScreen_BP_OnReadyUpChanged) == 0x000001, "Wrong alignment on DelMarPostRaceScreen_BP_OnReadyUpChanged");
static_assert(sizeof(DelMarPostRaceScreen_BP_OnReadyUpChanged) == 0x000001, "Wrong size on DelMarPostRaceScreen_BP_OnReadyUpChanged");
static_assert(offsetof(DelMarPostRaceScreen_BP_OnReadyUpChanged, bReady) == 0x000000, "Member 'DelMarPostRaceScreen_BP_OnReadyUpChanged::bReady' has a wrong offset!");

// Function DelMarUI.DelMarPostRaceScreen.UpdateVote
// 0x0001 (0x0001 - 0x0000)
struct DelMarPostRaceScreen_UpdateVote final
{
public:
	EDelMarPostRaceVote                           NewVote;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPostRaceScreen_UpdateVote) == 0x000001, "Wrong alignment on DelMarPostRaceScreen_UpdateVote");
static_assert(sizeof(DelMarPostRaceScreen_UpdateVote) == 0x000001, "Wrong size on DelMarPostRaceScreen_UpdateVote");
static_assert(offsetof(DelMarPostRaceScreen_UpdateVote, NewVote) == 0x000000, "Member 'DelMarPostRaceScreen_UpdateVote::NewVote' has a wrong offset!");

// Function DelMarUI.DelMarPostRaceVoteWidget.BP_OnPostRaceVoteChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarPostRaceVoteWidget_BP_OnPostRaceVoteChanged final
{
public:
	EDelMarPostRaceVote                           Vote;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPostRaceVoteWidget_BP_OnPostRaceVoteChanged) == 0x000001, "Wrong alignment on DelMarPostRaceVoteWidget_BP_OnPostRaceVoteChanged");
static_assert(sizeof(DelMarPostRaceVoteWidget_BP_OnPostRaceVoteChanged) == 0x000001, "Wrong size on DelMarPostRaceVoteWidget_BP_OnPostRaceVoteChanged");
static_assert(offsetof(DelMarPostRaceVoteWidget_BP_OnPostRaceVoteChanged, Vote) == 0x000000, "Member 'DelMarPostRaceVoteWidget_BP_OnPostRaceVoteChanged::Vote' has a wrong offset!");

// Function DelMarUI.DelMarPostRaceVoteWidget.UpdateVote
// 0x0001 (0x0001 - 0x0000)
struct DelMarPostRaceVoteWidget_UpdateVote final
{
public:
	EDelMarPostRaceVote                           NewVote;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPostRaceVoteWidget_UpdateVote) == 0x000001, "Wrong alignment on DelMarPostRaceVoteWidget_UpdateVote");
static_assert(sizeof(DelMarPostRaceVoteWidget_UpdateVote) == 0x000001, "Wrong size on DelMarPostRaceVoteWidget_UpdateVote");
static_assert(offsetof(DelMarPostRaceVoteWidget_UpdateVote, NewVote) == 0x000000, "Member 'DelMarPostRaceVoteWidget_UpdateVote::NewVote' has a wrong offset!");

// Function DelMarUI.DelMarRichTextInputSwitcher.SetInputText
// 0x0048 (0x0048 - 0x0000)
struct DelMarRichTextInputSwitcher_SetInputText final
{
public:
	class FText                                   InTextKBM;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   InTextGamepad;                                     // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   InTextTouch;                                       // 0x0030(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRichTextInputSwitcher_SetInputText) == 0x000008, "Wrong alignment on DelMarRichTextInputSwitcher_SetInputText");
static_assert(sizeof(DelMarRichTextInputSwitcher_SetInputText) == 0x000048, "Wrong size on DelMarRichTextInputSwitcher_SetInputText");
static_assert(offsetof(DelMarRichTextInputSwitcher_SetInputText, InTextKBM) == 0x000000, "Member 'DelMarRichTextInputSwitcher_SetInputText::InTextKBM' has a wrong offset!");
static_assert(offsetof(DelMarRichTextInputSwitcher_SetInputText, InTextGamepad) == 0x000018, "Member 'DelMarRichTextInputSwitcher_SetInputText::InTextGamepad' has a wrong offset!");
static_assert(offsetof(DelMarRichTextInputSwitcher_SetInputText, InTextTouch) == 0x000030, "Member 'DelMarRichTextInputSwitcher_SetInputText::InTextTouch' has a wrong offset!");

// Function DelMarUI.DelMarSelectionListViewModel.SelectNextElement
// 0x0001 (0x0001 - 0x0000)
struct DelMarSelectionListViewModel_SelectNextElement final
{
public:
	bool                                          bAllowWrap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSelectionListViewModel_SelectNextElement) == 0x000001, "Wrong alignment on DelMarSelectionListViewModel_SelectNextElement");
static_assert(sizeof(DelMarSelectionListViewModel_SelectNextElement) == 0x000001, "Wrong size on DelMarSelectionListViewModel_SelectNextElement");
static_assert(offsetof(DelMarSelectionListViewModel_SelectNextElement, bAllowWrap) == 0x000000, "Member 'DelMarSelectionListViewModel_SelectNextElement::bAllowWrap' has a wrong offset!");

// Function DelMarUI.DelMarSelectionListViewModel.SelectPreviousElement
// 0x0001 (0x0001 - 0x0000)
struct DelMarSelectionListViewModel_SelectPreviousElement final
{
public:
	bool                                          bAllowWrap;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSelectionListViewModel_SelectPreviousElement) == 0x000001, "Wrong alignment on DelMarSelectionListViewModel_SelectPreviousElement");
static_assert(sizeof(DelMarSelectionListViewModel_SelectPreviousElement) == 0x000001, "Wrong size on DelMarSelectionListViewModel_SelectPreviousElement");
static_assert(offsetof(DelMarSelectionListViewModel_SelectPreviousElement, bAllowWrap) == 0x000000, "Member 'DelMarSelectionListViewModel_SelectPreviousElement::bAllowWrap' has a wrong offset!");

// Function DelMarUI.DelMarSelectionListViewModel.SetSelectedElement
// 0x0008 (0x0008 - 0x0000)
struct DelMarSelectionListViewModel_SetSelectedElement final
{
public:
	class UMVVMViewModelBase*                     InSelectedElement;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSelectionListViewModel_SetSelectedElement) == 0x000008, "Wrong alignment on DelMarSelectionListViewModel_SetSelectedElement");
static_assert(sizeof(DelMarSelectionListViewModel_SetSelectedElement) == 0x000008, "Wrong size on DelMarSelectionListViewModel_SetSelectedElement");
static_assert(offsetof(DelMarSelectionListViewModel_SetSelectedElement, InSelectedElement) == 0x000000, "Member 'DelMarSelectionListViewModel_SetSelectedElement::InSelectedElement' has a wrong offset!");

// Function DelMarUI.DelMarSelectionListViewModel.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct DelMarSelectionListViewModel_SetSelectedIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSelectionListViewModel_SetSelectedIndex) == 0x000004, "Wrong alignment on DelMarSelectionListViewModel_SetSelectedIndex");
static_assert(sizeof(DelMarSelectionListViewModel_SetSelectedIndex) == 0x000004, "Wrong size on DelMarSelectionListViewModel_SetSelectedIndex");
static_assert(offsetof(DelMarSelectionListViewModel_SetSelectedIndex, InIndex) == 0x000000, "Member 'DelMarSelectionListViewModel_SetSelectedIndex::InIndex' has a wrong offset!");

// Function DelMarUI.DelMarSelectionListViewModel.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct DelMarSelectionListViewModel_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSelectionListViewModel_GetSelectedIndex) == 0x000004, "Wrong alignment on DelMarSelectionListViewModel_GetSelectedIndex");
static_assert(sizeof(DelMarSelectionListViewModel_GetSelectedIndex) == 0x000004, "Wrong size on DelMarSelectionListViewModel_GetSelectedIndex");
static_assert(offsetof(DelMarSelectionListViewModel_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'DelMarSelectionListViewModel_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarSelectionListViewModel.HasSelection
// 0x0001 (0x0001 - 0x0000)
struct DelMarSelectionListViewModel_HasSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSelectionListViewModel_HasSelection) == 0x000001, "Wrong alignment on DelMarSelectionListViewModel_HasSelection");
static_assert(sizeof(DelMarSelectionListViewModel_HasSelection) == 0x000001, "Wrong size on DelMarSelectionListViewModel_HasSelection");
static_assert(offsetof(DelMarSelectionListViewModel_HasSelection, ReturnValue) == 0x000000, "Member 'DelMarSelectionListViewModel_HasSelection::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarSelectionListViewModel.SelectedElement
// 0x0008 (0x0008 - 0x0000)
struct DelMarSelectionListViewModel_SelectedElement final
{
public:
	class UMVVMViewModelBase*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSelectionListViewModel_SelectedElement) == 0x000008, "Wrong alignment on DelMarSelectionListViewModel_SelectedElement");
static_assert(sizeof(DelMarSelectionListViewModel_SelectedElement) == 0x000008, "Wrong size on DelMarSelectionListViewModel_SelectedElement");
static_assert(offsetof(DelMarSelectionListViewModel_SelectedElement, ReturnValue) == 0x000000, "Member 'DelMarSelectionListViewModel_SelectedElement::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchWidgetBase.GetPixelsPerInch
// 0x0004 (0x0004 - 0x0000)
struct DelMarTouchWidgetBase_GetPixelsPerInch final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchWidgetBase_GetPixelsPerInch) == 0x000004, "Wrong alignment on DelMarTouchWidgetBase_GetPixelsPerInch");
static_assert(sizeof(DelMarTouchWidgetBase_GetPixelsPerInch) == 0x000004, "Wrong size on DelMarTouchWidgetBase_GetPixelsPerInch");
static_assert(offsetof(DelMarTouchWidgetBase_GetPixelsPerInch, ReturnValue) == 0x000000, "Member 'DelMarTouchWidgetBase_GetPixelsPerInch::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchWidgetBase.OnActiveInputModeChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarTouchWidgetBase_OnActiveInputModeChanged final
{
public:
	ECommonInputMode                              NewInputMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchWidgetBase_OnActiveInputModeChanged) == 0x000001, "Wrong alignment on DelMarTouchWidgetBase_OnActiveInputModeChanged");
static_assert(sizeof(DelMarTouchWidgetBase_OnActiveInputModeChanged) == 0x000001, "Wrong size on DelMarTouchWidgetBase_OnActiveInputModeChanged");
static_assert(offsetof(DelMarTouchWidgetBase_OnActiveInputModeChanged, NewInputMode) == 0x000000, "Member 'DelMarTouchWidgetBase_OnActiveInputModeChanged::NewInputMode' has a wrong offset!");

// Function DelMarUI.DelMarTouchWidgetBase.OnInputInjectionEnded
// 0x0080 (0x0080 - 0x0000)
struct DelMarTouchWidgetBase_OnInputInjectionEnded final
{
public:
	struct FPointerEvent                          InGestureEvent;                                    // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EDelMarInputInjectionState                    InInjectedState;                                   // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTouchWidgetBase_OnInputInjectionEnded) == 0x000008, "Wrong alignment on DelMarTouchWidgetBase_OnInputInjectionEnded");
static_assert(sizeof(DelMarTouchWidgetBase_OnInputInjectionEnded) == 0x000080, "Wrong size on DelMarTouchWidgetBase_OnInputInjectionEnded");
static_assert(offsetof(DelMarTouchWidgetBase_OnInputInjectionEnded, InGestureEvent) == 0x000000, "Member 'DelMarTouchWidgetBase_OnInputInjectionEnded::InGestureEvent' has a wrong offset!");
static_assert(offsetof(DelMarTouchWidgetBase_OnInputInjectionEnded, InInjectedState) == 0x000078, "Member 'DelMarTouchWidgetBase_OnInputInjectionEnded::InInjectedState' has a wrong offset!");

// Function DelMarUI.DelMarTouchWidgetBase.OnInputInjectionStarted
// 0x0080 (0x0080 - 0x0000)
struct DelMarTouchWidgetBase_OnInputInjectionStarted final
{
public:
	struct FPointerEvent                          InGestureEvent;                                    // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EDelMarInputInjectionState                    InInjectedState;                                   // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTouchWidgetBase_OnInputInjectionStarted) == 0x000008, "Wrong alignment on DelMarTouchWidgetBase_OnInputInjectionStarted");
static_assert(sizeof(DelMarTouchWidgetBase_OnInputInjectionStarted) == 0x000080, "Wrong size on DelMarTouchWidgetBase_OnInputInjectionStarted");
static_assert(offsetof(DelMarTouchWidgetBase_OnInputInjectionStarted, InGestureEvent) == 0x000000, "Member 'DelMarTouchWidgetBase_OnInputInjectionStarted::InGestureEvent' has a wrong offset!");
static_assert(offsetof(DelMarTouchWidgetBase_OnInputInjectionStarted, InInjectedState) == 0x000078, "Member 'DelMarTouchWidgetBase_OnInputInjectionStarted::InInjectedState' has a wrong offset!");

// Function DelMarUI.DelMarTouchWidgetBase.OnTrackedInputEnded
// 0x0080 (0x0080 - 0x0000)
struct DelMarTouchWidgetBase_OnTrackedInputEnded final
{
public:
	struct FPointerEvent                          InGestureEvent;                                    // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCancelled;                                        // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTouchWidgetBase_OnTrackedInputEnded) == 0x000008, "Wrong alignment on DelMarTouchWidgetBase_OnTrackedInputEnded");
static_assert(sizeof(DelMarTouchWidgetBase_OnTrackedInputEnded) == 0x000080, "Wrong size on DelMarTouchWidgetBase_OnTrackedInputEnded");
static_assert(offsetof(DelMarTouchWidgetBase_OnTrackedInputEnded, InGestureEvent) == 0x000000, "Member 'DelMarTouchWidgetBase_OnTrackedInputEnded::InGestureEvent' has a wrong offset!");
static_assert(offsetof(DelMarTouchWidgetBase_OnTrackedInputEnded, bCancelled) == 0x000078, "Member 'DelMarTouchWidgetBase_OnTrackedInputEnded::bCancelled' has a wrong offset!");

// Function DelMarUI.DelMarTouchWidgetBase.OnTrackedInputStarted
// 0x0078 (0x0078 - 0x0000)
struct DelMarTouchWidgetBase_OnTrackedInputStarted final
{
public:
	struct FPointerEvent                          InGestureEvent;                                    // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchWidgetBase_OnTrackedInputStarted) == 0x000008, "Wrong alignment on DelMarTouchWidgetBase_OnTrackedInputStarted");
static_assert(sizeof(DelMarTouchWidgetBase_OnTrackedInputStarted) == 0x000078, "Wrong size on DelMarTouchWidgetBase_OnTrackedInputStarted");
static_assert(offsetof(DelMarTouchWidgetBase_OnTrackedInputStarted, InGestureEvent) == 0x000000, "Member 'DelMarTouchWidgetBase_OnTrackedInputStarted::InGestureEvent' has a wrong offset!");

// Function DelMarUI.DelMarTouchWidgetBase.OnTrackedInputUpdated
// 0x0078 (0x0078 - 0x0000)
struct DelMarTouchWidgetBase_OnTrackedInputUpdated final
{
public:
	struct FPointerEvent                          InGestureEvent;                                    // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchWidgetBase_OnTrackedInputUpdated) == 0x000008, "Wrong alignment on DelMarTouchWidgetBase_OnTrackedInputUpdated");
static_assert(sizeof(DelMarTouchWidgetBase_OnTrackedInputUpdated) == 0x000078, "Wrong size on DelMarTouchWidgetBase_OnTrackedInputUpdated");
static_assert(offsetof(DelMarTouchWidgetBase_OnTrackedInputUpdated, InGestureEvent) == 0x000000, "Member 'DelMarTouchWidgetBase_OnTrackedInputUpdated::InGestureEvent' has a wrong offset!");

// Function DelMarUI.DelMarTouchWidgetBase.GetHitboxGeometry
// 0x0038 (0x0038 - 0x0000)
struct DelMarTouchWidgetBase_GetHitboxGeometry final
{
public:
	struct FGeometry                              ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchWidgetBase_GetHitboxGeometry) == 0x000004, "Wrong alignment on DelMarTouchWidgetBase_GetHitboxGeometry");
static_assert(sizeof(DelMarTouchWidgetBase_GetHitboxGeometry) == 0x000038, "Wrong size on DelMarTouchWidgetBase_GetHitboxGeometry");
static_assert(offsetof(DelMarTouchWidgetBase_GetHitboxGeometry, ReturnValue) == 0x000000, "Member 'DelMarTouchWidgetBase_GetHitboxGeometry::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchWidgetBase.IsGestureInsideHitbox
// 0x0080 (0x0080 - 0x0000)
struct DelMarTouchWidgetBase_IsGestureInsideHitbox final
{
public:
	struct FPointerEvent                          InGestureEvent;                                    // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTouchWidgetBase_IsGestureInsideHitbox) == 0x000008, "Wrong alignment on DelMarTouchWidgetBase_IsGestureInsideHitbox");
static_assert(sizeof(DelMarTouchWidgetBase_IsGestureInsideHitbox) == 0x000080, "Wrong size on DelMarTouchWidgetBase_IsGestureInsideHitbox");
static_assert(offsetof(DelMarTouchWidgetBase_IsGestureInsideHitbox, InGestureEvent) == 0x000000, "Member 'DelMarTouchWidgetBase_IsGestureInsideHitbox::InGestureEvent' has a wrong offset!");
static_assert(offsetof(DelMarTouchWidgetBase_IsGestureInsideHitbox, ReturnValue) == 0x000078, "Member 'DelMarTouchWidgetBase_IsGestureInsideHitbox::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchActionButton.CanSetState
// 0x0002 (0x0002 - 0x0000)
struct DelMarTouchActionButton_CanSetState final
{
public:
	EDelMarTouchActionButtonState                 NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchActionButton_CanSetState) == 0x000001, "Wrong alignment on DelMarTouchActionButton_CanSetState");
static_assert(sizeof(DelMarTouchActionButton_CanSetState) == 0x000002, "Wrong size on DelMarTouchActionButton_CanSetState");
static_assert(offsetof(DelMarTouchActionButton_CanSetState, NewState) == 0x000000, "Member 'DelMarTouchActionButton_CanSetState::NewState' has a wrong offset!");
static_assert(offsetof(DelMarTouchActionButton_CanSetState, ReturnValue) == 0x000001, "Member 'DelMarTouchActionButton_CanSetState::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchActionButton.SetBackgroundBrush
// 0x00C0 (0x00C0 - 0x0000)
struct DelMarTouchActionButton_SetBackgroundBrush final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchActionButton_SetBackgroundBrush) == 0x000010, "Wrong alignment on DelMarTouchActionButton_SetBackgroundBrush");
static_assert(sizeof(DelMarTouchActionButton_SetBackgroundBrush) == 0x0000C0, "Wrong size on DelMarTouchActionButton_SetBackgroundBrush");
static_assert(offsetof(DelMarTouchActionButton_SetBackgroundBrush, Brush) == 0x000000, "Member 'DelMarTouchActionButton_SetBackgroundBrush::Brush' has a wrong offset!");

// Function DelMarUI.DelMarTouchActionButton.SetButtonState
// 0x0002 (0x0002 - 0x0000)
struct DelMarTouchActionButton_SetButtonState final
{
public:
	EDelMarTouchActionButtonState                 NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchActionButton_SetButtonState) == 0x000001, "Wrong alignment on DelMarTouchActionButton_SetButtonState");
static_assert(sizeof(DelMarTouchActionButton_SetButtonState) == 0x000002, "Wrong size on DelMarTouchActionButton_SetButtonState");
static_assert(offsetof(DelMarTouchActionButton_SetButtonState, NewState) == 0x000000, "Member 'DelMarTouchActionButton_SetButtonState::NewState' has a wrong offset!");
static_assert(offsetof(DelMarTouchActionButton_SetButtonState, ReturnValue) == 0x000001, "Member 'DelMarTouchActionButton_SetButtonState::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchActionButton.SetHighlightActive
// 0x0001 (0x0001 - 0x0000)
struct DelMarTouchActionButton_SetHighlightActive final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchActionButton_SetHighlightActive) == 0x000001, "Wrong alignment on DelMarTouchActionButton_SetHighlightActive");
static_assert(sizeof(DelMarTouchActionButton_SetHighlightActive) == 0x000001, "Wrong size on DelMarTouchActionButton_SetHighlightActive");
static_assert(offsetof(DelMarTouchActionButton_SetHighlightActive, bValue) == 0x000000, "Member 'DelMarTouchActionButton_SetHighlightActive::bValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchActionButton.SetIconBrush
// 0x00C0 (0x00C0 - 0x0000)
struct DelMarTouchActionButton_SetIconBrush final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchActionButton_SetIconBrush) == 0x000010, "Wrong alignment on DelMarTouchActionButton_SetIconBrush");
static_assert(sizeof(DelMarTouchActionButton_SetIconBrush) == 0x0000C0, "Wrong size on DelMarTouchActionButton_SetIconBrush");
static_assert(offsetof(DelMarTouchActionButton_SetIconBrush, Brush) == 0x000000, "Member 'DelMarTouchActionButton_SetIconBrush::Brush' has a wrong offset!");

// Function DelMarUI.DelMarTouchActionButton.GetState
// 0x0001 (0x0001 - 0x0000)
struct DelMarTouchActionButton_GetState final
{
public:
	EDelMarTouchActionButtonState                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchActionButton_GetState) == 0x000001, "Wrong alignment on DelMarTouchActionButton_GetState");
static_assert(sizeof(DelMarTouchActionButton_GetState) == 0x000001, "Wrong size on DelMarTouchActionButton_GetState");
static_assert(offsetof(DelMarTouchActionButton_GetState, ReturnValue) == 0x000000, "Member 'DelMarTouchActionButton_GetState::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchActionButton.GetStateOnStopInputTracking
// 0x0002 (0x0002 - 0x0000)
struct DelMarTouchActionButton_GetStateOnStopInputTracking final
{
public:
	bool                                          bInputCancelled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarTouchActionButtonState                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchActionButton_GetStateOnStopInputTracking) == 0x000001, "Wrong alignment on DelMarTouchActionButton_GetStateOnStopInputTracking");
static_assert(sizeof(DelMarTouchActionButton_GetStateOnStopInputTracking) == 0x000002, "Wrong size on DelMarTouchActionButton_GetStateOnStopInputTracking");
static_assert(offsetof(DelMarTouchActionButton_GetStateOnStopInputTracking, bInputCancelled) == 0x000000, "Member 'DelMarTouchActionButton_GetStateOnStopInputTracking::bInputCancelled' has a wrong offset!");
static_assert(offsetof(DelMarTouchActionButton_GetStateOnStopInputTracking, ReturnValue) == 0x000001, "Member 'DelMarTouchActionButton_GetStateOnStopInputTracking::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchRegion.FindButtonByInputAction
// 0x0010 (0x0010 - 0x0000)
struct DelMarTouchRegion_FindButtonByInputAction final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDelMarTouchActionButton*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchRegion_FindButtonByInputAction) == 0x000008, "Wrong alignment on DelMarTouchRegion_FindButtonByInputAction");
static_assert(sizeof(DelMarTouchRegion_FindButtonByInputAction) == 0x000010, "Wrong size on DelMarTouchRegion_FindButtonByInputAction");
static_assert(offsetof(DelMarTouchRegion_FindButtonByInputAction, InputAction) == 0x000000, "Member 'DelMarTouchRegion_FindButtonByInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(DelMarTouchRegion_FindButtonByInputAction, ReturnValue) == 0x000008, "Member 'DelMarTouchRegion_FindButtonByInputAction::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarTouchRegion.SetHighlightForInputAction
// 0x0008 (0x0008 - 0x0000)
struct DelMarTouchRegion_SetHighlightForInputAction final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTouchRegion_SetHighlightForInputAction) == 0x000008, "Wrong alignment on DelMarTouchRegion_SetHighlightForInputAction");
static_assert(sizeof(DelMarTouchRegion_SetHighlightForInputAction) == 0x000008, "Wrong size on DelMarTouchRegion_SetHighlightForInputAction");
static_assert(offsetof(DelMarTouchRegion_SetHighlightForInputAction, InputAction) == 0x000000, "Member 'DelMarTouchRegion_SetHighlightForInputAction::InputAction' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarAttachedWidgetSetEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarUICheatManager_DelMarAttachedWidgetSetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarAttachedWidgetSetEnabled) == 0x000001, "Wrong alignment on DelMarUICheatManager_DelMarAttachedWidgetSetEnabled");
static_assert(sizeof(DelMarUICheatManager_DelMarAttachedWidgetSetEnabled) == 0x000001, "Wrong size on DelMarUICheatManager_DelMarAttachedWidgetSetEnabled");
static_assert(offsetof(DelMarUICheatManager_DelMarAttachedWidgetSetEnabled, bEnabled) == 0x000000, "Member 'DelMarUICheatManager_DelMarAttachedWidgetSetEnabled::bEnabled' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarCheckpointDebugWidgetSetVisible
// 0x0001 (0x0001 - 0x0000)
struct DelMarUICheatManager_DelMarCheckpointDebugWidgetSetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarCheckpointDebugWidgetSetVisible) == 0x000001, "Wrong alignment on DelMarUICheatManager_DelMarCheckpointDebugWidgetSetVisible");
static_assert(sizeof(DelMarUICheatManager_DelMarCheckpointDebugWidgetSetVisible) == 0x000001, "Wrong size on DelMarUICheatManager_DelMarCheckpointDebugWidgetSetVisible");
static_assert(offsetof(DelMarUICheatManager_DelMarCheckpointDebugWidgetSetVisible, bVisible) == 0x000000, "Member 'DelMarUICheatManager_DelMarCheckpointDebugWidgetSetVisible::bVisible' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarDriverCameraSetHidden
// 0x0001 (0x0001 - 0x0000)
struct DelMarUICheatManager_DelMarDriverCameraSetHidden final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarDriverCameraSetHidden) == 0x000001, "Wrong alignment on DelMarUICheatManager_DelMarDriverCameraSetHidden");
static_assert(sizeof(DelMarUICheatManager_DelMarDriverCameraSetHidden) == 0x000001, "Wrong size on DelMarUICheatManager_DelMarDriverCameraSetHidden");
static_assert(offsetof(DelMarUICheatManager_DelMarDriverCameraSetHidden, bHidden) == 0x000000, "Member 'DelMarUICheatManager_DelMarDriverCameraSetHidden::bHidden' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarDriverCameraSetReactiveType
// 0x0004 (0x0004 - 0x0000)
struct DelMarUICheatManager_DelMarDriverCameraSetReactiveType final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarDriverCameraSetReactiveType) == 0x000004, "Wrong alignment on DelMarUICheatManager_DelMarDriverCameraSetReactiveType");
static_assert(sizeof(DelMarUICheatManager_DelMarDriverCameraSetReactiveType) == 0x000004, "Wrong size on DelMarUICheatManager_DelMarDriverCameraSetReactiveType");
static_assert(offsetof(DelMarUICheatManager_DelMarDriverCameraSetReactiveType, Type) == 0x000000, "Member 'DelMarUICheatManager_DelMarDriverCameraSetReactiveType::Type' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarMapNameDebugWidgetSetVisible
// 0x0001 (0x0001 - 0x0000)
struct DelMarUICheatManager_DelMarMapNameDebugWidgetSetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarMapNameDebugWidgetSetVisible) == 0x000001, "Wrong alignment on DelMarUICheatManager_DelMarMapNameDebugWidgetSetVisible");
static_assert(sizeof(DelMarUICheatManager_DelMarMapNameDebugWidgetSetVisible) == 0x000001, "Wrong size on DelMarUICheatManager_DelMarMapNameDebugWidgetSetVisible");
static_assert(offsetof(DelMarUICheatManager_DelMarMapNameDebugWidgetSetVisible, bVisible) == 0x000000, "Member 'DelMarUICheatManager_DelMarMapNameDebugWidgetSetVisible::bVisible' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarPlayerIndicatorsVisible
// 0x0001 (0x0001 - 0x0000)
struct DelMarUICheatManager_DelMarPlayerIndicatorsVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarPlayerIndicatorsVisible) == 0x000001, "Wrong alignment on DelMarUICheatManager_DelMarPlayerIndicatorsVisible");
static_assert(sizeof(DelMarUICheatManager_DelMarPlayerIndicatorsVisible) == 0x000001, "Wrong size on DelMarUICheatManager_DelMarPlayerIndicatorsVisible");
static_assert(offsetof(DelMarUICheatManager_DelMarPlayerIndicatorsVisible, bVisible) == 0x000000, "Member 'DelMarUICheatManager_DelMarPlayerIndicatorsVisible::bVisible' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarRequestDialogByTag
// 0x0004 (0x0004 - 0x0000)
struct DelMarUICheatManager_DelMarRequestDialogByTag final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarRequestDialogByTag) == 0x000004, "Wrong alignment on DelMarUICheatManager_DelMarRequestDialogByTag");
static_assert(sizeof(DelMarUICheatManager_DelMarRequestDialogByTag) == 0x000004, "Wrong size on DelMarUICheatManager_DelMarRequestDialogByTag");
static_assert(offsetof(DelMarUICheatManager_DelMarRequestDialogByTag, tag) == 0x000000, "Member 'DelMarUICheatManager_DelMarRequestDialogByTag::tag' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarRubberbandingWidgetSetVisible
// 0x0001 (0x0001 - 0x0000)
struct DelMarUICheatManager_DelMarRubberbandingWidgetSetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarRubberbandingWidgetSetVisible) == 0x000001, "Wrong alignment on DelMarUICheatManager_DelMarRubberbandingWidgetSetVisible");
static_assert(sizeof(DelMarUICheatManager_DelMarRubberbandingWidgetSetVisible) == 0x000001, "Wrong size on DelMarUICheatManager_DelMarRubberbandingWidgetSetVisible");
static_assert(offsetof(DelMarUICheatManager_DelMarRubberbandingWidgetSetVisible, bVisible) == 0x000000, "Member 'DelMarUICheatManager_DelMarRubberbandingWidgetSetVisible::bVisible' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarSetHint
// 0x0020 (0x0020 - 0x0000)
struct DelMarUICheatManager_DelMarSetHint final
{
public:
	class FText                                   HintText;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         RemoveAfterDelay;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarUICheatManager_DelMarSetHint) == 0x000008, "Wrong alignment on DelMarUICheatManager_DelMarSetHint");
static_assert(sizeof(DelMarUICheatManager_DelMarSetHint) == 0x000020, "Wrong size on DelMarUICheatManager_DelMarSetHint");
static_assert(offsetof(DelMarUICheatManager_DelMarSetHint, HintText) == 0x000000, "Member 'DelMarUICheatManager_DelMarSetHint::HintText' has a wrong offset!");
static_assert(offsetof(DelMarUICheatManager_DelMarSetHint, RemoveAfterDelay) == 0x000018, "Member 'DelMarUICheatManager_DelMarSetHint::RemoveAfterDelay' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarTouchHUD
// 0x0010 (0x0010 - 0x0000)
struct DelMarUICheatManager_DelMarTouchHUD final
{
public:
	class FString                                 TouchHUDType;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarTouchHUD) == 0x000008, "Wrong alignment on DelMarUICheatManager_DelMarTouchHUD");
static_assert(sizeof(DelMarUICheatManager_DelMarTouchHUD) == 0x000010, "Wrong size on DelMarUICheatManager_DelMarTouchHUD");
static_assert(offsetof(DelMarUICheatManager_DelMarTouchHUD, TouchHUDType) == 0x000000, "Member 'DelMarUICheatManager_DelMarTouchHUD::TouchHUDType' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarUISetVisible
// 0x0001 (0x0001 - 0x0000)
struct DelMarUICheatManager_DelMarUISetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarUISetVisible) == 0x000001, "Wrong alignment on DelMarUICheatManager_DelMarUISetVisible");
static_assert(sizeof(DelMarUICheatManager_DelMarUISetVisible) == 0x000001, "Wrong size on DelMarUICheatManager_DelMarUISetVisible");
static_assert(offsetof(DelMarUICheatManager_DelMarUISetVisible, bVisible) == 0x000000, "Member 'DelMarUICheatManager_DelMarUISetVisible::bVisible' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarUseToggleForExpandableHudWidget
// 0x0001 (0x0001 - 0x0000)
struct DelMarUICheatManager_DelMarUseToggleForExpandableHudWidget final
{
public:
	bool                                          bUseToggle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarUseToggleForExpandableHudWidget) == 0x000001, "Wrong alignment on DelMarUICheatManager_DelMarUseToggleForExpandableHudWidget");
static_assert(sizeof(DelMarUICheatManager_DelMarUseToggleForExpandableHudWidget) == 0x000001, "Wrong size on DelMarUICheatManager_DelMarUseToggleForExpandableHudWidget");
static_assert(offsetof(DelMarUICheatManager_DelMarUseToggleForExpandableHudWidget, bUseToggle) == 0x000000, "Member 'DelMarUICheatManager_DelMarUseToggleForExpandableHudWidget::bUseToggle' has a wrong offset!");

// Function DelMarUI.DelMarUICheatManager.DelMarVehicleDebugWidgetSetVisible
// 0x0001 (0x0001 - 0x0000)
struct DelMarUICheatManager_DelMarVehicleDebugWidgetSetVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUICheatManager_DelMarVehicleDebugWidgetSetVisible) == 0x000001, "Wrong alignment on DelMarUICheatManager_DelMarVehicleDebugWidgetSetVisible");
static_assert(sizeof(DelMarUICheatManager_DelMarVehicleDebugWidgetSetVisible) == 0x000001, "Wrong size on DelMarUICheatManager_DelMarVehicleDebugWidgetSetVisible");
static_assert(offsetof(DelMarUICheatManager_DelMarVehicleDebugWidgetSetVisible, bVisible) == 0x000000, "Member 'DelMarUICheatManager_DelMarVehicleDebugWidgetSetVisible::bVisible' has a wrong offset!");

// Function DelMarUI.UIAnimationController.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct UIAnimationController_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAnimationController_GetDuration) == 0x000004, "Wrong alignment on UIAnimationController_GetDuration");
static_assert(sizeof(UIAnimationController_GetDuration) == 0x000004, "Wrong size on UIAnimationController_GetDuration");
static_assert(offsetof(UIAnimationController_GetDuration, ReturnValue) == 0x000000, "Member 'UIAnimationController_GetDuration::ReturnValue' has a wrong offset!");

// Function DelMarUI.UIAnimationController.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct UIAnimationController_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAnimationController_IsPlaying) == 0x000001, "Wrong alignment on UIAnimationController_IsPlaying");
static_assert(sizeof(UIAnimationController_IsPlaying) == 0x000001, "Wrong size on UIAnimationController_IsPlaying");
static_assert(offsetof(UIAnimationController_IsPlaying, ReturnValue) == 0x000000, "Member 'UIAnimationController_IsPlaying::ReturnValue' has a wrong offset!");

// Function DelMarUI.UITimelineAnimationController.CreateInstance
// 0x0018 (0x0018 - 0x0000)
struct UITimelineAnimationController_CreateInstance final
{
public:
	class UUserWidget*                            WidgetTarget_0;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Animation_0;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUITimelineAnimationController*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITimelineAnimationController_CreateInstance) == 0x000008, "Wrong alignment on UITimelineAnimationController_CreateInstance");
static_assert(sizeof(UITimelineAnimationController_CreateInstance) == 0x000018, "Wrong size on UITimelineAnimationController_CreateInstance");
static_assert(offsetof(UITimelineAnimationController_CreateInstance, WidgetTarget_0) == 0x000000, "Member 'UITimelineAnimationController_CreateInstance::WidgetTarget_0' has a wrong offset!");
static_assert(offsetof(UITimelineAnimationController_CreateInstance, Animation_0) == 0x000008, "Member 'UITimelineAnimationController_CreateInstance::Animation_0' has a wrong offset!");
static_assert(offsetof(UITimelineAnimationController_CreateInstance, ReturnValue) == 0x000010, "Member 'UITimelineAnimationController_CreateInstance::ReturnValue' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.CreateInstance
// 0x0018 (0x0018 - 0x0000)
struct WidgetTransitioner_CreateInstance final
{
public:
	class UWidget*                                TargetWidget_0;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetTransitionerInitialStatus              InitialStatus;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              HiddenVisibility_0;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              ShownVisibility_0;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysReverseInterruptedAnimations;                // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetTransitioner*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetTransitioner_CreateInstance) == 0x000008, "Wrong alignment on WidgetTransitioner_CreateInstance");
static_assert(sizeof(WidgetTransitioner_CreateInstance) == 0x000018, "Wrong size on WidgetTransitioner_CreateInstance");
static_assert(offsetof(WidgetTransitioner_CreateInstance, TargetWidget_0) == 0x000000, "Member 'WidgetTransitioner_CreateInstance::TargetWidget_0' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_CreateInstance, InitialStatus) == 0x000008, "Member 'WidgetTransitioner_CreateInstance::InitialStatus' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_CreateInstance, HiddenVisibility_0) == 0x000009, "Member 'WidgetTransitioner_CreateInstance::HiddenVisibility_0' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_CreateInstance, ShownVisibility_0) == 0x00000A, "Member 'WidgetTransitioner_CreateInstance::ShownVisibility_0' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_CreateInstance, AlwaysReverseInterruptedAnimations) == 0x00000B, "Member 'WidgetTransitioner_CreateInstance::AlwaysReverseInterruptedAnimations' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_CreateInstance, ReturnValue) == 0x000010, "Member 'WidgetTransitioner_CreateInstance::ReturnValue' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.AddHintedTransitionIn
// 0x0018 (0x0018 - 0x0000)
struct WidgetTransitioner_AddHintedTransitionIn final
{
public:
	struct FGameplayTag                           InAnimationHint;                                   // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIAnimationController*                 InAnimationIn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTransitioner_AddHintedTransitionIn) == 0x000008, "Wrong alignment on WidgetTransitioner_AddHintedTransitionIn");
static_assert(sizeof(WidgetTransitioner_AddHintedTransitionIn) == 0x000018, "Wrong size on WidgetTransitioner_AddHintedTransitionIn");
static_assert(offsetof(WidgetTransitioner_AddHintedTransitionIn, InAnimationHint) == 0x000000, "Member 'WidgetTransitioner_AddHintedTransitionIn::InAnimationHint' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_AddHintedTransitionIn, InAnimationIn) == 0x000008, "Member 'WidgetTransitioner_AddHintedTransitionIn::InAnimationIn' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_AddHintedTransitionIn, bInvert) == 0x000010, "Member 'WidgetTransitioner_AddHintedTransitionIn::bInvert' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.AddHintedTransitionOut
// 0x0018 (0x0018 - 0x0000)
struct WidgetTransitioner_AddHintedTransitionOut final
{
public:
	struct FGameplayTag                           InAnimationHint;                                   // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIAnimationController*                 InAnimationOut;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTransitioner_AddHintedTransitionOut) == 0x000008, "Wrong alignment on WidgetTransitioner_AddHintedTransitionOut");
static_assert(sizeof(WidgetTransitioner_AddHintedTransitionOut) == 0x000018, "Wrong size on WidgetTransitioner_AddHintedTransitionOut");
static_assert(offsetof(WidgetTransitioner_AddHintedTransitionOut, InAnimationHint) == 0x000000, "Member 'WidgetTransitioner_AddHintedTransitionOut::InAnimationHint' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_AddHintedTransitionOut, InAnimationOut) == 0x000008, "Member 'WidgetTransitioner_AddHintedTransitionOut::InAnimationOut' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_AddHintedTransitionOut, bInvert) == 0x000010, "Member 'WidgetTransitioner_AddHintedTransitionOut::bInvert' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.AddHintedTransitionPair
// 0x0018 (0x0018 - 0x0000)
struct WidgetTransitioner_AddHintedTransitionPair final
{
public:
	struct FGameplayTag                           InAnimationHint;                                   // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIAnimationController*                 InAnimation;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTransitionIn;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTransitioner_AddHintedTransitionPair) == 0x000008, "Wrong alignment on WidgetTransitioner_AddHintedTransitionPair");
static_assert(sizeof(WidgetTransitioner_AddHintedTransitionPair) == 0x000018, "Wrong size on WidgetTransitioner_AddHintedTransitionPair");
static_assert(offsetof(WidgetTransitioner_AddHintedTransitionPair, InAnimationHint) == 0x000000, "Member 'WidgetTransitioner_AddHintedTransitionPair::InAnimationHint' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_AddHintedTransitionPair, InAnimation) == 0x000008, "Member 'WidgetTransitioner_AddHintedTransitionPair::InAnimation' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_AddHintedTransitionPair, bIsTransitionIn) == 0x000010, "Member 'WidgetTransitioner_AddHintedTransitionPair::bIsTransitionIn' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.BP_Hide
// 0x0028 (0x0028 - 0x0000)
struct WidgetTransitioner_BP_Hide final
{
public:
	bool                                          bSkipAnimation;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AnimationHints;                                    // 0x0008(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetTransitioner_BP_Hide) == 0x000008, "Wrong alignment on WidgetTransitioner_BP_Hide");
static_assert(sizeof(WidgetTransitioner_BP_Hide) == 0x000028, "Wrong size on WidgetTransitioner_BP_Hide");
static_assert(offsetof(WidgetTransitioner_BP_Hide, bSkipAnimation) == 0x000000, "Member 'WidgetTransitioner_BP_Hide::bSkipAnimation' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_BP_Hide, AnimationHints) == 0x000008, "Member 'WidgetTransitioner_BP_Hide::AnimationHints' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.BP_Initialize
// 0x0018 (0x0018 - 0x0000)
struct WidgetTransitioner_BP_Initialize final
{
public:
	class UWidget*                                TargetWidget_0;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetTransitionerInitialStatus              InitialStatus;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              HiddenVisibility_0;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              ShownVisibility_0;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysReverseInterruptedAnimations;                // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetTransitioner*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetTransitioner_BP_Initialize) == 0x000008, "Wrong alignment on WidgetTransitioner_BP_Initialize");
static_assert(sizeof(WidgetTransitioner_BP_Initialize) == 0x000018, "Wrong size on WidgetTransitioner_BP_Initialize");
static_assert(offsetof(WidgetTransitioner_BP_Initialize, TargetWidget_0) == 0x000000, "Member 'WidgetTransitioner_BP_Initialize::TargetWidget_0' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_BP_Initialize, InitialStatus) == 0x000008, "Member 'WidgetTransitioner_BP_Initialize::InitialStatus' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_BP_Initialize, HiddenVisibility_0) == 0x000009, "Member 'WidgetTransitioner_BP_Initialize::HiddenVisibility_0' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_BP_Initialize, ShownVisibility_0) == 0x00000A, "Member 'WidgetTransitioner_BP_Initialize::ShownVisibility_0' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_BP_Initialize, AlwaysReverseInterruptedAnimations) == 0x00000B, "Member 'WidgetTransitioner_BP_Initialize::AlwaysReverseInterruptedAnimations' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_BP_Initialize, ReturnValue) == 0x000010, "Member 'WidgetTransitioner_BP_Initialize::ReturnValue' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.BP_Show
// 0x0028 (0x0028 - 0x0000)
struct WidgetTransitioner_BP_Show final
{
public:
	bool                                          bSkipAnimation;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AnimationHints;                                    // 0x0008(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetTransitioner_BP_Show) == 0x000008, "Wrong alignment on WidgetTransitioner_BP_Show");
static_assert(sizeof(WidgetTransitioner_BP_Show) == 0x000028, "Wrong size on WidgetTransitioner_BP_Show");
static_assert(offsetof(WidgetTransitioner_BP_Show, bSkipAnimation) == 0x000000, "Member 'WidgetTransitioner_BP_Show::bSkipAnimation' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_BP_Show, AnimationHints) == 0x000008, "Member 'WidgetTransitioner_BP_Show::AnimationHints' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.SetNormalTransitionIn
// 0x0010 (0x0010 - 0x0000)
struct WidgetTransitioner_SetNormalTransitionIn final
{
public:
	class UUIAnimationController*                 InAnimationIn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTransitioner_SetNormalTransitionIn) == 0x000008, "Wrong alignment on WidgetTransitioner_SetNormalTransitionIn");
static_assert(sizeof(WidgetTransitioner_SetNormalTransitionIn) == 0x000010, "Wrong size on WidgetTransitioner_SetNormalTransitionIn");
static_assert(offsetof(WidgetTransitioner_SetNormalTransitionIn, InAnimationIn) == 0x000000, "Member 'WidgetTransitioner_SetNormalTransitionIn::InAnimationIn' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_SetNormalTransitionIn, bInvert) == 0x000008, "Member 'WidgetTransitioner_SetNormalTransitionIn::bInvert' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.SetNormalTransitionOut
// 0x0010 (0x0010 - 0x0000)
struct WidgetTransitioner_SetNormalTransitionOut final
{
public:
	class UUIAnimationController*                 InAnimationOut;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTransitioner_SetNormalTransitionOut) == 0x000008, "Wrong alignment on WidgetTransitioner_SetNormalTransitionOut");
static_assert(sizeof(WidgetTransitioner_SetNormalTransitionOut) == 0x000010, "Wrong size on WidgetTransitioner_SetNormalTransitionOut");
static_assert(offsetof(WidgetTransitioner_SetNormalTransitionOut, InAnimationOut) == 0x000000, "Member 'WidgetTransitioner_SetNormalTransitionOut::InAnimationOut' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_SetNormalTransitionOut, bInvert) == 0x000008, "Member 'WidgetTransitioner_SetNormalTransitionOut::bInvert' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.SetNormalTransitionPair
// 0x0010 (0x0010 - 0x0000)
struct WidgetTransitioner_SetNormalTransitionPair final
{
public:
	class UUIAnimationController*                 InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTransitionIn;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetTransitioner_SetNormalTransitionPair) == 0x000008, "Wrong alignment on WidgetTransitioner_SetNormalTransitionPair");
static_assert(sizeof(WidgetTransitioner_SetNormalTransitionPair) == 0x000010, "Wrong size on WidgetTransitioner_SetNormalTransitionPair");
static_assert(offsetof(WidgetTransitioner_SetNormalTransitionPair, InAnimation) == 0x000000, "Member 'WidgetTransitioner_SetNormalTransitionPair::InAnimation' has a wrong offset!");
static_assert(offsetof(WidgetTransitioner_SetNormalTransitionPair, bIsTransitionIn) == 0x000008, "Member 'WidgetTransitioner_SetNormalTransitionPair::bIsTransitionIn' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.GetTransitionerStatus
// 0x0001 (0x0001 - 0x0000)
struct WidgetTransitioner_GetTransitionerStatus final
{
public:
	EWidgetTransitionerStatus                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetTransitioner_GetTransitionerStatus) == 0x000001, "Wrong alignment on WidgetTransitioner_GetTransitionerStatus");
static_assert(sizeof(WidgetTransitioner_GetTransitionerStatus) == 0x000001, "Wrong size on WidgetTransitioner_GetTransitionerStatus");
static_assert(offsetof(WidgetTransitioner_GetTransitionerStatus, ReturnValue) == 0x000000, "Member 'WidgetTransitioner_GetTransitionerStatus::ReturnValue' has a wrong offset!");

// Function DelMarUI.WidgetTransitioner.IsHidden
// 0x0001 (0x0001 - 0x0000)
struct WidgetTransitioner_IsHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetTransitioner_IsHidden) == 0x000001, "Wrong alignment on WidgetTransitioner_IsHidden");
static_assert(sizeof(WidgetTransitioner_IsHidden) == 0x000001, "Wrong size on WidgetTransitioner_IsHidden");
static_assert(offsetof(WidgetTransitioner_IsHidden, ReturnValue) == 0x000000, "Member 'WidgetTransitioner_IsHidden::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarActionWidget.SetEnhancedInputAction
// 0x0008 (0x0008 - 0x0000)
struct DelMarActionWidget_SetEnhancedInputAction final
{
public:
	class UInputAction*                           InInputAction;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarActionWidget_SetEnhancedInputAction) == 0x000008, "Wrong alignment on DelMarActionWidget_SetEnhancedInputAction");
static_assert(sizeof(DelMarActionWidget_SetEnhancedInputAction) == 0x000008, "Wrong size on DelMarActionWidget_SetEnhancedInputAction");
static_assert(offsetof(DelMarActionWidget_SetEnhancedInputAction, InInputAction) == 0x000000, "Member 'DelMarActionWidget_SetEnhancedInputAction::InInputAction' has a wrong offset!");

// Function DelMarUI.DelMarActionWidget.SetIconRimBrush
// 0x00C0 (0x00C0 - 0x0000)
struct DelMarActionWidget_SetIconRimBrush final
{
public:
	struct FSlateBrush                            InIconRimBrush;                                    // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarActionWidget_SetIconRimBrush) == 0x000010, "Wrong alignment on DelMarActionWidget_SetIconRimBrush");
static_assert(sizeof(DelMarActionWidget_SetIconRimBrush) == 0x0000C0, "Wrong size on DelMarActionWidget_SetIconRimBrush");
static_assert(offsetof(DelMarActionWidget_SetIconRimBrush, InIconRimBrush) == 0x000000, "Member 'DelMarActionWidget_SetIconRimBrush::InIconRimBrush' has a wrong offset!");

// Function DelMarUI.DelMarActionWidget.SetInputAction
// 0x0010 (0x0010 - 0x0000)
struct DelMarActionWidget_SetInputAction final
{
public:
	struct FDataTableRowHandle                    InputActionRow;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarActionWidget_SetInputAction) == 0x000008, "Wrong alignment on DelMarActionWidget_SetInputAction");
static_assert(sizeof(DelMarActionWidget_SetInputAction) == 0x000010, "Wrong size on DelMarActionWidget_SetInputAction");
static_assert(offsetof(DelMarActionWidget_SetInputAction, InputActionRow) == 0x000000, "Member 'DelMarActionWidget_SetInputAction::InputActionRow' has a wrong offset!");

// Function DelMarUI.DelMarActionWidget.SetInputActions
// 0x0010 (0x0010 - 0x0000)
struct DelMarActionWidget_SetInputActions final
{
public:
	TArray<struct FDataTableRowHandle>            NewInputActions;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarActionWidget_SetInputActions) == 0x000008, "Wrong alignment on DelMarActionWidget_SetInputActions");
static_assert(sizeof(DelMarActionWidget_SetInputActions) == 0x000010, "Wrong size on DelMarActionWidget_SetInputActions");
static_assert(offsetof(DelMarActionWidget_SetInputActions, NewInputActions) == 0x000000, "Member 'DelMarActionWidget_SetInputActions::NewInputActions' has a wrong offset!");

// Function DelMarUI.DelMarActionWidget.GetDisplayText
// 0x0018 (0x0018 - 0x0000)
struct DelMarActionWidget_GetDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarActionWidget_GetDisplayText) == 0x000008, "Wrong alignment on DelMarActionWidget_GetDisplayText");
static_assert(sizeof(DelMarActionWidget_GetDisplayText) == 0x000018, "Wrong size on DelMarActionWidget_GetDisplayText");
static_assert(offsetof(DelMarActionWidget_GetDisplayText, ReturnValue) == 0x000000, "Member 'DelMarActionWidget_GetDisplayText::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarActionWidget.GetIcon
// 0x00C0 (0x00C0 - 0x0000)
struct DelMarActionWidget_GetIcon final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarActionWidget_GetIcon) == 0x000010, "Wrong alignment on DelMarActionWidget_GetIcon");
static_assert(sizeof(DelMarActionWidget_GetIcon) == 0x0000C0, "Wrong size on DelMarActionWidget_GetIcon");
static_assert(offsetof(DelMarActionWidget_GetIcon, ReturnValue) == 0x000000, "Member 'DelMarActionWidget_GetIcon::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarActionWidget.IsHeldAction
// 0x0001 (0x0001 - 0x0000)
struct DelMarActionWidget_IsHeldAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarActionWidget_IsHeldAction) == 0x000001, "Wrong alignment on DelMarActionWidget_IsHeldAction");
static_assert(sizeof(DelMarActionWidget_IsHeldAction) == 0x000001, "Wrong size on DelMarActionWidget_IsHeldAction");
static_assert(offsetof(DelMarActionWidget_IsHeldAction, ReturnValue) == 0x000000, "Member 'DelMarActionWidget_IsHeldAction::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarLoadingScreenHelper.PrepareDelMarLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct DelMarLoadingScreenHelper_PrepareDelMarLoadingScreen final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarLoadingScreenHelper_PrepareDelMarLoadingScreen) == 0x000008, "Wrong alignment on DelMarLoadingScreenHelper_PrepareDelMarLoadingScreen");
static_assert(sizeof(DelMarLoadingScreenHelper_PrepareDelMarLoadingScreen) == 0x000008, "Wrong size on DelMarLoadingScreenHelper_PrepareDelMarLoadingScreen");
static_assert(offsetof(DelMarLoadingScreenHelper_PrepareDelMarLoadingScreen, WorldContextObject) == 0x000000, "Member 'DelMarLoadingScreenHelper_PrepareDelMarLoadingScreen::WorldContextObject' has a wrong offset!");

// Function DelMarUI.DelMarUIDirector.SetLoadingScreenVisibiliy
// 0x0001 (0x0001 - 0x0000)
struct DelMarUIDirector_SetLoadingScreenVisibiliy final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarUIDirector_SetLoadingScreenVisibiliy) == 0x000001, "Wrong alignment on DelMarUIDirector_SetLoadingScreenVisibiliy");
static_assert(sizeof(DelMarUIDirector_SetLoadingScreenVisibiliy) == 0x000001, "Wrong size on DelMarUIDirector_SetLoadingScreenVisibiliy");
static_assert(offsetof(DelMarUIDirector_SetLoadingScreenVisibiliy, bVisible) == 0x000000, "Member 'DelMarUIDirector_SetLoadingScreenVisibiliy::bVisible' has a wrong offset!");

// Function DelMarUI.DelMarAttachedWidgetComponent.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarAttachedWidgetComponent_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAttachedWidgetComponent_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarAttachedWidgetComponent_HandleViewTargetChanged");
static_assert(sizeof(DelMarAttachedWidgetComponent_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarAttachedWidgetComponent_HandleViewTargetChanged");
static_assert(offsetof(DelMarAttachedWidgetComponent_HandleViewTargetChanged, InController) == 0x000000, "Member 'DelMarAttachedWidgetComponent_HandleViewTargetChanged::InController' has a wrong offset!");
static_assert(offsetof(DelMarAttachedWidgetComponent_HandleViewTargetChanged, OldViewTarget) == 0x000008, "Member 'DelMarAttachedWidgetComponent_HandleViewTargetChanged::OldViewTarget' has a wrong offset!");
static_assert(offsetof(DelMarAttachedWidgetComponent_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarAttachedWidgetComponent_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarUI.DelMarStartlineCountdownWidget.BP_OnActiveIntervalsChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarStartlineCountdownWidget_BP_OnActiveIntervalsChanged final
{
public:
	int32                                         NumActiveIntervals;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStartlineCountdownWidget_BP_OnActiveIntervalsChanged) == 0x000004, "Wrong alignment on DelMarStartlineCountdownWidget_BP_OnActiveIntervalsChanged");
static_assert(sizeof(DelMarStartlineCountdownWidget_BP_OnActiveIntervalsChanged) == 0x000004, "Wrong size on DelMarStartlineCountdownWidget_BP_OnActiveIntervalsChanged");
static_assert(offsetof(DelMarStartlineCountdownWidget_BP_OnActiveIntervalsChanged, NumActiveIntervals) == 0x000000, "Member 'DelMarStartlineCountdownWidget_BP_OnActiveIntervalsChanged::NumActiveIntervals' has a wrong offset!");

// Function DelMarUI.DelMarStartlineCountdownWidget.BP_OnCountdownStarted
// 0x0004 (0x0004 - 0x0000)
struct DelMarStartlineCountdownWidget_BP_OnCountdownStarted final
{
public:
	int32                                         TotalIntervals;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStartlineCountdownWidget_BP_OnCountdownStarted) == 0x000004, "Wrong alignment on DelMarStartlineCountdownWidget_BP_OnCountdownStarted");
static_assert(sizeof(DelMarStartlineCountdownWidget_BP_OnCountdownStarted) == 0x000004, "Wrong size on DelMarStartlineCountdownWidget_BP_OnCountdownStarted");
static_assert(offsetof(DelMarStartlineCountdownWidget_BP_OnCountdownStarted, TotalIntervals) == 0x000000, "Member 'DelMarStartlineCountdownWidget_BP_OnCountdownStarted::TotalIntervals' has a wrong offset!");

// Function DelMarUI.DelMarStartlineCountdownWidget.BP_OnStartlineBoostActivated
// 0x0004 (0x0004 - 0x0000)
struct DelMarStartlineCountdownWidget_BP_OnStartlineBoostActivated final
{
public:
	float                                         PercentageMaxBonusSpeedEarned;                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStartlineCountdownWidget_BP_OnStartlineBoostActivated) == 0x000004, "Wrong alignment on DelMarStartlineCountdownWidget_BP_OnStartlineBoostActivated");
static_assert(sizeof(DelMarStartlineCountdownWidget_BP_OnStartlineBoostActivated) == 0x000004, "Wrong size on DelMarStartlineCountdownWidget_BP_OnStartlineBoostActivated");
static_assert(offsetof(DelMarStartlineCountdownWidget_BP_OnStartlineBoostActivated, PercentageMaxBonusSpeedEarned) == 0x000000, "Member 'DelMarStartlineCountdownWidget_BP_OnStartlineBoostActivated::PercentageMaxBonusSpeedEarned' has a wrong offset!");

// Function DelMarUI.DelMarStartlineCountdownWidget.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarStartlineCountdownWidget_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Old;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStartlineCountdownWidget_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarStartlineCountdownWidget_HandleViewTargetChanged");
static_assert(sizeof(DelMarStartlineCountdownWidget_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarStartlineCountdownWidget_HandleViewTargetChanged");
static_assert(offsetof(DelMarStartlineCountdownWidget_HandleViewTargetChanged, PC) == 0x000000, "Member 'DelMarStartlineCountdownWidget_HandleViewTargetChanged::PC' has a wrong offset!");
static_assert(offsetof(DelMarStartlineCountdownWidget_HandleViewTargetChanged, Old) == 0x000008, "Member 'DelMarStartlineCountdownWidget_HandleViewTargetChanged::Old' has a wrong offset!");
static_assert(offsetof(DelMarStartlineCountdownWidget_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarStartlineCountdownWidget_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarUI.DelMarStartlineCountdownWidget.GetNumActiveIntervals
// 0x0004 (0x0004 - 0x0000)
struct DelMarStartlineCountdownWidget_GetNumActiveIntervals final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStartlineCountdownWidget_GetNumActiveIntervals) == 0x000004, "Wrong alignment on DelMarStartlineCountdownWidget_GetNumActiveIntervals");
static_assert(sizeof(DelMarStartlineCountdownWidget_GetNumActiveIntervals) == 0x000004, "Wrong size on DelMarStartlineCountdownWidget_GetNumActiveIntervals");
static_assert(offsetof(DelMarStartlineCountdownWidget_GetNumActiveIntervals, ReturnValue) == 0x000000, "Member 'DelMarStartlineCountdownWidget_GetNumActiveIntervals::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarStartlineCountdownWidget.GetNumTotalIntervals
// 0x0004 (0x0004 - 0x0000)
struct DelMarStartlineCountdownWidget_GetNumTotalIntervals final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStartlineCountdownWidget_GetNumTotalIntervals) == 0x000004, "Wrong alignment on DelMarStartlineCountdownWidget_GetNumTotalIntervals");
static_assert(sizeof(DelMarStartlineCountdownWidget_GetNumTotalIntervals) == 0x000004, "Wrong size on DelMarStartlineCountdownWidget_GetNumTotalIntervals");
static_assert(offsetof(DelMarStartlineCountdownWidget_GetNumTotalIntervals, ReturnValue) == 0x000000, "Member 'DelMarStartlineCountdownWidget_GetNumTotalIntervals::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarCheckpointTrackerEntryWidget.BP_OnDisplayedCheckpointChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarCheckpointTrackerEntryWidget_BP_OnDisplayedCheckpointChanged final
{
public:
	struct FDelMarSectionData                     InSectionData;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpointTrackerEntryWidget_BP_OnDisplayedCheckpointChanged) == 0x000008, "Wrong alignment on DelMarCheckpointTrackerEntryWidget_BP_OnDisplayedCheckpointChanged");
static_assert(sizeof(DelMarCheckpointTrackerEntryWidget_BP_OnDisplayedCheckpointChanged) == 0x000018, "Wrong size on DelMarCheckpointTrackerEntryWidget_BP_OnDisplayedCheckpointChanged");
static_assert(offsetof(DelMarCheckpointTrackerEntryWidget_BP_OnDisplayedCheckpointChanged, InSectionData) == 0x000000, "Member 'DelMarCheckpointTrackerEntryWidget_BP_OnDisplayedCheckpointChanged::InSectionData' has a wrong offset!");

// Function DelMarUI.DelMarCheckpointTrackerWidget.UpdateCheckpoints
// 0x0010 (0x0010 - 0x0000)
struct DelMarCheckpointTrackerWidget_UpdateCheckpoints final
{
public:
	TArray<struct FDelMarSectionData>             InCheckpoints;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpointTrackerWidget_UpdateCheckpoints) == 0x000008, "Wrong alignment on DelMarCheckpointTrackerWidget_UpdateCheckpoints");
static_assert(sizeof(DelMarCheckpointTrackerWidget_UpdateCheckpoints) == 0x000010, "Wrong size on DelMarCheckpointTrackerWidget_UpdateCheckpoints");
static_assert(offsetof(DelMarCheckpointTrackerWidget_UpdateCheckpoints, InCheckpoints) == 0x000000, "Member 'DelMarCheckpointTrackerWidget_UpdateCheckpoints::InCheckpoints' has a wrong offset!");

// Function DelMarUI.DelMarReadyUpWidget.BP_OnReadyUpChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarReadyUpWidget_BP_OnReadyUpChanged final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarReadyUpWidget_BP_OnReadyUpChanged) == 0x000001, "Wrong alignment on DelMarReadyUpWidget_BP_OnReadyUpChanged");
static_assert(sizeof(DelMarReadyUpWidget_BP_OnReadyUpChanged) == 0x000001, "Wrong size on DelMarReadyUpWidget_BP_OnReadyUpChanged");
static_assert(offsetof(DelMarReadyUpWidget_BP_OnReadyUpChanged, bReady) == 0x000000, "Member 'DelMarReadyUpWidget_BP_OnReadyUpChanged::bReady' has a wrong offset!");

// Function DelMarUI.DelMarReadyUpWidget.BP_ReadyUp
// 0x0001 (0x0001 - 0x0000)
struct DelMarReadyUpWidget_BP_ReadyUp final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarReadyUpWidget_BP_ReadyUp) == 0x000001, "Wrong alignment on DelMarReadyUpWidget_BP_ReadyUp");
static_assert(sizeof(DelMarReadyUpWidget_BP_ReadyUp) == 0x000001, "Wrong size on DelMarReadyUpWidget_BP_ReadyUp");
static_assert(offsetof(DelMarReadyUpWidget_BP_ReadyUp, bReady) == 0x000000, "Member 'DelMarReadyUpWidget_BP_ReadyUp::bReady' has a wrong offset!");

// Function DelMarUI.DelMarTurboBonusZoneWidget.BP_OnTurboZoneStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarTurboBonusZoneWidget_BP_OnTurboZoneStateChanged final
{
public:
	EDelMarTurboZoneState                         NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTurboBonusZoneWidget_BP_OnTurboZoneStateChanged) == 0x000001, "Wrong alignment on DelMarTurboBonusZoneWidget_BP_OnTurboZoneStateChanged");
static_assert(sizeof(DelMarTurboBonusZoneWidget_BP_OnTurboZoneStateChanged) == 0x000001, "Wrong size on DelMarTurboBonusZoneWidget_BP_OnTurboZoneStateChanged");
static_assert(offsetof(DelMarTurboBonusZoneWidget_BP_OnTurboZoneStateChanged, NewState) == 0x000000, "Member 'DelMarTurboBonusZoneWidget_BP_OnTurboZoneStateChanged::NewState' has a wrong offset!");

// Function DelMarUI.DelMarTurboBonusZoneWidget.HandleTurboStateChange
// 0x0001 (0x0001 - 0x0000)
struct DelMarTurboBonusZoneWidget_HandleTurboStateChange final
{
public:
	EDelMarTurboZoneState                         NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTurboBonusZoneWidget_HandleTurboStateChange) == 0x000001, "Wrong alignment on DelMarTurboBonusZoneWidget_HandleTurboStateChange");
static_assert(sizeof(DelMarTurboBonusZoneWidget_HandleTurboStateChange) == 0x000001, "Wrong size on DelMarTurboBonusZoneWidget_HandleTurboStateChange");
static_assert(offsetof(DelMarTurboBonusZoneWidget_HandleTurboStateChange, NewState) == 0x000000, "Member 'DelMarTurboBonusZoneWidget_HandleTurboStateChange::NewState' has a wrong offset!");

// Function DelMarUI.DelMarPositionalTrackerEntryWidget.RefreshPlayerInfo
// 0x0001 (0x0001 - 0x0000)
struct DelMarPositionalTrackerEntryWidget_RefreshPlayerInfo final
{
public:
	bool                                          IsTargetPlayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPositionalTrackerEntryWidget_RefreshPlayerInfo) == 0x000001, "Wrong alignment on DelMarPositionalTrackerEntryWidget_RefreshPlayerInfo");
static_assert(sizeof(DelMarPositionalTrackerEntryWidget_RefreshPlayerInfo) == 0x000001, "Wrong size on DelMarPositionalTrackerEntryWidget_RefreshPlayerInfo");
static_assert(offsetof(DelMarPositionalTrackerEntryWidget_RefreshPlayerInfo, IsTargetPlayer) == 0x000000, "Member 'DelMarPositionalTrackerEntryWidget_RefreshPlayerInfo::IsTargetPlayer' has a wrong offset!");

// Function DelMarUI.DelMarPositionalTrackerEntryWidget.SetDisplayedPlayer
// 0x0008 (0x0008 - 0x0000)
struct DelMarPositionalTrackerEntryWidget_SetDisplayedPlayer final
{
public:
	class UDelMarPlayerViewModel*                 InPlayerModel;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPositionalTrackerEntryWidget_SetDisplayedPlayer) == 0x000008, "Wrong alignment on DelMarPositionalTrackerEntryWidget_SetDisplayedPlayer");
static_assert(sizeof(DelMarPositionalTrackerEntryWidget_SetDisplayedPlayer) == 0x000008, "Wrong size on DelMarPositionalTrackerEntryWidget_SetDisplayedPlayer");
static_assert(offsetof(DelMarPositionalTrackerEntryWidget_SetDisplayedPlayer, InPlayerModel) == 0x000000, "Member 'DelMarPositionalTrackerEntryWidget_SetDisplayedPlayer::InPlayerModel' has a wrong offset!");

// Function DelMarUI.DelMarPostRaceRankedRecap.GetFailsafeDelayDuration
// 0x0004 (0x0004 - 0x0000)
struct DelMarPostRaceRankedRecap_GetFailsafeDelayDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPostRaceRankedRecap_GetFailsafeDelayDuration) == 0x000004, "Wrong alignment on DelMarPostRaceRankedRecap_GetFailsafeDelayDuration");
static_assert(sizeof(DelMarPostRaceRankedRecap_GetFailsafeDelayDuration) == 0x000004, "Wrong size on DelMarPostRaceRankedRecap_GetFailsafeDelayDuration");
static_assert(offsetof(DelMarPostRaceRankedRecap_GetFailsafeDelayDuration, ReturnValue) == 0x000000, "Member 'DelMarPostRaceRankedRecap_GetFailsafeDelayDuration::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarBladeMenuTriggerUIStateComponent.NativeHandleCursorModeChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            CursorModeContentWidget;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged) == 0x000008, "Wrong alignment on DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged");
static_assert(sizeof(DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged) == 0x000010, "Wrong size on DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged");
static_assert(offsetof(DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged, ActionName) == 0x000004, "Member 'DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged, CursorModeContentWidget) == 0x000008, "Member 'DelMarBladeMenuTriggerUIStateComponent_NativeHandleCursorModeChanged::CursorModeContentWidget' has a wrong offset!");

// Function DelMarUI.DelMarGameplayContextUpdaterUIStateComponent.HandleSpectatorViewTargetChange
// 0x0018 (0x0018 - 0x0000)
struct DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange) == 0x000008, "Wrong alignment on DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange");
static_assert(sizeof(DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange) == 0x000018, "Wrong size on DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange");
static_assert(offsetof(DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange, PlayerController) == 0x000000, "Member 'DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange::PlayerController' has a wrong offset!");
static_assert(offsetof(DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange, OldViewTarget) == 0x000008, "Member 'DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange::OldViewTarget' has a wrong offset!");
static_assert(offsetof(DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange, NewViewTarget) == 0x000010, "Member 'DelMarGameplayContextUpdaterUIStateComponent_HandleSpectatorViewTargetChange::NewViewTarget' has a wrong offset!");

// Function DelMarUI.DelMarGameplayContextUpdaterUIStateComponent.HandleTouchControlsLayoutChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarGameplayContextUpdaterUIStateComponent_HandleTouchControlsLayoutChanged final
{
public:
	struct FGameplayTag                           Layout;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGameplayContextUpdaterUIStateComponent_HandleTouchControlsLayoutChanged) == 0x000004, "Wrong alignment on DelMarGameplayContextUpdaterUIStateComponent_HandleTouchControlsLayoutChanged");
static_assert(sizeof(DelMarGameplayContextUpdaterUIStateComponent_HandleTouchControlsLayoutChanged) == 0x000004, "Wrong size on DelMarGameplayContextUpdaterUIStateComponent_HandleTouchControlsLayoutChanged");
static_assert(offsetof(DelMarGameplayContextUpdaterUIStateComponent_HandleTouchControlsLayoutChanged, Layout) == 0x000000, "Member 'DelMarGameplayContextUpdaterUIStateComponent_HandleTouchControlsLayoutChanged::Layout' has a wrong offset!");

// Function DelMarUI.DelMarViewModelBase.TryGetOwningLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct DelMarViewModelBase_TryGetOwningLocalPlayer final
{
public:
	class ULocalPlayer*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarViewModelBase_TryGetOwningLocalPlayer) == 0x000008, "Wrong alignment on DelMarViewModelBase_TryGetOwningLocalPlayer");
static_assert(sizeof(DelMarViewModelBase_TryGetOwningLocalPlayer) == 0x000008, "Wrong size on DelMarViewModelBase_TryGetOwningLocalPlayer");
static_assert(offsetof(DelMarViewModelBase_TryGetOwningLocalPlayer, ReturnValue) == 0x000000, "Member 'DelMarViewModelBase_TryGetOwningLocalPlayer::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarLocalPlayerSettingsViewModel.HandleNameplatesSettingChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarLocalPlayerSettingsViewModel_HandleNameplatesSettingChanged final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarLocalPlayerSettingsViewModel_HandleNameplatesSettingChanged) == 0x000001, "Wrong alignment on DelMarLocalPlayerSettingsViewModel_HandleNameplatesSettingChanged");
static_assert(sizeof(DelMarLocalPlayerSettingsViewModel_HandleNameplatesSettingChanged) == 0x000001, "Wrong size on DelMarLocalPlayerSettingsViewModel_HandleNameplatesSettingChanged");
static_assert(offsetof(DelMarLocalPlayerSettingsViewModel_HandleNameplatesSettingChanged, NewValue) == 0x000000, "Member 'DelMarLocalPlayerSettingsViewModel_HandleNameplatesSettingChanged::NewValue' has a wrong offset!");

// Function DelMarUI.DelMarPlayerViewModel.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct DelMarPlayerViewModel_GetPlayerState final
{
public:
	class AFortPlayerState*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerViewModel_GetPlayerState) == 0x000008, "Wrong alignment on DelMarPlayerViewModel_GetPlayerState");
static_assert(sizeof(DelMarPlayerViewModel_GetPlayerState) == 0x000008, "Wrong size on DelMarPlayerViewModel_GetPlayerState");
static_assert(offsetof(DelMarPlayerViewModel_GetPlayerState, ReturnValue) == 0x000000, "Member 'DelMarPlayerViewModel_GetPlayerState::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRaceViewModel.HandleFinalRacePositionsChanged
// 0x0060 (0x0060 - 0x0000)
struct DelMarRaceViewModel_HandleFinalRacePositionsChanged final
{
public:
	TArray<struct FDelMarFinalRacePositionEntry>  FinalRacePositions;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDelMarEvent_RunRecorded               RecordedRun;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceViewModel_HandleFinalRacePositionsChanged) == 0x000008, "Wrong alignment on DelMarRaceViewModel_HandleFinalRacePositionsChanged");
static_assert(sizeof(DelMarRaceViewModel_HandleFinalRacePositionsChanged) == 0x000060, "Wrong size on DelMarRaceViewModel_HandleFinalRacePositionsChanged");
static_assert(offsetof(DelMarRaceViewModel_HandleFinalRacePositionsChanged, FinalRacePositions) == 0x000000, "Member 'DelMarRaceViewModel_HandleFinalRacePositionsChanged::FinalRacePositions' has a wrong offset!");
static_assert(offsetof(DelMarRaceViewModel_HandleFinalRacePositionsChanged, RecordedRun) == 0x000010, "Member 'DelMarRaceViewModel_HandleFinalRacePositionsChanged::RecordedRun' has a wrong offset!");

// Function DelMarUI.DelMarRaceViewModel.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarRaceViewModel_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Old;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceViewModel_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarRaceViewModel_HandleViewTargetChanged");
static_assert(sizeof(DelMarRaceViewModel_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarRaceViewModel_HandleViewTargetChanged");
static_assert(offsetof(DelMarRaceViewModel_HandleViewTargetChanged, PC) == 0x000000, "Member 'DelMarRaceViewModel_HandleViewTargetChanged::PC' has a wrong offset!");
static_assert(offsetof(DelMarRaceViewModel_HandleViewTargetChanged, Old) == 0x000008, "Member 'DelMarRaceViewModel_HandleViewTargetChanged::Old' has a wrong offset!");
static_assert(offsetof(DelMarRaceViewModel_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarRaceViewModel_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleAnyWheelsOnGroundChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarVehicleViewModel_HandleAnyWheelsOnGroundChanged final
{
public:
	TScriptInterface<class IDelMarVehicleInterface> VehicleRef;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleViewModel_HandleAnyWheelsOnGroundChanged) == 0x000008, "Wrong alignment on DelMarVehicleViewModel_HandleAnyWheelsOnGroundChanged");
static_assert(sizeof(DelMarVehicleViewModel_HandleAnyWheelsOnGroundChanged) == 0x000018, "Wrong size on DelMarVehicleViewModel_HandleAnyWheelsOnGroundChanged");
static_assert(offsetof(DelMarVehicleViewModel_HandleAnyWheelsOnGroundChanged, VehicleRef) == 0x000000, "Member 'DelMarVehicleViewModel_HandleAnyWheelsOnGroundChanged::VehicleRef' has a wrong offset!");
static_assert(offsetof(DelMarVehicleViewModel_HandleAnyWheelsOnGroundChanged, bValue) == 0x000010, "Member 'DelMarVehicleViewModel_HandleAnyWheelsOnGroundChanged::bValue' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleDemolishPressDurationUpdated
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleViewModel_HandleDemolishPressDurationUpdated final
{
public:
	float                                         PressedDurationPercentage;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleDemolishPressDurationUpdated) == 0x000004, "Wrong alignment on DelMarVehicleViewModel_HandleDemolishPressDurationUpdated");
static_assert(sizeof(DelMarVehicleViewModel_HandleDemolishPressDurationUpdated) == 0x000004, "Wrong size on DelMarVehicleViewModel_HandleDemolishPressDurationUpdated");
static_assert(offsetof(DelMarVehicleViewModel_HandleDemolishPressDurationUpdated, PressedDurationPercentage) == 0x000000, "Member 'DelMarVehicleViewModel_HandleDemolishPressDurationUpdated::PressedDurationPercentage' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleDriftSlipAngleRatioChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleViewModel_HandleDriftSlipAngleRatioChanged final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleDriftSlipAngleRatioChanged) == 0x000004, "Wrong alignment on DelMarVehicleViewModel_HandleDriftSlipAngleRatioChanged");
static_assert(sizeof(DelMarVehicleViewModel_HandleDriftSlipAngleRatioChanged) == 0x000004, "Wrong size on DelMarVehicleViewModel_HandleDriftSlipAngleRatioChanged");
static_assert(offsetof(DelMarVehicleViewModel_HandleDriftSlipAngleRatioChanged, InValue) == 0x000000, "Member 'DelMarVehicleViewModel_HandleDriftSlipAngleRatioChanged::InValue' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleMissedCheckpointCountdownInitiated
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleViewModel_HandleMissedCheckpointCountdownInitiated final
{
public:
	struct FDelMarEvent_MissedCheckpointDemoCountdown Event;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleMissedCheckpointCountdownInitiated) == 0x000008, "Wrong alignment on DelMarVehicleViewModel_HandleMissedCheckpointCountdownInitiated");
static_assert(sizeof(DelMarVehicleViewModel_HandleMissedCheckpointCountdownInitiated) == 0x000008, "Wrong size on DelMarVehicleViewModel_HandleMissedCheckpointCountdownInitiated");
static_assert(offsetof(DelMarVehicleViewModel_HandleMissedCheckpointCountdownInitiated, Event) == 0x000000, "Member 'DelMarVehicleViewModel_HandleMissedCheckpointCountdownInitiated::Event' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleOnThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleViewModel_HandleOnThrottleInput final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleOnThrottleInput) == 0x000004, "Wrong alignment on DelMarVehicleViewModel_HandleOnThrottleInput");
static_assert(sizeof(DelMarVehicleViewModel_HandleOnThrottleInput) == 0x000004, "Wrong size on DelMarVehicleViewModel_HandleOnThrottleInput");
static_assert(offsetof(DelMarVehicleViewModel_HandleOnThrottleInput, Value) == 0x000000, "Member 'DelMarVehicleViewModel_HandleOnThrottleInput::Value' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleOnVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleViewModel_HandleOnVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleOnVehicleDemolished) == 0x000004, "Wrong alignment on DelMarVehicleViewModel_HandleOnVehicleDemolished");
static_assert(sizeof(DelMarVehicleViewModel_HandleOnVehicleDemolished) == 0x000004, "Wrong size on DelMarVehicleViewModel_HandleOnVehicleDemolished");
static_assert(offsetof(DelMarVehicleViewModel_HandleOnVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarVehicleViewModel_HandleOnVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandlePotentialDriftBoostChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleViewModel_HandlePotentialDriftBoostChanged final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandlePotentialDriftBoostChanged) == 0x000004, "Wrong alignment on DelMarVehicleViewModel_HandlePotentialDriftBoostChanged");
static_assert(sizeof(DelMarVehicleViewModel_HandlePotentialDriftBoostChanged) == 0x000004, "Wrong size on DelMarVehicleViewModel_HandlePotentialDriftBoostChanged");
static_assert(offsetof(DelMarVehicleViewModel_HandlePotentialDriftBoostChanged, InValue) == 0x000000, "Member 'DelMarVehicleViewModel_HandlePotentialDriftBoostChanged::InValue' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleReturnToTrackCountdownInitiated
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleViewModel_HandleReturnToTrackCountdownInitiated final
{
public:
	struct FDelMarEvent_ReturnToTrackDemoCountdown Event;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleReturnToTrackCountdownInitiated) == 0x000008, "Wrong alignment on DelMarVehicleViewModel_HandleReturnToTrackCountdownInitiated");
static_assert(sizeof(DelMarVehicleViewModel_HandleReturnToTrackCountdownInitiated) == 0x000008, "Wrong size on DelMarVehicleViewModel_HandleReturnToTrackCountdownInitiated");
static_assert(offsetof(DelMarVehicleViewModel_HandleReturnToTrackCountdownInitiated, Event) == 0x000000, "Member 'DelMarVehicleViewModel_HandleReturnToTrackCountdownInitiated::Event' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleSpeedometerSpeedChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleViewModel_HandleSpeedometerSpeedChanged final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleSpeedometerSpeedChanged) == 0x000004, "Wrong alignment on DelMarVehicleViewModel_HandleSpeedometerSpeedChanged");
static_assert(sizeof(DelMarVehicleViewModel_HandleSpeedometerSpeedChanged) == 0x000004, "Wrong size on DelMarVehicleViewModel_HandleSpeedometerSpeedChanged");
static_assert(offsetof(DelMarVehicleViewModel_HandleSpeedometerSpeedChanged, InValue) == 0x000000, "Member 'DelMarVehicleViewModel_HandleSpeedometerSpeedChanged::InValue' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleStartlineBoostActivated
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleViewModel_HandleStartlineBoostActivated final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleStartlineBoostActivated) == 0x000004, "Wrong alignment on DelMarVehicleViewModel_HandleStartlineBoostActivated");
static_assert(sizeof(DelMarVehicleViewModel_HandleStartlineBoostActivated) == 0x000004, "Wrong size on DelMarVehicleViewModel_HandleStartlineBoostActivated");
static_assert(offsetof(DelMarVehicleViewModel_HandleStartlineBoostActivated, InValue) == 0x000000, "Member 'DelMarVehicleViewModel_HandleStartlineBoostActivated::InValue' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleToggleThrottleSettingChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleViewModel_HandleToggleThrottleSettingChanged final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleToggleThrottleSettingChanged) == 0x000001, "Wrong alignment on DelMarVehicleViewModel_HandleToggleThrottleSettingChanged");
static_assert(sizeof(DelMarVehicleViewModel_HandleToggleThrottleSettingChanged) == 0x000001, "Wrong size on DelMarVehicleViewModel_HandleToggleThrottleSettingChanged");
static_assert(offsetof(DelMarVehicleViewModel_HandleToggleThrottleSettingChanged, bValue) == 0x000000, "Member 'DelMarVehicleViewModel_HandleToggleThrottleSettingChanged::bValue' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleTurboBonusZoneChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleViewModel_HandleTurboBonusZoneChanged final
{
public:
	EDelMarTurboZoneState                         InTurboBonusZoneState;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleTurboBonusZoneChanged) == 0x000001, "Wrong alignment on DelMarVehicleViewModel_HandleTurboBonusZoneChanged");
static_assert(sizeof(DelMarVehicleViewModel_HandleTurboBonusZoneChanged) == 0x000001, "Wrong size on DelMarVehicleViewModel_HandleTurboBonusZoneChanged");
static_assert(offsetof(DelMarVehicleViewModel_HandleTurboBonusZoneChanged, InTurboBonusZoneState) == 0x000000, "Member 'DelMarVehicleViewModel_HandleTurboBonusZoneChanged::InTurboBonusZoneState' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleUnderthrustPercentChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleViewModel_HandleUnderthrustPercentChanged final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleUnderthrustPercentChanged) == 0x000004, "Wrong alignment on DelMarVehicleViewModel_HandleUnderthrustPercentChanged");
static_assert(sizeof(DelMarVehicleViewModel_HandleUnderthrustPercentChanged) == 0x000004, "Wrong size on DelMarVehicleViewModel_HandleUnderthrustPercentChanged");
static_assert(offsetof(DelMarVehicleViewModel_HandleUnderthrustPercentChanged, InValue) == 0x000000, "Member 'DelMarVehicleViewModel_HandleUnderthrustPercentChanged::InValue' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.HandleWrongwayIndication
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleViewModel_HandleWrongwayIndication final
{
public:
	struct FDelMarEvent_VehicleWrongwayStatus     Event;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_HandleWrongwayIndication) == 0x000001, "Wrong alignment on DelMarVehicleViewModel_HandleWrongwayIndication");
static_assert(sizeof(DelMarVehicleViewModel_HandleWrongwayIndication) == 0x000001, "Wrong size on DelMarVehicleViewModel_HandleWrongwayIndication");
static_assert(offsetof(DelMarVehicleViewModel_HandleWrongwayIndication, Event) == 0x000000, "Member 'DelMarVehicleViewModel_HandleWrongwayIndication::Event' has a wrong offset!");

// Function DelMarUI.DelMarVehicleViewModel.Initialize
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleViewModel_Initialize final
{
public:
	class AFortPlayerState*                       InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleViewModel_Initialize) == 0x000008, "Wrong alignment on DelMarVehicleViewModel_Initialize");
static_assert(sizeof(DelMarVehicleViewModel_Initialize) == 0x000008, "Wrong size on DelMarVehicleViewModel_Initialize");
static_assert(offsetof(DelMarVehicleViewModel_Initialize, InPlayerState) == 0x000000, "Member 'DelMarVehicleViewModel_Initialize::InPlayerState' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementChangeVM.GetCurrentPlacement
// 0x0008 (0x0008 - 0x0000)
struct DelMarRankedPlacementChangeVM_GetCurrentPlacement final
{
public:
	class UDelMarRankedPlacementVM*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementChangeVM_GetCurrentPlacement) == 0x000008, "Wrong alignment on DelMarRankedPlacementChangeVM_GetCurrentPlacement");
static_assert(sizeof(DelMarRankedPlacementChangeVM_GetCurrentPlacement) == 0x000008, "Wrong size on DelMarRankedPlacementChangeVM_GetCurrentPlacement");
static_assert(offsetof(DelMarRankedPlacementChangeVM_GetCurrentPlacement, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementChangeVM_GetCurrentPlacement::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementChangeVM.GetInitialPlacement
// 0x0008 (0x0008 - 0x0000)
struct DelMarRankedPlacementChangeVM_GetInitialPlacement final
{
public:
	class UDelMarRankedPlacementVM*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementChangeVM_GetInitialPlacement) == 0x000008, "Wrong alignment on DelMarRankedPlacementChangeVM_GetInitialPlacement");
static_assert(sizeof(DelMarRankedPlacementChangeVM_GetInitialPlacement) == 0x000008, "Wrong size on DelMarRankedPlacementChangeVM_GetInitialPlacement");
static_assert(offsetof(DelMarRankedPlacementChangeVM_GetInitialPlacement, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementChangeVM_GetInitialPlacement::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementChangeVM.GetIsDataValid
// 0x0001 (0x0001 - 0x0000)
struct DelMarRankedPlacementChangeVM_GetIsDataValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementChangeVM_GetIsDataValid) == 0x000001, "Wrong alignment on DelMarRankedPlacementChangeVM_GetIsDataValid");
static_assert(sizeof(DelMarRankedPlacementChangeVM_GetIsDataValid) == 0x000001, "Wrong size on DelMarRankedPlacementChangeVM_GetIsDataValid");
static_assert(offsetof(DelMarRankedPlacementChangeVM_GetIsDataValid, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementChangeVM_GetIsDataValid::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementChangeVM.GetPositionDelta
// 0x0004 (0x0004 - 0x0000)
struct DelMarRankedPlacementChangeVM_GetPositionDelta final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementChangeVM_GetPositionDelta) == 0x000004, "Wrong alignment on DelMarRankedPlacementChangeVM_GetPositionDelta");
static_assert(sizeof(DelMarRankedPlacementChangeVM_GetPositionDelta) == 0x000004, "Wrong size on DelMarRankedPlacementChangeVM_GetPositionDelta");
static_assert(offsetof(DelMarRankedPlacementChangeVM_GetPositionDelta, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementChangeVM_GetPositionDelta::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementVM.GetIsDataValid
// 0x0001 (0x0001 - 0x0000)
struct DelMarRankedPlacementVM_GetIsDataValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementVM_GetIsDataValid) == 0x000001, "Wrong alignment on DelMarRankedPlacementVM_GetIsDataValid");
static_assert(sizeof(DelMarRankedPlacementVM_GetIsDataValid) == 0x000001, "Wrong size on DelMarRankedPlacementVM_GetIsDataValid");
static_assert(offsetof(DelMarRankedPlacementVM_GetIsDataValid, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementVM_GetIsDataValid::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementVM.GetIsUnranked
// 0x0001 (0x0001 - 0x0000)
struct DelMarRankedPlacementVM_GetIsUnranked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementVM_GetIsUnranked) == 0x000001, "Wrong alignment on DelMarRankedPlacementVM_GetIsUnranked");
static_assert(sizeof(DelMarRankedPlacementVM_GetIsUnranked) == 0x000001, "Wrong size on DelMarRankedPlacementVM_GetIsUnranked");
static_assert(offsetof(DelMarRankedPlacementVM_GetIsUnranked, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementVM_GetIsUnranked::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementVM.GetPlayerPosition
// 0x0004 (0x0004 - 0x0000)
struct DelMarRankedPlacementVM_GetPlayerPosition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementVM_GetPlayerPosition) == 0x000004, "Wrong alignment on DelMarRankedPlacementVM_GetPlayerPosition");
static_assert(sizeof(DelMarRankedPlacementVM_GetPlayerPosition) == 0x000004, "Wrong size on DelMarRankedPlacementVM_GetPlayerPosition");
static_assert(offsetof(DelMarRankedPlacementVM_GetPlayerPosition, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementVM_GetPlayerPosition::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementVM.GetProgressTowardNextTier
// 0x0004 (0x0004 - 0x0000)
struct DelMarRankedPlacementVM_GetProgressTowardNextTier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementVM_GetProgressTowardNextTier) == 0x000004, "Wrong alignment on DelMarRankedPlacementVM_GetProgressTowardNextTier");
static_assert(sizeof(DelMarRankedPlacementVM_GetProgressTowardNextTier) == 0x000004, "Wrong size on DelMarRankedPlacementVM_GetProgressTowardNextTier");
static_assert(offsetof(DelMarRankedPlacementVM_GetProgressTowardNextTier, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementVM_GetProgressTowardNextTier::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementVM.GetTierIndex
// 0x0004 (0x0004 - 0x0000)
struct DelMarRankedPlacementVM_GetTierIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementVM_GetTierIndex) == 0x000004, "Wrong alignment on DelMarRankedPlacementVM_GetTierIndex");
static_assert(sizeof(DelMarRankedPlacementVM_GetTierIndex) == 0x000004, "Wrong size on DelMarRankedPlacementVM_GetTierIndex");
static_assert(offsetof(DelMarRankedPlacementVM_GetTierIndex, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementVM_GetTierIndex::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedPlacementVM.TierDisplayData
// 0x00E0 (0x00E0 - 0x0000)
struct DelMarRankedPlacementVM_TierDisplayData final
{
public:
	struct FFortHabaneroTier                      ReturnValue;                                       // 0x0000(0x00E0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRankedPlacementVM_TierDisplayData) == 0x000008, "Wrong alignment on DelMarRankedPlacementVM_TierDisplayData");
static_assert(sizeof(DelMarRankedPlacementVM_TierDisplayData) == 0x0000E0, "Wrong size on DelMarRankedPlacementVM_TierDisplayData");
static_assert(offsetof(DelMarRankedPlacementVM_TierDisplayData, ReturnValue) == 0x000000, "Member 'DelMarRankedPlacementVM_TierDisplayData::ReturnValue' has a wrong offset!");

// Function DelMarUI.DelMarRankedRecapVM.GetUnrankedTierData
// 0x00E8 (0x00E8 - 0x0000)
struct DelMarRankedRecapVM_GetUnrankedTierData final
{
public:
	struct FFortHabaneroTier                      OutUnrankedTierData;                               // 0x0000(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarRankedRecapVM_GetUnrankedTierData) == 0x000008, "Wrong alignment on DelMarRankedRecapVM_GetUnrankedTierData");
static_assert(sizeof(DelMarRankedRecapVM_GetUnrankedTierData) == 0x0000E8, "Wrong size on DelMarRankedRecapVM_GetUnrankedTierData");
static_assert(offsetof(DelMarRankedRecapVM_GetUnrankedTierData, OutUnrankedTierData) == 0x000000, "Member 'DelMarRankedRecapVM_GetUnrankedTierData::OutUnrankedTierData' has a wrong offset!");
static_assert(offsetof(DelMarRankedRecapVM_GetUnrankedTierData, ReturnValue) == 0x0000E0, "Member 'DelMarRankedRecapVM_GetUnrankedTierData::ReturnValue' has a wrong offset!");

}

