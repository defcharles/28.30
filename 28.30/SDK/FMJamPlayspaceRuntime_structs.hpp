#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamPlayspaceRuntime

#include "Basic.hpp"

#include "FMJamCoreRuntime_structs.hpp"
#include "FMCoreRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct FMJamPlayspaceRuntime.JamPlayParams
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FJamPlayParams final
{
public:
	class FName                                   SongShortName;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMJamLoopType                                LoopType;                                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class APlayerState>            PlayerState;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopInstanceId;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoJammer;                                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UCatalogData>            CMSCatalogEntry;                                   // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFMJamSong>              Song;                                              // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJamPlayParams) == 0x000008, "Wrong alignment on FJamPlayParams");
static_assert(sizeof(FJamPlayParams) == 0x000038, "Wrong size on FJamPlayParams");
static_assert(offsetof(FJamPlayParams, SongShortName) == 0x000000, "Member 'FJamPlayParams::SongShortName' has a wrong offset!");
static_assert(offsetof(FJamPlayParams, LoopType) == 0x000004, "Member 'FJamPlayParams::LoopType' has a wrong offset!");
static_assert(offsetof(FJamPlayParams, PlayerState) == 0x000008, "Member 'FJamPlayParams::PlayerState' has a wrong offset!");
static_assert(offsetof(FJamPlayParams, LoopInstanceId) == 0x000010, "Member 'FJamPlayParams::LoopInstanceId' has a wrong offset!");
static_assert(offsetof(FJamPlayParams, bIsAutoJammer) == 0x000014, "Member 'FJamPlayParams::bIsAutoJammer' has a wrong offset!");
static_assert(offsetof(FJamPlayParams, CMSCatalogEntry) == 0x000018, "Member 'FJamPlayParams::CMSCatalogEntry' has a wrong offset!");
static_assert(offsetof(FJamPlayParams, Song) == 0x000020, "Member 'FJamPlayParams::Song' has a wrong offset!");

// ScriptStruct FMJamPlayspaceRuntime.JamLoadResult
// 0x0020 (0x0020 - 0x0000)
struct FJamLoadResult final
{
public:
	class UJamMusicSlot*                          Slot;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFusionPatch*                           FusionPatch;                                       // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMidiFile*                              MidiFile;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicKeyMode                                 Mode;                                              // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0019(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCancelled;                                     // 0x001A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJamLoadResult) == 0x000008, "Wrong alignment on FJamLoadResult");
static_assert(sizeof(FJamLoadResult) == 0x000020, "Wrong size on FJamLoadResult");
static_assert(offsetof(FJamLoadResult, Slot) == 0x000000, "Member 'FJamLoadResult::Slot' has a wrong offset!");
static_assert(offsetof(FJamLoadResult, FusionPatch) == 0x000008, "Member 'FJamLoadResult::FusionPatch' has a wrong offset!");
static_assert(offsetof(FJamLoadResult, MidiFile) == 0x000010, "Member 'FJamLoadResult::MidiFile' has a wrong offset!");
static_assert(offsetof(FJamLoadResult, Mode) == 0x000018, "Member 'FJamLoadResult::Mode' has a wrong offset!");
static_assert(offsetof(FJamLoadResult, bSuccess) == 0x000019, "Member 'FJamLoadResult::bSuccess' has a wrong offset!");
static_assert(offsetof(FJamLoadResult, bWasCancelled) == 0x00001A, "Member 'FJamLoadResult::bWasCancelled' has a wrong offset!");

// ScriptStruct FMJamPlayspaceRuntime.JamEvent_JamLoopBase
// 0x0040 (0x0040 - 0x0000)
struct FJamEvent_JamLoopBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SongShortName;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCatalogData*                           CatalogEntry;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMJamLoopType                                LoopType;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerState;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopInstanceId;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoJammer;                                     // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USparksInstrumentAnimations*            Animations;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangedLoop;                                      // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJamEvent_JamLoopBase) == 0x000008, "Wrong alignment on FJamEvent_JamLoopBase");
static_assert(sizeof(FJamEvent_JamLoopBase) == 0x000040, "Wrong size on FJamEvent_JamLoopBase");
static_assert(offsetof(FJamEvent_JamLoopBase, SongShortName) == 0x000008, "Member 'FJamEvent_JamLoopBase::SongShortName' has a wrong offset!");
static_assert(offsetof(FJamEvent_JamLoopBase, CatalogEntry) == 0x000010, "Member 'FJamEvent_JamLoopBase::CatalogEntry' has a wrong offset!");
static_assert(offsetof(FJamEvent_JamLoopBase, LoopType) == 0x000018, "Member 'FJamEvent_JamLoopBase::LoopType' has a wrong offset!");
static_assert(offsetof(FJamEvent_JamLoopBase, PlayerState) == 0x000020, "Member 'FJamEvent_JamLoopBase::PlayerState' has a wrong offset!");
static_assert(offsetof(FJamEvent_JamLoopBase, LoopInstanceId) == 0x000028, "Member 'FJamEvent_JamLoopBase::LoopInstanceId' has a wrong offset!");
static_assert(offsetof(FJamEvent_JamLoopBase, bIsAutoJammer) == 0x00002C, "Member 'FJamEvent_JamLoopBase::bIsAutoJammer' has a wrong offset!");
static_assert(offsetof(FJamEvent_JamLoopBase, Animations) == 0x000030, "Member 'FJamEvent_JamLoopBase::Animations' has a wrong offset!");
static_assert(offsetof(FJamEvent_JamLoopBase, bChangedLoop) == 0x000038, "Member 'FJamEvent_JamLoopBase::bChangedLoop' has a wrong offset!");

// ScriptStruct FMJamPlayspaceRuntime.JamEvent_JamLoopStarted
// 0x0000 (0x0040 - 0x0040)
struct FJamEvent_JamLoopStarted final : public FJamEvent_JamLoopBase
{
};
static_assert(alignof(FJamEvent_JamLoopStarted) == 0x000008, "Wrong alignment on FJamEvent_JamLoopStarted");
static_assert(sizeof(FJamEvent_JamLoopStarted) == 0x000040, "Wrong size on FJamEvent_JamLoopStarted");

// ScriptStruct FMJamPlayspaceRuntime.JamEvent_JamLoopStopped
// 0x0000 (0x0040 - 0x0040)
struct FJamEvent_JamLoopStopped final : public FJamEvent_JamLoopBase
{
};
static_assert(alignof(FJamEvent_JamLoopStopped) == 0x000008, "Wrong alignment on FJamEvent_JamLoopStopped");
static_assert(sizeof(FJamEvent_JamLoopStopped) == 0x000040, "Wrong size on FJamEvent_JamLoopStopped");

// ScriptStruct FMJamPlayspaceRuntime.JamEvent_LoopsChangedThisFrame
// 0x0001 (0x0001 - 0x0000)
struct FJamEvent_LoopsChangedThisFrame final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJamEvent_LoopsChangedThisFrame) == 0x000001, "Wrong alignment on FJamEvent_LoopsChangedThisFrame");
static_assert(sizeof(FJamEvent_LoopsChangedThisFrame) == 0x000001, "Wrong size on FJamEvent_LoopsChangedThisFrame");

// ScriptStruct FMJamPlayspaceRuntime.JamEvent_OnPrimaryPlayerPresenceChanged
// 0x0001 (0x0001 - 0x0000)
struct FJamEvent_OnPrimaryPlayerPresenceChanged final
{
public:
	bool                                          bPrimaryPlayerInPlayspace;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJamEvent_OnPrimaryPlayerPresenceChanged) == 0x000001, "Wrong alignment on FJamEvent_OnPrimaryPlayerPresenceChanged");
static_assert(sizeof(FJamEvent_OnPrimaryPlayerPresenceChanged) == 0x000001, "Wrong size on FJamEvent_OnPrimaryPlayerPresenceChanged");
static_assert(offsetof(FJamEvent_OnPrimaryPlayerPresenceChanged, bPrimaryPlayerInPlayspace) == 0x000000, "Member 'FJamEvent_OnPrimaryPlayerPresenceChanged::bPrimaryPlayerInPlayspace' has a wrong offset!");

// ScriptStruct FMJamPlayspaceRuntime.JamReactiveFXState
// 0x0028 (0x0028 - 0x0000)
struct FJamReactiveFXState final
{
public:
	float                                         OverallAmplitude;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LoopAmplitudes;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector4f>                      LoopBandValues;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJamReactiveFXState) == 0x000008, "Wrong alignment on FJamReactiveFXState");
static_assert(sizeof(FJamReactiveFXState) == 0x000028, "Wrong size on FJamReactiveFXState");
static_assert(offsetof(FJamReactiveFXState, OverallAmplitude) == 0x000000, "Member 'FJamReactiveFXState::OverallAmplitude' has a wrong offset!");
static_assert(offsetof(FJamReactiveFXState, LoopAmplitudes) == 0x000008, "Member 'FJamReactiveFXState::LoopAmplitudes' has a wrong offset!");
static_assert(offsetof(FJamReactiveFXState, LoopBandValues) == 0x000018, "Member 'FJamReactiveFXState::LoopBandValues' has a wrong offset!");

// ScriptStruct FMJamPlayspaceRuntime.JamLoopReactiveFX
// 0x0010 (0x0010 - 0x0000)
struct FJamLoopReactiveFX final
{
public:
	TArray<TWeakObjectPtr<class UNiagaraComponent>> NiagaraComponents;                                 // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJamLoopReactiveFX) == 0x000008, "Wrong alignment on FJamLoopReactiveFX");
static_assert(sizeof(FJamLoopReactiveFX) == 0x000010, "Wrong size on FJamLoopReactiveFX");
static_assert(offsetof(FJamLoopReactiveFX, NiagaraComponents) == 0x000000, "Member 'FJamLoopReactiveFX::NiagaraComponents' has a wrong offset!");

}

