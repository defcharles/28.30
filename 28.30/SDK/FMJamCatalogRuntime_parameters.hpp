#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamCatalogRuntime

#include "Basic.hpp"

#include "FMCoreRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FMJamCoreRuntime_structs.hpp"
#include "FMJamCatalogRuntime_structs.hpp"


namespace SDK::Params
{

// Function FMJamCatalogRuntime.FMJamLoop.GetKey
// 0x0001 (0x0001 - 0x0000)
struct FMJamLoop_GetKey final
{
public:
	EMusicKey                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamLoop_GetKey) == 0x000001, "Wrong alignment on FMJamLoop_GetKey");
static_assert(sizeof(FMJamLoop_GetKey) == 0x000001, "Wrong size on FMJamLoop_GetKey");
static_assert(offsetof(FMJamLoop_GetKey, ReturnValue) == 0x000000, "Member 'FMJamLoop_GetKey::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamLoop.GetLoopType
// 0x0001 (0x0001 - 0x0000)
struct FMJamLoop_GetLoopType final
{
public:
	EFMJamLoopType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamLoop_GetLoopType) == 0x000001, "Wrong alignment on FMJamLoop_GetLoopType");
static_assert(sizeof(FMJamLoop_GetLoopType) == 0x000001, "Wrong size on FMJamLoop_GetLoopType");
static_assert(offsetof(FMJamLoop_GetLoopType, ReturnValue) == 0x000000, "Member 'FMJamLoop_GetLoopType::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamLoop.GetMajorMidi
// 0x0040 (0x0040 - 0x0000)
struct FMJamLoop_GetMajorMidi final
{
public:
	TSoftObjectPtr<class UMidiFile>               OutMetasoundMidi;                                  // 0x0000(0x0020)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFusionPatch>            OutMetasoundFusion;                                // 0x0020(0x0020)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamLoop_GetMajorMidi) == 0x000008, "Wrong alignment on FMJamLoop_GetMajorMidi");
static_assert(sizeof(FMJamLoop_GetMajorMidi) == 0x000040, "Wrong size on FMJamLoop_GetMajorMidi");
static_assert(offsetof(FMJamLoop_GetMajorMidi, OutMetasoundMidi) == 0x000000, "Member 'FMJamLoop_GetMajorMidi::OutMetasoundMidi' has a wrong offset!");
static_assert(offsetof(FMJamLoop_GetMajorMidi, OutMetasoundFusion) == 0x000020, "Member 'FMJamLoop_GetMajorMidi::OutMetasoundFusion' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamLoop.GetMidi
// 0x0048 (0x0048 - 0x0000)
struct FMJamLoop_GetMidi final
{
public:
	EMusicKeyMode                                 Mode;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMidiFile>               OutMetasoundMidi;                                  // 0x0008(0x0020)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFusionPatch>            OutMetasoundFusion;                                // 0x0028(0x0020)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamLoop_GetMidi) == 0x000008, "Wrong alignment on FMJamLoop_GetMidi");
static_assert(sizeof(FMJamLoop_GetMidi) == 0x000048, "Wrong size on FMJamLoop_GetMidi");
static_assert(offsetof(FMJamLoop_GetMidi, Mode) == 0x000000, "Member 'FMJamLoop_GetMidi::Mode' has a wrong offset!");
static_assert(offsetof(FMJamLoop_GetMidi, OutMetasoundMidi) == 0x000008, "Member 'FMJamLoop_GetMidi::OutMetasoundMidi' has a wrong offset!");
static_assert(offsetof(FMJamLoop_GetMidi, OutMetasoundFusion) == 0x000028, "Member 'FMJamLoop_GetMidi::OutMetasoundFusion' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamLoop.GetMinorMidi
// 0x0040 (0x0040 - 0x0000)
struct FMJamLoop_GetMinorMidi final
{
public:
	TSoftObjectPtr<class UMidiFile>               OutMetasoundMidi;                                  // 0x0000(0x0020)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFusionPatch>            OutMetasoundFusion;                                // 0x0020(0x0020)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamLoop_GetMinorMidi) == 0x000008, "Wrong alignment on FMJamLoop_GetMinorMidi");
static_assert(sizeof(FMJamLoop_GetMinorMidi) == 0x000040, "Wrong size on FMJamLoop_GetMinorMidi");
static_assert(offsetof(FMJamLoop_GetMinorMidi, OutMetasoundMidi) == 0x000000, "Member 'FMJamLoop_GetMinorMidi::OutMetasoundMidi' has a wrong offset!");
static_assert(offsetof(FMJamLoop_GetMinorMidi, OutMetasoundFusion) == 0x000020, "Member 'FMJamLoop_GetMinorMidi::OutMetasoundFusion' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamLoop.GetSemitoneTranspose
// 0x0008 (0x0008 - 0x0000)
struct FMJamLoop_GetSemitoneTranspose final
{
public:
	EMusicKey                                     ToKey;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamLoop_GetSemitoneTranspose) == 0x000004, "Wrong alignment on FMJamLoop_GetSemitoneTranspose");
static_assert(sizeof(FMJamLoop_GetSemitoneTranspose) == 0x000008, "Wrong size on FMJamLoop_GetSemitoneTranspose");
static_assert(offsetof(FMJamLoop_GetSemitoneTranspose, ToKey) == 0x000000, "Member 'FMJamLoop_GetSemitoneTranspose::ToKey' has a wrong offset!");
static_assert(offsetof(FMJamLoop_GetSemitoneTranspose, ReturnValue) == 0x000004, "Member 'FMJamLoop_GetSemitoneTranspose::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamLoop.GetSong
// 0x0008 (0x0008 - 0x0000)
struct FMJamLoop_GetSong final
{
public:
	class UFMJamSong*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamLoop_GetSong) == 0x000008, "Wrong alignment on FMJamLoop_GetSong");
static_assert(sizeof(FMJamLoop_GetSong) == 0x000008, "Wrong size on FMJamLoop_GetSong");
static_assert(offsetof(FMJamLoop_GetSong, ReturnValue) == 0x000000, "Member 'FMJamLoop_GetSong::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamLoop.HasPitch
// 0x0001 (0x0001 - 0x0000)
struct FMJamLoop_HasPitch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamLoop_HasPitch) == 0x000001, "Wrong alignment on FMJamLoop_HasPitch");
static_assert(sizeof(FMJamLoop_HasPitch) == 0x000001, "Wrong size on FMJamLoop_HasPitch");
static_assert(offsetof(FMJamLoop_HasPitch, ReturnValue) == 0x000000, "Member 'FMJamLoop_HasPitch::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetAdditionalTags
// 0x0020 (0x0020 - 0x0000)
struct FMJamSong_GetAdditionalTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetAdditionalTags) == 0x000008, "Wrong alignment on FMJamSong_GetAdditionalTags");
static_assert(sizeof(FMJamSong_GetAdditionalTags) == 0x000020, "Wrong size on FMJamSong_GetAdditionalTags");
static_assert(offsetof(FMJamSong_GetAdditionalTags, ReturnValue) == 0x000000, "Member 'FMJamSong_GetAdditionalTags::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetArtist
// 0x0010 (0x0010 - 0x0000)
struct FMJamSong_GetArtist final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetArtist) == 0x000008, "Wrong alignment on FMJamSong_GetArtist");
static_assert(sizeof(FMJamSong_GetArtist) == 0x000010, "Wrong size on FMJamSong_GetArtist");
static_assert(offsetof(FMJamSong_GetArtist, ReturnValue) == 0x000000, "Member 'FMJamSong_GetArtist::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetKey
// 0x0001 (0x0001 - 0x0000)
struct FMJamSong_GetKey final
{
public:
	EMusicKey                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetKey) == 0x000001, "Wrong alignment on FMJamSong_GetKey");
static_assert(sizeof(FMJamSong_GetKey) == 0x000001, "Wrong size on FMJamSong_GetKey");
static_assert(offsetof(FMJamSong_GetKey, ReturnValue) == 0x000000, "Member 'FMJamSong_GetKey::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetLipSyncAnimAsset
// 0x0020 (0x0020 - 0x0000)
struct FMJamSong_GetLipSyncAnimAsset final
{
public:
	TSoftObjectPtr<class UAnimSequence>           ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetLipSyncAnimAsset) == 0x000008, "Wrong alignment on FMJamSong_GetLipSyncAnimAsset");
static_assert(sizeof(FMJamSong_GetLipSyncAnimAsset) == 0x000020, "Wrong size on FMJamSong_GetLipSyncAnimAsset");
static_assert(offsetof(FMJamSong_GetLipSyncAnimAsset, ReturnValue) == 0x000000, "Member 'FMJamSong_GetLipSyncAnimAsset::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetLoop
// 0x0010 (0x0010 - 0x0000)
struct FMJamSong_GetLoop final
{
public:
	EFMJamLoopType                                LoopType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMJamLoop*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetLoop) == 0x000008, "Wrong alignment on FMJamSong_GetLoop");
static_assert(sizeof(FMJamSong_GetLoop) == 0x000010, "Wrong size on FMJamSong_GetLoop");
static_assert(offsetof(FMJamSong_GetLoop, LoopType) == 0x000000, "Member 'FMJamSong_GetLoop::LoopType' has a wrong offset!");
static_assert(offsetof(FMJamSong_GetLoop, ReturnValue) == 0x000008, "Member 'FMJamSong_GetLoop::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetLoopTypeForLoop
// 0x0010 (0x0010 - 0x0000)
struct FMJamSong_GetLoopTypeForLoop final
{
public:
	const class UFMJamLoop*                       Loop;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMJamLoopType                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMJamSong_GetLoopTypeForLoop) == 0x000008, "Wrong alignment on FMJamSong_GetLoopTypeForLoop");
static_assert(sizeof(FMJamSong_GetLoopTypeForLoop) == 0x000010, "Wrong size on FMJamSong_GetLoopTypeForLoop");
static_assert(offsetof(FMJamSong_GetLoopTypeForLoop, Loop) == 0x000000, "Member 'FMJamSong_GetLoopTypeForLoop::Loop' has a wrong offset!");
static_assert(offsetof(FMJamSong_GetLoopTypeForLoop, ReturnValue) == 0x000008, "Member 'FMJamSong_GetLoopTypeForLoop::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetMode
// 0x0001 (0x0001 - 0x0000)
struct FMJamSong_GetMode final
{
public:
	EMusicKeyMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetMode) == 0x000001, "Wrong alignment on FMJamSong_GetMode");
static_assert(sizeof(FMJamSong_GetMode) == 0x000001, "Wrong size on FMJamSong_GetMode");
static_assert(offsetof(FMJamSong_GetMode, ReturnValue) == 0x000000, "Member 'FMJamSong_GetMode::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetSongShortName
// 0x0004 (0x0004 - 0x0000)
struct FMJamSong_GetSongShortName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetSongShortName) == 0x000004, "Wrong alignment on FMJamSong_GetSongShortName");
static_assert(sizeof(FMJamSong_GetSongShortName) == 0x000004, "Wrong size on FMJamSong_GetSongShortName");
static_assert(offsetof(FMJamSong_GetSongShortName, ReturnValue) == 0x000000, "Member 'FMJamSong_GetSongShortName::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetTempo
// 0x0004 (0x0004 - 0x0000)
struct FMJamSong_GetTempo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetTempo) == 0x000004, "Wrong alignment on FMJamSong_GetTempo");
static_assert(sizeof(FMJamSong_GetTempo) == 0x000004, "Wrong size on FMJamSong_GetTempo");
static_assert(offsetof(FMJamSong_GetTempo, ReturnValue) == 0x000000, "Member 'FMJamSong_GetTempo::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct FMJamSong_GetTitle final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetTitle) == 0x000008, "Wrong alignment on FMJamSong_GetTitle");
static_assert(sizeof(FMJamSong_GetTitle) == 0x000010, "Wrong size on FMJamSong_GetTitle");
static_assert(offsetof(FMJamSong_GetTitle, ReturnValue) == 0x000000, "Member 'FMJamSong_GetTitle::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSong.GetYear
// 0x0004 (0x0004 - 0x0000)
struct FMJamSong_GetYear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSong_GetYear) == 0x000004, "Wrong alignment on FMJamSong_GetYear");
static_assert(sizeof(FMJamSong_GetYear) == 0x000004, "Wrong size on FMJamSong_GetYear");
static_assert(offsetof(FMJamSong_GetYear, ReturnValue) == 0x000000, "Member 'FMJamSong_GetYear::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.GetFMJamSongCatalog
// 0x0010 (0x0010 - 0x0000)
struct FMJamSongCatalog_GetFMJamSongCatalog final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMJamSongCatalog*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSongCatalog_GetFMJamSongCatalog) == 0x000008, "Wrong alignment on FMJamSongCatalog_GetFMJamSongCatalog");
static_assert(sizeof(FMJamSongCatalog_GetFMJamSongCatalog) == 0x000010, "Wrong size on FMJamSongCatalog_GetFMJamSongCatalog");
static_assert(offsetof(FMJamSongCatalog_GetFMJamSongCatalog, WorldContextObject) == 0x000000, "Member 'FMJamSongCatalog_GetFMJamSongCatalog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetFMJamSongCatalog, ReturnValue) == 0x000008, "Member 'FMJamSongCatalog_GetFMJamSongCatalog::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.GetLoopTypeByTag
// 0x0008 (0x0008 - 0x0000)
struct FMJamSongCatalog_GetLoopTypeByTag final
{
public:
	struct FGameplayTag                           LoopTag;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMJamLoopType                                ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMJamSongCatalog_GetLoopTypeByTag) == 0x000004, "Wrong alignment on FMJamSongCatalog_GetLoopTypeByTag");
static_assert(sizeof(FMJamSongCatalog_GetLoopTypeByTag) == 0x000008, "Wrong size on FMJamSongCatalog_GetLoopTypeByTag");
static_assert(offsetof(FMJamSongCatalog_GetLoopTypeByTag, LoopTag) == 0x000000, "Member 'FMJamSongCatalog_GetLoopTypeByTag::LoopTag' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetLoopTypeByTag, ReturnValue) == 0x000004, "Member 'FMJamSongCatalog_GetLoopTypeByTag::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.GetLoopTypeText
// 0x0020 (0x0020 - 0x0000)
struct FMJamSongCatalog_GetLoopTypeText final
{
public:
	EFMJamLoopType                                LoopType;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSongCatalog_GetLoopTypeText) == 0x000008, "Wrong alignment on FMJamSongCatalog_GetLoopTypeText");
static_assert(sizeof(FMJamSongCatalog_GetLoopTypeText) == 0x000020, "Wrong size on FMJamSongCatalog_GetLoopTypeText");
static_assert(offsetof(FMJamSongCatalog_GetLoopTypeText, LoopType) == 0x000000, "Member 'FMJamSongCatalog_GetLoopTypeText::LoopType' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetLoopTypeText, ReturnValue) == 0x000008, "Member 'FMJamSongCatalog_GetLoopTypeText::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.TryGetFMJamSongCatalog
// 0x0010 (0x0010 - 0x0000)
struct FMJamSongCatalog_TryGetFMJamSongCatalog final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMJamSongCatalog*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSongCatalog_TryGetFMJamSongCatalog) == 0x000008, "Wrong alignment on FMJamSongCatalog_TryGetFMJamSongCatalog");
static_assert(sizeof(FMJamSongCatalog_TryGetFMJamSongCatalog) == 0x000010, "Wrong size on FMJamSongCatalog_TryGetFMJamSongCatalog");
static_assert(offsetof(FMJamSongCatalog_TryGetFMJamSongCatalog, WorldContextObject) == 0x000000, "Member 'FMJamSongCatalog_TryGetFMJamSongCatalog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_TryGetFMJamSongCatalog, ReturnValue) == 0x000008, "Member 'FMJamSongCatalog_TryGetFMJamSongCatalog::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.OnSongCatalogRetrieved
// 0x0001 (0x0001 - 0x0000)
struct FMJamSongCatalog_OnSongCatalogRetrieved final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSongCatalog_OnSongCatalogRetrieved) == 0x000001, "Wrong alignment on FMJamSongCatalog_OnSongCatalogRetrieved");
static_assert(sizeof(FMJamSongCatalog_OnSongCatalogRetrieved) == 0x000001, "Wrong size on FMJamSongCatalog_OnSongCatalogRetrieved");
static_assert(offsetof(FMJamSongCatalog_OnSongCatalogRetrieved, bSuccess) == 0x000000, "Member 'FMJamSongCatalog_OnSongCatalogRetrieved::bSuccess' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.GetRandomSongList
// 0x0060 (0x0060 - 0x0000)
struct FMJamSongCatalog_GetRandomSongList final
{
public:
	int32                                         NumSongs;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UFMJamSong*>                     ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSongCatalog_GetRandomSongList) == 0x000008, "Wrong alignment on FMJamSongCatalog_GetRandomSongList");
static_assert(sizeof(FMJamSongCatalog_GetRandomSongList) == 0x000060, "Wrong size on FMJamSongCatalog_GetRandomSongList");
static_assert(offsetof(FMJamSongCatalog_GetRandomSongList, NumSongs) == 0x000000, "Member 'FMJamSongCatalog_GetRandomSongList::NumSongs' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetRandomSongList, TagQuery) == 0x000008, "Member 'FMJamSongCatalog_GetRandomSongList::TagQuery' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetRandomSongList, ReturnValue) == 0x000050, "Member 'FMJamSongCatalog_GetRandomSongList::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.GetSongByShortName
// 0x0010 (0x0010 - 0x0000)
struct FMJamSongCatalog_GetSongByShortName final
{
public:
	class FName                                   ShortName;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMJamSong*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSongCatalog_GetSongByShortName) == 0x000008, "Wrong alignment on FMJamSongCatalog_GetSongByShortName");
static_assert(sizeof(FMJamSongCatalog_GetSongByShortName) == 0x000010, "Wrong size on FMJamSongCatalog_GetSongByShortName");
static_assert(offsetof(FMJamSongCatalog_GetSongByShortName, ShortName) == 0x000000, "Member 'FMJamSongCatalog_GetSongByShortName::ShortName' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetSongByShortName, ReturnValue) == 0x000008, "Member 'FMJamSongCatalog_GetSongByShortName::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.GetSongCatalogEntryByShortName
// 0x0010 (0x0010 - 0x0000)
struct FMJamSongCatalog_GetSongCatalogEntryByShortName final
{
public:
	class FName                                   ShortName;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCatalogData*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSongCatalog_GetSongCatalogEntryByShortName) == 0x000008, "Wrong alignment on FMJamSongCatalog_GetSongCatalogEntryByShortName");
static_assert(sizeof(FMJamSongCatalog_GetSongCatalogEntryByShortName) == 0x000010, "Wrong size on FMJamSongCatalog_GetSongCatalogEntryByShortName");
static_assert(offsetof(FMJamSongCatalog_GetSongCatalogEntryByShortName, ShortName) == 0x000000, "Member 'FMJamSongCatalog_GetSongCatalogEntryByShortName::ShortName' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetSongCatalogEntryByShortName, ReturnValue) == 0x000008, "Member 'FMJamSongCatalog_GetSongCatalogEntryByShortName::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.GetSortedSongList
// 0x0060 (0x0060 - 0x0000)
struct FMJamSongCatalog_GetSortedSongList final
{
public:
	EFMJamSongCatalogSortMethod                   SortMethod;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMJamSongCatalogSortDirection                SortDirection;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UFMJamSong*>                     ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSongCatalog_GetSortedSongList) == 0x000008, "Wrong alignment on FMJamSongCatalog_GetSortedSongList");
static_assert(sizeof(FMJamSongCatalog_GetSortedSongList) == 0x000060, "Wrong size on FMJamSongCatalog_GetSortedSongList");
static_assert(offsetof(FMJamSongCatalog_GetSortedSongList, SortMethod) == 0x000000, "Member 'FMJamSongCatalog_GetSortedSongList::SortMethod' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetSortedSongList, SortDirection) == 0x000001, "Member 'FMJamSongCatalog_GetSortedSongList::SortDirection' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetSortedSongList, TagQuery) == 0x000008, "Member 'FMJamSongCatalog_GetSortedSongList::TagQuery' has a wrong offset!");
static_assert(offsetof(FMJamSongCatalog_GetSortedSongList, ReturnValue) == 0x000050, "Member 'FMJamSongCatalog_GetSortedSongList::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FMJamSongCatalog.HaveCMSSongCatalog
// 0x0001 (0x0001 - 0x0000)
struct FMJamSongCatalog_HaveCMSSongCatalog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMJamSongCatalog_HaveCMSSongCatalog) == 0x000001, "Wrong alignment on FMJamSongCatalog_HaveCMSSongCatalog");
static_assert(sizeof(FMJamSongCatalog_HaveCMSSongCatalog) == 0x000001, "Wrong size on FMJamSongCatalog_HaveCMSSongCatalog");
static_assert(offsetof(FMJamSongCatalog_HaveCMSSongCatalog, ReturnValue) == 0x000000, "Member 'FMJamSongCatalog_HaveCMSSongCatalog::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FortJamEmoteItemDefinition.GetJamSongShortNameForPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer final
{
public:
	const class AFortPlayerState*                 PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer) == 0x000008, "Wrong alignment on FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer");
static_assert(sizeof(FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer) == 0x000010, "Wrong size on FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer");
static_assert(offsetof(FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer, PlayerState) == 0x000000, "Member 'FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer, ReturnValue) == 0x000008, "Member 'FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer::ReturnValue' has a wrong offset!");

// Function FMJamCatalogRuntime.FortJamEmoteItemDefinition.IsJamLoopEnabled
// 0x0010 (0x0010 - 0x0000)
struct FortJamEmoteItemDefinition_IsJamLoopEnabled final
{
public:
	const class AFortPlayerController*            PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortJamEmoteItemDefinition_IsJamLoopEnabled) == 0x000008, "Wrong alignment on FortJamEmoteItemDefinition_IsJamLoopEnabled");
static_assert(sizeof(FortJamEmoteItemDefinition_IsJamLoopEnabled) == 0x000010, "Wrong size on FortJamEmoteItemDefinition_IsJamLoopEnabled");
static_assert(offsetof(FortJamEmoteItemDefinition_IsJamLoopEnabled, PlayerController) == 0x000000, "Member 'FortJamEmoteItemDefinition_IsJamLoopEnabled::PlayerController' has a wrong offset!");
static_assert(offsetof(FortJamEmoteItemDefinition_IsJamLoopEnabled, ReturnValue) == 0x000008, "Member 'FortJamEmoteItemDefinition_IsJamLoopEnabled::ReturnValue' has a wrong offset!");

}

