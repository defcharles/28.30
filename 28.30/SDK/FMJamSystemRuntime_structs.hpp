#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamSystemRuntime

#include "Basic.hpp"

#include "FMJamCoreRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct FMJamSystemRuntime.JamVerbMessage_Jam
// 0x0010 (0x0088 - 0x0078)
struct FJamVerbMessage_Jam final : public FVerbMessage
{
public:
	bool                                          bIsFullBand;                                       // 0x0078(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BandSize;                                          // 0x007C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFMJamLoopType                                LoopType;                                          // 0x0080(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJamVerbMessage_Jam) == 0x000008, "Wrong alignment on FJamVerbMessage_Jam");
static_assert(sizeof(FJamVerbMessage_Jam) == 0x000088, "Wrong size on FJamVerbMessage_Jam");
static_assert(offsetof(FJamVerbMessage_Jam, bIsFullBand) == 0x000078, "Member 'FJamVerbMessage_Jam::bIsFullBand' has a wrong offset!");
static_assert(offsetof(FJamVerbMessage_Jam, BandSize) == 0x00007C, "Member 'FJamVerbMessage_Jam::BandSize' has a wrong offset!");
static_assert(offsetof(FJamVerbMessage_Jam, LoopType) == 0x000080, "Member 'FJamVerbMessage_Jam::LoopType' has a wrong offset!");

// ScriptStruct FMJamSystemRuntime.JamVerbFilter_Jam
// 0x0018 (0x00B8 - 0x00A0)
struct FJamVerbFilter_Jam final : public FObjectiveFilter
{
public:
	uint8                                         bRequireFullBand : 1;                              // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsebandSize : 1;                                  // 0x00A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Range                            BandSize;                                          // 0x00A4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseLoopType : 1;                                  // 0x00B4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EFMJamLoopType                                LoopType;                                          // 0x00B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJamVerbFilter_Jam) == 0x000008, "Wrong alignment on FJamVerbFilter_Jam");
static_assert(sizeof(FJamVerbFilter_Jam) == 0x0000B8, "Wrong size on FJamVerbFilter_Jam");
static_assert(offsetof(FJamVerbFilter_Jam, BandSize) == 0x0000A4, "Member 'FJamVerbFilter_Jam::BandSize' has a wrong offset!");
static_assert(offsetof(FJamVerbFilter_Jam, LoopType) == 0x0000B5, "Member 'FJamVerbFilter_Jam::LoopType' has a wrong offset!");

}

