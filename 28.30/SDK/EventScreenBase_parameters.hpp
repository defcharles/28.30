#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EventScreenBase

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "EventScreenBase_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK::Params
{

// Function EventScreenBase.FortEventMoreInfoGroup.OnEventScreenDataSet
// 0x0008 (0x0008 - 0x0000)
struct FortEventMoreInfoGroup_OnEventScreenDataSet final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventMoreInfoGroup_OnEventScreenDataSet) == 0x000008, "Wrong alignment on FortEventMoreInfoGroup_OnEventScreenDataSet");
static_assert(sizeof(FortEventMoreInfoGroup_OnEventScreenDataSet) == 0x000008, "Wrong size on FortEventMoreInfoGroup_OnEventScreenDataSet");
static_assert(offsetof(FortEventMoreInfoGroup_OnEventScreenDataSet, InEventScreenData) == 0x000000, "Member 'FortEventMoreInfoGroup_OnEventScreenDataSet::InEventScreenData' has a wrong offset!");

// Function EventScreenBase.FortEventMoreInfoGroup.OnIconLoaded
// 0x0008 (0x0008 - 0x0000)
struct FortEventMoreInfoGroup_OnIconLoaded final
{
public:
	const class UObject*                          Icon;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventMoreInfoGroup_OnIconLoaded) == 0x000008, "Wrong alignment on FortEventMoreInfoGroup_OnIconLoaded");
static_assert(sizeof(FortEventMoreInfoGroup_OnIconLoaded) == 0x000008, "Wrong size on FortEventMoreInfoGroup_OnIconLoaded");
static_assert(offsetof(FortEventMoreInfoGroup_OnIconLoaded, Icon) == 0x000000, "Member 'FortEventMoreInfoGroup_OnIconLoaded::Icon' has a wrong offset!");

// Function EventScreenBase.FortEventMoreInfoGroup.OnSetGroupText
// 0x0030 (0x0030 - 0x0000)
struct FortEventMoreInfoGroup_OnSetGroupText final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventMoreInfoGroup_OnSetGroupText) == 0x000008, "Wrong alignment on FortEventMoreInfoGroup_OnSetGroupText");
static_assert(sizeof(FortEventMoreInfoGroup_OnSetGroupText) == 0x000030, "Wrong size on FortEventMoreInfoGroup_OnSetGroupText");
static_assert(offsetof(FortEventMoreInfoGroup_OnSetGroupText, Header) == 0x000000, "Member 'FortEventMoreInfoGroup_OnSetGroupText::Header' has a wrong offset!");
static_assert(offsetof(FortEventMoreInfoGroup_OnSetGroupText, Body) == 0x000018, "Member 'FortEventMoreInfoGroup_OnSetGroupText::Body' has a wrong offset!");

// Function EventScreenBase.FortEventMoreInfoModal.OnEventScreenDataSet
// 0x0008 (0x0008 - 0x0000)
struct FortEventMoreInfoModal_OnEventScreenDataSet final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventMoreInfoModal_OnEventScreenDataSet) == 0x000008, "Wrong alignment on FortEventMoreInfoModal_OnEventScreenDataSet");
static_assert(sizeof(FortEventMoreInfoModal_OnEventScreenDataSet) == 0x000008, "Wrong size on FortEventMoreInfoModal_OnEventScreenDataSet");
static_assert(offsetof(FortEventMoreInfoModal_OnEventScreenDataSet, InEventScreenData) == 0x000000, "Member 'FortEventMoreInfoModal_OnEventScreenDataSet::InEventScreenData' has a wrong offset!");

// Function EventScreenBase.FortEventMoreInfoModal.SetModalText
// 0x0048 (0x0048 - 0x0000)
struct FortEventMoreInfoModal_SetModalText final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SubHeader;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Legal;                                             // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventMoreInfoModal_SetModalText) == 0x000008, "Wrong alignment on FortEventMoreInfoModal_SetModalText");
static_assert(sizeof(FortEventMoreInfoModal_SetModalText) == 0x000048, "Wrong size on FortEventMoreInfoModal_SetModalText");
static_assert(offsetof(FortEventMoreInfoModal_SetModalText, Header) == 0x000000, "Member 'FortEventMoreInfoModal_SetModalText::Header' has a wrong offset!");
static_assert(offsetof(FortEventMoreInfoModal_SetModalText, SubHeader) == 0x000018, "Member 'FortEventMoreInfoModal_SetModalText::SubHeader' has a wrong offset!");
static_assert(offsetof(FortEventMoreInfoModal_SetModalText, Legal) == 0x000030, "Member 'FortEventMoreInfoModal_SetModalText::Legal' has a wrong offset!");

// Function EventScreenBase.FortEventMoreInfoModal.GetEventScreenData
// 0x0008 (0x0008 - 0x0000)
struct FortEventMoreInfoModal_GetEventScreenData final
{
public:
	const class UFortEventScreenData*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventMoreInfoModal_GetEventScreenData) == 0x000008, "Wrong alignment on FortEventMoreInfoModal_GetEventScreenData");
static_assert(sizeof(FortEventMoreInfoModal_GetEventScreenData) == 0x000008, "Wrong size on FortEventMoreInfoModal_GetEventScreenData");
static_assert(offsetof(FortEventMoreInfoModal_GetEventScreenData, ReturnValue) == 0x000000, "Member 'FortEventMoreInfoModal_GetEventScreenData::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventPurchaseLevelsModal.HandlePurchaseComplete
// 0x0028 (0x0028 - 0x0000)
struct FortEventPurchaseLevelsModal_HandlePurchaseComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPurchasedItemInfo>             PurchasedItems;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InOfferId;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchaseLevelsModal_HandlePurchaseComplete) == 0x000008, "Wrong alignment on FortEventPurchaseLevelsModal_HandlePurchaseComplete");
static_assert(sizeof(FortEventPurchaseLevelsModal_HandlePurchaseComplete) == 0x000028, "Wrong size on FortEventPurchaseLevelsModal_HandlePurchaseComplete");
static_assert(offsetof(FortEventPurchaseLevelsModal_HandlePurchaseComplete, bSuccess) == 0x000000, "Member 'FortEventPurchaseLevelsModal_HandlePurchaseComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(FortEventPurchaseLevelsModal_HandlePurchaseComplete, PurchasedItems) == 0x000008, "Member 'FortEventPurchaseLevelsModal_HandlePurchaseComplete::PurchasedItems' has a wrong offset!");
static_assert(offsetof(FortEventPurchaseLevelsModal_HandlePurchaseComplete, InOfferId) == 0x000018, "Member 'FortEventPurchaseLevelsModal_HandlePurchaseComplete::InOfferId' has a wrong offset!");

// Function EventScreenBase.FortEventPurchaseLevelsModal.OnCMSTextApplied
// 0x0018 (0x0018 - 0x0000)
struct FortEventPurchaseLevelsModal_OnCMSTextApplied final
{
public:
	class FText                                   LegalText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchaseLevelsModal_OnCMSTextApplied) == 0x000008, "Wrong alignment on FortEventPurchaseLevelsModal_OnCMSTextApplied");
static_assert(sizeof(FortEventPurchaseLevelsModal_OnCMSTextApplied) == 0x000018, "Wrong size on FortEventPurchaseLevelsModal_OnCMSTextApplied");
static_assert(offsetof(FortEventPurchaseLevelsModal_OnCMSTextApplied, LegalText) == 0x000000, "Member 'FortEventPurchaseLevelsModal_OnCMSTextApplied::LegalText' has a wrong offset!");

// Function EventScreenBase.FortEventPurchaseLevelsModal.OnEventScreenDataSet
// 0x0008 (0x0008 - 0x0000)
struct FortEventPurchaseLevelsModal_OnEventScreenDataSet final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchaseLevelsModal_OnEventScreenDataSet) == 0x000008, "Wrong alignment on FortEventPurchaseLevelsModal_OnEventScreenDataSet");
static_assert(sizeof(FortEventPurchaseLevelsModal_OnEventScreenDataSet) == 0x000008, "Wrong size on FortEventPurchaseLevelsModal_OnEventScreenDataSet");
static_assert(offsetof(FortEventPurchaseLevelsModal_OnEventScreenDataSet, InEventScreenData) == 0x000000, "Member 'FortEventPurchaseLevelsModal_OnEventScreenDataSet::InEventScreenData' has a wrong offset!");

// Function EventScreenBase.FortEventPurchaseLevelsModal.OnPurchaseAmountChanged
// 0x0010 (0x0010 - 0x0000)
struct FortEventPurchaseLevelsModal_OnPurchaseAmountChanged final
{
public:
	int32                                         TotalPrice;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelQuantity;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseQuantity;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceQuantity;                                  // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchaseLevelsModal_OnPurchaseAmountChanged) == 0x000004, "Wrong alignment on FortEventPurchaseLevelsModal_OnPurchaseAmountChanged");
static_assert(sizeof(FortEventPurchaseLevelsModal_OnPurchaseAmountChanged) == 0x000010, "Wrong size on FortEventPurchaseLevelsModal_OnPurchaseAmountChanged");
static_assert(offsetof(FortEventPurchaseLevelsModal_OnPurchaseAmountChanged, TotalPrice) == 0x000000, "Member 'FortEventPurchaseLevelsModal_OnPurchaseAmountChanged::TotalPrice' has a wrong offset!");
static_assert(offsetof(FortEventPurchaseLevelsModal_OnPurchaseAmountChanged, LevelQuantity) == 0x000004, "Member 'FortEventPurchaseLevelsModal_OnPurchaseAmountChanged::LevelQuantity' has a wrong offset!");
static_assert(offsetof(FortEventPurchaseLevelsModal_OnPurchaseAmountChanged, PurchaseQuantity) == 0x000008, "Member 'FortEventPurchaseLevelsModal_OnPurchaseAmountChanged::PurchaseQuantity' has a wrong offset!");
static_assert(offsetof(FortEventPurchaseLevelsModal_OnPurchaseAmountChanged, ResourceQuantity) == 0x00000C, "Member 'FortEventPurchaseLevelsModal_OnPurchaseAmountChanged::ResourceQuantity' has a wrong offset!");

// Function EventScreenBase.FortEventPurchaseLevelsModal.GetEventScreenData
// 0x0008 (0x0008 - 0x0000)
struct FortEventPurchaseLevelsModal_GetEventScreenData final
{
public:
	const class UFortEventScreenData*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchaseLevelsModal_GetEventScreenData) == 0x000008, "Wrong alignment on FortEventPurchaseLevelsModal_GetEventScreenData");
static_assert(sizeof(FortEventPurchaseLevelsModal_GetEventScreenData) == 0x000008, "Wrong size on FortEventPurchaseLevelsModal_GetEventScreenData");
static_assert(offsetof(FortEventPurchaseLevelsModal_GetEventScreenData, ReturnValue) == 0x000000, "Member 'FortEventPurchaseLevelsModal_GetEventScreenData::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortPurchasePremiumTrackBody.OnPopulate
// 0x0020 (0x0020 - 0x0000)
struct FortPurchasePremiumTrackBody_OnPopulate final
{
public:
	int32                                         BodyIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BodyText;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchasePremiumTrackBody_OnPopulate) == 0x000008, "Wrong alignment on FortPurchasePremiumTrackBody_OnPopulate");
static_assert(sizeof(FortPurchasePremiumTrackBody_OnPopulate) == 0x000020, "Wrong size on FortPurchasePremiumTrackBody_OnPopulate");
static_assert(offsetof(FortPurchasePremiumTrackBody_OnPopulate, BodyIndex) == 0x000000, "Member 'FortPurchasePremiumTrackBody_OnPopulate::BodyIndex' has a wrong offset!");
static_assert(offsetof(FortPurchasePremiumTrackBody_OnPopulate, BodyText) == 0x000008, "Member 'FortPurchasePremiumTrackBody_OnPopulate::BodyText' has a wrong offset!");

// Function EventScreenBase.FortEventPurchasePremiumTrackModal.HandlePurchaseComplete
// 0x0028 (0x0028 - 0x0000)
struct FortEventPurchasePremiumTrackModal_HandlePurchaseComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPurchasedItemInfo>             PurchasedItems;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InOfferId;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchasePremiumTrackModal_HandlePurchaseComplete) == 0x000008, "Wrong alignment on FortEventPurchasePremiumTrackModal_HandlePurchaseComplete");
static_assert(sizeof(FortEventPurchasePremiumTrackModal_HandlePurchaseComplete) == 0x000028, "Wrong size on FortEventPurchasePremiumTrackModal_HandlePurchaseComplete");
static_assert(offsetof(FortEventPurchasePremiumTrackModal_HandlePurchaseComplete, bSuccess) == 0x000000, "Member 'FortEventPurchasePremiumTrackModal_HandlePurchaseComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(FortEventPurchasePremiumTrackModal_HandlePurchaseComplete, PurchasedItems) == 0x000008, "Member 'FortEventPurchasePremiumTrackModal_HandlePurchaseComplete::PurchasedItems' has a wrong offset!");
static_assert(offsetof(FortEventPurchasePremiumTrackModal_HandlePurchaseComplete, InOfferId) == 0x000018, "Member 'FortEventPurchasePremiumTrackModal_HandlePurchaseComplete::InOfferId' has a wrong offset!");

// Function EventScreenBase.FortEventPurchasePremiumTrackModal.OnCMSTextApplied
// 0x0030 (0x0030 - 0x0000)
struct FortEventPurchasePremiumTrackModal_OnCMSTextApplied final
{
public:
	class FText                                   HeaderText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   LegalText;                                         // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchasePremiumTrackModal_OnCMSTextApplied) == 0x000008, "Wrong alignment on FortEventPurchasePremiumTrackModal_OnCMSTextApplied");
static_assert(sizeof(FortEventPurchasePremiumTrackModal_OnCMSTextApplied) == 0x000030, "Wrong size on FortEventPurchasePremiumTrackModal_OnCMSTextApplied");
static_assert(offsetof(FortEventPurchasePremiumTrackModal_OnCMSTextApplied, HeaderText) == 0x000000, "Member 'FortEventPurchasePremiumTrackModal_OnCMSTextApplied::HeaderText' has a wrong offset!");
static_assert(offsetof(FortEventPurchasePremiumTrackModal_OnCMSTextApplied, LegalText) == 0x000018, "Member 'FortEventPurchasePremiumTrackModal_OnCMSTextApplied::LegalText' has a wrong offset!");

// Function EventScreenBase.FortEventPurchasePremiumTrackModal.OnEventScreenDataSet
// 0x0008 (0x0008 - 0x0000)
struct FortEventPurchasePremiumTrackModal_OnEventScreenDataSet final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchasePremiumTrackModal_OnEventScreenDataSet) == 0x000008, "Wrong alignment on FortEventPurchasePremiumTrackModal_OnEventScreenDataSet");
static_assert(sizeof(FortEventPurchasePremiumTrackModal_OnEventScreenDataSet) == 0x000008, "Wrong size on FortEventPurchasePremiumTrackModal_OnEventScreenDataSet");
static_assert(offsetof(FortEventPurchasePremiumTrackModal_OnEventScreenDataSet, InEventScreenData) == 0x000000, "Member 'FortEventPurchasePremiumTrackModal_OnEventScreenDataSet::InEventScreenData' has a wrong offset!");

// Function EventScreenBase.FortEventPurchasePremiumTrackModal.OnPriceSet
// 0x0004 (0x0004 - 0x0000)
struct FortEventPurchasePremiumTrackModal_OnPriceSet final
{
public:
	int32                                         Price;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchasePremiumTrackModal_OnPriceSet) == 0x000004, "Wrong alignment on FortEventPurchasePremiumTrackModal_OnPriceSet");
static_assert(sizeof(FortEventPurchasePremiumTrackModal_OnPriceSet) == 0x000004, "Wrong size on FortEventPurchasePremiumTrackModal_OnPriceSet");
static_assert(offsetof(FortEventPurchasePremiumTrackModal_OnPriceSet, Price) == 0x000000, "Member 'FortEventPurchasePremiumTrackModal_OnPriceSet::Price' has a wrong offset!");

// Function EventScreenBase.FortEventPurchasePremiumTrackModal.GetEventScreenData
// 0x0008 (0x0008 - 0x0000)
struct FortEventPurchasePremiumTrackModal_GetEventScreenData final
{
public:
	const class UFortEventScreenData*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPurchasePremiumTrackModal_GetEventScreenData) == 0x000008, "Wrong alignment on FortEventPurchasePremiumTrackModal_GetEventScreenData");
static_assert(sizeof(FortEventPurchasePremiumTrackModal_GetEventScreenData) == 0x000008, "Wrong size on FortEventPurchasePremiumTrackModal_GetEventScreenData");
static_assert(offsetof(FortEventPurchasePremiumTrackModal_GetEventScreenData, ReturnValue) == 0x000000, "Member 'FortEventPurchasePremiumTrackModal_GetEventScreenData::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventRewardTracksWidget.BPOnEventScreenDataSet
// 0x0008 (0x0008 - 0x0000)
struct FortEventRewardTracksWidget_BPOnEventScreenDataSet final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardTracksWidget_BPOnEventScreenDataSet) == 0x000008, "Wrong alignment on FortEventRewardTracksWidget_BPOnEventScreenDataSet");
static_assert(sizeof(FortEventRewardTracksWidget_BPOnEventScreenDataSet) == 0x000008, "Wrong size on FortEventRewardTracksWidget_BPOnEventScreenDataSet");
static_assert(offsetof(FortEventRewardTracksWidget_BPOnEventScreenDataSet, InEventScreenData) == 0x000000, "Member 'FortEventRewardTracksWidget_BPOnEventScreenDataSet::InEventScreenData' has a wrong offset!");

// Function EventScreenBase.FortEventRewardTracksWidget.BPOnSetRewardItem
// 0x0018 (0x0018 - 0x0000)
struct FortEventRewardTracksWidget_BPOnSetRewardItem final
{
public:
	int32                                         RequiredProgress;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingProgress;                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RewardProgressPercent;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewProgressPercent;                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverallProgressPercent;                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPreviewMode;                                    // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEventRewardTracksWidget_BPOnSetRewardItem) == 0x000004, "Wrong alignment on FortEventRewardTracksWidget_BPOnSetRewardItem");
static_assert(sizeof(FortEventRewardTracksWidget_BPOnSetRewardItem) == 0x000018, "Wrong size on FortEventRewardTracksWidget_BPOnSetRewardItem");
static_assert(offsetof(FortEventRewardTracksWidget_BPOnSetRewardItem, RequiredProgress) == 0x000000, "Member 'FortEventRewardTracksWidget_BPOnSetRewardItem::RequiredProgress' has a wrong offset!");
static_assert(offsetof(FortEventRewardTracksWidget_BPOnSetRewardItem, RemainingProgress) == 0x000004, "Member 'FortEventRewardTracksWidget_BPOnSetRewardItem::RemainingProgress' has a wrong offset!");
static_assert(offsetof(FortEventRewardTracksWidget_BPOnSetRewardItem, RewardProgressPercent) == 0x000008, "Member 'FortEventRewardTracksWidget_BPOnSetRewardItem::RewardProgressPercent' has a wrong offset!");
static_assert(offsetof(FortEventRewardTracksWidget_BPOnSetRewardItem, PreviewProgressPercent) == 0x00000C, "Member 'FortEventRewardTracksWidget_BPOnSetRewardItem::PreviewProgressPercent' has a wrong offset!");
static_assert(offsetof(FortEventRewardTracksWidget_BPOnSetRewardItem, OverallProgressPercent) == 0x000010, "Member 'FortEventRewardTracksWidget_BPOnSetRewardItem::OverallProgressPercent' has a wrong offset!");
static_assert(offsetof(FortEventRewardTracksWidget_BPOnSetRewardItem, bInPreviewMode) == 0x000014, "Member 'FortEventRewardTracksWidget_BPOnSetRewardItem::bInPreviewMode' has a wrong offset!");

// Function EventScreenBase.FortEventRewardTracksWidget.BPSetAllRewardsCollected
// 0x0001 (0x0001 - 0x0000)
struct FortEventRewardTracksWidget_BPSetAllRewardsCollected final
{
public:
	bool                                          bAllCollected;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardTracksWidget_BPSetAllRewardsCollected) == 0x000001, "Wrong alignment on FortEventRewardTracksWidget_BPSetAllRewardsCollected");
static_assert(sizeof(FortEventRewardTracksWidget_BPSetAllRewardsCollected) == 0x000001, "Wrong size on FortEventRewardTracksWidget_BPSetAllRewardsCollected");
static_assert(offsetof(FortEventRewardTracksWidget_BPSetAllRewardsCollected, bAllCollected) == 0x000000, "Member 'FortEventRewardTracksWidget_BPSetAllRewardsCollected::bAllCollected' has a wrong offset!");

// Function EventScreenBase.FortEventRewardTracksWidget.BPSetProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct FortEventRewardTracksWidget_BPSetProgressPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardTracksWidget_BPSetProgressPercent) == 0x000004, "Wrong alignment on FortEventRewardTracksWidget_BPSetProgressPercent");
static_assert(sizeof(FortEventRewardTracksWidget_BPSetProgressPercent) == 0x000004, "Wrong size on FortEventRewardTracksWidget_BPSetProgressPercent");
static_assert(offsetof(FortEventRewardTracksWidget_BPSetProgressPercent, Percent) == 0x000000, "Member 'FortEventRewardTracksWidget_BPSetProgressPercent::Percent' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.OnEventScreenDataSet
// 0x0008 (0x0008 - 0x0000)
struct FortEventRewardWidget_OnEventScreenDataSet final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_OnEventScreenDataSet) == 0x000008, "Wrong alignment on FortEventRewardWidget_OnEventScreenDataSet");
static_assert(sizeof(FortEventRewardWidget_OnEventScreenDataSet) == 0x000008, "Wrong size on FortEventRewardWidget_OnEventScreenDataSet");
static_assert(offsetof(FortEventRewardWidget_OnEventScreenDataSet, InEventScreenData) == 0x000000, "Member 'FortEventRewardWidget_OnEventScreenDataSet::InEventScreenData' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct FortEventRewardWidget_OnInputMethodChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_OnInputMethodChanged) == 0x000001, "Wrong alignment on FortEventRewardWidget_OnInputMethodChanged");
static_assert(sizeof(FortEventRewardWidget_OnInputMethodChanged) == 0x000001, "Wrong size on FortEventRewardWidget_OnInputMethodChanged");
static_assert(offsetof(FortEventRewardWidget_OnInputMethodChanged, NewInputType) == 0x000000, "Member 'FortEventRewardWidget_OnInputMethodChanged::NewInputType' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.OnSetRewardItem
// 0x0018 (0x0018 - 0x0000)
struct FortEventRewardWidget_OnSetRewardItem final
{
public:
	int32                                         RequiredProgress;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingProgress;                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RewardProgressPercent;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewProgressPercent;                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverallProgressPercent;                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPreviewMode;                                    // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEventRewardWidget_OnSetRewardItem) == 0x000004, "Wrong alignment on FortEventRewardWidget_OnSetRewardItem");
static_assert(sizeof(FortEventRewardWidget_OnSetRewardItem) == 0x000018, "Wrong size on FortEventRewardWidget_OnSetRewardItem");
static_assert(offsetof(FortEventRewardWidget_OnSetRewardItem, RequiredProgress) == 0x000000, "Member 'FortEventRewardWidget_OnSetRewardItem::RequiredProgress' has a wrong offset!");
static_assert(offsetof(FortEventRewardWidget_OnSetRewardItem, RemainingProgress) == 0x000004, "Member 'FortEventRewardWidget_OnSetRewardItem::RemainingProgress' has a wrong offset!");
static_assert(offsetof(FortEventRewardWidget_OnSetRewardItem, RewardProgressPercent) == 0x000008, "Member 'FortEventRewardWidget_OnSetRewardItem::RewardProgressPercent' has a wrong offset!");
static_assert(offsetof(FortEventRewardWidget_OnSetRewardItem, PreviewProgressPercent) == 0x00000C, "Member 'FortEventRewardWidget_OnSetRewardItem::PreviewProgressPercent' has a wrong offset!");
static_assert(offsetof(FortEventRewardWidget_OnSetRewardItem, OverallProgressPercent) == 0x000010, "Member 'FortEventRewardWidget_OnSetRewardItem::OverallProgressPercent' has a wrong offset!");
static_assert(offsetof(FortEventRewardWidget_OnSetRewardItem, bInPreviewMode) == 0x000014, "Member 'FortEventRewardWidget_OnSetRewardItem::bInPreviewMode' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetAllRewardsCollected
// 0x0001 (0x0001 - 0x0000)
struct FortEventRewardWidget_SetAllRewardsCollected final
{
public:
	bool                                          bAllCollected;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_SetAllRewardsCollected) == 0x000001, "Wrong alignment on FortEventRewardWidget_SetAllRewardsCollected");
static_assert(sizeof(FortEventRewardWidget_SetAllRewardsCollected) == 0x000001, "Wrong size on FortEventRewardWidget_SetAllRewardsCollected");
static_assert(offsetof(FortEventRewardWidget_SetAllRewardsCollected, bAllCollected) == 0x000000, "Member 'FortEventRewardWidget_SetAllRewardsCollected::bAllCollected' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetCustomItemIcon
// 0x0008 (0x0008 - 0x0000)
struct FortEventRewardWidget_SetCustomItemIcon final
{
public:
	const class UTexture2D*                       CustomItemIcon;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_SetCustomItemIcon) == 0x000008, "Wrong alignment on FortEventRewardWidget_SetCustomItemIcon");
static_assert(sizeof(FortEventRewardWidget_SetCustomItemIcon) == 0x000008, "Wrong size on FortEventRewardWidget_SetCustomItemIcon");
static_assert(offsetof(FortEventRewardWidget_SetCustomItemIcon, CustomItemIcon) == 0x000000, "Member 'FortEventRewardWidget_SetCustomItemIcon::CustomItemIcon' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetDoubleWidth
// 0x0001 (0x0001 - 0x0000)
struct FortEventRewardWidget_SetDoubleWidth final
{
public:
	bool                                          bDoubleWidth;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_SetDoubleWidth) == 0x000001, "Wrong alignment on FortEventRewardWidget_SetDoubleWidth");
static_assert(sizeof(FortEventRewardWidget_SetDoubleWidth) == 0x000001, "Wrong size on FortEventRewardWidget_SetDoubleWidth");
static_assert(offsetof(FortEventRewardWidget_SetDoubleWidth, bDoubleWidth) == 0x000000, "Member 'FortEventRewardWidget_SetDoubleWidth::bDoubleWidth' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetInPremiumUpgradeState
// 0x0001 (0x0001 - 0x0000)
struct FortEventRewardWidget_SetInPremiumUpgradeState final
{
public:
	bool                                          bHighlighted;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_SetInPremiumUpgradeState) == 0x000001, "Wrong alignment on FortEventRewardWidget_SetInPremiumUpgradeState");
static_assert(sizeof(FortEventRewardWidget_SetInPremiumUpgradeState) == 0x000001, "Wrong size on FortEventRewardWidget_SetInPremiumUpgradeState");
static_assert(offsetof(FortEventRewardWidget_SetInPremiumUpgradeState, bHighlighted) == 0x000000, "Member 'FortEventRewardWidget_SetInPremiumUpgradeState::bHighlighted' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetInPreviewedState
// 0x0001 (0x0001 - 0x0000)
struct FortEventRewardWidget_SetInPreviewedState final
{
public:
	bool                                          bPreviewed;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_SetInPreviewedState) == 0x000001, "Wrong alignment on FortEventRewardWidget_SetInPreviewedState");
static_assert(sizeof(FortEventRewardWidget_SetInPreviewedState) == 0x000001, "Wrong size on FortEventRewardWidget_SetInPreviewedState");
static_assert(offsetof(FortEventRewardWidget_SetInPreviewedState, bPreviewed) == 0x000000, "Member 'FortEventRewardWidget_SetInPreviewedState::bPreviewed' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetInPreviewSelectedState
// 0x0001 (0x0001 - 0x0000)
struct FortEventRewardWidget_SetInPreviewSelectedState final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_SetInPreviewSelectedState) == 0x000001, "Wrong alignment on FortEventRewardWidget_SetInPreviewSelectedState");
static_assert(sizeof(FortEventRewardWidget_SetInPreviewSelectedState) == 0x000001, "Wrong size on FortEventRewardWidget_SetInPreviewSelectedState");
static_assert(offsetof(FortEventRewardWidget_SetInPreviewSelectedState, bSelected) == 0x000000, "Member 'FortEventRewardWidget_SetInPreviewSelectedState::bSelected' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetInSelectedState
// 0x0001 (0x0001 - 0x0000)
struct FortEventRewardWidget_SetInSelectedState final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_SetInSelectedState) == 0x000001, "Wrong alignment on FortEventRewardWidget_SetInSelectedState");
static_assert(sizeof(FortEventRewardWidget_SetInSelectedState) == 0x000001, "Wrong size on FortEventRewardWidget_SetInSelectedState");
static_assert(offsetof(FortEventRewardWidget_SetInSelectedState, bSelected) == 0x000000, "Member 'FortEventRewardWidget_SetInSelectedState::bSelected' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetIsBannerItem
// 0x0001 (0x0001 - 0x0000)
struct FortEventRewardWidget_SetIsBannerItem final
{
public:
	bool                                          bIsBanner;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_SetIsBannerItem) == 0x000001, "Wrong alignment on FortEventRewardWidget_SetIsBannerItem");
static_assert(sizeof(FortEventRewardWidget_SetIsBannerItem) == 0x000001, "Wrong size on FortEventRewardWidget_SetIsBannerItem");
static_assert(offsetof(FortEventRewardWidget_SetIsBannerItem, bIsBanner) == 0x000000, "Member 'FortEventRewardWidget_SetIsBannerItem::bIsBanner' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct FortEventRewardWidget_SetProgressPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_SetProgressPercent) == 0x000004, "Wrong alignment on FortEventRewardWidget_SetProgressPercent");
static_assert(sizeof(FortEventRewardWidget_SetProgressPercent) == 0x000004, "Wrong size on FortEventRewardWidget_SetProgressPercent");
static_assert(offsetof(FortEventRewardWidget_SetProgressPercent, Percent) == 0x000000, "Member 'FortEventRewardWidget_SetProgressPercent::Percent' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.SetTrackData
// 0x0034 (0x0034 - 0x0000)
struct FortEventRewardWidget_SetTrackData final
{
public:
	struct FEventScreenTrackData                  TrackData;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsOwned;                                          // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEventRewardWidget_SetTrackData) == 0x000004, "Wrong alignment on FortEventRewardWidget_SetTrackData");
static_assert(sizeof(FortEventRewardWidget_SetTrackData) == 0x000034, "Wrong size on FortEventRewardWidget_SetTrackData");
static_assert(offsetof(FortEventRewardWidget_SetTrackData, TrackData) == 0x000000, "Member 'FortEventRewardWidget_SetTrackData::TrackData' has a wrong offset!");
static_assert(offsetof(FortEventRewardWidget_SetTrackData, bIsOwned) == 0x000030, "Member 'FortEventRewardWidget_SetTrackData::bIsOwned' has a wrong offset!");

// Function EventScreenBase.FortEventRewardWidget.GetEventScreenData
// 0x0008 (0x0008 - 0x0000)
struct FortEventRewardWidget_GetEventScreenData final
{
public:
	const class UFortEventScreenData*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventRewardWidget_GetEventScreenData) == 0x000008, "Wrong alignment on FortEventRewardWidget_GetEventScreenData");
static_assert(sizeof(FortEventRewardWidget_GetEventScreenData) == 0x000008, "Wrong size on FortEventRewardWidget_GetEventScreenData");
static_assert(offsetof(FortEventRewardWidget_GetEventScreenData, ReturnValue) == 0x000000, "Member 'FortEventRewardWidget_GetEventScreenData::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.HandleActiveSeasonDataChanged
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenBase_HandleActiveSeasonDataChanged final
{
public:
	TArray<class FString>                         ActiveEventFlags;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_HandleActiveSeasonDataChanged) == 0x000008, "Wrong alignment on FortEventScreenBase_HandleActiveSeasonDataChanged");
static_assert(sizeof(FortEventScreenBase_HandleActiveSeasonDataChanged) == 0x000010, "Wrong size on FortEventScreenBase_HandleActiveSeasonDataChanged");
static_assert(offsetof(FortEventScreenBase_HandleActiveSeasonDataChanged, ActiveEventFlags) == 0x000000, "Member 'FortEventScreenBase_HandleActiveSeasonDataChanged::ActiveEventFlags' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.HandleItemShown
// 0x0008 (0x0008 - 0x0000)
struct FortEventScreenBase_HandleItemShown final
{
public:
	const class UFortAccountItemDefinition*       AccountItemDef;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_HandleItemShown) == 0x000008, "Wrong alignment on FortEventScreenBase_HandleItemShown");
static_assert(sizeof(FortEventScreenBase_HandleItemShown) == 0x000008, "Wrong size on FortEventScreenBase_HandleItemShown");
static_assert(offsetof(FortEventScreenBase_HandleItemShown, AccountItemDef) == 0x000000, "Member 'FortEventScreenBase_HandleItemShown::AccountItemDef' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.HandleRewardListNavigateRightEvent
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenBase_HandleRewardListNavigateRightEvent final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_HandleRewardListNavigateRightEvent) == 0x000008, "Wrong alignment on FortEventScreenBase_HandleRewardListNavigateRightEvent");
static_assert(sizeof(FortEventScreenBase_HandleRewardListNavigateRightEvent) == 0x000010, "Wrong size on FortEventScreenBase_HandleRewardListNavigateRightEvent");
static_assert(offsetof(FortEventScreenBase_HandleRewardListNavigateRightEvent, InNavigation) == 0x000000, "Member 'FortEventScreenBase_HandleRewardListNavigateRightEvent::InNavigation' has a wrong offset!");
static_assert(offsetof(FortEventScreenBase_HandleRewardListNavigateRightEvent, ReturnValue) == 0x000008, "Member 'FortEventScreenBase_HandleRewardListNavigateRightEvent::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.HandleRewardListNavigateUpEvent
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenBase_HandleRewardListNavigateUpEvent final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_HandleRewardListNavigateUpEvent) == 0x000008, "Wrong alignment on FortEventScreenBase_HandleRewardListNavigateUpEvent");
static_assert(sizeof(FortEventScreenBase_HandleRewardListNavigateUpEvent) == 0x000010, "Wrong size on FortEventScreenBase_HandleRewardListNavigateUpEvent");
static_assert(offsetof(FortEventScreenBase_HandleRewardListNavigateUpEvent, InNavigation) == 0x000000, "Member 'FortEventScreenBase_HandleRewardListNavigateUpEvent::InNavigation' has a wrong offset!");
static_assert(offsetof(FortEventScreenBase_HandleRewardListNavigateUpEvent, ReturnValue) == 0x000008, "Member 'FortEventScreenBase_HandleRewardListNavigateUpEvent::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.HandleToggleFullscreenMap
// 0x0001 (0x0001 - 0x0000)
struct FortEventScreenBase_HandleToggleFullscreenMap final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_HandleToggleFullscreenMap) == 0x000001, "Wrong alignment on FortEventScreenBase_HandleToggleFullscreenMap");
static_assert(sizeof(FortEventScreenBase_HandleToggleFullscreenMap) == 0x000001, "Wrong size on FortEventScreenBase_HandleToggleFullscreenMap");
static_assert(offsetof(FortEventScreenBase_HandleToggleFullscreenMap, bVisible) == 0x000000, "Member 'FortEventScreenBase_HandleToggleFullscreenMap::bVisible' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.HandleUpsellPromptNavigateUpEvent
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenBase_HandleUpsellPromptNavigateUpEvent final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_HandleUpsellPromptNavigateUpEvent) == 0x000008, "Wrong alignment on FortEventScreenBase_HandleUpsellPromptNavigateUpEvent");
static_assert(sizeof(FortEventScreenBase_HandleUpsellPromptNavigateUpEvent) == 0x000010, "Wrong size on FortEventScreenBase_HandleUpsellPromptNavigateUpEvent");
static_assert(offsetof(FortEventScreenBase_HandleUpsellPromptNavigateUpEvent, InNavigation) == 0x000000, "Member 'FortEventScreenBase_HandleUpsellPromptNavigateUpEvent::InNavigation' has a wrong offset!");
static_assert(offsetof(FortEventScreenBase_HandleUpsellPromptNavigateUpEvent, ReturnValue) == 0x000008, "Member 'FortEventScreenBase_HandleUpsellPromptNavigateUpEvent::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.OnCalendarEventEnded
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenBase_OnCalendarEventEnded final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_OnCalendarEventEnded) == 0x000008, "Wrong alignment on FortEventScreenBase_OnCalendarEventEnded");
static_assert(sizeof(FortEventScreenBase_OnCalendarEventEnded) == 0x000010, "Wrong size on FortEventScreenBase_OnCalendarEventEnded");
static_assert(offsetof(FortEventScreenBase_OnCalendarEventEnded, EventName) == 0x000000, "Member 'FortEventScreenBase_OnCalendarEventEnded::EventName' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.OnCalendarEventStarted
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenBase_OnCalendarEventStarted final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_OnCalendarEventStarted) == 0x000008, "Wrong alignment on FortEventScreenBase_OnCalendarEventStarted");
static_assert(sizeof(FortEventScreenBase_OnCalendarEventStarted) == 0x000010, "Wrong size on FortEventScreenBase_OnCalendarEventStarted");
static_assert(offsetof(FortEventScreenBase_OnCalendarEventStarted, EventName) == 0x000000, "Member 'FortEventScreenBase_OnCalendarEventStarted::EventName' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.OnRewardPreviewItemChanged
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenBase_OnRewardPreviewItemChanged final
{
public:
	const class UFortAccountItemDefinition*       Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFreeTrack;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEventScreenBase_OnRewardPreviewItemChanged) == 0x000008, "Wrong alignment on FortEventScreenBase_OnRewardPreviewItemChanged");
static_assert(sizeof(FortEventScreenBase_OnRewardPreviewItemChanged) == 0x000010, "Wrong size on FortEventScreenBase_OnRewardPreviewItemChanged");
static_assert(offsetof(FortEventScreenBase_OnRewardPreviewItemChanged, Item) == 0x000000, "Member 'FortEventScreenBase_OnRewardPreviewItemChanged::Item' has a wrong offset!");
static_assert(offsetof(FortEventScreenBase_OnRewardPreviewItemChanged, bFreeTrack) == 0x000008, "Member 'FortEventScreenBase_OnRewardPreviewItemChanged::bFreeTrack' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.OnScreenViewChanged
// 0x0002 (0x0002 - 0x0000)
struct FortEventScreenBase_OnScreenViewChanged final
{
public:
	EEventScreenView                              PrevScreenView;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventScreenView                              NewScreenView;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_OnScreenViewChanged) == 0x000001, "Wrong alignment on FortEventScreenBase_OnScreenViewChanged");
static_assert(sizeof(FortEventScreenBase_OnScreenViewChanged) == 0x000002, "Wrong size on FortEventScreenBase_OnScreenViewChanged");
static_assert(offsetof(FortEventScreenBase_OnScreenViewChanged, PrevScreenView) == 0x000000, "Member 'FortEventScreenBase_OnScreenViewChanged::PrevScreenView' has a wrong offset!");
static_assert(offsetof(FortEventScreenBase_OnScreenViewChanged, NewScreenView) == 0x000001, "Member 'FortEventScreenBase_OnScreenViewChanged::NewScreenView' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.OnSetBonusInfo
// 0x0018 (0x0018 - 0x0000)
struct FortEventScreenBase_OnSetBonusInfo final
{
public:
	struct FBonusInfoMiniTagData                  BonusInfo;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_OnSetBonusInfo) == 0x000008, "Wrong alignment on FortEventScreenBase_OnSetBonusInfo");
static_assert(sizeof(FortEventScreenBase_OnSetBonusInfo) == 0x000018, "Wrong size on FortEventScreenBase_OnSetBonusInfo");
static_assert(offsetof(FortEventScreenBase_OnSetBonusInfo, BonusInfo) == 0x000000, "Member 'FortEventScreenBase_OnSetBonusInfo::BonusInfo' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.SetItemShopCallout
// 0x0018 (0x0018 - 0x0000)
struct FortEventScreenBase_SetItemShopCallout final
{
public:
	class FText                                   ItemShopCalloutText;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_SetItemShopCallout) == 0x000008, "Wrong alignment on FortEventScreenBase_SetItemShopCallout");
static_assert(sizeof(FortEventScreenBase_SetItemShopCallout) == 0x000018, "Wrong size on FortEventScreenBase_SetItemShopCallout");
static_assert(offsetof(FortEventScreenBase_SetItemShopCallout, ItemShopCalloutText) == 0x000000, "Member 'FortEventScreenBase_SetItemShopCallout::ItemShopCalloutText' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.SetItemShopOfferInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortEventScreenBase_SetItemShopOfferInfoVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_SetItemShopOfferInfoVisibility) == 0x000001, "Wrong alignment on FortEventScreenBase_SetItemShopOfferInfoVisibility");
static_assert(sizeof(FortEventScreenBase_SetItemShopOfferInfoVisibility) == 0x000001, "Wrong size on FortEventScreenBase_SetItemShopOfferInfoVisibility");
static_assert(offsetof(FortEventScreenBase_SetItemShopOfferInfoVisibility, bIsVisible) == 0x000000, "Member 'FortEventScreenBase_SetItemShopOfferInfoVisibility::bIsVisible' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.SetRewardTrackLegal
// 0x0018 (0x0018 - 0x0000)
struct FortEventScreenBase_SetRewardTrackLegal final
{
public:
	class FText                                   LegalText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_SetRewardTrackLegal) == 0x000008, "Wrong alignment on FortEventScreenBase_SetRewardTrackLegal");
static_assert(sizeof(FortEventScreenBase_SetRewardTrackLegal) == 0x000018, "Wrong size on FortEventScreenBase_SetRewardTrackLegal");
static_assert(offsetof(FortEventScreenBase_SetRewardTrackLegal, LegalText) == 0x000000, "Member 'FortEventScreenBase_SetRewardTrackLegal::LegalText' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.UpdateVariantCounter
// 0x0008 (0x0008 - 0x0000)
struct FortEventScreenBase_UpdateVariantCounter final
{
public:
	int32                                         CurrentVariantIndex;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumVariants;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_UpdateVariantCounter) == 0x000004, "Wrong alignment on FortEventScreenBase_UpdateVariantCounter");
static_assert(sizeof(FortEventScreenBase_UpdateVariantCounter) == 0x000008, "Wrong size on FortEventScreenBase_UpdateVariantCounter");
static_assert(offsetof(FortEventScreenBase_UpdateVariantCounter, CurrentVariantIndex) == 0x000000, "Member 'FortEventScreenBase_UpdateVariantCounter::CurrentVariantIndex' has a wrong offset!");
static_assert(offsetof(FortEventScreenBase_UpdateVariantCounter, TotalNumVariants) == 0x000004, "Member 'FortEventScreenBase_UpdateVariantCounter::TotalNumVariants' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.GetActiveModal
// 0x0008 (0x0008 - 0x0000)
struct FortEventScreenBase_GetActiveModal final
{
public:
	class UFortEventModalBase*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_GetActiveModal) == 0x000008, "Wrong alignment on FortEventScreenBase_GetActiveModal");
static_assert(sizeof(FortEventScreenBase_GetActiveModal) == 0x000008, "Wrong size on FortEventScreenBase_GetActiveModal");
static_assert(offsetof(FortEventScreenBase_GetActiveModal, ReturnValue) == 0x000000, "Member 'FortEventScreenBase_GetActiveModal::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.GetEventTimeRemaining
// 0x0008 (0x0008 - 0x0000)
struct FortEventScreenBase_GetEventTimeRemaining final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_GetEventTimeRemaining) == 0x000008, "Wrong alignment on FortEventScreenBase_GetEventTimeRemaining");
static_assert(sizeof(FortEventScreenBase_GetEventTimeRemaining) == 0x000008, "Wrong size on FortEventScreenBase_GetEventTimeRemaining");
static_assert(offsetof(FortEventScreenBase_GetEventTimeRemaining, ReturnValue) == 0x000000, "Member 'FortEventScreenBase_GetEventTimeRemaining::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.GetVaultWorldBackgroundMID
// 0x0008 (0x0008 - 0x0000)
struct FortEventScreenBase_GetVaultWorldBackgroundMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_GetVaultWorldBackgroundMID) == 0x000008, "Wrong alignment on FortEventScreenBase_GetVaultWorldBackgroundMID");
static_assert(sizeof(FortEventScreenBase_GetVaultWorldBackgroundMID) == 0x000008, "Wrong size on FortEventScreenBase_GetVaultWorldBackgroundMID");
static_assert(offsetof(FortEventScreenBase_GetVaultWorldBackgroundMID, ReturnValue) == 0x000000, "Member 'FortEventScreenBase_GetVaultWorldBackgroundMID::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.GetVaultWorldFloorMID
// 0x0008 (0x0008 - 0x0000)
struct FortEventScreenBase_GetVaultWorldFloorMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_GetVaultWorldFloorMID) == 0x000008, "Wrong alignment on FortEventScreenBase_GetVaultWorldFloorMID");
static_assert(sizeof(FortEventScreenBase_GetVaultWorldFloorMID) == 0x000008, "Wrong size on FortEventScreenBase_GetVaultWorldFloorMID");
static_assert(offsetof(FortEventScreenBase_GetVaultWorldFloorMID, ReturnValue) == 0x000000, "Member 'FortEventScreenBase_GetVaultWorldFloorMID::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.HasAllRewardsCollected
// 0x0001 (0x0001 - 0x0000)
struct FortEventScreenBase_HasAllRewardsCollected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_HasAllRewardsCollected) == 0x000001, "Wrong alignment on FortEventScreenBase_HasAllRewardsCollected");
static_assert(sizeof(FortEventScreenBase_HasAllRewardsCollected) == 0x000001, "Wrong size on FortEventScreenBase_HasAllRewardsCollected");
static_assert(offsetof(FortEventScreenBase_HasAllRewardsCollected, ReturnValue) == 0x000000, "Member 'FortEventScreenBase_HasAllRewardsCollected::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.HasPurchasedPremiumTrack
// 0x0001 (0x0001 - 0x0000)
struct FortEventScreenBase_HasPurchasedPremiumTrack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenBase_HasPurchasedPremiumTrack) == 0x000001, "Wrong alignment on FortEventScreenBase_HasPurchasedPremiumTrack");
static_assert(sizeof(FortEventScreenBase_HasPurchasedPremiumTrack) == 0x000001, "Wrong size on FortEventScreenBase_HasPurchasedPremiumTrack");
static_assert(offsetof(FortEventScreenBase_HasPurchasedPremiumTrack, ReturnValue) == 0x000000, "Member 'FortEventScreenBase_HasPurchasedPremiumTrack::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenBase.IsCalendarEventActive
// 0x0018 (0x0018 - 0x0000)
struct FortEventScreenBase_IsCalendarEventActive final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEventScreenBase_IsCalendarEventActive) == 0x000008, "Wrong alignment on FortEventScreenBase_IsCalendarEventActive");
static_assert(sizeof(FortEventScreenBase_IsCalendarEventActive) == 0x000018, "Wrong size on FortEventScreenBase_IsCalendarEventActive");
static_assert(offsetof(FortEventScreenBase_IsCalendarEventActive, EventName) == 0x000000, "Member 'FortEventScreenBase_IsCalendarEventActive::EventName' has a wrong offset!");
static_assert(offsetof(FortEventScreenBase_IsCalendarEventActive, ReturnValue) == 0x000010, "Member 'FortEventScreenBase_IsCalendarEventActive::ReturnValue' has a wrong offset!");

// Function EventScreenBase.EventScreenListView.SetNativeTickAllowed
// 0x0001 (0x0001 - 0x0000)
struct EventScreenListView_SetNativeTickAllowed final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventScreenListView_SetNativeTickAllowed) == 0x000001, "Wrong alignment on EventScreenListView_SetNativeTickAllowed");
static_assert(sizeof(EventScreenListView_SetNativeTickAllowed) == 0x000001, "Wrong size on EventScreenListView_SetNativeTickAllowed");
static_assert(offsetof(EventScreenListView_SetNativeTickAllowed, bAllowed) == 0x000000, "Member 'EventScreenListView_SetNativeTickAllowed::bAllowed' has a wrong offset!");

// Function EventScreenBase.EventScreenListView.GetEventScreenData
// 0x0008 (0x0008 - 0x0000)
struct EventScreenListView_GetEventScreenData final
{
public:
	const class UFortEventScreenData*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventScreenListView_GetEventScreenData) == 0x000008, "Wrong alignment on EventScreenListView_GetEventScreenData");
static_assert(sizeof(EventScreenListView_GetEventScreenData) == 0x000008, "Wrong size on EventScreenListView_GetEventScreenData");
static_assert(offsetof(EventScreenListView_GetEventScreenData, ReturnValue) == 0x000000, "Member 'EventScreenListView_GetEventScreenData::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventScreenTeaser.BP_SetCountdownTimeRemaining
// 0x0008 (0x0008 - 0x0000)
struct FortEventScreenTeaser_BP_SetCountdownTimeRemaining final
{
public:
	struct FTimespan                              TimeRemaining;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenTeaser_BP_SetCountdownTimeRemaining) == 0x000008, "Wrong alignment on FortEventScreenTeaser_BP_SetCountdownTimeRemaining");
static_assert(sizeof(FortEventScreenTeaser_BP_SetCountdownTimeRemaining) == 0x000008, "Wrong size on FortEventScreenTeaser_BP_SetCountdownTimeRemaining");
static_assert(offsetof(FortEventScreenTeaser_BP_SetCountdownTimeRemaining, TimeRemaining) == 0x000000, "Member 'FortEventScreenTeaser_BP_SetCountdownTimeRemaining::TimeRemaining' has a wrong offset!");

// Function EventScreenBase.FortEventScreenTeaser.HandleActiveSeasonDataChanged
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenTeaser_HandleActiveSeasonDataChanged final
{
public:
	TArray<class FString>                         ActiveEventFlags;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenTeaser_HandleActiveSeasonDataChanged) == 0x000008, "Wrong alignment on FortEventScreenTeaser_HandleActiveSeasonDataChanged");
static_assert(sizeof(FortEventScreenTeaser_HandleActiveSeasonDataChanged) == 0x000010, "Wrong size on FortEventScreenTeaser_HandleActiveSeasonDataChanged");
static_assert(offsetof(FortEventScreenTeaser_HandleActiveSeasonDataChanged, ActiveEventFlags) == 0x000000, "Member 'FortEventScreenTeaser_HandleActiveSeasonDataChanged::ActiveEventFlags' has a wrong offset!");

// Function EventScreenBase.FortEventScreenTeaser.OnCalendarEventEnded
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenTeaser_OnCalendarEventEnded final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenTeaser_OnCalendarEventEnded) == 0x000008, "Wrong alignment on FortEventScreenTeaser_OnCalendarEventEnded");
static_assert(sizeof(FortEventScreenTeaser_OnCalendarEventEnded) == 0x000010, "Wrong size on FortEventScreenTeaser_OnCalendarEventEnded");
static_assert(offsetof(FortEventScreenTeaser_OnCalendarEventEnded, EventName) == 0x000000, "Member 'FortEventScreenTeaser_OnCalendarEventEnded::EventName' has a wrong offset!");

// Function EventScreenBase.FortEventScreenTeaser.OnCalendarEventStarted
// 0x0010 (0x0010 - 0x0000)
struct FortEventScreenTeaser_OnCalendarEventStarted final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventScreenTeaser_OnCalendarEventStarted) == 0x000008, "Wrong alignment on FortEventScreenTeaser_OnCalendarEventStarted");
static_assert(sizeof(FortEventScreenTeaser_OnCalendarEventStarted) == 0x000010, "Wrong size on FortEventScreenTeaser_OnCalendarEventStarted");
static_assert(offsetof(FortEventScreenTeaser_OnCalendarEventStarted, EventName) == 0x000000, "Member 'FortEventScreenTeaser_OnCalendarEventStarted::EventName' has a wrong offset!");

// Function EventScreenBase.FortEventScreenTeaser.IsCalendarEventActive
// 0x0018 (0x0018 - 0x0000)
struct FortEventScreenTeaser_IsCalendarEventActive final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEventScreenTeaser_IsCalendarEventActive) == 0x000008, "Wrong alignment on FortEventScreenTeaser_IsCalendarEventActive");
static_assert(sizeof(FortEventScreenTeaser_IsCalendarEventActive) == 0x000018, "Wrong size on FortEventScreenTeaser_IsCalendarEventActive");
static_assert(offsetof(FortEventScreenTeaser_IsCalendarEventActive, EventName) == 0x000000, "Member 'FortEventScreenTeaser_IsCalendarEventActive::EventName' has a wrong offset!");
static_assert(offsetof(FortEventScreenTeaser_IsCalendarEventActive, ReturnValue) == 0x000010, "Member 'FortEventScreenTeaser_IsCalendarEventActive::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventTokenCollectionWidget.OnRefreshIcon
// 0x0002 (0x0002 - 0x0000)
struct FortEventTokenCollectionWidget_OnRefreshIcon final
{
public:
	bool                                          IsCollected;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFirstViewAfterCollection;                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTokenCollectionWidget_OnRefreshIcon) == 0x000001, "Wrong alignment on FortEventTokenCollectionWidget_OnRefreshIcon");
static_assert(sizeof(FortEventTokenCollectionWidget_OnRefreshIcon) == 0x000002, "Wrong size on FortEventTokenCollectionWidget_OnRefreshIcon");
static_assert(offsetof(FortEventTokenCollectionWidget_OnRefreshIcon, IsCollected) == 0x000000, "Member 'FortEventTokenCollectionWidget_OnRefreshIcon::IsCollected' has a wrong offset!");
static_assert(offsetof(FortEventTokenCollectionWidget_OnRefreshIcon, bIsFirstViewAfterCollection) == 0x000001, "Member 'FortEventTokenCollectionWidget_OnRefreshIcon::bIsFirstViewAfterCollection' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule.OnModuleInitialized
// 0x0008 (0x0008 - 0x0000)
struct FortEventTrackerModule_OnModuleInitialized final
{
public:
	const class UFortEventScreenData*             InEventScreenData;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_OnModuleInitialized) == 0x000008, "Wrong alignment on FortEventTrackerModule_OnModuleInitialized");
static_assert(sizeof(FortEventTrackerModule_OnModuleInitialized) == 0x000008, "Wrong size on FortEventTrackerModule_OnModuleInitialized");
static_assert(offsetof(FortEventTrackerModule_OnModuleInitialized, InEventScreenData) == 0x000000, "Member 'FortEventTrackerModule_OnModuleInitialized::InEventScreenData' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule.GetEventScreenData
// 0x0008 (0x0008 - 0x0000)
struct FortEventTrackerModule_GetEventScreenData final
{
public:
	const class UFortEventScreenData*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_GetEventScreenData) == 0x000008, "Wrong alignment on FortEventTrackerModule_GetEventScreenData");
static_assert(sizeof(FortEventTrackerModule_GetEventScreenData) == 0x000008, "Wrong size on FortEventTrackerModule_GetEventScreenData");
static_assert(offsetof(FortEventTrackerModule_GetEventScreenData, ReturnValue) == 0x000000, "Member 'FortEventTrackerModule_GetEventScreenData::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_EventDetails.OnPopulateEventDetailsText
// 0x0030 (0x0030 - 0x0000)
struct FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText final
{
public:
	class FText                                   OutEventName;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   OutEventDescription;                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText) == 0x000008, "Wrong alignment on FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText");
static_assert(sizeof(FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText) == 0x000030, "Wrong size on FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText");
static_assert(offsetof(FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText, OutEventName) == 0x000000, "Member 'FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText::OutEventName' has a wrong offset!");
static_assert(offsetof(FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText, OutEventDescription) == 0x000018, "Member 'FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText::OutEventDescription' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_EventDetails.UpdateEventTimeRemaining
// 0x0020 (0x0020 - 0x0000)
struct FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining final
{
public:
	class FText                                   EventTimeRemainingText;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              TimeRemaining;                                     // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining) == 0x000008, "Wrong alignment on FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining");
static_assert(sizeof(FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining) == 0x000020, "Wrong size on FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining");
static_assert(offsetof(FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining, EventTimeRemainingText) == 0x000000, "Member 'FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining::EventTimeRemainingText' has a wrong offset!");
static_assert(offsetof(FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining, TimeRemaining) == 0x000018, "Member 'FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining::TimeRemaining' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_Header.OnPopulateEventResourceHeader
// 0x0020 (0x0020 - 0x0000)
struct FortEventTrackerModule_Header_OnPopulateEventResourceHeader final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ResourceValue;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEventTrackerModule_Header_OnPopulateEventResourceHeader) == 0x000008, "Wrong alignment on FortEventTrackerModule_Header_OnPopulateEventResourceHeader");
static_assert(sizeof(FortEventTrackerModule_Header_OnPopulateEventResourceHeader) == 0x000020, "Wrong size on FortEventTrackerModule_Header_OnPopulateEventResourceHeader");
static_assert(offsetof(FortEventTrackerModule_Header_OnPopulateEventResourceHeader, Header) == 0x000000, "Member 'FortEventTrackerModule_Header_OnPopulateEventResourceHeader::Header' has a wrong offset!");
static_assert(offsetof(FortEventTrackerModule_Header_OnPopulateEventResourceHeader, ResourceValue) == 0x000018, "Member 'FortEventTrackerModule_Header_OnPopulateEventResourceHeader::ResourceValue' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_Header.OnPopulateEventResourceStarterHeader
// 0x0018 (0x0018 - 0x0000)
struct FortEventTrackerModule_Header_OnPopulateEventResourceStarterHeader final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_Header_OnPopulateEventResourceStarterHeader) == 0x000008, "Wrong alignment on FortEventTrackerModule_Header_OnPopulateEventResourceStarterHeader");
static_assert(sizeof(FortEventTrackerModule_Header_OnPopulateEventResourceStarterHeader) == 0x000018, "Wrong size on FortEventTrackerModule_Header_OnPopulateEventResourceStarterHeader");
static_assert(offsetof(FortEventTrackerModule_Header_OnPopulateEventResourceStarterHeader, Header) == 0x000000, "Member 'FortEventTrackerModule_Header_OnPopulateEventResourceStarterHeader::Header' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_RewardDetails.OnPopulateCompletedReward
// 0x0010 (0x0010 - 0x0000)
struct FortEventTrackerModule_RewardDetails_OnPopulateCompletedReward final
{
public:
	TArray<class FText>                           RewardNames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_RewardDetails_OnPopulateCompletedReward) == 0x000008, "Wrong alignment on FortEventTrackerModule_RewardDetails_OnPopulateCompletedReward");
static_assert(sizeof(FortEventTrackerModule_RewardDetails_OnPopulateCompletedReward) == 0x000010, "Wrong size on FortEventTrackerModule_RewardDetails_OnPopulateCompletedReward");
static_assert(offsetof(FortEventTrackerModule_RewardDetails_OnPopulateCompletedReward, RewardNames) == 0x000000, "Member 'FortEventTrackerModule_RewardDetails_OnPopulateCompletedReward::RewardNames' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_RewardDetails.OnPopulateNextRewardDetails
// 0x0018 (0x0018 - 0x0000)
struct FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails final
{
public:
	TArray<class FText>                           RewardNames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ResourceNeeded;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails) == 0x000008, "Wrong alignment on FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails");
static_assert(sizeof(FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails) == 0x000018, "Wrong size on FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails");
static_assert(offsetof(FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails, RewardNames) == 0x000000, "Member 'FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails::RewardNames' has a wrong offset!");
static_assert(offsetof(FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails, ResourceNeeded) == 0x000010, "Member 'FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails::ResourceNeeded' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_RewardDetails.IsPremiumTrackOwned
// 0x0001 (0x0001 - 0x0000)
struct FortEventTrackerModule_RewardDetails_IsPremiumTrackOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_RewardDetails_IsPremiumTrackOwned) == 0x000001, "Wrong alignment on FortEventTrackerModule_RewardDetails_IsPremiumTrackOwned");
static_assert(sizeof(FortEventTrackerModule_RewardDetails_IsPremiumTrackOwned) == 0x000001, "Wrong size on FortEventTrackerModule_RewardDetails_IsPremiumTrackOwned");
static_assert(offsetof(FortEventTrackerModule_RewardDetails_IsPremiumTrackOwned, ReturnValue) == 0x000000, "Member 'FortEventTrackerModule_RewardDetails_IsPremiumTrackOwned::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_RewardRemaining.OnPopulateRemaining
// 0x000C (0x000C - 0x0000)
struct FortEventTrackerModule_RewardRemaining_OnPopulateRemaining final
{
public:
	int32                                         ResourceNeeded;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalResourceRequired;                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresPremiumTrackPurchase;                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEventTrackerModule_RewardRemaining_OnPopulateRemaining) == 0x000004, "Wrong alignment on FortEventTrackerModule_RewardRemaining_OnPopulateRemaining");
static_assert(sizeof(FortEventTrackerModule_RewardRemaining_OnPopulateRemaining) == 0x00000C, "Wrong size on FortEventTrackerModule_RewardRemaining_OnPopulateRemaining");
static_assert(offsetof(FortEventTrackerModule_RewardRemaining_OnPopulateRemaining, ResourceNeeded) == 0x000000, "Member 'FortEventTrackerModule_RewardRemaining_OnPopulateRemaining::ResourceNeeded' has a wrong offset!");
static_assert(offsetof(FortEventTrackerModule_RewardRemaining_OnPopulateRemaining, TotalResourceRequired) == 0x000004, "Member 'FortEventTrackerModule_RewardRemaining_OnPopulateRemaining::TotalResourceRequired' has a wrong offset!");
static_assert(offsetof(FortEventTrackerModule_RewardRemaining_OnPopulateRemaining, bRequiresPremiumTrackPurchase) == 0x000008, "Member 'FortEventTrackerModule_RewardRemaining_OnPopulateRemaining::bRequiresPremiumTrackPurchase' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_ProgressiveRewards.OnPopulateCompletionMessage
// 0x0020 (0x0020 - 0x0000)
struct FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage final
{
public:
	bool                                          bIsComplete;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CompletionText;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage) == 0x000008, "Wrong alignment on FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage");
static_assert(sizeof(FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage) == 0x000020, "Wrong size on FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage");
static_assert(offsetof(FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage, bIsComplete) == 0x000000, "Member 'FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage::bIsComplete' has a wrong offset!");
static_assert(offsetof(FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage, CompletionText) == 0x000008, "Member 'FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage::CompletionText' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_Collection.OnGatherTokenCollectionWidgets
// 0x0010 (0x0010 - 0x0000)
struct FortEventTrackerModule_Collection_OnGatherTokenCollectionWidgets final
{
public:
	TArray<class UFortEventTokenCollectionWidget*> OutCollectionWidgets;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_Collection_OnGatherTokenCollectionWidgets) == 0x000008, "Wrong alignment on FortEventTrackerModule_Collection_OnGatherTokenCollectionWidgets");
static_assert(sizeof(FortEventTrackerModule_Collection_OnGatherTokenCollectionWidgets) == 0x000010, "Wrong size on FortEventTrackerModule_Collection_OnGatherTokenCollectionWidgets");
static_assert(offsetof(FortEventTrackerModule_Collection_OnGatherTokenCollectionWidgets, OutCollectionWidgets) == 0x000000, "Member 'FortEventTrackerModule_Collection_OnGatherTokenCollectionWidgets::OutCollectionWidgets' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_Banner.OnCTACompleted
// 0x0001 (0x0001 - 0x0000)
struct FortEventTrackerModule_Banner_OnCTACompleted final
{
public:
	bool                                          bIsComplete;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_Banner_OnCTACompleted) == 0x000001, "Wrong alignment on FortEventTrackerModule_Banner_OnCTACompleted");
static_assert(sizeof(FortEventTrackerModule_Banner_OnCTACompleted) == 0x000001, "Wrong size on FortEventTrackerModule_Banner_OnCTACompleted");
static_assert(offsetof(FortEventTrackerModule_Banner_OnCTACompleted, bIsComplete) == 0x000000, "Member 'FortEventTrackerModule_Banner_OnCTACompleted::bIsComplete' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_Banner.OnPopulateBannerText
// 0x0018 (0x0018 - 0x0000)
struct FortEventTrackerModule_Banner_OnPopulateBannerText final
{
public:
	class FText                                   BannerText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_Banner_OnPopulateBannerText) == 0x000008, "Wrong alignment on FortEventTrackerModule_Banner_OnPopulateBannerText");
static_assert(sizeof(FortEventTrackerModule_Banner_OnPopulateBannerText) == 0x000018, "Wrong size on FortEventTrackerModule_Banner_OnPopulateBannerText");
static_assert(offsetof(FortEventTrackerModule_Banner_OnPopulateBannerText, BannerText) == 0x000000, "Member 'FortEventTrackerModule_Banner_OnPopulateBannerText::BannerText' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_Banner.OnPopulateHeaderCTAText
// 0x0018 (0x0018 - 0x0000)
struct FortEventTrackerModule_Banner_OnPopulateHeaderCTAText final
{
public:
	class FText                                   HeaderCTAText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_Banner_OnPopulateHeaderCTAText) == 0x000008, "Wrong alignment on FortEventTrackerModule_Banner_OnPopulateHeaderCTAText");
static_assert(sizeof(FortEventTrackerModule_Banner_OnPopulateHeaderCTAText) == 0x000018, "Wrong size on FortEventTrackerModule_Banner_OnPopulateHeaderCTAText");
static_assert(offsetof(FortEventTrackerModule_Banner_OnPopulateHeaderCTAText, HeaderCTAText) == 0x000000, "Member 'FortEventTrackerModule_Banner_OnPopulateHeaderCTAText::HeaderCTAText' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_PremiumUpsell.OnIconLoaded
// 0x0008 (0x0008 - 0x0000)
struct FortEventTrackerModule_PremiumUpsell_OnIconLoaded final
{
public:
	const class UTexture*                         LoadedTexture;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_PremiumUpsell_OnIconLoaded) == 0x000008, "Wrong alignment on FortEventTrackerModule_PremiumUpsell_OnIconLoaded");
static_assert(sizeof(FortEventTrackerModule_PremiumUpsell_OnIconLoaded) == 0x000008, "Wrong size on FortEventTrackerModule_PremiumUpsell_OnIconLoaded");
static_assert(offsetof(FortEventTrackerModule_PremiumUpsell_OnIconLoaded, LoadedTexture) == 0x000000, "Member 'FortEventTrackerModule_PremiumUpsell_OnIconLoaded::LoadedTexture' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_PremiumUpsell.OnPopulateText
// 0x0030 (0x0030 - 0x0000)
struct FortEventTrackerModule_PremiumUpsell_OnPopulateText final
{
public:
	class FText                                   HeaderText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   BodyText;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_PremiumUpsell_OnPopulateText) == 0x000008, "Wrong alignment on FortEventTrackerModule_PremiumUpsell_OnPopulateText");
static_assert(sizeof(FortEventTrackerModule_PremiumUpsell_OnPopulateText) == 0x000030, "Wrong size on FortEventTrackerModule_PremiumUpsell_OnPopulateText");
static_assert(offsetof(FortEventTrackerModule_PremiumUpsell_OnPopulateText, HeaderText) == 0x000000, "Member 'FortEventTrackerModule_PremiumUpsell_OnPopulateText::HeaderText' has a wrong offset!");
static_assert(offsetof(FortEventTrackerModule_PremiumUpsell_OnPopulateText, BodyText) == 0x000018, "Member 'FortEventTrackerModule_PremiumUpsell_OnPopulateText::BodyText' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_PremiumUpsell.IsPremiumTrackOwned
// 0x0001 (0x0001 - 0x0000)
struct FortEventTrackerModule_PremiumUpsell_IsPremiumTrackOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_PremiumUpsell_IsPremiumTrackOwned) == 0x000001, "Wrong alignment on FortEventTrackerModule_PremiumUpsell_IsPremiumTrackOwned");
static_assert(sizeof(FortEventTrackerModule_PremiumUpsell_IsPremiumTrackOwned) == 0x000001, "Wrong size on FortEventTrackerModule_PremiumUpsell_IsPremiumTrackOwned");
static_assert(offsetof(FortEventTrackerModule_PremiumUpsell_IsPremiumTrackOwned, ReturnValue) == 0x000000, "Member 'FortEventTrackerModule_PremiumUpsell_IsPremiumTrackOwned::ReturnValue' has a wrong offset!");

// Function EventScreenBase.FortEventTrackerModule_CustomText.OnPopulateText
// 0x0018 (0x0018 - 0x0000)
struct FortEventTrackerModule_CustomText_OnPopulateText final
{
public:
	class FText                                   CustomText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTrackerModule_CustomText_OnPopulateText) == 0x000008, "Wrong alignment on FortEventTrackerModule_CustomText_OnPopulateText");
static_assert(sizeof(FortEventTrackerModule_CustomText_OnPopulateText) == 0x000018, "Wrong size on FortEventTrackerModule_CustomText_OnPopulateText");
static_assert(offsetof(FortEventTrackerModule_CustomText_OnPopulateText, CustomText) == 0x000000, "Member 'FortEventTrackerModule_CustomText_OnPopulateText::CustomText' has a wrong offset!");

}

