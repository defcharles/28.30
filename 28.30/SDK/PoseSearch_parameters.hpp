#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearch

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PoseSearch_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PoseSearch.MotionMatchingAnimNodeLibrary.ConvertToMotionMatchingNode
// 0x0028 (0x0028 - 0x0000)
struct MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMotionMatchingAnimNodeReference       ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode) == 0x000028, "Wrong size on MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode, Node) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode::Node' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode, Result) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode::Result' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode, ReturnValue) == 0x000018, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode::ReturnValue' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.ConvertToMotionMatchingNodePure
// 0x0028 (0x0028 - 0x0000)
struct MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure) == 0x000028, "Wrong size on MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure, Node) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure::Node' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure, MotionMatchingNode) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure, Result) == 0x000020, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure::Result' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.GetMotionMatchingSearchResult
// 0x0058 (0x0058 - 0x0000)
struct MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseSearchBlueprintResult             Result;                                            // 0x0010(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsResultValid;                                    // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult) == 0x000058, "Wrong size on MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult, Result) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult::Result' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult, bIsResultValid) == 0x000050, "Member 'MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult::bIsResultValid' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.ResetDatabasesToSearch
// 0x0018 (0x0018 - 0x0000)
struct MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EPoseSearchInterruptMode                      InterruptMode;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch) == 0x000018, "Wrong size on MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch, InterruptMode) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch::InterruptMode' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.SetDatabasesToSearch
// 0x0028 (0x0028 - 0x0000)
struct MotionMatchingAnimNodeLibrary_SetDatabasesToSearch final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UPoseSearchDatabase*>            Databases;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPoseSearchInterruptMode                      InterruptMode;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_SetDatabasesToSearch");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch) == 0x000028, "Wrong size on MotionMatchingAnimNodeLibrary_SetDatabasesToSearch");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_SetDatabasesToSearch::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch, Databases) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_SetDatabasesToSearch::Databases' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch, InterruptMode) == 0x000020, "Member 'MotionMatchingAnimNodeLibrary_SetDatabasesToSearch::InterruptMode' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.SetDatabaseToSearch
// 0x0020 (0x0020 - 0x0000)
struct MotionMatchingAnimNodeLibrary_SetDatabaseToSearch final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPoseSearchDatabase*                    Database;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchInterruptMode                      InterruptMode;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_SetDatabaseToSearch");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch) == 0x000020, "Wrong size on MotionMatchingAnimNodeLibrary_SetDatabaseToSearch");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_SetDatabaseToSearch::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch, Database) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_SetDatabaseToSearch::Database' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch, InterruptMode) == 0x000018, "Member 'MotionMatchingAnimNodeLibrary_SetDatabaseToSearch::InterruptMode' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.SetInterruptMode
// 0x0018 (0x0018 - 0x0000)
struct MotionMatchingAnimNodeLibrary_SetInterruptMode final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EPoseSearchInterruptMode                      InterruptMode;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_SetInterruptMode) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_SetInterruptMode");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_SetInterruptMode) == 0x000018, "Wrong size on MotionMatchingAnimNodeLibrary_SetInterruptMode");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetInterruptMode, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_SetInterruptMode::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetInterruptMode, InterruptMode) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_SetInterruptMode::InterruptMode' has a wrong offset!");

// Function PoseSearch.PoseSearchFeatureChannel_Heading.BP_GetWorldRotation
// 0x0030 (0x0030 - 0x0000)
struct PoseSearchFeatureChannel_Heading_BP_GetWorldRotation final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchFeatureChannel_Heading_BP_GetWorldRotation) == 0x000010, "Wrong alignment on PoseSearchFeatureChannel_Heading_BP_GetWorldRotation");
static_assert(sizeof(PoseSearchFeatureChannel_Heading_BP_GetWorldRotation) == 0x000030, "Wrong size on PoseSearchFeatureChannel_Heading_BP_GetWorldRotation");
static_assert(offsetof(PoseSearchFeatureChannel_Heading_BP_GetWorldRotation, AnimInstance) == 0x000000, "Member 'PoseSearchFeatureChannel_Heading_BP_GetWorldRotation::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchFeatureChannel_Heading_BP_GetWorldRotation, ReturnValue) == 0x000010, "Member 'PoseSearchFeatureChannel_Heading_BP_GetWorldRotation::ReturnValue' has a wrong offset!");

// Function PoseSearch.PoseSearchFeatureChannel_Position.BP_GetWorldPosition
// 0x0020 (0x0020 - 0x0000)
struct PoseSearchFeatureChannel_Position_BP_GetWorldPosition final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchFeatureChannel_Position_BP_GetWorldPosition) == 0x000008, "Wrong alignment on PoseSearchFeatureChannel_Position_BP_GetWorldPosition");
static_assert(sizeof(PoseSearchFeatureChannel_Position_BP_GetWorldPosition) == 0x000020, "Wrong size on PoseSearchFeatureChannel_Position_BP_GetWorldPosition");
static_assert(offsetof(PoseSearchFeatureChannel_Position_BP_GetWorldPosition, AnimInstance) == 0x000000, "Member 'PoseSearchFeatureChannel_Position_BP_GetWorldPosition::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchFeatureChannel_Position_BP_GetWorldPosition, ReturnValue) == 0x000008, "Member 'PoseSearchFeatureChannel_Position_BP_GetWorldPosition::ReturnValue' has a wrong offset!");

// Function PoseSearch.PoseSearchFeatureChannel_Velocity.BP_GetWorldVelocity
// 0x0020 (0x0020 - 0x0000)
struct PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity) == 0x000008, "Wrong alignment on PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity");
static_assert(sizeof(PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity) == 0x000020, "Wrong size on PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity");
static_assert(offsetof(PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity, AnimInstance) == 0x000000, "Member 'PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity, ReturnValue) == 0x000008, "Member 'PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity::ReturnValue' has a wrong offset!");

// Function PoseSearch.PoseSearchLibrary.MotionMatch
// 0x0070 (0x0070 - 0x0000)
struct PoseSearchLibrary_MotionMatch final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPoseSearchDatabase*              Database;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PoseHistoryName;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSearchBlueprintResult             Result;                                            // 0x0018(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UAnimationAsset*                  FutureAnimation;                                   // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FutureAnimationStartTime;                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToFutureAnimationStart;                        // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugSessionUniqueIdentifier;                      // 0x0068(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoseSearchLibrary_MotionMatch) == 0x000008, "Wrong alignment on PoseSearchLibrary_MotionMatch");
static_assert(sizeof(PoseSearchLibrary_MotionMatch) == 0x000070, "Wrong size on PoseSearchLibrary_MotionMatch");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, AnimInstance) == 0x000000, "Member 'PoseSearchLibrary_MotionMatch::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, Database) == 0x000008, "Member 'PoseSearchLibrary_MotionMatch::Database' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, PoseHistoryName) == 0x000010, "Member 'PoseSearchLibrary_MotionMatch::PoseHistoryName' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, Result) == 0x000018, "Member 'PoseSearchLibrary_MotionMatch::Result' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, FutureAnimation) == 0x000058, "Member 'PoseSearchLibrary_MotionMatch::FutureAnimation' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, FutureAnimationStartTime) == 0x000060, "Member 'PoseSearchLibrary_MotionMatch::FutureAnimationStartTime' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, TimeToFutureAnimationStart) == 0x000064, "Member 'PoseSearchLibrary_MotionMatch::TimeToFutureAnimationStart' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, DebugSessionUniqueIdentifier) == 0x000068, "Member 'PoseSearchLibrary_MotionMatch::DebugSessionUniqueIdentifier' has a wrong offset!");

}

