#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DamageNumbersUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function DamageNumbersUI.CommonUserWidget_DamageNumbers.OnDamageDealt
// 0x0038 (0x0038 - 0x0000)
struct CommonUserWidget_DamageNumbers_OnDamageDealt final
{
public:
	double                                        InDamage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShield;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCrit;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InWorldSpacePos;                                   // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEMP;                                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonUserWidget_DamageNumbers_OnDamageDealt) == 0x000008, "Wrong alignment on CommonUserWidget_DamageNumbers_OnDamageDealt");
static_assert(sizeof(CommonUserWidget_DamageNumbers_OnDamageDealt) == 0x000038, "Wrong size on CommonUserWidget_DamageNumbers_OnDamageDealt");
static_assert(offsetof(CommonUserWidget_DamageNumbers_OnDamageDealt, InDamage) == 0x000000, "Member 'CommonUserWidget_DamageNumbers_OnDamageDealt::InDamage' has a wrong offset!");
static_assert(offsetof(CommonUserWidget_DamageNumbers_OnDamageDealt, InActor) == 0x000008, "Member 'CommonUserWidget_DamageNumbers_OnDamageDealt::InActor' has a wrong offset!");
static_assert(offsetof(CommonUserWidget_DamageNumbers_OnDamageDealt, bInShield) == 0x000010, "Member 'CommonUserWidget_DamageNumbers_OnDamageDealt::bInShield' has a wrong offset!");
static_assert(offsetof(CommonUserWidget_DamageNumbers_OnDamageDealt, bInCrit) == 0x000011, "Member 'CommonUserWidget_DamageNumbers_OnDamageDealt::bInCrit' has a wrong offset!");
static_assert(offsetof(CommonUserWidget_DamageNumbers_OnDamageDealt, InWorldSpacePos) == 0x000018, "Member 'CommonUserWidget_DamageNumbers_OnDamageDealt::InWorldSpacePos' has a wrong offset!");
static_assert(offsetof(CommonUserWidget_DamageNumbers_OnDamageDealt, bInEMP) == 0x000030, "Member 'CommonUserWidget_DamageNumbers_OnDamageDealt::bInEMP' has a wrong offset!");

// Function DamageNumbersUI.CommonUserWidget_DamageNumbers.OnShieldBreak
// 0x0001 (0x0001 - 0x0000)
struct CommonUserWidget_DamageNumbers_OnShieldBreak final
{
public:
	bool                                          bIsOvershield;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonUserWidget_DamageNumbers_OnShieldBreak) == 0x000001, "Wrong alignment on CommonUserWidget_DamageNumbers_OnShieldBreak");
static_assert(sizeof(CommonUserWidget_DamageNumbers_OnShieldBreak) == 0x000001, "Wrong size on CommonUserWidget_DamageNumbers_OnShieldBreak");
static_assert(offsetof(CommonUserWidget_DamageNumbers_OnShieldBreak, bIsOvershield) == 0x000000, "Member 'CommonUserWidget_DamageNumbers_OnShieldBreak::bIsOvershield' has a wrong offset!");

// Function DamageNumbersUI.FortUserWidget_DamageNumbers.OnDamageDealt
// 0x0050 (0x0050 - 0x0000)
struct FortUserWidget_DamageNumbers_OnDamageDealt final
{
public:
	double                                        InDamage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCritical;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInFatal;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShield;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0030(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUserWidget_DamageNumbers_OnDamageDealt) == 0x000008, "Wrong alignment on FortUserWidget_DamageNumbers_OnDamageDealt");
static_assert(sizeof(FortUserWidget_DamageNumbers_OnDamageDealt) == 0x000050, "Wrong size on FortUserWidget_DamageNumbers_OnDamageDealt");
static_assert(offsetof(FortUserWidget_DamageNumbers_OnDamageDealt, InDamage) == 0x000000, "Member 'FortUserWidget_DamageNumbers_OnDamageDealt::InDamage' has a wrong offset!");
static_assert(offsetof(FortUserWidget_DamageNumbers_OnDamageDealt, bInCritical) == 0x000008, "Member 'FortUserWidget_DamageNumbers_OnDamageDealt::bInCritical' has a wrong offset!");
static_assert(offsetof(FortUserWidget_DamageNumbers_OnDamageDealt, bInFatal) == 0x000009, "Member 'FortUserWidget_DamageNumbers_OnDamageDealt::bInFatal' has a wrong offset!");
static_assert(offsetof(FortUserWidget_DamageNumbers_OnDamageDealt, bInShield) == 0x00000A, "Member 'FortUserWidget_DamageNumbers_OnDamageDealt::bInShield' has a wrong offset!");
static_assert(offsetof(FortUserWidget_DamageNumbers_OnDamageDealt, HitActor) == 0x000010, "Member 'FortUserWidget_DamageNumbers_OnDamageDealt::HitActor' has a wrong offset!");
static_assert(offsetof(FortUserWidget_DamageNumbers_OnDamageDealt, HitLocation) == 0x000018, "Member 'FortUserWidget_DamageNumbers_OnDamageDealt::HitLocation' has a wrong offset!");
static_assert(offsetof(FortUserWidget_DamageNumbers_OnDamageDealt, Tags) == 0x000030, "Member 'FortUserWidget_DamageNumbers_OnDamageDealt::Tags' has a wrong offset!");

// Function DamageNumbersUI.FortUserWidget_DamageNumbers.OnShieldBreak
// 0x0001 (0x0001 - 0x0000)
struct FortUserWidget_DamageNumbers_OnShieldBreak final
{
public:
	bool                                          bInOverShield;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUserWidget_DamageNumbers_OnShieldBreak) == 0x000001, "Wrong alignment on FortUserWidget_DamageNumbers_OnShieldBreak");
static_assert(sizeof(FortUserWidget_DamageNumbers_OnShieldBreak) == 0x000001, "Wrong size on FortUserWidget_DamageNumbers_OnShieldBreak");
static_assert(offsetof(FortUserWidget_DamageNumbers_OnShieldBreak, bInOverShield) == 0x000000, "Member 'FortUserWidget_DamageNumbers_OnShieldBreak::bInOverShield' has a wrong offset!");

}

