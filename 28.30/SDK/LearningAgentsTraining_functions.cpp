#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LearningAgentsTraining

#include "Basic.hpp"

#include "LearningAgentsTraining_classes.hpp"
#include "LearningAgentsTraining_parameters.hpp"


namespace SDK
{

// Function LearningAgentsTraining.ConditionalCompletion.AddConditionalCompletion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               InCompletionMode                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UConditionalCompletion*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UConditionalCompletion* UConditionalCompletion::AddConditionalCompletion(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const ELearningAgentsCompletion InCompletionMode)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddConditionalCompletion");

	Params::ConditionalCompletion_AddConditionalCompletion Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.InCompletionMode = InCompletionMode;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.ConditionalCompletion.SetConditionalCompletion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsCompleted                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConditionalCompletion::SetConditionalCompletion(const int32 AgentId, const bool bIsCompleted)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetConditionalCompletion");

	Params::ConditionalCompletion_SetConditionalCompletion Parms{};

	Parms.AgentId = AgentId;
	Parms.bIsCompleted = bIsCompleted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.TimeElapsedCompletion.AddTimeElapsedCompletion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Threshold                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               InCompletionMode                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTimeElapsedCompletion*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTimeElapsedCompletion* UTimeElapsedCompletion::AddTimeElapsedCompletion(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const float Threshold, const ELearningAgentsCompletion InCompletionMode)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddTimeElapsedCompletion");

	Params::TimeElapsedCompletion_AddTimeElapsedCompletion Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.Threshold = Threshold;
	Parms.InCompletionMode = InCompletionMode;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.TimeElapsedCompletion.SetTimeElapsedCompletion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTimeElapsedCompletion::SetTimeElapsedCompletion(const int32 AgentId, const float Time)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTimeElapsedCompletion");

	Params::TimeElapsedCompletion_SetTimeElapsedCompletion Parms{};

	Parms.AgentId = AgentId;
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.PlanarPositionDifferenceCompletion.AddPlanarPositionDifferenceCompletion
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Threshold                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               InCompletionMode                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis0                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis1                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlanarPositionDifferenceCompletion*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlanarPositionDifferenceCompletion* UPlanarPositionDifferenceCompletion::AddPlanarPositionDifferenceCompletion(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const float Threshold, const ELearningAgentsCompletion InCompletionMode, const struct FVector& Axis0, const struct FVector& Axis1)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddPlanarPositionDifferenceCompletion");

	Params::PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.Threshold = Threshold;
	Parms.InCompletionMode = InCompletionMode;
	Parms.Axis0 = std::move(Axis0);
	Parms.Axis1 = std::move(Axis1);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.PlanarPositionDifferenceCompletion.SetPlanarPositionDifferenceCompletion
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position0                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position1                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlanarPositionDifferenceCompletion::SetPlanarPositionDifferenceCompletion(const int32 AgentId, const struct FVector& Position0, const struct FVector& Position1)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPlanarPositionDifferenceCompletion");

	Params::PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion Parms{};

	Parms.AgentId = AgentId;
	Parms.Position0 = std::move(Position0);
	Parms.Position1 = std::move(Position1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.PlanarPositionSimilarityCompletion.AddPlanarPositionSimilarityCompletion
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Threshold                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               InCompletionMode                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis0                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis1                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlanarPositionSimilarityCompletion*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlanarPositionSimilarityCompletion* UPlanarPositionSimilarityCompletion::AddPlanarPositionSimilarityCompletion(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const float Threshold, const ELearningAgentsCompletion InCompletionMode, const struct FVector& Axis0, const struct FVector& Axis1)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddPlanarPositionSimilarityCompletion");

	Params::PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.Threshold = Threshold;
	Parms.InCompletionMode = InCompletionMode;
	Parms.Axis0 = std::move(Axis0);
	Parms.Axis1 = std::move(Axis1);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.PlanarPositionSimilarityCompletion.SetPlanarPositionSimilarityCompletion
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position0                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position1                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlanarPositionSimilarityCompletion::SetPlanarPositionSimilarityCompletion(const int32 AgentId, const struct FVector& Position0, const struct FVector& Position1)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPlanarPositionSimilarityCompletion");

	Params::PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion Parms{};

	Parms.AgentId = AgentId;
	Parms.Position0 = std::move(Position0);
	Parms.Position1 = std::move(Position1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.BeginTraining
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsPolicy*            InPolicy                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsRecording*         Recording                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsImitationTrainerSettingsImitationTrainerSettings                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLearningAgentsImitationTrainerTrainingSettingsImitationTrainerTrainingSettings                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLearningAgentsTrainerPathSettingsImitationTrainerPathSettings                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bReinitializePolicyNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsImitationTrainer::BeginTraining(class ULearningAgentsPolicy* InPolicy, const class ULearningAgentsRecording* Recording, const struct FLearningAgentsImitationTrainerSettings& ImitationTrainerSettings, const struct FLearningAgentsImitationTrainerTrainingSettings& ImitationTrainerTrainingSettings, const struct FLearningAgentsTrainerPathSettings& ImitationTrainerPathSettings, const bool bReinitializePolicyNetwork)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BeginTraining");

	Params::LearningAgentsImitationTrainer_BeginTraining Parms{};

	Parms.InPolicy = InPolicy;
	Parms.Recording = Recording;
	Parms.ImitationTrainerSettings = std::move(ImitationTrainerSettings);
	Parms.ImitationTrainerTrainingSettings = std::move(ImitationTrainerTrainingSettings);
	Parms.ImitationTrainerPathSettings = std::move(ImitationTrainerPathSettings);
	Parms.bReinitializePolicyNetwork = bReinitializePolicyNetwork;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.EndTraining
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsImitationTrainer::EndTraining()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EndTraining");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.IterateTraining
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsImitationTrainer::IterateTraining()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IterateTraining");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.RunTraining
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsPolicy*            InPolicy                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsRecording*         Recording                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsImitationTrainerSettingsImitationTrainerSettings                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLearningAgentsImitationTrainerTrainingSettingsImitationTrainerTrainingSettings                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLearningAgentsTrainerPathSettingsImitationTrainerPathSettings                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bReinitializePolicyNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsImitationTrainer::RunTraining(class ULearningAgentsPolicy* InPolicy, const class ULearningAgentsRecording* Recording, const struct FLearningAgentsImitationTrainerSettings& ImitationTrainerSettings, const struct FLearningAgentsImitationTrainerTrainingSettings& ImitationTrainerTrainingSettings, const struct FLearningAgentsTrainerPathSettings& ImitationTrainerPathSettings, const bool bReinitializePolicyNetwork)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RunTraining");

	Params::LearningAgentsImitationTrainer_RunTraining Parms{};

	Parms.InPolicy = InPolicy;
	Parms.Recording = Recording;
	Parms.ImitationTrainerSettings = std::move(ImitationTrainerSettings);
	Parms.ImitationTrainerTrainingSettings = std::move(ImitationTrainerTrainingSettings);
	Parms.ImitationTrainerPathSettings = std::move(ImitationTrainerPathSettings);
	Parms.bReinitializePolicyNetwork = bReinitializePolicyNetwork;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.HasTrainingFailed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsImitationTrainer::HasTrainingFailed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasTrainingFailed");

	Params::LearningAgentsImitationTrainer_HasTrainingFailed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.IsTraining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsImitationTrainer::IsTraining() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsTraining");

	Params::LearningAgentsImitationTrainer_IsTraining Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.AddExperience
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsRecorder::AddExperience()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddExperience");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.AppendRecordingFromFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFilePath                        File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::AppendRecordingFromFile(const struct FFilePath& File)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AppendRecordingFromFile");

	Params::LearningAgentsRecorder_AppendRecordingFromFile Parms{};

	Parms.File = std::move(File);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.AppendRecordingToAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::AppendRecordingToAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AppendRecordingToAsset");

	Params::LearningAgentsRecorder_AppendRecordingToAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.BeginRecording
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bReinitializeRecording                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::BeginRecording(bool bReinitializeRecording)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BeginRecording");

	Params::LearningAgentsRecorder_BeginRecording Parms{};

	Parms.bReinitializeRecording = bReinitializeRecording;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.EndRecording
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsRecorder::EndRecording()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EndRecording");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.LoadRecordingFromAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::LoadRecordingFromAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LoadRecordingFromAsset");

	Params::LearningAgentsRecorder_LoadRecordingFromAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.LoadRecordingFromFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFilePath                        File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::LoadRecordingFromFile(const struct FFilePath& File)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LoadRecordingFromFile");

	Params::LearningAgentsRecorder_LoadRecordingFromFile Parms{};

	Parms.File = std::move(File);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.SaveRecordingToAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::SaveRecordingToAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SaveRecordingToAsset");

	Params::LearningAgentsRecorder_SaveRecordingToAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.SetupRecorder
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsRecorderPathSettingsRecorderPathSettings                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::SetupRecorder(class ULearningAgentsInteractor* InInteractor, const struct FLearningAgentsRecorderPathSettings& RecorderPathSettings, class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetupRecorder");

	Params::LearningAgentsRecorder_SetupRecorder Parms{};

	Parms.InInteractor = InInteractor;
	Parms.RecorderPathSettings = std::move(RecorderPathSettings);
	Parms.RecordingAsset = RecordingAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.UseRecordingAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::UseRecordingAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UseRecordingAsset");

	Params::LearningAgentsRecorder_UseRecordingAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecorder.GetCurrentRecording
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ULearningAgentsRecording*   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class ULearningAgentsRecording* ULearningAgentsRecorder::GetCurrentRecording() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentRecording");

	Params::LearningAgentsRecorder_GetCurrentRecording Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.IsRecording
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsRecorder::IsRecording() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsRecording");

	Params::LearningAgentsRecorder_IsRecording Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.SaveRecordingToFile
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FFilePath                        File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::SaveRecordingToFile(const struct FFilePath& File) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SaveRecordingToFile");

	Params::LearningAgentsRecorder_SaveRecordingToFile Parms{};

	Parms.File = std::move(File);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecording.AppendRecordingFromFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFilePath                        File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::AppendRecordingFromFile(const struct FFilePath& File)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AppendRecordingFromFile");

	Params::LearningAgentsRecording_AppendRecordingFromFile Parms{};

	Parms.File = std::move(File);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecording.AppendRecordingToAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::AppendRecordingToAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AppendRecordingToAsset");

	Params::LearningAgentsRecording_AppendRecordingToAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecording.LoadRecordingFromAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::LoadRecordingFromAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LoadRecordingFromAsset");

	Params::LearningAgentsRecording_LoadRecordingFromAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecording.LoadRecordingFromFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFilePath                        File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::LoadRecordingFromFile(const struct FFilePath& File)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LoadRecordingFromFile");

	Params::LearningAgentsRecording_LoadRecordingFromFile Parms{};

	Parms.File = std::move(File);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecording.SaveRecordingToAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::SaveRecordingToAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SaveRecordingToAsset");

	Params::LearningAgentsRecording_SaveRecordingToAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsRecording.SaveRecordingToFile
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FFilePath                        File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::SaveRecordingToFile(const struct FFilePath& File) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SaveRecordingToFile");

	Params::LearningAgentsRecording_SaveRecordingToFile Parms{};

	Parms.File = std::move(File);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.FloatReward.AddFloatReward
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFloatReward*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFloatReward* UFloatReward::AddFloatReward(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const float Weight)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddFloatReward");

	Params::FloatReward_AddFloatReward Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.Weight = Weight;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.FloatReward.SetFloatReward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Reward                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFloatReward::SetFloatReward(const int32 AgentId, const float Reward)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFloatReward");

	Params::FloatReward_SetFloatReward Parms{};

	Parms.AgentId = AgentId;
	Parms.Reward = Reward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.ConditionalReward.AddConditionalReward
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UConditionalReward*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UConditionalReward* UConditionalReward::AddConditionalReward(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const float Value)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddConditionalReward");

	Params::ConditionalReward_AddConditionalReward Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.Value = Value;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.ConditionalReward.SetConditionalReward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCondition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConditionalReward::SetConditionalReward(const int32 AgentId, const bool bCondition)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetConditionalReward");

	Params::ConditionalReward_SetConditionalReward Parms{};

	Parms.AgentId = AgentId;
	Parms.bCondition = bCondition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.ScalarVelocityReward.AddScalarVelocityReward
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScalarVelocityReward*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScalarVelocityReward* UScalarVelocityReward::AddScalarVelocityReward(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const float Weight, const float Scale)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddScalarVelocityReward");

	Params::ScalarVelocityReward_AddScalarVelocityReward Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.Weight = Weight;
	Parms.Scale = Scale;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.ScalarVelocityReward.SetScalarVelocityReward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Velocity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScalarVelocityReward::SetScalarVelocityReward(const int32 AgentId, const float Velocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetScalarVelocityReward");

	Params::ScalarVelocityReward_SetScalarVelocityReward Parms{};

	Parms.AgentId = AgentId;
	Parms.Velocity = Velocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LocalDirectionalVelocityReward.AddLocalDirectionalVelocityReward
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULocalDirectionalVelocityReward*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULocalDirectionalVelocityReward* ULocalDirectionalVelocityReward::AddLocalDirectionalVelocityReward(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const float Weight, const float Scale, const struct FVector& Axis)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddLocalDirectionalVelocityReward");

	Params::LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.Weight = Weight;
	Parms.Scale = Scale;
	Parms.Axis = std::move(Axis);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LocalDirectionalVelocityReward.SetLocalDirectionalVelocityReward
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RelativeRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULocalDirectionalVelocityReward::SetLocalDirectionalVelocityReward(const int32 AgentId, const struct FVector& Velocity, const struct FRotator& RelativeRotation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLocalDirectionalVelocityReward");

	Params::LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward Parms{};

	Parms.AgentId = AgentId;
	Parms.Velocity = std::move(Velocity);
	Parms.RelativeRotation = std::move(RelativeRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.PlanarPositionDifferencePenalty.AddPlanarPositionDifferencePenalty
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Threshold                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis0                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis1                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlanarPositionDifferencePenalty* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlanarPositionDifferencePenalty* UPlanarPositionDifferencePenalty::AddPlanarPositionDifferencePenalty(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const float Weight, const float Scale, const float Threshold, const struct FVector& Axis0, const struct FVector& Axis1)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddPlanarPositionDifferencePenalty");

	Params::PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.Weight = Weight;
	Parms.Scale = Scale;
	Parms.Threshold = Threshold;
	Parms.Axis0 = std::move(Axis0);
	Parms.Axis1 = std::move(Axis1);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.PlanarPositionDifferencePenalty.SetPlanarPositionDifferencePenalty
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position0                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position1                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlanarPositionDifferencePenalty::SetPlanarPositionDifferencePenalty(const int32 AgentId, const struct FVector& Position0, const struct FVector& Position1)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPlanarPositionDifferencePenalty");

	Params::PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty Parms{};

	Parms.AgentId = AgentId;
	Parms.Position0 = std::move(Position0);
	Parms.Position1 = std::move(Position1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.PositionArraySimilarityReward.AddPositionArraySimilarityReward
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsTrainer*           InAgentTrainer                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PositionNum                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPositionArraySimilarityReward*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPositionArraySimilarityReward* UPositionArraySimilarityReward::AddPositionArraySimilarityReward(class ULearningAgentsTrainer* InAgentTrainer, const class FName Name_0, const int32 PositionNum, const float Scale, const float Weight)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AddPositionArraySimilarityReward");

	Params::PositionArraySimilarityReward_AddPositionArraySimilarityReward Parms{};

	Parms.InAgentTrainer = InAgentTrainer;
	Parms.Name_0 = Name_0;
	Parms.PositionNum = PositionNum;
	Parms.Scale = Scale;
	Parms.Weight = Weight;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.PositionArraySimilarityReward.SetPositionArraySimilarityReward
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  Positions0                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  Positions1                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          RelativePosition0                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RelativePosition1                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RelativeRotation0                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         RelativeRotation1                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UPositionArraySimilarityReward::SetPositionArraySimilarityReward(const int32 AgentId, const TArray<struct FVector>& Positions0, const TArray<struct FVector>& Positions1, const struct FVector& RelativePosition0, const struct FVector& RelativePosition1, const struct FRotator& RelativeRotation0, const struct FRotator& RelativeRotation1)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPositionArraySimilarityReward");

	Params::PositionArraySimilarityReward_SetPositionArraySimilarityReward Parms{};

	Parms.AgentId = AgentId;
	Parms.Positions0 = std::move(Positions0);
	Parms.Positions1 = std::move(Positions1);
	Parms.RelativePosition0 = std::move(RelativePosition0);
	Parms.RelativePosition1 = std::move(RelativePosition1);
	Parms.RelativeRotation0 = std::move(RelativeRotation0);
	Parms.RelativeRotation1 = std::move(RelativeRotation1);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.BeginTraining
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLearningAgentsTrainerTrainingSettingsTrainerTrainingSettings                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLearningAgentsTrainerGameSettingsTrainerGameSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLearningAgentsTrainerPathSettingsTrainerPathSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bReinitializePolicyNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReinitializeCriticNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetAgentsOnBegin                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::BeginTraining(const struct FLearningAgentsTrainerTrainingSettings& TrainerTrainingSettings, const struct FLearningAgentsTrainerGameSettings& TrainerGameSettings, const struct FLearningAgentsTrainerPathSettings& TrainerPathSettings, const bool bReinitializePolicyNetwork, const bool bReinitializeCriticNetwork, const bool bResetAgentsOnBegin)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BeginTraining");

	Params::LearningAgentsTrainer_BeginTraining Parms{};

	Parms.TrainerTrainingSettings = std::move(TrainerTrainingSettings);
	Parms.TrainerGameSettings = std::move(TrainerGameSettings);
	Parms.TrainerPathSettings = std::move(TrainerPathSettings);
	Parms.bReinitializePolicyNetwork = bReinitializePolicyNetwork;
	Parms.bReinitializeCriticNetwork = bReinitializeCriticNetwork;
	Parms.bResetAgentsOnBegin = bResetAgentsOnBegin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.EndTraining
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsTrainer::EndTraining()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EndTraining");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.EvaluateCompletions
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsTrainer::EvaluateCompletions()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EvaluateCompletions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.EvaluateRewards
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsTrainer::EvaluateRewards()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EvaluateRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.ProcessExperience
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsTrainer::ProcessExperience()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ProcessExperience");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.ResetEpisodes
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<int32>                           AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::ResetEpisodes(const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetEpisodes");

	Params::LearningAgentsTrainer_ResetEpisodes Parms{};

	Parms.AgentIds = std::move(AgentIds);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.RunTraining
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLearningAgentsTrainerTrainingSettingsTrainerTrainingSettings                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLearningAgentsTrainerGameSettingsTrainerGameSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLearningAgentsTrainerPathSettingsTrainerPathSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bReinitializePolicyNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReinitializeCriticNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetAgentsOnBegin                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::RunTraining(const struct FLearningAgentsTrainerTrainingSettings& TrainerTrainingSettings, const struct FLearningAgentsTrainerGameSettings& TrainerGameSettings, const struct FLearningAgentsTrainerPathSettings& TrainerPathSettings, const bool bReinitializePolicyNetwork, const bool bReinitializeCriticNetwork, const bool bResetAgentsOnBegin)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RunTraining");

	Params::LearningAgentsTrainer_RunTraining Parms{};

	Parms.TrainerTrainingSettings = std::move(TrainerTrainingSettings);
	Parms.TrainerGameSettings = std::move(TrainerGameSettings);
	Parms.TrainerPathSettings = std::move(TrainerPathSettings);
	Parms.bReinitializePolicyNetwork = bReinitializePolicyNetwork;
	Parms.bReinitializeCriticNetwork = bReinitializeCriticNetwork;
	Parms.bResetAgentsOnBegin = bResetAgentsOnBegin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.SetCompletions
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<int32>                           AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::SetCompletions(const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCompletions");

	Params::LearningAgentsTrainer_SetCompletions Parms{};

	Parms.AgentIds = std::move(AgentIds);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.SetRewards
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<int32>                           AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::SetRewards(const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRewards");

	Params::LearningAgentsTrainer_SetRewards Parms{};

	Parms.AgentIds = std::move(AgentIds);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.SetupCompletions
// (Native, Event, Public, BlueprintEvent)

void ULearningAgentsTrainer::SetupCompletions()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetupCompletions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.SetupRewards
// (Native, Event, Public, BlueprintEvent)

void ULearningAgentsTrainer::SetupRewards()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetupRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.SetupTrainer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsPolicy*            InPolicy                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsCritic*            InCritic                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsTrainerSettings   TrainerSettings                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::SetupTrainer(class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, class ULearningAgentsCritic* InCritic, const struct FLearningAgentsTrainerSettings& TrainerSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetupTrainer");

	Params::LearningAgentsTrainer_SetupTrainer Parms{};

	Parms.InInteractor = InInteractor;
	Parms.InPolicy = InPolicy;
	Parms.InCritic = InCritic;
	Parms.TrainerSettings = std::move(TrainerSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GetReward
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsTrainer::GetReward(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetReward");

	Params::LearningAgentsTrainer_GetReward Parms{};

	Parms.AgentId = AgentId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.HasTrainingFailed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsTrainer::HasTrainingFailed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasTrainingFailed");

	Params::LearningAgentsTrainer_HasTrainingFailed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.IsCompleted
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               OutCompletion                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsTrainer::IsCompleted(const int32 AgentId, ELearningAgentsCompletion* OutCompletion) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsCompleted");

	Params::LearningAgentsTrainer_IsCompleted Parms{};

	Parms.AgentId = AgentId;

	UObject::ProcessEvent(Func, &Parms);

	if (OutCompletion != nullptr)
		*OutCompletion = Parms.OutCompletion;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.IsTraining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool ULearningAgentsTrainer::IsTraining() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsTraining");

	Params::LearningAgentsTrainer_IsTraining Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

