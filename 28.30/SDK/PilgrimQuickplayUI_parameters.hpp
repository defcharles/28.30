#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PilgrimQuickplayUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function PilgrimQuickplayUI.FestivalPassTrackingWidget.HandleMCPInventoryChanged
// 0x0058 (0x0058 - 0x0000)
struct FestivalPassTrackingWidget_HandleMCPInventoryChanged final
{
public:
	TSet<class FString>                           ItemChangeFlags;                                   // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         ProfileRevision;                                   // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FestivalPassTrackingWidget_HandleMCPInventoryChanged) == 0x000008, "Wrong alignment on FestivalPassTrackingWidget_HandleMCPInventoryChanged");
static_assert(sizeof(FestivalPassTrackingWidget_HandleMCPInventoryChanged) == 0x000058, "Wrong size on FestivalPassTrackingWidget_HandleMCPInventoryChanged");
static_assert(offsetof(FestivalPassTrackingWidget_HandleMCPInventoryChanged, ItemChangeFlags) == 0x000000, "Member 'FestivalPassTrackingWidget_HandleMCPInventoryChanged::ItemChangeFlags' has a wrong offset!");
static_assert(offsetof(FestivalPassTrackingWidget_HandleMCPInventoryChanged, ProfileRevision) == 0x000050, "Member 'FestivalPassTrackingWidget_HandleMCPInventoryChanged::ProfileRevision' has a wrong offset!");

// Function PilgrimQuickplayUI.PilgrimDynamicUIDirector.HandleCursorModeChanging
// 0x0008 (0x0008 - 0x0000)
struct PilgrimDynamicUIDirector_HandleCursorModeChanging final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimDynamicUIDirector_HandleCursorModeChanging) == 0x000004, "Wrong alignment on PilgrimDynamicUIDirector_HandleCursorModeChanging");
static_assert(sizeof(PilgrimDynamicUIDirector_HandleCursorModeChanging) == 0x000008, "Wrong size on PilgrimDynamicUIDirector_HandleCursorModeChanging");
static_assert(offsetof(PilgrimDynamicUIDirector_HandleCursorModeChanging, bCursorModeEnabled) == 0x000000, "Member 'PilgrimDynamicUIDirector_HandleCursorModeChanging::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(PilgrimDynamicUIDirector_HandleCursorModeChanging, ActionName) == 0x000004, "Member 'PilgrimDynamicUIDirector_HandleCursorModeChanging::ActionName' has a wrong offset!");

// Function PilgrimQuickplayUI.PilgrimHUDBase.HandlePickerOpenRequest
// 0x000C (0x000C - 0x0000)
struct PilgrimHUDBase_HandlePickerOpenRequest final
{
public:
	EFortPickerMode                               Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialOption;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFirstAccept;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PilgrimHUDBase_HandlePickerOpenRequest) == 0x000004, "Wrong alignment on PilgrimHUDBase_HandlePickerOpenRequest");
static_assert(sizeof(PilgrimHUDBase_HandlePickerOpenRequest) == 0x00000C, "Wrong size on PilgrimHUDBase_HandlePickerOpenRequest");
static_assert(offsetof(PilgrimHUDBase_HandlePickerOpenRequest, Mode) == 0x000000, "Member 'PilgrimHUDBase_HandlePickerOpenRequest::Mode' has a wrong offset!");
static_assert(offsetof(PilgrimHUDBase_HandlePickerOpenRequest, InitialOption) == 0x000004, "Member 'PilgrimHUDBase_HandlePickerOpenRequest::InitialOption' has a wrong offset!");
static_assert(offsetof(PilgrimHUDBase_HandlePickerOpenRequest, bIgnoreFirstAccept) == 0x000008, "Member 'PilgrimHUDBase_HandlePickerOpenRequest::bIgnoreFirstAccept' has a wrong offset!");

// Function PilgrimQuickplayUI.PilgrimPostGameQuestList.SetShowQuests
// 0x0003 (0x0003 - 0x0000)
struct PilgrimPostGameQuestList_SetShowQuests final
{
public:
	bool                                          bNewShowCompleted;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewShowUpdated;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewShowUnchanged;                                 // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimPostGameQuestList_SetShowQuests) == 0x000001, "Wrong alignment on PilgrimPostGameQuestList_SetShowQuests");
static_assert(sizeof(PilgrimPostGameQuestList_SetShowQuests) == 0x000003, "Wrong size on PilgrimPostGameQuestList_SetShowQuests");
static_assert(offsetof(PilgrimPostGameQuestList_SetShowQuests, bNewShowCompleted) == 0x000000, "Member 'PilgrimPostGameQuestList_SetShowQuests::bNewShowCompleted' has a wrong offset!");
static_assert(offsetof(PilgrimPostGameQuestList_SetShowQuests, bNewShowUpdated) == 0x000001, "Member 'PilgrimPostGameQuestList_SetShowQuests::bNewShowUpdated' has a wrong offset!");
static_assert(offsetof(PilgrimPostGameQuestList_SetShowQuests, bNewShowUnchanged) == 0x000002, "Member 'PilgrimPostGameQuestList_SetShowQuests::bNewShowUnchanged' has a wrong offset!");

// Function PilgrimQuickplayUI.PilgrimQuickplayInfoModal.BP_OnScrollCompleted
// 0x0001 (0x0001 - 0x0000)
struct PilgrimQuickplayInfoModal_BP_OnScrollCompleted final
{
public:
	bool                                          bScrolledDown;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplayInfoModal_BP_OnScrollCompleted) == 0x000001, "Wrong alignment on PilgrimQuickplayInfoModal_BP_OnScrollCompleted");
static_assert(sizeof(PilgrimQuickplayInfoModal_BP_OnScrollCompleted) == 0x000001, "Wrong size on PilgrimQuickplayInfoModal_BP_OnScrollCompleted");
static_assert(offsetof(PilgrimQuickplayInfoModal_BP_OnScrollCompleted, bScrolledDown) == 0x000000, "Member 'PilgrimQuickplayInfoModal_BP_OnScrollCompleted::bScrolledDown' has a wrong offset!");

// Function PilgrimQuickplayUI.PilgrimQuickplaySpotlightList.SetMaxSpotlights
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplaySpotlightList_SetMaxSpotlights final
{
public:
	int32                                         NewMaxSpotlights;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplaySpotlightList_SetMaxSpotlights) == 0x000004, "Wrong alignment on PilgrimQuickplaySpotlightList_SetMaxSpotlights");
static_assert(sizeof(PilgrimQuickplaySpotlightList_SetMaxSpotlights) == 0x000004, "Wrong size on PilgrimQuickplaySpotlightList_SetMaxSpotlights");
static_assert(offsetof(PilgrimQuickplaySpotlightList_SetMaxSpotlights, NewMaxSpotlights) == 0x000000, "Member 'PilgrimQuickplaySpotlightList_SetMaxSpotlights::NewMaxSpotlights' has a wrong offset!");

// Function PilgrimQuickplayUI.PilgrimQuickplaySpotlightList.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplaySpotlightList_SetSelectedIndex final
{
public:
	int32                                         NewSelectedIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplaySpotlightList_SetSelectedIndex) == 0x000004, "Wrong alignment on PilgrimQuickplaySpotlightList_SetSelectedIndex");
static_assert(sizeof(PilgrimQuickplaySpotlightList_SetSelectedIndex) == 0x000004, "Wrong size on PilgrimQuickplaySpotlightList_SetSelectedIndex");
static_assert(offsetof(PilgrimQuickplaySpotlightList_SetSelectedIndex, NewSelectedIndex) == 0x000000, "Member 'PilgrimQuickplaySpotlightList_SetSelectedIndex::NewSelectedIndex' has a wrong offset!");

// Function PilgrimQuickplayUI.PilgrimQuickplaySpotlightList.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct PilgrimQuickplaySpotlightList_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuickplaySpotlightList_GetSelectedIndex) == 0x000004, "Wrong alignment on PilgrimQuickplaySpotlightList_GetSelectedIndex");
static_assert(sizeof(PilgrimQuickplaySpotlightList_GetSelectedIndex) == 0x000004, "Wrong size on PilgrimQuickplaySpotlightList_GetSelectedIndex");
static_assert(offsetof(PilgrimQuickplaySpotlightList_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'PilgrimQuickplaySpotlightList_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function PilgrimQuickplayUI.PilgrimQuestNotificationEntry.InitializeQuestNotification
// 0x0010 (0x0010 - 0x0000)
struct PilgrimQuestNotificationEntry_InitializeQuestNotification final
{
public:
	TScriptInterface<class IQuestInstanceInterface> InQuest;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PilgrimQuestNotificationEntry_InitializeQuestNotification) == 0x000008, "Wrong alignment on PilgrimQuestNotificationEntry_InitializeQuestNotification");
static_assert(sizeof(PilgrimQuestNotificationEntry_InitializeQuestNotification) == 0x000010, "Wrong size on PilgrimQuestNotificationEntry_InitializeQuestNotification");
static_assert(offsetof(PilgrimQuestNotificationEntry_InitializeQuestNotification, InQuest) == 0x000000, "Member 'PilgrimQuestNotificationEntry_InitializeQuestNotification::InQuest' has a wrong offset!");

}

