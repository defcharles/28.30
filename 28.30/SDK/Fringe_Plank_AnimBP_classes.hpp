#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Fringe_Plank_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Fringe_Plank_AnimBP.Fringe_Plank_AnimBP_C
// 0x0A90 (0x0E00 - 0x0370)
class UFringe_Plank_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x03A8(0x00B0)()
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RigidBody                    AnimGraphNode_RigidBody;                           // 0x0460(0x0960)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0DC0(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0DE0(0x0020)()

public:
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);
	void ExecuteUbergraph_Fringe_Plank_AnimBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Fringe_Plank_AnimBP_C">();
	}
	static class UFringe_Plank_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFringe_Plank_AnimBP_C>();
	}
};
static_assert(alignof(UFringe_Plank_AnimBP_C) == 0x000010, "Wrong alignment on UFringe_Plank_AnimBP_C");
static_assert(sizeof(UFringe_Plank_AnimBP_C) == 0x000E00, "Wrong size on UFringe_Plank_AnimBP_C");
static_assert(offsetof(UFringe_Plank_AnimBP_C, UberGraphFrame) == 0x000370, "Member 'UFringe_Plank_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFringe_Plank_AnimBP_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UFringe_Plank_AnimBP_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UFringe_Plank_AnimBP_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UFringe_Plank_AnimBP_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UFringe_Plank_AnimBP_C, AnimGraphNode_Root) == 0x000388, "Member 'UFringe_Plank_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UFringe_Plank_AnimBP_C, AnimGraphNode_LinkedInputPose) == 0x0003A8, "Member 'UFringe_Plank_AnimBP_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UFringe_Plank_AnimBP_C, AnimGraphNode_RigidBody) == 0x000460, "Member 'UFringe_Plank_AnimBP_C::AnimGraphNode_RigidBody' has a wrong offset!");
static_assert(offsetof(UFringe_Plank_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x000DC0, "Member 'UFringe_Plank_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UFringe_Plank_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x000DE0, "Member 'UFringe_Plank_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");

}

