#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarTrackRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum DelMarTrackRuntime.EDelMarTrackOobTubeTransitionType
// NumValues: 0x0006
enum class EDelMarTrackOobTubeTransitionType : uint8
{
	Default                                  = 0,
	IntoTunnel                               = 1,
	OutOfTunnel                              = 2,
	IntoPipe                                 = 3,
	OutOfPipe                                = 4,
	NoMeshNeeded                             = 5,
};

// Enum DelMarTrackRuntime.EDelMarTrackPropType
// NumValues: 0x0004
enum class EDelMarTrackPropType : uint8
{
	None                                     = 0,
	SkeletalMesh                             = 1,
	StaticMesh                               = 2,
	Blueprint                                = 3,
};

// Enum DelMarTrackRuntime.EDelMarTrackPropPlacementPosition
// NumValues: 0x0002
enum class EDelMarTrackPropPlacementPosition : uint8
{
	FromBeginning                            = 0,
	FromEnding                               = 1,
};

// Enum DelMarTrackRuntime.EDelMarTrackPropPlacementSpread
// NumValues: 0x0003
enum class EDelMarTrackPropPlacementSpread : uint8
{
	UseDistanceBetween                       = 0,
	UseNumberOfProps                         = 1,
	UseBothDistanceAndNumber                 = 2,
};

// Enum DelMarTrackRuntime.EDelMarTrackRoadPropType
// NumValues: 0x0002
enum class EDelMarTrackRoadPropType : uint8
{
	StartLine                                = 0,
	FinishLine                               = 1,
};

// Enum DelMarTrackRuntime.EDelMarTrackSide
// NumValues: 0x0004
enum class EDelMarTrackSide : uint8
{
	Neither                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	Both                                     = 3,
};

// Enum DelMarTrackRuntime.EDelMarTrackSnapComponentMode
// NumValues: 0x0002
enum class EDelMarTrackSnapComponentMode : uint8
{
	SetTransform                             = 0,
	SnapToComponent                          = 1,
};

// Enum DelMarTrackRuntime.EDelMarTrackSplinePointSnapMode
// NumValues: 0x0003
enum class EDelMarTrackSplinePointSnapMode : uint8
{
	StartingPoint                            = 0,
	EndingPoint                              = 1,
	CustomPoint                              = 2,
};

// Enum DelMarTrackRuntime.EDelMarTrackType
// NumValues: 0x0003
enum class EDelMarTrackType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Cosmetic                                 = 2,
};

// ScriptStruct DelMarTrackRuntime.DelMarTrackAddedEvent
// 0x0008 (0x0008 - 0x0000)
struct FDelMarTrackAddedEvent final
{
public:
	TWeakObjectPtr<class ADelMarTrackBase>        Track;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackAddedEvent) == 0x000004, "Wrong alignment on FDelMarTrackAddedEvent");
static_assert(sizeof(FDelMarTrackAddedEvent) == 0x000008, "Wrong size on FDelMarTrackAddedEvent");
static_assert(offsetof(FDelMarTrackAddedEvent, Track) == 0x000000, "Member 'FDelMarTrackAddedEvent::Track' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackMaterialCollectionEntry
// 0x0010 (0x0010 - 0x0000)
struct FDelMarTrackMaterialCollectionEntry final
{
public:
	TArray<class UMaterialInstanceConstant*>      MICs;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackMaterialCollectionEntry) == 0x000008, "Wrong alignment on FDelMarTrackMaterialCollectionEntry");
static_assert(sizeof(FDelMarTrackMaterialCollectionEntry) == 0x000010, "Wrong size on FDelMarTrackMaterialCollectionEntry");
static_assert(offsetof(FDelMarTrackMaterialCollectionEntry, MICs) == 0x000000, "Member 'FDelMarTrackMaterialCollectionEntry::MICs' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackOobTubeMeshSection
// 0x0018 (0x0018 - 0x0000)
struct FDelMarTrackOobTubeMeshSection final
{
public:
	class USplineMeshComponent*                   TubeMesh;                                          // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistanceAlongSpline;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistanceAlongSpline;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarTrackOobTubeMeshSection) == 0x000008, "Wrong alignment on FDelMarTrackOobTubeMeshSection");
static_assert(sizeof(FDelMarTrackOobTubeMeshSection) == 0x000018, "Wrong size on FDelMarTrackOobTubeMeshSection");
static_assert(offsetof(FDelMarTrackOobTubeMeshSection, TubeMesh) == 0x000000, "Member 'FDelMarTrackOobTubeMeshSection::TubeMesh' has a wrong offset!");
static_assert(offsetof(FDelMarTrackOobTubeMeshSection, PointIndex) == 0x000008, "Member 'FDelMarTrackOobTubeMeshSection::PointIndex' has a wrong offset!");
static_assert(offsetof(FDelMarTrackOobTubeMeshSection, StartDistanceAlongSpline) == 0x00000C, "Member 'FDelMarTrackOobTubeMeshSection::StartDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FDelMarTrackOobTubeMeshSection, EndDistanceAlongSpline) == 0x000010, "Member 'FDelMarTrackOobTubeMeshSection::EndDistanceAlongSpline' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackOobTubePointMetaData
// 0x0028 (0x0028 - 0x0000)
struct FDelMarTrackOobTubePointMetaData final
{
public:
	struct FVector2D                              LocationOffset;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScaleOffset;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSubsections;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldGenerateTube;                               // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldMirrorAttachedTrackPoint;                   // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAutoTransitionScaling;                      // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarTrackOobTubePointMetaData) == 0x000008, "Wrong alignment on FDelMarTrackOobTubePointMetaData");
static_assert(sizeof(FDelMarTrackOobTubePointMetaData) == 0x000028, "Wrong size on FDelMarTrackOobTubePointMetaData");
static_assert(offsetof(FDelMarTrackOobTubePointMetaData, LocationOffset) == 0x000000, "Member 'FDelMarTrackOobTubePointMetaData::LocationOffset' has a wrong offset!");
static_assert(offsetof(FDelMarTrackOobTubePointMetaData, ScaleOffset) == 0x000010, "Member 'FDelMarTrackOobTubePointMetaData::ScaleOffset' has a wrong offset!");
static_assert(offsetof(FDelMarTrackOobTubePointMetaData, NumSubsections) == 0x000020, "Member 'FDelMarTrackOobTubePointMetaData::NumSubsections' has a wrong offset!");
static_assert(offsetof(FDelMarTrackOobTubePointMetaData, bShouldGenerateTube) == 0x000024, "Member 'FDelMarTrackOobTubePointMetaData::bShouldGenerateTube' has a wrong offset!");
static_assert(offsetof(FDelMarTrackOobTubePointMetaData, bShouldMirrorAttachedTrackPoint) == 0x000025, "Member 'FDelMarTrackOobTubePointMetaData::bShouldMirrorAttachedTrackPoint' has a wrong offset!");
static_assert(offsetof(FDelMarTrackOobTubePointMetaData, bIgnoreAutoTransitionScaling) == 0x000026, "Member 'FDelMarTrackOobTubePointMetaData::bIgnoreAutoTransitionScaling' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackPaletteTransitionEntry_v2
// 0x0040 (0x0040 - 0x0000)
struct FDelMarTrackPaletteTransitionEntry_v2 final
{
public:
	struct FGameplayTag                           TagA;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagB;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADelMarTrackSegmentBase>    TRANSITION;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseReverse;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ADelMarTrackSegmentBase>    Reverse;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOOBTubeTransitions;                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            OOBTubeTransitionMesh;                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideReverseOOBTubeMesh;                       // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ReverseOOBTubeTransitionMesh;                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackPaletteTransitionEntry_v2) == 0x000008, "Wrong alignment on FDelMarTrackPaletteTransitionEntry_v2");
static_assert(sizeof(FDelMarTrackPaletteTransitionEntry_v2) == 0x000040, "Wrong size on FDelMarTrackPaletteTransitionEntry_v2");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry_v2, TagA) == 0x000000, "Member 'FDelMarTrackPaletteTransitionEntry_v2::TagA' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry_v2, TagB) == 0x000004, "Member 'FDelMarTrackPaletteTransitionEntry_v2::TagB' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry_v2, TRANSITION) == 0x000008, "Member 'FDelMarTrackPaletteTransitionEntry_v2::TRANSITION' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry_v2, bUseReverse) == 0x000010, "Member 'FDelMarTrackPaletteTransitionEntry_v2::bUseReverse' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry_v2, Reverse) == 0x000018, "Member 'FDelMarTrackPaletteTransitionEntry_v2::Reverse' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry_v2, bEnableOOBTubeTransitions) == 0x000020, "Member 'FDelMarTrackPaletteTransitionEntry_v2::bEnableOOBTubeTransitions' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry_v2, OOBTubeTransitionMesh) == 0x000028, "Member 'FDelMarTrackPaletteTransitionEntry_v2::OOBTubeTransitionMesh' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry_v2, bOverrideReverseOOBTubeMesh) == 0x000030, "Member 'FDelMarTrackPaletteTransitionEntry_v2::bOverrideReverseOOBTubeMesh' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry_v2, ReverseOOBTubeTransitionMesh) == 0x000038, "Member 'FDelMarTrackPaletteTransitionEntry_v2::ReverseOOBTubeTransitionMesh' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackPaletteTrackTypeEntry
// 0x0038 (0x0038 - 0x0000)
struct FDelMarTrackPaletteTrackTypeEntry final
{
public:
	struct FGameplayTag                           StyleTag;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ADelMarTrackSegmentBase>> SegmentActors;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class ADelMarTrackSegmentBase>    FrontEndcap;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFrontEndcapReversable;                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ADelMarTrackSegmentBase>    BackEndcap;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               WidgetImage;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackPaletteTrackTypeEntry) == 0x000008, "Wrong alignment on FDelMarTrackPaletteTrackTypeEntry");
static_assert(sizeof(FDelMarTrackPaletteTrackTypeEntry) == 0x000038, "Wrong size on FDelMarTrackPaletteTrackTypeEntry");
static_assert(offsetof(FDelMarTrackPaletteTrackTypeEntry, StyleTag) == 0x000000, "Member 'FDelMarTrackPaletteTrackTypeEntry::StyleTag' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTrackTypeEntry, SegmentActors) == 0x000008, "Member 'FDelMarTrackPaletteTrackTypeEntry::SegmentActors' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTrackTypeEntry, FrontEndcap) == 0x000018, "Member 'FDelMarTrackPaletteTrackTypeEntry::FrontEndcap' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTrackTypeEntry, bIsFrontEndcapReversable) == 0x000020, "Member 'FDelMarTrackPaletteTrackTypeEntry::bIsFrontEndcapReversable' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTrackTypeEntry, BackEndcap) == 0x000028, "Member 'FDelMarTrackPaletteTrackTypeEntry::BackEndcap' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTrackTypeEntry, WidgetImage) == 0x000030, "Member 'FDelMarTrackPaletteTrackTypeEntry::WidgetImage' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackPointDistanceRange
// 0x0008 (0x0008 - 0x0000)
struct FDelMarTrackPointDistanceRange final
{
public:
	float                                         BeginDistanceAlongSpline;                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistanceAlongSpline;                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackPointDistanceRange) == 0x000004, "Wrong alignment on FDelMarTrackPointDistanceRange");
static_assert(sizeof(FDelMarTrackPointDistanceRange) == 0x000008, "Wrong size on FDelMarTrackPointDistanceRange");
static_assert(offsetof(FDelMarTrackPointDistanceRange, BeginDistanceAlongSpline) == 0x000000, "Member 'FDelMarTrackPointDistanceRange::BeginDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPointDistanceRange, EndDistanceAlongSpline) == 0x000004, "Member 'FDelMarTrackPointDistanceRange::EndDistanceAlongSpline' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackPointIndexRange
// 0x0008 (0x0008 - 0x0000)
struct FDelMarTrackPointIndexRange final
{
public:
	int32                                         BeginPointIndex;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndPointIndex;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackPointIndexRange) == 0x000004, "Wrong alignment on FDelMarTrackPointIndexRange");
static_assert(sizeof(FDelMarTrackPointIndexRange) == 0x000008, "Wrong size on FDelMarTrackPointIndexRange");
static_assert(offsetof(FDelMarTrackPointIndexRange, BeginPointIndex) == 0x000000, "Member 'FDelMarTrackPointIndexRange::BeginPointIndex' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPointIndexRange, EndPointIndex) == 0x000004, "Member 'FDelMarTrackPointIndexRange::EndPointIndex' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackProp
// 0x0068 (0x0068 - 0x0000)
struct FDelMarTrackProp final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Blueprint;                                         // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarTrackPropType                          PropType;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarTrackProp) == 0x000008, "Wrong alignment on FDelMarTrackProp");
static_assert(sizeof(FDelMarTrackProp) == 0x000068, "Wrong size on FDelMarTrackProp");
static_assert(offsetof(FDelMarTrackProp, SkeletalMesh) == 0x000000, "Member 'FDelMarTrackProp::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FDelMarTrackProp, StaticMesh) == 0x000020, "Member 'FDelMarTrackProp::StaticMesh' has a wrong offset!");
static_assert(offsetof(FDelMarTrackProp, Blueprint) == 0x000040, "Member 'FDelMarTrackProp::Blueprint' has a wrong offset!");
static_assert(offsetof(FDelMarTrackProp, PropType) == 0x000060, "Member 'FDelMarTrackProp::PropType' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackPropSection
// 0x00F0 (0x00F0 - 0x0000)
struct FDelMarTrackPropSection final
{
public:
	TArray<struct FDelMarTrackPointIndexRange>    RangesToApplyTo;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDelMarTrackProp                       PropToPlace;                                       // 0x0010(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         NumPropsToPlace;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceBetweenProps;                              // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CustomizationPlacementBase;                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlacementBeginPadding;                             // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PlacementEndPadding;                               // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PlacementDistanceOffset;                           // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlacementScale;                                    // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PlacementRotationOffset;                           // 0x00C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EDelMarTrackSide                              SupportedTrackSide;                                // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarTrackPropPlacementPosition             PlacementPosition;                                 // 0x00D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarTrackPropPlacementSpread               PlacementSpread;                                   // 0x00DA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB[0x5];                                       // 0x00DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RangesToApplyToEditorString;                       // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackPropSection) == 0x000008, "Wrong alignment on FDelMarTrackPropSection");
static_assert(sizeof(FDelMarTrackPropSection) == 0x0000F0, "Wrong size on FDelMarTrackPropSection");
static_assert(offsetof(FDelMarTrackPropSection, RangesToApplyTo) == 0x000000, "Member 'FDelMarTrackPropSection::RangesToApplyTo' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, PropToPlace) == 0x000010, "Member 'FDelMarTrackPropSection::PropToPlace' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, NumPropsToPlace) == 0x000078, "Member 'FDelMarTrackPropSection::NumPropsToPlace' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, DistanceBetweenProps) == 0x000080, "Member 'FDelMarTrackPropSection::DistanceBetweenProps' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, CustomizationPlacementBase) == 0x000088, "Member 'FDelMarTrackPropSection::CustomizationPlacementBase' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, PlacementBeginPadding) == 0x000090, "Member 'FDelMarTrackPropSection::PlacementBeginPadding' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, PlacementEndPadding) == 0x000098, "Member 'FDelMarTrackPropSection::PlacementEndPadding' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, PlacementDistanceOffset) == 0x0000A0, "Member 'FDelMarTrackPropSection::PlacementDistanceOffset' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, PlacementScale) == 0x0000A8, "Member 'FDelMarTrackPropSection::PlacementScale' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, PlacementRotationOffset) == 0x0000C0, "Member 'FDelMarTrackPropSection::PlacementRotationOffset' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, SupportedTrackSide) == 0x0000D8, "Member 'FDelMarTrackPropSection::SupportedTrackSide' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, PlacementPosition) == 0x0000D9, "Member 'FDelMarTrackPropSection::PlacementPosition' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, PlacementSpread) == 0x0000DA, "Member 'FDelMarTrackPropSection::PlacementSpread' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPropSection, RangesToApplyToEditorString) == 0x0000E0, "Member 'FDelMarTrackPropSection::RangesToApplyToEditorString' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackSegmentSpawnInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDelMarTrackSegmentSpawnInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarTrackSegmentSpawnInfo) == 0x000008, "Wrong alignment on FDelMarTrackSegmentSpawnInfo");
static_assert(sizeof(FDelMarTrackSegmentSpawnInfo) == 0x000018, "Wrong size on FDelMarTrackSegmentSpawnInfo");

// ScriptStruct DelMarTrackRuntime.DelMarTrackSegmentCollectionProxyData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDelMarTrackSegmentCollectionProxyData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarTrackSegmentCollectionProxyData) == 0x000008, "Wrong alignment on FDelMarTrackSegmentCollectionProxyData");
static_assert(sizeof(FDelMarTrackSegmentCollectionProxyData) == 0x000030, "Wrong size on FDelMarTrackSegmentCollectionProxyData");

// ScriptStruct DelMarTrackRuntime.DelMarSegmentActorCollection
// 0x0028 (0x0028 - 0x0000)
struct FDelMarSegmentActorCollection final
{
public:
	TArray<class ADelMarTrackSegmentBase*>        Segments;                                          // 0x0000(0x0010)(ZeroConstructor, NonTransactional, UObjectWrapper, NativeAccessSpecifierPublic)
	class ADelMarTrackBase*                       Track;                                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                PropComponents;                                    // 0x0018(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDelMarSegmentActorCollection) == 0x000008, "Wrong alignment on FDelMarSegmentActorCollection");
static_assert(sizeof(FDelMarSegmentActorCollection) == 0x000028, "Wrong size on FDelMarSegmentActorCollection");
static_assert(offsetof(FDelMarSegmentActorCollection, Segments) == 0x000000, "Member 'FDelMarSegmentActorCollection::Segments' has a wrong offset!");
static_assert(offsetof(FDelMarSegmentActorCollection, Track) == 0x000010, "Member 'FDelMarSegmentActorCollection::Track' has a wrong offset!");
static_assert(offsetof(FDelMarSegmentActorCollection, PropComponents) == 0x000018, "Member 'FDelMarSegmentActorCollection::PropComponents' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackTagConverterData
// 0x000C (0x000C - 0x0000)
struct FDelMarTrackTagConverterData final
{
public:
	struct FGameplayTag                           v1Tag;                                             // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckCustomizations;                              // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedRightRail;                                    // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedLeftRail;                                     // 0x0006(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           v2Tag;                                             // 0x0008(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackTagConverterData) == 0x000004, "Wrong alignment on FDelMarTrackTagConverterData");
static_assert(sizeof(FDelMarTrackTagConverterData) == 0x00000C, "Wrong size on FDelMarTrackTagConverterData");
static_assert(offsetof(FDelMarTrackTagConverterData, v1Tag) == 0x000000, "Member 'FDelMarTrackTagConverterData::v1Tag' has a wrong offset!");
static_assert(offsetof(FDelMarTrackTagConverterData, bCheckCustomizations) == 0x000004, "Member 'FDelMarTrackTagConverterData::bCheckCustomizations' has a wrong offset!");
static_assert(offsetof(FDelMarTrackTagConverterData, bNeedRightRail) == 0x000005, "Member 'FDelMarTrackTagConverterData::bNeedRightRail' has a wrong offset!");
static_assert(offsetof(FDelMarTrackTagConverterData, bNeedLeftRail) == 0x000006, "Member 'FDelMarTrackTagConverterData::bNeedLeftRail' has a wrong offset!");
static_assert(offsetof(FDelMarTrackTagConverterData, v2Tag) == 0x000008, "Member 'FDelMarTrackTagConverterData::v2Tag' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackTransformData
// 0x0070 (0x0070 - 0x0000)
struct FDelMarTrackTransformData final
{
public:
	TWeakObjectPtr<class ADelMarTrackBase>        Track;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TrackTransform;                                    // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackTransformData) == 0x000010, "Wrong alignment on FDelMarTrackTransformData");
static_assert(sizeof(FDelMarTrackTransformData) == 0x000070, "Wrong size on FDelMarTrackTransformData");
static_assert(offsetof(FDelMarTrackTransformData, Track) == 0x000000, "Member 'FDelMarTrackTransformData::Track' has a wrong offset!");
static_assert(offsetof(FDelMarTrackTransformData, TrackTransform) == 0x000010, "Member 'FDelMarTrackTransformData::TrackTransform' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackPaletteTransitionEntry
// 0x0058 (0x0058 - 0x0000)
struct FDelMarTrackPaletteTransitionEntry final
{
public:
	struct FGameplayTag                           TypeA;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TypeB;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AtoB;                                              // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BtoA;                                              // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackPaletteTransitionEntry) == 0x000008, "Wrong alignment on FDelMarTrackPaletteTransitionEntry");
static_assert(sizeof(FDelMarTrackPaletteTransitionEntry) == 0x000058, "Wrong size on FDelMarTrackPaletteTransitionEntry");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry, TypeA) == 0x000000, "Member 'FDelMarTrackPaletteTransitionEntry::TypeA' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry, TypeB) == 0x000004, "Member 'FDelMarTrackPaletteTransitionEntry::TypeB' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry, AtoB) == 0x000008, "Member 'FDelMarTrackPaletteTransitionEntry::AtoB' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry, BtoA) == 0x000028, "Member 'FDelMarTrackPaletteTransitionEntry::BtoA' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteTransitionEntry, Title) == 0x000048, "Member 'FDelMarTrackPaletteTransitionEntry::Title' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackCapEntry
// 0x0048 (0x0048 - 0x0000)
struct FDelMarTrackCapEntry final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   StartCap;                                          // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EndCap;                                            // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackCapEntry) == 0x000008, "Wrong alignment on FDelMarTrackCapEntry");
static_assert(sizeof(FDelMarTrackCapEntry) == 0x000048, "Wrong size on FDelMarTrackCapEntry");
static_assert(offsetof(FDelMarTrackCapEntry, tag) == 0x000000, "Member 'FDelMarTrackCapEntry::tag' has a wrong offset!");
static_assert(offsetof(FDelMarTrackCapEntry, StartCap) == 0x000008, "Member 'FDelMarTrackCapEntry::StartCap' has a wrong offset!");
static_assert(offsetof(FDelMarTrackCapEntry, EndCap) == 0x000028, "Member 'FDelMarTrackCapEntry::EndCap' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarTrackPaletteEntry
// 0x0048 (0x0048 - 0x0000)
struct FDelMarTrackPaletteEntry final
{
public:
	struct FGameplayTag                           TrackTypeTag;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   TrackSegmentClass;                                 // 0x0008(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MeshCustomizations;                                // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarTrackPaletteEntry) == 0x000008, "Wrong alignment on FDelMarTrackPaletteEntry");
static_assert(sizeof(FDelMarTrackPaletteEntry) == 0x000048, "Wrong size on FDelMarTrackPaletteEntry");
static_assert(offsetof(FDelMarTrackPaletteEntry, TrackTypeTag) == 0x000000, "Member 'FDelMarTrackPaletteEntry::TrackTypeTag' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteEntry, TrackSegmentClass) == 0x000008, "Member 'FDelMarTrackPaletteEntry::TrackSegmentClass' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteEntry, MeshCustomizations) == 0x000028, "Member 'FDelMarTrackPaletteEntry::MeshCustomizations' has a wrong offset!");
static_assert(offsetof(FDelMarTrackPaletteEntry, Title) == 0x000038, "Member 'FDelMarTrackPaletteEntry::Title' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.TrackPosition
// 0x0020 (0x0020 - 0x0000)
struct FTrackPosition final
{
public:
	class ADelMarTrackBase*                       Track;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawDistanceAlongSpline;                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToVehicleSquared;                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastKnownGoodDistance;                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SegmentIndex;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackPosition) == 0x000008, "Wrong alignment on FTrackPosition");
static_assert(sizeof(FTrackPosition) == 0x000020, "Wrong size on FTrackPosition");
static_assert(offsetof(FTrackPosition, Track) == 0x000000, "Member 'FTrackPosition::Track' has a wrong offset!");
static_assert(offsetof(FTrackPosition, DistanceAlongSpline) == 0x000008, "Member 'FTrackPosition::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FTrackPosition, RawDistanceAlongSpline) == 0x00000C, "Member 'FTrackPosition::RawDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FTrackPosition, DistanceToVehicleSquared) == 0x000010, "Member 'FTrackPosition::DistanceToVehicleSquared' has a wrong offset!");
static_assert(offsetof(FTrackPosition, LastKnownGoodDistance) == 0x000014, "Member 'FTrackPosition::LastKnownGoodDistance' has a wrong offset!");
static_assert(offsetof(FTrackPosition, SegmentIndex) == 0x000018, "Member 'FTrackPosition::SegmentIndex' has a wrong offset!");
static_assert(offsetof(FTrackPosition, bIsValid) == 0x00001C, "Member 'FTrackPosition::bIsValid' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarSplineSegmentInfo
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FDelMarSplineSegmentInfo final
{
public:
	uint8                                         Pad_0[0xC8];                                       // 0x0000(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarSplineSegmentInfo) == 0x000008, "Wrong alignment on FDelMarSplineSegmentInfo");
static_assert(sizeof(FDelMarSplineSegmentInfo) == 0x0000C8, "Wrong size on FDelMarSplineSegmentInfo");

// ScriptStruct DelMarTrackRuntime.DelMarSplinePointMetaData
// 0x0080 (0x0080 - 0x0000)
struct FDelMarSplinePointMetaData final
{
public:
	struct FGameplayTag                           TrackTypeTag;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SegmentClass;                                      // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, bool>                     EnabledMeshCustomizations;                         // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUseStableRoll;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFrontEndcap;                                   // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBackEndcap;                                    // 0x007A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarSplinePointMetaData) == 0x000008, "Wrong alignment on FDelMarSplinePointMetaData");
static_assert(sizeof(FDelMarSplinePointMetaData) == 0x000080, "Wrong size on FDelMarSplinePointMetaData");
static_assert(offsetof(FDelMarSplinePointMetaData, TrackTypeTag) == 0x000000, "Member 'FDelMarSplinePointMetaData::TrackTypeTag' has a wrong offset!");
static_assert(offsetof(FDelMarSplinePointMetaData, SegmentClass) == 0x000008, "Member 'FDelMarSplinePointMetaData::SegmentClass' has a wrong offset!");
static_assert(offsetof(FDelMarSplinePointMetaData, EnabledMeshCustomizations) == 0x000028, "Member 'FDelMarSplinePointMetaData::EnabledMeshCustomizations' has a wrong offset!");
static_assert(offsetof(FDelMarSplinePointMetaData, bUseStableRoll) == 0x000078, "Member 'FDelMarSplinePointMetaData::bUseStableRoll' has a wrong offset!");
static_assert(offsetof(FDelMarSplinePointMetaData, bUseFrontEndcap) == 0x000079, "Member 'FDelMarSplinePointMetaData::bUseFrontEndcap' has a wrong offset!");
static_assert(offsetof(FDelMarSplinePointMetaData, bUseBackEndcap) == 0x00007A, "Member 'FDelMarSplinePointMetaData::bUseBackEndcap' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.ClosestLocationToWorldPlaneResult
// 0x0020 (0x0020 - 0x0000)
struct FClosestLocationToWorldPlaneResult final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key;                                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToPlane;                                   // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClosestLocationToWorldPlaneResult) == 0x000008, "Wrong alignment on FClosestLocationToWorldPlaneResult");
static_assert(sizeof(FClosestLocationToWorldPlaneResult) == 0x000020, "Wrong size on FClosestLocationToWorldPlaneResult");
static_assert(offsetof(FClosestLocationToWorldPlaneResult, Location) == 0x000000, "Member 'FClosestLocationToWorldPlaneResult::Location' has a wrong offset!");
static_assert(offsetof(FClosestLocationToWorldPlaneResult, Key) == 0x000018, "Member 'FClosestLocationToWorldPlaneResult::Key' has a wrong offset!");
static_assert(offsetof(FClosestLocationToWorldPlaneResult, DistanceToPlane) == 0x00001C, "Member 'FClosestLocationToWorldPlaneResult::DistanceToPlane' has a wrong offset!");

// ScriptStruct DelMarTrackRuntime.DelMarRotationalMinimalFrame
// 0x0068 (0x0068 - 0x0000)
struct FDelMarRotationalMinimalFrame final
{
public:
	float                                         InputKey;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Origin;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Tangent;                                           // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationAxis;                                      // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarRotationalMinimalFrame) == 0x000008, "Wrong alignment on FDelMarRotationalMinimalFrame");
static_assert(sizeof(FDelMarRotationalMinimalFrame) == 0x000068, "Wrong size on FDelMarRotationalMinimalFrame");
static_assert(offsetof(FDelMarRotationalMinimalFrame, InputKey) == 0x000000, "Member 'FDelMarRotationalMinimalFrame::InputKey' has a wrong offset!");
static_assert(offsetof(FDelMarRotationalMinimalFrame, Origin) == 0x000008, "Member 'FDelMarRotationalMinimalFrame::Origin' has a wrong offset!");
static_assert(offsetof(FDelMarRotationalMinimalFrame, Tangent) == 0x000020, "Member 'FDelMarRotationalMinimalFrame::Tangent' has a wrong offset!");
static_assert(offsetof(FDelMarRotationalMinimalFrame, RotationAxis) == 0x000038, "Member 'FDelMarRotationalMinimalFrame::RotationAxis' has a wrong offset!");
static_assert(offsetof(FDelMarRotationalMinimalFrame, Normal) == 0x000050, "Member 'FDelMarRotationalMinimalFrame::Normal' has a wrong offset!");

}

