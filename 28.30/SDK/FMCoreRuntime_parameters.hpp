#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMCoreRuntime

#include "Basic.hpp"

#include "FMCoreRuntime_structs.hpp"
#include "HarmonixMidi_structs.hpp"


namespace SDK::Params
{

// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetDegreeShiftFromProgression
// 0x0008 (0x0008 - 0x0000)
struct FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression final
{
public:
	EHarmonicProgression                          Progression;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression) == 0x000004, "Wrong alignment on FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression");
static_assert(sizeof(FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression) == 0x000008, "Wrong size on FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression, Progression) == 0x000000, "Member 'FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression::Progression' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression, ReturnValue) == 0x000004, "Member 'FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetIntervalAtStepInScale
// 0x0008 (0x0008 - 0x0000)
struct FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale final
{
public:
	int32                                         ScaleStep;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicKeyMode                                 KeyMode;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicInterval                                ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale) == 0x000004, "Wrong alignment on FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale");
static_assert(sizeof(FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale) == 0x000008, "Wrong size on FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale, ScaleStep) == 0x000000, "Member 'FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale::ScaleStep' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale, KeyMode) == 0x000004, "Member 'FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale::KeyMode' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale, ReturnValue) == 0x000005, "Member 'FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetIntervalForNote
// 0x0003 (0x0003 - 0x0000)
struct FMCoreMusicFunctionLibrary_GetIntervalForNote final
{
public:
	struct FMidiNote                              Note;                                              // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EMusicKey                                     Key;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicInterval                                ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicFunctionLibrary_GetIntervalForNote) == 0x000001, "Wrong alignment on FMCoreMusicFunctionLibrary_GetIntervalForNote");
static_assert(sizeof(FMCoreMusicFunctionLibrary_GetIntervalForNote) == 0x000003, "Wrong size on FMCoreMusicFunctionLibrary_GetIntervalForNote");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetIntervalForNote, Note) == 0x000000, "Member 'FMCoreMusicFunctionLibrary_GetIntervalForNote::Note' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetIntervalForNote, Key) == 0x000001, "Member 'FMCoreMusicFunctionLibrary_GetIntervalForNote::Key' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetIntervalForNote, ReturnValue) == 0x000002, "Member 'FMCoreMusicFunctionLibrary_GetIntervalForNote::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetIntervalStepInScale
// 0x0008 (0x0008 - 0x0000)
struct FMCoreMusicFunctionLibrary_GetIntervalStepInScale final
{
public:
	EMusicInterval                                Interval;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicKeyMode                                 KeyMode;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicFunctionLibrary_GetIntervalStepInScale) == 0x000004, "Wrong alignment on FMCoreMusicFunctionLibrary_GetIntervalStepInScale");
static_assert(sizeof(FMCoreMusicFunctionLibrary_GetIntervalStepInScale) == 0x000008, "Wrong size on FMCoreMusicFunctionLibrary_GetIntervalStepInScale");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetIntervalStepInScale, Interval) == 0x000000, "Member 'FMCoreMusicFunctionLibrary_GetIntervalStepInScale::Interval' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetIntervalStepInScale, KeyMode) == 0x000001, "Member 'FMCoreMusicFunctionLibrary_GetIntervalStepInScale::KeyMode' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetIntervalStepInScale, ReturnValue) == 0x000004, "Member 'FMCoreMusicFunctionLibrary_GetIntervalStepInScale::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetMidiNoteFromScale
// 0x000C (0x000C - 0x0000)
struct FMCoreMusicFunctionLibrary_GetMidiNoteFromScale final
{
public:
	EMusicKey                                     Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Octave;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicInterval                                Interval;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMidiNote                              ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMCoreMusicFunctionLibrary_GetMidiNoteFromScale) == 0x000004, "Wrong alignment on FMCoreMusicFunctionLibrary_GetMidiNoteFromScale");
static_assert(sizeof(FMCoreMusicFunctionLibrary_GetMidiNoteFromScale) == 0x00000C, "Wrong size on FMCoreMusicFunctionLibrary_GetMidiNoteFromScale");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetMidiNoteFromScale, Key) == 0x000000, "Member 'FMCoreMusicFunctionLibrary_GetMidiNoteFromScale::Key' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetMidiNoteFromScale, Octave) == 0x000004, "Member 'FMCoreMusicFunctionLibrary_GetMidiNoteFromScale::Octave' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetMidiNoteFromScale, Interval) == 0x000008, "Member 'FMCoreMusicFunctionLibrary_GetMidiNoteFromScale::Interval' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_GetMidiNoteFromScale, ReturnValue) == 0x000009, "Member 'FMCoreMusicFunctionLibrary_GetMidiNoteFromScale::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.SnapToScale
// 0x0004 (0x0004 - 0x0000)
struct FMCoreMusicFunctionLibrary_SnapToScale final
{
public:
	struct FMidiNote                              Note;                                              // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EMusicKey                                     Key;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicKeyMode                                 KeyMode;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMidiNote                              ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicFunctionLibrary_SnapToScale) == 0x000001, "Wrong alignment on FMCoreMusicFunctionLibrary_SnapToScale");
static_assert(sizeof(FMCoreMusicFunctionLibrary_SnapToScale) == 0x000004, "Wrong size on FMCoreMusicFunctionLibrary_SnapToScale");
static_assert(offsetof(FMCoreMusicFunctionLibrary_SnapToScale, Note) == 0x000000, "Member 'FMCoreMusicFunctionLibrary_SnapToScale::Note' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_SnapToScale, Key) == 0x000001, "Member 'FMCoreMusicFunctionLibrary_SnapToScale::Key' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_SnapToScale, KeyMode) == 0x000002, "Member 'FMCoreMusicFunctionLibrary_SnapToScale::KeyMode' has a wrong offset!");
static_assert(offsetof(FMCoreMusicFunctionLibrary_SnapToScale, ReturnValue) == 0x000003, "Member 'FMCoreMusicFunctionLibrary_SnapToScale::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerKeyChange
// 0x0001 (0x0001 - 0x0000)
struct FMCoreMusicManagerComponent_TriggerKeyChange final
{
public:
	EMusicKey                                     InKey;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicManagerComponent_TriggerKeyChange) == 0x000001, "Wrong alignment on FMCoreMusicManagerComponent_TriggerKeyChange");
static_assert(sizeof(FMCoreMusicManagerComponent_TriggerKeyChange) == 0x000001, "Wrong size on FMCoreMusicManagerComponent_TriggerKeyChange");
static_assert(offsetof(FMCoreMusicManagerComponent_TriggerKeyChange, InKey) == 0x000000, "Member 'FMCoreMusicManagerComponent_TriggerKeyChange::InKey' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerModeChange
// 0x0001 (0x0001 - 0x0000)
struct FMCoreMusicManagerComponent_TriggerModeChange final
{
public:
	EMusicKeyMode                                 InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicManagerComponent_TriggerModeChange) == 0x000001, "Wrong alignment on FMCoreMusicManagerComponent_TriggerModeChange");
static_assert(sizeof(FMCoreMusicManagerComponent_TriggerModeChange) == 0x000001, "Wrong size on FMCoreMusicManagerComponent_TriggerModeChange");
static_assert(offsetof(FMCoreMusicManagerComponent_TriggerModeChange, InMode) == 0x000000, "Member 'FMCoreMusicManagerComponent_TriggerModeChange::InMode' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerSpeedChange
// 0x0008 (0x0008 - 0x0000)
struct FMCoreMusicManagerComponent_TriggerSpeedChange final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalChangeOnly;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMCoreMusicManagerComponent_TriggerSpeedChange) == 0x000004, "Wrong alignment on FMCoreMusicManagerComponent_TriggerSpeedChange");
static_assert(sizeof(FMCoreMusicManagerComponent_TriggerSpeedChange) == 0x000008, "Wrong size on FMCoreMusicManagerComponent_TriggerSpeedChange");
static_assert(offsetof(FMCoreMusicManagerComponent_TriggerSpeedChange, Speed) == 0x000000, "Member 'FMCoreMusicManagerComponent_TriggerSpeedChange::Speed' has a wrong offset!");
static_assert(offsetof(FMCoreMusicManagerComponent_TriggerSpeedChange, bLocalChangeOnly) == 0x000004, "Member 'FMCoreMusicManagerComponent_TriggerSpeedChange::bLocalChangeOnly' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerTempoChange
// 0x0008 (0x0008 - 0x0000)
struct FMCoreMusicManagerComponent_TriggerTempoChange final
{
public:
	int32                                         BPM;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalChangeOnly;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMCoreMusicManagerComponent_TriggerTempoChange) == 0x000004, "Wrong alignment on FMCoreMusicManagerComponent_TriggerTempoChange");
static_assert(sizeof(FMCoreMusicManagerComponent_TriggerTempoChange) == 0x000008, "Wrong size on FMCoreMusicManagerComponent_TriggerTempoChange");
static_assert(offsetof(FMCoreMusicManagerComponent_TriggerTempoChange, BPM) == 0x000000, "Member 'FMCoreMusicManagerComponent_TriggerTempoChange::BPM' has a wrong offset!");
static_assert(offsetof(FMCoreMusicManagerComponent_TriggerTempoChange, bLocalChangeOnly) == 0x000004, "Member 'FMCoreMusicManagerComponent_TriggerTempoChange::bLocalChangeOnly' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerTimeSignatureChange
// 0x0008 (0x0008 - 0x0000)
struct FMCoreMusicManagerComponent_TriggerTimeSignatureChange final
{
public:
	int32                                         Numerator;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Denominator;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicManagerComponent_TriggerTimeSignatureChange) == 0x000004, "Wrong alignment on FMCoreMusicManagerComponent_TriggerTimeSignatureChange");
static_assert(sizeof(FMCoreMusicManagerComponent_TriggerTimeSignatureChange) == 0x000008, "Wrong size on FMCoreMusicManagerComponent_TriggerTimeSignatureChange");
static_assert(offsetof(FMCoreMusicManagerComponent_TriggerTimeSignatureChange, Numerator) == 0x000000, "Member 'FMCoreMusicManagerComponent_TriggerTimeSignatureChange::Numerator' has a wrong offset!");
static_assert(offsetof(FMCoreMusicManagerComponent_TriggerTimeSignatureChange, Denominator) == 0x000004, "Member 'FMCoreMusicManagerComponent_TriggerTimeSignatureChange::Denominator' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentAudioState
// 0x0008 (0x0008 - 0x0000)
struct FMCoreMusicManagerComponent_GetCurrentAudioState final
{
public:
	EMusicKey                                     OutKey;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicKeyMode                                 OutKeyMode;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutTempo;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicManagerComponent_GetCurrentAudioState) == 0x000004, "Wrong alignment on FMCoreMusicManagerComponent_GetCurrentAudioState");
static_assert(sizeof(FMCoreMusicManagerComponent_GetCurrentAudioState) == 0x000008, "Wrong size on FMCoreMusicManagerComponent_GetCurrentAudioState");
static_assert(offsetof(FMCoreMusicManagerComponent_GetCurrentAudioState, OutKey) == 0x000000, "Member 'FMCoreMusicManagerComponent_GetCurrentAudioState::OutKey' has a wrong offset!");
static_assert(offsetof(FMCoreMusicManagerComponent_GetCurrentAudioState, OutKeyMode) == 0x000001, "Member 'FMCoreMusicManagerComponent_GetCurrentAudioState::OutKeyMode' has a wrong offset!");
static_assert(offsetof(FMCoreMusicManagerComponent_GetCurrentAudioState, OutTempo) == 0x000004, "Member 'FMCoreMusicManagerComponent_GetCurrentAudioState::OutTempo' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentKey
// 0x0001 (0x0001 - 0x0000)
struct FMCoreMusicManagerComponent_GetCurrentKey final
{
public:
	EMusicKey                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicManagerComponent_GetCurrentKey) == 0x000001, "Wrong alignment on FMCoreMusicManagerComponent_GetCurrentKey");
static_assert(sizeof(FMCoreMusicManagerComponent_GetCurrentKey) == 0x000001, "Wrong size on FMCoreMusicManagerComponent_GetCurrentKey");
static_assert(offsetof(FMCoreMusicManagerComponent_GetCurrentKey, ReturnValue) == 0x000000, "Member 'FMCoreMusicManagerComponent_GetCurrentKey::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentKeyMode
// 0x0001 (0x0001 - 0x0000)
struct FMCoreMusicManagerComponent_GetCurrentKeyMode final
{
public:
	EMusicKeyMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicManagerComponent_GetCurrentKeyMode) == 0x000001, "Wrong alignment on FMCoreMusicManagerComponent_GetCurrentKeyMode");
static_assert(sizeof(FMCoreMusicManagerComponent_GetCurrentKeyMode) == 0x000001, "Wrong size on FMCoreMusicManagerComponent_GetCurrentKeyMode");
static_assert(offsetof(FMCoreMusicManagerComponent_GetCurrentKeyMode, ReturnValue) == 0x000000, "Member 'FMCoreMusicManagerComponent_GetCurrentKeyMode::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentSpeed
// 0x0004 (0x0004 - 0x0000)
struct FMCoreMusicManagerComponent_GetCurrentSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicManagerComponent_GetCurrentSpeed) == 0x000004, "Wrong alignment on FMCoreMusicManagerComponent_GetCurrentSpeed");
static_assert(sizeof(FMCoreMusicManagerComponent_GetCurrentSpeed) == 0x000004, "Wrong size on FMCoreMusicManagerComponent_GetCurrentSpeed");
static_assert(offsetof(FMCoreMusicManagerComponent_GetCurrentSpeed, ReturnValue) == 0x000000, "Member 'FMCoreMusicManagerComponent_GetCurrentSpeed::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentTempo
// 0x0004 (0x0004 - 0x0000)
struct FMCoreMusicManagerComponent_GetCurrentTempo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicManagerComponent_GetCurrentTempo) == 0x000004, "Wrong alignment on FMCoreMusicManagerComponent_GetCurrentTempo");
static_assert(sizeof(FMCoreMusicManagerComponent_GetCurrentTempo) == 0x000004, "Wrong size on FMCoreMusicManagerComponent_GetCurrentTempo");
static_assert(offsetof(FMCoreMusicManagerComponent_GetCurrentTempo, ReturnValue) == 0x000000, "Member 'FMCoreMusicManagerComponent_GetCurrentTempo::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentTimeSignature
// 0x0008 (0x0008 - 0x0000)
struct FMCoreMusicManagerComponent_GetCurrentTimeSignature final
{
public:
	struct FFMCoreTimeSignature                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCoreMusicManagerComponent_GetCurrentTimeSignature) == 0x000004, "Wrong alignment on FMCoreMusicManagerComponent_GetCurrentTimeSignature");
static_assert(sizeof(FMCoreMusicManagerComponent_GetCurrentTimeSignature) == 0x000008, "Wrong size on FMCoreMusicManagerComponent_GetCurrentTimeSignature");
static_assert(offsetof(FMCoreMusicManagerComponent_GetCurrentTimeSignature, ReturnValue) == 0x000000, "Member 'FMCoreMusicManagerComponent_GetCurrentTimeSignature::ReturnValue' has a wrong offset!");

// Function FMCoreRuntime.FMPlayspaceScopedSystemManager.GetOrCreateSystemForActorBP
// 0x0020 (0x0020 - 0x0000)
struct FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP final
{
public:
	TSubclassOf<class AActor>                     SystemClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OutActor;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESystemGetResult                              OutWasValid;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP) == 0x000008, "Wrong alignment on FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP");
static_assert(sizeof(FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP) == 0x000020, "Wrong size on FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP");
static_assert(offsetof(FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP, SystemClass) == 0x000000, "Member 'FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP::SystemClass' has a wrong offset!");
static_assert(offsetof(FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP, Requester) == 0x000008, "Member 'FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP::Requester' has a wrong offset!");
static_assert(offsetof(FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP, OutActor) == 0x000010, "Member 'FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP::OutActor' has a wrong offset!");
static_assert(offsetof(FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP, OutWasValid) == 0x000018, "Member 'FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP::OutWasValid' has a wrong offset!");

// Function FMCoreRuntime.FMPlayspaceScopedSystemManager.GetSystemForActorIfExistsBP
// 0x0020 (0x0020 - 0x0000)
struct FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP final
{
public:
	TSubclassOf<class AActor>                     SystemClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OutActor;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESystemGetResult                              OutWasValid;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP) == 0x000008, "Wrong alignment on FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP");
static_assert(sizeof(FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP) == 0x000020, "Wrong size on FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP");
static_assert(offsetof(FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP, SystemClass) == 0x000000, "Member 'FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP::SystemClass' has a wrong offset!");
static_assert(offsetof(FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP, Requester) == 0x000008, "Member 'FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP::Requester' has a wrong offset!");
static_assert(offsetof(FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP, OutActor) == 0x000010, "Member 'FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP::OutActor' has a wrong offset!");
static_assert(offsetof(FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP, OutWasValid) == 0x000018, "Member 'FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP::OutWasValid' has a wrong offset!");

// Function FMCoreRuntime.FMPlayspaceScopedSystemManager.MulticastNewSystemCreated
// 0x0018 (0x0018 - 0x0000)
struct FMPlayspaceScopedSystemManager_MulticastNewSystemCreated final
{
public:
	class AActor*                                 PlayspaceActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     SystemClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 CreatedActor;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMPlayspaceScopedSystemManager_MulticastNewSystemCreated) == 0x000008, "Wrong alignment on FMPlayspaceScopedSystemManager_MulticastNewSystemCreated");
static_assert(sizeof(FMPlayspaceScopedSystemManager_MulticastNewSystemCreated) == 0x000018, "Wrong size on FMPlayspaceScopedSystemManager_MulticastNewSystemCreated");
static_assert(offsetof(FMPlayspaceScopedSystemManager_MulticastNewSystemCreated, PlayspaceActor) == 0x000000, "Member 'FMPlayspaceScopedSystemManager_MulticastNewSystemCreated::PlayspaceActor' has a wrong offset!");
static_assert(offsetof(FMPlayspaceScopedSystemManager_MulticastNewSystemCreated, SystemClass) == 0x000008, "Member 'FMPlayspaceScopedSystemManager_MulticastNewSystemCreated::SystemClass' has a wrong offset!");
static_assert(offsetof(FMPlayspaceScopedSystemManager_MulticastNewSystemCreated, CreatedActor) == 0x000010, "Member 'FMPlayspaceScopedSystemManager_MulticastNewSystemCreated::CreatedActor' has a wrong offset!");

}

