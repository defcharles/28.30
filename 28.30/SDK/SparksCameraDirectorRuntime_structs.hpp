#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksCameraDirectorRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum SparksCameraDirectorRuntime.ESparksCameraConfigType
// NumValues: 0x0004
enum class ESparksCameraConfigType : uint8
{
	Main                                     = 0,
	QA                                       = 1,
	Perf                                     = 2,
	Custom                                   = 3,
};

// Enum SparksCameraDirectorRuntime.ESparksCameraLogType
// NumValues: 0x0004
enum class ESparksCameraLogType : uint8
{
	ShotGenerator                            = 0,
	ShotName                                 = 1,
	SectionName                              = 2,
	Unknown                                  = 3,
};

// Enum SparksCameraDirectorRuntime.ESparksFilterResult
// NumValues: 0x0003
enum class ESparksFilterResult : uint8
{
	Match                                    = 0,
	FailedRequired                           = 1,
	FailedExcluded                           = 2,
};

// Enum SparksCameraDirectorRuntime.ESparksSectionGeneratorResult
// NumValues: 0x0004
enum class ESparksSectionGeneratorResult : uint8
{
	Success                                  = 0,
	SuccessTooShort                          = 1,
	SuccessTooLong                           = 2,
	Failed                                   = 3,
};

// ScriptStruct SparksCameraDirectorRuntime.SparksCameraShot
// 0x0048 (0x0048 - 0x0000)
struct FSparksCameraShot final
{
public:
	class ULevelSequence*                         Sequence;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MoveToSocketName;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToActor;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSocketRotationOnAttach;                        // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachInterpSpeed;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtSocketName;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtInterpSpeed;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeSeconds;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeSeconds;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksCameraShot) == 0x000008, "Wrong alignment on FSparksCameraShot");
static_assert(sizeof(FSparksCameraShot) == 0x000048, "Wrong size on FSparksCameraShot");
static_assert(offsetof(FSparksCameraShot, Sequence) == 0x000000, "Member 'FSparksCameraShot::Sequence' has a wrong offset!");
static_assert(offsetof(FSparksCameraShot, MoveToSocketName) == 0x000008, "Member 'FSparksCameraShot::MoveToSocketName' has a wrong offset!");
static_assert(offsetof(FSparksCameraShot, bAttachToActor) == 0x00000C, "Member 'FSparksCameraShot::bAttachToActor' has a wrong offset!");
static_assert(offsetof(FSparksCameraShot, bUseSocketRotationOnAttach) == 0x00000D, "Member 'FSparksCameraShot::bUseSocketRotationOnAttach' has a wrong offset!");
static_assert(offsetof(FSparksCameraShot, AttachInterpSpeed) == 0x000010, "Member 'FSparksCameraShot::AttachInterpSpeed' has a wrong offset!");
static_assert(offsetof(FSparksCameraShot, LookAtSocketName) == 0x000014, "Member 'FSparksCameraShot::LookAtSocketName' has a wrong offset!");
static_assert(offsetof(FSparksCameraShot, LookAtInterpSpeed) == 0x000018, "Member 'FSparksCameraShot::LookAtInterpSpeed' has a wrong offset!");
static_assert(offsetof(FSparksCameraShot, MinTimeSeconds) == 0x00001C, "Member 'FSparksCameraShot::MinTimeSeconds' has a wrong offset!");
static_assert(offsetof(FSparksCameraShot, MaxTimeSeconds) == 0x000020, "Member 'FSparksCameraShot::MaxTimeSeconds' has a wrong offset!");
static_assert(offsetof(FSparksCameraShot, Tags) == 0x000028, "Member 'FSparksCameraShot::Tags' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCameraPoolWrapper
// 0x0010 (0x0010 - 0x0000)
struct FSparksCameraPoolWrapper final
{
public:
	TSubclassOf<class USparksCameraShotSelectRuleBase> ShotSelectionRule;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USparksCameraShotPool*                  Pool;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksCameraPoolWrapper) == 0x000008, "Wrong alignment on FSparksCameraPoolWrapper");
static_assert(sizeof(FSparksCameraPoolWrapper) == 0x000010, "Wrong size on FSparksCameraPoolWrapper");
static_assert(offsetof(FSparksCameraPoolWrapper, ShotSelectionRule) == 0x000000, "Member 'FSparksCameraPoolWrapper::ShotSelectionRule' has a wrong offset!");
static_assert(offsetof(FSparksCameraPoolWrapper, Pool) == 0x000008, "Member 'FSparksCameraPoolWrapper::Pool' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCameraFilter
// 0x0060 (0x0060 - 0x0000)
struct FSparksCameraFilter final
{
public:
	struct FGameplayTagContainer                  Required;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Preferred;                                         // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Excluded;                                          // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksCameraFilter) == 0x000008, "Wrong alignment on FSparksCameraFilter");
static_assert(sizeof(FSparksCameraFilter) == 0x000060, "Wrong size on FSparksCameraFilter");
static_assert(offsetof(FSparksCameraFilter, Required) == 0x000000, "Member 'FSparksCameraFilter::Required' has a wrong offset!");
static_assert(offsetof(FSparksCameraFilter, Preferred) == 0x000020, "Member 'FSparksCameraFilter::Preferred' has a wrong offset!");
static_assert(offsetof(FSparksCameraFilter, Excluded) == 0x000040, "Member 'FSparksCameraFilter::Excluded' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCameraSectionWrapper
// 0x00A8 (0x00A8 - 0x0000)
struct FSparksCameraSectionWrapper final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGeneratedShotTimeSeconds;                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USparksCameraPoolSelectRuleBase> PoolSelectionRule;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSparksCameraPoolWrapper               IntroPool;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSparksCameraPoolWrapper>       Pools;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSparksCameraPoolWrapper               ExitPool;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSparksCameraFilter                    SectionFilter;                                     // 0x0048(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksCameraSectionWrapper) == 0x000008, "Wrong alignment on FSparksCameraSectionWrapper");
static_assert(sizeof(FSparksCameraSectionWrapper) == 0x0000A8, "Wrong size on FSparksCameraSectionWrapper");
static_assert(offsetof(FSparksCameraSectionWrapper, Name) == 0x000000, "Member 'FSparksCameraSectionWrapper::Name' has a wrong offset!");
static_assert(offsetof(FSparksCameraSectionWrapper, Priority) == 0x000004, "Member 'FSparksCameraSectionWrapper::Priority' has a wrong offset!");
static_assert(offsetof(FSparksCameraSectionWrapper, MaxGeneratedShotTimeSeconds) == 0x000008, "Member 'FSparksCameraSectionWrapper::MaxGeneratedShotTimeSeconds' has a wrong offset!");
static_assert(offsetof(FSparksCameraSectionWrapper, PoolSelectionRule) == 0x000010, "Member 'FSparksCameraSectionWrapper::PoolSelectionRule' has a wrong offset!");
static_assert(offsetof(FSparksCameraSectionWrapper, IntroPool) == 0x000018, "Member 'FSparksCameraSectionWrapper::IntroPool' has a wrong offset!");
static_assert(offsetof(FSparksCameraSectionWrapper, Pools) == 0x000028, "Member 'FSparksCameraSectionWrapper::Pools' has a wrong offset!");
static_assert(offsetof(FSparksCameraSectionWrapper, ExitPool) == 0x000038, "Member 'FSparksCameraSectionWrapper::ExitPool' has a wrong offset!");
static_assert(offsetof(FSparksCameraSectionWrapper, SectionFilter) == 0x000048, "Member 'FSparksCameraSectionWrapper::SectionFilter' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCameraShotUses
// 0x0010 (0x0010 - 0x0000)
struct FSparksCameraShotUses final
{
public:
	TArray<float>                                 Timestamps;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksCameraShotUses) == 0x000008, "Wrong alignment on FSparksCameraShotUses");
static_assert(sizeof(FSparksCameraShotUses) == 0x000010, "Wrong size on FSparksCameraShotUses");
static_assert(offsetof(FSparksCameraShotUses, Timestamps) == 0x000000, "Member 'FSparksCameraShotUses::Timestamps' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCommonStartCameraDirectorEvent
// 0x0001 (0x0001 - 0x0000)
struct FSparksCommonStartCameraDirectorEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSparksCommonStartCameraDirectorEvent) == 0x000001, "Wrong alignment on FSparksCommonStartCameraDirectorEvent");
static_assert(sizeof(FSparksCommonStartCameraDirectorEvent) == 0x000001, "Wrong size on FSparksCommonStartCameraDirectorEvent");

// ScriptStruct SparksCameraDirectorRuntime.SparksCommonStopCameraDirectorEvent
// 0x0001 (0x0001 - 0x0000)
struct FSparksCommonStopCameraDirectorEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSparksCommonStopCameraDirectorEvent) == 0x000001, "Wrong alignment on FSparksCommonStopCameraDirectorEvent");
static_assert(sizeof(FSparksCommonStopCameraDirectorEvent) == 0x000001, "Wrong size on FSparksCommonStopCameraDirectorEvent");

// ScriptStruct SparksCameraDirectorRuntime.SparksCommonForceIntermissionCameraDirectorEvent
// 0x0020 (0x0020 - 0x0000)
struct FSparksCommonForceIntermissionCameraDirectorEvent final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksCommonForceIntermissionCameraDirectorEvent) == 0x000008, "Wrong alignment on FSparksCommonForceIntermissionCameraDirectorEvent");
static_assert(sizeof(FSparksCommonForceIntermissionCameraDirectorEvent) == 0x000020, "Wrong size on FSparksCommonForceIntermissionCameraDirectorEvent");
static_assert(offsetof(FSparksCommonForceIntermissionCameraDirectorEvent, Tags) == 0x000000, "Member 'FSparksCommonForceIntermissionCameraDirectorEvent::Tags' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCommonResetCameraDirectorEvent
// 0x0001 (0x0001 - 0x0000)
struct FSparksCommonResetCameraDirectorEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSparksCommonResetCameraDirectorEvent) == 0x000001, "Wrong alignment on FSparksCommonResetCameraDirectorEvent");
static_assert(sizeof(FSparksCommonResetCameraDirectorEvent) == 0x000001, "Wrong size on FSparksCommonResetCameraDirectorEvent");

// ScriptStruct SparksCameraDirectorRuntime.SparksCommonDynamicCameraDirectorEvent
// 0x0038 (0x0038 - 0x0000)
struct FSparksCommonDynamicCameraDirectorEvent final
{
public:
	bool                                          bWaitForTransition;                                // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTransition;                                  // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LengthSeconds;                                     // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreferLocalPlayer;                                // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  PreferredTarget;                                   // 0x000C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwriteActiveDynamicEvent;                      // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0018(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksCommonDynamicCameraDirectorEvent) == 0x000008, "Wrong alignment on FSparksCommonDynamicCameraDirectorEvent");
static_assert(sizeof(FSparksCommonDynamicCameraDirectorEvent) == 0x000038, "Wrong size on FSparksCommonDynamicCameraDirectorEvent");
static_assert(offsetof(FSparksCommonDynamicCameraDirectorEvent, bWaitForTransition) == 0x000000, "Member 'FSparksCommonDynamicCameraDirectorEvent::bWaitForTransition' has a wrong offset!");
static_assert(offsetof(FSparksCommonDynamicCameraDirectorEvent, bForceTransition) == 0x000001, "Member 'FSparksCommonDynamicCameraDirectorEvent::bForceTransition' has a wrong offset!");
static_assert(offsetof(FSparksCommonDynamicCameraDirectorEvent, LengthSeconds) == 0x000004, "Member 'FSparksCommonDynamicCameraDirectorEvent::LengthSeconds' has a wrong offset!");
static_assert(offsetof(FSparksCommonDynamicCameraDirectorEvent, bPreferLocalPlayer) == 0x000008, "Member 'FSparksCommonDynamicCameraDirectorEvent::bPreferLocalPlayer' has a wrong offset!");
static_assert(offsetof(FSparksCommonDynamicCameraDirectorEvent, PreferredTarget) == 0x00000C, "Member 'FSparksCommonDynamicCameraDirectorEvent::PreferredTarget' has a wrong offset!");
static_assert(offsetof(FSparksCommonDynamicCameraDirectorEvent, bOverwriteActiveDynamicEvent) == 0x000014, "Member 'FSparksCommonDynamicCameraDirectorEvent::bOverwriteActiveDynamicEvent' has a wrong offset!");
static_assert(offsetof(FSparksCommonDynamicCameraDirectorEvent, Tags) == 0x000018, "Member 'FSparksCommonDynamicCameraDirectorEvent::Tags' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCommonIntermissionCameraDirectorEvent
// 0x0020 (0x0020 - 0x0000)
struct FSparksCommonIntermissionCameraDirectorEvent final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksCommonIntermissionCameraDirectorEvent) == 0x000008, "Wrong alignment on FSparksCommonIntermissionCameraDirectorEvent");
static_assert(sizeof(FSparksCommonIntermissionCameraDirectorEvent) == 0x000020, "Wrong size on FSparksCommonIntermissionCameraDirectorEvent");
static_assert(offsetof(FSparksCommonIntermissionCameraDirectorEvent, Tags) == 0x000000, "Member 'FSparksCommonIntermissionCameraDirectorEvent::Tags' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCommonCameraDebugLogEvent
// 0x0018 (0x0018 - 0x0000)
struct FSparksCommonCameraDebugLogEvent final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksCameraLogType                          Type;                                              // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSparksCommonCameraDebugLogEvent) == 0x000008, "Wrong alignment on FSparksCommonCameraDebugLogEvent");
static_assert(sizeof(FSparksCommonCameraDebugLogEvent) == 0x000018, "Wrong size on FSparksCommonCameraDebugLogEvent");
static_assert(offsetof(FSparksCommonCameraDebugLogEvent, Data) == 0x000000, "Member 'FSparksCommonCameraDebugLogEvent::Data' has a wrong offset!");
static_assert(offsetof(FSparksCommonCameraDebugLogEvent, Type) == 0x000010, "Member 'FSparksCommonCameraDebugLogEvent::Type' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCameraDirectorSequenceEntry
// 0x0080 (0x0080 - 0x0000)
struct FSparksCameraDirectorSequenceEntry final
{
public:
	class FName                                   GeneratorName;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChooseLocalShot;                                  // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreferLocalPlayer;                                // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  PreferredTarget;                                   // 0x000C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimeMS;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthMS;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x001C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSparksCameraShot                      Shot;                                              // 0x0028(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsDynamicEntry;                                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  GeneratedTargetActor;                              // 0x0074(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSparksCameraDirectorSequenceEntry) == 0x000008, "Wrong alignment on FSparksCameraDirectorSequenceEntry");
static_assert(sizeof(FSparksCameraDirectorSequenceEntry) == 0x000080, "Wrong size on FSparksCameraDirectorSequenceEntry");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, GeneratorName) == 0x000000, "Member 'FSparksCameraDirectorSequenceEntry::GeneratorName' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, SectionName) == 0x000004, "Member 'FSparksCameraDirectorSequenceEntry::SectionName' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, bChooseLocalShot) == 0x000008, "Member 'FSparksCameraDirectorSequenceEntry::bChooseLocalShot' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, bPreferLocalPlayer) == 0x000009, "Member 'FSparksCameraDirectorSequenceEntry::bPreferLocalPlayer' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, PreferredTarget) == 0x00000C, "Member 'FSparksCameraDirectorSequenceEntry::PreferredTarget' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, StartTimeMS) == 0x000014, "Member 'FSparksCameraDirectorSequenceEntry::StartTimeMS' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, LengthMS) == 0x000018, "Member 'FSparksCameraDirectorSequenceEntry::LengthMS' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, TargetActor) == 0x00001C, "Member 'FSparksCameraDirectorSequenceEntry::TargetActor' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, Shot) == 0x000028, "Member 'FSparksCameraDirectorSequenceEntry::Shot' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, bIsDynamicEntry) == 0x000070, "Member 'FSparksCameraDirectorSequenceEntry::bIsDynamicEntry' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequenceEntry, GeneratedTargetActor) == 0x000074, "Member 'FSparksCameraDirectorSequenceEntry::GeneratedTargetActor' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksCameraDirectorSequence
// 0x0028 (0x0028 - 0x0000)
struct FSparksCameraDirectorSequence final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimeMS;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthMS;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSparksCameraDirectorSequenceEntry> Entries;                                           // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksCameraDirectorSequence) == 0x000008, "Wrong alignment on FSparksCameraDirectorSequence");
static_assert(sizeof(FSparksCameraDirectorSequence) == 0x000028, "Wrong size on FSparksCameraDirectorSequence");
static_assert(offsetof(FSparksCameraDirectorSequence, SectionName) == 0x000000, "Member 'FSparksCameraDirectorSequence::SectionName' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequence, StartTimeMS) == 0x000010, "Member 'FSparksCameraDirectorSequence::StartTimeMS' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequence, LengthMS) == 0x000014, "Member 'FSparksCameraDirectorSequence::LengthMS' has a wrong offset!");
static_assert(offsetof(FSparksCameraDirectorSequence, Entries) == 0x000018, "Member 'FSparksCameraDirectorSequence::Entries' has a wrong offset!");

// ScriptStruct SparksCameraDirectorRuntime.SparksPerformanceMapSection
// 0x0090 (0x0090 - 0x0000)
struct FSparksPerformanceMapSection final
{
public:
	float                                         StartMS;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthMS;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PrimaryTag;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSparksCameraFilter                    ShotsFilter;                                       // 0x0030(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSparksPerformanceMapSection) == 0x000008, "Wrong alignment on FSparksPerformanceMapSection");
static_assert(sizeof(FSparksPerformanceMapSection) == 0x000090, "Wrong size on FSparksPerformanceMapSection");
static_assert(offsetof(FSparksPerformanceMapSection, StartMS) == 0x000000, "Member 'FSparksPerformanceMapSection::StartMS' has a wrong offset!");
static_assert(offsetof(FSparksPerformanceMapSection, LengthMS) == 0x000004, "Member 'FSparksPerformanceMapSection::LengthMS' has a wrong offset!");
static_assert(offsetof(FSparksPerformanceMapSection, PrimaryTag) == 0x000008, "Member 'FSparksPerformanceMapSection::PrimaryTag' has a wrong offset!");
static_assert(offsetof(FSparksPerformanceMapSection, Tags) == 0x000010, "Member 'FSparksPerformanceMapSection::Tags' has a wrong offset!");
static_assert(offsetof(FSparksPerformanceMapSection, ShotsFilter) == 0x000030, "Member 'FSparksPerformanceMapSection::ShotsFilter' has a wrong offset!");

}

