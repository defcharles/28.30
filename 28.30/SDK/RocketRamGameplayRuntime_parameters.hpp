#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RocketRamGameplayRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RocketRamGameplayRuntime.AbilityTask_ApplyRootMotion_RocketRam.ApplyRootMotion_RocketRam
// 0x0078 (0x0078 - 0x0000)
struct AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam final
{
public:
	class UGameplayAbility*                       InOwningAbility;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTaskInstanceName;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InInitialDirection;                                // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinSpeed;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxSpeed;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            InSpeedCurve;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloorTraceHeight;                                // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           InPathOffsetCurve;                                 // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 InVelocityOnFinishMode;                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InSetVelocityOnFinish;                             // 0x0050(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InClampVelocityOnFinish;                           // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_ApplyRootMotion_RocketRam* ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam");
static_assert(sizeof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam) == 0x000078, "Wrong size on AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InOwningAbility) == 0x000000, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InOwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InTaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InTaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InDuration) == 0x00000C, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InDuration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InInitialDirection) == 0x000010, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InInitialDirection' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InMinSpeed) == 0x000028, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InMinSpeed' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InMaxSpeed) == 0x00002C, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InMaxSpeed' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InSpeedCurve) == 0x000030, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InSpeedCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InFloorTraceHeight) == 0x000038, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InFloorTraceHeight' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InPathOffsetCurve) == 0x000040, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InPathOffsetCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InVelocityOnFinishMode) == 0x000048, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InVelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InSetVelocityOnFinish) == 0x000050, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InSetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, InClampVelocityOnFinish) == 0x000068, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::InClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam, ReturnValue) == 0x000070, "Member 'AbilityTask_ApplyRootMotion_RocketRam_ApplyRootMotion_RocketRam::ReturnValue' has a wrong offset!");

}

