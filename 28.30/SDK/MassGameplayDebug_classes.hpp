#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassGameplayDebug

#include "Basic.hpp"

#include "MassEntity_classes.hpp"
#include "Engine_classes.hpp"
#include "MassSpawner_classes.hpp"


namespace SDK
{

// Class MassGameplayDebug.AssignDebugVisProcessor
// 0x02A8 (0x0380 - 0x00D8)
class UAssignDebugVisProcessor final : public UMassObserverProcessor
{
public:
	uint8                                         Pad_D8[0x2A8];                                     // 0x00D8(0x02A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssignDebugVisProcessor">();
	}
	static class UAssignDebugVisProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssignDebugVisProcessor>();
	}
};
static_assert(alignof(UAssignDebugVisProcessor) == 0x000008, "Wrong alignment on UAssignDebugVisProcessor");
static_assert(sizeof(UAssignDebugVisProcessor) == 0x000380, "Wrong size on UAssignDebugVisProcessor");

// Class MassGameplayDebug.DebugVisLocationProcessor
// 0x02A0 (0x0360 - 0x00C0)
class UDebugVisLocationProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2A0];                                     // 0x00C0(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DebugVisLocationProcessor">();
	}
	static class UDebugVisLocationProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugVisLocationProcessor>();
	}
};
static_assert(alignof(UDebugVisLocationProcessor) == 0x000008, "Wrong alignment on UDebugVisLocationProcessor");
static_assert(sizeof(UDebugVisLocationProcessor) == 0x000360, "Wrong size on UDebugVisLocationProcessor");

// Class MassGameplayDebug.MassProcessor_UpdateDebugVis
// 0x02A0 (0x0360 - 0x00C0)
class UMassProcessor_UpdateDebugVis final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2A0];                                     // 0x00C0(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassProcessor_UpdateDebugVis">();
	}
	static class UMassProcessor_UpdateDebugVis* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassProcessor_UpdateDebugVis>();
	}
};
static_assert(alignof(UMassProcessor_UpdateDebugVis) == 0x000008, "Wrong alignment on UMassProcessor_UpdateDebugVis");
static_assert(sizeof(UMassProcessor_UpdateDebugVis) == 0x000360, "Wrong size on UMassProcessor_UpdateDebugVis");

// Class MassGameplayDebug.MassDebuggerSubsystem
// 0x0098 (0x00D0 - 0x0038)
class UMassDebuggerSubsystem final : public UMassSubsystemBase
{
public:
	uint8                                         Pad_38[0x80];                                      // 0x0038(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class UMassDebugVisualizationComponent*       VisualizationComponent;                            // 0x00B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMassDebugVisualizer*                   DebugVisualizer;                                   // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassDebuggerSubsystem">();
	}
	static class UMassDebuggerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassDebuggerSubsystem>();
	}
};
static_assert(alignof(UMassDebuggerSubsystem) == 0x000008, "Wrong alignment on UMassDebuggerSubsystem");
static_assert(sizeof(UMassDebuggerSubsystem) == 0x0000D0, "Wrong size on UMassDebuggerSubsystem");
static_assert(offsetof(UMassDebuggerSubsystem, VisualizationComponent) == 0x0000B8, "Member 'UMassDebuggerSubsystem::VisualizationComponent' has a wrong offset!");
static_assert(offsetof(UMassDebuggerSubsystem, DebugVisualizer) == 0x0000C0, "Member 'UMassDebuggerSubsystem::DebugVisualizer' has a wrong offset!");

// Class MassGameplayDebug.MassDebugVisualizationComponent
// 0x0000 (0x00A0 - 0x00A0)
class UMassDebugVisualizationComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassDebugVisualizationComponent">();
	}
	static class UMassDebugVisualizationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassDebugVisualizationComponent>();
	}
};
static_assert(alignof(UMassDebugVisualizationComponent) == 0x000008, "Wrong alignment on UMassDebugVisualizationComponent");
static_assert(sizeof(UMassDebugVisualizationComponent) == 0x0000A0, "Wrong size on UMassDebugVisualizationComponent");

// Class MassGameplayDebug.MassDebugVisualizationTrait
// 0x0000 (0x0028 - 0x0028)
class UMassDebugVisualizationTrait final : public UMassEntityTraitBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassDebugVisualizationTrait">();
	}
	static class UMassDebugVisualizationTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassDebugVisualizationTrait>();
	}
};
static_assert(alignof(UMassDebugVisualizationTrait) == 0x000008, "Wrong alignment on UMassDebugVisualizationTrait");
static_assert(sizeof(UMassDebugVisualizationTrait) == 0x000028, "Wrong size on UMassDebugVisualizationTrait");

// Class MassGameplayDebug.MassDebugVisualizer
// 0x0000 (0x0290 - 0x0290)
class AMassDebugVisualizer final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassDebugVisualizer">();
	}
	static class AMassDebugVisualizer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMassDebugVisualizer>();
	}
};
static_assert(alignof(AMassDebugVisualizer) == 0x000008, "Wrong alignment on AMassDebugVisualizer");
static_assert(sizeof(AMassDebugVisualizer) == 0x000290, "Wrong size on AMassDebugVisualizer");

}

