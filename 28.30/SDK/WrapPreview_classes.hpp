#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WrapPreview

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WrapPreview.WrapPreview_C
// 0x00D0 (0x0690 - 0x05C0)
class AWrapPreview_C final : public AAthenaWrapPreviewActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkyLightComponent*                     SkyLightPC;                                        // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 AssaultRiflePreview;                               // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MechPreview;                                       // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLightLowMobile;                                 // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLightMobile;                            // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight_StandaloneForSwitch;                      // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLigh4;                                          // 0x0600(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight7;                                         // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight8;                                         // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight3;                                         // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLowerRight2;                                    // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLeft2;                                          // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Bounce2;                                           // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    BounceRear2;                                       // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimTopRight2;                                      // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimBottomLeft2;                                    // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LightingPivot;                                     // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane;                                             // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bLightsScaledForVehicle;                           // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_661[0x7];                                      // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DeltaScale;                                        // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysOn;                                          // 0x0671(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FloorEverAllowed;                                  // 0x0672(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          debugConstructionLighting;                         // 0x0673(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_674[0x4];                                      // 0x0674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateTransitionPauseRequestHandle     ItemsPendingTransitionOutHandle;                   // 0x0678(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void UpdateLightingScale();
	void UpdateSettings();
	void SwitchPCLighting(bool Visibility);
	void UpdateFloorVisibility();
	void SwitchMobileLighting(bool NewParam);
	void SwitchErebusLighting(bool Visibility);
	void OnSetFloorMaterial(class UMaterialInterface* InMaterialInstance);
	void SetFloorEnabled(bool Floor_Enabled);
	void OnPreviewVisualsSpawned(const bool bUseSecondaryTransitionEffects, const bool bShowFloor);
	void OnUpdateFloorMaterial(bool bEnableAutotestBackground);
	void OnItemsPendingTransitionOut_EnsureAllResOutEffectsAreCleanedUp();
	void OnItemsPendingTransitionOut_SpawnResOutEffects();
	void LightControl(bool Active);
	void OnItemsPendingTransitionOut(const struct FStateTransitionControllerHandle& TransitionController);
	void HandleLightingScale();
	void Internal_ItemsPendingTransitionOutComplete(const struct FStateTransitionControllerHandle& TransitionController);
	void FinishShowingResOutEffects();
	void ExecuteUbergraph_WrapPreview(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WrapPreview_C">();
	}
	static class AWrapPreview_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWrapPreview_C>();
	}
};
static_assert(alignof(AWrapPreview_C) == 0x000010, "Wrong alignment on AWrapPreview_C");
static_assert(sizeof(AWrapPreview_C) == 0x000690, "Wrong size on AWrapPreview_C");
static_assert(offsetof(AWrapPreview_C, UberGraphFrame) == 0x0005C0, "Member 'AWrapPreview_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, SkyLightPC) == 0x0005C8, "Member 'AWrapPreview_C::SkyLightPC' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, AssaultRiflePreview) == 0x0005D0, "Member 'AWrapPreview_C::AssaultRiflePreview' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, MechPreview) == 0x0005D8, "Member 'AWrapPreview_C::MechPreview' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, SkyLightLowMobile) == 0x0005E0, "Member 'AWrapPreview_C::SkyLightLowMobile' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, Arrow) == 0x0005E8, "Member 'AWrapPreview_C::Arrow' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, DirectionalLightMobile) == 0x0005F0, "Member 'AWrapPreview_C::DirectionalLightMobile' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLight_StandaloneForSwitch) == 0x0005F8, "Member 'AWrapPreview_C::KeyLight_StandaloneForSwitch' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLigh4) == 0x000600, "Member 'AWrapPreview_C::KeyLigh4' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLight7) == 0x000608, "Member 'AWrapPreview_C::KeyLight7' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLight8) == 0x000610, "Member 'AWrapPreview_C::KeyLight8' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLight3) == 0x000618, "Member 'AWrapPreview_C::KeyLight3' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, RimLowerRight2) == 0x000620, "Member 'AWrapPreview_C::RimLowerRight2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, RimLeft2) == 0x000628, "Member 'AWrapPreview_C::RimLeft2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, Bounce2) == 0x000630, "Member 'AWrapPreview_C::Bounce2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, BounceRear2) == 0x000638, "Member 'AWrapPreview_C::BounceRear2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, RimTopRight2) == 0x000640, "Member 'AWrapPreview_C::RimTopRight2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, RimBottomLeft2) == 0x000648, "Member 'AWrapPreview_C::RimBottomLeft2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, LightingPivot) == 0x000650, "Member 'AWrapPreview_C::LightingPivot' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, Plane) == 0x000658, "Member 'AWrapPreview_C::Plane' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, bLightsScaledForVehicle) == 0x000660, "Member 'AWrapPreview_C::bLightsScaledForVehicle' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, DeltaScale) == 0x000668, "Member 'AWrapPreview_C::DeltaScale' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, IsActive) == 0x000670, "Member 'AWrapPreview_C::IsActive' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, AlwaysOn) == 0x000671, "Member 'AWrapPreview_C::AlwaysOn' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, FloorEverAllowed) == 0x000672, "Member 'AWrapPreview_C::FloorEverAllowed' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, debugConstructionLighting) == 0x000673, "Member 'AWrapPreview_C::debugConstructionLighting' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, ItemsPendingTransitionOutHandle) == 0x000678, "Member 'AWrapPreview_C::ItemsPendingTransitionOutHandle' has a wrong offset!");

}

