#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMInWorldKnobsRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "StructUtils_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionSavedValue
// 0x0020 (0x0020 - 0x0000)
struct FFabricUserOptionSavedValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricUserOptionSavedValue) == 0x000008, "Wrong alignment on FFabricUserOptionSavedValue");
static_assert(sizeof(FFabricUserOptionSavedValue) == 0x000020, "Wrong size on FFabricUserOptionSavedValue");
static_assert(offsetof(FFabricUserOptionSavedValue, Key) == 0x000000, "Member 'FFabricUserOptionSavedValue::Key' has a wrong offset!");
static_assert(offsetof(FFabricUserOptionSavedValue, Value) == 0x000010, "Member 'FFabricUserOptionSavedValue::Value' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionSaveData
// 0x0010 (0x0010 - 0x0000)
struct FFabricUserOptionSaveData final
{
public:
	TArray<struct FFabricUserOptionSavedValue>    SavedUserOptions;                                  // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricUserOptionSaveData) == 0x000008, "Wrong alignment on FFabricUserOptionSaveData");
static_assert(sizeof(FFabricUserOptionSaveData) == 0x000010, "Wrong size on FFabricUserOptionSaveData");
static_assert(offsetof(FFabricUserOptionSaveData, SavedUserOptions) == 0x000000, "Member 'FFabricUserOptionSaveData::SavedUserOptions' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.ScreenMeshArray
// 0x0010 (0x0010 - 0x0000)
struct FScreenMeshArray final
{
public:
	TArray<TSoftObjectPtr<class UStaticMesh>>     ScreenMeshArrayByHeight;                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScreenMeshArray) == 0x000008, "Wrong alignment on FScreenMeshArray");
static_assert(sizeof(FScreenMeshArray) == 0x000010, "Wrong size on FScreenMeshArray");
static_assert(offsetof(FScreenMeshArray, ScreenMeshArrayByHeight) == 0x000000, "Member 'FScreenMeshArray::ScreenMeshArrayByHeight' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.ScreenWidgetLayoutInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FScreenWidgetLayoutInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScreenWidgetLayoutInfo) == 0x000008, "Wrong alignment on FScreenWidgetLayoutInfo");
static_assert(sizeof(FScreenWidgetLayoutInfo) == 0x000018, "Wrong size on FScreenWidgetLayoutInfo");

// ScriptStruct FMInWorldKnobsRuntime.FabricScreenLayout
// 0x0020 (0x0020 - 0x0000)
struct FFabricScreenLayout final
{
public:
	struct FVector2D                              GridPosition;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UserOptionName;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFabricWidget>              FabricWidgetClass;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricScreenLayout) == 0x000008, "Wrong alignment on FFabricScreenLayout");
static_assert(sizeof(FFabricScreenLayout) == 0x000020, "Wrong size on FFabricScreenLayout");
static_assert(offsetof(FFabricScreenLayout, GridPosition) == 0x000000, "Member 'FFabricScreenLayout::GridPosition' has a wrong offset!");
static_assert(offsetof(FFabricScreenLayout, UserOptionName) == 0x000010, "Member 'FFabricScreenLayout::UserOptionName' has a wrong offset!");
static_assert(offsetof(FFabricScreenLayout, FabricWidgetClass) == 0x000018, "Member 'FFabricScreenLayout::FabricWidgetClass' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionValue
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFabricUserOptionValue
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricUserOptionValue) == 0x000008, "Wrong alignment on FFabricUserOptionValue");
static_assert(sizeof(FFabricUserOptionValue) == 0x000008, "Wrong size on FFabricUserOptionValue");

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionValueInt
// 0x0008 (0x0010 - 0x0008)
struct FFabricUserOptionValueInt final : public FFabricUserOptionValue
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricUserOptionValueInt) == 0x000008, "Wrong alignment on FFabricUserOptionValueInt");
static_assert(sizeof(FFabricUserOptionValueInt) == 0x000010, "Wrong size on FFabricUserOptionValueInt");
static_assert(offsetof(FFabricUserOptionValueInt, Value) == 0x000008, "Member 'FFabricUserOptionValueInt::Value' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionValueFloat
// 0x0008 (0x0010 - 0x0008)
struct FFabricUserOptionValueFloat final : public FFabricUserOptionValue
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricUserOptionValueFloat) == 0x000008, "Wrong alignment on FFabricUserOptionValueFloat");
static_assert(sizeof(FFabricUserOptionValueFloat) == 0x000010, "Wrong size on FFabricUserOptionValueFloat");
static_assert(offsetof(FFabricUserOptionValueFloat, Value) == 0x000008, "Member 'FFabricUserOptionValueFloat::Value' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionValueEnum
// 0x0010 (0x0018 - 0x0008)
struct FFabricUserOptionValueEnum final : public FFabricUserOptionValue
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricUserOptionValueEnum) == 0x000008, "Wrong alignment on FFabricUserOptionValueEnum");
static_assert(sizeof(FFabricUserOptionValueEnum) == 0x000018, "Wrong size on FFabricUserOptionValueEnum");
static_assert(offsetof(FFabricUserOptionValueEnum, Value) == 0x000008, "Member 'FFabricUserOptionValueEnum::Value' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionValueBool
// 0x0008 (0x0010 - 0x0008)
struct FFabricUserOptionValueBool final : public FFabricUserOptionValue
{
public:
	bool                                          Value;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFabricUserOptionValueBool) == 0x000008, "Wrong alignment on FFabricUserOptionValueBool");
static_assert(sizeof(FFabricUserOptionValueBool) == 0x000010, "Wrong size on FFabricUserOptionValueBool");
static_assert(offsetof(FFabricUserOptionValueBool, Value) == 0x000008, "Member 'FFabricUserOptionValueBool::Value' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionValueString
// 0x0010 (0x0018 - 0x0008)
struct FFabricUserOptionValueString final : public FFabricUserOptionValue
{
public:
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricUserOptionValueString) == 0x000008, "Wrong alignment on FFabricUserOptionValueString");
static_assert(sizeof(FFabricUserOptionValueString) == 0x000018, "Wrong size on FFabricUserOptionValueString");
static_assert(offsetof(FFabricUserOptionValueString, Value) == 0x000008, "Member 'FFabricUserOptionValueString::Value' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionPreset
// 0x0020 (0x0020 - 0x0000)
struct FFabricUserOptionPreset final
{
public:
	class FString                                 UserOption;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       UserOptionValue;                                   // 0x0010(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricUserOptionPreset) == 0x000008, "Wrong alignment on FFabricUserOptionPreset");
static_assert(sizeof(FFabricUserOptionPreset) == 0x000020, "Wrong size on FFabricUserOptionPreset");
static_assert(offsetof(FFabricUserOptionPreset, UserOption) == 0x000000, "Member 'FFabricUserOptionPreset::UserOption' has a wrong offset!");
static_assert(offsetof(FFabricUserOptionPreset, UserOptionValue) == 0x000010, "Member 'FFabricUserOptionPreset::UserOptionValue' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.FabricUserOptionPresetCollection
// 0x0010 (0x0010 - 0x0000)
struct FFabricUserOptionPresetCollection final
{
public:
	TArray<struct FFabricUserOptionPreset>        UserOptionPresets;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricUserOptionPresetCollection) == 0x000008, "Wrong alignment on FFabricUserOptionPresetCollection");
static_assert(sizeof(FFabricUserOptionPresetCollection) == 0x000010, "Wrong size on FFabricUserOptionPresetCollection");
static_assert(offsetof(FFabricUserOptionPresetCollection, UserOptionPresets) == 0x000000, "Member 'FFabricUserOptionPresetCollection::UserOptionPresets' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.FMOutgoingCableConnection
// 0x0030 (0x0030 - 0x0000)
struct FFMOutgoingCableConnection final
{
public:
	class FName                                   OutputPortName;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 Device;                                            // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentName;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFMOutgoingCableConnection) == 0x000008, "Wrong alignment on FFMOutgoingCableConnection");
static_assert(sizeof(FFMOutgoingCableConnection) == 0x000030, "Wrong size on FFMOutgoingCableConnection");
static_assert(offsetof(FFMOutgoingCableConnection, OutputPortName) == 0x000000, "Member 'FFMOutgoingCableConnection::OutputPortName' has a wrong offset!");
static_assert(offsetof(FFMOutgoingCableConnection, Device) == 0x000008, "Member 'FFMOutgoingCableConnection::Device' has a wrong offset!");
static_assert(offsetof(FFMOutgoingCableConnection, ComponentName) == 0x000028, "Member 'FFMOutgoingCableConnection::ComponentName' has a wrong offset!");

// ScriptStruct FMInWorldKnobsRuntime.UserOptionDefinitionFMOutgoingConnectionMetaData
// 0x0030 (0x0038 - 0x0008)
struct FUserOptionDefinitionFMOutgoingConnectionMetaData final : public FUserOptionDefinitionMetaData
{
public:
	struct FFMOutgoingCableConnection             DefaultValue;                                      // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserOptionDefinitionFMOutgoingConnectionMetaData) == 0x000008, "Wrong alignment on FUserOptionDefinitionFMOutgoingConnectionMetaData");
static_assert(sizeof(FUserOptionDefinitionFMOutgoingConnectionMetaData) == 0x000038, "Wrong size on FUserOptionDefinitionFMOutgoingConnectionMetaData");
static_assert(offsetof(FUserOptionDefinitionFMOutgoingConnectionMetaData, DefaultValue) == 0x000008, "Member 'FUserOptionDefinitionFMOutgoingConnectionMetaData::DefaultValue' has a wrong offset!");

}

