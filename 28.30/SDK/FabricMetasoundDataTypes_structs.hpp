#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FabricMetasoundDataTypes

#include "Basic.hpp"


namespace SDK
{

// Enum FabricMetasoundDataTypes.EFabricUserOptionConversionType
// NumValues: 0x0003
enum class EFabricUserOptionConversionType : uint8
{
	Linear                                   = 0,
	Exponential                              = 1,
	Lookup                                   = 2,
};

// ScriptStruct FabricMetasoundDataTypes.FabricMetasoundDrumPlayerSampleData
// 0x0020 (0x0020 - 0x0000)
struct FFabricMetasoundDrumPlayerSampleData final
{
public:
	class FText                                   SampleLabel;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USoundWave*                             WaveAsset;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricMetasoundDrumPlayerSampleData) == 0x000008, "Wrong alignment on FFabricMetasoundDrumPlayerSampleData");
static_assert(sizeof(FFabricMetasoundDrumPlayerSampleData) == 0x000020, "Wrong size on FFabricMetasoundDrumPlayerSampleData");
static_assert(offsetof(FFabricMetasoundDrumPlayerSampleData, SampleLabel) == 0x000000, "Member 'FFabricMetasoundDrumPlayerSampleData::SampleLabel' has a wrong offset!");
static_assert(offsetof(FFabricMetasoundDrumPlayerSampleData, WaveAsset) == 0x000018, "Member 'FFabricMetasoundDrumPlayerSampleData::WaveAsset' has a wrong offset!");

// ScriptStruct FabricMetasoundDataTypes.FabricUserOption
// 0x0020 (0x0020 - 0x0000)
struct FFabricUserOption final
{
public:
	EFabricUserOptionConversionType               ConversionType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Min;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LookupTable;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricUserOption) == 0x000008, "Wrong alignment on FFabricUserOption");
static_assert(sizeof(FFabricUserOption) == 0x000020, "Wrong size on FFabricUserOption");
static_assert(offsetof(FFabricUserOption, ConversionType) == 0x000000, "Member 'FFabricUserOption::ConversionType' has a wrong offset!");
static_assert(offsetof(FFabricUserOption, Min) == 0x000004, "Member 'FFabricUserOption::Min' has a wrong offset!");
static_assert(offsetof(FFabricUserOption, Max) == 0x000008, "Member 'FFabricUserOption::Max' has a wrong offset!");
static_assert(offsetof(FFabricUserOption, LookupTable) == 0x000010, "Member 'FFabricUserOption::LookupTable' has a wrong offset!");

}

