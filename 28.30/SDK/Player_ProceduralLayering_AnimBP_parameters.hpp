#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Player_ProceduralLayering_AnimBP

#include "Basic.hpp"

#include "StructUtils_structs.hpp"
#include "Engine_structs.hpp"
#include "Chooser_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK::Params
{

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.AdditiveLayering
// 0x0060 (0x0060 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_AdditiveLayering final
{
public:
	struct FPoseLink                              AddLayer_InLocomotionPose;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AddLayer_InItemPose;                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AddLayer_InBasePose;                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AddLayer_InLayeredLocomotionPose;                  // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              InPoseSourcePose;                                  // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AdditiveLayering_0;                                // 0x0050(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_AdditiveLayering) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_AdditiveLayering");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_AdditiveLayering) == 0x000060, "Wrong size on Player_ProceduralLayering_AnimBP_C_AdditiveLayering");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_AdditiveLayering, AddLayer_InLocomotionPose) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_AdditiveLayering::AddLayer_InLocomotionPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_AdditiveLayering, AddLayer_InItemPose) == 0x000010, "Member 'Player_ProceduralLayering_AnimBP_C_AdditiveLayering::AddLayer_InItemPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_AdditiveLayering, AddLayer_InBasePose) == 0x000020, "Member 'Player_ProceduralLayering_AnimBP_C_AdditiveLayering::AddLayer_InBasePose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_AdditiveLayering, AddLayer_InLayeredLocomotionPose) == 0x000030, "Member 'Player_ProceduralLayering_AnimBP_C_AdditiveLayering::AddLayer_InLayeredLocomotionPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_AdditiveLayering, InPoseSourcePose) == 0x000040, "Member 'Player_ProceduralLayering_AnimBP_C_AdditiveLayering::InPoseSourcePose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_AdditiveLayering, AdditiveLayering_0) == 0x000050, "Member 'Player_ProceduralLayering_AnimBP_C_AdditiveLayering::AdditiveLayering_0' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_AnimGraph");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_AnimGraph) == 0x000010, "Wrong size on Player_ProceduralLayering_AnimBP_C_AnimGraph");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.BasePose
// 0x0010 (0x0010 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_BasePose final
{
public:
	struct FPoseLink                              BasePose_0;                                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_BasePose) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_BasePose");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_BasePose) == 0x000010, "Wrong size on Player_ProceduralLayering_AnimBP_C_BasePose");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_BasePose, BasePose_0) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_BasePose::BasePose_0' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.CopyBoneLayer
// 0x0020 (0x0020 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_CopyBoneLayer final
{
public:
	struct FPoseLink                              InCopyBoneLayerPose;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CopyBoneLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_CopyBoneLayer) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_CopyBoneLayer");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_CopyBoneLayer) == 0x000020, "Wrong size on Player_ProceduralLayering_AnimBP_C_CopyBoneLayer");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_CopyBoneLayer, InCopyBoneLayerPose) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_CopyBoneLayer::InCopyBoneLayerPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_CopyBoneLayer, CopyBoneLayer_0) == 0x000010, "Member 'Player_ProceduralLayering_AnimBP_C_CopyBoneLayer::CopyBoneLayer_0' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.CopyMotionLayer
// 0x0040 (0x0040 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_CopyMotionLayer final
{
public:
	struct FPoseLink                              CopyMotion_InBaseLocomotionPose;                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CopyMotion_InBasePose;                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CopyMotion_InLayeredLocomotionPose;                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CopyMotionLayer_0;                                 // 0x0030(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_CopyMotionLayer) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_CopyMotionLayer");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_CopyMotionLayer) == 0x000040, "Wrong size on Player_ProceduralLayering_AnimBP_C_CopyMotionLayer");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_CopyMotionLayer, CopyMotion_InBaseLocomotionPose) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_CopyMotionLayer::CopyMotion_InBaseLocomotionPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_CopyMotionLayer, CopyMotion_InBasePose) == 0x000010, "Member 'Player_ProceduralLayering_AnimBP_C_CopyMotionLayer::CopyMotion_InBasePose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_CopyMotionLayer, CopyMotion_InLayeredLocomotionPose) == 0x000020, "Member 'Player_ProceduralLayering_AnimBP_C_CopyMotionLayer::CopyMotion_InLayeredLocomotionPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_CopyMotionLayer, CopyMotionLayer_0) == 0x000030, "Member 'Player_ProceduralLayering_AnimBP_C_CopyMotionLayer::CopyMotionLayer_0' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.ExecuteUbergraph_Player_ProceduralLayering_AnimBP
// 0x0004 (0x0004 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_ExecuteUbergraph_Player_ProceduralLayering_AnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_ExecuteUbergraph_Player_ProceduralLayering_AnimBP) == 0x000004, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_ExecuteUbergraph_Player_ProceduralLayering_AnimBP");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_ExecuteUbergraph_Player_ProceduralLayering_AnimBP) == 0x000004, "Wrong size on Player_ProceduralLayering_AnimBP_C_ExecuteUbergraph_Player_ProceduralLayering_AnimBP");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ExecuteUbergraph_Player_ProceduralLayering_AnimBP, EntryPoint) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_ExecuteUbergraph_Player_ProceduralLayering_AnimBP::EntryPoint' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.Layering
// 0x0030 (0x0030 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_Layering final
{
public:
	struct FPoseLink                              Layer_InBaseLocomotionPose;                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Layer_InItemPose;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Layering_0;                                        // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_Layering) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_Layering");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_Layering) == 0x000030, "Wrong size on Player_ProceduralLayering_AnimBP_C_Layering");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_Layering, Layer_InBaseLocomotionPose) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_Layering::Layer_InBaseLocomotionPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_Layering, Layer_InItemPose) == 0x000010, "Member 'Player_ProceduralLayering_AnimBP_C_Layering::Layer_InItemPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_Layering, Layering_0) == 0x000020, "Member 'Player_ProceduralLayering_AnimBP_C_Layering::Layering_0' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.OnUpdateBlendStack_PreNativize
// 0x0040 (0x0040 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UFortProceduralMotionDataAsset*         PrevProceduralMotionArmL_DA;                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFortProceduralMotionDataAsset*         PrevProceduralMotion_DA;                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFortAnimationLayeringWeightsDataAsset* PrevAdditive_DA;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFortAnimationLayeringWeightsDataAsset* PrevLayering_DA;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize) == 0x000040, "Wrong size on Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize, Context) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize::Context' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize, Node) == 0x000010, "Member 'Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize::Node' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize, PrevProceduralMotionArmL_DA) == 0x000020, "Member 'Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize::PrevProceduralMotionArmL_DA' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize, PrevProceduralMotion_DA) == 0x000028, "Member 'Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize::PrevProceduralMotion_DA' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize, PrevAdditive_DA) == 0x000030, "Member 'Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize::PrevAdditive_DA' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize, PrevLayering_DA) == 0x000038, "Member 'Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize::PrevLayering_DA' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.ProceduralAdditivePose
// 0x0040 (0x0040 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose final
{
public:
	struct FPoseLink                              InSourceLocomotionPose;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              InMotionMatchingPose;                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              InProceduralLayeredPose;                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ProceduralAdditivePose_0;                          // 0x0030(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose) == 0x000040, "Wrong size on Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose, InSourceLocomotionPose) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose::InSourceLocomotionPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose, InMotionMatchingPose) == 0x000010, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose::InMotionMatchingPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose, InProceduralLayeredPose) == 0x000020, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose::InProceduralLayeredPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose, ProceduralAdditivePose_0) == 0x000030, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose::ProceduralAdditivePose_0' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.ProceduralLayeredPose
// 0x0030 (0x0030 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose final
{
public:
	struct FPoseLink                              InLocomotionPose;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              InPassThroughPose;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ProceduralLayeredPose_0;                           // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose) == 0x000030, "Wrong size on Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose, InLocomotionPose) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose::InLocomotionPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose, InPassThroughPose) == 0x000010, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose::InPassThroughPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose, ProceduralLayeredPose_0) == 0x000020, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose::ProceduralLayeredPose_0' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.ProceduralLayering
// 0x0040 (0x0040 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_ProceduralLayering final
{
public:
	struct FPoseLink                              ProcLayer_InBaseLocomotionPose;                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ProcLayer_InLayeredLocomotionPose;                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ProcLayer_InBasePose;                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ProceduralLayering_0;                              // 0x0030(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_ProceduralLayering) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_ProceduralLayering");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_ProceduralLayering) == 0x000040, "Wrong size on Player_ProceduralLayering_AnimBP_C_ProceduralLayering");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralLayering, ProcLayer_InBaseLocomotionPose) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralLayering::ProcLayer_InBaseLocomotionPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralLayering, ProcLayer_InLayeredLocomotionPose) == 0x000010, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralLayering::ProcLayer_InLayeredLocomotionPose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralLayering, ProcLayer_InBasePose) == 0x000020, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralLayering::ProcLayer_InBasePose' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_ProceduralLayering, ProceduralLayering_0) == 0x000030, "Member 'Player_ProceduralLayering_AnimBP_C_ProceduralLayering::ProceduralLayering_0' has a wrong offset!");

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.UpdateNoWeaponBasePose_PreNativize
// 0x00E0 (0x00E0 - 0x0000)
struct Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	EAnimNodeReferenceConversionResult            CallFunc_ConvertToSequenceEvaluator_Result;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            CallFunc_ConvertToSequenceEvaluator_ReturnValue;   // 0x0028(0x0010)(NoDestructor)
	struct FChooserEvaluationContext              CallFunc_MakeChooserEvaluationContext_ReturnValue; // 0x0038(0x0078)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedStruct                       CallFunc_MakeLookupProxyWithOverrideTable_ReturnValue; // 0x00B8(0x0010)()
	class UAnimSequence*                          CallFunc_EvaluateObjectChooserBase_ReturnValue;    // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequenceEvaluatorReference            CallFunc_SetSequence_ReturnValue;                  // 0x00D0(0x0010)(NoDestructor)
};
static_assert(alignof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize) == 0x000008, "Wrong alignment on Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize");
static_assert(sizeof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize) == 0x0000E0, "Wrong size on Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize, Context) == 0x000000, "Member 'Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize::Context' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize, Node) == 0x000010, "Member 'Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize::Node' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize, CallFunc_ConvertToSequenceEvaluator_Result) == 0x000020, "Member 'Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize::CallFunc_ConvertToSequenceEvaluator_Result' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize, CallFunc_ConvertToSequenceEvaluator_ReturnValue) == 0x000028, "Member 'Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize::CallFunc_ConvertToSequenceEvaluator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize, CallFunc_MakeChooserEvaluationContext_ReturnValue) == 0x000038, "Member 'Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize::CallFunc_MakeChooserEvaluationContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize, K2Node_SwitchEnum_CmpSuccess) == 0x0000B0, "Member 'Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize, CallFunc_MakeLookupProxyWithOverrideTable_ReturnValue) == 0x0000B8, "Member 'Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize::CallFunc_MakeLookupProxyWithOverrideTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize, CallFunc_EvaluateObjectChooserBase_ReturnValue) == 0x0000C8, "Member 'Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize::CallFunc_EvaluateObjectChooserBase_ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize, CallFunc_SetSequence_ReturnValue) == 0x0000D0, "Member 'Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

}

