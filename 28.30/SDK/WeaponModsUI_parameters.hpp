#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponModsUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function WeaponModsUI.AthenaEquippedItemInfoWeaponMods.HandleWeaponFullyEquipped
// 0x0010 (0x0010 - 0x0000)
struct AthenaEquippedItemInfoWeaponMods_HandleWeaponFullyEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemInfoWeaponMods_HandleWeaponFullyEquipped) == 0x000008, "Wrong alignment on AthenaEquippedItemInfoWeaponMods_HandleWeaponFullyEquipped");
static_assert(sizeof(AthenaEquippedItemInfoWeaponMods_HandleWeaponFullyEquipped) == 0x000010, "Wrong size on AthenaEquippedItemInfoWeaponMods_HandleWeaponFullyEquipped");
static_assert(offsetof(AthenaEquippedItemInfoWeaponMods_HandleWeaponFullyEquipped, NewWeapon) == 0x000000, "Member 'AthenaEquippedItemInfoWeaponMods_HandleWeaponFullyEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(AthenaEquippedItemInfoWeaponMods_HandleWeaponFullyEquipped, PrevWeapon) == 0x000008, "Member 'AthenaEquippedItemInfoWeaponMods_HandleWeaponFullyEquipped::PrevWeapon' has a wrong offset!");

// Function WeaponModsUI.AthenaEquippedItemInfoWeaponMods.SetItemSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct AthenaEquippedItemInfoWeaponMods_SetItemSlotInfo final
{
public:
	struct FFortWeaponModSlot                     ModSlot;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemInfoWeaponMods_SetItemSlotInfo) == 0x000008, "Wrong alignment on AthenaEquippedItemInfoWeaponMods_SetItemSlotInfo");
static_assert(sizeof(AthenaEquippedItemInfoWeaponMods_SetItemSlotInfo) == 0x000010, "Wrong size on AthenaEquippedItemInfoWeaponMods_SetItemSlotInfo");
static_assert(offsetof(AthenaEquippedItemInfoWeaponMods_SetItemSlotInfo, ModSlot) == 0x000000, "Member 'AthenaEquippedItemInfoWeaponMods_SetItemSlotInfo::ModSlot' has a wrong offset!");

// Function WeaponModsUI.AthenaInventoryGroupWeaponMods.HandleButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct AthenaInventoryGroupWeaponMods_HandleButtonClicked final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryGroupWeaponMods_HandleButtonClicked) == 0x000008, "Wrong alignment on AthenaInventoryGroupWeaponMods_HandleButtonClicked");
static_assert(sizeof(AthenaInventoryGroupWeaponMods_HandleButtonClicked) == 0x000008, "Wrong size on AthenaInventoryGroupWeaponMods_HandleButtonClicked");
static_assert(offsetof(AthenaInventoryGroupWeaponMods_HandleButtonClicked, Object) == 0x000000, "Member 'AthenaInventoryGroupWeaponMods_HandleButtonClicked::Object' has a wrong offset!");

// Function WeaponModsUI.AthenaInventoryGroupWeaponMods.CanWeaponEquipMod
// 0x0018 (0x0018 - 0x0000)
struct AthenaInventoryGroupWeaponMods_CanWeaponEquipMod final
{
public:
	const class AFortWeapon*                      Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWeaponModItemDefinition*     Mod;                                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaInventoryGroupWeaponMods_CanWeaponEquipMod) == 0x000008, "Wrong alignment on AthenaInventoryGroupWeaponMods_CanWeaponEquipMod");
static_assert(sizeof(AthenaInventoryGroupWeaponMods_CanWeaponEquipMod) == 0x000018, "Wrong size on AthenaInventoryGroupWeaponMods_CanWeaponEquipMod");
static_assert(offsetof(AthenaInventoryGroupWeaponMods_CanWeaponEquipMod, Weapon) == 0x000000, "Member 'AthenaInventoryGroupWeaponMods_CanWeaponEquipMod::Weapon' has a wrong offset!");
static_assert(offsetof(AthenaInventoryGroupWeaponMods_CanWeaponEquipMod, Mod) == 0x000008, "Member 'AthenaInventoryGroupWeaponMods_CanWeaponEquipMod::Mod' has a wrong offset!");
static_assert(offsetof(AthenaInventoryGroupWeaponMods_CanWeaponEquipMod, ReturnValue) == 0x000010, "Member 'AthenaInventoryGroupWeaponMods_CanWeaponEquipMod::ReturnValue' has a wrong offset!");

// Function WeaponModsUI.AthenaInventoryItemInfoWeaponMods.HandleInventoryItemSelected
// 0x0008 (0x0008 - 0x0000)
struct AthenaInventoryItemInfoWeaponMods_HandleInventoryItemSelected final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryItemInfoWeaponMods_HandleInventoryItemSelected) == 0x000008, "Wrong alignment on AthenaInventoryItemInfoWeaponMods_HandleInventoryItemSelected");
static_assert(sizeof(AthenaInventoryItemInfoWeaponMods_HandleInventoryItemSelected) == 0x000008, "Wrong size on AthenaInventoryItemInfoWeaponMods_HandleInventoryItemSelected");
static_assert(offsetof(AthenaInventoryItemInfoWeaponMods_HandleInventoryItemSelected, SelectedItem) == 0x000000, "Member 'AthenaInventoryItemInfoWeaponMods_HandleInventoryItemSelected::SelectedItem' has a wrong offset!");

// Function WeaponModsUI.AthenaInventoryItemInfoWeaponMods.HandleWeaponModSlotsChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaInventoryItemInfoWeaponMods_HandleWeaponModSlotsChanged final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryItemInfoWeaponMods_HandleWeaponModSlotsChanged) == 0x000008, "Wrong alignment on AthenaInventoryItemInfoWeaponMods_HandleWeaponModSlotsChanged");
static_assert(sizeof(AthenaInventoryItemInfoWeaponMods_HandleWeaponModSlotsChanged) == 0x000008, "Wrong size on AthenaInventoryItemInfoWeaponMods_HandleWeaponModSlotsChanged");
static_assert(offsetof(AthenaInventoryItemInfoWeaponMods_HandleWeaponModSlotsChanged, Weapon) == 0x000000, "Member 'AthenaInventoryItemInfoWeaponMods_HandleWeaponModSlotsChanged::Weapon' has a wrong offset!");

// Function WeaponModsUI.AthenaInventoryItemInfoWeaponMods.SetIsModifiableWeapon
// 0x0001 (0x0001 - 0x0000)
struct AthenaInventoryItemInfoWeaponMods_SetIsModifiableWeapon final
{
public:
	bool                                          bIsModifiable;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryItemInfoWeaponMods_SetIsModifiableWeapon) == 0x000001, "Wrong alignment on AthenaInventoryItemInfoWeaponMods_SetIsModifiableWeapon");
static_assert(sizeof(AthenaInventoryItemInfoWeaponMods_SetIsModifiableWeapon) == 0x000001, "Wrong size on AthenaInventoryItemInfoWeaponMods_SetIsModifiableWeapon");
static_assert(offsetof(AthenaInventoryItemInfoWeaponMods_SetIsModifiableWeapon, bIsModifiable) == 0x000000, "Member 'AthenaInventoryItemInfoWeaponMods_SetIsModifiableWeapon::bIsModifiable' has a wrong offset!");

// Function WeaponModsUI.AthenaInventoryItemInfoWeaponMods.SetItemSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct AthenaInventoryItemInfoWeaponMods_SetItemSlotInfo final
{
public:
	struct FFortWeaponModSlot                     ModSlot;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryItemInfoWeaponMods_SetItemSlotInfo) == 0x000008, "Wrong alignment on AthenaInventoryItemInfoWeaponMods_SetItemSlotInfo");
static_assert(sizeof(AthenaInventoryItemInfoWeaponMods_SetItemSlotInfo) == 0x000010, "Wrong size on AthenaInventoryItemInfoWeaponMods_SetItemSlotInfo");
static_assert(offsetof(AthenaInventoryItemInfoWeaponMods_SetItemSlotInfo, ModSlot) == 0x000000, "Member 'AthenaInventoryItemInfoWeaponMods_SetItemSlotInfo::ModSlot' has a wrong offset!");

// Function WeaponModsUI.AthenaInventoryItemInfoWeaponModsConfigurator.RemoveMod
// 0x0008 (0x0008 - 0x0000)
struct AthenaInventoryItemInfoWeaponModsConfigurator_RemoveMod final
{
public:
	class UFortWeaponModItemDefinition*           ModItemDef;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryItemInfoWeaponModsConfigurator_RemoveMod) == 0x000008, "Wrong alignment on AthenaInventoryItemInfoWeaponModsConfigurator_RemoveMod");
static_assert(sizeof(AthenaInventoryItemInfoWeaponModsConfigurator_RemoveMod) == 0x000008, "Wrong size on AthenaInventoryItemInfoWeaponModsConfigurator_RemoveMod");
static_assert(offsetof(AthenaInventoryItemInfoWeaponModsConfigurator_RemoveMod, ModItemDef) == 0x000000, "Member 'AthenaInventoryItemInfoWeaponModsConfigurator_RemoveMod::ModItemDef' has a wrong offset!");

// Function WeaponModsUI.AthenaLastKillerWeaponModsInfo.SetKillerWeaponMods
// 0x0010 (0x0010 - 0x0000)
struct AthenaLastKillerWeaponModsInfo_SetKillerWeaponMods final
{
public:
	TArray<struct FFortWeaponModSlot>             ModSlots;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLastKillerWeaponModsInfo_SetKillerWeaponMods) == 0x000008, "Wrong alignment on AthenaLastKillerWeaponModsInfo_SetKillerWeaponMods");
static_assert(sizeof(AthenaLastKillerWeaponModsInfo_SetKillerWeaponMods) == 0x000010, "Wrong size on AthenaLastKillerWeaponModsInfo_SetKillerWeaponMods");
static_assert(offsetof(AthenaLastKillerWeaponModsInfo_SetKillerWeaponMods, ModSlots) == 0x000000, "Member 'AthenaLastKillerWeaponModsInfo_SetKillerWeaponMods::ModSlots' has a wrong offset!");

// Function WeaponModsUI.AthenaPickupIndicatorWeaponMods.HandlePickupHovered
// 0x0008 (0x0008 - 0x0000)
struct AthenaPickupIndicatorWeaponMods_HandlePickupHovered final
{
public:
	class AFortPickup*                            Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPickupIndicatorWeaponMods_HandlePickupHovered) == 0x000008, "Wrong alignment on AthenaPickupIndicatorWeaponMods_HandlePickupHovered");
static_assert(sizeof(AthenaPickupIndicatorWeaponMods_HandlePickupHovered) == 0x000008, "Wrong size on AthenaPickupIndicatorWeaponMods_HandlePickupHovered");
static_assert(offsetof(AthenaPickupIndicatorWeaponMods_HandlePickupHovered, Pickup) == 0x000000, "Member 'AthenaPickupIndicatorWeaponMods_HandlePickupHovered::Pickup' has a wrong offset!");

// Function WeaponModsUI.AthenaPickupIndicatorWeaponMods.HandleWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct AthenaPickupIndicatorWeaponMods_HandleWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPickupIndicatorWeaponMods_HandleWeaponEquipped) == 0x000008, "Wrong alignment on AthenaPickupIndicatorWeaponMods_HandleWeaponEquipped");
static_assert(sizeof(AthenaPickupIndicatorWeaponMods_HandleWeaponEquipped) == 0x000010, "Wrong size on AthenaPickupIndicatorWeaponMods_HandleWeaponEquipped");
static_assert(offsetof(AthenaPickupIndicatorWeaponMods_HandleWeaponEquipped, NewWeapon) == 0x000000, "Member 'AthenaPickupIndicatorWeaponMods_HandleWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(AthenaPickupIndicatorWeaponMods_HandleWeaponEquipped, PrevWeapon) == 0x000008, "Member 'AthenaPickupIndicatorWeaponMods_HandleWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function WeaponModsUI.AthenaPickupIndicatorWeaponMods.SetEquippedWeaponItemInfo
// 0x0008 (0x0008 - 0x0000)
struct AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemInfo final
{
public:
	const class UFortItemDefinition*              ItemDef;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemInfo) == 0x000008, "Wrong alignment on AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemInfo");
static_assert(sizeof(AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemInfo) == 0x000008, "Wrong size on AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemInfo");
static_assert(offsetof(AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemInfo, ItemDef) == 0x000000, "Member 'AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemInfo::ItemDef' has a wrong offset!");

// Function WeaponModsUI.AthenaPickupIndicatorWeaponMods.SetEquippedWeaponItemSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemSlotInfo final
{
public:
	struct FFortWeaponModSlot                     ModSlot;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemSlotInfo) == 0x000008, "Wrong alignment on AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemSlotInfo");
static_assert(sizeof(AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemSlotInfo) == 0x000010, "Wrong size on AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemSlotInfo");
static_assert(offsetof(AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemSlotInfo, ModSlot) == 0x000000, "Member 'AthenaPickupIndicatorWeaponMods_SetEquippedWeaponItemSlotInfo::ModSlot' has a wrong offset!");

// Function WeaponModsUI.AthenaPickupIndicatorWeaponMods.SetItemModifiedWeaponName
// 0x0018 (0x0018 - 0x0000)
struct AthenaPickupIndicatorWeaponMods_SetItemModifiedWeaponName final
{
public:
	class FText                                   ModifiedWeaponName;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPickupIndicatorWeaponMods_SetItemModifiedWeaponName) == 0x000008, "Wrong alignment on AthenaPickupIndicatorWeaponMods_SetItemModifiedWeaponName");
static_assert(sizeof(AthenaPickupIndicatorWeaponMods_SetItemModifiedWeaponName) == 0x000018, "Wrong size on AthenaPickupIndicatorWeaponMods_SetItemModifiedWeaponName");
static_assert(offsetof(AthenaPickupIndicatorWeaponMods_SetItemModifiedWeaponName, ModifiedWeaponName) == 0x000000, "Member 'AthenaPickupIndicatorWeaponMods_SetItemModifiedWeaponName::ModifiedWeaponName' has a wrong offset!");

// Function WeaponModsUI.AthenaPickupIndicatorWeaponMods.SetItemSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct AthenaPickupIndicatorWeaponMods_SetItemSlotInfo final
{
public:
	struct FFortWeaponModSlot                     ModSlot;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPickupIndicatorWeaponMods_SetItemSlotInfo) == 0x000008, "Wrong alignment on AthenaPickupIndicatorWeaponMods_SetItemSlotInfo");
static_assert(sizeof(AthenaPickupIndicatorWeaponMods_SetItemSlotInfo) == 0x000010, "Wrong size on AthenaPickupIndicatorWeaponMods_SetItemSlotInfo");
static_assert(offsetof(AthenaPickupIndicatorWeaponMods_SetItemSlotInfo, ModSlot) == 0x000000, "Member 'AthenaPickupIndicatorWeaponMods_SetItemSlotInfo::ModSlot' has a wrong offset!");

// Function WeaponModsUI.AthenaPickupIndicatorWeaponMods.IsInspectViewCollapsedBySettings
// 0x0001 (0x0001 - 0x0000)
struct AthenaPickupIndicatorWeaponMods_IsInspectViewCollapsedBySettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPickupIndicatorWeaponMods_IsInspectViewCollapsedBySettings) == 0x000001, "Wrong alignment on AthenaPickupIndicatorWeaponMods_IsInspectViewCollapsedBySettings");
static_assert(sizeof(AthenaPickupIndicatorWeaponMods_IsInspectViewCollapsedBySettings) == 0x000001, "Wrong size on AthenaPickupIndicatorWeaponMods_IsInspectViewCollapsedBySettings");
static_assert(offsetof(AthenaPickupIndicatorWeaponMods_IsInspectViewCollapsedBySettings, ReturnValue) == 0x000000, "Member 'AthenaPickupIndicatorWeaponMods_IsInspectViewCollapsedBySettings::ReturnValue' has a wrong offset!");

// Function WeaponModsUI.AthenaQuickBarSlotWeaponModsIndicator.HandleQuickBarSlotFocusChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaQuickBarSlotWeaponModsIndicator_HandleQuickBarSlotFocusChanged final
{
public:
	EFortQuickBars                                QuickBarType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuickBarSlot;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaQuickBarSlotWeaponModsIndicator_HandleQuickBarSlotFocusChanged) == 0x000004, "Wrong alignment on AthenaQuickBarSlotWeaponModsIndicator_HandleQuickBarSlotFocusChanged");
static_assert(sizeof(AthenaQuickBarSlotWeaponModsIndicator_HandleQuickBarSlotFocusChanged) == 0x000008, "Wrong size on AthenaQuickBarSlotWeaponModsIndicator_HandleQuickBarSlotFocusChanged");
static_assert(offsetof(AthenaQuickBarSlotWeaponModsIndicator_HandleQuickBarSlotFocusChanged, QuickBarType) == 0x000000, "Member 'AthenaQuickBarSlotWeaponModsIndicator_HandleQuickBarSlotFocusChanged::QuickBarType' has a wrong offset!");
static_assert(offsetof(AthenaQuickBarSlotWeaponModsIndicator_HandleQuickBarSlotFocusChanged, QuickBarSlot) == 0x000004, "Member 'AthenaQuickBarSlotWeaponModsIndicator_HandleQuickBarSlotFocusChanged::QuickBarSlot' has a wrong offset!");

// Function WeaponModsUI.AthenaQuickBarSlotWeaponModsIndicator.HandleWeaponFullyEquipped
// 0x0010 (0x0010 - 0x0000)
struct AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponFullyEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponFullyEquipped) == 0x000008, "Wrong alignment on AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponFullyEquipped");
static_assert(sizeof(AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponFullyEquipped) == 0x000010, "Wrong size on AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponFullyEquipped");
static_assert(offsetof(AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponFullyEquipped, NewWeapon) == 0x000000, "Member 'AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponFullyEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponFullyEquipped, PrevWeapon) == 0x000008, "Member 'AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponFullyEquipped::PrevWeapon' has a wrong offset!");

// Function WeaponModsUI.AthenaQuickBarSlotWeaponModsIndicator.HandleWeaponModSlotsChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponModSlotsChanged final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponModSlotsChanged) == 0x000008, "Wrong alignment on AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponModSlotsChanged");
static_assert(sizeof(AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponModSlotsChanged) == 0x000008, "Wrong size on AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponModSlotsChanged");
static_assert(offsetof(AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponModSlotsChanged, Weapon) == 0x000000, "Member 'AthenaQuickBarSlotWeaponModsIndicator_HandleWeaponModSlotsChanged::Weapon' has a wrong offset!");

// Function WeaponModsUI.AthenaQuickBarSlotWeaponModsIndicator.SetItemSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotInfo final
{
public:
	struct FFortWeaponModSlot                     ModSlot;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotInfo) == 0x000008, "Wrong alignment on AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotInfo");
static_assert(sizeof(AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotInfo) == 0x000010, "Wrong size on AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotInfo");
static_assert(offsetof(AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotInfo, ModSlot) == 0x000000, "Member 'AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotInfo::ModSlot' has a wrong offset!");

// Function WeaponModsUI.AthenaQuickBarSlotWeaponModsIndicator.SetItemSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotSelected final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotSelected) == 0x000001, "Wrong alignment on AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotSelected");
static_assert(sizeof(AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotSelected) == 0x000001, "Wrong size on AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotSelected");
static_assert(offsetof(AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotSelected, bIsSelected) == 0x000000, "Member 'AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotSelected::bIsSelected' has a wrong offset!");

// Function WeaponModsUI.AthenaQuickBarSlotWeaponModsIndicator.SetItemSlotsInfo
// 0x0010 (0x0010 - 0x0000)
struct AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotsInfo final
{
public:
	TArray<struct FFortWeaponModSlot>             ModSlots;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotsInfo) == 0x000008, "Wrong alignment on AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotsInfo");
static_assert(sizeof(AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotsInfo) == 0x000010, "Wrong size on AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotsInfo");
static_assert(offsetof(AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotsInfo, ModSlots) == 0x000000, "Member 'AthenaQuickBarSlotWeaponModsIndicator_SetItemSlotsInfo::ModSlots' has a wrong offset!");

}

