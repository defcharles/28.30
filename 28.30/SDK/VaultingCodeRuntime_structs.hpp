#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VaultingCodeRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "ContextualTraversalRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteVersion_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum VaultingCodeRuntime.EHurdleType
// NumValues: 0x0003
enum class EHurdleType : uint8
{
	Invalid                                  = 0,
	HurdleOver                               = 1,
	HurdleOnTop                              = 2,
};

// Enum VaultingCodeRuntime.EHurdleState
// NumValues: 0x0004
enum class EHurdleState : uint8
{
	Inactive                                 = 0,
	Targeting                                = 1,
	HurdleOver                               = 2,
	HurdleOn                                 = 3,
};

// ScriptStruct VaultingCodeRuntime.FortMovementMode_HurdleRuntimeData
// 0x0000 (0x00D0 - 0x00D0)
struct FFortMovementMode_HurdleRuntimeData final : public FFortMovementMode_TraversalBaseRuntimeData
{
public:
	EHurdleType                                   Type;                                              // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMovementMode_HurdleRuntimeData) == 0x000010, "Wrong alignment on FFortMovementMode_HurdleRuntimeData");
static_assert(sizeof(FFortMovementMode_HurdleRuntimeData) == 0x0000D0, "Wrong size on FFortMovementMode_HurdleRuntimeData");
static_assert(offsetof(FFortMovementMode_HurdleRuntimeData, Type) == 0x0000C8, "Member 'FFortMovementMode_HurdleRuntimeData::Type' has a wrong offset!");

// ScriptStruct VaultingCodeRuntime.FortMovementMode_HurdleCreationData
// 0x0000 (0x0130 - 0x0130)
struct FFortMovementMode_HurdleCreationData final : public FFortMovementMode_TraversalBaseCreationData
{
public:
	EHurdleType                                   Type;                                              // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMovementMode_HurdleCreationData) == 0x000010, "Wrong alignment on FFortMovementMode_HurdleCreationData");
static_assert(sizeof(FFortMovementMode_HurdleCreationData) == 0x000130, "Wrong size on FFortMovementMode_HurdleCreationData");
static_assert(offsetof(FFortMovementMode_HurdleCreationData, Type) == 0x000128, "Member 'FFortMovementMode_HurdleCreationData::Type' has a wrong offset!");

// ScriptStruct VaultingCodeRuntime.HurdleInputConfig
// 0x0620 (0x0620 - 0x0000)
struct FHurdleInputConfig final
{
public:
	struct FScalableFloat                         CastRadius;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxAllowedFallDistance;                            // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ForwardCastDistance_Phase1;                        // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ForwardCastDistance_Phase1_HurdleFromJog;          // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ForwardCastDistance_Phase1_ManualHurdle;           // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase1_WallAngleToleranceFlat;                     // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase1_SweepGroundBufferHeight;                    // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase1_SweepGroundMaxHeight;                       // 0x0118(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase1_Floor_WallOffset;                           // 0x0140(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase1_Floor_MinHeightForHurlde;                   // 0x0168(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x50];                                     // 0x0190(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Phase2_UpAngleTolerance;                           // 0x01E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase2_Floor_MaxHeightForHurlde;                   // 0x0208(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x28];                                     // 0x0230(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Phase3_CapsuleOffset;                              // 0x0258(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase3_ClearanceCapsuleSize;                       // 0x0280(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase3_ForwardCastDistance;                        // 0x02A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase3_MinTopClearanceForHurdleOn;                 // 0x02D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase4_MaxDownDistance;                            // 0x02F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase4_UpAngleTolerance;                           // 0x0320(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase4_HurdleOnZTolerance;                         // 0x0348(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase5_CapsuleOffset;                              // 0x0370(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase5_ClearanceCapsuleSize;                       // 0x0398(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         FinalResult_GroundAimOffset;                       // 0x03C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxHurdleDamageDealt;                              // 0x03E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SlideBufferTime;                                   // 0x0410(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinimumSpeedToHurdle;                              // 0x0438(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinimumForwardStickDeflection;                     // 0x0460(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RangeToIgnoreMinimumSpeedThreshold;                // 0x0488(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaximumCapsuleRadius;                              // 0x04B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaximumCapsuleHalfHeight;                          // 0x04D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase0_HorizontalSweepBreadth;                     // 0x0500(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase0_HorizontalSweepHeight;                      // 0x0528(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase0_HorizontalOpeningSweepBreadth;              // 0x0550(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase0_VerticalOffsetCheckInWindowFrame;           // 0x0578(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Phase0_MaxHorizontalSweepOffset;                   // 0x05A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxVerticalAngleFromLookAt;                        // 0x05C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxVerticalAngleFromLookAtNarrowOpening;           // 0x05F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortReleaseVersion                    MovementModeExtensionVersion;                      // 0x0618(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHurdleInputConfig) == 0x000008, "Wrong alignment on FHurdleInputConfig");
static_assert(sizeof(FHurdleInputConfig) == 0x000620, "Wrong size on FHurdleInputConfig");
static_assert(offsetof(FHurdleInputConfig, CastRadius) == 0x000000, "Member 'FHurdleInputConfig::CastRadius' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, MaxAllowedFallDistance) == 0x000028, "Member 'FHurdleInputConfig::MaxAllowedFallDistance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, ForwardCastDistance_Phase1) == 0x000050, "Member 'FHurdleInputConfig::ForwardCastDistance_Phase1' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, ForwardCastDistance_Phase1_HurdleFromJog) == 0x000078, "Member 'FHurdleInputConfig::ForwardCastDistance_Phase1_HurdleFromJog' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, ForwardCastDistance_Phase1_ManualHurdle) == 0x0000A0, "Member 'FHurdleInputConfig::ForwardCastDistance_Phase1_ManualHurdle' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase1_WallAngleToleranceFlat) == 0x0000C8, "Member 'FHurdleInputConfig::Phase1_WallAngleToleranceFlat' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase1_SweepGroundBufferHeight) == 0x0000F0, "Member 'FHurdleInputConfig::Phase1_SweepGroundBufferHeight' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase1_SweepGroundMaxHeight) == 0x000118, "Member 'FHurdleInputConfig::Phase1_SweepGroundMaxHeight' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase1_Floor_WallOffset) == 0x000140, "Member 'FHurdleInputConfig::Phase1_Floor_WallOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase1_Floor_MinHeightForHurlde) == 0x000168, "Member 'FHurdleInputConfig::Phase1_Floor_MinHeightForHurlde' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase2_UpAngleTolerance) == 0x0001E0, "Member 'FHurdleInputConfig::Phase2_UpAngleTolerance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase2_Floor_MaxHeightForHurlde) == 0x000208, "Member 'FHurdleInputConfig::Phase2_Floor_MaxHeightForHurlde' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase3_CapsuleOffset) == 0x000258, "Member 'FHurdleInputConfig::Phase3_CapsuleOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase3_ClearanceCapsuleSize) == 0x000280, "Member 'FHurdleInputConfig::Phase3_ClearanceCapsuleSize' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase3_ForwardCastDistance) == 0x0002A8, "Member 'FHurdleInputConfig::Phase3_ForwardCastDistance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase3_MinTopClearanceForHurdleOn) == 0x0002D0, "Member 'FHurdleInputConfig::Phase3_MinTopClearanceForHurdleOn' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase4_MaxDownDistance) == 0x0002F8, "Member 'FHurdleInputConfig::Phase4_MaxDownDistance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase4_UpAngleTolerance) == 0x000320, "Member 'FHurdleInputConfig::Phase4_UpAngleTolerance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase4_HurdleOnZTolerance) == 0x000348, "Member 'FHurdleInputConfig::Phase4_HurdleOnZTolerance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase5_CapsuleOffset) == 0x000370, "Member 'FHurdleInputConfig::Phase5_CapsuleOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase5_ClearanceCapsuleSize) == 0x000398, "Member 'FHurdleInputConfig::Phase5_ClearanceCapsuleSize' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, FinalResult_GroundAimOffset) == 0x0003C0, "Member 'FHurdleInputConfig::FinalResult_GroundAimOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, MaxHurdleDamageDealt) == 0x0003E8, "Member 'FHurdleInputConfig::MaxHurdleDamageDealt' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, SlideBufferTime) == 0x000410, "Member 'FHurdleInputConfig::SlideBufferTime' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, MinimumSpeedToHurdle) == 0x000438, "Member 'FHurdleInputConfig::MinimumSpeedToHurdle' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, MinimumForwardStickDeflection) == 0x000460, "Member 'FHurdleInputConfig::MinimumForwardStickDeflection' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, RangeToIgnoreMinimumSpeedThreshold) == 0x000488, "Member 'FHurdleInputConfig::RangeToIgnoreMinimumSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, MaximumCapsuleRadius) == 0x0004B0, "Member 'FHurdleInputConfig::MaximumCapsuleRadius' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, MaximumCapsuleHalfHeight) == 0x0004D8, "Member 'FHurdleInputConfig::MaximumCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase0_HorizontalSweepBreadth) == 0x000500, "Member 'FHurdleInputConfig::Phase0_HorizontalSweepBreadth' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase0_HorizontalSweepHeight) == 0x000528, "Member 'FHurdleInputConfig::Phase0_HorizontalSweepHeight' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase0_HorizontalOpeningSweepBreadth) == 0x000550, "Member 'FHurdleInputConfig::Phase0_HorizontalOpeningSweepBreadth' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase0_VerticalOffsetCheckInWindowFrame) == 0x000578, "Member 'FHurdleInputConfig::Phase0_VerticalOffsetCheckInWindowFrame' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, Phase0_MaxHorizontalSweepOffset) == 0x0005A0, "Member 'FHurdleInputConfig::Phase0_MaxHorizontalSweepOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, MaxVerticalAngleFromLookAt) == 0x0005C8, "Member 'FHurdleInputConfig::MaxVerticalAngleFromLookAt' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, MaxVerticalAngleFromLookAtNarrowOpening) == 0x0005F0, "Member 'FHurdleInputConfig::MaxVerticalAngleFromLookAtNarrowOpening' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfig, MovementModeExtensionVersion) == 0x000618, "Member 'FHurdleInputConfig::MovementModeExtensionVersion' has a wrong offset!");

// ScriptStruct VaultingCodeRuntime.HurdleInputConfigCache
// 0x00A0 (0x00A0 - 0x0000)
struct FHurdleInputConfigCache final
{
public:
	float                                         CastRadius;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAllowedFallDistance;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardCastDistance_Phase1;                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardCastDistance_Phase1_HurdleFromJog;          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardCastDistance_Phase1_ManualHurdle;           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase1_WallAngleToleranceFlat;                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase1_SweepGroundBufferHeight;                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase1_SweepGroundMaxHeight;                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase1_Floor_WallOffset;                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase1_Floor_MinHeightForHurlde;                   // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase1_Floor_MaxFloorSearchHeight;                 // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase1_MaxVerticalAngleDeviationDownOnNormal;      // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase2_UpAngleTolerance;                           // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase2_Floor_MaxHeightForHurlde;                   // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase2_Floor_HeightCorrectionMinFloorAngle;        // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase3_CapsuleOffset;                              // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase3_ClearanceCapsuleSize;                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase3_ForwardCastDistance;                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase3_MinTopClearanceForHurdleOn;                 // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase4_MaxDownDistance;                            // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase4_UpAngleTolerance;                           // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase4_HurdleOnZTolerance;                         // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase5_CapsuleOffset;                              // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase5_ClearanceCapsuleSize;                       // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalResult_GroundAimOffset;                       // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHurdleDamageDealt;                              // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideBufferTime;                                   // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumSpeedToHurdle;                              // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumForwardStickDeflection;                     // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeToIgnoreMinimumSpeedThreshold;                // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumCapsuleRadius;                              // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumCapsuleHalfHeight;                          // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase0_HorizontalSweepBreadth;                     // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase0_HorizontalSweepHeight;                      // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase0_HorizontalOpeningSweepBreadth;              // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase0_VerticalOffsetCheckInWindowFrame;           // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase0_MaxHorizontalSweepOffset;                   // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalAngleFromLookAt;                        // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalAngleFromLookAtNarrowOpening;           // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortReleaseVersion                    MovementModeExtensionVersion;                      // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHurdleInputConfigCache) == 0x000004, "Wrong alignment on FHurdleInputConfigCache");
static_assert(sizeof(FHurdleInputConfigCache) == 0x0000A0, "Wrong size on FHurdleInputConfigCache");
static_assert(offsetof(FHurdleInputConfigCache, CastRadius) == 0x000000, "Member 'FHurdleInputConfigCache::CastRadius' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, MaxAllowedFallDistance) == 0x000004, "Member 'FHurdleInputConfigCache::MaxAllowedFallDistance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, ForwardCastDistance_Phase1) == 0x000008, "Member 'FHurdleInputConfigCache::ForwardCastDistance_Phase1' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, ForwardCastDistance_Phase1_HurdleFromJog) == 0x00000C, "Member 'FHurdleInputConfigCache::ForwardCastDistance_Phase1_HurdleFromJog' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, ForwardCastDistance_Phase1_ManualHurdle) == 0x000010, "Member 'FHurdleInputConfigCache::ForwardCastDistance_Phase1_ManualHurdle' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase1_WallAngleToleranceFlat) == 0x000014, "Member 'FHurdleInputConfigCache::Phase1_WallAngleToleranceFlat' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase1_SweepGroundBufferHeight) == 0x000018, "Member 'FHurdleInputConfigCache::Phase1_SweepGroundBufferHeight' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase1_SweepGroundMaxHeight) == 0x00001C, "Member 'FHurdleInputConfigCache::Phase1_SweepGroundMaxHeight' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase1_Floor_WallOffset) == 0x000020, "Member 'FHurdleInputConfigCache::Phase1_Floor_WallOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase1_Floor_MinHeightForHurlde) == 0x000024, "Member 'FHurdleInputConfigCache::Phase1_Floor_MinHeightForHurlde' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase1_Floor_MaxFloorSearchHeight) == 0x000028, "Member 'FHurdleInputConfigCache::Phase1_Floor_MaxFloorSearchHeight' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase1_MaxVerticalAngleDeviationDownOnNormal) == 0x00002C, "Member 'FHurdleInputConfigCache::Phase1_MaxVerticalAngleDeviationDownOnNormal' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase2_UpAngleTolerance) == 0x000030, "Member 'FHurdleInputConfigCache::Phase2_UpAngleTolerance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase2_Floor_MaxHeightForHurlde) == 0x000034, "Member 'FHurdleInputConfigCache::Phase2_Floor_MaxHeightForHurlde' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase2_Floor_HeightCorrectionMinFloorAngle) == 0x000038, "Member 'FHurdleInputConfigCache::Phase2_Floor_HeightCorrectionMinFloorAngle' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase3_CapsuleOffset) == 0x00003C, "Member 'FHurdleInputConfigCache::Phase3_CapsuleOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase3_ClearanceCapsuleSize) == 0x000040, "Member 'FHurdleInputConfigCache::Phase3_ClearanceCapsuleSize' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase3_ForwardCastDistance) == 0x000044, "Member 'FHurdleInputConfigCache::Phase3_ForwardCastDistance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase3_MinTopClearanceForHurdleOn) == 0x000048, "Member 'FHurdleInputConfigCache::Phase3_MinTopClearanceForHurdleOn' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase4_MaxDownDistance) == 0x00004C, "Member 'FHurdleInputConfigCache::Phase4_MaxDownDistance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase4_UpAngleTolerance) == 0x000050, "Member 'FHurdleInputConfigCache::Phase4_UpAngleTolerance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase4_HurdleOnZTolerance) == 0x000054, "Member 'FHurdleInputConfigCache::Phase4_HurdleOnZTolerance' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase5_CapsuleOffset) == 0x000058, "Member 'FHurdleInputConfigCache::Phase5_CapsuleOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase5_ClearanceCapsuleSize) == 0x00005C, "Member 'FHurdleInputConfigCache::Phase5_ClearanceCapsuleSize' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, FinalResult_GroundAimOffset) == 0x000060, "Member 'FHurdleInputConfigCache::FinalResult_GroundAimOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, MaxHurdleDamageDealt) == 0x000064, "Member 'FHurdleInputConfigCache::MaxHurdleDamageDealt' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, SlideBufferTime) == 0x000068, "Member 'FHurdleInputConfigCache::SlideBufferTime' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, MinimumSpeedToHurdle) == 0x00006C, "Member 'FHurdleInputConfigCache::MinimumSpeedToHurdle' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, MinimumForwardStickDeflection) == 0x000070, "Member 'FHurdleInputConfigCache::MinimumForwardStickDeflection' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, RangeToIgnoreMinimumSpeedThreshold) == 0x000074, "Member 'FHurdleInputConfigCache::RangeToIgnoreMinimumSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, MaximumCapsuleRadius) == 0x000078, "Member 'FHurdleInputConfigCache::MaximumCapsuleRadius' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, MaximumCapsuleHalfHeight) == 0x00007C, "Member 'FHurdleInputConfigCache::MaximumCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase0_HorizontalSweepBreadth) == 0x000080, "Member 'FHurdleInputConfigCache::Phase0_HorizontalSweepBreadth' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase0_HorizontalSweepHeight) == 0x000084, "Member 'FHurdleInputConfigCache::Phase0_HorizontalSweepHeight' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase0_HorizontalOpeningSweepBreadth) == 0x000088, "Member 'FHurdleInputConfigCache::Phase0_HorizontalOpeningSweepBreadth' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase0_VerticalOffsetCheckInWindowFrame) == 0x00008C, "Member 'FHurdleInputConfigCache::Phase0_VerticalOffsetCheckInWindowFrame' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, Phase0_MaxHorizontalSweepOffset) == 0x000090, "Member 'FHurdleInputConfigCache::Phase0_MaxHorizontalSweepOffset' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, MaxVerticalAngleFromLookAt) == 0x000094, "Member 'FHurdleInputConfigCache::MaxVerticalAngleFromLookAt' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, MaxVerticalAngleFromLookAtNarrowOpening) == 0x000098, "Member 'FHurdleInputConfigCache::MaxVerticalAngleFromLookAtNarrowOpening' has a wrong offset!");
static_assert(offsetof(FHurdleInputConfigCache, MovementModeExtensionVersion) == 0x00009C, "Member 'FHurdleInputConfigCache::MovementModeExtensionVersion' has a wrong offset!");

// ScriptStruct VaultingCodeRuntime.HurdleTargetingData
// 0x0130 (0x0130 - 0x0000)
struct FHurdleTargetingData final
{
public:
	EHurdleType                                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSynchedActionEndMovementMode             EndMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bValid : 1;                                        // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsNarrowOpening : 1;                              // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FacingCornerLocation;                              // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FacingCornerNormal;                                // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BackCornerLocation;                                // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FinalLandingPosition;                              // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceLocation;                                    // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceAim;                                         // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WallLocation;                                      // 0x00A0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WallNormal;                                        // 0x00B8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x00D0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetNormal;                                      // 0x00E8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     TargetActorComponent;                              // 0x0108(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetActorComponentLocation;                      // 0x0110(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActorBoneName;                               // 0x0128(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHurdleTargetingData) == 0x000008, "Wrong alignment on FHurdleTargetingData");
static_assert(sizeof(FHurdleTargetingData) == 0x000130, "Wrong size on FHurdleTargetingData");
static_assert(offsetof(FHurdleTargetingData, Type) == 0x000000, "Member 'FHurdleTargetingData::Type' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, EndMovementMode) == 0x000001, "Member 'FHurdleTargetingData::EndMovementMode' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, FacingCornerLocation) == 0x000008, "Member 'FHurdleTargetingData::FacingCornerLocation' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, FacingCornerNormal) == 0x000020, "Member 'FHurdleTargetingData::FacingCornerNormal' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, BackCornerLocation) == 0x000038, "Member 'FHurdleTargetingData::BackCornerLocation' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, FinalLandingPosition) == 0x000050, "Member 'FHurdleTargetingData::FinalLandingPosition' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, SourceActor) == 0x000068, "Member 'FHurdleTargetingData::SourceActor' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, SourceLocation) == 0x000070, "Member 'FHurdleTargetingData::SourceLocation' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, SourceAim) == 0x000088, "Member 'FHurdleTargetingData::SourceAim' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, WallLocation) == 0x0000A0, "Member 'FHurdleTargetingData::WallLocation' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, WallNormal) == 0x0000B8, "Member 'FHurdleTargetingData::WallNormal' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, TargetLocation) == 0x0000D0, "Member 'FHurdleTargetingData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, TargetNormal) == 0x0000E8, "Member 'FHurdleTargetingData::TargetNormal' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, TargetActor) == 0x000100, "Member 'FHurdleTargetingData::TargetActor' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, TargetActorComponent) == 0x000108, "Member 'FHurdleTargetingData::TargetActorComponent' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, TargetActorComponentLocation) == 0x000110, "Member 'FHurdleTargetingData::TargetActorComponentLocation' has a wrong offset!");
static_assert(offsetof(FHurdleTargetingData, TargetActorBoneName) == 0x000128, "Member 'FHurdleTargetingData::TargetActorBoneName' has a wrong offset!");

// ScriptStruct VaultingCodeRuntime.ReplicatedHurdleTargetingData
// 0x0070 (0x0070 - 0x0000)
struct FReplicatedHurdleTargetingData final
{
public:
	EHurdleType                                   Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSynchedActionEndMovementMode             EndMovementMode;                                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  FacingCornerLocation;                              // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  FacingCornerNormal;                                // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  BackCornerLocation;                                // 0x0038(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  FinalLandingPosition;                              // 0x0050(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedHurdleTargetingData) == 0x000008, "Wrong alignment on FReplicatedHurdleTargetingData");
static_assert(sizeof(FReplicatedHurdleTargetingData) == 0x000070, "Wrong size on FReplicatedHurdleTargetingData");
static_assert(offsetof(FReplicatedHurdleTargetingData, Type) == 0x000000, "Member 'FReplicatedHurdleTargetingData::Type' has a wrong offset!");
static_assert(offsetof(FReplicatedHurdleTargetingData, EndMovementMode) == 0x000001, "Member 'FReplicatedHurdleTargetingData::EndMovementMode' has a wrong offset!");
static_assert(offsetof(FReplicatedHurdleTargetingData, FacingCornerLocation) == 0x000008, "Member 'FReplicatedHurdleTargetingData::FacingCornerLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedHurdleTargetingData, FacingCornerNormal) == 0x000020, "Member 'FReplicatedHurdleTargetingData::FacingCornerNormal' has a wrong offset!");
static_assert(offsetof(FReplicatedHurdleTargetingData, BackCornerLocation) == 0x000038, "Member 'FReplicatedHurdleTargetingData::BackCornerLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedHurdleTargetingData, FinalLandingPosition) == 0x000050, "Member 'FReplicatedHurdleTargetingData::FinalLandingPosition' has a wrong offset!");
static_assert(offsetof(FReplicatedHurdleTargetingData, bValid) == 0x000068, "Member 'FReplicatedHurdleTargetingData::bValid' has a wrong offset!");

}

