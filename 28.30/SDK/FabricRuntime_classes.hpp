#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FabricRuntime

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MetasoundEngine_structs.hpp"
#include "Engine_classes.hpp"
#include "FabricRuntime_structs.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "FortniteGame_classes.hpp"
#include "HarmonixDsp_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FMCoreRuntime_structs.hpp"
#include "HarmonixMetasound_structs.hpp"
#include "HarmonixMidi_structs.hpp"


namespace SDK
{

// Class FabricRuntime.FabricAnimatableButtonInterface
// 0x0000 (0x0028 - 0x0028)
class IFabricAnimatableButtonInterface final : public IInterface
{
public:
	void PlayCloseAnimation();
	void PlayOpenAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricAnimatableButtonInterface">();
	}
	static class IFabricAnimatableButtonInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricAnimatableButtonInterface>();
	}
};
static_assert(alignof(IFabricAnimatableButtonInterface) == 0x000008, "Wrong alignment on IFabricAnimatableButtonInterface");
static_assert(sizeof(IFabricAnimatableButtonInterface) == 0x000028, "Wrong size on IFabricAnimatableButtonInterface");

// Class FabricRuntime.FabricButtonBase
// 0x0078 (0x0308 - 0x0290)
class AFabricButtonBase final : public AActor
{
public:
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APlayerController* InteractingController, bool IsToggle)> ToggleStateChanged;                                // 0x02A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	double                                        OpenTimeSeconds;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        CloseTimeSeconds;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasToggle;                                        // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EButtonPressMethod                            ClickMethod;                                       // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C2[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InteractingController;                             // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ButtonId;                                          // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ButtonLabel;                                       // 0x02E0(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnabled;                                          // 0x02F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHovered;                                          // 0x02F9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPressed;                                          // 0x02FA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECheckBoxState                                ToggleState;                                       // 0x02FB(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFabricInteractableViewModel*           WidgetViewModel;                                   // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UTimelineComponent* GetCloseTimeline();
	class UTimelineComponent* GetOpenTimeline();
	void HandleButtonClicked();
	void HandleButtonDoubleClicked();
	void HandleButtonHovered();
	void HandleButtonPressed();
	void HandleButtonReleased();
	void HandleButtonUnhovered();
	bool IsEnabled();
	bool IsHovered();
	bool IsPressed();
	bool IsToggledOn();
	void OnButtonClicked();
	void OnButtonDoubleClicked();
	void OnButtonPressed();
	void OnButtonReleased();
	void OnDisabled();
	void OnEnabled();
	void OnHovered();
	void OnToggleStateChanged(bool bIsToggled);
	void OnUnhovered();
	void SetEnabled(bool bNewEnabled);
	void SetToggleState(bool bNewToggleState, bool bBroadcast, bool bForce);
	void SetWidgetViewModel(class UFabricInteractableViewModel* ViewModel);
	void SwapToggle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricButtonBase">();
	}
	static class AFabricButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFabricButtonBase>();
	}
};
static_assert(alignof(AFabricButtonBase) == 0x000008, "Wrong alignment on AFabricButtonBase");
static_assert(sizeof(AFabricButtonBase) == 0x000308, "Wrong size on AFabricButtonBase");
static_assert(offsetof(AFabricButtonBase, ToggleStateChanged) == 0x0002A0, "Member 'AFabricButtonBase::ToggleStateChanged' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, OpenTimeSeconds) == 0x0002B0, "Member 'AFabricButtonBase::OpenTimeSeconds' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, CloseTimeSeconds) == 0x0002B8, "Member 'AFabricButtonBase::CloseTimeSeconds' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, bHasToggle) == 0x0002C0, "Member 'AFabricButtonBase::bHasToggle' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, ClickMethod) == 0x0002C1, "Member 'AFabricButtonBase::ClickMethod' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, InteractingController) == 0x0002C8, "Member 'AFabricButtonBase::InteractingController' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, ButtonId) == 0x0002D0, "Member 'AFabricButtonBase::ButtonId' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, ButtonLabel) == 0x0002E0, "Member 'AFabricButtonBase::ButtonLabel' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, bEnabled) == 0x0002F8, "Member 'AFabricButtonBase::bEnabled' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, bHovered) == 0x0002F9, "Member 'AFabricButtonBase::bHovered' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, bPressed) == 0x0002FA, "Member 'AFabricButtonBase::bPressed' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, ToggleState) == 0x0002FB, "Member 'AFabricButtonBase::ToggleState' has a wrong offset!");
static_assert(offsetof(AFabricButtonBase, WidgetViewModel) == 0x000300, "Member 'AFabricButtonBase::WidgetViewModel' has a wrong offset!");

// Class FabricRuntime.FabricButtonComponentBase
// 0x0090 (0x0650 - 0x05C0)
class UFabricButtonComponentBase final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_5C0[0x10];                                     // 0x05C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APlayerController* InteractingController, bool IsToggle)> ToggleStateChanged;                                // 0x05D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	double                                        OpenTimeSeconds;                                   // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        CloseTimeSeconds;                                  // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasToggle;                                        // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EButtonPressMethod                            ClickMethod;                                       // 0x05F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F2[0x6];                                      // 0x05F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InteractingController;                             // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ButtonId;                                          // 0x0600(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ButtonLabel;                                       // 0x0610(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseScreenGrid;                                    // 0x0628(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScreenGridPosition;                                // 0x0630(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabled;                                          // 0x0640(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHovered;                                          // 0x0641(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPressed;                                          // 0x0642(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECheckBoxState                                ToggleState;                                       // 0x0643(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFabricInteractableViewModel*           WidgetViewModel;                                   // 0x0648(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ConstructButton();
	class UTimelineComponent* GetCloseTimeline();
	class UTimelineComponent* GetOpenTimeline();
	void HandleButtonClicked();
	void HandleButtonDoubleClicked();
	void HandleButtonHovered();
	void HandleButtonPressed();
	void HandleButtonReleased();
	void HandleButtonUnhovered();
	bool IsEnabled();
	bool IsHovered();
	bool IsPressed();
	bool IsToggledOn();
	void OnButtonClicked();
	void OnButtonDoubleClicked();
	void OnButtonPressed();
	void OnButtonReleased();
	void OnDisabled();
	void OnEnabled();
	void OnHovered();
	void OnToggleStateChanged(bool bIsToggled);
	void OnUnhovered();
	void SetEnabled(bool bNewEnabled);
	void SetToggleState(bool bNewToggleState, bool bBroadcast, bool bForce);
	void SetWidgetViewModel(class UFabricInteractableViewModel* ViewModel);
	void SwapToggle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricButtonComponentBase">();
	}
	static class UFabricButtonComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricButtonComponentBase>();
	}
};
static_assert(alignof(UFabricButtonComponentBase) == 0x000010, "Wrong alignment on UFabricButtonComponentBase");
static_assert(sizeof(UFabricButtonComponentBase) == 0x000650, "Wrong size on UFabricButtonComponentBase");
static_assert(offsetof(UFabricButtonComponentBase, ToggleStateChanged) == 0x0005D0, "Member 'UFabricButtonComponentBase::ToggleStateChanged' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, OpenTimeSeconds) == 0x0005E0, "Member 'UFabricButtonComponentBase::OpenTimeSeconds' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, CloseTimeSeconds) == 0x0005E8, "Member 'UFabricButtonComponentBase::CloseTimeSeconds' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, bHasToggle) == 0x0005F0, "Member 'UFabricButtonComponentBase::bHasToggle' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, ClickMethod) == 0x0005F1, "Member 'UFabricButtonComponentBase::ClickMethod' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, InteractingController) == 0x0005F8, "Member 'UFabricButtonComponentBase::InteractingController' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, ButtonId) == 0x000600, "Member 'UFabricButtonComponentBase::ButtonId' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, ButtonLabel) == 0x000610, "Member 'UFabricButtonComponentBase::ButtonLabel' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, bUseScreenGrid) == 0x000628, "Member 'UFabricButtonComponentBase::bUseScreenGrid' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, ScreenGridPosition) == 0x000630, "Member 'UFabricButtonComponentBase::ScreenGridPosition' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, bEnabled) == 0x000640, "Member 'UFabricButtonComponentBase::bEnabled' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, bHovered) == 0x000641, "Member 'UFabricButtonComponentBase::bHovered' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, bPressed) == 0x000642, "Member 'UFabricButtonComponentBase::bPressed' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, ToggleState) == 0x000643, "Member 'UFabricButtonComponentBase::ToggleState' has a wrong offset!");
static_assert(offsetof(UFabricButtonComponentBase, WidgetViewModel) == 0x000648, "Member 'UFabricButtonComponentBase::WidgetViewModel' has a wrong offset!");

// Class FabricRuntime.FabricDevice
// 0x0000 (0x0028 - 0x0028)
class IFabricDevice final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricDevice">();
	}
	static class IFabricDevice* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricDevice>();
	}
};
static_assert(alignof(IFabricDevice) == 0x000008, "Wrong alignment on IFabricDevice");
static_assert(sizeof(IFabricDevice) == 0x000028, "Wrong size on IFabricDevice");

// Class FabricRuntime.FabricMetaSoundPatchOwner
// 0x0000 (0x0028 - 0x0028)
class IFabricMetaSoundPatchOwner final : public IInterface
{
public:
	class UFabricMetaSoundPatchWrapper* GetMetaSoundPatchWrapper();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundPatchOwner">();
	}
	static class IFabricMetaSoundPatchOwner* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricMetaSoundPatchOwner>();
	}
};
static_assert(alignof(IFabricMetaSoundPatchOwner) == 0x000008, "Wrong alignment on IFabricMetaSoundPatchOwner");
static_assert(sizeof(IFabricMetaSoundPatchOwner) == 0x000028, "Wrong size on IFabricMetaSoundPatchOwner");

// Class FabricRuntime.FabricAudioGenerator
// 0x0000 (0x0028 - 0x0028)
class IFabricAudioGenerator final : public IInterface
{
public:
	struct FSourceEffectChainEntry GetAudioAnalyzer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricAudioGenerator">();
	}
	static class IFabricAudioGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricAudioGenerator>();
	}
};
static_assert(alignof(IFabricAudioGenerator) == 0x000008, "Wrong alignment on IFabricAudioGenerator");
static_assert(sizeof(IFabricAudioGenerator) == 0x000028, "Wrong size on IFabricAudioGenerator");

// Class FabricRuntime.FabricAudioModifier
// 0x0000 (0x0028 - 0x0028)
class IFabricAudioModifier final : public IInterface
{
public:
	TArray<struct FSourceEffectChainEntry> GetSourceEffectChainEntries();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricAudioModifier">();
	}
	static class IFabricAudioModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricAudioModifier>();
	}
};
static_assert(alignof(IFabricAudioModifier) == 0x000008, "Wrong alignment on IFabricAudioModifier");
static_assert(sizeof(IFabricAudioModifier) == 0x000028, "Wrong size on IFabricAudioModifier");

// Class FabricRuntime.FabricAudioReceiver
// 0x0000 (0x0028 - 0x0028)
class IFabricAudioReceiver final : public IInterface
{
public:
	class USoundSourceBus* GetSoundSourceBus();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricAudioReceiver">();
	}
	static class IFabricAudioReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricAudioReceiver>();
	}
};
static_assert(alignof(IFabricAudioReceiver) == 0x000008, "Wrong alignment on IFabricAudioReceiver");
static_assert(sizeof(IFabricAudioReceiver) == 0x000028, "Wrong size on IFabricAudioReceiver");

// Class FabricRuntime.FabricFloatGenerator
// 0x0000 (0x0028 - 0x0028)
class IFabricFloatGenerator final : public IInterface
{
public:
	class UFabricFloatProviderBase* GetFloatProvider();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricFloatGenerator">();
	}
	static class IFabricFloatGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricFloatGenerator>();
	}
};
static_assert(alignof(IFabricFloatGenerator) == 0x000008, "Wrong alignment on IFabricFloatGenerator");
static_assert(sizeof(IFabricFloatGenerator) == 0x000028, "Wrong size on IFabricFloatGenerator");

// Class FabricRuntime.FabricFloatReceiver
// 0x0000 (0x0028 - 0x0028)
class IFabricFloatReceiver final : public IInterface
{
public:
	void SetFloatProviders(const TArray<class UFabricFloatProviderBase*>& FloatProvider);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricFloatReceiver">();
	}
	static class IFabricFloatReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricFloatReceiver>();
	}
};
static_assert(alignof(IFabricFloatReceiver) == 0x000008, "Wrong alignment on IFabricFloatReceiver");
static_assert(sizeof(IFabricFloatReceiver) == 0x000028, "Wrong size on IFabricFloatReceiver");

// Class FabricRuntime.FabricTextureGenerator
// 0x0000 (0x0028 - 0x0028)
class IFabricTextureGenerator final : public IInterface
{
public:
	class UFabricTextureProviderBase* GetTextureProvider();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricTextureGenerator">();
	}
	static class IFabricTextureGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricTextureGenerator>();
	}
};
static_assert(alignof(IFabricTextureGenerator) == 0x000008, "Wrong alignment on IFabricTextureGenerator");
static_assert(sizeof(IFabricTextureGenerator) == 0x000028, "Wrong size on IFabricTextureGenerator");

// Class FabricRuntime.FabricTextureModifier
// 0x0000 (0x0028 - 0x0028)
class IFabricTextureModifier final : public IInterface
{
public:
	class UFabricTextureModifierBase* GetTextureModifier();

	bool IsShowingTexturePreview() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricTextureModifier">();
	}
	static class IFabricTextureModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricTextureModifier>();
	}
};
static_assert(alignof(IFabricTextureModifier) == 0x000008, "Wrong alignment on IFabricTextureModifier");
static_assert(sizeof(IFabricTextureModifier) == 0x000028, "Wrong size on IFabricTextureModifier");

// Class FabricRuntime.FabricTextureReceiver
// 0x0000 (0x0028 - 0x0028)
class IFabricTextureReceiver final : public IInterface
{
public:
	void OnTexturesChanged(const TArray<struct FFabricTextureProviderTexture>& Texture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricTextureReceiver">();
	}
	static class IFabricTextureReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricTextureReceiver>();
	}
};
static_assert(alignof(IFabricTextureReceiver) == 0x000008, "Wrong alignment on IFabricTextureReceiver");
static_assert(sizeof(IFabricTextureReceiver) == 0x000028, "Wrong size on IFabricTextureReceiver");

// Class FabricRuntime.FabricMeshGenerator
// 0x0000 (0x0028 - 0x0028)
class IFabricMeshGenerator final : public IInterface
{
public:
	class UFabricMeshProviderBase* GetMeshProvider();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshGenerator">();
	}
	static class IFabricMeshGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricMeshGenerator>();
	}
};
static_assert(alignof(IFabricMeshGenerator) == 0x000008, "Wrong alignment on IFabricMeshGenerator");
static_assert(sizeof(IFabricMeshGenerator) == 0x000028, "Wrong size on IFabricMeshGenerator");

// Class FabricRuntime.FabricMeshModifier
// 0x0000 (0x0028 - 0x0028)
class IFabricMeshModifier final : public IInterface
{
public:
	void OnMeshesChanged(const TArray<struct FFabricMeshInstanceReference>& InstanceMeshReferences, bool bInstancesChanged);

	class UFabricMeshModifierBase* GetMeshModifier() const;
	bool IsShowingMeshPreview() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshModifier">();
	}
	static class IFabricMeshModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricMeshModifier>();
	}
};
static_assert(alignof(IFabricMeshModifier) == 0x000008, "Wrong alignment on IFabricMeshModifier");
static_assert(sizeof(IFabricMeshModifier) == 0x000028, "Wrong size on IFabricMeshModifier");

// Class FabricRuntime.FabricMeshReceiver
// 0x0000 (0x0028 - 0x0028)
class IFabricMeshReceiver final : public IInterface
{
public:
	void OnMeshInstanceReferencesChanged(const TArray<struct FFabricMeshInstanceReference>& MeshInstanceReferences, bool bMeshChanged, bool bInstancesChanged);
	void OnMeshInstancesChanged(const TArray<struct FTransform>& Meshes);
	void OnMeshReferenceChanged(const struct FFabricMeshProviderMeshReference& ReferenceMesh);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshReceiver">();
	}
	static class IFabricMeshReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricMeshReceiver>();
	}
};
static_assert(alignof(IFabricMeshReceiver) == 0x000008, "Wrong alignment on IFabricMeshReceiver");
static_assert(sizeof(IFabricMeshReceiver) == 0x000028, "Wrong size on IFabricMeshReceiver");

// Class FabricRuntime.FabricModulationNode
// 0x0020 (0x0048 - 0x0028)
class UFabricModulationNode final : public UObject
{
public:
	TArray<class UFabricFloatProviderBase*>       FloatProviders;                                    // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricModulationNode">();
	}
	static class UFabricModulationNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricModulationNode>();
	}
};
static_assert(alignof(UFabricModulationNode) == 0x000008, "Wrong alignment on UFabricModulationNode");
static_assert(sizeof(UFabricModulationNode) == 0x000048, "Wrong size on UFabricModulationNode");
static_assert(offsetof(UFabricModulationNode, FloatProviders) == 0x000028, "Member 'UFabricModulationNode::FloatProviders' has a wrong offset!");

// Class FabricRuntime.FabricModulatable
// 0x0300 (0x0328 - 0x0028)
class UFabricModulatable : public UObject
{
public:
	uint8                                         Pad_28[0x4];                                       // 0x0028(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  ModulatedActor;                                    // 0x002C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ModulatorParams;                                   // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TSet<class FName>                             NonModulatedParamsWithCallbacks;                   // 0x0048(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FString, TWeakObjectPtr<class UObject>> Modulators;                                        // 0x0098(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, class FName>                LastBroadcastedValues;                             // 0x00E8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UObject>>         ModulatorSources;                                  // 0x0138(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x1E0];                                    // 0x0148(0x01E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnyOptionUpdated();
	void OnModulatedPropertyChanged(const class FString& Value, class UObject* ModulatorObject);
	void OnModulatorFloatProviderConnectionChanged(bool bConnected, class UObject* ModulatorObject);
	void OnOptionsLoaded();

	class AActor* GetModulatedActor() const;
	bool GetModulatedBool(const class FString& Param, const struct FMidiSongPos& SongPos, bool* OutBool) const;
	bool GetModulatedEnum(const class FString& Param, const struct FMidiSongPos& SongPos, uint8* OutEnum) const;
	bool GetModulatedFloat(const class FString& Param, const struct FMidiSongPos& SongPos, float* OutFloat) const;
	bool GetModulatedInt(const class FString& Param, const struct FMidiSongPos& SongPos, int32* OutInt) const;
	bool GetModulatedString(const class FString& Param, const struct FMidiSongPos& SongPos, class FString* OutString) const;
	bool IsParamModulated(const class FString& Param) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricModulatable">();
	}
	static class UFabricModulatable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricModulatable>();
	}
};
static_assert(alignof(UFabricModulatable) == 0x000008, "Wrong alignment on UFabricModulatable");
static_assert(sizeof(UFabricModulatable) == 0x000328, "Wrong size on UFabricModulatable");
static_assert(offsetof(UFabricModulatable, ModulatedActor) == 0x00002C, "Member 'UFabricModulatable::ModulatedActor' has a wrong offset!");
static_assert(offsetof(UFabricModulatable, ModulatorParams) == 0x000038, "Member 'UFabricModulatable::ModulatorParams' has a wrong offset!");
static_assert(offsetof(UFabricModulatable, NonModulatedParamsWithCallbacks) == 0x000048, "Member 'UFabricModulatable::NonModulatedParamsWithCallbacks' has a wrong offset!");
static_assert(offsetof(UFabricModulatable, Modulators) == 0x000098, "Member 'UFabricModulatable::Modulators' has a wrong offset!");
static_assert(offsetof(UFabricModulatable, LastBroadcastedValues) == 0x0000E8, "Member 'UFabricModulatable::LastBroadcastedValues' has a wrong offset!");
static_assert(offsetof(UFabricModulatable, ModulatorSources) == 0x000138, "Member 'UFabricModulatable::ModulatorSources' has a wrong offset!");

// Class FabricRuntime.FabricFloatProviderBase
// 0x0048 (0x0370 - 0x0328)
class UFabricFloatProviderBase : public UFabricModulatable
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float float)>   OnFloatChanged;                                    // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         CurrentFloat;                                      // 0x0340(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UMusicClockComponent>    MusicClock;                                        // 0x0344(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFabricMetaSoundModulatorPatchWrapper*  AssociatedPatchWrapper;                            // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 EnabledParam;                                      // 0x0358(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysModulates;                                  // 0x0368(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBindBlueprintOnFloatChanged;                      // 0x0369(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEnabled;                                        // 0x036A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bModulatorValueChanged;                            // 0x036B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ReceiveTick(float DeltaSeconds);
	void SetAssociatedPatchWrapper(class UFabricMetaSoundModulatorPatchWrapper* PatchWrapper);
	void SetMusicClock(class UMusicClockComponent* NewMusicClock);
	void SetProviderEnabled(bool bInIsEnabled);

	class UFabricMetaSoundModulatorPatchWrapper* GetAssociatedPatchWrapper() const;
	float GetCurrentFloat() const;
	struct FMidiSongPos GetCurrentSongPos() const;
	struct FMidiSongPos GetCurrentSongPosWithOffset(float OffsetSeconds) const;
	float GetFloatAtSongPos(const struct FMidiSongPos& SongPos) const;
	EFabricFloatProviderType GetFloatProviderType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricFloatProviderBase">();
	}
	static class UFabricFloatProviderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricFloatProviderBase>();
	}
};
static_assert(alignof(UFabricFloatProviderBase) == 0x000008, "Wrong alignment on UFabricFloatProviderBase");
static_assert(sizeof(UFabricFloatProviderBase) == 0x000370, "Wrong size on UFabricFloatProviderBase");
static_assert(offsetof(UFabricFloatProviderBase, OnFloatChanged) == 0x000330, "Member 'UFabricFloatProviderBase::OnFloatChanged' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderBase, CurrentFloat) == 0x000340, "Member 'UFabricFloatProviderBase::CurrentFloat' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderBase, MusicClock) == 0x000344, "Member 'UFabricFloatProviderBase::MusicClock' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderBase, AssociatedPatchWrapper) == 0x000350, "Member 'UFabricFloatProviderBase::AssociatedPatchWrapper' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderBase, EnabledParam) == 0x000358, "Member 'UFabricFloatProviderBase::EnabledParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderBase, bAlwaysModulates) == 0x000368, "Member 'UFabricFloatProviderBase::bAlwaysModulates' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderBase, bBindBlueprintOnFloatChanged) == 0x000369, "Member 'UFabricFloatProviderBase::bBindBlueprintOnFloatChanged' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderBase, bIsEnabled) == 0x00036A, "Member 'UFabricFloatProviderBase::bIsEnabled' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderBase, bModulatorValueChanged) == 0x00036B, "Member 'UFabricFloatProviderBase::bModulatorValueChanged' has a wrong offset!");

// Class FabricRuntime.FabricFloatProviderWave
// 0x0150 (0x04C0 - 0x0370)
class UFabricFloatProviderWave final : public UFabricFloatProviderBase
{
public:
	class FString                                 WaveShapeParam;                                    // 0x0370(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 FreeHzParam;                                       // 0x0380(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 MinParam;                                          // 0x0390(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 MaxParam;                                          // 0x03A0(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 BeatDurationParam;                                 // 0x03B0(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 BeatOffsetParam;                                   // 0x03C0(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ShapeParam;                                        // 0x03D0(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 StyleParam;                                        // 0x03E0(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PhaseCPDIndex;                                     // 0x03F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ValueCPDIndex;                                     // 0x03F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F8[0x78];                                     // 0x03F8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TWeakObjectPtr<class UStaticMeshComponent>> PreviewDisplayMeshes;                              // 0x0470(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void AddPreviewDisplayMesh(class UStaticMeshComponent* Mesh);
	void ClearPreviewDisplayMeshes();
	TArray<class UStaticMeshComponent*> GetPreviewDisplayMeshes();
	void RemovePreviewDisplayMesh(class UStaticMeshComponent* Mesh);
	void SetFreePhase(float InFreePhase);
	void SetRandomSeedByGuid(const struct FGuid& InRandomGuid);

	float GetCurrentFreePhase() const;
	float GetCurrentPhase() const;
	int32 GetRandomSeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricFloatProviderWave">();
	}
	static class UFabricFloatProviderWave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricFloatProviderWave>();
	}
};
static_assert(alignof(UFabricFloatProviderWave) == 0x000008, "Wrong alignment on UFabricFloatProviderWave");
static_assert(sizeof(UFabricFloatProviderWave) == 0x0004C0, "Wrong size on UFabricFloatProviderWave");
static_assert(offsetof(UFabricFloatProviderWave, WaveShapeParam) == 0x000370, "Member 'UFabricFloatProviderWave::WaveShapeParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, FreeHzParam) == 0x000380, "Member 'UFabricFloatProviderWave::FreeHzParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, MinParam) == 0x000390, "Member 'UFabricFloatProviderWave::MinParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, MaxParam) == 0x0003A0, "Member 'UFabricFloatProviderWave::MaxParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, BeatDurationParam) == 0x0003B0, "Member 'UFabricFloatProviderWave::BeatDurationParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, BeatOffsetParam) == 0x0003C0, "Member 'UFabricFloatProviderWave::BeatOffsetParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, ShapeParam) == 0x0003D0, "Member 'UFabricFloatProviderWave::ShapeParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, StyleParam) == 0x0003E0, "Member 'UFabricFloatProviderWave::StyleParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, PhaseCPDIndex) == 0x0003F0, "Member 'UFabricFloatProviderWave::PhaseCPDIndex' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, ValueCPDIndex) == 0x0003F4, "Member 'UFabricFloatProviderWave::ValueCPDIndex' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderWave, PreviewDisplayMeshes) == 0x000470, "Member 'UFabricFloatProviderWave::PreviewDisplayMeshes' has a wrong offset!");

// Class FabricRuntime.FabricFloatProviderStep
// 0x0078 (0x03E8 - 0x0370)
class UFabricFloatProviderStep final : public UFabricFloatProviderBase
{
public:
	class FString                                 StepRateParam;                                     // 0x0370(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ActiveStepsParam;                                  // 0x0380(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 StepParamBase;                                     // 0x0390(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSteps;                                          // 0x03A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFabricStepGenerator                   RuntimeGenerator;                                  // 0x03A8(0x0020)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnFloatProviderStepInitialized;                    // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D8[0x10];                                     // 0x03D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetStepLengthBeats() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricFloatProviderStep">();
	}
	static class UFabricFloatProviderStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricFloatProviderStep>();
	}
};
static_assert(alignof(UFabricFloatProviderStep) == 0x000008, "Wrong alignment on UFabricFloatProviderStep");
static_assert(sizeof(UFabricFloatProviderStep) == 0x0003E8, "Wrong size on UFabricFloatProviderStep");
static_assert(offsetof(UFabricFloatProviderStep, StepRateParam) == 0x000370, "Member 'UFabricFloatProviderStep::StepRateParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderStep, ActiveStepsParam) == 0x000380, "Member 'UFabricFloatProviderStep::ActiveStepsParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderStep, StepParamBase) == 0x000390, "Member 'UFabricFloatProviderStep::StepParamBase' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderStep, MaxSteps) == 0x0003A0, "Member 'UFabricFloatProviderStep::MaxSteps' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderStep, RuntimeGenerator) == 0x0003A8, "Member 'UFabricFloatProviderStep::RuntimeGenerator' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderStep, OnFloatProviderStepInitialized) == 0x0003C8, "Member 'UFabricFloatProviderStep::OnFloatProviderStepInitialized' has a wrong offset!");

// Class FabricRuntime.FabricFloatProviderValueSetter
// 0x0080 (0x03F0 - 0x0370)
class UFabricFloatProviderValueSetter final : public UFabricFloatProviderBase
{
public:
	class FString                                 ValueParam;                                        // 0x0370(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 TransitionTimingParam;                             // 0x0380(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_390[0x60];                                     // 0x0390(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float BroadcastCurrentValue(float OverriddenBeat);

	float CalculateTransitionTiming() const;
	bool CanUsePredictiveBeatBroadcasting() const;
	float GetUpdateBeat() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricFloatProviderValueSetter">();
	}
	static class UFabricFloatProviderValueSetter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricFloatProviderValueSetter>();
	}
};
static_assert(alignof(UFabricFloatProviderValueSetter) == 0x000008, "Wrong alignment on UFabricFloatProviderValueSetter");
static_assert(sizeof(UFabricFloatProviderValueSetter) == 0x0003F0, "Wrong size on UFabricFloatProviderValueSetter");
static_assert(offsetof(UFabricFloatProviderValueSetter, ValueParam) == 0x000370, "Member 'UFabricFloatProviderValueSetter::ValueParam' has a wrong offset!");
static_assert(offsetof(UFabricFloatProviderValueSetter, TransitionTimingParam) == 0x000380, "Member 'UFabricFloatProviderValueSetter::TransitionTimingParam' has a wrong offset!");

// Class FabricRuntime.FabricHoldable
// 0x0000 (0x0028 - 0x0028)
class IFabricHoldable final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricHoldable">();
	}
	static class IFabricHoldable* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricHoldable>();
	}
};
static_assert(alignof(IFabricHoldable) == 0x000008, "Wrong alignment on IFabricHoldable");
static_assert(sizeof(IFabricHoldable) == 0x000028, "Wrong size on IFabricHoldable");

// Class FabricRuntime.FabricInteractableControllerComponent
// 0x0078 (0x0118 - 0x00A0)
class UFabricInteractableControllerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnNoInteractablesHit;                              // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  PlayerController;                                  // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UFortGadgetItemDefinition> FabricInteractionToolItemDefSoftPtr;               // 0x00C8(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortGadgetItemDefinition*              FabricInteractionToolItemDef;                      // 0x00E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SoftFabricDeviceBaseClass;                         // 0x00F8(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClientReceiveDoesIslandContainFabricDevices(const bool bIslandContainsFabricDevices);
	void EnsurePlayerHasInteractionTool();
	void GiveBackInteractionTool();
	void OnCreativeModeEnabledChangedDelegate(bool bCreativeEnabled);
	void ServerGivePlayerFabricInteractionTool();
	void ServerRequestDoesIslandContainFabricDevices();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricInteractableControllerComponent">();
	}
	static class UFabricInteractableControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricInteractableControllerComponent>();
	}
};
static_assert(alignof(UFabricInteractableControllerComponent) == 0x000008, "Wrong alignment on UFabricInteractableControllerComponent");
static_assert(sizeof(UFabricInteractableControllerComponent) == 0x000118, "Wrong size on UFabricInteractableControllerComponent");
static_assert(offsetof(UFabricInteractableControllerComponent, OnNoInteractablesHit) == 0x0000A8, "Member 'UFabricInteractableControllerComponent::OnNoInteractablesHit' has a wrong offset!");
static_assert(offsetof(UFabricInteractableControllerComponent, PlayerController) == 0x0000B8, "Member 'UFabricInteractableControllerComponent::PlayerController' has a wrong offset!");
static_assert(offsetof(UFabricInteractableControllerComponent, PlayerPawn) == 0x0000C0, "Member 'UFabricInteractableControllerComponent::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UFabricInteractableControllerComponent, FabricInteractionToolItemDefSoftPtr) == 0x0000C8, "Member 'UFabricInteractableControllerComponent::FabricInteractionToolItemDefSoftPtr' has a wrong offset!");
static_assert(offsetof(UFabricInteractableControllerComponent, FabricInteractionToolItemDef) == 0x0000E8, "Member 'UFabricInteractableControllerComponent::FabricInteractionToolItemDef' has a wrong offset!");
static_assert(offsetof(UFabricInteractableControllerComponent, SoftFabricDeviceBaseClass) == 0x0000F8, "Member 'UFabricInteractableControllerComponent::SoftFabricDeviceBaseClass' has a wrong offset!");

// Class FabricRuntime.FabricInteractable
// 0x0000 (0x0028 - 0x0028)
class IFabricInteractable final : public IInterface
{
public:
	bool CanInteractWithHoldable(const TScriptInterface<class IFabricHoldable>& Holdable);
	void EndInteraction(class APlayerController* PlayerController, bool bWasDragAndDropInteraction);
	EFabricContinuousInteractionDirection GetContinuousInteractableDirection();
	float GetContinuousInteractableValueNormalized();
	struct FVector GetInteractableComponentLocation(class USceneComponent* Interactable);
	struct FVector GetInteractableForwardVector(class USceneComponent* Interactable);
	EFabricInteractableType GetInteractableType();
	class UAudioComponent* GetInteractionSFX();
	class UObject* GetLinkedInteractable();
	bool IsFocusDependentOnInteractionContext(class APlayerController* Controller);
	bool IsValidToInteractWith(class APlayerController* Controller);
	void OnInteractionFocusTargetChanged(class APlayerController* Controller, class UObject* FocusTarget, bool bIsFocused);
	void SetFocused(bool bIsFocused);
	void SetHitComponent(class USceneComponent* HitComponent);
	void SetInteractable(bool bInteractable);
	bool ShouldPassInteractionToComponent(class AFabricInteractionTool* InteractionTool);
	void StartInteraction(class APlayerController* Controller);
	void StartSpecialInteraction(class APlayerController* Controller);

	bool DoesInteractionRequireHoldable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricInteractable">();
	}
	static class IFabricInteractable* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricInteractable>();
	}
};
static_assert(alignof(IFabricInteractable) == 0x000008, "Wrong alignment on IFabricInteractable");
static_assert(sizeof(IFabricInteractable) == 0x000028, "Wrong size on IFabricInteractable");

// Class FabricRuntime.FabricInteractablePlayspaceComponent
// 0x0050 (0x00F0 - 0x00A0)
class UFabricInteractablePlayspaceComponent final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_A0[0x50];                                      // 0x00A0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDownloadOnDemandCompleteIndividualClient(const struct FEventMessageTag& Channel, const struct FClientFinishedDownloadOnDemand& Context);
	void OnPlayspaceUserAdded(const struct FPlayspaceUser& PlayspaceUser);
	void SetFabricDeviceExistsInPlayspace();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricInteractablePlayspaceComponent">();
	}
	static class UFabricInteractablePlayspaceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricInteractablePlayspaceComponent>();
	}
};
static_assert(alignof(UFabricInteractablePlayspaceComponent) == 0x000008, "Wrong alignment on UFabricInteractablePlayspaceComponent");
static_assert(sizeof(UFabricInteractablePlayspaceComponent) == 0x0000F0, "Wrong size on UFabricInteractablePlayspaceComponent");

// Class FabricRuntime.FabricInteractionTool
// 0x0198 (0x16B0 - 0x1518)
class AFabricInteractionTool final : public AFortWeapon
{
public:
	TMulticastInlineDelegate<void(EFabricInteractionToolStates NewState, class AFortCreativeDeviceProp* Device)> OnInteractionStateChanged;                         // 0x1518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortCreativeDeviceProp* Device)> OnCablesGrabbed;                                   // 0x1528(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortCreativeDeviceProp* Device)> OnCablesDropped;                                   // 0x1538(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float CrossfadeSeconds)> OnMetasoundGeneratorCrossfadeStarted;              // 0x1548(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineComponent;                                   // 0x1558(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRange;                                          // 0x1560(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinDragAndDropTriggerTime;                         // 0x1564(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FiringRate;                                        // 0x1568(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SplineEndForwardMultiplier;                        // 0x156C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SplineStartForwardMultiplier;                      // 0x1570(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1574[0x4];                                     // 0x1574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                HoveredInteractable;                               // 0x1578(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        HoveredInteractableHitComponent;                   // 0x1580(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                PressedInteractable;                               // 0x1588(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UObject>                 LastPressedInteractable;                           // 0x1590(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        PressedInteractableHitComponent;                   // 0x1598(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortCreativeDeviceProp> InteractableOwnerDevice;                           // 0x15A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AccumulatedDragAndDropTriggerTime;                 // 0x15A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FInteractionData                       ServerInteractionData;                             // 0x15AC(0x000C)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15B8[0x11];                                    // 0x15B8(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bServerTriggerPressed;                             // 0x15C9(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15CA[0x1];                                     // 0x15CA(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bServerIsHoldingCable;                             // 0x15CB(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15CC[0x14];                                    // 0x15CC(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractionSplinePoints               ServerSplinePoints;                                // 0x15E0(0x0060)(Net, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         ServerContinuousInteractableValue;                 // 0x1640(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1644[0x6C];                                    // 0x1644(0x006C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientDeactiveWeaponAndState();
	void ClientStopInteracting();
	void DeactiveWeaponAndState();
	float GetContinuousInteractableValueNormalized();
	EFabricContinuousInteractionDirection GetContinuousInteractionDirection();
	float GetContinuousMovementValue();
	int32 GetContinuousStateValue();
	EFabricInteractionToolStates GetFabricInteractionToolState();
	class USceneComponent* GetHoveredInteractableHitComponent();
	EFabricInteractableType GetHoveredInteractableType();
	class UObject* GetPressedInteractable();
	void HandleMetasoundGeneratorCrossfade(float CrossfadeSeconds);
	bool IsHoldingCables();
	void OnRep_ServerContinuousInteractableValue();
	void OnRep_ServerInteractionData();
	void OnRep_ServerIsHoldingCable();
	void OnRep_ServerTriggerPressed();
	void OnSplineUpdated(EFabricInteractionToolStates NewInteractionState);
	void ServerHandleFITFired();
	void ServerSetContinuousInteractableValue(float Value);
	void ServerSetInteractionData(const struct FInteractionData& NewData);
	void ServerSetIsHoldingCable(bool bHoldingCable);
	void ServerSetSplinePoints(const struct FInteractionSplinePoints& SplinePoints);
	void ServerSetTriggerPressed(bool bPressed);
	void UnholsterWeapon();

	bool IsRunningOnOwningClient() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricInteractionTool">();
	}
	static class AFabricInteractionTool* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFabricInteractionTool>();
	}
};
static_assert(alignof(AFabricInteractionTool) == 0x000008, "Wrong alignment on AFabricInteractionTool");
static_assert(sizeof(AFabricInteractionTool) == 0x0016B0, "Wrong size on AFabricInteractionTool");
static_assert(offsetof(AFabricInteractionTool, OnInteractionStateChanged) == 0x001518, "Member 'AFabricInteractionTool::OnInteractionStateChanged' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, OnCablesGrabbed) == 0x001528, "Member 'AFabricInteractionTool::OnCablesGrabbed' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, OnCablesDropped) == 0x001538, "Member 'AFabricInteractionTool::OnCablesDropped' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, OnMetasoundGeneratorCrossfadeStarted) == 0x001548, "Member 'AFabricInteractionTool::OnMetasoundGeneratorCrossfadeStarted' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, SplineComponent) == 0x001558, "Member 'AFabricInteractionTool::SplineComponent' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, MaxRange) == 0x001560, "Member 'AFabricInteractionTool::MaxRange' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, MinDragAndDropTriggerTime) == 0x001564, "Member 'AFabricInteractionTool::MinDragAndDropTriggerTime' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, FiringRate) == 0x001568, "Member 'AFabricInteractionTool::FiringRate' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, SplineEndForwardMultiplier) == 0x00156C, "Member 'AFabricInteractionTool::SplineEndForwardMultiplier' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, SplineStartForwardMultiplier) == 0x001570, "Member 'AFabricInteractionTool::SplineStartForwardMultiplier' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, HoveredInteractable) == 0x001578, "Member 'AFabricInteractionTool::HoveredInteractable' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, HoveredInteractableHitComponent) == 0x001580, "Member 'AFabricInteractionTool::HoveredInteractableHitComponent' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, PressedInteractable) == 0x001588, "Member 'AFabricInteractionTool::PressedInteractable' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, LastPressedInteractable) == 0x001590, "Member 'AFabricInteractionTool::LastPressedInteractable' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, PressedInteractableHitComponent) == 0x001598, "Member 'AFabricInteractionTool::PressedInteractableHitComponent' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, InteractableOwnerDevice) == 0x0015A0, "Member 'AFabricInteractionTool::InteractableOwnerDevice' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, AccumulatedDragAndDropTriggerTime) == 0x0015A8, "Member 'AFabricInteractionTool::AccumulatedDragAndDropTriggerTime' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, ServerInteractionData) == 0x0015AC, "Member 'AFabricInteractionTool::ServerInteractionData' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, bServerTriggerPressed) == 0x0015C9, "Member 'AFabricInteractionTool::bServerTriggerPressed' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, bServerIsHoldingCable) == 0x0015CB, "Member 'AFabricInteractionTool::bServerIsHoldingCable' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, ServerSplinePoints) == 0x0015E0, "Member 'AFabricInteractionTool::ServerSplinePoints' has a wrong offset!");
static_assert(offsetof(AFabricInteractionTool, ServerContinuousInteractableValue) == 0x001640, "Member 'AFabricInteractionTool::ServerContinuousInteractableValue' has a wrong offset!");

// Class FabricRuntime.FabricMeshModifierBase
// 0x0008 (0x0330 - 0x0328)
class UFabricMeshModifierBase : public UFabricModulatable
{
public:
	EFabricCloneTransformBehavior                 CloneBehavior;                                     // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshModifierBase">();
	}
	static class UFabricMeshModifierBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMeshModifierBase>();
	}
};
static_assert(alignof(UFabricMeshModifierBase) == 0x000008, "Wrong alignment on UFabricMeshModifierBase");
static_assert(sizeof(UFabricMeshModifierBase) == 0x000330, "Wrong size on UFabricMeshModifierBase");
static_assert(offsetof(UFabricMeshModifierBase, CloneBehavior) == 0x000328, "Member 'UFabricMeshModifierBase::CloneBehavior' has a wrong offset!");

// Class FabricRuntime.FabricMeshModifierTranslate
// 0x0018 (0x0348 - 0x0330)
class UFabricMeshModifierTranslate final : public UFabricMeshModifierBase
{
public:
	struct FVector                                PositionOffset;                                    // 0x0330(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshModifierTranslate">();
	}
	static class UFabricMeshModifierTranslate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMeshModifierTranslate>();
	}
};
static_assert(alignof(UFabricMeshModifierTranslate) == 0x000008, "Wrong alignment on UFabricMeshModifierTranslate");
static_assert(sizeof(UFabricMeshModifierTranslate) == 0x000348, "Wrong size on UFabricMeshModifierTranslate");
static_assert(offsetof(UFabricMeshModifierTranslate, PositionOffset) == 0x000330, "Member 'UFabricMeshModifierTranslate::PositionOffset' has a wrong offset!");

// Class FabricRuntime.FabricMeshModifierRotate
// 0x0018 (0x0348 - 0x0330)
class UFabricMeshModifierRotate final : public UFabricMeshModifierBase
{
public:
	struct FRotator                               RotationAmount;                                    // 0x0330(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshModifierRotate">();
	}
	static class UFabricMeshModifierRotate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMeshModifierRotate>();
	}
};
static_assert(alignof(UFabricMeshModifierRotate) == 0x000008, "Wrong alignment on UFabricMeshModifierRotate");
static_assert(sizeof(UFabricMeshModifierRotate) == 0x000348, "Wrong size on UFabricMeshModifierRotate");
static_assert(offsetof(UFabricMeshModifierRotate, RotationAmount) == 0x000330, "Member 'UFabricMeshModifierRotate::RotationAmount' has a wrong offset!");

// Class FabricRuntime.FabricMeshModifierScale
// 0x0018 (0x0348 - 0x0330)
class UFabricMeshModifierScale final : public UFabricMeshModifierBase
{
public:
	struct FVector                                ScaleFactor;                                       // 0x0330(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshModifierScale">();
	}
	static class UFabricMeshModifierScale* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMeshModifierScale>();
	}
};
static_assert(alignof(UFabricMeshModifierScale) == 0x000008, "Wrong alignment on UFabricMeshModifierScale");
static_assert(sizeof(UFabricMeshModifierScale) == 0x000348, "Wrong size on UFabricMeshModifierScale");
static_assert(offsetof(UFabricMeshModifierScale, ScaleFactor) == 0x000330, "Member 'UFabricMeshModifierScale::ScaleFactor' has a wrong offset!");

// Class FabricRuntime.FabricMeshModifierClone
// 0x0028 (0x0358 - 0x0330)
class UFabricMeshModifierClone final : public UFabricMeshModifierBase
{
public:
	int32                                         CloneCount;                                        // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PerCloneTranslation;                               // 0x0338(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCentered;                                         // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshModifierClone">();
	}
	static class UFabricMeshModifierClone* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMeshModifierClone>();
	}
};
static_assert(alignof(UFabricMeshModifierClone) == 0x000008, "Wrong alignment on UFabricMeshModifierClone");
static_assert(sizeof(UFabricMeshModifierClone) == 0x000358, "Wrong size on UFabricMeshModifierClone");
static_assert(offsetof(UFabricMeshModifierClone, CloneCount) == 0x000330, "Member 'UFabricMeshModifierClone::CloneCount' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierClone, PerCloneTranslation) == 0x000338, "Member 'UFabricMeshModifierClone::PerCloneTranslation' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierClone, bCentered) == 0x000350, "Member 'UFabricMeshModifierClone::bCentered' has a wrong offset!");

// Class FabricRuntime.FabricMeshModifierRandomize
// 0x0068 (0x0398 - 0x0330)
class UFabricMeshModifierRandomize final : public UFabricMeshModifierBase
{
public:
	float                                         LocationRandLimit;                                 // 0x0330(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRandLimit;                                 // 0x0334(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleRandLimit;                                    // 0x0338(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationRandRange;                                 // 0x0340(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationRandRange;                                 // 0x0358(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleRandRangeAdditive;                            // 0x0370(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleRandRangeRangeBase;                           // 0x0388(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUniformScale;                                     // 0x038C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38D[0x3];                                      // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          RandomStream;                                      // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshModifierRandomize">();
	}
	static class UFabricMeshModifierRandomize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMeshModifierRandomize>();
	}
};
static_assert(alignof(UFabricMeshModifierRandomize) == 0x000008, "Wrong alignment on UFabricMeshModifierRandomize");
static_assert(sizeof(UFabricMeshModifierRandomize) == 0x000398, "Wrong size on UFabricMeshModifierRandomize");
static_assert(offsetof(UFabricMeshModifierRandomize, LocationRandLimit) == 0x000330, "Member 'UFabricMeshModifierRandomize::LocationRandLimit' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierRandomize, RotationRandLimit) == 0x000334, "Member 'UFabricMeshModifierRandomize::RotationRandLimit' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierRandomize, ScaleRandLimit) == 0x000338, "Member 'UFabricMeshModifierRandomize::ScaleRandLimit' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierRandomize, LocationRandRange) == 0x000340, "Member 'UFabricMeshModifierRandomize::LocationRandRange' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierRandomize, RotationRandRange) == 0x000358, "Member 'UFabricMeshModifierRandomize::RotationRandRange' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierRandomize, ScaleRandRangeAdditive) == 0x000370, "Member 'UFabricMeshModifierRandomize::ScaleRandRangeAdditive' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierRandomize, ScaleRandRangeRangeBase) == 0x000388, "Member 'UFabricMeshModifierRandomize::ScaleRandRangeRangeBase' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierRandomize, bUniformScale) == 0x00038C, "Member 'UFabricMeshModifierRandomize::bUniformScale' has a wrong offset!");
static_assert(offsetof(UFabricMeshModifierRandomize, RandomStream) == 0x000390, "Member 'UFabricMeshModifierRandomize::RandomStream' has a wrong offset!");

// Class FabricRuntime.FabricMeshTreeNode
// 0x0080 (0x00A8 - 0x0028)
class UFabricMeshTreeNode final : public UObject
{
public:
	class UFabricMeshModifierBase*                MeshModifier;                                      // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFabricMeshProviderMeshReferenceParams Params_0;                                          // 0x0030(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFabricMeshProviderMeshReference       MeshProviderReference;                             // 0x0058(0x0038)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFabricMeshTreeNode*>            Children;                                          // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        LastCalculatedChecksum;                            // 0x00A0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowChecksumCalculation;                         // 0x00A4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyProperties(const class UFabricMeshTreeNode* Other);
	void Reset();

	TArray<struct FFabricMeshInstanceReference> GenerateMeshInstanceReferences() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshTreeNode">();
	}
	static class UFabricMeshTreeNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMeshTreeNode>();
	}
};
static_assert(alignof(UFabricMeshTreeNode) == 0x000008, "Wrong alignment on UFabricMeshTreeNode");
static_assert(sizeof(UFabricMeshTreeNode) == 0x0000A8, "Wrong size on UFabricMeshTreeNode");
static_assert(offsetof(UFabricMeshTreeNode, MeshModifier) == 0x000028, "Member 'UFabricMeshTreeNode::MeshModifier' has a wrong offset!");
static_assert(offsetof(UFabricMeshTreeNode, Params_0) == 0x000030, "Member 'UFabricMeshTreeNode::Params_0' has a wrong offset!");
static_assert(offsetof(UFabricMeshTreeNode, MeshProviderReference) == 0x000058, "Member 'UFabricMeshTreeNode::MeshProviderReference' has a wrong offset!");
static_assert(offsetof(UFabricMeshTreeNode, Children) == 0x000090, "Member 'UFabricMeshTreeNode::Children' has a wrong offset!");
static_assert(offsetof(UFabricMeshTreeNode, LastCalculatedChecksum) == 0x0000A0, "Member 'UFabricMeshTreeNode::LastCalculatedChecksum' has a wrong offset!");
static_assert(offsetof(UFabricMeshTreeNode, bAllowChecksumCalculation) == 0x0000A4, "Member 'UFabricMeshTreeNode::bAllowChecksumCalculation' has a wrong offset!");

// Class FabricRuntime.FabricMeshProviderBase
// 0x0058 (0x0080 - 0x0028)
class UFabricMeshProviderBase final : public UObject
{
public:
	struct FFabricMeshProviderMeshReference       ReferenceMesh;                                     // 0x0028(0x0038)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                     InstanceMeshes;                                    // 0x0060(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	float                                         CurrentCableFloatValue;                            // 0x0070(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentCableFloatDirection;                        // 0x0074(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCurrentCableFloatDirty;                           // 0x0078(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetReferenceMesh(const struct FFabricMeshProviderMeshReference& InMesh);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMeshProviderBase">();
	}
	static class UFabricMeshProviderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMeshProviderBase>();
	}
};
static_assert(alignof(UFabricMeshProviderBase) == 0x000008, "Wrong alignment on UFabricMeshProviderBase");
static_assert(sizeof(UFabricMeshProviderBase) == 0x000080, "Wrong size on UFabricMeshProviderBase");
static_assert(offsetof(UFabricMeshProviderBase, ReferenceMesh) == 0x000028, "Member 'UFabricMeshProviderBase::ReferenceMesh' has a wrong offset!");
static_assert(offsetof(UFabricMeshProviderBase, InstanceMeshes) == 0x000060, "Member 'UFabricMeshProviderBase::InstanceMeshes' has a wrong offset!");
static_assert(offsetof(UFabricMeshProviderBase, CurrentCableFloatValue) == 0x000070, "Member 'UFabricMeshProviderBase::CurrentCableFloatValue' has a wrong offset!");
static_assert(offsetof(UFabricMeshProviderBase, CurrentCableFloatDirection) == 0x000074, "Member 'UFabricMeshProviderBase::CurrentCableFloatDirection' has a wrong offset!");
static_assert(offsetof(UFabricMeshProviderBase, bCurrentCableFloatDirty) == 0x000078, "Member 'UFabricMeshProviderBase::bCurrentCableFloatDirty' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundPatchWrapper
// 0x0380 (0x06A8 - 0x0328)
class UFabricMetaSoundPatchWrapper : public UFabricModulatable
{
public:
	class FName                                   EnabledStateInputName;                             // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMetaSoundPatch>         MetaSoundPatch;                                    // 0x0330(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FName>              UserOptionsToNodeInputs;                           // 0x0350(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FFabricMetaSoundPatchWrapper_PerPlatformBoolInputTuning> PerPlatformInputBools;                             // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFabricMetaSoundPatchWrapper_PerPlatformIntInputTuning> PerPlatformInputInts;                              // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFabricMetaSoundPatchWrapper_PerPlatformFloatInputTuning> PerPlatformInputFloats;                            // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFabricMetaSoundDirectInputInfo> DirectInputs;                                      // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFabricMetaSoundPatchWrapperBinding    SimpleSignalOutputBinding;                         // 0x03E0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(struct FFabricMetaSoundPatchWrapperBinding& Binding)> OnSimpleSignalBindingUpdate;                       // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class FName                                   VisibleInputParamName;                             // 0x0438(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AudibleInputParamName;                             // 0x043C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanConsumeVisibleFlag;                            // 0x0440(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanConsumeAudibleFlag;                            // 0x0441(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsVisible;                                        // 0x0442(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAudible;                                        // 0x0443(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_444[0x74];                                     // 0x0444(0x0074)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName& OutputName, TArray<int32>& Outputs)> OnMetaSoundOutputIntChangedBatch;                  // 0x04B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName& OutputName, TArray<float>* Outputs, struct FFabricMetaSoundPatchWrapperPeakTamer* PeakTamer, float DeltaSeconds)> OnMetaSoundOutputFloatChangedBatch;                // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFabricMetaSoundManagerComponent*       CurrentManager;                                    // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFabricMetaSoundTickSubsystem> TickSubsystem;                                     // 0x04E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFabricMetaSoundNodeInfo               CurrentNode;                                       // 0x04E8(0x00F0)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  PositionalProxyActor;                              // 0x05D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5E0[0x20];                                     // 0x05E0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UAudioComponent>         CurrentAudioComponent;                             // 0x0600(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UAudioComponent>         NewAudioComponent;                                 // 0x0608(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CombinerMetaSoundType;                             // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AnalyzerMetaSoundType;                             // 0x0614(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FFabricMetaSoundRuntimeInputInfo> MetaSoundRuntimeInputInfos;                        // 0x0618(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UFabricMetaSoundPatchWrapper*>   ConnectedInputWrappers;                            // 0x0628(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UFabricMetaSoundPatchWrapper*>   PendingInputWrappers;                              // 0x0638(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UFabricMetaSoundPatchWrapper*>   PendingOutputWrappers;                             // 0x0648(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMetaSoundCombinerNodeHandle>   CombinersInUse;                                    // 0x0658(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UFabricMetaSoundPatchWrapper*>   ConnectedOutputWrappers;                           // 0x0668(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	EFabricMetaSoundPatchWrapperQuality           PatchWrapperQuality;                               // 0x0678(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_679[0x17];                                     // 0x0679(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UMetaSoundPatch*                        LoadedMetaSoundPatch;                              // 0x0690(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_698[0x10];                                     // 0x0698(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddToGraphOnFirstConnect();
	void AddToManagerGraph(class UFabricMetaSoundManagerComponent* Manager);
	void NeedsGeneratorHandleUpdate();
	void NeedsOutputWatcherUpdate();
	void NeedsParameterPackUpdate();
	void OnAddedToManagerGraph(class UFabricMetaSoundManagerComponent* Manager);
	void OnConnectedModulatorEnable(class UFabricMetaSoundPatchWrapper* EnabledPatchWrapper);
	void OnMetasoundManagerEndPlay();
	void OnMetaSoundOutputChanged(class FName OutputName, const struct FMetaSoundOutput& Output);
	void OnMetaSoundOutputValueChanged(class FName OutputName, const struct FMetaSoundOutput& MetaSoundOutput);
	void RemoveFromCurrentGraph();
	void SetBoolInput(const class FName& MetaSoundInputName, bool bValue);
	void SetEnumInput(const class FName& MetaSoundInputName, uint8 Value);
	void SetFloatInput(const class FName& MetaSoundInputName, float Value);
	void SetIntInput(const class FName& MetaSoundInputName, int32 Value);
	void SetNodeEnabled(bool bEnabled);
	void SetPositionalProxyActor(class AActor* InLocationProxyActor);
	void SetRunsOnServer(bool bAllowRunOnServer);
	void SetStringInput(const class FName& MetaSoundInputName, const class FString& Value);

	TSet<class FName> GetMetaSoundInputNames() const;
	class UMusicClockComponent* GetMusicClock() const;
	bool GetNodeEnabled() const;
	bool GetRunsOnServer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundPatchWrapper">();
	}
	static class UFabricMetaSoundPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundPatchWrapper");
static_assert(sizeof(UFabricMetaSoundPatchWrapper) == 0x0006A8, "Wrong size on UFabricMetaSoundPatchWrapper");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, EnabledStateInputName) == 0x000328, "Member 'UFabricMetaSoundPatchWrapper::EnabledStateInputName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, MetaSoundPatch) == 0x000330, "Member 'UFabricMetaSoundPatchWrapper::MetaSoundPatch' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, UserOptionsToNodeInputs) == 0x000350, "Member 'UFabricMetaSoundPatchWrapper::UserOptionsToNodeInputs' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, PerPlatformInputBools) == 0x0003A0, "Member 'UFabricMetaSoundPatchWrapper::PerPlatformInputBools' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, PerPlatformInputInts) == 0x0003B0, "Member 'UFabricMetaSoundPatchWrapper::PerPlatformInputInts' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, PerPlatformInputFloats) == 0x0003C0, "Member 'UFabricMetaSoundPatchWrapper::PerPlatformInputFloats' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, DirectInputs) == 0x0003D0, "Member 'UFabricMetaSoundPatchWrapper::DirectInputs' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, SimpleSignalOutputBinding) == 0x0003E0, "Member 'UFabricMetaSoundPatchWrapper::SimpleSignalOutputBinding' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, OnSimpleSignalBindingUpdate) == 0x000428, "Member 'UFabricMetaSoundPatchWrapper::OnSimpleSignalBindingUpdate' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, VisibleInputParamName) == 0x000438, "Member 'UFabricMetaSoundPatchWrapper::VisibleInputParamName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, AudibleInputParamName) == 0x00043C, "Member 'UFabricMetaSoundPatchWrapper::AudibleInputParamName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, bCanConsumeVisibleFlag) == 0x000440, "Member 'UFabricMetaSoundPatchWrapper::bCanConsumeVisibleFlag' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, bCanConsumeAudibleFlag) == 0x000441, "Member 'UFabricMetaSoundPatchWrapper::bCanConsumeAudibleFlag' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, bIsVisible) == 0x000442, "Member 'UFabricMetaSoundPatchWrapper::bIsVisible' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, bIsAudible) == 0x000443, "Member 'UFabricMetaSoundPatchWrapper::bIsAudible' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, OnMetaSoundOutputIntChangedBatch) == 0x0004B8, "Member 'UFabricMetaSoundPatchWrapper::OnMetaSoundOutputIntChangedBatch' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, OnMetaSoundOutputFloatChangedBatch) == 0x0004C8, "Member 'UFabricMetaSoundPatchWrapper::OnMetaSoundOutputFloatChangedBatch' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, CurrentManager) == 0x0004D8, "Member 'UFabricMetaSoundPatchWrapper::CurrentManager' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, TickSubsystem) == 0x0004E0, "Member 'UFabricMetaSoundPatchWrapper::TickSubsystem' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, CurrentNode) == 0x0004E8, "Member 'UFabricMetaSoundPatchWrapper::CurrentNode' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, PositionalProxyActor) == 0x0005D8, "Member 'UFabricMetaSoundPatchWrapper::PositionalProxyActor' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, CurrentAudioComponent) == 0x000600, "Member 'UFabricMetaSoundPatchWrapper::CurrentAudioComponent' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, NewAudioComponent) == 0x000608, "Member 'UFabricMetaSoundPatchWrapper::NewAudioComponent' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, CombinerMetaSoundType) == 0x000610, "Member 'UFabricMetaSoundPatchWrapper::CombinerMetaSoundType' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, AnalyzerMetaSoundType) == 0x000614, "Member 'UFabricMetaSoundPatchWrapper::AnalyzerMetaSoundType' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, MetaSoundRuntimeInputInfos) == 0x000618, "Member 'UFabricMetaSoundPatchWrapper::MetaSoundRuntimeInputInfos' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, ConnectedInputWrappers) == 0x000628, "Member 'UFabricMetaSoundPatchWrapper::ConnectedInputWrappers' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, PendingInputWrappers) == 0x000638, "Member 'UFabricMetaSoundPatchWrapper::PendingInputWrappers' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, PendingOutputWrappers) == 0x000648, "Member 'UFabricMetaSoundPatchWrapper::PendingOutputWrappers' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, CombinersInUse) == 0x000658, "Member 'UFabricMetaSoundPatchWrapper::CombinersInUse' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, ConnectedOutputWrappers) == 0x000668, "Member 'UFabricMetaSoundPatchWrapper::ConnectedOutputWrappers' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, PatchWrapperQuality) == 0x000678, "Member 'UFabricMetaSoundPatchWrapper::PatchWrapperQuality' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundPatchWrapper, LoadedMetaSoundPatch) == 0x000690, "Member 'UFabricMetaSoundPatchWrapper::LoadedMetaSoundPatch' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundDrumPlayerPatchWrapper
// 0x00E0 (0x0788 - 0x06A8)
class UFabricMetaSoundDrumPlayerPatchWrapper final : public UFabricMetaSoundPatchWrapper
{
public:
	uint8                                         Pad_6A8[0x8];                                      // 0x06A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PitchSampleInputName;                              // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotKitInputName;                                  // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PitchSampleParams;                                 // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SlotLinkParams;                                    // 0x06C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SlotUnlinkedKitParams;                             // 0x06D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CurrentKitParam;                                   // 0x06E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSamplesPerKit;                                  // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6FC[0x4];                                      // 0x06FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFabricMetaSoundPatchWrapperBinding> DrumAmplitudes;                                    // 0x0700(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(TArray<struct FFabricMetaSoundPatchWrapperBinding>& DrumAmplitudes)> OnFabricMetaSoundDrumPlayerPatchDrumAmplitudesUpdate; // 0x0710(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 KitIndex, class UFabricMetasoundDrumPlayerSampleBankAsset* BankAsset)> OnFabricMetaSoundDrumPlayerSampleBanksLoaded;      // 0x0720(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_730[0x48];                                     // 0x0730(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        CurrentKitSamples;                                 // 0x0778(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void KitIndexChanged(const class FName& Param, int32 Value);
	void LoadDrumPlayerSampleBanks(const TArray<TSoftObjectPtr<class UFabricMetasoundDrumPlayerSampleBankAsset>>& SampleBankArray, const TSet<int32>& KitNumbersToLoad);
	void PitchSampleParamChanged(int32 PitchSampleIndex, int32 Value);
	void SlotLinkedParamChanged(int32 PitchSampleIndex, bool Value);
	void SlotUnlinkedKitParamChanged(int32 PitchSampleIndex, int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundDrumPlayerPatchWrapper">();
	}
	static class UFabricMetaSoundDrumPlayerPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundDrumPlayerPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundDrumPlayerPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundDrumPlayerPatchWrapper");
static_assert(sizeof(UFabricMetaSoundDrumPlayerPatchWrapper) == 0x000788, "Wrong size on UFabricMetaSoundDrumPlayerPatchWrapper");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, PitchSampleInputName) == 0x0006B0, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::PitchSampleInputName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, SlotKitInputName) == 0x0006B4, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::SlotKitInputName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, PitchSampleParams) == 0x0006B8, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::PitchSampleParams' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, SlotLinkParams) == 0x0006C8, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::SlotLinkParams' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, SlotUnlinkedKitParams) == 0x0006D8, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::SlotUnlinkedKitParams' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, CurrentKitParam) == 0x0006E8, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::CurrentKitParam' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, NumSamplesPerKit) == 0x0006F8, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::NumSamplesPerKit' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, DrumAmplitudes) == 0x000700, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::DrumAmplitudes' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, OnFabricMetaSoundDrumPlayerPatchDrumAmplitudesUpdate) == 0x000710, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::OnFabricMetaSoundDrumPlayerPatchDrumAmplitudesUpdate' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, OnFabricMetaSoundDrumPlayerSampleBanksLoaded) == 0x000720, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::OnFabricMetaSoundDrumPlayerSampleBanksLoaded' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundDrumPlayerPatchWrapper, CurrentKitSamples) == 0x000778, "Member 'UFabricMetaSoundDrumPlayerPatchWrapper::CurrentKitSamples' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundWetDryPatchWrapper
// 0x00A0 (0x0748 - 0x06A8)
class UFabricMetaSoundWetDryPatchWrapper : public UFabricMetaSoundPatchWrapper
{
public:
	struct FFabricMetaSoundPatchWrapperWetDryOutputBinding WetDryOutputBinding;                               // 0x06A8(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(struct FFabricMetaSoundPatchWrapperWetDryOutputBinding& WetDryOutputBindings)> OnWetDryOutputSignalUpdate;                        // 0x0738(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundWetDryPatchWrapper">();
	}
	static class UFabricMetaSoundWetDryPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundWetDryPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundWetDryPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundWetDryPatchWrapper");
static_assert(sizeof(UFabricMetaSoundWetDryPatchWrapper) == 0x000748, "Wrong size on UFabricMetaSoundWetDryPatchWrapper");
static_assert(offsetof(UFabricMetaSoundWetDryPatchWrapper, WetDryOutputBinding) == 0x0006A8, "Member 'UFabricMetaSoundWetDryPatchWrapper::WetDryOutputBinding' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundWetDryPatchWrapper, OnWetDryOutputSignalUpdate) == 0x000738, "Member 'UFabricMetaSoundWetDryPatchWrapper::OnWetDryOutputSignalUpdate' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundEchoPatchWrapper
// 0x0018 (0x0760 - 0x0748)
class UFabricMetaSoundEchoPatchWrapper final : public UFabricMetaSoundWetDryPatchWrapper
{
public:
	bool                                          bAllowWetSignalWaveformTexture;                    // 0x0748(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowDrySignalWaveformTexture;                    // 0x0749(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74A[0x6];                                      // 0x074A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFabricWaveformTexture*                 WetSignalWaveformTexture;                          // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFabricWaveformTexture*                 DrySignalWaveformTexture;                          // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundEchoPatchWrapper">();
	}
	static class UFabricMetaSoundEchoPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundEchoPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundEchoPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundEchoPatchWrapper");
static_assert(sizeof(UFabricMetaSoundEchoPatchWrapper) == 0x000760, "Wrong size on UFabricMetaSoundEchoPatchWrapper");
static_assert(offsetof(UFabricMetaSoundEchoPatchWrapper, bAllowWetSignalWaveformTexture) == 0x000748, "Member 'UFabricMetaSoundEchoPatchWrapper::bAllowWetSignalWaveformTexture' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundEchoPatchWrapper, bAllowDrySignalWaveformTexture) == 0x000749, "Member 'UFabricMetaSoundEchoPatchWrapper::bAllowDrySignalWaveformTexture' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundEchoPatchWrapper, WetSignalWaveformTexture) == 0x000750, "Member 'UFabricMetaSoundEchoPatchWrapper::WetSignalWaveformTexture' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundEchoPatchWrapper, DrySignalWaveformTexture) == 0x000758, "Member 'UFabricMetaSoundEchoPatchWrapper::DrySignalWaveformTexture' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundInstrumentPlayerPatchWrapper
// 0x00E0 (0x0788 - 0x06A8)
class UFabricMetaSoundInstrumentPlayerPatchWrapper final : public UFabricMetaSoundPatchWrapper
{
public:
	TMulticastInlineDelegate<void(struct FHarmonixFFTAnalyzerResults& FFTAnalyzerResults)> OnFFTResultsUpdated;                               // 0x06A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FFabricMetaSoundPatchWrapperBinding    FFTAnalysisOutputBinding;                          // 0x06B8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         FFTCPDStartIndex;                                  // 0x0700(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FFTLength;                                         // 0x0704(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_708[0x78];                                     // 0x0708(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFusionPatch>            CurrentFusionPatch;                                // 0x0780(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DriveFFTDataOnPrimitive(class UPrimitiveComponent* Primitive);
	void SetFusionPatch(class UFusionPatch* FusionPatch);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundInstrumentPlayerPatchWrapper">();
	}
	static class UFabricMetaSoundInstrumentPlayerPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundInstrumentPlayerPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundInstrumentPlayerPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundInstrumentPlayerPatchWrapper");
static_assert(sizeof(UFabricMetaSoundInstrumentPlayerPatchWrapper) == 0x000788, "Wrong size on UFabricMetaSoundInstrumentPlayerPatchWrapper");
static_assert(offsetof(UFabricMetaSoundInstrumentPlayerPatchWrapper, OnFFTResultsUpdated) == 0x0006A8, "Member 'UFabricMetaSoundInstrumentPlayerPatchWrapper::OnFFTResultsUpdated' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundInstrumentPlayerPatchWrapper, FFTAnalysisOutputBinding) == 0x0006B8, "Member 'UFabricMetaSoundInstrumentPlayerPatchWrapper::FFTAnalysisOutputBinding' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundInstrumentPlayerPatchWrapper, FFTCPDStartIndex) == 0x000700, "Member 'UFabricMetaSoundInstrumentPlayerPatchWrapper::FFTCPDStartIndex' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundInstrumentPlayerPatchWrapper, FFTLength) == 0x000704, "Member 'UFabricMetaSoundInstrumentPlayerPatchWrapper::FFTLength' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundInstrumentPlayerPatchWrapper, CurrentFusionPatch) == 0x000780, "Member 'UFabricMetaSoundInstrumentPlayerPatchWrapper::CurrentFusionPatch' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundModulatorPatchWrapper
// 0x0030 (0x06D8 - 0x06A8)
class UFabricMetaSoundModulatorPatchWrapper : public UFabricMetaSoundPatchWrapper
{
public:
	class FName                                   IntModulationOutputName;                           // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FloatModulationOutputName;                         // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoolModulationOutputName;                          // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bVisible)> OnPatchWrapperVisibilityChanged;                   // 0x06B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UPlaylistUserOptionBase*                CurrentUserOption;                                 // 0x06C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFabricMetaSoundUserOption*             MetaSoundUserOption;                               // 0x06D0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool ConnectToInput(const struct FFabricMetaSoundNodeInfo& Node, class FName InputName, class FName InputType);
	void SetUserOption(class UPlaylistUserOptionBase* UserOption);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundModulatorPatchWrapper">();
	}
	static class UFabricMetaSoundModulatorPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundModulatorPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundModulatorPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundModulatorPatchWrapper");
static_assert(sizeof(UFabricMetaSoundModulatorPatchWrapper) == 0x0006D8, "Wrong size on UFabricMetaSoundModulatorPatchWrapper");
static_assert(offsetof(UFabricMetaSoundModulatorPatchWrapper, IntModulationOutputName) == 0x0006A8, "Member 'UFabricMetaSoundModulatorPatchWrapper::IntModulationOutputName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundModulatorPatchWrapper, FloatModulationOutputName) == 0x0006AC, "Member 'UFabricMetaSoundModulatorPatchWrapper::FloatModulationOutputName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundModulatorPatchWrapper, BoolModulationOutputName) == 0x0006B0, "Member 'UFabricMetaSoundModulatorPatchWrapper::BoolModulationOutputName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundModulatorPatchWrapper, OnPatchWrapperVisibilityChanged) == 0x0006B8, "Member 'UFabricMetaSoundModulatorPatchWrapper::OnPatchWrapperVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundModulatorPatchWrapper, CurrentUserOption) == 0x0006C8, "Member 'UFabricMetaSoundModulatorPatchWrapper::CurrentUserOption' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundModulatorPatchWrapper, MetaSoundUserOption) == 0x0006D0, "Member 'UFabricMetaSoundModulatorPatchWrapper::MetaSoundUserOption' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundLFOPatchWrapper
// 0x0018 (0x06F0 - 0x06D8)
class UFabricMetaSoundLFOPatchWrapper final : public UFabricMetaSoundModulatorPatchWrapper
{
public:
	class UFabricFloatProviderWave*               LFOFloatProvider;                                  // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FreePhaseStartName;                                // 0x06E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RandomSeedInputName;                               // 0x06E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6E8[0x8];                                      // 0x06E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateRandomSeed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundLFOPatchWrapper">();
	}
	static class UFabricMetaSoundLFOPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundLFOPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundLFOPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundLFOPatchWrapper");
static_assert(sizeof(UFabricMetaSoundLFOPatchWrapper) == 0x0006F0, "Wrong size on UFabricMetaSoundLFOPatchWrapper");
static_assert(offsetof(UFabricMetaSoundLFOPatchWrapper, LFOFloatProvider) == 0x0006D8, "Member 'UFabricMetaSoundLFOPatchWrapper::LFOFloatProvider' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundLFOPatchWrapper, FreePhaseStartName) == 0x0006E0, "Member 'UFabricMetaSoundLFOPatchWrapper::FreePhaseStartName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundLFOPatchWrapper, RandomSeedInputName) == 0x0006E4, "Member 'UFabricMetaSoundLFOPatchWrapper::RandomSeedInputName' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundManagerComponent
// 0x0550 (0x05F0 - 0x00A0)
class UFabricMetaSoundManagerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMetaSoundPatch>         HarmonixMusicProviderPatch;                        // 0x00A8(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFabricMetaSoundUtilityPatches         MidiStreamUtilityPatches;                          // 0x00C8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFabricMetaSoundUtilityPatches         AudioUtilityPatches;                               // 0x0150(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderVolumeName;                           // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderPlayTriggerName;                      // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderRestartTriggerName;                   // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderSeekTriggerName;                      // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderPauseTriggerName;                     // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderContinueTriggerName;                  // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderStopTriggerName;                      // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderTempoName;                            // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderSpeedName;                            // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderRootNoteName;                         // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderScaleName;                            // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderSeekTargetName;                       // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderTimeSigNumName;                       // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MusicProviderTimeSigDenomName;                     // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossfadeSeconds;                                  // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RebuildTimeOutSeconds;                             // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockRateOverride;                                 // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QualityOverride;                                   // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220[0x18];                                     // 0x0220(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float CrossfadeSeconds)> OnMetasoundGeneratorCrossfadeStarted;              // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x78];                                     // 0x0248(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EFabricMetasoundMusicEventPriority MusicEventPriority)> OnMusicEventPriorityChanged;                       // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x10];                                     // 0x02D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFabricSignificanceBasedUpdateBucketRuntime> SignificanceRuntimeBuckets;                        // 0x02E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UFabricSignificanceAsset*               SignificanceBasedUpdate;                           // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InitialCooldownTimeInSeconds;                      // 0x02F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMetaSoundSourceBuilder*                SourceBuilder;                                     // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMusicClockComponent*                   MusicClock;                                        // 0x0308(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAudioComponent*>                PlaybackAudioComponents;                           // 0x0310(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UMetasoundOfflinePlayerComponent*> ServerPlaybackComponents;                          // 0x0320(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TOptional<TWeakObjectPtr<class ABuildingActor>> QueuedStartMetasoundLockDevice;                    // 0x0330(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_33C[0x44];                                     // 0x033C(0x0044)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ABuildingActor>          StartMetasoundLockDevice;                          // 0x0380(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFabricMetaSoundNodeInfo               HarmonixMusicProviderNode;                         // 0x0388(0x00F0)(Transient, NativeAccessSpecifierPrivate)
	struct FMetaSoundBuilderNodeOutputHandle      OnPlayNodeOutput;                                  // 0x0478(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMetaSoundBuilderNodeInputHandle       OnFinishedNodeInput;                               // 0x0498(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMetaSoundBuilderNodeInputHandle> AudioOutNodeInputs;                                // 0x04B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C8[0x38];                                     // 0x04C8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UMetaSoundPatch*, struct FFabricMetaSoundNodePool> FreeMetaSoundNodes;                                // 0x0500(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FFabricLoadedUtilityPatches> UtilityNodeTypesToPatches;                         // 0x0550(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A0[0x10];                                     // 0x05A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bGraphDirty;                                       // 0x05B0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsAudioless;                                      // 0x05B1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasCompletedInitialCooldown;                      // 0x05B2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFabricMetasoundPlayState                     CurrentPlayState;                                  // 0x05B3(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFabricMetasoundPlayState                     PlayStateAfterRebuild;                             // 0x05B4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EJamFabricSyncType                            JamSyncType;                                       // 0x05B5(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFabricMetasoundMusicEventPriority            MusicEventPriority;                                // 0x05B6(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B7[0x1];                                      // 0x05B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClientCurrentAudibleMusicEventGroup;               // 0x05B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           AboveEmotesTag;                                    // 0x05BC(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           BelowEmotesTag;                                    // 0x05C0(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReplicatedReceivedSignalBufferDuration;            // 0x05C4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C8[0x28];                                     // 0x05C8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FName GetMetasoundInputNodeName(class FName NodeName, class FName InputName);
	static class FName GetMetasoundOutputNodeName(class FName NodeName, class FName OutputName);

	void AddInputNodeForNodeByNameBP(struct FFabricMetaSoundNodeInfo& InOutNode, EFabricUserOptionType UserOptionType, const class FName& InputName);
	void AddOutputNodeForOutputVertex(const struct FMetaSoundBuilderNodeOutputHandle& OutputVertex, const class FName& NodeName, class FName* OutOutputName, EMetaSoundBuilderResult* Result);
	void FreeMetaSoundNode(const struct FFabricMetaSoundNodeInfo& Node);
	struct FFabricMetaSoundNodeInfo GetMetaSoundNodeForWrapper(class UFabricMetaSoundPatchWrapper* PatchWrapper);
	void InvalidateMetasoundGeneratorHandle();
	void NotifyGraphChanged();
	void OnGeneratorJustStarted(int32 ComponentIndex);
	bool PauseMetasound();
	bool PlayMetasound(class ABuildingActor* InStartMetasoundLockDevice);
	void RegisterAsAudible(class AActor* Device, const class FName& AudibleEventGroup);
	void SeekToMs(float Ms);
	void SeekToTimestamp(const struct FMusicTimestamp& Timestamp);
	void SetAudioComponents(const TArray<class UAudioComponent*>& AudioComponents);
	void SetCurrentJamSyncType(const EJamFabricSyncType& InJamSyncType);
	void SetMusicClock(class UMusicClockComponent* MusicClockComponent);
	void SetMusicEventPriority(EFabricMetasoundMusicEventPriority InMusicEventPriority);
	void SetMusicKey(EMusicKey Key, EMusicKeyMode Mode);
	void SetSpeed(float Speed);
	void SetTempo(float Tempo);
	void SetTimeSignature(int32 Numerator, int32 Denominator);
	bool StopMetasound(class ABuildingActor* InStartMetasoundLockDevice);
	void UnregisterAsAudible(class AActor* Device);

	bool AreAllPatchesReady() const;
	class UMetaSoundSourceBuilder* GetBuilder() const;
	class FName GetCurrentClientAudibleMusicEventGroup() const;
	EJamFabricSyncType GetCurrentJamSyncType() const;
	struct FGameplayTag GetCurrentMusicEventTag() const;
	class UAudioComponent* GetCurrentPlaybackAudioComponent() const;
	EFabricMetasoundPlayState GetCurrentPlaystate() const;
	class UMusicClockComponent* GetMusicClock() const;
	EFabricMetasoundMusicEventPriority GetMusicEventPriority() const;
	struct FGameplayTag GetMusicEventTag(EFabricMetasoundMusicEventPriority InMusicEventPriority) const;
	bool ShouldSeekToStartOnGameReset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundManagerComponent">();
	}
	static class UFabricMetaSoundManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundManagerComponent>();
	}
};
static_assert(alignof(UFabricMetaSoundManagerComponent) == 0x000008, "Wrong alignment on UFabricMetaSoundManagerComponent");
static_assert(sizeof(UFabricMetaSoundManagerComponent) == 0x0005F0, "Wrong size on UFabricMetaSoundManagerComponent");
static_assert(offsetof(UFabricMetaSoundManagerComponent, HarmonixMusicProviderPatch) == 0x0000A8, "Member 'UFabricMetaSoundManagerComponent::HarmonixMusicProviderPatch' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MidiStreamUtilityPatches) == 0x0000C8, "Member 'UFabricMetaSoundManagerComponent::MidiStreamUtilityPatches' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, AudioUtilityPatches) == 0x000150, "Member 'UFabricMetaSoundManagerComponent::AudioUtilityPatches' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderVolumeName) == 0x0001D8, "Member 'UFabricMetaSoundManagerComponent::MusicProviderVolumeName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderPlayTriggerName) == 0x0001DC, "Member 'UFabricMetaSoundManagerComponent::MusicProviderPlayTriggerName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderRestartTriggerName) == 0x0001E0, "Member 'UFabricMetaSoundManagerComponent::MusicProviderRestartTriggerName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderSeekTriggerName) == 0x0001E4, "Member 'UFabricMetaSoundManagerComponent::MusicProviderSeekTriggerName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderPauseTriggerName) == 0x0001E8, "Member 'UFabricMetaSoundManagerComponent::MusicProviderPauseTriggerName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderContinueTriggerName) == 0x0001EC, "Member 'UFabricMetaSoundManagerComponent::MusicProviderContinueTriggerName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderStopTriggerName) == 0x0001F0, "Member 'UFabricMetaSoundManagerComponent::MusicProviderStopTriggerName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderTempoName) == 0x0001F4, "Member 'UFabricMetaSoundManagerComponent::MusicProviderTempoName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderSpeedName) == 0x0001F8, "Member 'UFabricMetaSoundManagerComponent::MusicProviderSpeedName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderRootNoteName) == 0x0001FC, "Member 'UFabricMetaSoundManagerComponent::MusicProviderRootNoteName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderScaleName) == 0x000200, "Member 'UFabricMetaSoundManagerComponent::MusicProviderScaleName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderSeekTargetName) == 0x000204, "Member 'UFabricMetaSoundManagerComponent::MusicProviderSeekTargetName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderTimeSigNumName) == 0x000208, "Member 'UFabricMetaSoundManagerComponent::MusicProviderTimeSigNumName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicProviderTimeSigDenomName) == 0x00020C, "Member 'UFabricMetaSoundManagerComponent::MusicProviderTimeSigDenomName' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, CrossfadeSeconds) == 0x000210, "Member 'UFabricMetaSoundManagerComponent::CrossfadeSeconds' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, RebuildTimeOutSeconds) == 0x000214, "Member 'UFabricMetaSoundManagerComponent::RebuildTimeOutSeconds' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, BlockRateOverride) == 0x000218, "Member 'UFabricMetaSoundManagerComponent::BlockRateOverride' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, QualityOverride) == 0x00021C, "Member 'UFabricMetaSoundManagerComponent::QualityOverride' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, OnMetasoundGeneratorCrossfadeStarted) == 0x000238, "Member 'UFabricMetaSoundManagerComponent::OnMetasoundGeneratorCrossfadeStarted' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, OnMusicEventPriorityChanged) == 0x0002C0, "Member 'UFabricMetaSoundManagerComponent::OnMusicEventPriorityChanged' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, SignificanceRuntimeBuckets) == 0x0002E0, "Member 'UFabricMetaSoundManagerComponent::SignificanceRuntimeBuckets' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, SignificanceBasedUpdate) == 0x0002F0, "Member 'UFabricMetaSoundManagerComponent::SignificanceBasedUpdate' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, InitialCooldownTimeInSeconds) == 0x0002F8, "Member 'UFabricMetaSoundManagerComponent::InitialCooldownTimeInSeconds' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, SourceBuilder) == 0x000300, "Member 'UFabricMetaSoundManagerComponent::SourceBuilder' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicClock) == 0x000308, "Member 'UFabricMetaSoundManagerComponent::MusicClock' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, PlaybackAudioComponents) == 0x000310, "Member 'UFabricMetaSoundManagerComponent::PlaybackAudioComponents' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, ServerPlaybackComponents) == 0x000320, "Member 'UFabricMetaSoundManagerComponent::ServerPlaybackComponents' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, QueuedStartMetasoundLockDevice) == 0x000330, "Member 'UFabricMetaSoundManagerComponent::QueuedStartMetasoundLockDevice' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, StartMetasoundLockDevice) == 0x000380, "Member 'UFabricMetaSoundManagerComponent::StartMetasoundLockDevice' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, HarmonixMusicProviderNode) == 0x000388, "Member 'UFabricMetaSoundManagerComponent::HarmonixMusicProviderNode' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, OnPlayNodeOutput) == 0x000478, "Member 'UFabricMetaSoundManagerComponent::OnPlayNodeOutput' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, OnFinishedNodeInput) == 0x000498, "Member 'UFabricMetaSoundManagerComponent::OnFinishedNodeInput' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, AudioOutNodeInputs) == 0x0004B8, "Member 'UFabricMetaSoundManagerComponent::AudioOutNodeInputs' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, FreeMetaSoundNodes) == 0x000500, "Member 'UFabricMetaSoundManagerComponent::FreeMetaSoundNodes' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, UtilityNodeTypesToPatches) == 0x000550, "Member 'UFabricMetaSoundManagerComponent::UtilityNodeTypesToPatches' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, bGraphDirty) == 0x0005B0, "Member 'UFabricMetaSoundManagerComponent::bGraphDirty' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, bIsAudioless) == 0x0005B1, "Member 'UFabricMetaSoundManagerComponent::bIsAudioless' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, bHasCompletedInitialCooldown) == 0x0005B2, "Member 'UFabricMetaSoundManagerComponent::bHasCompletedInitialCooldown' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, CurrentPlayState) == 0x0005B3, "Member 'UFabricMetaSoundManagerComponent::CurrentPlayState' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, PlayStateAfterRebuild) == 0x0005B4, "Member 'UFabricMetaSoundManagerComponent::PlayStateAfterRebuild' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, JamSyncType) == 0x0005B5, "Member 'UFabricMetaSoundManagerComponent::JamSyncType' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, MusicEventPriority) == 0x0005B6, "Member 'UFabricMetaSoundManagerComponent::MusicEventPriority' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, ClientCurrentAudibleMusicEventGroup) == 0x0005B8, "Member 'UFabricMetaSoundManagerComponent::ClientCurrentAudibleMusicEventGroup' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, AboveEmotesTag) == 0x0005BC, "Member 'UFabricMetaSoundManagerComponent::AboveEmotesTag' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, BelowEmotesTag) == 0x0005C0, "Member 'UFabricMetaSoundManagerComponent::BelowEmotesTag' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundManagerComponent, ReplicatedReceivedSignalBufferDuration) == 0x0005C4, "Member 'UFabricMetaSoundManagerComponent::ReplicatedReceivedSignalBufferDuration' has a wrong offset!");

// Class FabricRuntime.FabricNoteTriggerPatchWrapper
// 0x0068 (0x0710 - 0x06A8)
class UFabricNoteTriggerPatchWrapper final : public UFabricMetaSoundPatchWrapper
{
public:
	class FName                                   NoteOutputName;                                    // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OctaveParam;                                       // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TriggerNoteParams;                                 // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FMidiEventInfo& MidiEvent, bool bMatchesOctave)> OnAnyMidiEventPassed;                              // 0x06D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FMidiEventInfo& MidiEvent)> OnMatchingMidiEventPassed;                         // 0x06E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F0[0x20];                                     // 0x06F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMetaSoundMidiEventPassed(class FName OutputName, const struct FMetaSoundOutput& Output);
	void OnOctaveChanged(const class FName& ParamName, int32 InOctave);
	void OnTriggerNoteChanged(int32 NoteIndex, bool bTriggerActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricNoteTriggerPatchWrapper">();
	}
	static class UFabricNoteTriggerPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricNoteTriggerPatchWrapper>();
	}
};
static_assert(alignof(UFabricNoteTriggerPatchWrapper) == 0x000008, "Wrong alignment on UFabricNoteTriggerPatchWrapper");
static_assert(sizeof(UFabricNoteTriggerPatchWrapper) == 0x000710, "Wrong size on UFabricNoteTriggerPatchWrapper");
static_assert(offsetof(UFabricNoteTriggerPatchWrapper, NoteOutputName) == 0x0006A8, "Member 'UFabricNoteTriggerPatchWrapper::NoteOutputName' has a wrong offset!");
static_assert(offsetof(UFabricNoteTriggerPatchWrapper, OctaveParam) == 0x0006B0, "Member 'UFabricNoteTriggerPatchWrapper::OctaveParam' has a wrong offset!");
static_assert(offsetof(UFabricNoteTriggerPatchWrapper, TriggerNoteParams) == 0x0006C0, "Member 'UFabricNoteTriggerPatchWrapper::TriggerNoteParams' has a wrong offset!");
static_assert(offsetof(UFabricNoteTriggerPatchWrapper, OnAnyMidiEventPassed) == 0x0006D0, "Member 'UFabricNoteTriggerPatchWrapper::OnAnyMidiEventPassed' has a wrong offset!");
static_assert(offsetof(UFabricNoteTriggerPatchWrapper, OnMatchingMidiEventPassed) == 0x0006E0, "Member 'UFabricNoteTriggerPatchWrapper::OnMatchingMidiEventPassed' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundTreeNode
// 0x0020 (0x0048 - 0x0028)
class UFabricMetaSoundTreeNode final : public UObject
{
public:
	EFabricMetaSoundPinDirection                  PinDirection;                                      // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFabricMetaSoundPatchWrapper*           AssociatedPatchWrapper;                            // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFabricMetaSoundTreeNode*>       Children;                                          // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void ConnectToChildNodes();
	TArray<class UFabricMetaSoundTreeNode*> GetValidChildren();
	void Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundTreeNode">();
	}
	static class UFabricMetaSoundTreeNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundTreeNode>();
	}
};
static_assert(alignof(UFabricMetaSoundTreeNode) == 0x000008, "Wrong alignment on UFabricMetaSoundTreeNode");
static_assert(sizeof(UFabricMetaSoundTreeNode) == 0x000048, "Wrong size on UFabricMetaSoundTreeNode");
static_assert(offsetof(UFabricMetaSoundTreeNode, PinDirection) == 0x000028, "Member 'UFabricMetaSoundTreeNode::PinDirection' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundTreeNode, AssociatedPatchWrapper) == 0x000030, "Member 'UFabricMetaSoundTreeNode::AssociatedPatchWrapper' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundTreeNode, Children) == 0x000038, "Member 'UFabricMetaSoundTreeNode::Children' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundSequencerPatchWrapper
// 0x0008 (0x06B0 - 0x06A8)
class UFabricMetaSoundSequencerPatchWrapper final : public UFabricMetaSoundPatchWrapper
{
public:
	class UMidiStepSequence*                      CurrentStepSequence;                               // 0x06A8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetMidiStepSequence(class UMidiStepSequence* StepSequence);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundSequencerPatchWrapper">();
	}
	static class UFabricMetaSoundSequencerPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundSequencerPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundSequencerPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundSequencerPatchWrapper");
static_assert(sizeof(UFabricMetaSoundSequencerPatchWrapper) == 0x0006B0, "Wrong size on UFabricMetaSoundSequencerPatchWrapper");
static_assert(offsetof(UFabricMetaSoundSequencerPatchWrapper, CurrentStepSequence) == 0x0006A8, "Member 'UFabricMetaSoundSequencerPatchWrapper::CurrentStepSequence' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundSpeakerPatchWrapper
// 0x0030 (0x06D8 - 0x06A8)
class UFabricMetaSoundSpeakerPatchWrapper final : public UFabricMetaSoundPatchWrapper
{
public:
	class FName                                   SpeakerEnabledMetasoundParam;                      // 0x06A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFabricMetaSoundSpeakerPatchWrapperEqBandsBinding> EqBands;                                           // 0x06B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(TArray<struct FFabricMetaSoundSpeakerPatchWrapperEqBandsBinding>& EqBands)> OnFabricMetaSoundSpeakerPatchEqBandUpdate;         // 0x06C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D0[0x8];                                      // 0x06D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAudioBusFromSourceBus(class USoundSourceBus* Bus);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundSpeakerPatchWrapper">();
	}
	static class UFabricMetaSoundSpeakerPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundSpeakerPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundSpeakerPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundSpeakerPatchWrapper");
static_assert(sizeof(UFabricMetaSoundSpeakerPatchWrapper) == 0x0006D8, "Wrong size on UFabricMetaSoundSpeakerPatchWrapper");
static_assert(offsetof(UFabricMetaSoundSpeakerPatchWrapper, SpeakerEnabledMetasoundParam) == 0x0006A8, "Member 'UFabricMetaSoundSpeakerPatchWrapper::SpeakerEnabledMetasoundParam' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundSpeakerPatchWrapper, EqBands) == 0x0006B0, "Member 'UFabricMetaSoundSpeakerPatchWrapper::EqBands' has a wrong offset!");
static_assert(offsetof(UFabricMetaSoundSpeakerPatchWrapper, OnFabricMetaSoundSpeakerPatchEqBandUpdate) == 0x0006C0, "Member 'UFabricMetaSoundSpeakerPatchWrapper::OnFabricMetaSoundSpeakerPatchEqBandUpdate' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundSplitterPatchWrapper
// 0x0058 (0x0700 - 0x06A8)
class UFabricMetaSoundSplitterPatchWrapper final : public UFabricMetaSoundPatchWrapper
{
public:
	uint8                                         Pad_6A8[0x8];                                      // 0x06A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FFabricMetaSoundNodeInfo> SplitterNodes;                                     // 0x06B0(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundSplitterPatchWrapper">();
	}
	static class UFabricMetaSoundSplitterPatchWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundSplitterPatchWrapper>();
	}
};
static_assert(alignof(UFabricMetaSoundSplitterPatchWrapper) == 0x000008, "Wrong alignment on UFabricMetaSoundSplitterPatchWrapper");
static_assert(sizeof(UFabricMetaSoundSplitterPatchWrapper) == 0x000700, "Wrong size on UFabricMetaSoundSplitterPatchWrapper");
static_assert(offsetof(UFabricMetaSoundSplitterPatchWrapper, SplitterNodes) == 0x0006B0, "Member 'UFabricMetaSoundSplitterPatchWrapper::SplitterNodes' has a wrong offset!");

// Class FabricRuntime.FabricMetaSoundTickSubsystem
// 0x0190 (0x0260 - 0x00D0)
class UFabricMetaSoundTickSubsystem final : public UFortManagedTickSubsystem
{
public:
	uint8                                         Pad_D0[0x190];                                     // 0x00D0(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricMetaSoundTickSubsystem">();
	}
	static class UFabricMetaSoundTickSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricMetaSoundTickSubsystem>();
	}
};
static_assert(alignof(UFabricMetaSoundTickSubsystem) == 0x000008, "Wrong alignment on UFabricMetaSoundTickSubsystem");
static_assert(sizeof(UFabricMetaSoundTickSubsystem) == 0x000260, "Wrong size on UFabricMetaSoundTickSubsystem");

// Class FabricRuntime.FabricModulator
// 0x0000 (0x0028 - 0x0028)
class IFabricModulator final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricModulator">();
	}
	static class IFabricModulator* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricModulator>();
	}
};
static_assert(alignof(IFabricModulator) == 0x000008, "Wrong alignment on IFabricModulator");
static_assert(sizeof(IFabricModulator) == 0x000028, "Wrong size on IFabricModulator");

// Class FabricRuntime.FabricModulatorSource
// 0x0000 (0x0028 - 0x0028)
class IFabricModulatorSource final : public IInterface
{
public:
	void GetModulators(class UFabricModulatable* Modulatable);

	class UPlaylistUserOptionBase* GetUserOption(const class FString& Property) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricModulatorSource">();
	}
	static class IFabricModulatorSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricModulatorSource>();
	}
};
static_assert(alignof(IFabricModulatorSource) == 0x000008, "Wrong alignment on IFabricModulatorSource");
static_assert(sizeof(IFabricModulatorSource) == 0x000028, "Wrong size on IFabricModulatorSource");

// Class FabricRuntime.FabricModulatorDevice
// 0x0000 (0x0028 - 0x0028)
class IFabricModulatorDevice final : public IInterface
{
public:
	void SetUserOption(EFabricUserOptionType UserOptionType, class UPlaylistUserOptionBase* UserOption, class UObject* ModulatorObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricModulatorDevice">();
	}
	static class IFabricModulatorDevice* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFabricModulatorDevice>();
	}
};
static_assert(alignof(IFabricModulatorDevice) == 0x000008, "Wrong alignment on IFabricModulatorDevice");
static_assert(sizeof(IFabricModulatorDevice) == 0x000028, "Wrong size on IFabricModulatorDevice");

// Class FabricRuntime.FabricProgressorManager
// 0x0048 (0x00E8 - 0x00A0)
class UFabricProgressorManager final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnGlobalProgressionChanged;                        // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bHasActiveGlobalProgression;                       // 0x00B8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GlobalPresetNumber;                                // 0x00BC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFabricProgressionPreset               GlobalProgression;                                 // 0x00C0(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool IsProgressionGlobal(const struct FFabricProgressionPreset& InProgression);
	void SetGlobalProgression(const struct FFabricProgressionPreset& InProgression, int32 InPresetNumber);

	int32 GetGlobalPresetNumber() const;
	const struct FFabricProgressionPreset GetGlobalProgression() const;
	bool HasActiveGlobalProgression() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricProgressorManager">();
	}
	static class UFabricProgressorManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricProgressorManager>();
	}
};
static_assert(alignof(UFabricProgressorManager) == 0x000008, "Wrong alignment on UFabricProgressorManager");
static_assert(sizeof(UFabricProgressorManager) == 0x0000E8, "Wrong size on UFabricProgressorManager");
static_assert(offsetof(UFabricProgressorManager, OnGlobalProgressionChanged) == 0x0000A8, "Member 'UFabricProgressorManager::OnGlobalProgressionChanged' has a wrong offset!");
static_assert(offsetof(UFabricProgressorManager, bHasActiveGlobalProgression) == 0x0000B8, "Member 'UFabricProgressorManager::bHasActiveGlobalProgression' has a wrong offset!");
static_assert(offsetof(UFabricProgressorManager, GlobalPresetNumber) == 0x0000BC, "Member 'UFabricProgressorManager::GlobalPresetNumber' has a wrong offset!");
static_assert(offsetof(UFabricProgressorManager, GlobalProgression) == 0x0000C0, "Member 'UFabricProgressorManager::GlobalProgression' has a wrong offset!");

// Class FabricRuntime.FabricSteppedPreviewFXComponent
// 0x0060 (0x0A20 - 0x09C0)
class UFabricSteppedPreviewFXComponent : public UInstancedStaticMeshComponent
{
public:
	int32                                         NumberOfSteps;                                     // 0x09B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bManuallySpaceMeshInstances;                       // 0x09BC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlignToTransformCenter;                           // 0x09BD(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9BE[0x2];                                      // 0x09BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CenterAlignmentBounds;                             // 0x09C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DistanceBetweenInstances;                          // 0x09C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DistanceBetweenTripletIntances;                    // 0x09C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DistanceBetweenInstanceSets;                       // 0x09CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DistanceBetweenTripletInstanceSets;                // 0x09D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFabricNoteStyle                              NoteStyle;                                         // 0x09D4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9D5[0x3];                                      // 0x09D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CPDDeviceEnabled;                                  // 0x09D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CPDNumSteps;                                       // 0x09DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PICDNoteOn;                                        // 0x09E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PICDNoteLength;                                    // 0x09E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PICDSpanLength;                                    // 0x09E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PICDNoteTime;                                      // 0x09EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PICDGenericFloatIndex;                             // 0x09F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LengthStepBeats;                                   // 0x09F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StepLengthQuarterNotes;                            // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StepBeatScale;                                     // 0x09FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StepBeatOffset;                                    // 0x0A00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LengthTrackBeats;                                  // 0x0A04(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        InstanceSpace;                                     // 0x0A08(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        InstanceSetSpace;                                  // 0x0A10(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A18[0x8];                                      // 0x0A18(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConstructPreviewVisuals(int32 NumSteps, float StepBeatLength, bool bForceUpdateTransform, bool bInTestNotesOn);
	float GetNoteOn(int32 InstanceIndex);
	void OnBeatOffsetChanged(float BeatOffset);
	void OnBeatScaleChanged(float BeatScale);
	void OnNoteStyleChanged(EFabricNoteStyle style);
	void OnNumStepsChanged(int32 NumSteps);
	void OnNumTracksChanged(int32 NumTracks);
	void OnPageChanged(int32 CurrentPage);
	void OnQuarterNotesLengthChanged(float QuarterNoteLength);
	void SetGenericFloatValue(int32 InstanceIndex, float FloatValue, bool bMarkRenderStateDirty);
	void SetNoteLength(int32 InstanceIndex, float NoteLengthBeats);
	void SetNoteOn(int32 InstanceIndex, float NoteOn, bool bMarkRenderStateDirty);
	void SetNoteTime(int32 InstanceIndex, float NoteTimeOffsetBeats);
	void SetNumSteps(int32 NumSteps);
	void SetSpanLength(int32 InstanceIndex, float SpanLengthBeats);
	void UpdateAllCurrentStepData(int32 NumSteps, float StepLengthBeats);
	void UpdateDeviceEnabledFX(bool bEnabled);
	void UpdateExistingTransforms(int32 NumInstances, int32 NumSteps);
	void UpdateStepData(int32 Index_0, bool bMarkRenderStateDirty);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricSteppedPreviewFXComponent">();
	}
	static class UFabricSteppedPreviewFXComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricSteppedPreviewFXComponent>();
	}
};
static_assert(alignof(UFabricSteppedPreviewFXComponent) == 0x000010, "Wrong alignment on UFabricSteppedPreviewFXComponent");
static_assert(sizeof(UFabricSteppedPreviewFXComponent) == 0x000A20, "Wrong size on UFabricSteppedPreviewFXComponent");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, NumberOfSteps) == 0x0009B8, "Member 'UFabricSteppedPreviewFXComponent::NumberOfSteps' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, bManuallySpaceMeshInstances) == 0x0009BC, "Member 'UFabricSteppedPreviewFXComponent::bManuallySpaceMeshInstances' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, bAlignToTransformCenter) == 0x0009BD, "Member 'UFabricSteppedPreviewFXComponent::bAlignToTransformCenter' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, CenterAlignmentBounds) == 0x0009C0, "Member 'UFabricSteppedPreviewFXComponent::CenterAlignmentBounds' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, DistanceBetweenInstances) == 0x0009C4, "Member 'UFabricSteppedPreviewFXComponent::DistanceBetweenInstances' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, DistanceBetweenTripletIntances) == 0x0009C8, "Member 'UFabricSteppedPreviewFXComponent::DistanceBetweenTripletIntances' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, DistanceBetweenInstanceSets) == 0x0009CC, "Member 'UFabricSteppedPreviewFXComponent::DistanceBetweenInstanceSets' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, DistanceBetweenTripletInstanceSets) == 0x0009D0, "Member 'UFabricSteppedPreviewFXComponent::DistanceBetweenTripletInstanceSets' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, NoteStyle) == 0x0009D4, "Member 'UFabricSteppedPreviewFXComponent::NoteStyle' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, CPDDeviceEnabled) == 0x0009D8, "Member 'UFabricSteppedPreviewFXComponent::CPDDeviceEnabled' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, CPDNumSteps) == 0x0009DC, "Member 'UFabricSteppedPreviewFXComponent::CPDNumSteps' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, PICDNoteOn) == 0x0009E0, "Member 'UFabricSteppedPreviewFXComponent::PICDNoteOn' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, PICDNoteLength) == 0x0009E4, "Member 'UFabricSteppedPreviewFXComponent::PICDNoteLength' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, PICDSpanLength) == 0x0009E8, "Member 'UFabricSteppedPreviewFXComponent::PICDSpanLength' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, PICDNoteTime) == 0x0009EC, "Member 'UFabricSteppedPreviewFXComponent::PICDNoteTime' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, PICDGenericFloatIndex) == 0x0009F0, "Member 'UFabricSteppedPreviewFXComponent::PICDGenericFloatIndex' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, LengthStepBeats) == 0x0009F4, "Member 'UFabricSteppedPreviewFXComponent::LengthStepBeats' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, StepLengthQuarterNotes) == 0x0009F8, "Member 'UFabricSteppedPreviewFXComponent::StepLengthQuarterNotes' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, StepBeatScale) == 0x0009FC, "Member 'UFabricSteppedPreviewFXComponent::StepBeatScale' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, StepBeatOffset) == 0x000A00, "Member 'UFabricSteppedPreviewFXComponent::StepBeatOffset' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, LengthTrackBeats) == 0x000A04, "Member 'UFabricSteppedPreviewFXComponent::LengthTrackBeats' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, InstanceSpace) == 0x000A08, "Member 'UFabricSteppedPreviewFXComponent::InstanceSpace' has a wrong offset!");
static_assert(offsetof(UFabricSteppedPreviewFXComponent, InstanceSetSpace) == 0x000A10, "Member 'UFabricSteppedPreviewFXComponent::InstanceSetSpace' has a wrong offset!");

// Class FabricRuntime.FabricSequencerPreviewFXComponent
// 0x0010 (0x0A30 - 0x0A20)
class UFabricSequencerPreviewFXComponent final : public UFabricSteppedPreviewFXComponent
{
public:
	TWeakObjectPtr<class UFabricStepSequencerComponent> StepSequencer;                                     // 0x0A20(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFabricStepSequencerGridComponent> StepSequencerGrid;                                 // 0x0A28(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void InitializePreviewFXComponent(class UFabricStepSequencerComponent* InStepSequencer, class UFabricStepSequencerGridComponent* InStepSequencerGrid, bool bInTestNotesOn);
	void OnFullTableChanged();
	void OnStepChanged(const struct FFabricSequencerStepChangedInfo& StepInfo);
	void SetSingleTrackNoteOn(int32 InstanceIndex, int32 TrackPICDIndex, float NoteOn, bool bMarkRenderStateDirty);
	void SetSustainLength(int32 InstanceIndex, float SustainLengthBeats);
	void UpdateNoteOn(int32 Index_0, int32 NumSteps, bool bMarkRenderStateDirty);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricSequencerPreviewFXComponent">();
	}
	static class UFabricSequencerPreviewFXComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricSequencerPreviewFXComponent>();
	}
};
static_assert(alignof(UFabricSequencerPreviewFXComponent) == 0x000010, "Wrong alignment on UFabricSequencerPreviewFXComponent");
static_assert(sizeof(UFabricSequencerPreviewFXComponent) == 0x000A30, "Wrong size on UFabricSequencerPreviewFXComponent");
static_assert(offsetof(UFabricSequencerPreviewFXComponent, StepSequencer) == 0x000A20, "Member 'UFabricSequencerPreviewFXComponent::StepSequencer' has a wrong offset!");
static_assert(offsetof(UFabricSequencerPreviewFXComponent, StepSequencerGrid) == 0x000A28, "Member 'UFabricSequencerPreviewFXComponent::StepSequencerGrid' has a wrong offset!");

// Class FabricRuntime.FabricSequencerSustainComponent
// 0x0080 (0x0A40 - 0x09C0)
class UFabricSequencerSustainComponent final : public UInstancedStaticMeshComponent
{
public:
	TMap<struct FIntVector2, int32>               StepToInstanceMapping;                             // 0x09B8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         PICDStartBeat;                                     // 0x0A08(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PICDEndBeat;                                       // 0x0A0C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PICDLoopBeat;                                      // 0x0A10(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CPDDeviceEnabled;                                  // 0x0A14(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GridSquareExtents;                                 // 0x0A18(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SustainInstanceYLocation;                          // 0x0A1C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SustainInstanceYScale;                             // 0x0A20(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SustainInstanceZScale;                             // 0x0A24(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFabricStepSequencerComponent> StepSequencer;                                     // 0x0A28(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFabricStepSequencerGridComponent> StepSequencerGrid;                                 // 0x0A30(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A38[0x8];                                      // 0x0A38(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSustainInstance(int32 StepIndex, int32 TrackIndex);
	float CalculateSustainLength(float NumStepsCoveredBySustain);
	void ConstructSustains();
	void FindAndDeleteInstance(int32 StepIndex, int32 TrackIndex);
	void FindHeadNoteAndUpdateInstance(int32 StepIndex, int32 TrackIndex);
	void InitializeSustainComponent(class UFabricStepSequencerComponent* InStepSequencer, class UFabricStepSequencerGridComponent* InStepSequencerGrid);
	void OnFullTableChanged();
	void OnNumStepsChanged(int32 NumSteps);
	void OnNumTracksChanged(int32 NumTracks);
	void OnPageChanged(int32 CurrentPage);
	void OnStepChanged(const struct FFabricSequencerStepChangedInfo& StepInfo);
	void SetEndBeat(int32 InstanceIndex, float EndBeatValue);
	void SetLoopBeat(int32 InstanceIndex, float LoopBeatValue);
	void SetStartBeat(int32 InstanceIndex, float StartBeatValue);
	void UpdateDeviceEnabledOnSustain(bool bEnabled);
	void UpdatePipsOnGridChanged();
	void UpdateSustainInstance(int32 StepIndex, int32 TrackIndex, int32 PageIndex, bool bEnabled, bool bContinuous, bool bStepChanged);
	void UpdateSustainMaterial(int32 InstanceIndex, int32 HeadNoteStepIndex, int32 TrackIndex);
	void UpdateVisibilityOfInstances();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricSequencerSustainComponent">();
	}
	static class UFabricSequencerSustainComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricSequencerSustainComponent>();
	}
};
static_assert(alignof(UFabricSequencerSustainComponent) == 0x000010, "Wrong alignment on UFabricSequencerSustainComponent");
static_assert(sizeof(UFabricSequencerSustainComponent) == 0x000A40, "Wrong size on UFabricSequencerSustainComponent");
static_assert(offsetof(UFabricSequencerSustainComponent, StepToInstanceMapping) == 0x0009B8, "Member 'UFabricSequencerSustainComponent::StepToInstanceMapping' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, PICDStartBeat) == 0x000A08, "Member 'UFabricSequencerSustainComponent::PICDStartBeat' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, PICDEndBeat) == 0x000A0C, "Member 'UFabricSequencerSustainComponent::PICDEndBeat' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, PICDLoopBeat) == 0x000A10, "Member 'UFabricSequencerSustainComponent::PICDLoopBeat' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, CPDDeviceEnabled) == 0x000A14, "Member 'UFabricSequencerSustainComponent::CPDDeviceEnabled' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, GridSquareExtents) == 0x000A18, "Member 'UFabricSequencerSustainComponent::GridSquareExtents' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, SustainInstanceYLocation) == 0x000A1C, "Member 'UFabricSequencerSustainComponent::SustainInstanceYLocation' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, SustainInstanceYScale) == 0x000A20, "Member 'UFabricSequencerSustainComponent::SustainInstanceYScale' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, SustainInstanceZScale) == 0x000A24, "Member 'UFabricSequencerSustainComponent::SustainInstanceZScale' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, StepSequencer) == 0x000A28, "Member 'UFabricSequencerSustainComponent::StepSequencer' has a wrong offset!");
static_assert(offsetof(UFabricSequencerSustainComponent, StepSequencerGrid) == 0x000A30, "Member 'UFabricSequencerSustainComponent::StepSequencerGrid' has a wrong offset!");

// Class FabricRuntime.FabricSignificanceAsset
// 0x0010 (0x0040 - 0x0030)
class UFabricSignificanceAsset final : public UDataAsset
{
public:
	TArray<struct FFabricSignificanceBasedUpdateBucket> UpdateBuckets;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricSignificanceAsset">();
	}
	static class UFabricSignificanceAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricSignificanceAsset>();
	}
};
static_assert(alignof(UFabricSignificanceAsset) == 0x000008, "Wrong alignment on UFabricSignificanceAsset");
static_assert(sizeof(UFabricSignificanceAsset) == 0x000040, "Wrong size on UFabricSignificanceAsset");
static_assert(offsetof(UFabricSignificanceAsset, UpdateBuckets) == 0x000030, "Member 'UFabricSignificanceAsset::UpdateBuckets' has a wrong offset!");

// Class FabricRuntime.FabricStepSequencerModulatable
// 0x0088 (0x03B0 - 0x0328)
class UFabricStepSequencerModulatable final : public UFabricModulatable
{
public:
	uint8                                         Pad_328[0x80];                                     // 0x0328(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsChromatic;                                      // 0x03A8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bModulationValueChanged;                           // 0x03A9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3AA[0x6];                                      // 0x03AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricStepSequencerModulatable">();
	}
	static class UFabricStepSequencerModulatable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricStepSequencerModulatable>();
	}
};
static_assert(alignof(UFabricStepSequencerModulatable) == 0x000008, "Wrong alignment on UFabricStepSequencerModulatable");
static_assert(sizeof(UFabricStepSequencerModulatable) == 0x0003B0, "Wrong size on UFabricStepSequencerModulatable");
static_assert(offsetof(UFabricStepSequencerModulatable, bIsChromatic) == 0x0003A8, "Member 'UFabricStepSequencerModulatable::bIsChromatic' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerModulatable, bModulationValueChanged) == 0x0003A9, "Member 'UFabricStepSequencerModulatable::bModulationValueChanged' has a wrong offset!");

// Class FabricRuntime.FabricStepSequencerComponent
// 0x0260 (0x0300 - 0x00A0)
class UFabricStepSequencerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 NumTracks)> OnNumTracksChanged;                                // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 NumSteps)> OnNumStepsChanged;                                 // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 CurrentPage)> OnPageChanged;                                     // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float QuarterNotes)> OnQuarterNotesLengthChanged;                       // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float BeatScale)> OnBeatScaleChanged;                                // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float BeatOffset)> OnBeatOffsetChanged;                               // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FFabricSequencerStepChangedInfo& StepInfo)> OnStepChanged;                                     // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EFabricNoteStyle NoteStyle)> OnNoteStyleChanged;                                // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFullTableChanged;                                // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PageIndex)> OnPageCleared;                                     // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLoopEnded;                                       // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 LengthParam;                                       // 0x0158(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DurationParam;                                     // 0x0168(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PageParam;                                         // 0x0178(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 AutoPageParam;                                     // 0x0188(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 OctaveParam;                                       // 0x0198(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 NoteStyleParam;                                    // 0x01A8(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 LoopParam;                                         // 0x01B8(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 AutoPagePlaysBlankPagesParam;                      // 0x01C8(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMonophonic;                                       // 0x01D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportsContinuation;                             // 0x01D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DA[0x2];                                      // 0x01DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepLengthQuarterNotes;                            // 0x01DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StepBeatScale;                                     // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSkipFourthStepInTriplet;                          // 0x01E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFabricNoteStyle                              NoteStyle;                                         // 0x01E5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E6[0x2];                                      // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxSteps;                                          // 0x01E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentSteps;                                      // 0x01EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMatchStepsToTimeSignature;                        // 0x01F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPages;                                          // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentPage;                                       // 0x01F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxTracks;                                         // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentTracks;                                     // 0x0200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LocalInteractionStartTrackIndex;                   // 0x0204(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LocalInteractionStartStepIndex;                    // 0x0208(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoPage;                                         // 0x020C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoPagePlaysBlankPages;                          // 0x020D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLoop;                                             // 0x020E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         RandomizationCommonSampleSize;                     // 0x020F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RandomizationRestSelectionMaxPct;                  // 0x0210(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RandomizationCommonPitchSelectionMaxPct;           // 0x0214(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                     ContinuationControlClass;                          // 0x0218(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStepSequenceTable                     LocalStepTable;                                    // 0x0220(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FFabricStepTablePacked                 PackedStepTable;                                   // 0x0248(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, SaveGame, RepNotify, Protected, NativeAccessSpecifierProtected)
	class UFabricStepSequencerModulatable*        StepSequencerModulatable;                          // 0x0270(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 CachedContinuationControl;                         // 0x0278(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ContinuationRowIndex;                              // 0x0280(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ContinuationStepIndex;                             // 0x0284(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMidiStepSequence*                      MetaSoundMidiStepSequence;                         // 0x0290(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_298[0x68];                                     // 0x0298(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyPage(int32 PageIndex, const struct FStepSequencePage& PageData);
	void ApplyTemplate(const class UMidiStepSequence* Template, int32 StepSequencePageIndex, const bool bUpdateSaveRecord);
	void ClearCurrentPage();
	void ClearPage(int32 Page, const bool bUpdateSaveRecord);
	void GetContinuationFocusIndeces(int32* OutRowIndex, int32* OutStepIndex, int32* OutNumContinuationSteps);
	class UMidiStepSequence* GetMidiStepSequence();
	void OnRep_PackedStepTable();
	void RandomizeCurrentPage();
	void RandomizePage(int32 Page);
	void SetBeatScale(float BeatScale);
	void SetCurrentPage(int32 NewPage);
	void SetLoop(bool bNewLoop);
	void SetMaxSteps(int32 NumSteps);
	void SetMonophonic(bool bNewMonophonic);
	void SetMusicClock(class UMusicClockComponent* InMusicClock);
	void SetNoteForTrack(const struct FMidiNote& Note, int32 Track);
	void SetNoteStyle(EFabricNoteStyle style);
	void SetNumberPages(int32 NumPages);
	void SetNumberSteps(int32 NumSteps);
	void SetNumberTracks(int32 NumTracks);
	void SetPlaying(bool bNewPlaying);
	void SetQuarterNotesLength(float QuarterNotes);
	void SetStepContinuation(int32 Row, int32 Column, bool bIsContinuation);
	void SetStepContinuationOnPage(int32 Page, int32 Row, int32 Column, bool bIsContinuation);
	void SetStepEnabled(int32 Row, int32 Column, bool bState);
	void SetStepEnabledOnPage(int32 Page, int32 Row, int32 Column, bool bState);
	void ToggleStepEnabled(int32 Row, int32 Column);
	void ToggleStepEnabledOnPage(int32 Page, int32 Row, int32 Column);
	void UpdatePackedStepTableSaveRecordIfChanged(const struct FFabricStepTablePacked& InPackedStepTable);

	int32 GetCurrentPage() const;
	float GetLengthStepBeats() const;
	float GetLengthStepQuarterNotes() const;
	float GetLengthTrackBeats() const;
	float GetLengthTrackQuarterNotes() const;
	float GetLongestContinuationLengthForColumn(int32 Column) const;
	float GetLongestContinuationLengthForColumnOnPage(int32 Page, int32 Column) const;
	int32 GetMaxSteps() const;
	int32 GetNumberSteps() const;
	int32 GetNumberTracks() const;
	int32 GetNumUsedSteps(int32 TotalSteps) const;
	void GetPageData(int32 PageIndex, struct FStepSequencePage* OutPageData) const;
	float GetStepContinuationLength(int32 Row, int32 Column) const;
	float GetStepContinuationLengthOnPage(int32 Page, int32 Row, int32 Column) const;
	bool GetStepEnabled(int32 Row, int32 Column) const;
	bool GetStepEnabledOnPage(int32 Page, int32 Row, int32 Column) const;
	bool GetStepIsContinuation(int32 Row, int32 Column) const;
	bool GetStepIsContinuationOnPage(int32 Page, int32 Row, int32 Column) const;
	float GetStepStartBeat(int32 Step) const;
	float GetStepStartQuarterNotes(int32 Step) const;
	bool GetSupportsContinuation() const;
	bool IsPageBlank(int32 PageIndex) const;
	bool IsStepEnabledForAnyTrack(int32 Column) const;
	bool IsStepEnabledForAnyTrackOnPage(int32 Page, int32 Column) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricStepSequencerComponent">();
	}
	static class UFabricStepSequencerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricStepSequencerComponent>();
	}
};
static_assert(alignof(UFabricStepSequencerComponent) == 0x000008, "Wrong alignment on UFabricStepSequencerComponent");
static_assert(sizeof(UFabricStepSequencerComponent) == 0x000300, "Wrong size on UFabricStepSequencerComponent");
static_assert(offsetof(UFabricStepSequencerComponent, OnNumTracksChanged) == 0x0000A8, "Member 'UFabricStepSequencerComponent::OnNumTracksChanged' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnNumStepsChanged) == 0x0000B8, "Member 'UFabricStepSequencerComponent::OnNumStepsChanged' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnPageChanged) == 0x0000C8, "Member 'UFabricStepSequencerComponent::OnPageChanged' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnQuarterNotesLengthChanged) == 0x0000D8, "Member 'UFabricStepSequencerComponent::OnQuarterNotesLengthChanged' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnBeatScaleChanged) == 0x0000E8, "Member 'UFabricStepSequencerComponent::OnBeatScaleChanged' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnBeatOffsetChanged) == 0x0000F8, "Member 'UFabricStepSequencerComponent::OnBeatOffsetChanged' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnStepChanged) == 0x000108, "Member 'UFabricStepSequencerComponent::OnStepChanged' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnNoteStyleChanged) == 0x000118, "Member 'UFabricStepSequencerComponent::OnNoteStyleChanged' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnFullTableChanged) == 0x000128, "Member 'UFabricStepSequencerComponent::OnFullTableChanged' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnPageCleared) == 0x000138, "Member 'UFabricStepSequencerComponent::OnPageCleared' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OnLoopEnded) == 0x000148, "Member 'UFabricStepSequencerComponent::OnLoopEnded' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, LengthParam) == 0x000158, "Member 'UFabricStepSequencerComponent::LengthParam' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, DurationParam) == 0x000168, "Member 'UFabricStepSequencerComponent::DurationParam' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, PageParam) == 0x000178, "Member 'UFabricStepSequencerComponent::PageParam' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, AutoPageParam) == 0x000188, "Member 'UFabricStepSequencerComponent::AutoPageParam' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, OctaveParam) == 0x000198, "Member 'UFabricStepSequencerComponent::OctaveParam' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, NoteStyleParam) == 0x0001A8, "Member 'UFabricStepSequencerComponent::NoteStyleParam' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, LoopParam) == 0x0001B8, "Member 'UFabricStepSequencerComponent::LoopParam' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, AutoPagePlaysBlankPagesParam) == 0x0001C8, "Member 'UFabricStepSequencerComponent::AutoPagePlaysBlankPagesParam' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, bMonophonic) == 0x0001D8, "Member 'UFabricStepSequencerComponent::bMonophonic' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, bSupportsContinuation) == 0x0001D9, "Member 'UFabricStepSequencerComponent::bSupportsContinuation' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, StepLengthQuarterNotes) == 0x0001DC, "Member 'UFabricStepSequencerComponent::StepLengthQuarterNotes' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, StepBeatScale) == 0x0001E0, "Member 'UFabricStepSequencerComponent::StepBeatScale' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, bSkipFourthStepInTriplet) == 0x0001E4, "Member 'UFabricStepSequencerComponent::bSkipFourthStepInTriplet' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, NoteStyle) == 0x0001E5, "Member 'UFabricStepSequencerComponent::NoteStyle' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, MaxSteps) == 0x0001E8, "Member 'UFabricStepSequencerComponent::MaxSteps' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, CurrentSteps) == 0x0001EC, "Member 'UFabricStepSequencerComponent::CurrentSteps' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, bMatchStepsToTimeSignature) == 0x0001F0, "Member 'UFabricStepSequencerComponent::bMatchStepsToTimeSignature' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, MaxPages) == 0x0001F4, "Member 'UFabricStepSequencerComponent::MaxPages' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, CurrentPage) == 0x0001F8, "Member 'UFabricStepSequencerComponent::CurrentPage' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, MaxTracks) == 0x0001FC, "Member 'UFabricStepSequencerComponent::MaxTracks' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, CurrentTracks) == 0x000200, "Member 'UFabricStepSequencerComponent::CurrentTracks' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, LocalInteractionStartTrackIndex) == 0x000204, "Member 'UFabricStepSequencerComponent::LocalInteractionStartTrackIndex' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, LocalInteractionStartStepIndex) == 0x000208, "Member 'UFabricStepSequencerComponent::LocalInteractionStartStepIndex' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, bAutoPage) == 0x00020C, "Member 'UFabricStepSequencerComponent::bAutoPage' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, bAutoPagePlaysBlankPages) == 0x00020D, "Member 'UFabricStepSequencerComponent::bAutoPagePlaysBlankPages' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, bLoop) == 0x00020E, "Member 'UFabricStepSequencerComponent::bLoop' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, RandomizationCommonSampleSize) == 0x00020F, "Member 'UFabricStepSequencerComponent::RandomizationCommonSampleSize' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, RandomizationRestSelectionMaxPct) == 0x000210, "Member 'UFabricStepSequencerComponent::RandomizationRestSelectionMaxPct' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, RandomizationCommonPitchSelectionMaxPct) == 0x000214, "Member 'UFabricStepSequencerComponent::RandomizationCommonPitchSelectionMaxPct' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, ContinuationControlClass) == 0x000218, "Member 'UFabricStepSequencerComponent::ContinuationControlClass' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, LocalStepTable) == 0x000220, "Member 'UFabricStepSequencerComponent::LocalStepTable' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, PackedStepTable) == 0x000248, "Member 'UFabricStepSequencerComponent::PackedStepTable' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, StepSequencerModulatable) == 0x000270, "Member 'UFabricStepSequencerComponent::StepSequencerModulatable' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, CachedContinuationControl) == 0x000278, "Member 'UFabricStepSequencerComponent::CachedContinuationControl' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, ContinuationRowIndex) == 0x000280, "Member 'UFabricStepSequencerComponent::ContinuationRowIndex' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, ContinuationStepIndex) == 0x000284, "Member 'UFabricStepSequencerComponent::ContinuationStepIndex' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerComponent, MetaSoundMidiStepSequence) == 0x000290, "Member 'UFabricStepSequencerComponent::MetaSoundMidiStepSequence' has a wrong offset!");

// Class FabricRuntime.FabricStepSequencerGridComponent
// 0x0070 (0x0290 - 0x0220)
class UFabricStepSequencerGridComponent final : public USceneComponent
{
public:
	struct FVector2D                              GridExtents;                                       // 0x0220(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GridSpacing;                                       // 0x0230(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SingleTrackNumItemsPerRow;                         // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              EditorPreviewGridSize;                             // 0x0248(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFabricStepSequencerGridSquareComponent> GridSquareClass;                                   // 0x0258(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequencerType                                SequencerType;                                     // 0x0260(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActiveTrack;                                       // 0x0264(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFabricStepSequencerComponent*          StepSequencer;                                     // 0x0268(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTrackRow>                      GridRows;                                          // 0x0270(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_280[0x10];                                     // 0x0280(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetGridSquareXPosition(const int32 NumSteps, const int32 StepIndex);
	float GetGridSquareYPosition(const int32 NumRows, const int32 RowIndex);
	bool IsBypassed();
	void NotifyInteractionFocusTargetExternallyChanged(class APlayerController* PlayerController, int32 SourceRowIndex, int32 SourceColumnIndex, int32 FocusRowIndex, int32 FocusColumnIndex, bool bIsFocused);
	void OnBeatOffsetChanged(float BeatOffset);
	void OnBeatScaleChanged(float BeatScale);
	void OnCurrentPageChanged(int32 NewPage);
	void OnFullTableChanged();
	void OnNoteStyleChanged(EFabricNoteStyle style);
	void OnNumStepsChanged(int32 NumSteps);
	void OnNumTracksChanged(int32 NumTracks);
	void OnQuarterNotesLengthChanged(float QuarterNotesLength);
	void OnStepChanged(const struct FFabricSequencerStepChangedInfo& StepInfo);
	void SetActiveTrackIndex(int32 ActiveTrackIndex);
	void SetBypassed(bool bBypassed);
	void SetGridVisible(bool bInGridVisible, bool bForceRefresh);

	struct FVector GetGridSquareExtents(const int32 RowIndex, const int32 ColumnIndex) const;
	struct FVector2D GetGridSquareSize(const int32 NumSteps, const int32 NumRows) const;
	bool IsStepToggledOnForAnyTrack(int32 StepIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricStepSequencerGridComponent">();
	}
	static class UFabricStepSequencerGridComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricStepSequencerGridComponent>();
	}
};
static_assert(alignof(UFabricStepSequencerGridComponent) == 0x000010, "Wrong alignment on UFabricStepSequencerGridComponent");
static_assert(sizeof(UFabricStepSequencerGridComponent) == 0x000290, "Wrong size on UFabricStepSequencerGridComponent");
static_assert(offsetof(UFabricStepSequencerGridComponent, GridExtents) == 0x000220, "Member 'UFabricStepSequencerGridComponent::GridExtents' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridComponent, GridSpacing) == 0x000230, "Member 'UFabricStepSequencerGridComponent::GridSpacing' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridComponent, SingleTrackNumItemsPerRow) == 0x000240, "Member 'UFabricStepSequencerGridComponent::SingleTrackNumItemsPerRow' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridComponent, EditorPreviewGridSize) == 0x000248, "Member 'UFabricStepSequencerGridComponent::EditorPreviewGridSize' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridComponent, GridSquareClass) == 0x000258, "Member 'UFabricStepSequencerGridComponent::GridSquareClass' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridComponent, SequencerType) == 0x000260, "Member 'UFabricStepSequencerGridComponent::SequencerType' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridComponent, ActiveTrack) == 0x000264, "Member 'UFabricStepSequencerGridComponent::ActiveTrack' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridComponent, StepSequencer) == 0x000268, "Member 'UFabricStepSequencerGridComponent::StepSequencer' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridComponent, GridRows) == 0x000270, "Member 'UFabricStepSequencerGridComponent::GridRows' has a wrong offset!");

// Class FabricRuntime.FabricStepSequencerGridSquareComponent
// 0x0060 (0x0620 - 0x05C0)
class UFabricStepSequencerGridSquareComponent final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_5C0[0x10];                                     // 0x05C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ContinuationControlInteractionDelay;               // 0x05D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFabricStepSequencerComponent*          AssignedStepSequencer;                             // 0x05D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ActiveTrack;                                       // 0x05E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AssignedStep;                                      // 0x05E4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PreviousFocusStepIndex;                            // 0x05E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5EC[0x34];                                     // 0x05EC(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnContinuationControl_EndInteraction(class APlayerController* Controller);
	void OnContinuationControl_StartInteraction(class APlayerController* Controller);
	void SetActiveTrack(int32 Track);

	bool CanDoInteractionLogicOnEndInteraction() const;
	bool CanDoInteractionLogicOnStartInteraction() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricStepSequencerGridSquareComponent">();
	}
	static class UFabricStepSequencerGridSquareComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricStepSequencerGridSquareComponent>();
	}
};
static_assert(alignof(UFabricStepSequencerGridSquareComponent) == 0x000010, "Wrong alignment on UFabricStepSequencerGridSquareComponent");
static_assert(sizeof(UFabricStepSequencerGridSquareComponent) == 0x000620, "Wrong size on UFabricStepSequencerGridSquareComponent");
static_assert(offsetof(UFabricStepSequencerGridSquareComponent, ContinuationControlInteractionDelay) == 0x0005D0, "Member 'UFabricStepSequencerGridSquareComponent::ContinuationControlInteractionDelay' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridSquareComponent, AssignedStepSequencer) == 0x0005D8, "Member 'UFabricStepSequencerGridSquareComponent::AssignedStepSequencer' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridSquareComponent, ActiveTrack) == 0x0005E0, "Member 'UFabricStepSequencerGridSquareComponent::ActiveTrack' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridSquareComponent, AssignedStep) == 0x0005E4, "Member 'UFabricStepSequencerGridSquareComponent::AssignedStep' has a wrong offset!");
static_assert(offsetof(UFabricStepSequencerGridSquareComponent, PreviousFocusStepIndex) == 0x0005E8, "Member 'UFabricStepSequencerGridSquareComponent::PreviousFocusStepIndex' has a wrong offset!");

// Class FabricRuntime.FabricTextureModifierBase
// 0x0018 (0x0340 - 0x0328)
class UFabricTextureModifierBase final : public UFabricModulatable
{
public:
	TMulticastInlineDelegate<void(TArray<struct FFabricTextureProviderTexture>& Textures)> OnSourceTexturesChanged;                           // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UTexture*                               ModifiedTexture;                                   // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricTextureModifierBase">();
	}
	static class UFabricTextureModifierBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricTextureModifierBase>();
	}
};
static_assert(alignof(UFabricTextureModifierBase) == 0x000008, "Wrong alignment on UFabricTextureModifierBase");
static_assert(sizeof(UFabricTextureModifierBase) == 0x000340, "Wrong size on UFabricTextureModifierBase");
static_assert(offsetof(UFabricTextureModifierBase, OnSourceTexturesChanged) == 0x000328, "Member 'UFabricTextureModifierBase::OnSourceTexturesChanged' has a wrong offset!");
static_assert(offsetof(UFabricTextureModifierBase, ModifiedTexture) == 0x000338, "Member 'UFabricTextureModifierBase::ModifiedTexture' has a wrong offset!");

// Class FabricRuntime.FabricTextureTreeNode
// 0x0028 (0x0050 - 0x0028)
class UFabricTextureTreeNode final : public UObject
{
public:
	TArray<class UFabricTextureTreeNode*>         Children;                                          // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFabricTextureProviderTexture          Texture;                                           // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void CopyProperties(const class UFabricTextureTreeNode* Other);
	void Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricTextureTreeNode">();
	}
	static class UFabricTextureTreeNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricTextureTreeNode>();
	}
};
static_assert(alignof(UFabricTextureTreeNode) == 0x000008, "Wrong alignment on UFabricTextureTreeNode");
static_assert(sizeof(UFabricTextureTreeNode) == 0x000050, "Wrong size on UFabricTextureTreeNode");
static_assert(offsetof(UFabricTextureTreeNode, Children) == 0x000028, "Member 'UFabricTextureTreeNode::Children' has a wrong offset!");
static_assert(offsetof(UFabricTextureTreeNode, Texture) == 0x000038, "Member 'UFabricTextureTreeNode::Texture' has a wrong offset!");

// Class FabricRuntime.FabricTextureProviderBase
// 0x0038 (0x0060 - 0x0028)
class UFabricTextureProviderBase final : public UObject
{
public:
	TMulticastInlineDelegate<void(struct FFabricTextureProviderTexture& Texture)> OnTextureChanged;                                  // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FFabricTextureProviderTexture          SourceTexture;                                     // 0x0038(0x0018)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         CurrentCableFloatValue;                            // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentCableFloatDirection;                        // 0x0054(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeElapsedSinceLastCableFloatDirty;               // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCurrentCableFloatDirty;                           // 0x005C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSourceTexture(const struct FFabricTextureProviderTexture& InTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricTextureProviderBase">();
	}
	static class UFabricTextureProviderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricTextureProviderBase>();
	}
};
static_assert(alignof(UFabricTextureProviderBase) == 0x000008, "Wrong alignment on UFabricTextureProviderBase");
static_assert(sizeof(UFabricTextureProviderBase) == 0x000060, "Wrong size on UFabricTextureProviderBase");
static_assert(offsetof(UFabricTextureProviderBase, OnTextureChanged) == 0x000028, "Member 'UFabricTextureProviderBase::OnTextureChanged' has a wrong offset!");
static_assert(offsetof(UFabricTextureProviderBase, SourceTexture) == 0x000038, "Member 'UFabricTextureProviderBase::SourceTexture' has a wrong offset!");
static_assert(offsetof(UFabricTextureProviderBase, CurrentCableFloatValue) == 0x000050, "Member 'UFabricTextureProviderBase::CurrentCableFloatValue' has a wrong offset!");
static_assert(offsetof(UFabricTextureProviderBase, CurrentCableFloatDirection) == 0x000054, "Member 'UFabricTextureProviderBase::CurrentCableFloatDirection' has a wrong offset!");
static_assert(offsetof(UFabricTextureProviderBase, TimeElapsedSinceLastCableFloatDirty) == 0x000058, "Member 'UFabricTextureProviderBase::TimeElapsedSinceLastCableFloatDirty' has a wrong offset!");
static_assert(offsetof(UFabricTextureProviderBase, bCurrentCableFloatDirty) == 0x00005C, "Member 'UFabricTextureProviderBase::bCurrentCableFloatDirty' has a wrong offset!");

// Class FabricRuntime.FabricTimelinePreviewComponent
// 0x0018 (0x00B8 - 0x00A0)
class UFabricTimelinePreviewComponent final : public UActorComponent
{
public:
	class UTimelineComponent*                     CurrentTimeline;                                   // 0x00A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PreviewTimeline(class UTimelineComponent* Timeline, float SecondsToPlay, bool bReverseAnimation);

	bool GetShouldPreview() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricTimelinePreviewComponent">();
	}
	static class UFabricTimelinePreviewComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricTimelinePreviewComponent>();
	}
};
static_assert(alignof(UFabricTimelinePreviewComponent) == 0x000008, "Wrong alignment on UFabricTimelinePreviewComponent");
static_assert(sizeof(UFabricTimelinePreviewComponent) == 0x0000B8, "Wrong size on UFabricTimelinePreviewComponent");
static_assert(offsetof(UFabricTimelinePreviewComponent, CurrentTimeline) == 0x0000A0, "Member 'UFabricTimelinePreviewComponent::CurrentTimeline' has a wrong offset!");

// Class FabricRuntime.FabricTimelineSyncComponent
// 0x00C0 (0x0160 - 0x00A0)
class UFabricTimelineSyncComponent final : public UActorComponent
{
public:
	float                                         ThresholdForSeekMS;                                // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThresholdForStartSpeedAdjustMS;                    // 0x00A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThresholdForEndOfSpeedAdjustMS;                    // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedAdjustFactor;                                 // 0x00AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPrintToScreen;                                    // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLogCorrectedServerTimeDelta;                      // 0x00B1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedSyncTimeoutLength;                            // 0x00B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TempoDeltaThrottleSeconds;                         // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFabricMetaSoundManagerComponent*       MetaSoundManager;                                  // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMusicClockComponent*                   MusicClock;                                        // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMidiSongPos                           ServerCurrentSongRenderPos;                        // 0x00D8(0x0040)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct FFabricTimelineSyncServerSongPosition  ServerTimelineSyncServerSongPosition;              // 0x0118(0x001C)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_134[0x2C];                                     // 0x0134(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ServerCurrentSongPos();
	void OnTimelinePlayingChanged(EMusicClockState State);
	void SetFabricMetaSoundManager(class UFabricMetaSoundManagerComponent* InMetaSoundManager);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricTimelineSyncComponent">();
	}
	static class UFabricTimelineSyncComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricTimelineSyncComponent>();
	}
};
static_assert(alignof(UFabricTimelineSyncComponent) == 0x000008, "Wrong alignment on UFabricTimelineSyncComponent");
static_assert(sizeof(UFabricTimelineSyncComponent) == 0x000160, "Wrong size on UFabricTimelineSyncComponent");
static_assert(offsetof(UFabricTimelineSyncComponent, ThresholdForSeekMS) == 0x0000A0, "Member 'UFabricTimelineSyncComponent::ThresholdForSeekMS' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, ThresholdForStartSpeedAdjustMS) == 0x0000A4, "Member 'UFabricTimelineSyncComponent::ThresholdForStartSpeedAdjustMS' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, ThresholdForEndOfSpeedAdjustMS) == 0x0000A8, "Member 'UFabricTimelineSyncComponent::ThresholdForEndOfSpeedAdjustMS' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, SpeedAdjustFactor) == 0x0000AC, "Member 'UFabricTimelineSyncComponent::SpeedAdjustFactor' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, bPrintToScreen) == 0x0000B0, "Member 'UFabricTimelineSyncComponent::bPrintToScreen' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, bLogCorrectedServerTimeDelta) == 0x0000B1, "Member 'UFabricTimelineSyncComponent::bLogCorrectedServerTimeDelta' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, SpeedSyncTimeoutLength) == 0x0000B4, "Member 'UFabricTimelineSyncComponent::SpeedSyncTimeoutLength' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, TempoDeltaThrottleSeconds) == 0x0000B8, "Member 'UFabricTimelineSyncComponent::TempoDeltaThrottleSeconds' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, MetaSoundManager) == 0x0000C0, "Member 'UFabricTimelineSyncComponent::MetaSoundManager' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, MusicClock) == 0x0000C8, "Member 'UFabricTimelineSyncComponent::MusicClock' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, ServerCurrentSongRenderPos) == 0x0000D8, "Member 'UFabricTimelineSyncComponent::ServerCurrentSongRenderPos' has a wrong offset!");
static_assert(offsetof(UFabricTimelineSyncComponent, ServerTimelineSyncServerSongPosition) == 0x000118, "Member 'UFabricTimelineSyncComponent::ServerTimelineSyncServerSongPosition' has a wrong offset!");

// Class FabricRuntime.FabricWaveformTexture
// 0x0050 (0x0078 - 0x0028)
class UFabricWaveformTexture final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaveformNumSamplesHeld;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveformSmoothingDistance;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveformSmoothingFactor;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveformDecayPerSecond;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             WaveformTexture;                                   // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableTextureRequests;                            // 0x0048(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x2F];                                      // 0x0049(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMultipleValuesToWaveformTexture(TArray<float>* Values);
	void AddNewValueToWaveformTexture(float Value);
	void Initialize();

	class UTexture2D* GetWaveformTexture() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FabricWaveformTexture">();
	}
	static class UFabricWaveformTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFabricWaveformTexture>();
	}
};
static_assert(alignof(UFabricWaveformTexture) == 0x000008, "Wrong alignment on UFabricWaveformTexture");
static_assert(sizeof(UFabricWaveformTexture) == 0x000078, "Wrong size on UFabricWaveformTexture");
static_assert(offsetof(UFabricWaveformTexture, WaveformNumSamplesHeld) == 0x000030, "Member 'UFabricWaveformTexture::WaveformNumSamplesHeld' has a wrong offset!");
static_assert(offsetof(UFabricWaveformTexture, WaveformSmoothingDistance) == 0x000034, "Member 'UFabricWaveformTexture::WaveformSmoothingDistance' has a wrong offset!");
static_assert(offsetof(UFabricWaveformTexture, WaveformSmoothingFactor) == 0x000038, "Member 'UFabricWaveformTexture::WaveformSmoothingFactor' has a wrong offset!");
static_assert(offsetof(UFabricWaveformTexture, WaveformDecayPerSecond) == 0x00003C, "Member 'UFabricWaveformTexture::WaveformDecayPerSecond' has a wrong offset!");
static_assert(offsetof(UFabricWaveformTexture, WaveformTexture) == 0x000040, "Member 'UFabricWaveformTexture::WaveformTexture' has a wrong offset!");
static_assert(offsetof(UFabricWaveformTexture, bEnableTextureRequests) == 0x000048, "Member 'UFabricWaveformTexture::bEnableTextureRequests' has a wrong offset!");

}

