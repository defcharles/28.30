#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Buoyancy

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class Buoyancy.BuoyancyEventInterface
// 0x0000 (0x0028 - 0x0028)
class IBuoyancyEventInterface final : public IInterface
{
public:
	void OnSurfaceTouchBegin(class AWaterBody* WaterBodyActor, class UPrimitiveComponent* WaterComponent, class UPrimitiveComponent* SubmergedComponent, float SubmergedVolume, const struct FVector& SubmergedCenterOfMass, const struct FVector& SubmergedVelocity);
	void OnSurfaceTouchEnd(class AWaterBody* WaterBodyActor, class UPrimitiveComponent* WaterComponent, class UPrimitiveComponent* SubmergedComponent, float SubmergedVolume, const struct FVector& SubmergedCenterOfMass, const struct FVector& SubmergedVelocity);
	void OnSurfaceTouching(class AWaterBody* WaterBodyActor, class UPrimitiveComponent* WaterComponent, class UPrimitiveComponent* SubmergedComponent, float SubmergedVolume, const struct FVector& SubmergedCenterOfMass, const struct FVector& SubmergedVelocity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyEventInterface">();
	}
	static class IBuoyancyEventInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBuoyancyEventInterface>();
	}
};
static_assert(alignof(IBuoyancyEventInterface) == 0x000008, "Wrong alignment on IBuoyancyEventInterface");
static_assert(sizeof(IBuoyancyEventInterface) == 0x000028, "Wrong size on IBuoyancyEventInterface");

// Class Buoyancy.BuoyancyRuntimeSettings
// 0x0030 (0x0060 - 0x0030)
class UBuoyancyRuntimeSettings final : public UDeveloperSettings
{
public:
	bool                                          bBuoyancyEnabled;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepFloatingObjectsAwake;                         // 0x0031(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaterDensity;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDrag;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannelForWaterObjects;                   // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumBoundsSubdivisions;                          // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBoundsSubdivisionVol;                           // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SurfaceTouchCallbackFlags;                         // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinVelocityForSurfaceTouchCallback;                // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSplineKeyCacheGrid;                         // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplineKeyCacheGridSize;                            // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SplineKeyCacheLimit;                               // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyRuntimeSettings">();
	}
	static class UBuoyancyRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuoyancyRuntimeSettings>();
	}
};
static_assert(alignof(UBuoyancyRuntimeSettings) == 0x000008, "Wrong alignment on UBuoyancyRuntimeSettings");
static_assert(sizeof(UBuoyancyRuntimeSettings) == 0x000060, "Wrong size on UBuoyancyRuntimeSettings");
static_assert(offsetof(UBuoyancyRuntimeSettings, bBuoyancyEnabled) == 0x000030, "Member 'UBuoyancyRuntimeSettings::bBuoyancyEnabled' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, bKeepFloatingObjectsAwake) == 0x000031, "Member 'UBuoyancyRuntimeSettings::bKeepFloatingObjectsAwake' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, WaterDensity) == 0x000034, "Member 'UBuoyancyRuntimeSettings::WaterDensity' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, WaterDrag) == 0x000038, "Member 'UBuoyancyRuntimeSettings::WaterDrag' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, CollisionChannelForWaterObjects) == 0x00003C, "Member 'UBuoyancyRuntimeSettings::CollisionChannelForWaterObjects' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, MaxNumBoundsSubdivisions) == 0x000040, "Member 'UBuoyancyRuntimeSettings::MaxNumBoundsSubdivisions' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, MinBoundsSubdivisionVol) == 0x000044, "Member 'UBuoyancyRuntimeSettings::MinBoundsSubdivisionVol' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, SurfaceTouchCallbackFlags) == 0x000048, "Member 'UBuoyancyRuntimeSettings::SurfaceTouchCallbackFlags' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, MinVelocityForSurfaceTouchCallback) == 0x00004C, "Member 'UBuoyancyRuntimeSettings::MinVelocityForSurfaceTouchCallback' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, bEnableSplineKeyCacheGrid) == 0x000050, "Member 'UBuoyancyRuntimeSettings::bEnableSplineKeyCacheGrid' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, SplineKeyCacheGridSize) == 0x000054, "Member 'UBuoyancyRuntimeSettings::SplineKeyCacheGridSize' has a wrong offset!");
static_assert(offsetof(UBuoyancyRuntimeSettings, SplineKeyCacheLimit) == 0x000058, "Member 'UBuoyancyRuntimeSettings::SplineKeyCacheLimit' has a wrong offset!");

// Class Buoyancy.BuoyancySubsystem
// 0x0050 (0x0090 - 0x0040)
class UBuoyancySubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x50];                                      // 0x0040(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancySubsystem">();
	}
	static class UBuoyancySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuoyancySubsystem>();
	}
};
static_assert(alignof(UBuoyancySubsystem) == 0x000008, "Wrong alignment on UBuoyancySubsystem");
static_assert(sizeof(UBuoyancySubsystem) == 0x000090, "Wrong size on UBuoyancySubsystem");

}

