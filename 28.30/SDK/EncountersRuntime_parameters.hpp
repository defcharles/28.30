#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EncountersRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "LagerRuntime_structs.hpp"
#include "StateTreeModule_structs.hpp"


namespace SDK::Params
{

// Function EncountersRuntime.EncounterMobManagerComponent.EndMobEncounter
// 0x0004 (0x0004 - 0x0000)
struct EncounterMobManagerComponent_EndMobEncounter final
{
public:
	struct FGameplayTag                           MobIdentifier;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterMobManagerComponent_EndMobEncounter) == 0x000004, "Wrong alignment on EncounterMobManagerComponent_EndMobEncounter");
static_assert(sizeof(EncounterMobManagerComponent_EndMobEncounter) == 0x000004, "Wrong size on EncounterMobManagerComponent_EndMobEncounter");
static_assert(offsetof(EncounterMobManagerComponent_EndMobEncounter, MobIdentifier) == 0x000000, "Member 'EncounterMobManagerComponent_EndMobEncounter::MobIdentifier' has a wrong offset!");

// Function EncountersRuntime.EncounterMobManagerComponent.OnMobActorDied
// 0x0060 (0x0060 - 0x0000)
struct EncounterMobManagerComponent_OnMobActorDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterMobManagerComponent_OnMobActorDied) == 0x000008, "Wrong alignment on EncounterMobManagerComponent_OnMobActorDied");
static_assert(sizeof(EncounterMobManagerComponent_OnMobActorDied) == 0x000060, "Wrong size on EncounterMobManagerComponent_OnMobActorDied");
static_assert(offsetof(EncounterMobManagerComponent_OnMobActorDied, DamagedActor) == 0x000000, "Member 'EncounterMobManagerComponent_OnMobActorDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(EncounterMobManagerComponent_OnMobActorDied, Damage) == 0x000008, "Member 'EncounterMobManagerComponent_OnMobActorDied::Damage' has a wrong offset!");
static_assert(offsetof(EncounterMobManagerComponent_OnMobActorDied, InstigatedBy) == 0x000010, "Member 'EncounterMobManagerComponent_OnMobActorDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(EncounterMobManagerComponent_OnMobActorDied, DamageCauser) == 0x000018, "Member 'EncounterMobManagerComponent_OnMobActorDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(EncounterMobManagerComponent_OnMobActorDied, HitLocation) == 0x000020, "Member 'EncounterMobManagerComponent_OnMobActorDied::HitLocation' has a wrong offset!");
static_assert(offsetof(EncounterMobManagerComponent_OnMobActorDied, HitComponent) == 0x000038, "Member 'EncounterMobManagerComponent_OnMobActorDied::HitComponent' has a wrong offset!");
static_assert(offsetof(EncounterMobManagerComponent_OnMobActorDied, BoneName) == 0x000040, "Member 'EncounterMobManagerComponent_OnMobActorDied::BoneName' has a wrong offset!");
static_assert(offsetof(EncounterMobManagerComponent_OnMobActorDied, Momentum) == 0x000048, "Member 'EncounterMobManagerComponent_OnMobActorDied::Momentum' has a wrong offset!");

// Function EncountersRuntime.EncounterMobManagerComponent.OnMobActorSpawn
// 0x0008 (0x0008 - 0x0000)
struct EncounterMobManagerComponent_OnMobActorSpawn final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterMobManagerComponent_OnMobActorSpawn) == 0x000008, "Wrong alignment on EncounterMobManagerComponent_OnMobActorSpawn");
static_assert(sizeof(EncounterMobManagerComponent_OnMobActorSpawn) == 0x000008, "Wrong size on EncounterMobManagerComponent_OnMobActorSpawn");
static_assert(offsetof(EncounterMobManagerComponent_OnMobActorSpawn, SpawnedActor) == 0x000000, "Member 'EncounterMobManagerComponent_OnMobActorSpawn::SpawnedActor' has a wrong offset!");

// Function EncountersRuntime.EncounterMobManagerComponent.OnMobPawnEndPlay
// 0x0010 (0x0010 - 0x0000)
struct EncounterMobManagerComponent_OnMobPawnEndPlay final
{
public:
	class AActor*                                 Mob;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EncounterMobManagerComponent_OnMobPawnEndPlay) == 0x000008, "Wrong alignment on EncounterMobManagerComponent_OnMobPawnEndPlay");
static_assert(sizeof(EncounterMobManagerComponent_OnMobPawnEndPlay) == 0x000010, "Wrong size on EncounterMobManagerComponent_OnMobPawnEndPlay");
static_assert(offsetof(EncounterMobManagerComponent_OnMobPawnEndPlay, Mob) == 0x000000, "Member 'EncounterMobManagerComponent_OnMobPawnEndPlay::Mob' has a wrong offset!");
static_assert(offsetof(EncounterMobManagerComponent_OnMobPawnEndPlay, EndPlayReason) == 0x000008, "Member 'EncounterMobManagerComponent_OnMobPawnEndPlay::EndPlayReason' has a wrong offset!");

// Function EncountersRuntime.EncounterMobManagerComponent.PauseMobEncounter
// 0x0004 (0x0004 - 0x0000)
struct EncounterMobManagerComponent_PauseMobEncounter final
{
public:
	struct FGameplayTag                           MobIdentifier;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterMobManagerComponent_PauseMobEncounter) == 0x000004, "Wrong alignment on EncounterMobManagerComponent_PauseMobEncounter");
static_assert(sizeof(EncounterMobManagerComponent_PauseMobEncounter) == 0x000004, "Wrong size on EncounterMobManagerComponent_PauseMobEncounter");
static_assert(offsetof(EncounterMobManagerComponent_PauseMobEncounter, MobIdentifier) == 0x000000, "Member 'EncounterMobManagerComponent_PauseMobEncounter::MobIdentifier' has a wrong offset!");

// Function EncountersRuntime.EncounterMobManagerComponent.ResumeMobEncounter
// 0x0004 (0x0004 - 0x0000)
struct EncounterMobManagerComponent_ResumeMobEncounter final
{
public:
	struct FGameplayTag                           MobIdentifier;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterMobManagerComponent_ResumeMobEncounter) == 0x000004, "Wrong alignment on EncounterMobManagerComponent_ResumeMobEncounter");
static_assert(sizeof(EncounterMobManagerComponent_ResumeMobEncounter) == 0x000004, "Wrong size on EncounterMobManagerComponent_ResumeMobEncounter");
static_assert(offsetof(EncounterMobManagerComponent_ResumeMobEncounter, MobIdentifier) == 0x000000, "Member 'EncounterMobManagerComponent_ResumeMobEncounter::MobIdentifier' has a wrong offset!");

// Function EncountersRuntime.EncounterMobManagerComponent.StartMobEncounter
// 0x0008 (0x0008 - 0x0000)
struct EncounterMobManagerComponent_StartMobEncounter final
{
public:
	struct FGameplayTag                           MobIdentifier;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EncounterMobManagerComponent_StartMobEncounter) == 0x000004, "Wrong alignment on EncounterMobManagerComponent_StartMobEncounter");
static_assert(sizeof(EncounterMobManagerComponent_StartMobEncounter) == 0x000008, "Wrong size on EncounterMobManagerComponent_StartMobEncounter");
static_assert(offsetof(EncounterMobManagerComponent_StartMobEncounter, MobIdentifier) == 0x000000, "Member 'EncounterMobManagerComponent_StartMobEncounter::MobIdentifier' has a wrong offset!");
static_assert(offsetof(EncounterMobManagerComponent_StartMobEncounter, ReturnValue) == 0x000004, "Member 'EncounterMobManagerComponent_StartMobEncounter::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.LWMEncounterInstance.OnMobActorDied
// 0x0060 (0x0060 - 0x0000)
struct LWMEncounterInstance_OnMobActorDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LWMEncounterInstance_OnMobActorDied) == 0x000008, "Wrong alignment on LWMEncounterInstance_OnMobActorDied");
static_assert(sizeof(LWMEncounterInstance_OnMobActorDied) == 0x000060, "Wrong size on LWMEncounterInstance_OnMobActorDied");
static_assert(offsetof(LWMEncounterInstance_OnMobActorDied, DamagedActor) == 0x000000, "Member 'LWMEncounterInstance_OnMobActorDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(LWMEncounterInstance_OnMobActorDied, Damage) == 0x000008, "Member 'LWMEncounterInstance_OnMobActorDied::Damage' has a wrong offset!");
static_assert(offsetof(LWMEncounterInstance_OnMobActorDied, InstigatedBy) == 0x000010, "Member 'LWMEncounterInstance_OnMobActorDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(LWMEncounterInstance_OnMobActorDied, DamageCauser) == 0x000018, "Member 'LWMEncounterInstance_OnMobActorDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(LWMEncounterInstance_OnMobActorDied, HitLocation) == 0x000020, "Member 'LWMEncounterInstance_OnMobActorDied::HitLocation' has a wrong offset!");
static_assert(offsetof(LWMEncounterInstance_OnMobActorDied, HitComponent) == 0x000038, "Member 'LWMEncounterInstance_OnMobActorDied::HitComponent' has a wrong offset!");
static_assert(offsetof(LWMEncounterInstance_OnMobActorDied, BoneName) == 0x000040, "Member 'LWMEncounterInstance_OnMobActorDied::BoneName' has a wrong offset!");
static_assert(offsetof(LWMEncounterInstance_OnMobActorDied, Momentum) == 0x000048, "Member 'LWMEncounterInstance_OnMobActorDied::Momentum' has a wrong offset!");

// Function EncountersRuntime.LWMEncounterInstance.OnMobActorSpawn
// 0x0008 (0x0008 - 0x0000)
struct LWMEncounterInstance_OnMobActorSpawn final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LWMEncounterInstance_OnMobActorSpawn) == 0x000008, "Wrong alignment on LWMEncounterInstance_OnMobActorSpawn");
static_assert(sizeof(LWMEncounterInstance_OnMobActorSpawn) == 0x000008, "Wrong size on LWMEncounterInstance_OnMobActorSpawn");
static_assert(offsetof(LWMEncounterInstance_OnMobActorSpawn, SpawnedActor) == 0x000000, "Member 'LWMEncounterInstance_OnMobActorSpawn::SpawnedActor' has a wrong offset!");

// Function EncountersRuntime.LWMEncounterInstance.OnMobPawnEndPlay
// 0x0010 (0x0010 - 0x0000)
struct LWMEncounterInstance_OnMobPawnEndPlay final
{
public:
	class AActor*                                 Mob;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LWMEncounterInstance_OnMobPawnEndPlay) == 0x000008, "Wrong alignment on LWMEncounterInstance_OnMobPawnEndPlay");
static_assert(sizeof(LWMEncounterInstance_OnMobPawnEndPlay) == 0x000010, "Wrong size on LWMEncounterInstance_OnMobPawnEndPlay");
static_assert(offsetof(LWMEncounterInstance_OnMobPawnEndPlay, Mob) == 0x000000, "Member 'LWMEncounterInstance_OnMobPawnEndPlay::Mob' has a wrong offset!");
static_assert(offsetof(LWMEncounterInstance_OnMobPawnEndPlay, EndPlayReason) == 0x000008, "Member 'LWMEncounterInstance_OnMobPawnEndPlay::EndPlayReason' has a wrong offset!");

// Function EncountersRuntime.EncounterBlueprintLibrary.GetRelevantMobManagerComponentForActor
// 0x0010 (0x0010 - 0x0000)
struct EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEncounterMobManagerComponent*          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor) == 0x000008, "Wrong alignment on EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor");
static_assert(sizeof(EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor) == 0x000010, "Wrong size on EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor");
static_assert(offsetof(EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor, Actor) == 0x000000, "Member 'EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor::Actor' has a wrong offset!");
static_assert(offsetof(EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor, ReturnValue) == 0x000008, "Member 'EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterGameplayVolume.IsDoneCleaningUp
// 0x0001 (0x0001 - 0x0000)
struct EncounterGameplayVolume_IsDoneCleaningUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterGameplayVolume_IsDoneCleaningUp) == 0x000001, "Wrong alignment on EncounterGameplayVolume_IsDoneCleaningUp");
static_assert(sizeof(EncounterGameplayVolume_IsDoneCleaningUp) == 0x000001, "Wrong size on EncounterGameplayVolume_IsDoneCleaningUp");
static_assert(offsetof(EncounterGameplayVolume_IsDoneCleaningUp, ReturnValue) == 0x000000, "Member 'EncounterGameplayVolume_IsDoneCleaningUp::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.AddExplicitContributor
// 0x0008 (0x0008 - 0x0000)
struct EncounterManagerComponent_AddExplicitContributor final
{
public:
	class AFortPlayerController*                  Contributor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_AddExplicitContributor) == 0x000008, "Wrong alignment on EncounterManagerComponent_AddExplicitContributor");
static_assert(sizeof(EncounterManagerComponent_AddExplicitContributor) == 0x000008, "Wrong size on EncounterManagerComponent_AddExplicitContributor");
static_assert(offsetof(EncounterManagerComponent_AddExplicitContributor, Contributor) == 0x000000, "Member 'EncounterManagerComponent_AddExplicitContributor::Contributor' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.HandleEncounterFailure
// 0x0004 (0x0004 - 0x0000)
struct EncounterManagerComponent_HandleEncounterFailure final
{
public:
	int32                                         RewardIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_HandleEncounterFailure) == 0x000004, "Wrong alignment on EncounterManagerComponent_HandleEncounterFailure");
static_assert(sizeof(EncounterManagerComponent_HandleEncounterFailure) == 0x000004, "Wrong size on EncounterManagerComponent_HandleEncounterFailure");
static_assert(offsetof(EncounterManagerComponent_HandleEncounterFailure, RewardIndex) == 0x000000, "Member 'EncounterManagerComponent_HandleEncounterFailure::RewardIndex' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.HandleEncounterSuccess
// 0x0004 (0x0004 - 0x0000)
struct EncounterManagerComponent_HandleEncounterSuccess final
{
public:
	int32                                         RewardIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_HandleEncounterSuccess) == 0x000004, "Wrong alignment on EncounterManagerComponent_HandleEncounterSuccess");
static_assert(sizeof(EncounterManagerComponent_HandleEncounterSuccess) == 0x000004, "Wrong size on EncounterManagerComponent_HandleEncounterSuccess");
static_assert(offsetof(EncounterManagerComponent_HandleEncounterSuccess, RewardIndex) == 0x000000, "Member 'EncounterManagerComponent_HandleEncounterSuccess::RewardIndex' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.OnStateTreeStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct EncounterManagerComponent_OnStateTreeStatusChanged final
{
public:
	EStateTreeRunStatus                           Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_OnStateTreeStatusChanged) == 0x000001, "Wrong alignment on EncounterManagerComponent_OnStateTreeStatusChanged");
static_assert(sizeof(EncounterManagerComponent_OnStateTreeStatusChanged) == 0x000001, "Wrong size on EncounterManagerComponent_OnStateTreeStatusChanged");
static_assert(offsetof(EncounterManagerComponent_OnStateTreeStatusChanged, Status) == 0x000000, "Member 'EncounterManagerComponent_OnStateTreeStatusChanged::Status' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.RemoveExplicitContributor
// 0x0008 (0x0008 - 0x0000)
struct EncounterManagerComponent_RemoveExplicitContributor final
{
public:
	class AFortPlayerController*                  Contributor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_RemoveExplicitContributor) == 0x000008, "Wrong alignment on EncounterManagerComponent_RemoveExplicitContributor");
static_assert(sizeof(EncounterManagerComponent_RemoveExplicitContributor) == 0x000008, "Wrong size on EncounterManagerComponent_RemoveExplicitContributor");
static_assert(offsetof(EncounterManagerComponent_RemoveExplicitContributor, Contributor) == 0x000000, "Member 'EncounterManagerComponent_RemoveExplicitContributor::Contributor' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.SetPersistentValue
// 0x0008 (0x0008 - 0x0000)
struct EncounterManagerComponent_SetPersistentValue final
{
public:
	struct FGameplayTag                           Identifier;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_SetPersistentValue) == 0x000004, "Wrong alignment on EncounterManagerComponent_SetPersistentValue");
static_assert(sizeof(EncounterManagerComponent_SetPersistentValue) == 0x000008, "Wrong size on EncounterManagerComponent_SetPersistentValue");
static_assert(offsetof(EncounterManagerComponent_SetPersistentValue, Identifier) == 0x000000, "Member 'EncounterManagerComponent_SetPersistentValue::Identifier' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_SetPersistentValue, Value) == 0x000004, "Member 'EncounterManagerComponent_SetPersistentValue::Value' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetPersistentValue
// 0x0008 (0x0008 - 0x0000)
struct EncounterManagerComponent_GetPersistentValue final
{
public:
	struct FGameplayTag                           Identifier;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetPersistentValue) == 0x000004, "Wrong alignment on EncounterManagerComponent_GetPersistentValue");
static_assert(sizeof(EncounterManagerComponent_GetPersistentValue) == 0x000008, "Wrong size on EncounterManagerComponent_GetPersistentValue");
static_assert(offsetof(EncounterManagerComponent_GetPersistentValue, Identifier) == 0x000000, "Member 'EncounterManagerComponent_GetPersistentValue::Identifier' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetPersistentValue, ReturnValue) == 0x000004, "Member 'EncounterManagerComponent_GetPersistentValue::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_ActorClass
// 0x0028 (0x0028 - 0x0000)
struct EncounterManagerComponent_GetVariable_ActorClass final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetVariable_ActorClass) == 0x000008, "Wrong alignment on EncounterManagerComponent_GetVariable_ActorClass");
static_assert(sizeof(EncounterManagerComponent_GetVariable_ActorClass) == 0x000028, "Wrong size on EncounterManagerComponent_GetVariable_ActorClass");
static_assert(offsetof(EncounterManagerComponent_GetVariable_ActorClass, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_ActorClass::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_ActorClass, ReturnValue) == 0x000008, "Member 'EncounterManagerComponent_GetVariable_ActorClass::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_ActorDescription
// 0x0018 (0x0018 - 0x0000)
struct EncounterManagerComponent_GetVariable_ActorDescription final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription> ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetVariable_ActorDescription) == 0x000008, "Wrong alignment on EncounterManagerComponent_GetVariable_ActorDescription");
static_assert(sizeof(EncounterManagerComponent_GetVariable_ActorDescription) == 0x000018, "Wrong size on EncounterManagerComponent_GetVariable_ActorDescription");
static_assert(offsetof(EncounterManagerComponent_GetVariable_ActorDescription, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_ActorDescription::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_ActorDescription, ReturnValue) == 0x000008, "Member 'EncounterManagerComponent_GetVariable_ActorDescription::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_Bool
// 0x0008 (0x0008 - 0x0000)
struct EncounterManagerComponent_GetVariable_Bool final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EncounterManagerComponent_GetVariable_Bool) == 0x000004, "Wrong alignment on EncounterManagerComponent_GetVariable_Bool");
static_assert(sizeof(EncounterManagerComponent_GetVariable_Bool) == 0x000008, "Wrong size on EncounterManagerComponent_GetVariable_Bool");
static_assert(offsetof(EncounterManagerComponent_GetVariable_Bool, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_Bool::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_Bool, ReturnValue) == 0x000004, "Member 'EncounterManagerComponent_GetVariable_Bool::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_Float
// 0x0008 (0x0008 - 0x0000)
struct EncounterManagerComponent_GetVariable_Float final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetVariable_Float) == 0x000004, "Wrong alignment on EncounterManagerComponent_GetVariable_Float");
static_assert(sizeof(EncounterManagerComponent_GetVariable_Float) == 0x000008, "Wrong size on EncounterManagerComponent_GetVariable_Float");
static_assert(offsetof(EncounterManagerComponent_GetVariable_Float, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_Float::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_Float, ReturnValue) == 0x000004, "Member 'EncounterManagerComponent_GetVariable_Float::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_GameplayTag
// 0x0008 (0x0008 - 0x0000)
struct EncounterManagerComponent_GetVariable_GameplayTag final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetVariable_GameplayTag) == 0x000004, "Wrong alignment on EncounterManagerComponent_GetVariable_GameplayTag");
static_assert(sizeof(EncounterManagerComponent_GetVariable_GameplayTag) == 0x000008, "Wrong size on EncounterManagerComponent_GetVariable_GameplayTag");
static_assert(offsetof(EncounterManagerComponent_GetVariable_GameplayTag, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_GameplayTag::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_GameplayTag, ReturnValue) == 0x000004, "Member 'EncounterManagerComponent_GetVariable_GameplayTag::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_GameplayTagContainer
// 0x0028 (0x0028 - 0x0000)
struct EncounterManagerComponent_GetVariable_GameplayTagContainer final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetVariable_GameplayTagContainer) == 0x000008, "Wrong alignment on EncounterManagerComponent_GetVariable_GameplayTagContainer");
static_assert(sizeof(EncounterManagerComponent_GetVariable_GameplayTagContainer) == 0x000028, "Wrong size on EncounterManagerComponent_GetVariable_GameplayTagContainer");
static_assert(offsetof(EncounterManagerComponent_GetVariable_GameplayTagContainer, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_GameplayTagContainer::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_GameplayTagContainer, ReturnValue) == 0x000008, "Member 'EncounterManagerComponent_GetVariable_GameplayTagContainer::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_Int
// 0x0008 (0x0008 - 0x0000)
struct EncounterManagerComponent_GetVariable_Int final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetVariable_Int) == 0x000004, "Wrong alignment on EncounterManagerComponent_GetVariable_Int");
static_assert(sizeof(EncounterManagerComponent_GetVariable_Int) == 0x000008, "Wrong size on EncounterManagerComponent_GetVariable_Int");
static_assert(offsetof(EncounterManagerComponent_GetVariable_Int, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_Int::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_Int, ReturnValue) == 0x000004, "Member 'EncounterManagerComponent_GetVariable_Int::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_ItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct EncounterManagerComponent_GetVariable_ItemDefinition final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortWorldItemDefinition*         ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetVariable_ItemDefinition) == 0x000008, "Wrong alignment on EncounterManagerComponent_GetVariable_ItemDefinition");
static_assert(sizeof(EncounterManagerComponent_GetVariable_ItemDefinition) == 0x000010, "Wrong size on EncounterManagerComponent_GetVariable_ItemDefinition");
static_assert(offsetof(EncounterManagerComponent_GetVariable_ItemDefinition, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_ItemDefinition::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_ItemDefinition, ReturnValue) == 0x000008, "Member 'EncounterManagerComponent_GetVariable_ItemDefinition::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_LWMEncounter
// 0x0010 (0x0010 - 0x0000)
struct EncounterManagerComponent_GetVariable_LWMEncounter final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortAthenaLivingWorldEncounter*  ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetVariable_LWMEncounter) == 0x000008, "Wrong alignment on EncounterManagerComponent_GetVariable_LWMEncounter");
static_assert(sizeof(EncounterManagerComponent_GetVariable_LWMEncounter) == 0x000010, "Wrong size on EncounterManagerComponent_GetVariable_LWMEncounter");
static_assert(offsetof(EncounterManagerComponent_GetVariable_LWMEncounter, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_LWMEncounter::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_LWMEncounter, ReturnValue) == 0x000008, "Member 'EncounterManagerComponent_GetVariable_LWMEncounter::ReturnValue' has a wrong offset!");

// Function EncountersRuntime.EncounterManagerComponent.GetVariable_TagQuery
// 0x0050 (0x0050 - 0x0000)
struct EncounterManagerComponent_GetVariable_TagQuery final
{
public:
	struct FGameplayTag                           VarName;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      ReturnValue;                                       // 0x0008(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EncounterManagerComponent_GetVariable_TagQuery) == 0x000008, "Wrong alignment on EncounterManagerComponent_GetVariable_TagQuery");
static_assert(sizeof(EncounterManagerComponent_GetVariable_TagQuery) == 0x000050, "Wrong size on EncounterManagerComponent_GetVariable_TagQuery");
static_assert(offsetof(EncounterManagerComponent_GetVariable_TagQuery, VarName) == 0x000000, "Member 'EncounterManagerComponent_GetVariable_TagQuery::VarName' has a wrong offset!");
static_assert(offsetof(EncounterManagerComponent_GetVariable_TagQuery, ReturnValue) == 0x000008, "Member 'EncounterManagerComponent_GetVariable_TagQuery::ReturnValue' has a wrong offset!");

}

