#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LinedNotebook_RewardDetails

#include "Basic.hpp"

#include "WBP_LinedNotebook_RewardDetails_classes.hpp"
#include "WBP_LinedNotebook_RewardDetails_parameters.hpp"


namespace SDK
{

// Function WBP_LinedNotebook_RewardDetails.WBP_LinedNotebook_RewardDetails_C.ExecuteUbergraph_WBP_LinedNotebook_RewardDetails
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_LinedNotebook_RewardDetails_C::ExecuteUbergraph_WBP_LinedNotebook_RewardDetails(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ExecuteUbergraph_WBP_LinedNotebook_RewardDetails");

	Params::WBP_LinedNotebook_RewardDetails_C_ExecuteUbergraph_WBP_LinedNotebook_RewardDetails Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_LinedNotebook_RewardDetails.WBP_LinedNotebook_RewardDetails_C.FormatRewardNames
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FText>                     RewardNames                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             FormattedText                                          (Parm, OutParm)

void UWBP_LinedNotebook_RewardDetails_C::FormatRewardNames(TArray<class FText>& RewardNames, class FText* FormattedText)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FormatRewardNames");

	Params::WBP_LinedNotebook_RewardDetails_C_FormatRewardNames Parms{};

	Parms.RewardNames = std::move(RewardNames);

	UObject::ProcessEvent(Func, &Parms);

	RewardNames = std::move(Parms.RewardNames);

	if (FormattedText != nullptr)
		*FormattedText = std::move(Parms.FormattedText);
}


// Function WBP_LinedNotebook_RewardDetails.WBP_LinedNotebook_RewardDetails_C.InitializeEventScreenData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortEventScreenData*             EventScreenData                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_LinedNotebook_RewardDetails_C::InitializeEventScreenData(const class UFortEventScreenData* EventScreenData)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InitializeEventScreenData");

	Params::WBP_LinedNotebook_RewardDetails_C_InitializeEventScreenData Parms{};

	Parms.EventScreenData = EventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_LinedNotebook_RewardDetails.WBP_LinedNotebook_RewardDetails_C.OnModuleInitialized
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UFortEventScreenData*             InEventScreenData                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_LinedNotebook_RewardDetails_C::OnModuleInitialized(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnModuleInitialized");

	Params::WBP_LinedNotebook_RewardDetails_C_OnModuleInitialized Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_LinedNotebook_RewardDetails.WBP_LinedNotebook_RewardDetails_C.OnPopulateCompletedReward
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FText>                     RewardNames                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_LinedNotebook_RewardDetails_C::OnPopulateCompletedReward(const TArray<class FText>& RewardNames)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPopulateCompletedReward");

	Params::WBP_LinedNotebook_RewardDetails_C_OnPopulateCompletedReward Parms{};

	Parms.RewardNames = std::move(RewardNames);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_LinedNotebook_RewardDetails.WBP_LinedNotebook_RewardDetails_C.OnPopulateNextRewardDetails
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class FText>                     RewardNames                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   ResourceNeeded                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_LinedNotebook_RewardDetails_C::OnPopulateNextRewardDetails(const TArray<class FText>& RewardNames, const int32 ResourceNeeded)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPopulateNextRewardDetails");

	Params::WBP_LinedNotebook_RewardDetails_C_OnPopulateNextRewardDetails Parms{};

	Parms.RewardNames = std::move(RewardNames);
	Parms.ResourceNeeded = ResourceNeeded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_LinedNotebook_RewardDetails.WBP_LinedNotebook_RewardDetails_C.Populate Completed Reward
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     RewardNames                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_LinedNotebook_RewardDetails_C::Populate_Completed_Reward(TArray<class FText>& RewardNames)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Populate Completed Reward");

	Params::WBP_LinedNotebook_RewardDetails_C_Populate_Completed_Reward Parms{};

	Parms.RewardNames = std::move(RewardNames);

	UObject::ProcessEvent(Func, &Parms);

	RewardNames = std::move(Parms.RewardNames);
}


// Function WBP_LinedNotebook_RewardDetails.WBP_LinedNotebook_RewardDetails_C.PopulateNextRewardDetails
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     RewardNames                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   ResourceNeeded                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_LinedNotebook_RewardDetails_C::PopulateNextRewardDetails(TArray<class FText>& RewardNames, int32 ResourceNeeded)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PopulateNextRewardDetails");

	Params::WBP_LinedNotebook_RewardDetails_C_PopulateNextRewardDetails Parms{};

	Parms.RewardNames = std::move(RewardNames);
	Parms.ResourceNeeded = ResourceNeeded;

	UObject::ProcessEvent(Func, &Parms);

	RewardNames = std::move(Parms.RewardNames);
}

}

