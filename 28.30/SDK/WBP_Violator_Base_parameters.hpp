#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Violator_Base

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function WBP_Violator_Base.WBP_Violator_Base_C.ExecuteUbergraph_WBP_Violator_Base
// 0x0058 (0x0058 - 0x0000)
struct WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_2;       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue_1;         // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue_1;               // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base) == 0x000008, "Wrong alignment on WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base");
static_assert(sizeof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base) == 0x000058, "Wrong size on WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, EntryPoint) == 0x000000, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_PlayAnimationForward_ReturnValue) == 0x000010, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000018, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, K2Node_Event_IsDesignTime) == 0x000020, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_PlayAnimationForward_ReturnValue_2) == 0x000028, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_PlayAnimationForward_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000030, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_IsAnimationPlaying_ReturnValue_1) == 0x000031, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_IsAnimationPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_SpawnSound2D_ReturnValue) == 0x000038, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_SpawnSound2D_ReturnValue_1) == 0x000040, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_SpawnSound2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_GetEndTime_ReturnValue) == 0x000048, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'WBP_Violator_Base_C_ExecuteUbergraph_WBP_Violator_Base::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_Violator_Base.WBP_Violator_Base_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Violator_Base_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Violator_Base_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Violator_Base_C_PreConstruct");
static_assert(sizeof(WBP_Violator_Base_C_PreConstruct) == 0x000001, "Wrong size on WBP_Violator_Base_C_PreConstruct");
static_assert(offsetof(WBP_Violator_Base_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Violator_Base_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Violator_Base.WBP_Violator_Base_C.Set Violator Intensity
// 0x0080 (0x0080 - 0x0000)
struct WBP_Violator_Base_C_Set_Violator_Intensity final
{
public:
	EViolatorIntensity                            ViolatorIntensity;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViolatorIntensity                            Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViolatorIntensity                            Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EViolatorIntensity                            Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x0010(0x0014)()
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_Select_Default_2;                           // 0x0028(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(WBP_Violator_Base_C_Set_Violator_Intensity) == 0x000008, "Wrong alignment on WBP_Violator_Base_C_Set_Violator_Intensity");
static_assert(sizeof(WBP_Violator_Base_C_Set_Violator_Intensity) == 0x000080, "Wrong size on WBP_Violator_Base_C_Set_Violator_Intensity");
static_assert(offsetof(WBP_Violator_Base_C_Set_Violator_Intensity, ViolatorIntensity) == 0x000000, "Member 'WBP_Violator_Base_C_Set_Violator_Intensity::ViolatorIntensity' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_Set_Violator_Intensity, Temp_byte_Variable) == 0x000001, "Member 'WBP_Violator_Base_C_Set_Violator_Intensity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_Set_Violator_Intensity, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_Violator_Base_C_Set_Violator_Intensity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_Set_Violator_Intensity, Temp_byte_Variable_2) == 0x000003, "Member 'WBP_Violator_Base_C_Set_Violator_Intensity::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_Set_Violator_Intensity, K2Node_Select_Default) == 0x000008, "Member 'WBP_Violator_Base_C_Set_Violator_Intensity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_Set_Violator_Intensity, K2Node_Select_Default_1) == 0x000010, "Member 'WBP_Violator_Base_C_Set_Violator_Intensity::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_Set_Violator_Intensity, K2Node_Select_Default_2) == 0x000028, "Member 'WBP_Violator_Base_C_Set_Violator_Intensity::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_Violator_Base.WBP_Violator_Base_C.SetSizeBox
// 0x0008 (0x0008 - 0x0000)
struct WBP_Violator_Base_C_SetSizeBox final
{
public:
	float                                         HeightOverride;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDesiredWidth;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Violator_Base_C_SetSizeBox) == 0x000004, "Wrong alignment on WBP_Violator_Base_C_SetSizeBox");
static_assert(sizeof(WBP_Violator_Base_C_SetSizeBox) == 0x000008, "Wrong size on WBP_Violator_Base_C_SetSizeBox");
static_assert(offsetof(WBP_Violator_Base_C_SetSizeBox, HeightOverride) == 0x000000, "Member 'WBP_Violator_Base_C_SetSizeBox::HeightOverride' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_SetSizeBox, MaxDesiredWidth) == 0x000004, "Member 'WBP_Violator_Base_C_SetSizeBox::MaxDesiredWidth' has a wrong offset!");

// Function WBP_Violator_Base.WBP_Violator_Base_C.SetViolatorText
// 0x0020 (0x0020 - 0x0000)
struct WBP_Violator_Base_C_SetViolatorText final
{
public:
	class FText                                   Text_0;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Violator_Base_C_SetViolatorText) == 0x000008, "Wrong alignment on WBP_Violator_Base_C_SetViolatorText");
static_assert(sizeof(WBP_Violator_Base_C_SetViolatorText) == 0x000020, "Wrong size on WBP_Violator_Base_C_SetViolatorText");
static_assert(offsetof(WBP_Violator_Base_C_SetViolatorText, Text_0) == 0x000000, "Member 'WBP_Violator_Base_C_SetViolatorText::Text_0' has a wrong offset!");
static_assert(offsetof(WBP_Violator_Base_C_SetViolatorText, CallFunc_TextIsEmpty_ReturnValue) == 0x000018, "Member 'WBP_Violator_Base_C_SetViolatorText::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");

// Function WBP_Violator_Base.WBP_Violator_Base_C.UpdateTextProperties
// 0x0008 (0x0008 - 0x0000)
struct WBP_Violator_Base_C_UpdateTextProperties final
{
public:
	class UBorderSlot*                            CallFunc_SlotAsBorderSlot_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Violator_Base_C_UpdateTextProperties) == 0x000008, "Wrong alignment on WBP_Violator_Base_C_UpdateTextProperties");
static_assert(sizeof(WBP_Violator_Base_C_UpdateTextProperties) == 0x000008, "Wrong size on WBP_Violator_Base_C_UpdateTextProperties");
static_assert(offsetof(WBP_Violator_Base_C_UpdateTextProperties, CallFunc_SlotAsBorderSlot_ReturnValue) == 0x000000, "Member 'WBP_Violator_Base_C_UpdateTextProperties::CallFunc_SlotAsBorderSlot_ReturnValue' has a wrong offset!");

}

