#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotorboatRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MotorboatRuntime.FortMeatballVehicle.CacheAudioPointers
// 0x0030 (0x0030 - 0x0000)
struct FortMeatballVehicle_CacheAudioPointers final
{
public:
	class UFortVehicleAudioVoice*                 InAudioEngineUp;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 InAudioEngineDown;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 InAudioWakeTurn;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 InAudioWakeSpeed;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 InAudioScrape;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVehicleAudioVoice*                 InAudioEngineOutOfFuel;                            // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMeatballVehicle_CacheAudioPointers) == 0x000008, "Wrong alignment on FortMeatballVehicle_CacheAudioPointers");
static_assert(sizeof(FortMeatballVehicle_CacheAudioPointers) == 0x000030, "Wrong size on FortMeatballVehicle_CacheAudioPointers");
static_assert(offsetof(FortMeatballVehicle_CacheAudioPointers, InAudioEngineUp) == 0x000000, "Member 'FortMeatballVehicle_CacheAudioPointers::InAudioEngineUp' has a wrong offset!");
static_assert(offsetof(FortMeatballVehicle_CacheAudioPointers, InAudioEngineDown) == 0x000008, "Member 'FortMeatballVehicle_CacheAudioPointers::InAudioEngineDown' has a wrong offset!");
static_assert(offsetof(FortMeatballVehicle_CacheAudioPointers, InAudioWakeTurn) == 0x000010, "Member 'FortMeatballVehicle_CacheAudioPointers::InAudioWakeTurn' has a wrong offset!");
static_assert(offsetof(FortMeatballVehicle_CacheAudioPointers, InAudioWakeSpeed) == 0x000018, "Member 'FortMeatballVehicle_CacheAudioPointers::InAudioWakeSpeed' has a wrong offset!");
static_assert(offsetof(FortMeatballVehicle_CacheAudioPointers, InAudioScrape) == 0x000020, "Member 'FortMeatballVehicle_CacheAudioPointers::InAudioScrape' has a wrong offset!");
static_assert(offsetof(FortMeatballVehicle_CacheAudioPointers, InAudioEngineOutOfFuel) == 0x000028, "Member 'FortMeatballVehicle_CacheAudioPointers::InAudioEngineOutOfFuel' has a wrong offset!");

// Function MotorboatRuntime.FortMeatballVehicle.CacheGroundFXComponent
// 0x0008 (0x0008 - 0x0000)
struct FortMeatballVehicle_CacheGroundFXComponent final
{
public:
	class UNiagaraComponent*                      InGroundFXComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMeatballVehicle_CacheGroundFXComponent) == 0x000008, "Wrong alignment on FortMeatballVehicle_CacheGroundFXComponent");
static_assert(sizeof(FortMeatballVehicle_CacheGroundFXComponent) == 0x000008, "Wrong size on FortMeatballVehicle_CacheGroundFXComponent");
static_assert(offsetof(FortMeatballVehicle_CacheGroundFXComponent, InGroundFXComponent) == 0x000000, "Member 'FortMeatballVehicle_CacheGroundFXComponent::InGroundFXComponent' has a wrong offset!");

// Function MotorboatRuntime.FortMeatballVehicle.ShowCooldownCue
// 0x0010 (0x0010 - 0x0000)
struct FortMeatballVehicle_ShowCooldownCue final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMeatballVehicle_ShowCooldownCue) == 0x000008, "Wrong alignment on FortMeatballVehicle_ShowCooldownCue");
static_assert(sizeof(FortMeatballVehicle_ShowCooldownCue) == 0x000010, "Wrong size on FortMeatballVehicle_ShowCooldownCue");
static_assert(offsetof(FortMeatballVehicle_ShowCooldownCue, Pawn) == 0x000000, "Member 'FortMeatballVehicle_ShowCooldownCue::Pawn' has a wrong offset!");
static_assert(offsetof(FortMeatballVehicle_ShowCooldownCue, duration) == 0x000008, "Member 'FortMeatballVehicle_ShowCooldownCue::duration' has a wrong offset!");

// Function MotorboatRuntime.FortMeatballVehicle.SmashedThroughBuildingPiece
// 0x0038 (0x0038 - 0x0000)
struct FortMeatballVehicle_SmashedThroughBuildingPiece final
{
public:
	struct FVector                                ImpactPoint;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABuildingActor*                   BuildingHitActor;                                  // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMeatballVehicle_SmashedThroughBuildingPiece) == 0x000008, "Wrong alignment on FortMeatballVehicle_SmashedThroughBuildingPiece");
static_assert(sizeof(FortMeatballVehicle_SmashedThroughBuildingPiece) == 0x000038, "Wrong size on FortMeatballVehicle_SmashedThroughBuildingPiece");
static_assert(offsetof(FortMeatballVehicle_SmashedThroughBuildingPiece, ImpactPoint) == 0x000000, "Member 'FortMeatballVehicle_SmashedThroughBuildingPiece::ImpactPoint' has a wrong offset!");
static_assert(offsetof(FortMeatballVehicle_SmashedThroughBuildingPiece, ImpactNormal) == 0x000018, "Member 'FortMeatballVehicle_SmashedThroughBuildingPiece::ImpactNormal' has a wrong offset!");
static_assert(offsetof(FortMeatballVehicle_SmashedThroughBuildingPiece, BuildingHitActor) == 0x000030, "Member 'FortMeatballVehicle_SmashedThroughBuildingPiece::BuildingHitActor' has a wrong offset!");

// Function MotorboatRuntime.FortMeatballVehicle.UpdateSnowAndDirtParams
// 0x0004 (0x0004 - 0x0000)
struct FortMeatballVehicle_UpdateSnowAndDirtParams final
{
public:
	float                                         NormalizedForwardSpeed;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMeatballVehicle_UpdateSnowAndDirtParams) == 0x000004, "Wrong alignment on FortMeatballVehicle_UpdateSnowAndDirtParams");
static_assert(sizeof(FortMeatballVehicle_UpdateSnowAndDirtParams) == 0x000004, "Wrong size on FortMeatballVehicle_UpdateSnowAndDirtParams");
static_assert(offsetof(FortMeatballVehicle_UpdateSnowAndDirtParams, NormalizedForwardSpeed) == 0x000000, "Member 'FortMeatballVehicle_UpdateSnowAndDirtParams::NormalizedForwardSpeed' has a wrong offset!");

// Function MotorboatRuntime.FortMeatballVehicle.GetBoostCharge
// 0x0004 (0x0004 - 0x0000)
struct FortMeatballVehicle_GetBoostCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMeatballVehicle_GetBoostCharge) == 0x000004, "Wrong alignment on FortMeatballVehicle_GetBoostCharge");
static_assert(sizeof(FortMeatballVehicle_GetBoostCharge) == 0x000004, "Wrong size on FortMeatballVehicle_GetBoostCharge");
static_assert(offsetof(FortMeatballVehicle_GetBoostCharge, ReturnValue) == 0x000000, "Member 'FortMeatballVehicle_GetBoostCharge::ReturnValue' has a wrong offset!");

// Function MotorboatRuntime.FortMeatballVehicle.GetSeatOffset
// 0x0018 (0x0018 - 0x0000)
struct FortMeatballVehicle_GetSeatOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMeatballVehicle_GetSeatOffset) == 0x000008, "Wrong alignment on FortMeatballVehicle_GetSeatOffset");
static_assert(sizeof(FortMeatballVehicle_GetSeatOffset) == 0x000018, "Wrong size on FortMeatballVehicle_GetSeatOffset");
static_assert(offsetof(FortMeatballVehicle_GetSeatOffset, ReturnValue) == 0x000000, "Member 'FortMeatballVehicle_GetSeatOffset::ReturnValue' has a wrong offset!");

// Function MotorboatRuntime.FortMeatballVehicle.GetSeatRotation
// 0x0020 (0x0020 - 0x0000)
struct FortMeatballVehicle_GetSeatRotation final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMeatballVehicle_GetSeatRotation) == 0x000010, "Wrong alignment on FortMeatballVehicle_GetSeatRotation");
static_assert(sizeof(FortMeatballVehicle_GetSeatRotation) == 0x000020, "Wrong size on FortMeatballVehicle_GetSeatRotation");
static_assert(offsetof(FortMeatballVehicle_GetSeatRotation, ReturnValue) == 0x000000, "Member 'FortMeatballVehicle_GetSeatRotation::ReturnValue' has a wrong offset!");

}

