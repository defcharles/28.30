#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TacticalSprintRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "TacticalSprintRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Class TacticalSprintRuntime.FortMovementMode_ELTacSprint
// 0x02A8 (0x03C8 - 0x0120)
class UFortMovementMode_ELTacSprint : public UFortMovementMode_BaseExtLogic
{
public:
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TacticalSprintFail;                                // 0x0128(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TacticalSprintFailLowEnergy;                       // 0x0148(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MinEnergyToActivate;                               // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MinEnergyToActivateRow;                            // 0x0170(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GCEnergyDrain;                                     // 0x0198(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           GCSpeedLines;                                      // 0x019C(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           GCCameraShake;                                     // 0x01A0(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           GCSprintEnd;                                       // 0x01A4(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxSpeedMultiplier;                                // 0x01A8(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AccelerationMultiplier;                            // 0x01D0(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RampUpSpeed;                                       // 0x01F8(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RampDownSpeed;                                     // 0x0220(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         JumpHeightMultiplier;                              // 0x0248(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_270[0x4];                                      // 0x0270(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TutorialGameplayTag;                               // 0x0274(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TutorialAdditionalSourceTag;                       // 0x0278(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TutorialTargetTag;                                 // 0x0298(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TagPreventWeaponHolster;                           // 0x02B8(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnEnergyFullyDrainedSound;                         // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TacticalBehaviorTag;                               // 0x02C8(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinSpeedForHolster;                                // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HolsterTimeAttemptDelay;                           // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D4[0xC];                                      // 0x02D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_2E0_0 : 1;                                  // 0x02E0(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsCancelledBySliding : 1;                         // 0x02E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldHolsterWeapon : 1;                          // 0x02E0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HF_EnergyCostOnStart;                              // 0x02E8(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HF_EnergyCostPerSecond;                            // 0x0310(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HF_EnergyCostOnJump;                               // 0x0338(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           IgnoreJumpCostTag;                                 // 0x0360(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TacticalSprintTag;                                 // 0x0364(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           EnergyUseIdentifier;                               // 0x0368(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundMix*                              SprintStartedSoundMix;                             // 0x0370(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             SprintStartedSound2D;                              // 0x0378(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x8];                                      // 0x0380(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HF_TacSprintEnabled;                               // 0x0388(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B0[0x8];                                      // 0x03B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortCameraMode>            CameraMode;                                        // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CameraModeTag;                                     // 0x03C0(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         MaxTryHolsterAttempt;                              // 0x03C4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C5[0x3];                                      // 0x03C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleFailedToSprint();
	void HandleMovementModeChanged(class ACharacter* Character, EMovementMode PreviousMovementMode, uint8 PreviousCustomMode);
	void HandleOnEnergyDrained(class UFortComponent_Energy* EnergyComp);
	void HandleOnEnterAircraft();
	void HandleOnEnteredEditMode();
	void HandleOnPawnJump();
	void HandleOnPlayerWeaponChanged(class AFortPawn* InPawn, class AFortWeapon* InNewWeapon, class AFortWeapon* InPlayerWeapon);
	void HandleOnReloadCanceling();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMovementMode_ELTacSprint">();
	}
	static class UFortMovementMode_ELTacSprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMovementMode_ELTacSprint>();
	}
};
static_assert(alignof(UFortMovementMode_ELTacSprint) == 0x000008, "Wrong alignment on UFortMovementMode_ELTacSprint");
static_assert(sizeof(UFortMovementMode_ELTacSprint) == 0x0003C8, "Wrong size on UFortMovementMode_ELTacSprint");
static_assert(offsetof(UFortMovementMode_ELTacSprint, TacticalSprintFail) == 0x000128, "Member 'UFortMovementMode_ELTacSprint::TacticalSprintFail' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, TacticalSprintFailLowEnergy) == 0x000148, "Member 'UFortMovementMode_ELTacSprint::TacticalSprintFailLowEnergy' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, MinEnergyToActivate) == 0x000168, "Member 'UFortMovementMode_ELTacSprint::MinEnergyToActivate' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, MinEnergyToActivateRow) == 0x000170, "Member 'UFortMovementMode_ELTacSprint::MinEnergyToActivateRow' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, GCEnergyDrain) == 0x000198, "Member 'UFortMovementMode_ELTacSprint::GCEnergyDrain' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, GCSpeedLines) == 0x00019C, "Member 'UFortMovementMode_ELTacSprint::GCSpeedLines' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, GCCameraShake) == 0x0001A0, "Member 'UFortMovementMode_ELTacSprint::GCCameraShake' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, GCSprintEnd) == 0x0001A4, "Member 'UFortMovementMode_ELTacSprint::GCSprintEnd' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, MaxSpeedMultiplier) == 0x0001A8, "Member 'UFortMovementMode_ELTacSprint::MaxSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, AccelerationMultiplier) == 0x0001D0, "Member 'UFortMovementMode_ELTacSprint::AccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, RampUpSpeed) == 0x0001F8, "Member 'UFortMovementMode_ELTacSprint::RampUpSpeed' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, RampDownSpeed) == 0x000220, "Member 'UFortMovementMode_ELTacSprint::RampDownSpeed' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, JumpHeightMultiplier) == 0x000248, "Member 'UFortMovementMode_ELTacSprint::JumpHeightMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, TutorialGameplayTag) == 0x000274, "Member 'UFortMovementMode_ELTacSprint::TutorialGameplayTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, TutorialAdditionalSourceTag) == 0x000278, "Member 'UFortMovementMode_ELTacSprint::TutorialAdditionalSourceTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, TutorialTargetTag) == 0x000298, "Member 'UFortMovementMode_ELTacSprint::TutorialTargetTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, TagPreventWeaponHolster) == 0x0002B8, "Member 'UFortMovementMode_ELTacSprint::TagPreventWeaponHolster' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, OnEnergyFullyDrainedSound) == 0x0002C0, "Member 'UFortMovementMode_ELTacSprint::OnEnergyFullyDrainedSound' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, TacticalBehaviorTag) == 0x0002C8, "Member 'UFortMovementMode_ELTacSprint::TacticalBehaviorTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, MinSpeedForHolster) == 0x0002CC, "Member 'UFortMovementMode_ELTacSprint::MinSpeedForHolster' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, HolsterTimeAttemptDelay) == 0x0002D0, "Member 'UFortMovementMode_ELTacSprint::HolsterTimeAttemptDelay' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, HF_EnergyCostOnStart) == 0x0002E8, "Member 'UFortMovementMode_ELTacSprint::HF_EnergyCostOnStart' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, HF_EnergyCostPerSecond) == 0x000310, "Member 'UFortMovementMode_ELTacSprint::HF_EnergyCostPerSecond' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, HF_EnergyCostOnJump) == 0x000338, "Member 'UFortMovementMode_ELTacSprint::HF_EnergyCostOnJump' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, IgnoreJumpCostTag) == 0x000360, "Member 'UFortMovementMode_ELTacSprint::IgnoreJumpCostTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, TacticalSprintTag) == 0x000364, "Member 'UFortMovementMode_ELTacSprint::TacticalSprintTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, EnergyUseIdentifier) == 0x000368, "Member 'UFortMovementMode_ELTacSprint::EnergyUseIdentifier' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, SprintStartedSoundMix) == 0x000370, "Member 'UFortMovementMode_ELTacSprint::SprintStartedSoundMix' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, SprintStartedSound2D) == 0x000378, "Member 'UFortMovementMode_ELTacSprint::SprintStartedSound2D' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, HF_TacSprintEnabled) == 0x000388, "Member 'UFortMovementMode_ELTacSprint::HF_TacSprintEnabled' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, CameraMode) == 0x0003B8, "Member 'UFortMovementMode_ELTacSprint::CameraMode' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, CameraModeTag) == 0x0003C0, "Member 'UFortMovementMode_ELTacSprint::CameraModeTag' has a wrong offset!");
static_assert(offsetof(UFortMovementMode_ELTacSprint, MaxTryHolsterAttempt) == 0x0003C4, "Member 'UFortMovementMode_ELTacSprint::MaxTryHolsterAttempt' has a wrong offset!");

// Class TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint
// 0x0158 (0x01F8 - 0x00A0)
class UFortPlayerControllerComponent_TacticalSprint final : public UControllerComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnFailedToSprint;                                  // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortMovementMode_BaseExtLogic> MovementModeExtension;                             // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortPlayerPawn*                        CurrentBoundPlayerPawn;                            // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bTacticalSprintEnabled : 1;                        // 0x00D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bWantsToTacticalSprint : 1;                        // 0x00D8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bHandlingMoveForward : 1;                          // 0x00D8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsSprinting : 1;                                  // 0x00D8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bWasInBuildMode : 1;                               // 0x00D8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bFireAnalyticsEventOnEndPlay : 1;                  // 0x00D8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TacticalSprintAbilityGameplayTag;                  // 0x00DC(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           DisableTacticalSprintAbilityGameplayTag;           // 0x00E0(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         TacticalSprintEnabled;                             // 0x00E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TacticalSprintToggleGracePeriod;                   // 0x0110(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnTacticalSprintStarted;                           // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnTacticalSprintEnded;                             // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	bool                                          bUseMovementModeExtension;                         // 0x0158(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_159[0xF];                                      // 0x0159(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StopWantingToSprintTimerReceipt;                   // 0x0168(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x68];                                     // 0x0170(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        InputComponent;                                    // 0x01D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x18];                                     // 0x01E0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCustomSprintMMEClass(const TSubclassOf<class UFortMovementMode_ELTacSprint>& SprintMMEClassToAdd);
	void LogAndVisualLog(class UObject* LoggingSource, ESprintLoggingVerbosityLevel Verbosity, const class FString& LogString);
	void OnAutoRunChanged(bool bAutoRunIsOn);
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnMutatorUpdated();
	void OnPawnChanged(class AFortPawn* InPawn);
	void OnPlayerStatePawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn);
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PreviousWeapon);
	void RegisterMutatorUpdatedDelegate();
	void RemoveCustomSprintMMEClass(const TSubclassOf<class UFortMovementMode_ELTacSprint>& SprintMMEClassToRemove);
	void SetIsSprinting(bool bNewIsSprinting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerControllerComponent_TacticalSprint">();
	}
	static class UFortPlayerControllerComponent_TacticalSprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerControllerComponent_TacticalSprint>();
	}
};
static_assert(alignof(UFortPlayerControllerComponent_TacticalSprint) == 0x000008, "Wrong alignment on UFortPlayerControllerComponent_TacticalSprint");
static_assert(sizeof(UFortPlayerControllerComponent_TacticalSprint) == 0x0001F8, "Wrong size on UFortPlayerControllerComponent_TacticalSprint");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, OnFailedToSprint) == 0x0000B8, "Member 'UFortPlayerControllerComponent_TacticalSprint::OnFailedToSprint' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, MovementModeExtension) == 0x0000C8, "Member 'UFortPlayerControllerComponent_TacticalSprint::MovementModeExtension' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, CurrentBoundPlayerPawn) == 0x0000D0, "Member 'UFortPlayerControllerComponent_TacticalSprint::CurrentBoundPlayerPawn' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, TacticalSprintAbilityGameplayTag) == 0x0000DC, "Member 'UFortPlayerControllerComponent_TacticalSprint::TacticalSprintAbilityGameplayTag' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, DisableTacticalSprintAbilityGameplayTag) == 0x0000E0, "Member 'UFortPlayerControllerComponent_TacticalSprint::DisableTacticalSprintAbilityGameplayTag' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, TacticalSprintEnabled) == 0x0000E8, "Member 'UFortPlayerControllerComponent_TacticalSprint::TacticalSprintEnabled' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, TacticalSprintToggleGracePeriod) == 0x000110, "Member 'UFortPlayerControllerComponent_TacticalSprint::TacticalSprintToggleGracePeriod' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, OnTacticalSprintStarted) == 0x000138, "Member 'UFortPlayerControllerComponent_TacticalSprint::OnTacticalSprintStarted' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, OnTacticalSprintEnded) == 0x000148, "Member 'UFortPlayerControllerComponent_TacticalSprint::OnTacticalSprintEnded' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, bUseMovementModeExtension) == 0x000158, "Member 'UFortPlayerControllerComponent_TacticalSprint::bUseMovementModeExtension' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, StopWantingToSprintTimerReceipt) == 0x000168, "Member 'UFortPlayerControllerComponent_TacticalSprint::StopWantingToSprintTimerReceipt' has a wrong offset!");
static_assert(offsetof(UFortPlayerControllerComponent_TacticalSprint, InputComponent) == 0x0001D8, "Member 'UFortPlayerControllerComponent_TacticalSprint::InputComponent' has a wrong offset!");

}

