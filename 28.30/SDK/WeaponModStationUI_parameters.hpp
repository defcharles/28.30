#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WeaponModStationUI

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchContext.GetCurrentModCategory
// 0x0004 (0x0004 - 0x0000)
struct AthenaWeaponModsWorkbenchContext_GetCurrentModCategory final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchContext_GetCurrentModCategory) == 0x000004, "Wrong alignment on AthenaWeaponModsWorkbenchContext_GetCurrentModCategory");
static_assert(sizeof(AthenaWeaponModsWorkbenchContext_GetCurrentModCategory) == 0x000004, "Wrong size on AthenaWeaponModsWorkbenchContext_GetCurrentModCategory");
static_assert(offsetof(AthenaWeaponModsWorkbenchContext_GetCurrentModCategory, ReturnValue) == 0x000000, "Member 'AthenaWeaponModsWorkbenchContext_GetCurrentModCategory::ReturnValue' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchWidgetBase.HandleWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchWidgetBase_HandleWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchWidgetBase_HandleWeaponEquipped) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchWidgetBase_HandleWeaponEquipped");
static_assert(sizeof(AthenaWeaponModsWorkbenchWidgetBase_HandleWeaponEquipped) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchWidgetBase_HandleWeaponEquipped");
static_assert(offsetof(AthenaWeaponModsWorkbenchWidgetBase_HandleWeaponEquipped, NewWeapon) == 0x000000, "Member 'AthenaWeaponModsWorkbenchWidgetBase_HandleWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchWidgetBase_HandleWeaponEquipped, PrevWeapon) == 0x000008, "Member 'AthenaWeaponModsWorkbenchWidgetBase_HandleWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchWidgetBase.OnWeaponModCategoryChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaWeaponModsWorkbenchWidgetBase_OnWeaponModCategoryChanged final
{
public:
	struct FGameplayTag                           ModTypeTag;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchWidgetBase_OnWeaponModCategoryChanged) == 0x000004, "Wrong alignment on AthenaWeaponModsWorkbenchWidgetBase_OnWeaponModCategoryChanged");
static_assert(sizeof(AthenaWeaponModsWorkbenchWidgetBase_OnWeaponModCategoryChanged) == 0x000004, "Wrong size on AthenaWeaponModsWorkbenchWidgetBase_OnWeaponModCategoryChanged");
static_assert(offsetof(AthenaWeaponModsWorkbenchWidgetBase_OnWeaponModCategoryChanged, ModTypeTag) == 0x000000, "Member 'AthenaWeaponModsWorkbenchWidgetBase_OnWeaponModCategoryChanged::ModTypeTag' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchEquippedModDetails.HandleCurrentlySelectedModChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchEquippedModDetails_HandleCurrentlySelectedModChanged final
{
public:
	class UFortWeaponModItemDefinition*           NewSelectedMod;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchEquippedModDetails_HandleCurrentlySelectedModChanged) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchEquippedModDetails_HandleCurrentlySelectedModChanged");
static_assert(sizeof(AthenaWeaponModsWorkbenchEquippedModDetails_HandleCurrentlySelectedModChanged) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchEquippedModDetails_HandleCurrentlySelectedModChanged");
static_assert(offsetof(AthenaWeaponModsWorkbenchEquippedModDetails_HandleCurrentlySelectedModChanged, NewSelectedMod) == 0x000000, "Member 'AthenaWeaponModsWorkbenchEquippedModDetails_HandleCurrentlySelectedModChanged::NewSelectedMod' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchEquippedModDetails.HandleSetEquippedModInfo
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchEquippedModDetails_HandleSetEquippedModInfo final
{
public:
	const class UFortWeaponModItemDefinition*     WeaponMod;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchEquippedModDetails_HandleSetEquippedModInfo) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchEquippedModDetails_HandleSetEquippedModInfo");
static_assert(sizeof(AthenaWeaponModsWorkbenchEquippedModDetails_HandleSetEquippedModInfo) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchEquippedModDetails_HandleSetEquippedModInfo");
static_assert(offsetof(AthenaWeaponModsWorkbenchEquippedModDetails_HandleSetEquippedModInfo, WeaponMod) == 0x000000, "Member 'AthenaWeaponModsWorkbenchEquippedModDetails_HandleSetEquippedModInfo::WeaponMod' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchEquippedModDetails.OnSetCurrentlySelectedModInfo
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo final
{
public:
	const class UFortWeaponModItemDefinition*     ModItemDefinition;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSameCategory;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEquippedMod;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo");
static_assert(sizeof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo");
static_assert(offsetof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo, ModItemDefinition) == 0x000000, "Member 'AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo::ModItemDefinition' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo, bIsSameCategory) == 0x000008, "Member 'AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo::bIsSameCategory' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo, bIsEquippedMod) == 0x000009, "Member 'AthenaWeaponModsWorkbenchEquippedModDetails_OnSetCurrentlySelectedModInfo::bIsEquippedMod' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchEquippedModDetails.OnSetEquippedModInfo
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo final
{
public:
	const class UFortWeaponModItemDefinition*     ModItemDefinition;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefaultMod;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlotHasDefaultMod;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanRemoveMod;                                     // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo");
static_assert(sizeof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo");
static_assert(offsetof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo, ModItemDefinition) == 0x000000, "Member 'AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo::ModItemDefinition' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo, bIsDefaultMod) == 0x000008, "Member 'AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo::bIsDefaultMod' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo, bSlotHasDefaultMod) == 0x000009, "Member 'AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo::bSlotHasDefaultMod' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo, bCanRemoveMod) == 0x00000A, "Member 'AthenaWeaponModsWorkbenchEquippedModDetails_OnSetEquippedModInfo::bCanRemoveMod' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModal.HandleModStationComponentForceStop
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchModal_HandleModStationComponentForceStop final
{
public:
	class AFortWeaponModStationBase*              WeaponModStation;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModal_HandleModStationComponentForceStop) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchModal_HandleModStationComponentForceStop");
static_assert(sizeof(AthenaWeaponModsWorkbenchModal_HandleModStationComponentForceStop) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchModal_HandleModStationComponentForceStop");
static_assert(offsetof(AthenaWeaponModsWorkbenchModal_HandleModStationComponentForceStop, WeaponModStation) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModal_HandleModStationComponentForceStop::WeaponModStation' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModal.HandleWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchModal_HandleWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModal_HandleWeaponEquipped) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchModal_HandleWeaponEquipped");
static_assert(sizeof(AthenaWeaponModsWorkbenchModal_HandleWeaponEquipped) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchModal_HandleWeaponEquipped");
static_assert(offsetof(AthenaWeaponModsWorkbenchModal_HandleWeaponEquipped, NewWeapon) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModal_HandleWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchModal_HandleWeaponEquipped, PrevWeapon) == 0x000008, "Member 'AthenaWeaponModsWorkbenchModal_HandleWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModal.OnInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaWeaponModsWorkbenchModal_OnInputTypeChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModal_OnInputTypeChanged) == 0x000001, "Wrong alignment on AthenaWeaponModsWorkbenchModal_OnInputTypeChanged");
static_assert(sizeof(AthenaWeaponModsWorkbenchModal_OnInputTypeChanged) == 0x000001, "Wrong size on AthenaWeaponModsWorkbenchModal_OnInputTypeChanged");
static_assert(offsetof(AthenaWeaponModsWorkbenchModal_OnInputTypeChanged, NewInputType) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModal_OnInputTypeChanged::NewInputType' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModal.OnWeaponEquipped
// 0x0001 (0x0001 - 0x0000)
struct AthenaWeaponModsWorkbenchModal_OnWeaponEquipped final
{
public:
	bool                                          bIsModdable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModal_OnWeaponEquipped) == 0x000001, "Wrong alignment on AthenaWeaponModsWorkbenchModal_OnWeaponEquipped");
static_assert(sizeof(AthenaWeaponModsWorkbenchModal_OnWeaponEquipped) == 0x000001, "Wrong size on AthenaWeaponModsWorkbenchModal_OnWeaponEquipped");
static_assert(offsetof(AthenaWeaponModsWorkbenchModal_OnWeaponEquipped, bIsModdable) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModal_OnWeaponEquipped::bIsModdable' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModListEntry.OnListItemSet
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchModListEntry_OnListItemSet final
{
public:
	const class UFortItemDefinition*              Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModListEntry_OnListItemSet) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchModListEntry_OnListItemSet");
static_assert(sizeof(AthenaWeaponModsWorkbenchModListEntry_OnListItemSet) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchModListEntry_OnListItemSet");
static_assert(offsetof(AthenaWeaponModsWorkbenchModListEntry_OnListItemSet, Item) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModListEntry_OnListItemSet::Item' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModListEntry.IsEquippableMod
// 0x0001 (0x0001 - 0x0000)
struct AthenaWeaponModsWorkbenchModListEntry_IsEquippableMod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModListEntry_IsEquippableMod) == 0x000001, "Wrong alignment on AthenaWeaponModsWorkbenchModListEntry_IsEquippableMod");
static_assert(sizeof(AthenaWeaponModsWorkbenchModListEntry_IsEquippableMod) == 0x000001, "Wrong size on AthenaWeaponModsWorkbenchModListEntry_IsEquippableMod");
static_assert(offsetof(AthenaWeaponModsWorkbenchModListEntry_IsEquippableMod, ReturnValue) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModListEntry_IsEquippableMod::ReturnValue' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModListEntry.IsEquippedMod
// 0x0001 (0x0001 - 0x0000)
struct AthenaWeaponModsWorkbenchModListEntry_IsEquippedMod final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModListEntry_IsEquippedMod) == 0x000001, "Wrong alignment on AthenaWeaponModsWorkbenchModListEntry_IsEquippedMod");
static_assert(sizeof(AthenaWeaponModsWorkbenchModListEntry_IsEquippedMod) == 0x000001, "Wrong size on AthenaWeaponModsWorkbenchModListEntry_IsEquippedMod");
static_assert(offsetof(AthenaWeaponModsWorkbenchModListEntry_IsEquippedMod, ReturnValue) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModListEntry_IsEquippedMod::ReturnValue' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.GetSelectedModCostAndOwnedCurrency
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_GetSelectedModCostAndOwnedCurrency final
{
public:
	int32                                         ModCost;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnedCurrency;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_GetSelectedModCostAndOwnedCurrency) == 0x000004, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_GetSelectedModCostAndOwnedCurrency");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_GetSelectedModCostAndOwnedCurrency) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchModSelection_GetSelectedModCostAndOwnedCurrency");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_GetSelectedModCostAndOwnedCurrency, ModCost) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_GetSelectedModCostAndOwnedCurrency::ModCost' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_GetSelectedModCostAndOwnedCurrency, OwnedCurrency) == 0x000004, "Member 'AthenaWeaponModsWorkbenchModSelection_GetSelectedModCostAndOwnedCurrency::OwnedCurrency' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.OnRefreshMods
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_OnRefreshMods final
{
public:
	TArray<class UFortWeaponModItemDefinition*>   WeaponModItemDefinitions;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_OnRefreshMods) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_OnRefreshMods");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_OnRefreshMods) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchModSelection_OnRefreshMods");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_OnRefreshMods, WeaponModItemDefinitions) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_OnRefreshMods::WeaponModItemDefinitions' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.OnRefreshModType
// 0x0004 (0x0004 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_OnRefreshModType final
{
public:
	struct FGameplayTag                           ModCategoryTag;                                    // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_OnRefreshModType) == 0x000004, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_OnRefreshModType");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_OnRefreshModType) == 0x000004, "Wrong size on AthenaWeaponModsWorkbenchModSelection_OnRefreshModType");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_OnRefreshModType, ModCategoryTag) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_OnRefreshModType::ModCategoryTag' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.OnSetSelectedModCostAndOwnedCurrency
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModCostAndOwnedCurrency final
{
public:
	int32                                         ModCost;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnedCurrency;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModCostAndOwnedCurrency) == 0x000004, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModCostAndOwnedCurrency");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModCostAndOwnedCurrency) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModCostAndOwnedCurrency");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModCostAndOwnedCurrency, ModCost) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModCostAndOwnedCurrency::ModCost' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModCostAndOwnedCurrency, OwnedCurrency) == 0x000004, "Member 'AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModCostAndOwnedCurrency::OwnedCurrency' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.OnSetSelectedModInfo
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModInfo final
{
public:
	const class UFortWeaponModItemDefinition*     ModItemDef;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModInfo) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModInfo");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModInfo) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModInfo");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModInfo, ModItemDef) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_OnSetSelectedModInfo::ModItemDef' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.OnSetSelectedRemoveModCostAndOwnedCurrency
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_OnSetSelectedRemoveModCostAndOwnedCurrency final
{
public:
	int32                                         ModCost;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnedCurrency;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedRemoveModCostAndOwnedCurrency) == 0x000004, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_OnSetSelectedRemoveModCostAndOwnedCurrency");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedRemoveModCostAndOwnedCurrency) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchModSelection_OnSetSelectedRemoveModCostAndOwnedCurrency");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedRemoveModCostAndOwnedCurrency, ModCost) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_OnSetSelectedRemoveModCostAndOwnedCurrency::ModCost' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_OnSetSelectedRemoveModCostAndOwnedCurrency, OwnedCurrency) == 0x000004, "Member 'AthenaWeaponModsWorkbenchModSelection_OnSetSelectedRemoveModCostAndOwnedCurrency::OwnedCurrency' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.SetCanRemoveMod
// 0x0001 (0x0001 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_SetCanRemoveMod final
{
public:
	bool                                          bCanRemoveMod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_SetCanRemoveMod) == 0x000001, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_SetCanRemoveMod");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_SetCanRemoveMod) == 0x000001, "Wrong size on AthenaWeaponModsWorkbenchModSelection_SetCanRemoveMod");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_SetCanRemoveMod, bCanRemoveMod) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_SetCanRemoveMod::bCanRemoveMod' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.CanApplySelectedModToEquippedWeapon
// 0x0001 (0x0001 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_CanApplySelectedModToEquippedWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_CanApplySelectedModToEquippedWeapon) == 0x000001, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_CanApplySelectedModToEquippedWeapon");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_CanApplySelectedModToEquippedWeapon) == 0x000001, "Wrong size on AthenaWeaponModsWorkbenchModSelection_CanApplySelectedModToEquippedWeapon");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_CanApplySelectedModToEquippedWeapon, ReturnValue) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_CanApplySelectedModToEquippedWeapon::ReturnValue' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.CanRemoveSelectedModFromWeapon
// 0x0001 (0x0001 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_CanRemoveSelectedModFromWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_CanRemoveSelectedModFromWeapon) == 0x000001, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_CanRemoveSelectedModFromWeapon");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_CanRemoveSelectedModFromWeapon) == 0x000001, "Wrong size on AthenaWeaponModsWorkbenchModSelection_CanRemoveSelectedModFromWeapon");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_CanRemoveSelectedModFromWeapon, ReturnValue) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_CanRemoveSelectedModFromWeapon::ReturnValue' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.DoesEquippedWeaponHaveDefaultModForSlot
// 0x0001 (0x0001 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_DoesEquippedWeaponHaveDefaultModForSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_DoesEquippedWeaponHaveDefaultModForSlot) == 0x000001, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_DoesEquippedWeaponHaveDefaultModForSlot");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_DoesEquippedWeaponHaveDefaultModForSlot) == 0x000001, "Wrong size on AthenaWeaponModsWorkbenchModSelection_DoesEquippedWeaponHaveDefaultModForSlot");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_DoesEquippedWeaponHaveDefaultModForSlot, ReturnValue) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_DoesEquippedWeaponHaveDefaultModForSlot::ReturnValue' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.GetSelectedRemoveModCostAndOwnedCurrency
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_GetSelectedRemoveModCostAndOwnedCurrency final
{
public:
	int32                                         RemoveModCost;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnedCurrency;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_GetSelectedRemoveModCostAndOwnedCurrency) == 0x000004, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_GetSelectedRemoveModCostAndOwnedCurrency");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_GetSelectedRemoveModCostAndOwnedCurrency) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchModSelection_GetSelectedRemoveModCostAndOwnedCurrency");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_GetSelectedRemoveModCostAndOwnedCurrency, RemoveModCost) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_GetSelectedRemoveModCostAndOwnedCurrency::RemoveModCost' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_GetSelectedRemoveModCostAndOwnedCurrency, OwnedCurrency) == 0x000004, "Member 'AthenaWeaponModsWorkbenchModSelection_GetSelectedRemoveModCostAndOwnedCurrency::OwnedCurrency' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModSelection.IsSelectedModEquippedOnWeapon
// 0x0001 (0x0001 - 0x0000)
struct AthenaWeaponModsWorkbenchModSelection_IsSelectedModEquippedOnWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModSelection_IsSelectedModEquippedOnWeapon) == 0x000001, "Wrong alignment on AthenaWeaponModsWorkbenchModSelection_IsSelectedModEquippedOnWeapon");
static_assert(sizeof(AthenaWeaponModsWorkbenchModSelection_IsSelectedModEquippedOnWeapon) == 0x000001, "Wrong size on AthenaWeaponModsWorkbenchModSelection_IsSelectedModEquippedOnWeapon");
static_assert(offsetof(AthenaWeaponModsWorkbenchModSelection_IsSelectedModEquippedOnWeapon, ReturnValue) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModSelection_IsSelectedModEquippedOnWeapon::ReturnValue' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModTypeButton.HandleWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchModTypeButton_HandleWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModTypeButton_HandleWeaponEquipped) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchModTypeButton_HandleWeaponEquipped");
static_assert(sizeof(AthenaWeaponModsWorkbenchModTypeButton_HandleWeaponEquipped) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchModTypeButton_HandleWeaponEquipped");
static_assert(offsetof(AthenaWeaponModsWorkbenchModTypeButton_HandleWeaponEquipped, NewWeapon) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModTypeButton_HandleWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchModTypeButton_HandleWeaponEquipped, PrevWeapon) == 0x000008, "Member 'AthenaWeaponModsWorkbenchModTypeButton_HandleWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModTypeButton.SetEquippedOrDefaultMod
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchModTypeButton_SetEquippedOrDefaultMod final
{
public:
	class UFortWeaponModItemDefinition*           ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAvailableCategory;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaWeaponModsWorkbenchModTypeButton_SetEquippedOrDefaultMod) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchModTypeButton_SetEquippedOrDefaultMod");
static_assert(sizeof(AthenaWeaponModsWorkbenchModTypeButton_SetEquippedOrDefaultMod) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchModTypeButton_SetEquippedOrDefaultMod");
static_assert(offsetof(AthenaWeaponModsWorkbenchModTypeButton_SetEquippedOrDefaultMod, ItemDefinition) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModTypeButton_SetEquippedOrDefaultMod::ItemDefinition' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchModTypeButton_SetEquippedOrDefaultMod, bIsAvailableCategory) == 0x000008, "Member 'AthenaWeaponModsWorkbenchModTypeButton_SetEquippedOrDefaultMod::bIsAvailableCategory' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModTypeButton.GetModTypeTag
// 0x0004 (0x0004 - 0x0000)
struct AthenaWeaponModsWorkbenchModTypeButton_GetModTypeTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModTypeButton_GetModTypeTag) == 0x000004, "Wrong alignment on AthenaWeaponModsWorkbenchModTypeButton_GetModTypeTag");
static_assert(sizeof(AthenaWeaponModsWorkbenchModTypeButton_GetModTypeTag) == 0x000004, "Wrong size on AthenaWeaponModsWorkbenchModTypeButton_GetModTypeTag");
static_assert(offsetof(AthenaWeaponModsWorkbenchModTypeButton_GetModTypeTag, ReturnValue) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModTypeButton_GetModTypeTag::ReturnValue' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModTypeTabs.GetTabButtons
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchModTypeTabs_GetTabButtons final
{
public:
	TArray<class UAthenaWeaponModsWorkbenchModTypeButton*> ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModTypeTabs_GetTabButtons) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchModTypeTabs_GetTabButtons");
static_assert(sizeof(AthenaWeaponModsWorkbenchModTypeTabs_GetTabButtons) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchModTypeTabs_GetTabButtons");
static_assert(offsetof(AthenaWeaponModsWorkbenchModTypeTabs_GetTabButtons, ReturnValue) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModTypeTabs_GetTabButtons::ReturnValue' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModTypeTabs.OnModTypeTabClicked
// 0x0004 (0x0004 - 0x0000)
struct AthenaWeaponModsWorkbenchModTypeTabs_OnModTypeTabClicked final
{
public:
	struct FGameplayTag                           ModTypeTag;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModTypeTabs_OnModTypeTabClicked) == 0x000004, "Wrong alignment on AthenaWeaponModsWorkbenchModTypeTabs_OnModTypeTabClicked");
static_assert(sizeof(AthenaWeaponModsWorkbenchModTypeTabs_OnModTypeTabClicked) == 0x000004, "Wrong size on AthenaWeaponModsWorkbenchModTypeTabs_OnModTypeTabClicked");
static_assert(offsetof(AthenaWeaponModsWorkbenchModTypeTabs_OnModTypeTabClicked, ModTypeTag) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModTypeTabs_OnModTypeTabClicked::ModTypeTag' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchModTypeTabs.SetItemSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchModTypeTabs_SetItemSlotInfo final
{
public:
	TArray<struct FFortWeaponModSlot>             ModSlots;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchModTypeTabs_SetItemSlotInfo) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchModTypeTabs_SetItemSlotInfo");
static_assert(sizeof(AthenaWeaponModsWorkbenchModTypeTabs_SetItemSlotInfo) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchModTypeTabs_SetItemSlotInfo");
static_assert(offsetof(AthenaWeaponModsWorkbenchModTypeTabs_SetItemSlotInfo, ModSlots) == 0x000000, "Member 'AthenaWeaponModsWorkbenchModTypeTabs_SetItemSlotInfo::ModSlots' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchWeaponDetails.OnWeaponEquipped
// 0x0020 (0x0020 - 0x0000)
struct AthenaWeaponModsWorkbenchWeaponDetails_OnWeaponEquipped final
{
public:
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchWeaponDetails_OnWeaponEquipped) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchWeaponDetails_OnWeaponEquipped");
static_assert(sizeof(AthenaWeaponModsWorkbenchWeaponDetails_OnWeaponEquipped) == 0x000020, "Wrong size on AthenaWeaponModsWorkbenchWeaponDetails_OnWeaponEquipped");
static_assert(offsetof(AthenaWeaponModsWorkbenchWeaponDetails_OnWeaponEquipped, ItemDefinition) == 0x000000, "Member 'AthenaWeaponModsWorkbenchWeaponDetails_OnWeaponEquipped::ItemDefinition' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchWeaponDetails_OnWeaponEquipped, DisplayName) == 0x000008, "Member 'AthenaWeaponModsWorkbenchWeaponDetails_OnWeaponEquipped::DisplayName' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchWeaponDetails.SetWeaponType
// 0x0020 (0x0020 - 0x0000)
struct AthenaWeaponModsWorkbenchWeaponDetails_SetWeaponType final
{
public:
	class FText                                   WeaponTypeText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             WeaponTypeTexture;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchWeaponDetails_SetWeaponType) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchWeaponDetails_SetWeaponType");
static_assert(sizeof(AthenaWeaponModsWorkbenchWeaponDetails_SetWeaponType) == 0x000020, "Wrong size on AthenaWeaponModsWorkbenchWeaponDetails_SetWeaponType");
static_assert(offsetof(AthenaWeaponModsWorkbenchWeaponDetails_SetWeaponType, WeaponTypeText) == 0x000000, "Member 'AthenaWeaponModsWorkbenchWeaponDetails_SetWeaponType::WeaponTypeText' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchWeaponDetails_SetWeaponType, WeaponTypeTexture) == 0x000018, "Member 'AthenaWeaponModsWorkbenchWeaponDetails_SetWeaponType::WeaponTypeTexture' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchWeaponRenderContainer.HandleWeaponModSlotPreview
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchWeaponRenderContainer_HandleWeaponModSlotPreview final
{
public:
	class UFortWeaponModItemDefinition*           PreviewingModItemDefinition;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchWeaponRenderContainer_HandleWeaponModSlotPreview) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchWeaponRenderContainer_HandleWeaponModSlotPreview");
static_assert(sizeof(AthenaWeaponModsWorkbenchWeaponRenderContainer_HandleWeaponModSlotPreview) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchWeaponRenderContainer_HandleWeaponModSlotPreview");
static_assert(offsetof(AthenaWeaponModsWorkbenchWeaponRenderContainer_HandleWeaponModSlotPreview, PreviewingModItemDefinition) == 0x000000, "Member 'AthenaWeaponModsWorkbenchWeaponRenderContainer_HandleWeaponModSlotPreview::PreviewingModItemDefinition' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchWeaponRenderContainer.OnWeaponModSlotPreview
// 0x0010 (0x0010 - 0x0000)
struct AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotPreview final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWeaponModItemDefinition*           PreviewingModItemDefinition;                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotPreview) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotPreview");
static_assert(sizeof(AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotPreview) == 0x000010, "Wrong size on AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotPreview");
static_assert(offsetof(AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotPreview, Weapon) == 0x000000, "Member 'AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotPreview::Weapon' has a wrong offset!");
static_assert(offsetof(AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotPreview, PreviewingModItemDefinition) == 0x000008, "Member 'AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotPreview::PreviewingModItemDefinition' has a wrong offset!");

// Function WeaponModStationUI.AthenaWeaponModsWorkbenchWeaponRenderContainer.OnWeaponModSlotsChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotsChanged final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotsChanged) == 0x000008, "Wrong alignment on AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotsChanged");
static_assert(sizeof(AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotsChanged) == 0x000008, "Wrong size on AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotsChanged");
static_assert(offsetof(AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotsChanged, Weapon) == 0x000000, "Member 'AthenaWeaponModsWorkbenchWeaponRenderContainer_OnWeaponModSlotsChanged::Weapon' has a wrong offset!");

}

