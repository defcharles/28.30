#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EncountersRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "FortniteAI_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "LagerRuntime_structs.hpp"
#include "StateTreeModule_structs.hpp"
#include "Engine_structs.hpp"
#include "WorldConditions_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "StructUtils_structs.hpp"


namespace SDK
{

// Enum EncountersRuntime.EEncounterMobSpawnType
// NumValues: 0x0002
enum class EEncounterMobSpawnType : uint32
{
	VolumeBased                              = 0,
	StaticPointBased                         = 1,
};

// Enum EncountersRuntime.EAlertLevelComparisonOperator
// NumValues: 0x0006
enum class EAlertLevelComparisonOperator : uint8
{
	GreaterThan                              = 0,
	LessThan                                 = 1,
	EqualTo                                  = 2,
	NotEqualTo                               = 3,
	GreaterThanOrEqualTo                     = 4,
	LessThanOrEqualTo                        = 5,
};

// Enum EncountersRuntime.ESpawnActorPersistenceBehavior
// NumValues: 0x0003
enum class ESpawnActorPersistenceBehavior : uint8
{
	Destroy                                  = 0,
	Transient                                = 1,
	Persistent                               = 2,
};

// Enum EncountersRuntime.EEncounterSuccessState
// NumValues: 0x0003
enum class EEncounterSuccessState : uint8
{
	Passed                                   = 0,
	Failed                                   = 1,
	Any                                      = 2,
};

// ScriptStruct EncountersRuntime.ActorAddLooseTagsStateTreeTaskInstanceData
// 0x0030 (0x0030 - 0x0000)
struct FActorAddLooseTagsStateTreeTaskInstanceData final
{
public:
	TWeakObjectPtr<class AActor>                  InActor;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorAddLooseTagsStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FActorAddLooseTagsStateTreeTaskInstanceData");
static_assert(sizeof(FActorAddLooseTagsStateTreeTaskInstanceData) == 0x000030, "Wrong size on FActorAddLooseTagsStateTreeTaskInstanceData");
static_assert(offsetof(FActorAddLooseTagsStateTreeTaskInstanceData, InActor) == 0x000000, "Member 'FActorAddLooseTagsStateTreeTaskInstanceData::InActor' has a wrong offset!");
static_assert(offsetof(FActorAddLooseTagsStateTreeTaskInstanceData, ActorTags) == 0x000008, "Member 'FActorAddLooseTagsStateTreeTaskInstanceData::ActorTags' has a wrong offset!");
static_assert(offsetof(FActorAddLooseTagsStateTreeTaskInstanceData, UserActor) == 0x000028, "Member 'FActorAddLooseTagsStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableGameplayTagStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableGameplayTagStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableGameplayTagStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableGameplayTagStateTreeTask");
static_assert(sizeof(FEncounterGetVariableGameplayTagStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableGameplayTagStateTreeTask");

// ScriptStruct EncountersRuntime.FortVerbMessage_EncounterCompleted
// 0x0050 (0x00C8 - 0x0078)
struct FFortVerbMessage_EncounterCompleted final : public FVerbMessage
{
public:
	struct FSubjectTagsPair                       EncounterItemDef;                                  // 0x0078(0x0038)(Edit, EditConst, NativeAccessSpecifierPrivate)
	bool                                          bSuccess;                                          // 0x00B0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSubjectTagsPair>               EncounterPlayers;                                  // 0x00B8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortVerbMessage_EncounterCompleted) == 0x000008, "Wrong alignment on FFortVerbMessage_EncounterCompleted");
static_assert(sizeof(FFortVerbMessage_EncounterCompleted) == 0x0000C8, "Wrong size on FFortVerbMessage_EncounterCompleted");
static_assert(offsetof(FFortVerbMessage_EncounterCompleted, EncounterItemDef) == 0x000078, "Member 'FFortVerbMessage_EncounterCompleted::EncounterItemDef' has a wrong offset!");
static_assert(offsetof(FFortVerbMessage_EncounterCompleted, bSuccess) == 0x0000B0, "Member 'FFortVerbMessage_EncounterCompleted::bSuccess' has a wrong offset!");
static_assert(offsetof(FFortVerbMessage_EncounterCompleted, EncounterPlayers) == 0x0000B8, "Member 'FFortVerbMessage_EncounterCompleted::EncounterPlayers' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterMobSpawnInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FEncounterMobSpawnInfo final
{
public:
	struct FScalableFloat                         LeashRadiusInner;                                  // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LeashRadiusOuter;                                  // 0x0028(0x0028)(Edit, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AEncounterMobAnchor>     EncounterAnchorPoint;                              // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEncounterMobSpawnType                        MobSpawnType;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PointProviderFilterTags;                           // 0x0060(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AFortAthenaLivingWorldStaticPointProvider>> StaticPointProviders;                              // 0x0080(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UEnvQuery*                              PointProviderEQS;                                  // 0x0090(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortAthenaLivingWorldVolume> PointProviderVolumeClass;                          // 0x0098(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterMobSpawnInfo) == 0x000008, "Wrong alignment on FEncounterMobSpawnInfo");
static_assert(sizeof(FEncounterMobSpawnInfo) == 0x0000A0, "Wrong size on FEncounterMobSpawnInfo");
static_assert(offsetof(FEncounterMobSpawnInfo, LeashRadiusInner) == 0x000000, "Member 'FEncounterMobSpawnInfo::LeashRadiusInner' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnInfo, LeashRadiusOuter) == 0x000028, "Member 'FEncounterMobSpawnInfo::LeashRadiusOuter' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnInfo, EncounterAnchorPoint) == 0x000050, "Member 'FEncounterMobSpawnInfo::EncounterAnchorPoint' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnInfo, MobSpawnType) == 0x000058, "Member 'FEncounterMobSpawnInfo::MobSpawnType' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnInfo, PointProviderFilterTags) == 0x000060, "Member 'FEncounterMobSpawnInfo::PointProviderFilterTags' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnInfo, StaticPointProviders) == 0x000080, "Member 'FEncounterMobSpawnInfo::StaticPointProviders' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnInfo, PointProviderEQS) == 0x000090, "Member 'FEncounterMobSpawnInfo::PointProviderEQS' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnInfo, PointProviderVolumeClass) == 0x000098, "Member 'FEncounterMobSpawnInfo::PointProviderVolumeClass' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableLWMEncounterStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableLWMEncounterStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableLWMEncounterStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableLWMEncounterStateTreeTask");
static_assert(sizeof(FEncounterGetVariableLWMEncounterStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableLWMEncounterStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterMobSpawnData
// 0x00E0 (0x00E0 - 0x0000)
struct FEncounterMobSpawnData final
{
public:
	class FString                                 DevNotes;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MobIdentifier;                                     // 0x0010(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveOnStart;                                    // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> MobEncounterData;                                  // 0x0018(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDefaultSpawnInfo;                         // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEncounterMobSpawnInfo                 MobSpawnInfo;                                      // 0x0040(0x00A0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterMobSpawnData) == 0x000008, "Wrong alignment on FEncounterMobSpawnData");
static_assert(sizeof(FEncounterMobSpawnData) == 0x0000E0, "Wrong size on FEncounterMobSpawnData");
static_assert(offsetof(FEncounterMobSpawnData, DevNotes) == 0x000000, "Member 'FEncounterMobSpawnData::DevNotes' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnData, MobIdentifier) == 0x000010, "Member 'FEncounterMobSpawnData::MobIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnData, bActiveOnStart) == 0x000014, "Member 'FEncounterMobSpawnData::bActiveOnStart' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnData, MobEncounterData) == 0x000018, "Member 'FEncounterMobSpawnData::MobEncounterData' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnData, bOverrideDefaultSpawnInfo) == 0x000038, "Member 'FEncounterMobSpawnData::bOverrideDefaultSpawnInfo' has a wrong offset!");
static_assert(offsetof(FEncounterMobSpawnData, MobSpawnInfo) == 0x000040, "Member 'FEncounterMobSpawnData::MobSpawnInfo' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVerbTransitionStateTreeTask
// 0x0008 (0x0028 - 0x0020)
struct FEncounterVerbTransitionStateTreeTask final : public FStateTreeTaskCommonBase
{
public:
	struct FStateTreeStateLink                    TransitionTo;                                      // 0x0020(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterVerbTransitionStateTreeTask) == 0x000008, "Wrong alignment on FEncounterVerbTransitionStateTreeTask");
static_assert(sizeof(FEncounterVerbTransitionStateTreeTask) == 0x000028, "Wrong size on FEncounterVerbTransitionStateTreeTask");
static_assert(offsetof(FEncounterVerbTransitionStateTreeTask, TransitionTo) == 0x000020, "Member 'FEncounterVerbTransitionStateTreeTask::TransitionTo' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData
// 0x0030 (0x0030 - 0x0000)
struct FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Value;                                             // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData) == 0x000030, "Wrong size on FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData, Value) == 0x000008, "Member 'FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData, UserActor) == 0x000028, "Member 'FEncounterGetVariableGameplayTagContainerStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterMobInstance
// 0x0058 (0x0058 - 0x0000)
struct FEncounterMobInstance final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAthenaLivingWorldVolume*           VolumePointProvider;                               // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> CurrentPointProviders;                             // 0x0030(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterMobInstance) == 0x000008, "Wrong alignment on FEncounterMobInstance");
static_assert(sizeof(FEncounterMobInstance) == 0x000058, "Wrong size on FEncounterMobInstance");
static_assert(offsetof(FEncounterMobInstance, VolumePointProvider) == 0x000018, "Member 'FEncounterMobInstance::VolumePointProvider' has a wrong offset!");
static_assert(offsetof(FEncounterMobInstance, CurrentPointProviders) == 0x000030, "Member 'FEncounterMobInstance::CurrentPointProviders' has a wrong offset!");

// ScriptStruct EncountersRuntime.ActorAddLooseTagsStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FActorAddLooseTagsStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FActorAddLooseTagsStateTreeTask) == 0x000008, "Wrong alignment on FActorAddLooseTagsStateTreeTask");
static_assert(sizeof(FActorAddLooseTagsStateTreeTask) == 0x000020, "Wrong size on FActorAddLooseTagsStateTreeTask");

// ScriptStruct EncountersRuntime.ActorPhysicsStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FActorPhysicsStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      ActorQuery;                                        // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	bool                                          bShouldWakeup;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorPhysicsStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FActorPhysicsStateTreeTaskInstanceData");
static_assert(sizeof(FActorPhysicsStateTreeTaskInstanceData) == 0x000058, "Wrong size on FActorPhysicsStateTreeTaskInstanceData");
static_assert(offsetof(FActorPhysicsStateTreeTaskInstanceData, ActorQuery) == 0x000000, "Member 'FActorPhysicsStateTreeTaskInstanceData::ActorQuery' has a wrong offset!");
static_assert(offsetof(FActorPhysicsStateTreeTaskInstanceData, bShouldWakeup) == 0x000048, "Member 'FActorPhysicsStateTreeTaskInstanceData::bShouldWakeup' has a wrong offset!");
static_assert(offsetof(FActorPhysicsStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FActorPhysicsStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.ActorPhysicsStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FActorPhysicsStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FActorPhysicsStateTreeTask) == 0x000008, "Wrong alignment on FActorPhysicsStateTreeTask");
static_assert(sizeof(FActorPhysicsStateTreeTask) == 0x000020, "Wrong size on FActorPhysicsStateTreeTask");

// ScriptStruct EncountersRuntime.AddEncounterPrefabTagStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FAddEncounterPrefabTagStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           PrefabTag;                                         // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnExit;                                     // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAddEncounterPrefabTagStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FAddEncounterPrefabTagStateTreeTaskInstanceData");
static_assert(sizeof(FAddEncounterPrefabTagStateTreeTaskInstanceData) == 0x000010, "Wrong size on FAddEncounterPrefabTagStateTreeTaskInstanceData");
static_assert(offsetof(FAddEncounterPrefabTagStateTreeTaskInstanceData, PrefabTag) == 0x000000, "Member 'FAddEncounterPrefabTagStateTreeTaskInstanceData::PrefabTag' has a wrong offset!");
static_assert(offsetof(FAddEncounterPrefabTagStateTreeTaskInstanceData, bRemoveOnExit) == 0x000004, "Member 'FAddEncounterPrefabTagStateTreeTaskInstanceData::bRemoveOnExit' has a wrong offset!");
static_assert(offsetof(FAddEncounterPrefabTagStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FAddEncounterPrefabTagStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.AddEncounterPrefabTagStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FAddEncounterPrefabTagStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FAddEncounterPrefabTagStateTreeTask) == 0x000008, "Wrong alignment on FAddEncounterPrefabTagStateTreeTask");
static_assert(sizeof(FAddEncounterPrefabTagStateTreeTask) == 0x000020, "Wrong size on FAddEncounterPrefabTagStateTreeTask");

// ScriptStruct EncountersRuntime.AddGameplayCueStateTreeTaskInstanceData
// 0x0018 (0x0018 - 0x0000)
struct FAddGameplayCueStateTreeTaskInstanceData final
{
public:
	struct FGameplayCueTag                        GameplayCue;                                       // 0x0000(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAddGameplayCueStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FAddGameplayCueStateTreeTaskInstanceData");
static_assert(sizeof(FAddGameplayCueStateTreeTaskInstanceData) == 0x000018, "Wrong size on FAddGameplayCueStateTreeTaskInstanceData");
static_assert(offsetof(FAddGameplayCueStateTreeTaskInstanceData, GameplayCue) == 0x000000, "Member 'FAddGameplayCueStateTreeTaskInstanceData::GameplayCue' has a wrong offset!");
static_assert(offsetof(FAddGameplayCueStateTreeTaskInstanceData, TargetActor) == 0x000004, "Member 'FAddGameplayCueStateTreeTaskInstanceData::TargetActor' has a wrong offset!");
static_assert(offsetof(FAddGameplayCueStateTreeTaskInstanceData, bIsLooping) == 0x00000C, "Member 'FAddGameplayCueStateTreeTaskInstanceData::bIsLooping' has a wrong offset!");
static_assert(offsetof(FAddGameplayCueStateTreeTaskInstanceData, UserActor) == 0x000010, "Member 'FAddGameplayCueStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.AddGameplayCueStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FAddGameplayCueStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FAddGameplayCueStateTreeTask) == 0x000008, "Wrong alignment on FAddGameplayCueStateTreeTask");
static_assert(sizeof(FAddGameplayCueStateTreeTask) == 0x000020, "Wrong size on FAddGameplayCueStateTreeTask");

// ScriptStruct EncountersRuntime.DestroyActorsStateTreeTaskInstanceData
// 0x0050 (0x0050 - 0x0000)
struct FDestroyActorsStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      ActorQuery;                                        // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDestroyActorsStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FDestroyActorsStateTreeTaskInstanceData");
static_assert(sizeof(FDestroyActorsStateTreeTaskInstanceData) == 0x000050, "Wrong size on FDestroyActorsStateTreeTaskInstanceData");
static_assert(offsetof(FDestroyActorsStateTreeTaskInstanceData, ActorQuery) == 0x000000, "Member 'FDestroyActorsStateTreeTaskInstanceData::ActorQuery' has a wrong offset!");
static_assert(offsetof(FDestroyActorsStateTreeTaskInstanceData, UserActor) == 0x000048, "Member 'FDestroyActorsStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.DestroyActorsStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FDestroyActorsStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FDestroyActorsStateTreeTask) == 0x000008, "Wrong alignment on FDestroyActorsStateTreeTask");
static_assert(sizeof(FDestroyActorsStateTreeTask) == 0x000020, "Wrong size on FDestroyActorsStateTreeTask");

// ScriptStruct EncountersRuntime.EnableEncounterPointProvidersStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FEnableEncounterPointProvidersStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      ProviderTagQuery;                                  // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	bool                                          bEnableProvider;                                   // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnableEncounterPointProvidersStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEnableEncounterPointProvidersStateTreeTaskInstanceData");
static_assert(sizeof(FEnableEncounterPointProvidersStateTreeTaskInstanceData) == 0x000058, "Wrong size on FEnableEncounterPointProvidersStateTreeTaskInstanceData");
static_assert(offsetof(FEnableEncounterPointProvidersStateTreeTaskInstanceData, ProviderTagQuery) == 0x000000, "Member 'FEnableEncounterPointProvidersStateTreeTaskInstanceData::ProviderTagQuery' has a wrong offset!");
static_assert(offsetof(FEnableEncounterPointProvidersStateTreeTaskInstanceData, bEnableProvider) == 0x000048, "Member 'FEnableEncounterPointProvidersStateTreeTaskInstanceData::bEnableProvider' has a wrong offset!");
static_assert(offsetof(FEnableEncounterPointProvidersStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FEnableEncounterPointProvidersStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.StopMobEncounterStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FStopMobEncounterStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           MobIdentifier;                                     // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStopMobEncounterStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FStopMobEncounterStateTreeTaskInstanceData");
static_assert(sizeof(FStopMobEncounterStateTreeTaskInstanceData) == 0x000010, "Wrong size on FStopMobEncounterStateTreeTaskInstanceData");
static_assert(offsetof(FStopMobEncounterStateTreeTaskInstanceData, MobIdentifier) == 0x000000, "Member 'FStopMobEncounterStateTreeTaskInstanceData::MobIdentifier' has a wrong offset!");
static_assert(offsetof(FStopMobEncounterStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FStopMobEncounterStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EnableEncounterPointProvidersStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEnableEncounterPointProvidersStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEnableEncounterPointProvidersStateTreeTask) == 0x000008, "Wrong alignment on FEnableEncounterPointProvidersStateTreeTask");
static_assert(sizeof(FEnableEncounterPointProvidersStateTreeTask) == 0x000020, "Wrong size on FEnableEncounterPointProvidersStateTreeTask");

// ScriptStruct EncountersRuntime.EnableSmartObjectsStateTreeTaskInstanceData
// 0x0070 (0x0070 - 0x0000)
struct FEnableSmartObjectsStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      ActorQuery;                                        // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         AIActors;                                          // 0x0058(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FFortAICommandSOUsageDataBase          AICommandSOUsageData;                              // 0x0068(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnableSmartObjectsStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEnableSmartObjectsStateTreeTaskInstanceData");
static_assert(sizeof(FEnableSmartObjectsStateTreeTaskInstanceData) == 0x000070, "Wrong size on FEnableSmartObjectsStateTreeTaskInstanceData");
static_assert(offsetof(FEnableSmartObjectsStateTreeTaskInstanceData, ActorQuery) == 0x000000, "Member 'FEnableSmartObjectsStateTreeTaskInstanceData::ActorQuery' has a wrong offset!");
static_assert(offsetof(FEnableSmartObjectsStateTreeTaskInstanceData, bEnable) == 0x000048, "Member 'FEnableSmartObjectsStateTreeTaskInstanceData::bEnable' has a wrong offset!");
static_assert(offsetof(FEnableSmartObjectsStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FEnableSmartObjectsStateTreeTaskInstanceData::UserActor' has a wrong offset!");
static_assert(offsetof(FEnableSmartObjectsStateTreeTaskInstanceData, AIActors) == 0x000058, "Member 'FEnableSmartObjectsStateTreeTaskInstanceData::AIActors' has a wrong offset!");
static_assert(offsetof(FEnableSmartObjectsStateTreeTaskInstanceData, AICommandSOUsageData) == 0x000068, "Member 'FEnableSmartObjectsStateTreeTaskInstanceData::AICommandSOUsageData' has a wrong offset!");

// ScriptStruct EncountersRuntime.EnableSmartObjectsStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEnableSmartObjectsStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEnableSmartObjectsStateTreeTask) == 0x000008, "Wrong alignment on FEnableSmartObjectsStateTreeTask");
static_assert(sizeof(FEnableSmartObjectsStateTreeTask) == 0x000020, "Wrong size on FEnableSmartObjectsStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterFactionRow
// 0x0010 (0x0018 - 0x0008)
struct FEncounterFactionRow final : public FTableRowBase
{
public:
	class UEncounterFactionData*                  FactionData;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterFactionRow) == 0x000008, "Wrong alignment on FEncounterFactionRow");
static_assert(sizeof(FEncounterFactionRow) == 0x000018, "Wrong size on FEncounterFactionRow");
static_assert(offsetof(FEncounterFactionRow, FactionData) == 0x000008, "Member 'FEncounterFactionRow::FactionData' has a wrong offset!");
static_assert(offsetof(FEncounterFactionRow, Weight) == 0x000010, "Member 'FEncounterFactionRow::Weight' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetKillCountStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FEncounterGetKillCountStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetKillCountStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetKillCountStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetKillCountStateTreeTaskInstanceData) == 0x000058, "Wrong size on FEncounterGetKillCountStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetKillCountStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FEncounterGetKillCountStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FEncounterGetKillCountStateTreeTaskInstanceData, Value) == 0x000048, "Member 'FEncounterGetKillCountStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetKillCountStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FEncounterGetKillCountStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetKillCountStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetKillCountStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetKillCountStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetKillCountStateTreeTask");
static_assert(sizeof(FEncounterGetKillCountStateTreeTask) == 0x000020, "Wrong size on FEncounterGetKillCountStateTreeTask");

// ScriptStruct EncountersRuntime.StartMobEncounterStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FStartMobEncounterStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           MobIdentifier;                                     // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartMobEncounterStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FStartMobEncounterStateTreeTaskInstanceData");
static_assert(sizeof(FStartMobEncounterStateTreeTaskInstanceData) == 0x000010, "Wrong size on FStartMobEncounterStateTreeTaskInstanceData");
static_assert(offsetof(FStartMobEncounterStateTreeTaskInstanceData, MobIdentifier) == 0x000000, "Member 'FStartMobEncounterStateTreeTaskInstanceData::MobIdentifier' has a wrong offset!");
static_assert(offsetof(FStartMobEncounterStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FStartMobEncounterStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetPersistentValueStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FEncounterGetPersistentValueStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetPersistentValueStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetPersistentValueStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetPersistentValueStateTreeTaskInstanceData) == 0x000010, "Wrong size on FEncounterGetPersistentValueStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetPersistentValueStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetPersistentValueStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetPersistentValueStateTreeTaskInstanceData, Value) == 0x000004, "Member 'FEncounterGetPersistentValueStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetPersistentValueStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FEncounterGetPersistentValueStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetPersistentValueStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetPersistentValueStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetPersistentValueStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetPersistentValueStateTreeTask");
static_assert(sizeof(FEncounterGetPersistentValueStateTreeTask) == 0x000020, "Wrong size on FEncounterGetPersistentValueStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterPrefabInfo
// 0x0038 (0x0038 - 0x0000)
struct FEncounterPrefabInfo final
{
public:
	class UEncounterItemDefinition*               EncounterDefinition;                               // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EncounterIdentifierTag;                            // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Weight;                                            // 0x0010(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterPrefabInfo) == 0x000008, "Wrong alignment on FEncounterPrefabInfo");
static_assert(sizeof(FEncounterPrefabInfo) == 0x000038, "Wrong size on FEncounterPrefabInfo");
static_assert(offsetof(FEncounterPrefabInfo, EncounterDefinition) == 0x000000, "Member 'FEncounterPrefabInfo::EncounterDefinition' has a wrong offset!");
static_assert(offsetof(FEncounterPrefabInfo, EncounterIdentifierTag) == 0x000008, "Member 'FEncounterPrefabInfo::EncounterIdentifierTag' has a wrong offset!");
static_assert(offsetof(FEncounterPrefabInfo, Weight) == 0x000010, "Member 'FEncounterPrefabInfo::Weight' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetRemainingCountStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FEncounterGetRemainingCountStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetRemainingCountStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetRemainingCountStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetRemainingCountStateTreeTaskInstanceData) == 0x000058, "Wrong size on FEncounterGetRemainingCountStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetRemainingCountStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FEncounterGetRemainingCountStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FEncounterGetRemainingCountStateTreeTaskInstanceData, Value) == 0x000048, "Member 'FEncounterGetRemainingCountStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetRemainingCountStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FEncounterGetRemainingCountStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetRemainingCountStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetRemainingCountStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetRemainingCountStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetRemainingCountStateTreeTask");
static_assert(sizeof(FEncounterGetRemainingCountStateTreeTask) == 0x000020, "Wrong size on FEncounterGetRemainingCountStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterRewardBehavior
// 0x0080 (0x0080 - 0x0000)
struct FEncounterRewardBehavior final
{
public:
	struct FVector                                RewardOffset;                                      // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RewardDirection;                                   // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RewardConeAngle;                                   // 0x0030(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RewardFlingMagnitude;                              // 0x0058(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterRewardBehavior) == 0x000008, "Wrong alignment on FEncounterRewardBehavior");
static_assert(sizeof(FEncounterRewardBehavior) == 0x000080, "Wrong size on FEncounterRewardBehavior");
static_assert(offsetof(FEncounterRewardBehavior, RewardOffset) == 0x000000, "Member 'FEncounterRewardBehavior::RewardOffset' has a wrong offset!");
static_assert(offsetof(FEncounterRewardBehavior, RewardDirection) == 0x000018, "Member 'FEncounterRewardBehavior::RewardDirection' has a wrong offset!");
static_assert(offsetof(FEncounterRewardBehavior, RewardConeAngle) == 0x000030, "Member 'FEncounterRewardBehavior::RewardConeAngle' has a wrong offset!");
static_assert(offsetof(FEncounterRewardBehavior, RewardFlingMagnitude) == 0x000058, "Member 'FEncounterRewardBehavior::RewardFlingMagnitude' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableActorClassStateTreeTaskInstanceData
// 0x0030 (0x0030 - 0x0000)
struct FEncounterGetVariableActorClassStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Value;                                             // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableActorClassStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableActorClassStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableActorClassStateTreeTaskInstanceData) == 0x000030, "Wrong size on FEncounterGetVariableActorClassStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableActorClassStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableActorClassStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableActorClassStateTreeTaskInstanceData, Value) == 0x000008, "Member 'FEncounterGetVariableActorClassStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableActorClassStateTreeTaskInstanceData, UserActor) == 0x000028, "Member 'FEncounterGetVariableActorClassStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableActorClassStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableActorClassStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableActorClassStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableActorClassStateTreeTask");
static_assert(sizeof(FEncounterGetVariableActorClassStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableActorClassStateTreeTask");

// ScriptStruct EncountersRuntime.SpawnActorStateTreeTaskInstanceData
// 0x00E8 (0x00E8 - 0x0000)
struct FSpawnActorStateTreeTaskInstanceData final
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      AnchorQuery;                                       // 0x0020(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                AnchorOffset;                                      // 0x0068(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePhysics;                                    // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachEncounterVolume;                            // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0088(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActorIdentifierTags;                               // 0x00A8(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          bWaitForSpawnedActor;                              // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  SpawnedActor;                                      // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x00D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpawnActorTaskHelper*                  SpawnActorHelper;                                  // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSpawnActorStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FSpawnActorStateTreeTaskInstanceData");
static_assert(sizeof(FSpawnActorStateTreeTaskInstanceData) == 0x0000E8, "Wrong size on FSpawnActorStateTreeTaskInstanceData");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, ActorClass) == 0x000000, "Member 'FSpawnActorStateTreeTaskInstanceData::ActorClass' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, AnchorQuery) == 0x000020, "Member 'FSpawnActorStateTreeTaskInstanceData::AnchorQuery' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, AnchorOffset) == 0x000068, "Member 'FSpawnActorStateTreeTaskInstanceData::AnchorOffset' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, bEnablePhysics) == 0x000080, "Member 'FSpawnActorStateTreeTaskInstanceData::bEnablePhysics' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, bAttachEncounterVolume) == 0x000081, "Member 'FSpawnActorStateTreeTaskInstanceData::bAttachEncounterVolume' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, ActorTags) == 0x000088, "Member 'FSpawnActorStateTreeTaskInstanceData::ActorTags' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, ActorIdentifierTags) == 0x0000A8, "Member 'FSpawnActorStateTreeTaskInstanceData::ActorIdentifierTags' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, bWaitForSpawnedActor) == 0x0000C8, "Member 'FSpawnActorStateTreeTaskInstanceData::bWaitForSpawnedActor' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, SpawnedActor) == 0x0000CC, "Member 'FSpawnActorStateTreeTaskInstanceData::SpawnedActor' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, UserActor) == 0x0000D8, "Member 'FSpawnActorStateTreeTaskInstanceData::UserActor' has a wrong offset!");
static_assert(offsetof(FSpawnActorStateTreeTaskInstanceData, SpawnActorHelper) == 0x0000E0, "Member 'FSpawnActorStateTreeTaskInstanceData::SpawnActorHelper' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableActorDescriptionStateTreeTaskInstanceData
// 0x0020 (0x0020 - 0x0000)
struct FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription> Value;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData) == 0x000020, "Wrong size on FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData, Value) == 0x000008, "Member 'FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData, UserActor) == 0x000018, "Member 'FEncounterGetVariableActorDescriptionStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableActorDescriptionStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableActorDescriptionStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableActorDescriptionStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableActorDescriptionStateTreeTask");
static_assert(sizeof(FEncounterGetVariableActorDescriptionStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableActorDescriptionStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterGroupEffectInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FEncounterGroupEffectInfo final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterGroupEffectInfo) == 0x000008, "Wrong alignment on FEncounterGroupEffectInfo");
static_assert(sizeof(FEncounterGroupEffectInfo) == 0x000050, "Wrong size on FEncounterGroupEffectInfo");

// ScriptStruct EncountersRuntime.EncounterGetVariableBoolStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FEncounterGetVariableBoolStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableBoolStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableBoolStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableBoolStateTreeTaskInstanceData) == 0x000010, "Wrong size on FEncounterGetVariableBoolStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableBoolStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableBoolStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableBoolStateTreeTaskInstanceData, bValue) == 0x000004, "Member 'FEncounterGetVariableBoolStateTreeTaskInstanceData::bValue' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableBoolStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FEncounterGetVariableBoolStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableBoolStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableBoolStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableBoolStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableBoolStateTreeTask");
static_assert(sizeof(FEncounterGetVariableBoolStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableBoolStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterRemainingCountTransitionStateTreeTask
// 0x0008 (0x0028 - 0x0020)
struct FLWMEncounterRemainingCountTransitionStateTreeTask final : public FStateTreeTaskCommonBase
{
public:
	struct FStateTreeStateLink                    TransitionTo;                                      // 0x0020(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterRemainingCountTransitionStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterRemainingCountTransitionStateTreeTask");
static_assert(sizeof(FLWMEncounterRemainingCountTransitionStateTreeTask) == 0x000028, "Wrong size on FLWMEncounterRemainingCountTransitionStateTreeTask");
static_assert(offsetof(FLWMEncounterRemainingCountTransitionStateTreeTask, TransitionTo) == 0x000020, "Member 'FLWMEncounterRemainingCountTransitionStateTreeTask::TransitionTo' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableFloatStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FEncounterGetVariableFloatStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableFloatStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableFloatStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableFloatStateTreeTaskInstanceData) == 0x000010, "Wrong size on FEncounterGetVariableFloatStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableFloatStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableFloatStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableFloatStateTreeTaskInstanceData, Value) == 0x000004, "Member 'FEncounterGetVariableFloatStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableFloatStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FEncounterGetVariableFloatStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableFloatStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableFloatStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableFloatStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableFloatStateTreeTask");
static_assert(sizeof(FEncounterGetVariableFloatStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableFloatStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterGetVariableGameplayTagContainerStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableGameplayTagContainerStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableGameplayTagContainerStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableGameplayTagContainerStateTreeTask");
static_assert(sizeof(FEncounterGetVariableGameplayTagContainerStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableGameplayTagContainerStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterInfo
// 0x0028 (0x0028 - 0x0000)
struct FLWMEncounterInfo final
{
public:
	class ULWMEncounterInstance*                  LWMEncounter;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterInfo) == 0x000008, "Wrong alignment on FLWMEncounterInfo");
static_assert(sizeof(FLWMEncounterInfo) == 0x000028, "Wrong size on FLWMEncounterInfo");
static_assert(offsetof(FLWMEncounterInfo, LWMEncounter) == 0x000000, "Member 'FLWMEncounterInfo::LWMEncounter' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableGameplayTagStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FEncounterGetVariableGameplayTagStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Value;                                             // 0x0004(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableGameplayTagStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableGameplayTagStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableGameplayTagStateTreeTaskInstanceData) == 0x000010, "Wrong size on FEncounterGetVariableGameplayTagStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableGameplayTagStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableGameplayTagStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableGameplayTagStateTreeTaskInstanceData, Value) == 0x000004, "Member 'FEncounterGetVariableGameplayTagStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableGameplayTagStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FEncounterGetVariableGameplayTagStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterKillCountTransitionStateTreeTask
// 0x0008 (0x0028 - 0x0020)
struct FLWMEncounterKillCountTransitionStateTreeTask final : public FStateTreeTaskCommonBase
{
public:
	struct FStateTreeStateLink                    TransitionTo;                                      // 0x0020(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterKillCountTransitionStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterKillCountTransitionStateTreeTask");
static_assert(sizeof(FLWMEncounterKillCountTransitionStateTreeTask) == 0x000028, "Wrong size on FLWMEncounterKillCountTransitionStateTreeTask");
static_assert(offsetof(FLWMEncounterKillCountTransitionStateTreeTask, TransitionTo) == 0x000020, "Member 'FLWMEncounterKillCountTransitionStateTreeTask::TransitionTo' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableIntStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FEncounterGetVariableIntStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableIntStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableIntStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableIntStateTreeTaskInstanceData) == 0x000010, "Wrong size on FEncounterGetVariableIntStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableIntStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableIntStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableIntStateTreeTaskInstanceData, Value) == 0x000004, "Member 'FEncounterGetVariableIntStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableIntStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FEncounterGetVariableIntStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableIntStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableIntStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableIntStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableIntStateTreeTask");
static_assert(sizeof(FEncounterGetVariableIntStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableIntStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterGetVariableItemDefinitionStateTreeTaskInstanceData
// 0x0030 (0x0030 - 0x0000)
struct FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortWorldItemDefinition> Value;                                             // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData) == 0x000030, "Wrong size on FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData, Value) == 0x000008, "Member 'FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData, UserActor) == 0x000028, "Member 'FEncounterGetVariableItemDefinitionStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableItemDefinitionStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableItemDefinitionStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableItemDefinitionStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableItemDefinitionStateTreeTask");
static_assert(sizeof(FEncounterGetVariableItemDefinitionStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableItemDefinitionStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterGetVariableLWMEncounterStateTreeTaskInstanceData
// 0x0030 (0x0030 - 0x0000)
struct FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> Value;                                             // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData) == 0x000030, "Wrong size on FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData, Value) == 0x000008, "Member 'FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData, UserActor) == 0x000028, "Member 'FEncounterGetVariableLWMEncounterStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterAlertLevelTransitionStateTreeTask
// 0x0008 (0x0028 - 0x0020)
struct FLWMEncounterAlertLevelTransitionStateTreeTask final : public FStateTreeTaskCommonBase
{
public:
	struct FStateTreeStateLink                    TransitionTo;                                      // 0x0020(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterAlertLevelTransitionStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterAlertLevelTransitionStateTreeTask");
static_assert(sizeof(FLWMEncounterAlertLevelTransitionStateTreeTask) == 0x000028, "Wrong size on FLWMEncounterAlertLevelTransitionStateTreeTask");
static_assert(offsetof(FLWMEncounterAlertLevelTransitionStateTreeTask, TransitionTo) == 0x000020, "Member 'FLWMEncounterAlertLevelTransitionStateTreeTask::TransitionTo' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableTagQueryStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FEncounterGetVariableTagQueryStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      Value;                                             // 0x0008(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariableTagQueryStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariableTagQueryStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariableTagQueryStateTreeTaskInstanceData) == 0x000058, "Wrong size on FEncounterGetVariableTagQueryStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariableTagQueryStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterGetVariableTagQueryStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableTagQueryStateTreeTaskInstanceData, Value) == 0x000008, "Member 'FEncounterGetVariableTagQueryStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariableTagQueryStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FEncounterGetVariableTagQueryStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariableTagQueryStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariableTagQueryStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariableTagQueryStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariableTagQueryStateTreeTask");
static_assert(sizeof(FEncounterGetVariableTagQueryStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariableTagQueryStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterGetVariantTagQueryStateTreeTaskInstanceData
// 0x0098 (0x0098 - 0x0000)
struct FEncounterGetVariantTagQueryStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      BaseTagQuery;                                      // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      Value;                                             // 0x0048(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0090(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGetVariantTagQueryStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterGetVariantTagQueryStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterGetVariantTagQueryStateTreeTaskInstanceData) == 0x000098, "Wrong size on FEncounterGetVariantTagQueryStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterGetVariantTagQueryStateTreeTaskInstanceData, BaseTagQuery) == 0x000000, "Member 'FEncounterGetVariantTagQueryStateTreeTaskInstanceData::BaseTagQuery' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariantTagQueryStateTreeTaskInstanceData, Value) == 0x000048, "Member 'FEncounterGetVariantTagQueryStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterGetVariantTagQueryStateTreeTaskInstanceData, UserActor) == 0x000090, "Member 'FEncounterGetVariantTagQueryStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterGetVariantTagQueryStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterGetVariantTagQueryStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterGetVariantTagQueryStateTreeTask) == 0x000008, "Wrong alignment on FEncounterGetVariantTagQueryStateTreeTask");
static_assert(sizeof(FEncounterGetVariantTagQueryStateTreeTask) == 0x000020, "Wrong size on FEncounterGetVariantTagQueryStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterPrefabEntry
// 0x0050 (0x0050 - 0x0000)
struct FEncounterPrefabEntry final
{
public:
	class UEncounterItemDefinition*               EncounterDefinition;                               // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EncounterIdentifierTag;                            // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Weight;                                            // 0x0010(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FWorldConditionQueryDefinition         CanSpawnCondition;                                 // 0x0038(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterPrefabEntry) == 0x000008, "Wrong alignment on FEncounterPrefabEntry");
static_assert(sizeof(FEncounterPrefabEntry) == 0x000050, "Wrong size on FEncounterPrefabEntry");
static_assert(offsetof(FEncounterPrefabEntry, EncounterDefinition) == 0x000000, "Member 'FEncounterPrefabEntry::EncounterDefinition' has a wrong offset!");
static_assert(offsetof(FEncounterPrefabEntry, EncounterIdentifierTag) == 0x000008, "Member 'FEncounterPrefabEntry::EncounterIdentifierTag' has a wrong offset!");
static_assert(offsetof(FEncounterPrefabEntry, Weight) == 0x000010, "Member 'FEncounterPrefabEntry::Weight' has a wrong offset!");
static_assert(offsetof(FEncounterPrefabEntry, CanSpawnCondition) == 0x000038, "Member 'FEncounterPrefabEntry::CanSpawnCondition' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterSelectLWMEncounterStateTreeTaskInstanceData
// 0x00A0 (0x00A0 - 0x0000)
struct FEncounterSelectLWMEncounterStateTreeTaskInstanceData final
{
public:
	class UDataRegistry*                          FactionRegistry;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Capabilities;                                      // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      LWMEncounterTagQuery;                              // 0x0028(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0070(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> LWMEncounter;                                      // 0x0078(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterSelectLWMEncounterStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterSelectLWMEncounterStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterSelectLWMEncounterStateTreeTaskInstanceData) == 0x0000A0, "Wrong size on FEncounterSelectLWMEncounterStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterSelectLWMEncounterStateTreeTaskInstanceData, FactionRegistry) == 0x000000, "Member 'FEncounterSelectLWMEncounterStateTreeTaskInstanceData::FactionRegistry' has a wrong offset!");
static_assert(offsetof(FEncounterSelectLWMEncounterStateTreeTaskInstanceData, Capabilities) == 0x000008, "Member 'FEncounterSelectLWMEncounterStateTreeTaskInstanceData::Capabilities' has a wrong offset!");
static_assert(offsetof(FEncounterSelectLWMEncounterStateTreeTaskInstanceData, LWMEncounterTagQuery) == 0x000028, "Member 'FEncounterSelectLWMEncounterStateTreeTaskInstanceData::LWMEncounterTagQuery' has a wrong offset!");
static_assert(offsetof(FEncounterSelectLWMEncounterStateTreeTaskInstanceData, UserActor) == 0x000070, "Member 'FEncounterSelectLWMEncounterStateTreeTaskInstanceData::UserActor' has a wrong offset!");
static_assert(offsetof(FEncounterSelectLWMEncounterStateTreeTaskInstanceData, LWMEncounter) == 0x000078, "Member 'FEncounterSelectLWMEncounterStateTreeTaskInstanceData::LWMEncounter' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterSelectLWMEncounterStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterSelectLWMEncounterStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterSelectLWMEncounterStateTreeTask) == 0x000008, "Wrong alignment on FEncounterSelectLWMEncounterStateTreeTask");
static_assert(sizeof(FEncounterSelectLWMEncounterStateTreeTask) == 0x000020, "Wrong size on FEncounterSelectLWMEncounterStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterSelectLWMEncounterTableStateTreeTaskInstanceData
// 0x0038 (0x0038 - 0x0000)
struct FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData final
{
public:
	class UDataRegistry*                          FactionRegistry;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Capabilities;                                      // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData) == 0x000038, "Wrong size on FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData, FactionRegistry) == 0x000000, "Member 'FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData::FactionRegistry' has a wrong offset!");
static_assert(offsetof(FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData, Capabilities) == 0x000008, "Member 'FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData::Capabilities' has a wrong offset!");
static_assert(offsetof(FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData, UserActor) == 0x000028, "Member 'FEncounterSelectLWMEncounterTableStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterSelectLWMEncounterTableStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterSelectLWMEncounterTableStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterSelectLWMEncounterTableStateTreeTask) == 0x000008, "Wrong alignment on FEncounterSelectLWMEncounterTableStateTreeTask");
static_assert(sizeof(FEncounterSelectLWMEncounterTableStateTreeTask) == 0x000020, "Wrong size on FEncounterSelectLWMEncounterTableStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterSetCenterActorStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FEncounterSetCenterActorStateTreeTaskInstanceData final
{
public:
	TWeakObjectPtr<class AActor>                  CenterActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterSetCenterActorStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterSetCenterActorStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterSetCenterActorStateTreeTaskInstanceData) == 0x000010, "Wrong size on FEncounterSetCenterActorStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterSetCenterActorStateTreeTaskInstanceData, CenterActor) == 0x000000, "Member 'FEncounterSetCenterActorStateTreeTaskInstanceData::CenterActor' has a wrong offset!");
static_assert(offsetof(FEncounterSetCenterActorStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FEncounterSetCenterActorStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterSetCenterActorStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterSetCenterActorStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterSetCenterActorStateTreeTask) == 0x000008, "Wrong alignment on FEncounterSetCenterActorStateTreeTask");
static_assert(sizeof(FEncounterSetCenterActorStateTreeTask) == 0x000020, "Wrong size on FEncounterSetCenterActorStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterSetPersistentValueStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FEncounterSetPersistentValueStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           VariableIdentifier;                                // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterSetPersistentValueStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterSetPersistentValueStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterSetPersistentValueStateTreeTaskInstanceData) == 0x000010, "Wrong size on FEncounterSetPersistentValueStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterSetPersistentValueStateTreeTaskInstanceData, VariableIdentifier) == 0x000000, "Member 'FEncounterSetPersistentValueStateTreeTaskInstanceData::VariableIdentifier' has a wrong offset!");
static_assert(offsetof(FEncounterSetPersistentValueStateTreeTaskInstanceData, Value) == 0x000004, "Member 'FEncounterSetPersistentValueStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FEncounterSetPersistentValueStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FEncounterSetPersistentValueStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterSetPersistentValueStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEncounterSetPersistentValueStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEncounterSetPersistentValueStateTreeTask) == 0x000008, "Wrong alignment on FEncounterSetPersistentValueStateTreeTask");
static_assert(sizeof(FEncounterSetPersistentValueStateTreeTask) == 0x000020, "Wrong size on FEncounterSetPersistentValueStateTreeTask");

// ScriptStruct EncountersRuntime.EncounterVariable
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEncounterVariable
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           VarName;                                           // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterVariable) == 0x000008, "Wrong alignment on FEncounterVariable");
static_assert(sizeof(FEncounterVariable) == 0x000010, "Wrong size on FEncounterVariable");
static_assert(offsetof(FEncounterVariable, VarName) == 0x000008, "Member 'FEncounterVariable::VarName' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEncounterVariableSelections
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           VarName;                                           // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterVariableSelections) == 0x000008, "Wrong alignment on FEncounterVariableSelections");
static_assert(sizeof(FEncounterVariableSelections) == 0x000010, "Wrong size on FEncounterVariableSelections");
static_assert(offsetof(FEncounterVariableSelections, VarName) == 0x000008, "Member 'FEncounterVariableSelections::VarName' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow
// 0x0068 (0x0070 - 0x0008)
struct FEncounterVariableSelectionsRow : public FTableRowBase
{
public:
	struct FGameplayTagQuery                      RequiredCapabilities;                              // 0x0008(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FWorldConditionQueryDefinition         WorldConditionDefinition;                          // 0x0050(0x0018)(Edit, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterVariableSelectionsRow) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow");
static_assert(sizeof(FEncounterVariableSelectionsRow) == 0x000070, "Wrong size on FEncounterVariableSelectionsRow");
static_assert(offsetof(FEncounterVariableSelectionsRow, RequiredCapabilities) == 0x000008, "Member 'FEncounterVariableSelectionsRow::RequiredCapabilities' has a wrong offset!");
static_assert(offsetof(FEncounterVariableSelectionsRow, WorldConditionDefinition) == 0x000050, "Member 'FEncounterVariableSelectionsRow::WorldConditionDefinition' has a wrong offset!");
static_assert(offsetof(FEncounterVariableSelectionsRow, Weight) == 0x000068, "Member 'FEncounterVariableSelectionsRow::Weight' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow_ActorClass
// 0x0010 (0x0080 - 0x0070)
struct FEncounterVariableSelectionsRow_ActorClass final : public FEncounterVariableSelectionsRow
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelectionsRow_ActorClass) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow_ActorClass");
static_assert(sizeof(FEncounterVariableSelectionsRow_ActorClass) == 0x000080, "Wrong size on FEncounterVariableSelectionsRow_ActorClass");
static_assert(offsetof(FEncounterVariableSelectionsRow_ActorClass, RowValue) == 0x000070, "Member 'FEncounterVariableSelectionsRow_ActorClass::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow_ActorDescription
// 0x0010 (0x0080 - 0x0070)
struct FEncounterVariableSelectionsRow_ActorDescription final : public FEncounterVariableSelectionsRow
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelectionsRow_ActorDescription) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow_ActorDescription");
static_assert(sizeof(FEncounterVariableSelectionsRow_ActorDescription) == 0x000080, "Wrong size on FEncounterVariableSelectionsRow_ActorDescription");
static_assert(offsetof(FEncounterVariableSelectionsRow_ActorDescription, RowValue) == 0x000070, "Member 'FEncounterVariableSelectionsRow_ActorDescription::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow_Boolean
// 0x0010 (0x0080 - 0x0070)
struct FEncounterVariableSelectionsRow_Boolean final : public FEncounterVariableSelectionsRow
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelectionsRow_Boolean) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow_Boolean");
static_assert(sizeof(FEncounterVariableSelectionsRow_Boolean) == 0x000080, "Wrong size on FEncounterVariableSelectionsRow_Boolean");
static_assert(offsetof(FEncounterVariableSelectionsRow_Boolean, RowValue) == 0x000070, "Member 'FEncounterVariableSelectionsRow_Boolean::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow_Float
// 0x0010 (0x0080 - 0x0070)
struct FEncounterVariableSelectionsRow_Float final : public FEncounterVariableSelectionsRow
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelectionsRow_Float) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow_Float");
static_assert(sizeof(FEncounterVariableSelectionsRow_Float) == 0x000080, "Wrong size on FEncounterVariableSelectionsRow_Float");
static_assert(offsetof(FEncounterVariableSelectionsRow_Float, RowValue) == 0x000070, "Member 'FEncounterVariableSelectionsRow_Float::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow_GameplayTag
// 0x0010 (0x0080 - 0x0070)
struct FEncounterVariableSelectionsRow_GameplayTag final : public FEncounterVariableSelectionsRow
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelectionsRow_GameplayTag) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow_GameplayTag");
static_assert(sizeof(FEncounterVariableSelectionsRow_GameplayTag) == 0x000080, "Wrong size on FEncounterVariableSelectionsRow_GameplayTag");
static_assert(offsetof(FEncounterVariableSelectionsRow_GameplayTag, RowValue) == 0x000070, "Member 'FEncounterVariableSelectionsRow_GameplayTag::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow_GameplayTagContainer
// 0x0010 (0x0080 - 0x0070)
struct FEncounterVariableSelectionsRow_GameplayTagContainer final : public FEncounterVariableSelectionsRow
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelectionsRow_GameplayTagContainer) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow_GameplayTagContainer");
static_assert(sizeof(FEncounterVariableSelectionsRow_GameplayTagContainer) == 0x000080, "Wrong size on FEncounterVariableSelectionsRow_GameplayTagContainer");
static_assert(offsetof(FEncounterVariableSelectionsRow_GameplayTagContainer, RowValue) == 0x000070, "Member 'FEncounterVariableSelectionsRow_GameplayTagContainer::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow_Integer
// 0x0010 (0x0080 - 0x0070)
struct FEncounterVariableSelectionsRow_Integer final : public FEncounterVariableSelectionsRow
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelectionsRow_Integer) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow_Integer");
static_assert(sizeof(FEncounterVariableSelectionsRow_Integer) == 0x000080, "Wrong size on FEncounterVariableSelectionsRow_Integer");
static_assert(offsetof(FEncounterVariableSelectionsRow_Integer, RowValue) == 0x000070, "Member 'FEncounterVariableSelectionsRow_Integer::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow_LWMEncounter
// 0x0010 (0x0080 - 0x0070)
struct FEncounterVariableSelectionsRow_LWMEncounter final : public FEncounterVariableSelectionsRow
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelectionsRow_LWMEncounter) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow_LWMEncounter");
static_assert(sizeof(FEncounterVariableSelectionsRow_LWMEncounter) == 0x000080, "Wrong size on FEncounterVariableSelectionsRow_LWMEncounter");
static_assert(offsetof(FEncounterVariableSelectionsRow_LWMEncounter, RowValue) == 0x000070, "Member 'FEncounterVariableSelectionsRow_LWMEncounter::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelectionsRow_TagQuery
// 0x0010 (0x0080 - 0x0070)
struct FEncounterVariableSelectionsRow_TagQuery final : public FEncounterVariableSelectionsRow
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelectionsRow_TagQuery) == 0x000008, "Wrong alignment on FEncounterVariableSelectionsRow_TagQuery");
static_assert(sizeof(FEncounterVariableSelectionsRow_TagQuery) == 0x000080, "Wrong size on FEncounterVariableSelectionsRow_TagQuery");
static_assert(offsetof(FEncounterVariableSelectionsRow_TagQuery, RowValue) == 0x000070, "Member 'FEncounterVariableSelectionsRow_TagQuery::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections_ActorClass
// 0x0008 (0x0018 - 0x0010)
struct FEncounterVariableSelections_ActorClass final : public FEncounterVariableSelections
{
public:
	class UDataTable*                             ValueChoiceTable;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelections_ActorClass) == 0x000008, "Wrong alignment on FEncounterVariableSelections_ActorClass");
static_assert(sizeof(FEncounterVariableSelections_ActorClass) == 0x000018, "Wrong size on FEncounterVariableSelections_ActorClass");
static_assert(offsetof(FEncounterVariableSelections_ActorClass, ValueChoiceTable) == 0x000010, "Member 'FEncounterVariableSelections_ActorClass::ValueChoiceTable' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections_ActorDescription
// 0x0008 (0x0018 - 0x0010)
struct FEncounterVariableSelections_ActorDescription final : public FEncounterVariableSelections
{
public:
	class UDataTable*                             ValueChoiceTable;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelections_ActorDescription) == 0x000008, "Wrong alignment on FEncounterVariableSelections_ActorDescription");
static_assert(sizeof(FEncounterVariableSelections_ActorDescription) == 0x000018, "Wrong size on FEncounterVariableSelections_ActorDescription");
static_assert(offsetof(FEncounterVariableSelections_ActorDescription, ValueChoiceTable) == 0x000010, "Member 'FEncounterVariableSelections_ActorDescription::ValueChoiceTable' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections_Boolean
// 0x0008 (0x0018 - 0x0010)
struct FEncounterVariableSelections_Boolean final : public FEncounterVariableSelections
{
public:
	class UDataTable*                             ValueChoiceTable;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelections_Boolean) == 0x000008, "Wrong alignment on FEncounterVariableSelections_Boolean");
static_assert(sizeof(FEncounterVariableSelections_Boolean) == 0x000018, "Wrong size on FEncounterVariableSelections_Boolean");
static_assert(offsetof(FEncounterVariableSelections_Boolean, ValueChoiceTable) == 0x000010, "Member 'FEncounterVariableSelections_Boolean::ValueChoiceTable' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections_Float
// 0x0008 (0x0018 - 0x0010)
struct FEncounterVariableSelections_Float final : public FEncounterVariableSelections
{
public:
	class UDataTable*                             ValueChoiceTable;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelections_Float) == 0x000008, "Wrong alignment on FEncounterVariableSelections_Float");
static_assert(sizeof(FEncounterVariableSelections_Float) == 0x000018, "Wrong size on FEncounterVariableSelections_Float");
static_assert(offsetof(FEncounterVariableSelections_Float, ValueChoiceTable) == 0x000010, "Member 'FEncounterVariableSelections_Float::ValueChoiceTable' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections_GameplayTag
// 0x0008 (0x0018 - 0x0010)
struct FEncounterVariableSelections_GameplayTag final : public FEncounterVariableSelections
{
public:
	class UDataTable*                             ValueChoiceTable;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelections_GameplayTag) == 0x000008, "Wrong alignment on FEncounterVariableSelections_GameplayTag");
static_assert(sizeof(FEncounterVariableSelections_GameplayTag) == 0x000018, "Wrong size on FEncounterVariableSelections_GameplayTag");
static_assert(offsetof(FEncounterVariableSelections_GameplayTag, ValueChoiceTable) == 0x000010, "Member 'FEncounterVariableSelections_GameplayTag::ValueChoiceTable' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections_GameplayTagContainer
// 0x0008 (0x0018 - 0x0010)
struct FEncounterVariableSelections_GameplayTagContainer final : public FEncounterVariableSelections
{
public:
	class UDataTable*                             ValueChoiceTable;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelections_GameplayTagContainer) == 0x000008, "Wrong alignment on FEncounterVariableSelections_GameplayTagContainer");
static_assert(sizeof(FEncounterVariableSelections_GameplayTagContainer) == 0x000018, "Wrong size on FEncounterVariableSelections_GameplayTagContainer");
static_assert(offsetof(FEncounterVariableSelections_GameplayTagContainer, ValueChoiceTable) == 0x000010, "Member 'FEncounterVariableSelections_GameplayTagContainer::ValueChoiceTable' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections_Integer
// 0x0008 (0x0018 - 0x0010)
struct FEncounterVariableSelections_Integer final : public FEncounterVariableSelections
{
public:
	class UDataTable*                             ValueChoiceTable;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelections_Integer) == 0x000008, "Wrong alignment on FEncounterVariableSelections_Integer");
static_assert(sizeof(FEncounterVariableSelections_Integer) == 0x000018, "Wrong size on FEncounterVariableSelections_Integer");
static_assert(offsetof(FEncounterVariableSelections_Integer, ValueChoiceTable) == 0x000010, "Member 'FEncounterVariableSelections_Integer::ValueChoiceTable' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections_LWMEncounter
// 0x0008 (0x0018 - 0x0010)
struct FEncounterVariableSelections_LWMEncounter final : public FEncounterVariableSelections
{
public:
	class UDataTable*                             ValueChoiceTable;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelections_LWMEncounter) == 0x000008, "Wrong alignment on FEncounterVariableSelections_LWMEncounter");
static_assert(sizeof(FEncounterVariableSelections_LWMEncounter) == 0x000018, "Wrong size on FEncounterVariableSelections_LWMEncounter");
static_assert(offsetof(FEncounterVariableSelections_LWMEncounter, ValueChoiceTable) == 0x000010, "Member 'FEncounterVariableSelections_LWMEncounter::ValueChoiceTable' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariableSelections_TagQuery
// 0x0008 (0x0018 - 0x0010)
struct FEncounterVariableSelections_TagQuery final : public FEncounterVariableSelections
{
public:
	class UDataTable*                             ValueChoiceTable;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariableSelections_TagQuery) == 0x000008, "Wrong alignment on FEncounterVariableSelections_TagQuery");
static_assert(sizeof(FEncounterVariableSelections_TagQuery) == 0x000018, "Wrong size on FEncounterVariableSelections_TagQuery");
static_assert(offsetof(FEncounterVariableSelections_TagQuery, ValueChoiceTable) == 0x000010, "Member 'FEncounterVariableSelections_TagQuery::ValueChoiceTable' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_ActorClass
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_ActorClass final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_ActorClass) == 0x000008, "Wrong alignment on FEncounterVariable_ActorClass");
static_assert(sizeof(FEncounterVariable_ActorClass) == 0x000020, "Wrong size on FEncounterVariable_ActorClass");
static_assert(offsetof(FEncounterVariable_ActorClass, RowValue) == 0x000010, "Member 'FEncounterVariable_ActorClass::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_ActorDescription
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_ActorDescription final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_ActorDescription) == 0x000008, "Wrong alignment on FEncounterVariable_ActorDescription");
static_assert(sizeof(FEncounterVariable_ActorDescription) == 0x000020, "Wrong size on FEncounterVariable_ActorDescription");
static_assert(offsetof(FEncounterVariable_ActorDescription, RowValue) == 0x000010, "Member 'FEncounterVariable_ActorDescription::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_Boolean
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_Boolean final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_Boolean) == 0x000008, "Wrong alignment on FEncounterVariable_Boolean");
static_assert(sizeof(FEncounterVariable_Boolean) == 0x000020, "Wrong size on FEncounterVariable_Boolean");
static_assert(offsetof(FEncounterVariable_Boolean, RowValue) == 0x000010, "Member 'FEncounterVariable_Boolean::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_Float
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_Float final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_Float) == 0x000008, "Wrong alignment on FEncounterVariable_Float");
static_assert(sizeof(FEncounterVariable_Float) == 0x000020, "Wrong size on FEncounterVariable_Float");
static_assert(offsetof(FEncounterVariable_Float, RowValue) == 0x000010, "Member 'FEncounterVariable_Float::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_GameplayTag
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_GameplayTag final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_GameplayTag) == 0x000008, "Wrong alignment on FEncounterVariable_GameplayTag");
static_assert(sizeof(FEncounterVariable_GameplayTag) == 0x000020, "Wrong size on FEncounterVariable_GameplayTag");
static_assert(offsetof(FEncounterVariable_GameplayTag, RowValue) == 0x000010, "Member 'FEncounterVariable_GameplayTag::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_GameplayTagContainer
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_GameplayTagContainer final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_GameplayTagContainer) == 0x000008, "Wrong alignment on FEncounterVariable_GameplayTagContainer");
static_assert(sizeof(FEncounterVariable_GameplayTagContainer) == 0x000020, "Wrong size on FEncounterVariable_GameplayTagContainer");
static_assert(offsetof(FEncounterVariable_GameplayTagContainer, RowValue) == 0x000010, "Member 'FEncounterVariable_GameplayTagContainer::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_Integer
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_Integer final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_Integer) == 0x000008, "Wrong alignment on FEncounterVariable_Integer");
static_assert(sizeof(FEncounterVariable_Integer) == 0x000020, "Wrong size on FEncounterVariable_Integer");
static_assert(offsetof(FEncounterVariable_Integer, RowValue) == 0x000010, "Member 'FEncounterVariable_Integer::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_ItemDefinition
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_ItemDefinition final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_ItemDefinition) == 0x000008, "Wrong alignment on FEncounterVariable_ItemDefinition");
static_assert(sizeof(FEncounterVariable_ItemDefinition) == 0x000020, "Wrong size on FEncounterVariable_ItemDefinition");
static_assert(offsetof(FEncounterVariable_ItemDefinition, RowValue) == 0x000010, "Member 'FEncounterVariable_ItemDefinition::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_LWMEncounter
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_LWMEncounter final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_LWMEncounter) == 0x000008, "Wrong alignment on FEncounterVariable_LWMEncounter");
static_assert(sizeof(FEncounterVariable_LWMEncounter) == 0x000020, "Wrong size on FEncounterVariable_LWMEncounter");
static_assert(offsetof(FEncounterVariable_LWMEncounter, RowValue) == 0x000010, "Member 'FEncounterVariable_LWMEncounter::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVariable_TagQuery
// 0x0010 (0x0020 - 0x0010)
struct FEncounterVariable_TagQuery final : public FEncounterVariable
{
public:
	struct FDataTableRowHandle                    RowValue;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVariable_TagQuery) == 0x000008, "Wrong alignment on FEncounterVariable_TagQuery");
static_assert(sizeof(FEncounterVariable_TagQuery) == 0x000020, "Wrong size on FEncounterVariable_TagQuery");
static_assert(offsetof(FEncounterVariable_TagQuery, RowValue) == 0x000010, "Member 'FEncounterVariable_TagQuery::RowValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow
// 0x0000 (0x0008 - 0x0008)
struct FEncounterVarRow : public FTableRowBase
{
};
static_assert(alignof(FEncounterVarRow) == 0x000008, "Wrong alignment on FEncounterVarRow");
static_assert(sizeof(FEncounterVarRow) == 0x000008, "Wrong size on FEncounterVarRow");

// ScriptStruct EncountersRuntime.EncounterVarRow_ActorClass
// 0x0020 (0x0028 - 0x0008)
struct FEncounterVarRow_ActorClass final : public FEncounterVarRow
{
public:
	TSoftClassPtr<class UClass>                   Value;                                             // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVarRow_ActorClass) == 0x000008, "Wrong alignment on FEncounterVarRow_ActorClass");
static_assert(sizeof(FEncounterVarRow_ActorClass) == 0x000028, "Wrong size on FEncounterVarRow_ActorClass");
static_assert(offsetof(FEncounterVarRow_ActorClass, Value) == 0x000008, "Member 'FEncounterVarRow_ActorClass::Value' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow_ActorDescription
// 0x0010 (0x0018 - 0x0008)
struct FEncounterVarRow_ActorDescription final : public FEncounterVarRow
{
public:
	TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription> Value;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVarRow_ActorDescription) == 0x000008, "Wrong alignment on FEncounterVarRow_ActorDescription");
static_assert(sizeof(FEncounterVarRow_ActorDescription) == 0x000018, "Wrong size on FEncounterVarRow_ActorDescription");
static_assert(offsetof(FEncounterVarRow_ActorDescription, Value) == 0x000008, "Member 'FEncounterVarRow_ActorDescription::Value' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow_Boolean
// 0x0008 (0x0010 - 0x0008)
struct FEncounterVarRow_Boolean final : public FEncounterVarRow
{
public:
	bool                                          bValue;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterVarRow_Boolean) == 0x000008, "Wrong alignment on FEncounterVarRow_Boolean");
static_assert(sizeof(FEncounterVarRow_Boolean) == 0x000010, "Wrong size on FEncounterVarRow_Boolean");
static_assert(offsetof(FEncounterVarRow_Boolean, bValue) == 0x000008, "Member 'FEncounterVarRow_Boolean::bValue' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow_Float
// 0x0008 (0x0010 - 0x0008)
struct FEncounterVarRow_Float final : public FEncounterVarRow
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterVarRow_Float) == 0x000008, "Wrong alignment on FEncounterVarRow_Float");
static_assert(sizeof(FEncounterVarRow_Float) == 0x000010, "Wrong size on FEncounterVarRow_Float");
static_assert(offsetof(FEncounterVarRow_Float, Value) == 0x000008, "Member 'FEncounterVarRow_Float::Value' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow_GameplayTag
// 0x0008 (0x0010 - 0x0008)
struct FEncounterVarRow_GameplayTag final : public FEncounterVarRow
{
public:
	struct FGameplayTag                           Value;                                             // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterVarRow_GameplayTag) == 0x000008, "Wrong alignment on FEncounterVarRow_GameplayTag");
static_assert(sizeof(FEncounterVarRow_GameplayTag) == 0x000010, "Wrong size on FEncounterVarRow_GameplayTag");
static_assert(offsetof(FEncounterVarRow_GameplayTag, Value) == 0x000008, "Member 'FEncounterVarRow_GameplayTag::Value' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow_GameplayTagContainer
// 0x0020 (0x0028 - 0x0008)
struct FEncounterVarRow_GameplayTagContainer final : public FEncounterVarRow
{
public:
	struct FGameplayTagContainer                  Value;                                             // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVarRow_GameplayTagContainer) == 0x000008, "Wrong alignment on FEncounterVarRow_GameplayTagContainer");
static_assert(sizeof(FEncounterVarRow_GameplayTagContainer) == 0x000028, "Wrong size on FEncounterVarRow_GameplayTagContainer");
static_assert(offsetof(FEncounterVarRow_GameplayTagContainer, Value) == 0x000008, "Member 'FEncounterVarRow_GameplayTagContainer::Value' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow_Integer
// 0x0008 (0x0010 - 0x0008)
struct FEncounterVarRow_Integer final : public FEncounterVarRow
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterVarRow_Integer) == 0x000008, "Wrong alignment on FEncounterVarRow_Integer");
static_assert(sizeof(FEncounterVarRow_Integer) == 0x000010, "Wrong size on FEncounterVarRow_Integer");
static_assert(offsetof(FEncounterVarRow_Integer, Value) == 0x000008, "Member 'FEncounterVarRow_Integer::Value' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow_ItemDefinition
// 0x0020 (0x0028 - 0x0008)
struct FEncounterVarRow_ItemDefinition final : public FEncounterVarRow
{
public:
	TSoftObjectPtr<class UFortWorldItemDefinition> Value;                                             // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVarRow_ItemDefinition) == 0x000008, "Wrong alignment on FEncounterVarRow_ItemDefinition");
static_assert(sizeof(FEncounterVarRow_ItemDefinition) == 0x000028, "Wrong size on FEncounterVarRow_ItemDefinition");
static_assert(offsetof(FEncounterVarRow_ItemDefinition, Value) == 0x000008, "Member 'FEncounterVarRow_ItemDefinition::Value' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow_LWMEncounter
// 0x0020 (0x0028 - 0x0008)
struct FEncounterVarRow_LWMEncounter final : public FEncounterVarRow
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> Value;                                             // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVarRow_LWMEncounter) == 0x000008, "Wrong alignment on FEncounterVarRow_LWMEncounter");
static_assert(sizeof(FEncounterVarRow_LWMEncounter) == 0x000028, "Wrong size on FEncounterVarRow_LWMEncounter");
static_assert(offsetof(FEncounterVarRow_LWMEncounter, Value) == 0x000008, "Member 'FEncounterVarRow_LWMEncounter::Value' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVarRow_TagQuery
// 0x0048 (0x0050 - 0x0008)
struct FEncounterVarRow_TagQuery final : public FEncounterVarRow
{
public:
	struct FGameplayTagQuery                      Value;                                             // 0x0008(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterVarRow_TagQuery) == 0x000008, "Wrong alignment on FEncounterVarRow_TagQuery");
static_assert(sizeof(FEncounterVarRow_TagQuery) == 0x000050, "Wrong size on FEncounterVarRow_TagQuery");
static_assert(offsetof(FEncounterVarRow_TagQuery, Value) == 0x000008, "Member 'FEncounterVarRow_TagQuery::Value' has a wrong offset!");

// ScriptStruct EncountersRuntime.EndAllMobEncountersStateTreeTaskInstanceData
// 0x0008 (0x0008 - 0x0000)
struct FEndAllMobEncountersStateTreeTaskInstanceData final
{
public:
	class AActor*                                 UserActor;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAllMobEncountersStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEndAllMobEncountersStateTreeTaskInstanceData");
static_assert(sizeof(FEndAllMobEncountersStateTreeTaskInstanceData) == 0x000008, "Wrong size on FEndAllMobEncountersStateTreeTaskInstanceData");
static_assert(offsetof(FEndAllMobEncountersStateTreeTaskInstanceData, UserActor) == 0x000000, "Member 'FEndAllMobEncountersStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EndAllMobEncountersStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FEndAllMobEncountersStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FEndAllMobEncountersStateTreeTask) == 0x000008, "Wrong alignment on FEndAllMobEncountersStateTreeTask");
static_assert(sizeof(FEndAllMobEncountersStateTreeTask) == 0x000020, "Wrong size on FEndAllMobEncountersStateTreeTask");

// ScriptStruct EncountersRuntime.GetAnchorStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FGetAnchorStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      AnchorQuery;                                       // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  AnchorActor;                                       // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetAnchorStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FGetAnchorStateTreeTaskInstanceData");
static_assert(sizeof(FGetAnchorStateTreeTaskInstanceData) == 0x000058, "Wrong size on FGetAnchorStateTreeTaskInstanceData");
static_assert(offsetof(FGetAnchorStateTreeTaskInstanceData, AnchorQuery) == 0x000000, "Member 'FGetAnchorStateTreeTaskInstanceData::AnchorQuery' has a wrong offset!");
static_assert(offsetof(FGetAnchorStateTreeTaskInstanceData, AnchorActor) == 0x000048, "Member 'FGetAnchorStateTreeTaskInstanceData::AnchorActor' has a wrong offset!");
static_assert(offsetof(FGetAnchorStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FGetAnchorStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.GetAnchorStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FGetAnchorStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FGetAnchorStateTreeTask) == 0x000008, "Wrong alignment on FGetAnchorStateTreeTask");
static_assert(sizeof(FGetAnchorStateTreeTask) == 0x000020, "Wrong size on FGetAnchorStateTreeTask");

// ScriptStruct EncountersRuntime.GetEncounterActorStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FGetEncounterActorStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      ActorQuery;                                        // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  ChosenActor;                                       // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetEncounterActorStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FGetEncounterActorStateTreeTaskInstanceData");
static_assert(sizeof(FGetEncounterActorStateTreeTaskInstanceData) == 0x000058, "Wrong size on FGetEncounterActorStateTreeTaskInstanceData");
static_assert(offsetof(FGetEncounterActorStateTreeTaskInstanceData, ActorQuery) == 0x000000, "Member 'FGetEncounterActorStateTreeTaskInstanceData::ActorQuery' has a wrong offset!");
static_assert(offsetof(FGetEncounterActorStateTreeTaskInstanceData, ChosenActor) == 0x000048, "Member 'FGetEncounterActorStateTreeTaskInstanceData::ChosenActor' has a wrong offset!");
static_assert(offsetof(FGetEncounterActorStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FGetEncounterActorStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.GetEncounterActorStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FGetEncounterActorStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FGetEncounterActorStateTreeTask) == 0x000008, "Wrong alignment on FGetEncounterActorStateTreeTask");
static_assert(sizeof(FGetEncounterActorStateTreeTask) == 0x000020, "Wrong size on FGetEncounterActorStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterAddGameplayEffectStateTreeTaskInstanceData
// 0x0088 (0x0088 - 0x0000)
struct FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveEffectOnExit;                               // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IdentifierTags;                                    // 0x0058(0x0020)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0078(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData) == 0x000088, "Wrong size on FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData, GameplayEffect) == 0x000048, "Member 'FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData, bRemoveEffectOnExit) == 0x000050, "Member 'FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData::bRemoveEffectOnExit' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData, IdentifierTags) == 0x000058, "Member 'FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData::IdentifierTags' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData, UserActor) == 0x000078, "Member 'FLWMEncounterAddGameplayEffectStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterAddGameplayEffectStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterAddGameplayEffectStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterAddGameplayEffectStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterAddGameplayEffectStateTreeTask");
static_assert(sizeof(FLWMEncounterAddGameplayEffectStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterAddGameplayEffectStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterAdvanceStateTreeTaskInstanceData
// 0x0050 (0x0050 - 0x0000)
struct FLWMEncounterAdvanceStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterAdvanceStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterAdvanceStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterAdvanceStateTreeTaskInstanceData) == 0x000050, "Wrong size on FLWMEncounterAdvanceStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterAdvanceStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterAdvanceStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAdvanceStateTreeTaskInstanceData, UserActor) == 0x000048, "Member 'FLWMEncounterAdvanceStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterAdvanceStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterAdvanceStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterAdvanceStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterAdvanceStateTreeTask");
static_assert(sizeof(FLWMEncounterAdvanceStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterAdvanceStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterAssignPointProvidersStateTreeTaskInstanceData
// 0x0098 (0x0098 - 0x0000)
struct FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      PatrolPathTagQuery;                                // 0x0048(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0090(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData) == 0x000098, "Wrong size on FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData, PatrolPathTagQuery) == 0x000048, "Member 'FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData::PatrolPathTagQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData, UserActor) == 0x000090, "Member 'FLWMEncounterAssignPointProvidersStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterAssignPointProvidersStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterAssignPointProvidersStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterAssignPointProvidersStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterAssignPointProvidersStateTreeTask");
static_assert(sizeof(FLWMEncounterAssignPointProvidersStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterAssignPointProvidersStateTreeTask");

// ScriptStruct EncountersRuntime.DynamicEncounterEntry
// 0x0068 (0x0068 - 0x0000)
struct FDynamicEncounterEntry final
{
public:
	int32                                         SpawnCount;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxConcurrentSpawns;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEncounterTagQuery;                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      EncounterTagQuery;                                 // 0x0010(0x0048)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription> ActorDescriptions;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicEncounterEntry) == 0x000008, "Wrong alignment on FDynamicEncounterEntry");
static_assert(sizeof(FDynamicEncounterEntry) == 0x000068, "Wrong size on FDynamicEncounterEntry");
static_assert(offsetof(FDynamicEncounterEntry, SpawnCount) == 0x000000, "Member 'FDynamicEncounterEntry::SpawnCount' has a wrong offset!");
static_assert(offsetof(FDynamicEncounterEntry, MaxConcurrentSpawns) == 0x000004, "Member 'FDynamicEncounterEntry::MaxConcurrentSpawns' has a wrong offset!");
static_assert(offsetof(FDynamicEncounterEntry, bUseEncounterTagQuery) == 0x000008, "Member 'FDynamicEncounterEntry::bUseEncounterTagQuery' has a wrong offset!");
static_assert(offsetof(FDynamicEncounterEntry, EncounterTagQuery) == 0x000010, "Member 'FDynamicEncounterEntry::EncounterTagQuery' has a wrong offset!");
static_assert(offsetof(FDynamicEncounterEntry, ActorDescriptions) == 0x000058, "Member 'FDynamicEncounterEntry::ActorDescriptions' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterStartSharedStateTreeTaskInstanceData
// 0x0138 (0x0138 - 0x0000)
struct FLWMEncounterStartSharedStateTreeTaskInstanceData
{
public:
	struct FGameplayTagQuery                      PointProviderTagQuery;                             // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	bool                                          bUseVolumeAsAnchor;                                // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachVolumeToSpawn;                              // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      AnchorPointTagQuery;                               // 0x0050(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LeashRadiusInner;                                  // 0x0098(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LeashRadiusOuter;                                  // 0x00C0(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EncounterIdentifierTags;                           // 0x00E8(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0108(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          bPauseOnExit;                                      // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0130(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterStartSharedStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterStartSharedStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterStartSharedStateTreeTaskInstanceData) == 0x000138, "Wrong size on FLWMEncounterStartSharedStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, PointProviderTagQuery) == 0x000000, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::PointProviderTagQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, bUseVolumeAsAnchor) == 0x000048, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::bUseVolumeAsAnchor' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, bAttachVolumeToSpawn) == 0x000049, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::bAttachVolumeToSpawn' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, AnchorPointTagQuery) == 0x000050, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::AnchorPointTagQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, LeashRadiusInner) == 0x000098, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::LeashRadiusInner' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, LeashRadiusOuter) == 0x0000C0, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::LeashRadiusOuter' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, EncounterIdentifierTags) == 0x0000E8, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::EncounterIdentifierTags' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, ActorTags) == 0x000108, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::ActorTags' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, bPauseOnExit) == 0x000128, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::bPauseOnExit' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartSharedStateTreeTaskInstanceData, UserActor) == 0x000130, "Member 'FLWMEncounterStartSharedStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterDynamicStartStateTreeTaskInstanceData
// 0x0038 (0x0170 - 0x0138)
struct FLWMEncounterDynamicStartStateTreeTaskInstanceData final : public FLWMEncounterStartSharedStateTreeTaskInstanceData
{
public:
	TArray<struct FDynamicEncounterEntry>         DynamicEncounterEntries;                           // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> DynamicEmptyEncounter;                             // 0x0148(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULWMEncounterInstance>   EncounterInstance;                                 // 0x0168(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLWMEncounterDynamicStartStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterDynamicStartStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterDynamicStartStateTreeTaskInstanceData) == 0x000170, "Wrong size on FLWMEncounterDynamicStartStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterDynamicStartStateTreeTaskInstanceData, DynamicEncounterEntries) == 0x000138, "Member 'FLWMEncounterDynamicStartStateTreeTaskInstanceData::DynamicEncounterEntries' has a wrong offset!");
static_assert(offsetof(FLWMEncounterDynamicStartStateTreeTaskInstanceData, DynamicEmptyEncounter) == 0x000148, "Member 'FLWMEncounterDynamicStartStateTreeTaskInstanceData::DynamicEmptyEncounter' has a wrong offset!");
static_assert(offsetof(FLWMEncounterDynamicStartStateTreeTaskInstanceData, EncounterInstance) == 0x000168, "Member 'FLWMEncounterDynamicStartStateTreeTaskInstanceData::EncounterInstance' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterDynamicStartStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterDynamicStartStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterDynamicStartStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterDynamicStartStateTreeTask");
static_assert(sizeof(FLWMEncounterDynamicStartStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterDynamicStartStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterAlertLevelTargetInfo
// 0x000C (0x000C - 0x0000)
struct FLWMEncounterAlertLevelTargetInfo final
{
public:
	EPerceptionState                              AwarePerceptionState;                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AwareForgetTime;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AwareForgetDistance;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterAlertLevelTargetInfo) == 0x000004, "Wrong alignment on FLWMEncounterAlertLevelTargetInfo");
static_assert(sizeof(FLWMEncounterAlertLevelTargetInfo) == 0x00000C, "Wrong size on FLWMEncounterAlertLevelTargetInfo");
static_assert(offsetof(FLWMEncounterAlertLevelTargetInfo, AwarePerceptionState) == 0x000000, "Member 'FLWMEncounterAlertLevelTargetInfo::AwarePerceptionState' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAlertLevelTargetInfo, AwareForgetTime) == 0x000004, "Member 'FLWMEncounterAlertLevelTargetInfo::AwareForgetTime' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAlertLevelTargetInfo, AwareForgetDistance) == 0x000008, "Member 'FLWMEncounterAlertLevelTargetInfo::AwareForgetDistance' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterInstanceEffectInfo
// 0x0058 (0x0058 - 0x0000)
struct FLWMEncounterInstanceEffectInfo final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x50];                                       // 0x0008(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterInstanceEffectInfo) == 0x000008, "Wrong alignment on FLWMEncounterInstanceEffectInfo");
static_assert(sizeof(FLWMEncounterInstanceEffectInfo) == 0x000058, "Wrong size on FLWMEncounterInstanceEffectInfo");
static_assert(offsetof(FLWMEncounterInstanceEffectInfo, GameplayEffect) == 0x000000, "Member 'FLWMEncounterInstanceEffectInfo::GameplayEffect' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterPauseStateTreeTaskInstanceData
// 0x0050 (0x0050 - 0x0000)
struct FLWMEncounterPauseStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterPauseStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterPauseStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterPauseStateTreeTaskInstanceData) == 0x000050, "Wrong size on FLWMEncounterPauseStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterPauseStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterPauseStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterPauseStateTreeTaskInstanceData, UserActor) == 0x000048, "Member 'FLWMEncounterPauseStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterPauseStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterPauseStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterPauseStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterPauseStateTreeTask");
static_assert(sizeof(FLWMEncounterPauseStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterPauseStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData
// 0x0050 (0x0050 - 0x0000)
struct FLWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      GameplayEffectQuery;                               // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData) == 0x000050, "Wrong size on FLWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData, GameplayEffectQuery) == 0x000000, "Member 'FLWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData::GameplayEffectQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData, UserActor) == 0x000048, "Member 'FLWMEncounterRemoveGameplayEffectStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterRemoveGameplayEffectStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterRemoveGameplayEffectStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterRemoveGameplayEffectStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterRemoveGameplayEffectStateTreeTask");
static_assert(sizeof(FLWMEncounterRemoveGameplayEffectStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterRemoveGameplayEffectStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterResumeStateTreeTaskInstanceData
// 0x0050 (0x0050 - 0x0000)
struct FLWMEncounterResumeStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterResumeStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterResumeStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterResumeStateTreeTaskInstanceData) == 0x000050, "Wrong size on FLWMEncounterResumeStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterResumeStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterResumeStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterResumeStateTreeTaskInstanceData, UserActor) == 0x000048, "Member 'FLWMEncounterResumeStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterResumeStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterResumeStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterResumeStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterResumeStateTreeTask");
static_assert(sizeof(FLWMEncounterResumeStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterResumeStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterRow
// 0x0058 (0x0060 - 0x0008)
struct FLWMEncounterRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> Encounter;                                         // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription> DynamicActorDescriptions;                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0038(0x0020)(Edit, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterRow) == 0x000008, "Wrong alignment on FLWMEncounterRow");
static_assert(sizeof(FLWMEncounterRow) == 0x000060, "Wrong size on FLWMEncounterRow");
static_assert(offsetof(FLWMEncounterRow, Encounter) == 0x000008, "Member 'FLWMEncounterRow::Encounter' has a wrong offset!");
static_assert(offsetof(FLWMEncounterRow, DynamicActorDescriptions) == 0x000028, "Member 'FLWMEncounterRow::DynamicActorDescriptions' has a wrong offset!");
static_assert(offsetof(FLWMEncounterRow, Tags) == 0x000038, "Member 'FLWMEncounterRow::Tags' has a wrong offset!");
static_assert(offsetof(FLWMEncounterRow, Weight) == 0x000058, "Member 'FLWMEncounterRow::Weight' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterSetAlertLevelStateTreeTaskInstanceData
// 0x0078 (0x0078 - 0x0000)
struct FLWMEncounterSetAlertLevelStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	bool                                          bOnlyRaiseLevel;                                   // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertLevel                                   AlertLevel;                                        // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLWMEncounterAlertLevelTargetInfo      HasThreatTargetInfo;                               // 0x004C(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FLWMEncounterAlertLevelTargetInfo      NoThreatTargetInfo;                                // 0x0058(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0070(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterSetAlertLevelStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterSetAlertLevelStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterSetAlertLevelStateTreeTaskInstanceData) == 0x000078, "Wrong size on FLWMEncounterSetAlertLevelStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterSetAlertLevelStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterSetAlertLevelStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterSetAlertLevelStateTreeTaskInstanceData, bOnlyRaiseLevel) == 0x000048, "Member 'FLWMEncounterSetAlertLevelStateTreeTaskInstanceData::bOnlyRaiseLevel' has a wrong offset!");
static_assert(offsetof(FLWMEncounterSetAlertLevelStateTreeTaskInstanceData, AlertLevel) == 0x000049, "Member 'FLWMEncounterSetAlertLevelStateTreeTaskInstanceData::AlertLevel' has a wrong offset!");
static_assert(offsetof(FLWMEncounterSetAlertLevelStateTreeTaskInstanceData, HasThreatTargetInfo) == 0x00004C, "Member 'FLWMEncounterSetAlertLevelStateTreeTaskInstanceData::HasThreatTargetInfo' has a wrong offset!");
static_assert(offsetof(FLWMEncounterSetAlertLevelStateTreeTaskInstanceData, NoThreatTargetInfo) == 0x000058, "Member 'FLWMEncounterSetAlertLevelStateTreeTaskInstanceData::NoThreatTargetInfo' has a wrong offset!");
static_assert(offsetof(FLWMEncounterSetAlertLevelStateTreeTaskInstanceData, TargetActor) == 0x000064, "Member 'FLWMEncounterSetAlertLevelStateTreeTaskInstanceData::TargetActor' has a wrong offset!");
static_assert(offsetof(FLWMEncounterSetAlertLevelStateTreeTaskInstanceData, UserActor) == 0x000070, "Member 'FLWMEncounterSetAlertLevelStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterSetAlertLevelStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterSetAlertLevelStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterSetAlertLevelStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterSetAlertLevelStateTreeTask");
static_assert(sizeof(FLWMEncounterSetAlertLevelStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterSetAlertLevelStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterSetStageStateTreeTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FLWMEncounterSetStageStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	int32                                         StageIndex;                                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterSetStageStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterSetStageStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterSetStageStateTreeTaskInstanceData) == 0x000058, "Wrong size on FLWMEncounterSetStageStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterSetStageStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterSetStageStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterSetStageStateTreeTaskInstanceData, StageIndex) == 0x000048, "Member 'FLWMEncounterSetStageStateTreeTaskInstanceData::StageIndex' has a wrong offset!");
static_assert(offsetof(FLWMEncounterSetStageStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FLWMEncounterSetStageStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterSetStageStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterSetStageStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterSetStageStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterSetStageStateTreeTask");
static_assert(sizeof(FLWMEncounterSetStageStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterSetStageStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterStartStateTreeTaskInstanceData
// 0x0078 (0x01B0 - 0x0138)
struct FLWMEncounterStartStateTreeTaskInstanceData final : public FLWMEncounterStartSharedStateTreeTaskInstanceData
{
public:
	bool                                          bUseEncounterTagQuery;                             // 0x0138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      LWMEncounterTagQuery;                              // 0x0140(0x0048)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> LWMEncounter;                                      // 0x0188(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULWMEncounterInstance>   EncounterInstance;                                 // 0x01A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLWMEncounterStartStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterStartStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterStartStateTreeTaskInstanceData) == 0x0001B0, "Wrong size on FLWMEncounterStartStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterStartStateTreeTaskInstanceData, bUseEncounterTagQuery) == 0x000138, "Member 'FLWMEncounterStartStateTreeTaskInstanceData::bUseEncounterTagQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartStateTreeTaskInstanceData, LWMEncounterTagQuery) == 0x000140, "Member 'FLWMEncounterStartStateTreeTaskInstanceData::LWMEncounterTagQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartStateTreeTaskInstanceData, LWMEncounter) == 0x000188, "Member 'FLWMEncounterStartStateTreeTaskInstanceData::LWMEncounter' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStartStateTreeTaskInstanceData, EncounterInstance) == 0x0001A8, "Member 'FLWMEncounterStartStateTreeTaskInstanceData::EncounterInstance' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterStartStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterStartStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterStartStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterStartStateTreeTask");
static_assert(sizeof(FLWMEncounterStartStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterStartStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterStopStateTreeTaskInstanceData
// 0x0050 (0x0050 - 0x0000)
struct FLWMEncounterStopStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterStopStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterStopStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterStopStateTreeTaskInstanceData) == 0x000050, "Wrong size on FLWMEncounterStopStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterStopStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterStopStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterStopStateTreeTaskInstanceData, UserActor) == 0x000048, "Member 'FLWMEncounterStopStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterStopStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterStopStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterStopStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterStopStateTreeTask");
static_assert(sizeof(FLWMEncounterStopStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterStopStateTreeTask");

// ScriptStruct EncountersRuntime.LWMEncounterUpdateLeashStateTreeTaskInstanceData
// 0x00F0 (0x00F0 - 0x0000)
struct FLWMEncounterUpdateLeashStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	bool                                          bUseVolumeAsAnchor;                                // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      AnchorPointTagQuery;                               // 0x0050(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LeashRadiusInner;                                  // 0x0098(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LeashRadiusOuter;                                  // 0x00C0(0x0028)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x00E8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLWMEncounterUpdateLeashStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterUpdateLeashStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterUpdateLeashStateTreeTaskInstanceData) == 0x0000F0, "Wrong size on FLWMEncounterUpdateLeashStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterUpdateLeashStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterUpdateLeashStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterUpdateLeashStateTreeTaskInstanceData, bUseVolumeAsAnchor) == 0x000048, "Member 'FLWMEncounterUpdateLeashStateTreeTaskInstanceData::bUseVolumeAsAnchor' has a wrong offset!");
static_assert(offsetof(FLWMEncounterUpdateLeashStateTreeTaskInstanceData, AnchorPointTagQuery) == 0x000050, "Member 'FLWMEncounterUpdateLeashStateTreeTaskInstanceData::AnchorPointTagQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterUpdateLeashStateTreeTaskInstanceData, LeashRadiusInner) == 0x000098, "Member 'FLWMEncounterUpdateLeashStateTreeTaskInstanceData::LeashRadiusInner' has a wrong offset!");
static_assert(offsetof(FLWMEncounterUpdateLeashStateTreeTaskInstanceData, LeashRadiusOuter) == 0x0000C0, "Member 'FLWMEncounterUpdateLeashStateTreeTaskInstanceData::LeashRadiusOuter' has a wrong offset!");
static_assert(offsetof(FLWMEncounterUpdateLeashStateTreeTaskInstanceData, UserActor) == 0x0000E8, "Member 'FLWMEncounterUpdateLeashStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterUpdateLeashStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FLWMEncounterUpdateLeashStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FLWMEncounterUpdateLeashStateTreeTask) == 0x000008, "Wrong alignment on FLWMEncounterUpdateLeashStateTreeTask");
static_assert(sizeof(FLWMEncounterUpdateLeashStateTreeTask) == 0x000020, "Wrong size on FLWMEncounterUpdateLeashStateTreeTask");

// ScriptStruct EncountersRuntime.PauseMobEncounterStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FPauseMobEncounterStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           MobIdentifier;                                     // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPauseMobEncounterStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FPauseMobEncounterStateTreeTaskInstanceData");
static_assert(sizeof(FPauseMobEncounterStateTreeTaskInstanceData) == 0x000010, "Wrong size on FPauseMobEncounterStateTreeTaskInstanceData");
static_assert(offsetof(FPauseMobEncounterStateTreeTaskInstanceData, MobIdentifier) == 0x000000, "Member 'FPauseMobEncounterStateTreeTaskInstanceData::MobIdentifier' has a wrong offset!");
static_assert(offsetof(FPauseMobEncounterStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FPauseMobEncounterStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.PauseMobEncounterStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FPauseMobEncounterStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FPauseMobEncounterStateTreeTask) == 0x000008, "Wrong alignment on FPauseMobEncounterStateTreeTask");
static_assert(sizeof(FPauseMobEncounterStateTreeTask) == 0x000020, "Wrong size on FPauseMobEncounterStateTreeTask");

// ScriptStruct EncountersRuntime.RemoveEncounterPrefabTagStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FRemoveEncounterPrefabTagStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           PrefabTag;                                         // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemoveEncounterPrefabTagStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FRemoveEncounterPrefabTagStateTreeTaskInstanceData");
static_assert(sizeof(FRemoveEncounterPrefabTagStateTreeTaskInstanceData) == 0x000010, "Wrong size on FRemoveEncounterPrefabTagStateTreeTaskInstanceData");
static_assert(offsetof(FRemoveEncounterPrefabTagStateTreeTaskInstanceData, PrefabTag) == 0x000000, "Member 'FRemoveEncounterPrefabTagStateTreeTaskInstanceData::PrefabTag' has a wrong offset!");
static_assert(offsetof(FRemoveEncounterPrefabTagStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FRemoveEncounterPrefabTagStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.RemoveEncounterPrefabTagStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FRemoveEncounterPrefabTagStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FRemoveEncounterPrefabTagStateTreeTask) == 0x000008, "Wrong alignment on FRemoveEncounterPrefabTagStateTreeTask");
static_assert(sizeof(FRemoveEncounterPrefabTagStateTreeTask) == 0x000020, "Wrong size on FRemoveEncounterPrefabTagStateTreeTask");

// ScriptStruct EncountersRuntime.ResumeMobEncounterStateTreeTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FResumeMobEncounterStateTreeTaskInstanceData final
{
public:
	struct FGameplayTag                           MobIdentifier;                                     // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResumeMobEncounterStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FResumeMobEncounterStateTreeTaskInstanceData");
static_assert(sizeof(FResumeMobEncounterStateTreeTaskInstanceData) == 0x000010, "Wrong size on FResumeMobEncounterStateTreeTaskInstanceData");
static_assert(offsetof(FResumeMobEncounterStateTreeTaskInstanceData, MobIdentifier) == 0x000000, "Member 'FResumeMobEncounterStateTreeTaskInstanceData::MobIdentifier' has a wrong offset!");
static_assert(offsetof(FResumeMobEncounterStateTreeTaskInstanceData, UserActor) == 0x000008, "Member 'FResumeMobEncounterStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.ResumeMobEncounterStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FResumeMobEncounterStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FResumeMobEncounterStateTreeTask) == 0x000008, "Wrong alignment on FResumeMobEncounterStateTreeTask");
static_assert(sizeof(FResumeMobEncounterStateTreeTask) == 0x000020, "Wrong size on FResumeMobEncounterStateTreeTask");

// ScriptStruct EncountersRuntime.SpawnActorStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FSpawnActorStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FSpawnActorStateTreeTask) == 0x000008, "Wrong alignment on FSpawnActorStateTreeTask");
static_assert(sizeof(FSpawnActorStateTreeTask) == 0x000020, "Wrong size on FSpawnActorStateTreeTask");

// ScriptStruct EncountersRuntime.StartMobEncounterStateTreeTask
// 0x0008 (0x0028 - 0x0020)
struct FStartMobEncounterStateTreeTask final : public FStateTreeTaskCommonBase
{
public:
	bool                                          bStopEncounterOnExit;                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStartMobEncounterStateTreeTask) == 0x000008, "Wrong alignment on FStartMobEncounterStateTreeTask");
static_assert(sizeof(FStartMobEncounterStateTreeTask) == 0x000028, "Wrong size on FStartMobEncounterStateTreeTask");
static_assert(offsetof(FStartMobEncounterStateTreeTask, bStopEncounterOnExit) == 0x000020, "Member 'FStartMobEncounterStateTreeTask::bStopEncounterOnExit' has a wrong offset!");

// ScriptStruct EncountersRuntime.StopMobEncounterStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FStopMobEncounterStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FStopMobEncounterStateTreeTask) == 0x000008, "Wrong alignment on FStopMobEncounterStateTreeTask");
static_assert(sizeof(FStopMobEncounterStateTreeTask) == 0x000020, "Wrong size on FStopMobEncounterStateTreeTask");

// ScriptStruct EncountersRuntime.ActorIdentifierEntry
// 0x0028 (0x0028 - 0x0000)
struct FActorIdentifierEntry final
{
public:
	struct FGameplayTagContainer                  IdentifierTags;                                    // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorIdentifierEntry) == 0x000008, "Wrong alignment on FActorIdentifierEntry");
static_assert(sizeof(FActorIdentifierEntry) == 0x000028, "Wrong size on FActorIdentifierEntry");
static_assert(offsetof(FActorIdentifierEntry, IdentifierTags) == 0x000000, "Member 'FActorIdentifierEntry::IdentifierTags' has a wrong offset!");
static_assert(offsetof(FActorIdentifierEntry, TargetActor) == 0x000020, "Member 'FActorIdentifierEntry::TargetActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.GameplayEffectIdentifierInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FGameplayEffectIdentifierInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEffectIdentifierInfo) == 0x000008, "Wrong alignment on FGameplayEffectIdentifierInfo");
static_assert(sizeof(FGameplayEffectIdentifierInfo) == 0x000028, "Wrong size on FGameplayEffectIdentifierInfo");

// ScriptStruct EncountersRuntime.TrackedActorInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FTrackedActorInfo final
{
public:
	TWeakObjectPtr<class AActor>                  TrackedActor;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackedActorInfo) == 0x000008, "Wrong alignment on FTrackedActorInfo");
static_assert(sizeof(FTrackedActorInfo) == 0x000038, "Wrong size on FTrackedActorInfo");
static_assert(offsetof(FTrackedActorInfo, TrackedActor) == 0x000000, "Member 'FTrackedActorInfo::TrackedActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.EncounterVerbTransitionStateTreeTaskInstanceData
// 0x0048 (0x0048 - 0x0000)
struct FEncounterVerbTransitionStateTreeTaskInstanceData final
{
public:
	TArray<struct FInstancedStruct>               ObjectiveVerbs;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ObjectiveValueThreshold;                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x28];                                      // 0x0020(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterVerbTransitionStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FEncounterVerbTransitionStateTreeTaskInstanceData");
static_assert(sizeof(FEncounterVerbTransitionStateTreeTaskInstanceData) == 0x000048, "Wrong size on FEncounterVerbTransitionStateTreeTaskInstanceData");
static_assert(offsetof(FEncounterVerbTransitionStateTreeTaskInstanceData, ObjectiveVerbs) == 0x000000, "Member 'FEncounterVerbTransitionStateTreeTaskInstanceData::ObjectiveVerbs' has a wrong offset!");
static_assert(offsetof(FEncounterVerbTransitionStateTreeTaskInstanceData, ObjectiveValueThreshold) == 0x000010, "Member 'FEncounterVerbTransitionStateTreeTaskInstanceData::ObjectiveValueThreshold' has a wrong offset!");
static_assert(offsetof(FEncounterVerbTransitionStateTreeTaskInstanceData, UserActor) == 0x000018, "Member 'FEncounterVerbTransitionStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterAlertLevelTransitionStateTreeTaskInstanceData
// 0x0078 (0x0078 - 0x0000)
struct FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TArray<EAlertLevel>                           AlertLevels;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EAlertLevelComparisonOperator                 ComparisonOperator;                                // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData) == 0x000078, "Wrong size on FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData, AlertLevels) == 0x000048, "Member 'FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData::AlertLevels' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData, ComparisonOperator) == 0x000058, "Member 'FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData::ComparisonOperator' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData, Value) == 0x00005C, "Member 'FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData, UserActor) == 0x000060, "Member 'FLWMEncounterAlertLevelTransitionStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterKillCountTransitionStateTreeTaskInstanceData
// 0x0068 (0x0068 - 0x0000)
struct FLWMEncounterKillCountTransitionStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	uint32                                        Value;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterKillCountTransitionStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterKillCountTransitionStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterKillCountTransitionStateTreeTaskInstanceData) == 0x000068, "Wrong size on FLWMEncounterKillCountTransitionStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterKillCountTransitionStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterKillCountTransitionStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterKillCountTransitionStateTreeTaskInstanceData, Value) == 0x000048, "Member 'FLWMEncounterKillCountTransitionStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FLWMEncounterKillCountTransitionStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FLWMEncounterKillCountTransitionStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct EncountersRuntime.LWMEncounterRemainingCountTransitionStateTreeTaskInstanceData
// 0x0068 (0x0068 - 0x0000)
struct FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData final
{
public:
	struct FGameplayTagQuery                      EncounterQuery;                                    // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyTriggerOnce;                                  // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0xF];                                       // 0x0059(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData");
static_assert(sizeof(FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData) == 0x000068, "Wrong size on FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData");
static_assert(offsetof(FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData, EncounterQuery) == 0x000000, "Member 'FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData::EncounterQuery' has a wrong offset!");
static_assert(offsetof(FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData, Value) == 0x000048, "Member 'FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData::Value' has a wrong offset!");
static_assert(offsetof(FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData, UserActor) == 0x000050, "Member 'FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData::UserActor' has a wrong offset!");
static_assert(offsetof(FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData, bOnlyTriggerOnce) == 0x000058, "Member 'FLWMEncounterRemainingCountTransitionStateTreeTaskInstanceData::bOnlyTriggerOnce' has a wrong offset!");

// ScriptStruct EncountersRuntime.FortVerbFilter_EncounterCompleted
// 0x00A0 (0x0140 - 0x00A0)
struct FFortVerbFilter_EncounterCompleted final : public FObjectiveFilter
{
public:
	struct FObjectiveSubjectTags                  EncounterItemDef;                                  // 0x00A0(0x0048)(Edit, NativeAccessSpecifierPublic)
	EEncounterSuccessState                        SuccessState;                                      // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FObjectiveSubjectTags_Progressible     Participants;                                      // 0x00F0(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortVerbFilter_EncounterCompleted) == 0x000008, "Wrong alignment on FFortVerbFilter_EncounterCompleted");
static_assert(sizeof(FFortVerbFilter_EncounterCompleted) == 0x000140, "Wrong size on FFortVerbFilter_EncounterCompleted");
static_assert(offsetof(FFortVerbFilter_EncounterCompleted, EncounterItemDef) == 0x0000A0, "Member 'FFortVerbFilter_EncounterCompleted::EncounterItemDef' has a wrong offset!");
static_assert(offsetof(FFortVerbFilter_EncounterCompleted, SuccessState) == 0x0000E8, "Member 'FFortVerbFilter_EncounterCompleted::SuccessState' has a wrong offset!");
static_assert(offsetof(FFortVerbFilter_EncounterCompleted, Participants) == 0x0000F0, "Member 'FFortVerbFilter_EncounterCompleted::Participants' has a wrong offset!");

}

