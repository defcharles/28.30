#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LagerRuntime

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "WorldConditions_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteVersion_structs.hpp"


namespace SDK
{

// Enum LagerRuntime.ELivingWorldPointProviderSpawnLimiterBehavior
// NumValues: 0x0002
enum class ELivingWorldPointProviderSpawnLimiterBehavior : uint8
{
	Lifetime                                 = 0,
	Concurrent                               = 1,
};

// Enum LagerRuntime.EFortAthenaLivingWorldEventToDebugStopBehavior
// NumValues: 0x0002
enum class EFortAthenaLivingWorldEventToDebugStopBehavior : uint8
{
	Once                                     = 0,
	UntilEventSuccess                        = 1,
};

// Enum LagerRuntime.ELivingWorldCalendarEventConditionBehavior
// NumValues: 0x0002
enum class ELivingWorldCalendarEventConditionBehavior : uint8
{
	IsActive                                 = 0,
	Ratio                                    = 1,
};

// Enum LagerRuntime.ELivingWorldCalendarEventConditionRatioBehavior
// NumValues: 0x0005
enum class ELivingWorldCalendarEventConditionRatioBehavior : uint8
{
	Less                                     = 0,
	LessOrEqual                              = 1,
	Greater                                  = 2,
	GreaterOrEqual                           = 3,
	InBetween                                = 4,
};

// Enum LagerRuntime.EFortAthenaLivingWorldEventRuntimeDeactivationReason
// NumValues: 0x0006
enum class EFortAthenaLivingWorldEventRuntimeDeactivationReason : uint8
{
	None                                     = 0,
	NoValidEventData                         = 1,
	RandomDeactivation                       = 2,
	CalendarEvent                            = 3,
	MatchedPrefabAndNormalActor              = 4,
	ActorDescDoesntMatchAnySpawnerData       = 5,
};

// ScriptStruct LagerRuntime.FortAthenaLivingWorldTaggedSpawnActionClass
// 0x0010 (0x0010 - 0x0000)
struct FFortAthenaLivingWorldTaggedSpawnActionClass final
{
public:
	struct FGameplayTag                           SpawnActionTag;                                    // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortAthenaLivingWorldSpawnAction> SpawnActionClass;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldTaggedSpawnActionClass) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldTaggedSpawnActionClass");
static_assert(sizeof(FFortAthenaLivingWorldTaggedSpawnActionClass) == 0x000010, "Wrong size on FFortAthenaLivingWorldTaggedSpawnActionClass");
static_assert(offsetof(FFortAthenaLivingWorldTaggedSpawnActionClass, SpawnActionTag) == 0x000000, "Member 'FFortAthenaLivingWorldTaggedSpawnActionClass::SpawnActionTag' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldTaggedSpawnActionClass, SpawnActionClass) == 0x000008, "Member 'FFortAthenaLivingWorldTaggedSpawnActionClass::SpawnActionClass' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEventTagDensityRegistration
// 0x0058 (0x0058 - 0x0000)
struct FFortAthenaLivingWorldEventTagDensityRegistration final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Range;                                             // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DensityValue;                                      // 0x0030(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldEventTagDensityRegistration) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldEventTagDensityRegistration");
static_assert(sizeof(FFortAthenaLivingWorldEventTagDensityRegistration) == 0x000058, "Wrong size on FFortAthenaLivingWorldEventTagDensityRegistration");
static_assert(offsetof(FFortAthenaLivingWorldEventTagDensityRegistration, tag) == 0x000000, "Member 'FFortAthenaLivingWorldEventTagDensityRegistration::tag' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventTagDensityRegistration, Range) == 0x000008, "Member 'FFortAthenaLivingWorldEventTagDensityRegistration::Range' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventTagDensityRegistration, DensityValue) == 0x000030, "Member 'FFortAthenaLivingWorldEventTagDensityRegistration::DensityValue' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldTagTimer
// 0x0030 (0x0030 - 0x0000)
struct FFortAthenaLivingWorldTagTimer final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         duration;                                          // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldTagTimer) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldTagTimer");
static_assert(sizeof(FFortAthenaLivingWorldTagTimer) == 0x000030, "Wrong size on FFortAthenaLivingWorldTagTimer");
static_assert(offsetof(FFortAthenaLivingWorldTagTimer, tag) == 0x000000, "Member 'FFortAthenaLivingWorldTagTimer::tag' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldTagTimer, duration) == 0x000008, "Member 'FFortAthenaLivingWorldTagTimer::duration' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldActorSpawnDescription
// 0x0100 (0x0100 - 0x0000)
struct FFortAthenaLivingWorldActorSpawnDescription
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpawnerData;                                       // 0x0020(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SpawnerDataTagQuery;                               // 0x0040(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ActorDensityValue;                                 // 0x0088(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DensityComputationRangeOverride;                   // 0x00B0(0x0028)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FFortAthenaLivingWorldEventTagDensityRegistration> TagDensityRegistrations;                           // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAthenaLivingWorldTagTimer> PostDestructionTagDensityPersistenceDuration;      // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPreloadOnClient;                                  // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldActorSpawnDescription) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldActorSpawnDescription");
static_assert(sizeof(FFortAthenaLivingWorldActorSpawnDescription) == 0x000100, "Wrong size on FFortAthenaLivingWorldActorSpawnDescription");
static_assert(offsetof(FFortAthenaLivingWorldActorSpawnDescription, ActorClass) == 0x000000, "Member 'FFortAthenaLivingWorldActorSpawnDescription::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldActorSpawnDescription, SpawnerData) == 0x000020, "Member 'FFortAthenaLivingWorldActorSpawnDescription::SpawnerData' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldActorSpawnDescription, SpawnerDataTagQuery) == 0x000040, "Member 'FFortAthenaLivingWorldActorSpawnDescription::SpawnerDataTagQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldActorSpawnDescription, ActorDensityValue) == 0x000088, "Member 'FFortAthenaLivingWorldActorSpawnDescription::ActorDensityValue' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldActorSpawnDescription, DensityComputationRangeOverride) == 0x0000B0, "Member 'FFortAthenaLivingWorldActorSpawnDescription::DensityComputationRangeOverride' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldActorSpawnDescription, TagDensityRegistrations) == 0x0000D8, "Member 'FFortAthenaLivingWorldActorSpawnDescription::TagDensityRegistrations' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldActorSpawnDescription, PostDestructionTagDensityPersistenceDuration) == 0x0000E8, "Member 'FFortAthenaLivingWorldActorSpawnDescription::PostDestructionTagDensityPersistenceDuration' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldActorSpawnDescription, bPreloadOnClient) == 0x0000F8, "Member 'FFortAthenaLivingWorldActorSpawnDescription::bPreloadOnClient' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldPrefabActorSpawnerData
// 0x0110 (0x0110 - 0x0000)
struct FFortAthenaLivingWorldPrefabActorSpawnerData final
{
public:
	struct FGuid                                  ActorSpawnerGuid;                                  // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAthenaLivingWorldActorSpawnDescription ActorDescription;                                  // 0x0010(0x0100)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldPrefabActorSpawnerData) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldPrefabActorSpawnerData");
static_assert(sizeof(FFortAthenaLivingWorldPrefabActorSpawnerData) == 0x000110, "Wrong size on FFortAthenaLivingWorldPrefabActorSpawnerData");
static_assert(offsetof(FFortAthenaLivingWorldPrefabActorSpawnerData, ActorSpawnerGuid) == 0x000000, "Member 'FFortAthenaLivingWorldPrefabActorSpawnerData::ActorSpawnerGuid' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldPrefabActorSpawnerData, ActorDescription) == 0x000010, "Member 'FFortAthenaLivingWorldPrefabActorSpawnerData::ActorDescription' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldConditionContainer
// 0x0018 (0x0018 - 0x0000)
struct FFortAthenaLivingWorldConditionContainer final
{
public:
	class UObject*                                Owner;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldConditionContainer) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldConditionContainer");
static_assert(sizeof(FFortAthenaLivingWorldConditionContainer) == 0x000018, "Wrong size on FFortAthenaLivingWorldConditionContainer");
static_assert(offsetof(FFortAthenaLivingWorldConditionContainer, Owner) == 0x000000, "Member 'FFortAthenaLivingWorldConditionContainer::Owner' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldCondition_TrackedPlayerPresence
// 0x0058 (0x0068 - 0x0010)
struct FFortAthenaLivingWorldCondition_TrackedPlayerPresence final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          ActorRef;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDistanceToPlayer;                               // 0x0018(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxDistanceToPlayer;                               // 0x0040(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldCondition_TrackedPlayerPresence) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldCondition_TrackedPlayerPresence");
static_assert(sizeof(FFortAthenaLivingWorldCondition_TrackedPlayerPresence) == 0x000068, "Wrong size on FFortAthenaLivingWorldCondition_TrackedPlayerPresence");
static_assert(offsetof(FFortAthenaLivingWorldCondition_TrackedPlayerPresence, ActorRef) == 0x000010, "Member 'FFortAthenaLivingWorldCondition_TrackedPlayerPresence::ActorRef' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCondition_TrackedPlayerPresence, MinDistanceToPlayer) == 0x000018, "Member 'FFortAthenaLivingWorldCondition_TrackedPlayerPresence::MinDistanceToPlayer' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCondition_TrackedPlayerPresence, MaxDistanceToPlayer) == 0x000040, "Member 'FFortAthenaLivingWorldCondition_TrackedPlayerPresence::MaxDistanceToPlayer' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldPointProviderFilterRules
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FFortAthenaLivingWorldPointProviderFilterRules final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldPointProviderFilterRules) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldPointProviderFilterRules");
static_assert(sizeof(FFortAthenaLivingWorldPointProviderFilterRules) == 0x000038, "Wrong size on FFortAthenaLivingWorldPointProviderFilterRules");

// ScriptStruct LagerRuntime.LivingWorldSpawnAroundPlayerRuntimeData
// 0x0018 (0x0018 - 0x0000)
struct FLivingWorldSpawnAroundPlayerRuntimeData final
{
public:
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> PointAroundPlayerProviders;                        // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	class UFortAthenaLivingWorldEncounterInstance* Encounter;                                         // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLivingWorldSpawnAroundPlayerRuntimeData) == 0x000008, "Wrong alignment on FLivingWorldSpawnAroundPlayerRuntimeData");
static_assert(sizeof(FLivingWorldSpawnAroundPlayerRuntimeData) == 0x000018, "Wrong size on FLivingWorldSpawnAroundPlayerRuntimeData");
static_assert(offsetof(FLivingWorldSpawnAroundPlayerRuntimeData, PointAroundPlayerProviders) == 0x000000, "Member 'FLivingWorldSpawnAroundPlayerRuntimeData::PointAroundPlayerProviders' has a wrong offset!");
static_assert(offsetof(FLivingWorldSpawnAroundPlayerRuntimeData, Encounter) == 0x000010, "Member 'FLivingWorldSpawnAroundPlayerRuntimeData::Encounter' has a wrong offset!");

// ScriptStruct LagerRuntime.PointProviderTagDebugColor
// 0x0028 (0x0028 - 0x0000)
struct FPointProviderTagDebugColor final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPointProviderTagDebugColor) == 0x000008, "Wrong alignment on FPointProviderTagDebugColor");
static_assert(sizeof(FPointProviderTagDebugColor) == 0x000028, "Wrong size on FPointProviderTagDebugColor");
static_assert(offsetof(FPointProviderTagDebugColor, Tags) == 0x000000, "Member 'FPointProviderTagDebugColor::Tags' has a wrong offset!");
static_assert(offsetof(FPointProviderTagDebugColor, Color) == 0x000020, "Member 'FPointProviderTagDebugColor::Color' has a wrong offset!");

// ScriptStruct LagerRuntime.PointProviderDebugInfo
// 0x0010 (0x0010 - 0x0000)
struct FPointProviderDebugInfo final
{
public:
	TArray<struct FPointProviderTagDebugColor>    DebugColors;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPointProviderDebugInfo) == 0x000008, "Wrong alignment on FPointProviderDebugInfo");
static_assert(sizeof(FPointProviderDebugInfo) == 0x000010, "Wrong size on FPointProviderDebugInfo");
static_assert(offsetof(FPointProviderDebugInfo, DebugColors) == 0x000000, "Member 'FPointProviderDebugInfo::DebugColors' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEventDataActorSpawnDescription
// 0x0030 (0x0130 - 0x0100)
struct FFortAthenaLivingWorldEventDataActorSpawnDescription final : public FFortAthenaLivingWorldActorSpawnDescription
{
public:
	bool                                          bSpawnAroundDefaultPoint;                          // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateDefaultPosition;                            // 0x0101(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSharePreviousActorEQSResult;                      // 0x0102(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103[0x5];                                      // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQuery*                              SpawnAroundEnvironmentQuery;                       // 0x0108(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvQueryRunMode                              SpawnAroundEnvironmentQueryRunMode;                // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         SpawnAroundNavigationSourceOverride;               // 0x0118(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldEventDataActorSpawnDescription) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldEventDataActorSpawnDescription");
static_assert(sizeof(FFortAthenaLivingWorldEventDataActorSpawnDescription) == 0x000130, "Wrong size on FFortAthenaLivingWorldEventDataActorSpawnDescription");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, bSpawnAroundDefaultPoint) == 0x000100, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::bSpawnAroundDefaultPoint' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, bUpdateDefaultPosition) == 0x000101, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::bUpdateDefaultPosition' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, bSharePreviousActorEQSResult) == 0x000102, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::bSharePreviousActorEQSResult' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, SpawnAroundEnvironmentQuery) == 0x000108, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::SpawnAroundEnvironmentQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, SpawnAroundEnvironmentQueryRunMode) == 0x000110, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::SpawnAroundEnvironmentQueryRunMode' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, SpawnAroundNavigationSourceOverride) == 0x000118, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::SpawnAroundNavigationSourceOverride' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldPointProviderSpawnLimiter
// 0x0068 (0x0068 - 0x0000)
struct FFortAthenaLivingWorldPointProviderSpawnLimiter final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ELivingWorldPointProviderSpawnLimiterBehavior Behavior;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxNumberOfSpawn;                                  // 0x0010(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxNumberOfEventInstance;                          // 0x0038(0x0028)(Edit, NativeAccessSpecifierPrivate)
	bool                                          bResetLimitWhenEnabling;                           // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldPointProviderSpawnLimiter) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldPointProviderSpawnLimiter");
static_assert(sizeof(FFortAthenaLivingWorldPointProviderSpawnLimiter) == 0x000068, "Wrong size on FFortAthenaLivingWorldPointProviderSpawnLimiter");
static_assert(offsetof(FFortAthenaLivingWorldPointProviderSpawnLimiter, Behavior) == 0x000008, "Member 'FFortAthenaLivingWorldPointProviderSpawnLimiter::Behavior' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldPointProviderSpawnLimiter, MaxNumberOfSpawn) == 0x000010, "Member 'FFortAthenaLivingWorldPointProviderSpawnLimiter::MaxNumberOfSpawn' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldPointProviderSpawnLimiter, MaxNumberOfEventInstance) == 0x000038, "Member 'FFortAthenaLivingWorldPointProviderSpawnLimiter::MaxNumberOfEventInstance' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldPointProviderSpawnLimiter, bResetLimitWhenEnabling) == 0x000060, "Member 'FFortAthenaLivingWorldPointProviderSpawnLimiter::bResetLimitWhenEnabling' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldSpawnerDataSelector
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFortAthenaLivingWorldSpawnerDataSelector
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldSpawnerDataSelector) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldSpawnerDataSelector");
static_assert(sizeof(FFortAthenaLivingWorldSpawnerDataSelector) == 0x000008, "Wrong size on FFortAthenaLivingWorldSpawnerDataSelector");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldCondition_CheckPrefabTags
// 0x0050 (0x0060 - 0x0010)
struct FFortAthenaLivingWorldCondition_CheckPrefabTags final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          ActorRef;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0018(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldCondition_CheckPrefabTags) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldCondition_CheckPrefabTags");
static_assert(sizeof(FFortAthenaLivingWorldCondition_CheckPrefabTags) == 0x000060, "Wrong size on FFortAthenaLivingWorldCondition_CheckPrefabTags");
static_assert(offsetof(FFortAthenaLivingWorldCondition_CheckPrefabTags, ActorRef) == 0x000010, "Member 'FFortAthenaLivingWorldCondition_CheckPrefabTags::ActorRef' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCondition_CheckPrefabTags, TagQuery) == 0x000018, "Member 'FFortAthenaLivingWorldCondition_CheckPrefabTags::TagQuery' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldDensityCondition
// 0x0088 (0x0098 - 0x0010)
struct FFortAthenaLivingWorldDensityCondition final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          ActorRef;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0018(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Distance;                                          // 0x0020(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxDensity;                                        // 0x0048(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDensity;                                        // 0x0070(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldDensityCondition) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldDensityCondition");
static_assert(sizeof(FFortAthenaLivingWorldDensityCondition) == 0x000098, "Wrong size on FFortAthenaLivingWorldDensityCondition");
static_assert(offsetof(FFortAthenaLivingWorldDensityCondition, ActorRef) == 0x000010, "Member 'FFortAthenaLivingWorldDensityCondition::ActorRef' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldDensityCondition, tag) == 0x000018, "Member 'FFortAthenaLivingWorldDensityCondition::tag' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldDensityCondition, Distance) == 0x000020, "Member 'FFortAthenaLivingWorldDensityCondition::Distance' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldDensityCondition, MaxDensity) == 0x000048, "Member 'FFortAthenaLivingWorldDensityCondition::MaxDensity' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldDensityCondition, MinDensity) == 0x000070, "Member 'FFortAthenaLivingWorldDensityCondition::MinDensity' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldDespawnCondition
// 0x0048 (0x0048 - 0x0000)
struct FFortAthenaLivingWorldDespawnCondition final
{
public:
	struct FWorldConditionQueryDefinition         DespawnWorldCondition;                             // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TimeAsCandidateBeforeDespawn;                      // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeAsCandidateBeforeDespawnDeviation;             // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomDeathTag;                                // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DeathTagContainer;                                 // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldDespawnCondition) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldDespawnCondition");
static_assert(sizeof(FFortAthenaLivingWorldDespawnCondition) == 0x000048, "Wrong size on FFortAthenaLivingWorldDespawnCondition");
static_assert(offsetof(FFortAthenaLivingWorldDespawnCondition, DespawnWorldCondition) == 0x000000, "Member 'FFortAthenaLivingWorldDespawnCondition::DespawnWorldCondition' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldDespawnCondition, TimeAsCandidateBeforeDespawn) == 0x000018, "Member 'FFortAthenaLivingWorldDespawnCondition::TimeAsCandidateBeforeDespawn' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldDespawnCondition, TimeAsCandidateBeforeDespawnDeviation) == 0x00001C, "Member 'FFortAthenaLivingWorldDespawnCondition::TimeAsCandidateBeforeDespawnDeviation' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldDespawnCondition, bUseCustomDeathTag) == 0x000020, "Member 'FFortAthenaLivingWorldDespawnCondition::bUseCustomDeathTag' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldDespawnCondition, DeathTagContainer) == 0x000028, "Member 'FFortAthenaLivingWorldDespawnCondition::DeathTagContainer' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLinearEncounterPlayerParticipationData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FFortAthenaLinearEncounterPlayerParticipationData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLinearEncounterPlayerParticipationData) == 0x000008, "Wrong alignment on FFortAthenaLinearEncounterPlayerParticipationData");
static_assert(sizeof(FFortAthenaLinearEncounterPlayerParticipationData) == 0x000040, "Wrong size on FFortAthenaLinearEncounterPlayerParticipationData");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldActorUpdateHandler
// 0x00B0 (0x00B0 - 0x0000)
struct FFortAthenaLivingWorldActorUpdateHandler final
{
public:
	class UFortAthenaLivingWorldManager*          LivingWorldManager;                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0xA8];                                       // 0x0008(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldActorUpdateHandler) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldActorUpdateHandler");
static_assert(sizeof(FFortAthenaLivingWorldActorUpdateHandler) == 0x0000B0, "Wrong size on FFortAthenaLivingWorldActorUpdateHandler");
static_assert(offsetof(FFortAthenaLivingWorldActorUpdateHandler, LivingWorldManager) == 0x000000, "Member 'FFortAthenaLivingWorldActorUpdateHandler::LivingWorldManager' has a wrong offset!");

// ScriptStruct LagerRuntime.FortLivingWorldEventTableVariation
// 0x0048 (0x0048 - 0x0000)
struct FFortLivingWorldEventTableVariation final
{
public:
	TSoftObjectPtr<class UDataTable>              EventTableVariation;                               // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         VariationWeight;                                   // 0x0020(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLivingWorldEventTableVariation) == 0x000008, "Wrong alignment on FFortLivingWorldEventTableVariation");
static_assert(sizeof(FFortLivingWorldEventTableVariation) == 0x000048, "Wrong size on FFortLivingWorldEventTableVariation");
static_assert(offsetof(FFortLivingWorldEventTableVariation, EventTableVariation) == 0x000000, "Member 'FFortLivingWorldEventTableVariation::EventTableVariation' has a wrong offset!");
static_assert(offsetof(FFortLivingWorldEventTableVariation, VariationWeight) == 0x000020, "Member 'FFortLivingWorldEventTableVariation::VariationWeight' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldCategory
// 0x00E0 (0x00E8 - 0x0008)
struct FFortAthenaLivingWorldCategory final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UDataTable>              EventTable;                                        // 0x0008(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortLivingWorldEventTableVariation> EventTableVariations;                              // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         MaxCount;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxSpawnedCount;                                   // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EventInstanceMaxCount;                             // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EventInstanceMaxSpawnedCount;                      // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FWorldConditionQueryDefinition         CanSpawnCondition;                                 // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         Priority;                                          // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bExcludeFromGlobalAIBudget;                        // 0x0064(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      RequirePlaylistTagQuery;                           // 0x0068(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<TSoftObjectPtr<class UFortAthenaLivingWorldEncounter>> Encounters;                                        // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         IsEnabled;                                         // 0x00C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaLivingWorldCategory) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldCategory");
static_assert(sizeof(FFortAthenaLivingWorldCategory) == 0x0000E8, "Wrong size on FFortAthenaLivingWorldCategory");
static_assert(offsetof(FFortAthenaLivingWorldCategory, EventTable) == 0x000008, "Member 'FFortAthenaLivingWorldCategory::EventTable' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, EventTableVariations) == 0x000028, "Member 'FFortAthenaLivingWorldCategory::EventTableVariations' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, MaxCount) == 0x000038, "Member 'FFortAthenaLivingWorldCategory::MaxCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, MaxSpawnedCount) == 0x00003C, "Member 'FFortAthenaLivingWorldCategory::MaxSpawnedCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, EventInstanceMaxCount) == 0x000040, "Member 'FFortAthenaLivingWorldCategory::EventInstanceMaxCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, EventInstanceMaxSpawnedCount) == 0x000044, "Member 'FFortAthenaLivingWorldCategory::EventInstanceMaxSpawnedCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, CanSpawnCondition) == 0x000048, "Member 'FFortAthenaLivingWorldCategory::CanSpawnCondition' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, Priority) == 0x000060, "Member 'FFortAthenaLivingWorldCategory::Priority' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, bExcludeFromGlobalAIBudget) == 0x000064, "Member 'FFortAthenaLivingWorldCategory::bExcludeFromGlobalAIBudget' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, RequirePlaylistTagQuery) == 0x000068, "Member 'FFortAthenaLivingWorldCategory::RequirePlaylistTagQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, Encounters) == 0x0000B0, "Member 'FFortAthenaLivingWorldCategory::Encounters' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, IsEnabled) == 0x0000C0, "Member 'FFortAthenaLivingWorldCategory::IsEnabled' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldTagDensityGridData
// 0x0058 (0x0058 - 0x0000)
struct FFortAthenaLivingWorldTagDensityGridData final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         GridCellSize;                                      // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SparseToDenseRatio;                                // 0x0030(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldTagDensityGridData) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldTagDensityGridData");
static_assert(sizeof(FFortAthenaLivingWorldTagDensityGridData) == 0x000058, "Wrong size on FFortAthenaLivingWorldTagDensityGridData");
static_assert(offsetof(FFortAthenaLivingWorldTagDensityGridData, tag) == 0x000000, "Member 'FFortAthenaLivingWorldTagDensityGridData::tag' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldTagDensityGridData, GridCellSize) == 0x000008, "Member 'FFortAthenaLivingWorldTagDensityGridData::GridCellSize' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldTagDensityGridData, SparseToDenseRatio) == 0x000030, "Member 'FFortAthenaLivingWorldTagDensityGridData::SparseToDenseRatio' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldCategoryTableData
// 0x0050 (0x0050 - 0x0000)
struct FFortAthenaLivingWorldCategoryTableData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              CategoryTable;                                     // 0x0008(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         IsEnabled;                                         // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldCategoryTableData) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldCategoryTableData");
static_assert(sizeof(FFortAthenaLivingWorldCategoryTableData) == 0x000050, "Wrong size on FFortAthenaLivingWorldCategoryTableData");
static_assert(offsetof(FFortAthenaLivingWorldCategoryTableData, Name) == 0x000000, "Member 'FFortAthenaLivingWorldCategoryTableData::Name' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategoryTableData, CategoryTable) == 0x000008, "Member 'FFortAthenaLivingWorldCategoryTableData::CategoryTable' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategoryTableData, IsEnabled) == 0x000028, "Member 'FFortAthenaLivingWorldCategoryTableData::IsEnabled' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaActorDensityDebugInfo
// 0x0048 (0x0048 - 0x0000)
struct FFortAthenaActorDensityDebugInfo final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorPosition;                                     // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             MinCellIndex;                                      // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             MaxCellIndex;                                      // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityValue;                                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaActorDensityDebugInfo) == 0x000008, "Wrong alignment on FFortAthenaActorDensityDebugInfo");
static_assert(sizeof(FFortAthenaActorDensityDebugInfo) == 0x000048, "Wrong size on FFortAthenaActorDensityDebugInfo");
static_assert(offsetof(FFortAthenaActorDensityDebugInfo, ActorName) == 0x000000, "Member 'FFortAthenaActorDensityDebugInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FFortAthenaActorDensityDebugInfo, ActorPosition) == 0x000010, "Member 'FFortAthenaActorDensityDebugInfo::ActorPosition' has a wrong offset!");
static_assert(offsetof(FFortAthenaActorDensityDebugInfo, MinCellIndex) == 0x000028, "Member 'FFortAthenaActorDensityDebugInfo::MinCellIndex' has a wrong offset!");
static_assert(offsetof(FFortAthenaActorDensityDebugInfo, MaxCellIndex) == 0x000034, "Member 'FFortAthenaActorDensityDebugInfo::MaxCellIndex' has a wrong offset!");
static_assert(offsetof(FFortAthenaActorDensityDebugInfo, DensityValue) == 0x000040, "Member 'FFortAthenaActorDensityDebugInfo::DensityValue' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldDensityGrid
// 0x00C0 (0x0180 - 0x00C0)
struct FFortAthenaLivingWorldDensityGrid final : public FFortSpatialGrid
{
public:
	uint8                                         Pad_C0[0xC0];                                      // 0x00C0(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldDensityGrid) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldDensityGrid");
static_assert(sizeof(FFortAthenaLivingWorldDensityGrid) == 0x000180, "Wrong size on FFortAthenaLivingWorldDensityGrid");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEncounterStage
// 0x00A0 (0x00A0 - 0x0000)
struct FFortAthenaLivingWorldEncounterStage final
{
public:
	TSoftObjectPtr<class UDataTable>              EventTable;                                        // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaximumConcurrentNumberOfAI;                       // 0x0020(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          bAllowRandomMaximumActorCount;                     // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaximumConcurrentNumberOfAI_LowValue;              // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxSpawnCountPerEventGeneration;                   // 0x0078(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaLivingWorldEncounterStage) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldEncounterStage");
static_assert(sizeof(FFortAthenaLivingWorldEncounterStage) == 0x0000A0, "Wrong size on FFortAthenaLivingWorldEncounterStage");
static_assert(offsetof(FFortAthenaLivingWorldEncounterStage, EventTable) == 0x000000, "Member 'FFortAthenaLivingWorldEncounterStage::EventTable' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEncounterStage, MaximumConcurrentNumberOfAI) == 0x000020, "Member 'FFortAthenaLivingWorldEncounterStage::MaximumConcurrentNumberOfAI' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEncounterStage, bAllowRandomMaximumActorCount) == 0x000048, "Member 'FFortAthenaLivingWorldEncounterStage::bAllowRandomMaximumActorCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEncounterStage, MaximumConcurrentNumberOfAI_LowValue) == 0x000050, "Member 'FFortAthenaLivingWorldEncounterStage::MaximumConcurrentNumberOfAI_LowValue' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEncounterStage, MaxSpawnCountPerEventGeneration) == 0x000078, "Member 'FFortAthenaLivingWorldEncounterStage::MaxSpawnCountPerEventGeneration' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEventDespawnCondition
// 0x0020 (0x0020 - 0x0000)
struct FFortAthenaLivingWorldEventDespawnCondition final
{
public:
	bool                                          bCanBeDespawned;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDistanceToPlayer;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeAsCandidateBeforeDespawn;                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaGamePhaseStep                          CanStartDespawningPhaseStep;                       // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CanStartDespawningSafeZonePhase;                   // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanDespawnWhenInCombatWithPlayer;                 // 0x0014(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxStimulusAgeToBeConsideredInCombat;              // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanDespawnInTheStorm;                             // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldEventDespawnCondition) == 0x000004, "Wrong alignment on FFortAthenaLivingWorldEventDespawnCondition");
static_assert(sizeof(FFortAthenaLivingWorldEventDespawnCondition) == 0x000020, "Wrong size on FFortAthenaLivingWorldEventDespawnCondition");
static_assert(offsetof(FFortAthenaLivingWorldEventDespawnCondition, bCanBeDespawned) == 0x000000, "Member 'FFortAthenaLivingWorldEventDespawnCondition::bCanBeDespawned' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDespawnCondition, MinDistanceToPlayer) == 0x000004, "Member 'FFortAthenaLivingWorldEventDespawnCondition::MinDistanceToPlayer' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDespawnCondition, TimeAsCandidateBeforeDespawn) == 0x000008, "Member 'FFortAthenaLivingWorldEventDespawnCondition::TimeAsCandidateBeforeDespawn' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDespawnCondition, CanStartDespawningPhaseStep) == 0x00000C, "Member 'FFortAthenaLivingWorldEventDespawnCondition::CanStartDespawningPhaseStep' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDespawnCondition, CanStartDespawningSafeZonePhase) == 0x000010, "Member 'FFortAthenaLivingWorldEventDespawnCondition::CanStartDespawningSafeZonePhase' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDespawnCondition, bCanDespawnWhenInCombatWithPlayer) == 0x000014, "Member 'FFortAthenaLivingWorldEventDespawnCondition::bCanDespawnWhenInCombatWithPlayer' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDespawnCondition, MaxStimulusAgeToBeConsideredInCombat) == 0x000018, "Member 'FFortAthenaLivingWorldEventDespawnCondition::MaxStimulusAgeToBeConsideredInCombat' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDespawnCondition, bCanDespawnInTheStorm) == 0x00001C, "Member 'FFortAthenaLivingWorldEventDespawnCondition::bCanDespawnInTheStorm' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEventTagDensityCondition
// 0x000C (0x000C - 0x0000)
struct FFortAthenaLivingWorldEventTagDensityCondition final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDensity;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldEventTagDensityCondition) == 0x000004, "Wrong alignment on FFortAthenaLivingWorldEventTagDensityCondition");
static_assert(sizeof(FFortAthenaLivingWorldEventTagDensityCondition) == 0x00000C, "Wrong size on FFortAthenaLivingWorldEventTagDensityCondition");
static_assert(offsetof(FFortAthenaLivingWorldEventTagDensityCondition, tag) == 0x000000, "Member 'FFortAthenaLivingWorldEventTagDensityCondition::tag' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventTagDensityCondition, Distance) == 0x000004, "Member 'FFortAthenaLivingWorldEventTagDensityCondition::Distance' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventTagDensityCondition, MaxDensity) == 0x000008, "Member 'FFortAthenaLivingWorldEventTagDensityCondition::MaxDensity' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEventDataEntry
// 0x0048 (0x0048 - 0x0000)
struct FFortAthenaLivingWorldEventDataEntry final
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldEventData> EventData;                                         // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Weight;                                            // 0x0020(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldEventDataEntry) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldEventDataEntry");
static_assert(sizeof(FFortAthenaLivingWorldEventDataEntry) == 0x000048, "Wrong size on FFortAthenaLivingWorldEventDataEntry");
static_assert(offsetof(FFortAthenaLivingWorldEventDataEntry, EventData) == 0x000000, "Member 'FFortAthenaLivingWorldEventDataEntry::EventData' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataEntry, Weight) == 0x000020, "Member 'FFortAthenaLivingWorldEventDataEntry::Weight' has a wrong offset!");

// ScriptStruct LagerRuntime.LivingWorldCalendarEventCondition
// 0x0010 (0x0010 - 0x0000)
struct FLivingWorldCalendarEventCondition final
{
public:
	class FName                                   CalendarEventName;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELivingWorldCalendarEventConditionBehavior    Behavior;                                          // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldEventBeActive;                               // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELivingWorldCalendarEventConditionRatioBehavior RatioBehavior;                                     // 0x0006(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RatioValue;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RatioMaxValue;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLivingWorldCalendarEventCondition) == 0x000004, "Wrong alignment on FLivingWorldCalendarEventCondition");
static_assert(sizeof(FLivingWorldCalendarEventCondition) == 0x000010, "Wrong size on FLivingWorldCalendarEventCondition");
static_assert(offsetof(FLivingWorldCalendarEventCondition, CalendarEventName) == 0x000000, "Member 'FLivingWorldCalendarEventCondition::CalendarEventName' has a wrong offset!");
static_assert(offsetof(FLivingWorldCalendarEventCondition, Behavior) == 0x000004, "Member 'FLivingWorldCalendarEventCondition::Behavior' has a wrong offset!");
static_assert(offsetof(FLivingWorldCalendarEventCondition, ShouldEventBeActive) == 0x000005, "Member 'FLivingWorldCalendarEventCondition::ShouldEventBeActive' has a wrong offset!");
static_assert(offsetof(FLivingWorldCalendarEventCondition, RatioBehavior) == 0x000006, "Member 'FLivingWorldCalendarEventCondition::RatioBehavior' has a wrong offset!");
static_assert(offsetof(FLivingWorldCalendarEventCondition, RatioValue) == 0x000008, "Member 'FLivingWorldCalendarEventCondition::RatioValue' has a wrong offset!");
static_assert(offsetof(FLivingWorldCalendarEventCondition, RatioMaxValue) == 0x00000C, "Member 'FLivingWorldCalendarEventCondition::RatioMaxValue' has a wrong offset!");

// ScriptStruct LagerRuntime.LivingWorldCalendarEventConditions
// 0x0018 (0x0018 - 0x0000)
struct FLivingWorldCalendarEventConditions final
{
public:
	TArray<struct FLivingWorldCalendarEventCondition> Conditions;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          IsActiveWithoutSeasonalManager;                    // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLivingWorldCalendarEventConditions) == 0x000008, "Wrong alignment on FLivingWorldCalendarEventConditions");
static_assert(sizeof(FLivingWorldCalendarEventConditions) == 0x000018, "Wrong size on FLivingWorldCalendarEventConditions");
static_assert(offsetof(FLivingWorldCalendarEventConditions, Conditions) == 0x000000, "Member 'FLivingWorldCalendarEventConditions::Conditions' has a wrong offset!");
static_assert(offsetof(FLivingWorldCalendarEventConditions, IsActiveWithoutSeasonalManager) == 0x000010, "Member 'FLivingWorldCalendarEventConditions::IsActiveWithoutSeasonalManager' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEvent
// 0x01A8 (0x01B0 - 0x0008)
struct FFortAthenaLivingWorldEvent final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldEventData> EventData;                                         // 0x0008(0x0020)(Deprecated, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldEventDataEntry> EventDatas;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         IsEnabled;                                         // 0x0038(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<float>                                 MaxCount;                                          // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<float>                                 MaxSpawnedCount;                                   // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<float>                                 EventInstanceMaxCount;                             // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<float>                                 EventInstanceMaxSpawnedCount;                      // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         Weight;                                            // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MinRespawnTime;                                    // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 MaxRespawnTime;                                    // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 InstantDeathMinRespawnTime;                        // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 InstantDeathMaxRespawnTime;                        // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bOnlyInSafeZone;                                   // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOnlyInNextSafeZone;                               // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOnlyInNextSafeZoneIfStormShrinking;               // 0x00EA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EB[0x5];                                       // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldConditionQueryDefinition         CanSpawnCondition;                                 // 0x00F0(0x0018)(Edit, NativeAccessSpecifierPrivate)
	EAthenaGamePhaseStep                          ActivationGamePhaseStep;                           // 0x0108(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivationSafezoneIndex;                           // 0x010C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ActivationMinDelay;                                // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ActivationMaxDelay;                                // 0x0114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DeactivationMinDelay;                              // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DeactivationMaxDelay;                              // 0x011C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldEventTagDensityCondition> TagDensityConditions;                              // 0x0120(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          bCheckForActorDensity;                             // 0x0130(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxActorDensityOverride;                           // 0x0134(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinDistanceToPlayer;                               // 0x0138(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDistanceToPlayer;                               // 0x013C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCanSpawnWithoutMatchingPlayerDistance;            // 0x0140(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomActivationChance;                            // 0x0144(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldEventDespawnCondition DespawnCondition;                                  // 0x0148(0x0020)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldDespawnCondition> DespawnConditions;                                 // 0x0168(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  RequirePlaylistTags;                               // 0x0178(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FLivingWorldCalendarEventConditions    CalendarEventConditions;                           // 0x0198(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaLivingWorldEvent) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldEvent");
static_assert(sizeof(FFortAthenaLivingWorldEvent) == 0x0001B0, "Wrong size on FFortAthenaLivingWorldEvent");
static_assert(offsetof(FFortAthenaLivingWorldEvent, EventData) == 0x000008, "Member 'FFortAthenaLivingWorldEvent::EventData' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, EventDatas) == 0x000028, "Member 'FFortAthenaLivingWorldEvent::EventDatas' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, IsEnabled) == 0x000038, "Member 'FFortAthenaLivingWorldEvent::IsEnabled' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxCount) == 0x000060, "Member 'FFortAthenaLivingWorldEvent::MaxCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxSpawnedCount) == 0x000070, "Member 'FFortAthenaLivingWorldEvent::MaxSpawnedCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, EventInstanceMaxCount) == 0x000080, "Member 'FFortAthenaLivingWorldEvent::EventInstanceMaxCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, EventInstanceMaxSpawnedCount) == 0x000090, "Member 'FFortAthenaLivingWorldEvent::EventInstanceMaxSpawnedCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, Weight) == 0x0000A0, "Member 'FFortAthenaLivingWorldEvent::Weight' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MinRespawnTime) == 0x0000A8, "Member 'FFortAthenaLivingWorldEvent::MinRespawnTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxRespawnTime) == 0x0000B8, "Member 'FFortAthenaLivingWorldEvent::MaxRespawnTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, InstantDeathMinRespawnTime) == 0x0000C8, "Member 'FFortAthenaLivingWorldEvent::InstantDeathMinRespawnTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, InstantDeathMaxRespawnTime) == 0x0000D8, "Member 'FFortAthenaLivingWorldEvent::InstantDeathMaxRespawnTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, bOnlyInSafeZone) == 0x0000E8, "Member 'FFortAthenaLivingWorldEvent::bOnlyInSafeZone' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, bOnlyInNextSafeZone) == 0x0000E9, "Member 'FFortAthenaLivingWorldEvent::bOnlyInNextSafeZone' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, bOnlyInNextSafeZoneIfStormShrinking) == 0x0000EA, "Member 'FFortAthenaLivingWorldEvent::bOnlyInNextSafeZoneIfStormShrinking' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, CanSpawnCondition) == 0x0000F0, "Member 'FFortAthenaLivingWorldEvent::CanSpawnCondition' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, ActivationGamePhaseStep) == 0x000108, "Member 'FFortAthenaLivingWorldEvent::ActivationGamePhaseStep' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, ActivationSafezoneIndex) == 0x00010C, "Member 'FFortAthenaLivingWorldEvent::ActivationSafezoneIndex' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, ActivationMinDelay) == 0x000110, "Member 'FFortAthenaLivingWorldEvent::ActivationMinDelay' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, ActivationMaxDelay) == 0x000114, "Member 'FFortAthenaLivingWorldEvent::ActivationMaxDelay' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, DeactivationMinDelay) == 0x000118, "Member 'FFortAthenaLivingWorldEvent::DeactivationMinDelay' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, DeactivationMaxDelay) == 0x00011C, "Member 'FFortAthenaLivingWorldEvent::DeactivationMaxDelay' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, TagDensityConditions) == 0x000120, "Member 'FFortAthenaLivingWorldEvent::TagDensityConditions' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, bCheckForActorDensity) == 0x000130, "Member 'FFortAthenaLivingWorldEvent::bCheckForActorDensity' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxActorDensityOverride) == 0x000134, "Member 'FFortAthenaLivingWorldEvent::MaxActorDensityOverride' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MinDistanceToPlayer) == 0x000138, "Member 'FFortAthenaLivingWorldEvent::MinDistanceToPlayer' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxDistanceToPlayer) == 0x00013C, "Member 'FFortAthenaLivingWorldEvent::MaxDistanceToPlayer' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, bCanSpawnWithoutMatchingPlayerDistance) == 0x000140, "Member 'FFortAthenaLivingWorldEvent::bCanSpawnWithoutMatchingPlayerDistance' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, RandomActivationChance) == 0x000144, "Member 'FFortAthenaLivingWorldEvent::RandomActivationChance' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, DespawnCondition) == 0x000148, "Member 'FFortAthenaLivingWorldEvent::DespawnCondition' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, DespawnConditions) == 0x000168, "Member 'FFortAthenaLivingWorldEvent::DespawnConditions' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, RequirePlaylistTags) == 0x000178, "Member 'FFortAthenaLivingWorldEvent::RequirePlaylistTags' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, CalendarEventConditions) == 0x000198, "Member 'FFortAthenaLivingWorldEvent::CalendarEventConditions' has a wrong offset!");

// ScriptStruct LagerRuntime.PointProviderFilterEntry
// 0x0088 (0x0088 - 0x0000)
struct FPointProviderFilterEntry final
{
public:
	struct FGameplayTagQuery                      ProviderFiltersTagQuery;                           // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLivingWorldCalendarEventConditions    CalendarEventConditions;                           // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Weight;                                            // 0x0060(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPointProviderFilterEntry) == 0x000008, "Wrong alignment on FPointProviderFilterEntry");
static_assert(sizeof(FPointProviderFilterEntry) == 0x000088, "Wrong size on FPointProviderFilterEntry");
static_assert(offsetof(FPointProviderFilterEntry, ProviderFiltersTagQuery) == 0x000000, "Member 'FPointProviderFilterEntry::ProviderFiltersTagQuery' has a wrong offset!");
static_assert(offsetof(FPointProviderFilterEntry, CalendarEventConditions) == 0x000048, "Member 'FPointProviderFilterEntry::CalendarEventConditions' has a wrong offset!");
static_assert(offsetof(FPointProviderFilterEntry, Weight) == 0x000060, "Member 'FPointProviderFilterEntry::Weight' has a wrong offset!");

// ScriptStruct LagerRuntime.FortLivingWorldConfigOverride
// 0x0068 (0x0068 - 0x0000)
struct FFortLivingWorldConfigOverride final
{
public:
	TSoftObjectPtr<class UWorld>                  SourceWorld;                                       // 0x0000(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlaylistTag;                                       // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAthenaLivingWorldConfigData> LagerConfig;                                       // 0x0040(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortReleaseVersion                    StartVersion;                                      // 0x0060(0x0004)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortReleaseVersion                    EndVersion;                                        // 0x0064(0x0004)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLivingWorldConfigOverride) == 0x000008, "Wrong alignment on FFortLivingWorldConfigOverride");
static_assert(sizeof(FFortLivingWorldConfigOverride) == 0x000068, "Wrong size on FFortLivingWorldConfigOverride");
static_assert(offsetof(FFortLivingWorldConfigOverride, SourceWorld) == 0x000000, "Member 'FFortLivingWorldConfigOverride::SourceWorld' has a wrong offset!");
static_assert(offsetof(FFortLivingWorldConfigOverride, PlaylistTag) == 0x000020, "Member 'FFortLivingWorldConfigOverride::PlaylistTag' has a wrong offset!");
static_assert(offsetof(FFortLivingWorldConfigOverride, LagerConfig) == 0x000040, "Member 'FFortLivingWorldConfigOverride::LagerConfig' has a wrong offset!");
static_assert(offsetof(FFortLivingWorldConfigOverride, StartVersion) == 0x000060, "Member 'FFortLivingWorldConfigOverride::StartVersion' has a wrong offset!");
static_assert(offsetof(FFortLivingWorldConfigOverride, EndVersion) == 0x000064, "Member 'FFortLivingWorldConfigOverride::EndVersion' has a wrong offset!");

// ScriptStruct LagerRuntime.ortAthenaLivingWorldNavigationInvokerSettingsOverride
// 0x0070 (0x0070 - 0x0000)
struct FortAthenaLivingWorldNavigationInvokerSettingsOverride final
{
public:
	struct FGameplayTagQuery                      OverrideTagQuery;                                  // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RegistrationDistanceToPlayer;                      // 0x0048(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldNavigationInvokerSettingsOverride) == 0x000008, "Wrong alignment on FortAthenaLivingWorldNavigationInvokerSettingsOverride");
static_assert(sizeof(FortAthenaLivingWorldNavigationInvokerSettingsOverride) == 0x000070, "Wrong size on FortAthenaLivingWorldNavigationInvokerSettingsOverride");
static_assert(offsetof(FortAthenaLivingWorldNavigationInvokerSettingsOverride, OverrideTagQuery) == 0x000000, "Member 'FortAthenaLivingWorldNavigationInvokerSettingsOverride::OverrideTagQuery' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldNavigationInvokerSettingsOverride, RegistrationDistanceToPlayer) == 0x000048, "Member 'FortAthenaLivingWorldNavigationInvokerSettingsOverride::RegistrationDistanceToPlayer' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldPlayerTracker
// 0x00C0 (0x00C0 - 0x0000)
struct FFortAthenaLivingWorldPlayerTracker final
{
public:
	TSet<class AFortAthenaAIBotController*>       TrackedBotControllers;                             // 0x0000(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class AFortPawn*>                      TrackedPawns;                                      // 0x0050(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class AController*>                    TrackedPlayerControllers;                          // 0x0060(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UObject>>         Listeners;                                         // 0x0070(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x40];                                      // 0x0080(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldPlayerTracker) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldPlayerTracker");
static_assert(sizeof(FFortAthenaLivingWorldPlayerTracker) == 0x0000C0, "Wrong size on FFortAthenaLivingWorldPlayerTracker");
static_assert(offsetof(FFortAthenaLivingWorldPlayerTracker, TrackedBotControllers) == 0x000000, "Member 'FFortAthenaLivingWorldPlayerTracker::TrackedBotControllers' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldPlayerTracker, TrackedPawns) == 0x000050, "Member 'FFortAthenaLivingWorldPlayerTracker::TrackedPawns' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldPlayerTracker, TrackedPlayerControllers) == 0x000060, "Member 'FFortAthenaLivingWorldPlayerTracker::TrackedPlayerControllers' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldPlayerTracker, Listeners) == 0x000070, "Member 'FFortAthenaLivingWorldPlayerTracker::Listeners' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldPointProviderUpdateHandler
// 0x0098 (0x0098 - 0x0000)
struct FFortAthenaLivingWorldPointProviderUpdateHandler final
{
public:
	class UFortAthenaLivingWorldManager*          LivingWorldManager;                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x90];                                       // 0x0008(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldPointProviderUpdateHandler) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldPointProviderUpdateHandler");
static_assert(sizeof(FFortAthenaLivingWorldPointProviderUpdateHandler) == 0x000098, "Wrong size on FFortAthenaLivingWorldPointProviderUpdateHandler");
static_assert(offsetof(FFortAthenaLivingWorldPointProviderUpdateHandler, LivingWorldManager) == 0x000000, "Member 'FFortAthenaLivingWorldPointProviderUpdateHandler::LivingWorldManager' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldPreloader
// 0x00E0 (0x00E0 - 0x0000)
struct FFortAthenaLivingWorldPreloader final
{
public:
	class UFortAthenaLivingWorldManager*          LivingWorldManager;                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UFortAthenaSpawnerDataBase>> LoadedSpawnerDataClass;                            // 0x0008(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AActor>>             LoadedActorClasses;                                // 0x0018(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_28[0xB8];                                      // 0x0028(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldPreloader) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldPreloader");
static_assert(sizeof(FFortAthenaLivingWorldPreloader) == 0x0000E0, "Wrong size on FFortAthenaLivingWorldPreloader");
static_assert(offsetof(FFortAthenaLivingWorldPreloader, LivingWorldManager) == 0x000000, "Member 'FFortAthenaLivingWorldPreloader::LivingWorldManager' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldPreloader, LoadedSpawnerDataClass) == 0x000008, "Member 'FFortAthenaLivingWorldPreloader::LoadedSpawnerDataClass' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldPreloader, LoadedActorClasses) == 0x000018, "Member 'FFortAthenaLivingWorldPreloader::LoadedActorClasses' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldRuntimePointProviderHandler
// 0x0060 (0x0060 - 0x0000)
struct FFortAthenaLivingWorldRuntimePointProviderHandler final
{
public:
	class UFortAthenaLivingWorldManager*          LivingWorldManager;                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class AActor*, class UObject*>           RuntimePointProviderMap;                           // 0x0008(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldRuntimePointProviderHandler) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldRuntimePointProviderHandler");
static_assert(sizeof(FFortAthenaLivingWorldRuntimePointProviderHandler) == 0x000060, "Wrong size on FFortAthenaLivingWorldRuntimePointProviderHandler");
static_assert(offsetof(FFortAthenaLivingWorldRuntimePointProviderHandler, LivingWorldManager) == 0x000000, "Member 'FFortAthenaLivingWorldRuntimePointProviderHandler::LivingWorldManager' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldRuntimePointProviderHandler, RuntimePointProviderMap) == 0x000008, "Member 'FFortAthenaLivingWorldRuntimePointProviderHandler::RuntimePointProviderMap' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldCategoryTableDataList
// 0x0010 (0x0010 - 0x0000)
struct FFortAthenaLivingWorldCategoryTableDataList final
{
public:
	TArray<struct FFortAthenaLivingWorldCategoryTableData> CategoryTableDatas;                                // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldCategoryTableDataList) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldCategoryTableDataList");
static_assert(sizeof(FFortAthenaLivingWorldCategoryTableDataList) == 0x000010, "Wrong size on FFortAthenaLivingWorldCategoryTableDataList");
static_assert(offsetof(FFortAthenaLivingWorldCategoryTableDataList, CategoryTableDatas) == 0x000000, "Member 'FFortAthenaLivingWorldCategoryTableDataList::CategoryTableDatas' has a wrong offset!");

// ScriptStruct LagerRuntime.LivingWorldSpawnAroundPlayerConfiguration
// 0x0038 (0x0038 - 0x0000)
struct FLivingWorldSpawnAroundPlayerConfiguration final
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> Encounter;                                         // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AFortAthenaPointAroundPlayerProvider>> PointProviderClasses;                              // 0x0020(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bRegisterReservoir;                                // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLivingWorldSpawnAroundPlayerConfiguration) == 0x000008, "Wrong alignment on FLivingWorldSpawnAroundPlayerConfiguration");
static_assert(sizeof(FLivingWorldSpawnAroundPlayerConfiguration) == 0x000038, "Wrong size on FLivingWorldSpawnAroundPlayerConfiguration");
static_assert(offsetof(FLivingWorldSpawnAroundPlayerConfiguration, Encounter) == 0x000000, "Member 'FLivingWorldSpawnAroundPlayerConfiguration::Encounter' has a wrong offset!");
static_assert(offsetof(FLivingWorldSpawnAroundPlayerConfiguration, PointProviderClasses) == 0x000020, "Member 'FLivingWorldSpawnAroundPlayerConfiguration::PointProviderClasses' has a wrong offset!");
static_assert(offsetof(FLivingWorldSpawnAroundPlayerConfiguration, bRegisterReservoir) == 0x000030, "Member 'FLivingWorldSpawnAroundPlayerConfiguration::bRegisterReservoir' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldSpawnerDataLimiter
// 0x00B0 (0x00B0 - 0x0000)
struct FFortAthenaLivingWorldSpawnerDataLimiter final
{
public:
	TArray<TSubclassOf<class UFortAthenaSpawnerDataBase>> SpawnedSingleUseSpawnerData;                       // 0x0000(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      SingleUseSpawnerDataQuery;                         // 0x0010(0x0048)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UFortAthenaSpawnerDataBase>> SpawnedConcurrentSingleUseSpawnerData;             // 0x0058(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      ConcurrentSingleUseSpawnerDataQuery;               // 0x0068(0x0048)(Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAthenaLivingWorldSpawnerDataLimiter) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldSpawnerDataLimiter");
static_assert(sizeof(FFortAthenaLivingWorldSpawnerDataLimiter) == 0x0000B0, "Wrong size on FFortAthenaLivingWorldSpawnerDataLimiter");
static_assert(offsetof(FFortAthenaLivingWorldSpawnerDataLimiter, SpawnedSingleUseSpawnerData) == 0x000000, "Member 'FFortAthenaLivingWorldSpawnerDataLimiter::SpawnedSingleUseSpawnerData' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldSpawnerDataLimiter, SingleUseSpawnerDataQuery) == 0x000010, "Member 'FFortAthenaLivingWorldSpawnerDataLimiter::SingleUseSpawnerDataQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldSpawnerDataLimiter, SpawnedConcurrentSingleUseSpawnerData) == 0x000058, "Member 'FFortAthenaLivingWorldSpawnerDataLimiter::SpawnedConcurrentSingleUseSpawnerData' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldSpawnerDataLimiter, ConcurrentSingleUseSpawnerDataQuery) == 0x000068, "Member 'FFortAthenaLivingWorldSpawnerDataLimiter::ConcurrentSingleUseSpawnerDataQuery' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldPointProviderSelector
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFortAthenaLivingWorldPointProviderSelector
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldPointProviderSelector) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldPointProviderSelector");
static_assert(sizeof(FFortAthenaLivingWorldPointProviderSelector) == 0x000008, "Wrong size on FFortAthenaLivingWorldPointProviderSelector");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldTagQueryToSeatMapping
// 0x0050 (0x0050 - 0x0000)
struct FFortAthenaLivingWorldTagQueryToSeatMapping final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         SeatIndex;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLivingWorldTagQueryToSeatMapping) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldTagQueryToSeatMapping");
static_assert(sizeof(FFortAthenaLivingWorldTagQueryToSeatMapping) == 0x000050, "Wrong size on FFortAthenaLivingWorldTagQueryToSeatMapping");
static_assert(offsetof(FFortAthenaLivingWorldTagQueryToSeatMapping, TagQuery) == 0x000000, "Member 'FFortAthenaLivingWorldTagQueryToSeatMapping::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldTagQueryToSeatMapping, SeatIndex) == 0x000048, "Member 'FFortAthenaLivingWorldTagQueryToSeatMapping::SeatIndex' has a wrong offset!");

}

