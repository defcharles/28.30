#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NeuralMorphModel

#include "Basic.hpp"

#include "MLDeformerFramework_classes.hpp"
#include "NeuralMorphModel_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class NeuralMorphModel.NeuralMorphInputInfo
// 0x0020 (0x0088 - 0x0068)
class UNeuralMorphInputInfo final : public UMLDeformerMorphModelInputInfo
{
public:
	TArray<struct FNeuralMorphBoneGroup>          BoneGroups;                                        // 0x0068(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FNeuralMorphCurveGroup>         CurveGroups;                                       // 0x0078(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeuralMorphInputInfo">();
	}
	static class UNeuralMorphInputInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeuralMorphInputInfo>();
	}
};
static_assert(alignof(UNeuralMorphInputInfo) == 0x000008, "Wrong alignment on UNeuralMorphInputInfo");
static_assert(sizeof(UNeuralMorphInputInfo) == 0x000088, "Wrong size on UNeuralMorphInputInfo");
static_assert(offsetof(UNeuralMorphInputInfo, BoneGroups) == 0x000068, "Member 'UNeuralMorphInputInfo::BoneGroups' has a wrong offset!");
static_assert(offsetof(UNeuralMorphInputInfo, CurveGroups) == 0x000078, "Member 'UNeuralMorphInputInfo::CurveGroups' has a wrong offset!");

// Class NeuralMorphModel.NeuralMorphModelInstance
// 0x0028 (0x00D0 - 0x00A8)
class UNeuralMorphModelInstance final : public UMLDeformerMorphModelInstance
{
public:
	class UNeuralMorphNetworkInstance*            NetworkInstance;                                   // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x20];                                      // 0x00B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeuralMorphModelInstance">();
	}
	static class UNeuralMorphModelInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeuralMorphModelInstance>();
	}
};
static_assert(alignof(UNeuralMorphModelInstance) == 0x000008, "Wrong alignment on UNeuralMorphModelInstance");
static_assert(sizeof(UNeuralMorphModelInstance) == 0x0000D0, "Wrong size on UNeuralMorphModelInstance");
static_assert(offsetof(UNeuralMorphModelInstance, NetworkInstance) == 0x0000A8, "Member 'UNeuralMorphModelInstance::NetworkInstance' has a wrong offset!");

// Class NeuralMorphModel.NeuralMorphModelVizSettings
// 0x0008 (0x0040 - 0x0038)
class UNeuralMorphModelVizSettings final : public UMLDeformerMorphModelVizSettings
{
public:
	ENeuralMorphMaskVizMode                       MaskVizMode;                                       // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeuralMorphModelVizSettings">();
	}
	static class UNeuralMorphModelVizSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeuralMorphModelVizSettings>();
	}
};
static_assert(alignof(UNeuralMorphModelVizSettings) == 0x000008, "Wrong alignment on UNeuralMorphModelVizSettings");
static_assert(sizeof(UNeuralMorphModelVizSettings) == 0x000040, "Wrong size on UNeuralMorphModelVizSettings");
static_assert(offsetof(UNeuralMorphModelVizSettings, MaskVizMode) == 0x000038, "Member 'UNeuralMorphModelVizSettings::MaskVizMode' has a wrong offset!");

// Class NeuralMorphModel.NeuralMorphMLPLayer
// 0x0030 (0x0058 - 0x0028)
class UNeuralMorphMLPLayer final : public UObject
{
public:
	int32                                         NumInputs;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOutputs;                                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Depth;                                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Weights;                                           // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Biases;                                            // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeuralMorphMLPLayer">();
	}
	static class UNeuralMorphMLPLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeuralMorphMLPLayer>();
	}
};
static_assert(alignof(UNeuralMorphMLPLayer) == 0x000008, "Wrong alignment on UNeuralMorphMLPLayer");
static_assert(sizeof(UNeuralMorphMLPLayer) == 0x000058, "Wrong size on UNeuralMorphMLPLayer");
static_assert(offsetof(UNeuralMorphMLPLayer, NumInputs) == 0x000028, "Member 'UNeuralMorphMLPLayer::NumInputs' has a wrong offset!");
static_assert(offsetof(UNeuralMorphMLPLayer, NumOutputs) == 0x00002C, "Member 'UNeuralMorphMLPLayer::NumOutputs' has a wrong offset!");
static_assert(offsetof(UNeuralMorphMLPLayer, Depth) == 0x000030, "Member 'UNeuralMorphMLPLayer::Depth' has a wrong offset!");
static_assert(offsetof(UNeuralMorphMLPLayer, Weights) == 0x000038, "Member 'UNeuralMorphMLPLayer::Weights' has a wrong offset!");
static_assert(offsetof(UNeuralMorphMLPLayer, Biases) == 0x000048, "Member 'UNeuralMorphMLPLayer::Biases' has a wrong offset!");

// Class NeuralMorphModel.NeuralMorphMLP
// 0x0010 (0x0038 - 0x0028)
class UNeuralMorphMLP final : public UObject
{
public:
	TArray<class UNeuralMorphMLPLayer*>           Layers;                                            // 0x0028(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeuralMorphMLP">();
	}
	static class UNeuralMorphMLP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeuralMorphMLP>();
	}
};
static_assert(alignof(UNeuralMorphMLP) == 0x000008, "Wrong alignment on UNeuralMorphMLP");
static_assert(sizeof(UNeuralMorphMLP) == 0x000038, "Wrong size on UNeuralMorphMLP");
static_assert(offsetof(UNeuralMorphMLP, Layers) == 0x000028, "Member 'UNeuralMorphMLP::Layers' has a wrong offset!");

// Class NeuralMorphModel.NeuralMorphNetwork
// 0x0080 (0x00A8 - 0x0028)
class UNeuralMorphNetwork final : public UObject
{
public:
	class UNeuralMorphMLP*                        MainMLP;                                           // 0x0028(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNeuralMorphMLP*                        GroupMLP;                                          // 0x0030(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNNEModelData*                          MainModelData;                                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UNNEModelData*                          GroupModelData;                                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 InputMeans;                                        // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 InputStd;                                          // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	ENeuralMorphMode                              Mode;                                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumMorphs;                                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumMorphsPerBone;                                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumBones;                                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumCurves;                                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumFloatsPerCurve;                                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumGroups;                                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumItemsPerGroup;                                  // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeuralMorphNetwork">();
	}
	static class UNeuralMorphNetwork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeuralMorphNetwork>();
	}
};
static_assert(alignof(UNeuralMorphNetwork) == 0x000008, "Wrong alignment on UNeuralMorphNetwork");
static_assert(sizeof(UNeuralMorphNetwork) == 0x0000A8, "Wrong size on UNeuralMorphNetwork");
static_assert(offsetof(UNeuralMorphNetwork, MainMLP) == 0x000028, "Member 'UNeuralMorphNetwork::MainMLP' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, GroupMLP) == 0x000030, "Member 'UNeuralMorphNetwork::GroupMLP' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, MainModelData) == 0x000038, "Member 'UNeuralMorphNetwork::MainModelData' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, GroupModelData) == 0x000050, "Member 'UNeuralMorphNetwork::GroupModelData' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, InputMeans) == 0x000068, "Member 'UNeuralMorphNetwork::InputMeans' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, InputStd) == 0x000078, "Member 'UNeuralMorphNetwork::InputStd' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, Mode) == 0x000088, "Member 'UNeuralMorphNetwork::Mode' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, NumMorphs) == 0x00008C, "Member 'UNeuralMorphNetwork::NumMorphs' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, NumMorphsPerBone) == 0x000090, "Member 'UNeuralMorphNetwork::NumMorphsPerBone' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, NumBones) == 0x000094, "Member 'UNeuralMorphNetwork::NumBones' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, NumCurves) == 0x000098, "Member 'UNeuralMorphNetwork::NumCurves' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, NumFloatsPerCurve) == 0x00009C, "Member 'UNeuralMorphNetwork::NumFloatsPerCurve' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, NumGroups) == 0x0000A0, "Member 'UNeuralMorphNetwork::NumGroups' has a wrong offset!");
static_assert(offsetof(UNeuralMorphNetwork, NumItemsPerGroup) == 0x0000A4, "Member 'UNeuralMorphNetwork::NumItemsPerGroup' has a wrong offset!");

// Class NeuralMorphModel.NeuralMorphNetworkInstance
// 0x0058 (0x0080 - 0x0028)
class UNeuralMorphNetworkInstance final : public UObject
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UNeuralMorphNetwork*                    Network;                                           // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeuralMorphNetworkInstance">();
	}
	static class UNeuralMorphNetworkInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeuralMorphNetworkInstance>();
	}
};
static_assert(alignof(UNeuralMorphNetworkInstance) == 0x000008, "Wrong alignment on UNeuralMorphNetworkInstance");
static_assert(sizeof(UNeuralMorphNetworkInstance) == 0x000080, "Wrong size on UNeuralMorphNetworkInstance");
static_assert(offsetof(UNeuralMorphNetworkInstance, Network) == 0x000078, "Member 'UNeuralMorphNetworkInstance::Network' has a wrong offset!");

// Class NeuralMorphModel.NeuralMorphModel
// 0x0100 (0x0290 - 0x0190)
class UNeuralMorphModel final : public UMLDeformerMorphModel
{
public:
	TArray<struct FNeuralMorphBoneGroup>          BoneGroups;                                        // 0x0190(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNeuralMorphCurveGroup>         CurveGroups;                                       // 0x01A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FNeuralMorphMaskInfo> BoneMaskInfos;                                     // 0x01B0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FNeuralMorphMaskInfo> BoneGroupMaskInfos;                                // 0x0200(0x0050)(NativeAccessSpecifierPublic)
	ENeuralMorphMode                              Mode;                                              // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalNumMorphTargetsPerBone;                       // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalNumMorphTargets;                             // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalNumHiddenLayers;                              // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalNumNeuronsPerLayer;                           // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalNumHiddenLayers;                             // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalNumNeuronsPerLayer;                          // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BatchSize;                                         // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LearningRate;                                      // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegularizationFactor;                              // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBoneMasks;                                  // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothLossBeta;                                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNeuralMorphNetwork*                    NeuralMorphNetwork;                                // 0x0288(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeuralMorphModel">();
	}
	static class UNeuralMorphModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeuralMorphModel>();
	}
};
static_assert(alignof(UNeuralMorphModel) == 0x000008, "Wrong alignment on UNeuralMorphModel");
static_assert(sizeof(UNeuralMorphModel) == 0x000290, "Wrong size on UNeuralMorphModel");
static_assert(offsetof(UNeuralMorphModel, BoneGroups) == 0x000190, "Member 'UNeuralMorphModel::BoneGroups' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, CurveGroups) == 0x0001A0, "Member 'UNeuralMorphModel::CurveGroups' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, BoneMaskInfos) == 0x0001B0, "Member 'UNeuralMorphModel::BoneMaskInfos' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, BoneGroupMaskInfos) == 0x000200, "Member 'UNeuralMorphModel::BoneGroupMaskInfos' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, Mode) == 0x000250, "Member 'UNeuralMorphModel::Mode' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, LocalNumMorphTargetsPerBone) == 0x000254, "Member 'UNeuralMorphModel::LocalNumMorphTargetsPerBone' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, GlobalNumMorphTargets) == 0x000258, "Member 'UNeuralMorphModel::GlobalNumMorphTargets' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, NumIterations) == 0x00025C, "Member 'UNeuralMorphModel::NumIterations' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, LocalNumHiddenLayers) == 0x000260, "Member 'UNeuralMorphModel::LocalNumHiddenLayers' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, LocalNumNeuronsPerLayer) == 0x000264, "Member 'UNeuralMorphModel::LocalNumNeuronsPerLayer' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, GlobalNumHiddenLayers) == 0x000268, "Member 'UNeuralMorphModel::GlobalNumHiddenLayers' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, GlobalNumNeuronsPerLayer) == 0x00026C, "Member 'UNeuralMorphModel::GlobalNumNeuronsPerLayer' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, BatchSize) == 0x000270, "Member 'UNeuralMorphModel::BatchSize' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, LearningRate) == 0x000274, "Member 'UNeuralMorphModel::LearningRate' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, RegularizationFactor) == 0x000278, "Member 'UNeuralMorphModel::RegularizationFactor' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, bEnableBoneMasks) == 0x00027C, "Member 'UNeuralMorphModel::bEnableBoneMasks' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, SmoothLossBeta) == 0x000280, "Member 'UNeuralMorphModel::SmoothLossBeta' has a wrong offset!");
static_assert(offsetof(UNeuralMorphModel, NeuralMorphNetwork) == 0x000288, "Member 'UNeuralMorphModel::NeuralMorphNetwork' has a wrong offset!");

}

