#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NPC_Pawn_Parent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Enum_NPC_AlertLevel_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_NPC_TargetSlots_structs.hpp"
#include "FortniteAI_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Enum_NPC_TargetSlots_structs.hpp"
#include "Enum_NPC_ModifyAlertLevelReason_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NPC_Pawn_Parent.NPC_Pawn_Parent_C
// 0x08C0 (0x3F80 - 0x36C0)
class ANPC_Pawn_Parent_C : public AFortAIPawn
{
public:
	uint8                                         Pad_36B8[0x8];                                     // 0x36B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x36C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USoundLibraryComponent*                 SoundLibrary;                                      // 0x36C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortPawnComponent_CustomDepth*         FortPawnComponent_CustomDepth;                     // 0x36D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      WeaponCapsuleCollision;                            // 0x36D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortTaggedNavFiltersComponent*         FortTaggedNavFilters;                              // 0x36E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortActorComponent_Affiliation*        FortActorComponent_Affiliation;                    // 0x36E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundLibraryComponent*                 SoundLibrary_Component;                            // 0x36F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MovementAudioComponent;                            // 0x36F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNPC_VoiceComponent_C*                  NPC_VoiceComponent;                                // 0x3700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VOAudioComponent;                                  // 0x3708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortWidgetComponent*                   NPCStatusWidget;                                   // 0x3710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_ScaleMeshInOrOut_MeshScaleAlpha_9DAAC0B243D26E4160CEC3A458AE0E86; // 0x3718(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_ScaleMeshInOrOut__Direction_9DAAC0B243D26E4160CEC3A458AE0E86; // 0x371C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371D[0x3];                                     // 0x371D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_ScaleMeshInOrOut;                         // 0x3720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_NPC_RecentlyDamaged;                            // 0x3728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Enum_NPC_AlertLevel                           NPC_AlertLevel;                                    // 0x3730(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	Enum_NPC_AlertLevel                           NPC_AlertLevelPrevious;                            // 0x3731(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3732[0x6];                                     // 0x3732(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<Enum_NPC_AlertLevel, struct FGameplayTag> NPC_AlertLevelToTagMap;                            // 0x3738(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NPC_StatusWidgetHealthBarDisabled;                 // 0x3788(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3789[0x3];                                     // 0x3789(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayCue_PickupGrabbed;                         // 0x378C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	EFortRarity                                   NPC_BestLootRarityInInventory;                     // 0x3790(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_DebugPawn;                                     // 0x3791(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_ShowInventoryRarityVisuals;                    // 0x3792(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3793[0x5];                                     // 0x3793(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InventoryGlowDelay;                                // 0x3798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         NPC_NumberOfInventoryItemsToDeliverHF;             // 0x37A0(0x0028)(Edit, BlueprintVisible)
	bool                                          NPC_SpawnInvisible;                                // 0x37C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_ScaleMeshInOnSpawn;                            // 0x37C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37CA[0x6];                                     // 0x37CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_NPC_SpawnAbilityTag;                            // 0x37D0(0x0020)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  TC_NPC_AlternateSpawnAbilityTag;                   // 0x37F0(0x0020)(Edit, BlueprintVisible)
	bool                                          NPC_IsSpawning;                                    // 0x3810(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3811[0x7];                                     // 0x3811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NPC_OriginalGravityScale;                          // 0x3818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NPC_OriginalRotationRate;                          // 0x3820(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NPC_HasPawnGoal;                                   // 0x3838(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3839[0x7];                                     // 0x3839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 NPC_PawnGoalActor;                                 // 0x3840(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         NPC_NumberOfInventoryItemsToConsumeBeforeFullHF;   // 0x3848(0x0028)(Edit, BlueprintVisible)
	bool                                          NPC_PawnIsDestroyingBuildingForNavigation;         // 0x3870(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3871[0x7];                                     // 0x3871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxIdleVODelay;                                    // 0x3878(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MinIdleVODelay;                                    // 0x38A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         NPC_DeathDropLootDelay;                            // 0x38C8(0x0028)(Edit, BlueprintVisible)
	class FName                                   NPC_DeathDropLootTierGroupName;                    // 0x38F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38F4[0x4];                                     // 0x38F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  NPC_DeathDropLootRequiredDamageTags;               // 0x38F8(0x0020)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  NPC_DeathDropLootForbiddenDamageTags;              // 0x3918(0x0020)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  GrantStartingItemsAbilityTC;                       // 0x3938(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NPC_HasItemInInventory;                            // 0x3958(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3959[0x3];                                     // 0x3959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           VoiceTag_FullAlertIdle;                            // 0x395C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_Idle;                                     // 0x3960(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_ReturnToIdle;                             // 0x3964(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_LostTarget;                               // 0x3968(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_Suspicious;                               // 0x396C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_FullAlert;                                // 0x3970(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3974[0x4];                                     // 0x3974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_NPC_TargetSlots>        NPC_TargetSlotsHF;                                 // 0x3978(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NPC_DamageCanCancelIntroPhase;                     // 0x3988(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3989[0x7];                                     // 0x3989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TQ_NPC_DamageTagsThatCanCancelIntroPhase;          // 0x3990(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_NPC_IntroPhaseBehaviorCooldown;                 // 0x39D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_IntroBehaviorActive;                            // 0x39E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Debug_NPC_AlertLevelForced;                        // 0x3A00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_PawnCanInteractInternal;                       // 0x3A01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A02[0x6];                                     // 0x3A02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         NPC_PrimtiveDataFloatSetRandomlyInRange;           // 0x3A08(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PrimtiveDataFloatIndexHF;                      // 0x3A30(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PrimtiveDataFloatMinRangeHF;                   // 0x3A58(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PrimtiveDataFloatMaxRangeHF;                   // 0x3A80(0x0028)(Edit, BlueprintVisible)
	class AActor*                                 NPC_Leader;                                        // 0x3AA8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayCue_LeaderSet;                             // 0x3AB0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB4[0x4];                                     // 0x3AB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NPC_Skeletal_Mesh_Index;                           // 0x3AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             TamedSound;                                        // 0x3AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        StateChangeSound;                                  // 0x3AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         NPC_ShouldDespawnFromStormHF;                      // 0x3AD0(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_DespawnTimerHF;                                // 0x3AF8(0x0028)(Edit, BlueprintVisible)
	struct FGameplayTag                           NPC_DespawnGameplayTag;                            // 0x3B20(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B24[0x4];                                     // 0x3B24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           NPC_TestIsInSafeZoneTimer;                         // 0x3B28(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           NPC_DespawnFromStormTimer;                         // 0x3B30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_isTryingToDespawn;                             // 0x3B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B39[0x3];                                     // 0x3B39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NPC_ResetIntroGameplayTags;                        // 0x3B3C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	double                                        SelectedPrimitiveDataFloat;                        // 0x3B40(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayCue_Death;                                 // 0x3B48(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4C[0x4];                                     // 0x3B4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             OG_Materials;                                      // 0x3B50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NPC_Apply_GE_for_Swimming;                         // 0x3B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B61[0x7];                                     // 0x3B61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 NPC_GE_ClassToApplyForSwimming;                    // 0x3B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Exit_Burst_GC;                                     // 0x3B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B71[0x3];                                     // 0x3B71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            NPC_GE_AppliedForSwimming;                         // 0x3B74(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class FName                                   GoalActorBBKey;                                    // 0x3B7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayCueLureInterest;                           // 0x3B80(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B84[0x4];                                     // 0x3B84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                NPC_PreviousLureGoal;                              // 0x3B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Exit_Water;                                        // 0x3B90(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Enter_Water;                                       // 0x3B94(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         NPC_MaxDistanceFromDamagedNPCToDrawHeallthBarHF;   // 0x3B98(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_HealthBarHideTimeAfterDeathHF;                 // 0x3BC0(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PlayEffectWhenLuredHF;                         // 0x3BE8(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PawnCanInteractHF;                             // 0x3C10(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_AllowInteractOnlyWhenUnawareHF;                // 0x3C38(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_AllowInteractWhenHasLeaderHF;                  // 0x3C60(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_AllowDrownInShallowWaterHF;                    // 0x3C88(0x0028)(Edit, BlueprintVisible)
	bool                                          NPC_IsInventoryInitialized;                        // 0x3CB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CB1[0x3];                                     // 0x3CB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeaderClearedCueDelay;                             // 0x3CB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayCue_LeaderCleared;                         // 0x3CB8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          isGCForLeaderSetLooping;                           // 0x3CBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CBD[0x3];                                     // 0x3CBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NPC_DeathByStormTag;                               // 0x3CC0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_TryDespawnAbility;                             // 0x3CC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC5[0x3];                                     // 0x3CC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            GeOutsideSafeZoneDamageHandle;                     // 0x3CC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGEStormDamageInit;                               // 0x3CD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_MeshScalingInProgress;                         // 0x3CD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_DisableCapsuleOverlapsWhenScalingOut;          // 0x3CD2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CD3[0x5];                                     // 0x3CD3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NPC_OriginalMeshScale;                             // 0x3CD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              NPCScaleMeshInCompleted;                           // 0x3CF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              NPCScaleMeshOutCompleted;                          // 0x3D00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          NPC_CanDropLoot;                                   // 0x3D10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D11[0x7];                                     // 0x3D11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         NPC_StaleDespawnTestDistance_HF;                   // 0x3D18(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         NPC_StaleDespawnTimeThreshold_HF;                  // 0x3D40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        NPC_LastNonStaleCheckTime;                         // 0x3D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanBeDamagedByNullInstigator;                     // 0x3D70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnteringWater;                                   // 0x3D71(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D72[0x6];                                     // 0x3D72(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* AIPawn, class AFortPlayerPawn* InteractingPlayerPawn)> NPCPawnInteractWithDispatcher;                     // 0x3D78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          NPCDynamicBlockConversionOnInteract;               // 0x3D88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_TempInteractOverride;                          // 0x3D89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D8A[0x6];                                     // 0x3D8A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             HeadShot_Sound;                                    // 0x3D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Headshot_FX_Socket;                                // 0x3D98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHeadShotFX;                                     // 0x3D9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9D[0x3];                                     // 0x3D9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_WeaponTypesAllowedForHeadshotFX;                // 0x3DA0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AllowHeadshot;                                     // 0x3DC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC1[0x7];                                     // 0x3DC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AdditiveHitReactRetriggerDelay;                    // 0x3DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Additive_Hit_React_Montage;                        // 0x3DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Death_Normal_Sound;                                // 0x3DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        HeadshotFXEmitterTemplate;                         // 0x3DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Sound_Library_Collection_Tags;                     // 0x3DE8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Sound_Library_Default_Tags;                        // 0x3E08(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Sound_Library_Alert_Tags;                          // 0x3E28(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Sound_Library_Aggressive_Tags;                     // 0x3E48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundLibrary*>                  SoundLibs_Default;                                 // 0x3E68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundLibrary*>                  SoundLibs_Alert;                                   // 0x3E78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundLibrary*                          CurrentSoundLib;                                   // 0x3E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundLibrary*>                  SoundLibs_Aggressive;                              // 0x3E90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundLibrary*>                  SoundLibs_Foley;                                   // 0x3EA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundLibrary*>                  SoundLibs_Foley_Water;                             // 0x3EB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundLibrary*                          CurrentFoleyLib;                                   // 0x3EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Depth_Update_Rate;                          // 0x3EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Class_0;                                           // 0x3ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            GE_Converted;                                      // 0x3ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GE_Converted_Handle;                               // 0x3EE0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        NPC_Death_Time;                                    // 0x3EE8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleMeshInOrOutPlayRate;                          // 0x3EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowSkipScaleOutIfNotRecentlyRendered;            // 0x3EF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EF5[0x3];                                     // 0x3EF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(Enum_NPC_AlertLevel NPC_Alert_Level)> NPCAlertLevelUpdated;                              // 0x3EF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTagContainer                  GameplayTagsToBlockHitReact;                       // 0x3F08(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GCInstantDeathTag;                                 // 0x3F28(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F2C[0x4];                                     // 0x3F2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AFortPickup* FortPickupGrabbed)> NPCPickupGrabInitiated;                            // 0x3F30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UContextualAnimSceneAsset*              CAS_Interaction_Petting;                           // 0x3F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UContextualAnimSceneAsset*              CAS_Interaction_Feeding;                           // 0x3F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UContextualAnimSceneAsset*              CAS_Interaction_Taming;                            // 0x3F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Athena_GameState_SoftClass;                        // 0x3F58(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class UFortPawnComponent_AICustomEffects*     PawnCustomVFXComponent;                            // 0x3F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void AdditiveHitReactDelay();
	void AddSoundSystemLibraries();
	void BeginMusicTracker();
	bool CanUpdateSoundLib(const TArray<class USoundLibrary*>& TargetArray);
	void Check_Tag(const struct FGameplayTagContainer& Tag_Container, bool* ShouldDefault);
	void CheckSoundLibraryAdded(TArray<class USoundLibrary*>& Libraries);
	void CheckSoundLibraryRemoved(TArray<class USoundLibrary*>& Libraries);
	void Debug_AlertLevel_ClearDebug();
	void Debug_AlertLevel_ForceLevel(Enum_NPC_AlertLevel NewNPC_AlertLevel);
	void Debug_ForceAlertLevel_Aggressive();
	void Debug_ForceAlertLevel_Alerted();
	void Debug_ForceAlertLevel_Invalid();
	void Debug_ForceAlertLevel_NA();
	void Debug_ForceAlertLevel_Unaware();
	void DespawnDueToStorm();
	void End_Music_Tracker();
	void ExecuteUbergraph_NPC_Pawn_Parent(int32 EntryPoint);
	void GetSoundFoleyLibrary();
	void GrantStartingItems();
	void HandleInteracts();
	void InitializeInventory();
	void InitializeTestInSafeZone();
	void IsConverted(bool* IsConverted_0);
	void LuredInterest();
	void LuredOnServer(Enum_NPC_AlertLevel AlertLevel);
	void NPC_AlertLevelChangedServer(Enum_NPC_AlertLevel NPCAlertLevel);
	void NPC_AlertLevelUpdatedClient();
	void NPC_ApplyGameplayEffectWithMMRScaling(class AActor* Actor, class UClass* GE_Class);
	void NPC_ApplyRecentlyDamagedTagGE(class UClass* RecentlyDamagedOverride);
	void NPC_AttemptToSetLeader(class AActor* PossibleLeader, EUnconvertReason UnconvertReason);
	void NPC_CanBeInteractedWith(bool* CanInteract);
	void NPC_CheckForDespawnIfStaleToPlayers(class AFortPlayerPawn* ClosestFortPlayerPawn);
	void NPC_CheckIsInSafeZone(bool* TestSucceeded, bool* isInSafeZone);
	void NPC_ClearOutTargetSlots();
	void NPC_DamageAttemptDisableIntroPhaseBehavior(const struct FGameplayTagContainer& DamageTags);
	void NPC_DamageRemovesIdlePhaseTagGE();
	void NPC_DisableIntroPhaseBehavior();
	void NPC_GetAlertLevelInfo(Enum_NPC_AlertLevel* AlertLevel, struct FGameplayTag* AlertLevelTag, bool* ValidDataFound);
	void NPC_GetInventoryInformation(bool* HasItemInInventory, int32* TotalNumberOfInventoryItems, int32* LastInventoryItemIndex, bool* HasEnoughItemsToDeliver, bool* ConsumedEnoughItemsToBeConsideredFull);
	void NPC_GetPreviousAlertLevelInfo(Enum_NPC_AlertLevel* AlertLevel, struct FGameplayTag* AlertLevelTag, bool* ValidDataFound);
	void NPC_GetSafeZonePhase(int32* SafeZonePhase);
	void NPC_GetScalableFloatHotfixValue(const struct FScalableFloat& ScalableFloatHotfix, double AtLevel, bool* AsBool, int32* AsIntRounded, double* AsFloat);
	void NPC_GhostCollisionSettings(bool NoCollisionForRanged, bool NoCollisionForMelee, bool NoCollisionForProjectiles, bool OnlyOverlapCollisionForPawns);
	void NPC_HandleAlertLevelVoice();
	void NPC_HasLeader_(bool* HasLeader_, class AActor** Leader);
	void NPC_InitializeIdleVO();
	void NPC_LeaderSet(bool Success_, class AActor* Leader, EUnconvertReason UnconvertReason);
	void NPC_MulticastGameplayCueDeath();
	void NPC_ParentLaunchVehicle(class AActor* Vehicle, const struct FVector& Velocity);
	void NPC_Pawn_Interact(class AFortAIPawn* AI, class AFortPlayerController* InteractingPlayerController, EInteractionBeingAttempted InteractionBeingAttempted);
	void NPC_PawnDebugMessage(const class FString& String, bool OnlyWhenDebug);
	void NPC_PickupDropped(class AFortPickup* FortPickupDropped);
	void NPC_PickupGrabbed(class AFortPickup* FortPickupGrabbed);
	void NPC_PickupGrabbed_Destroyed(class AActor* ActorGrabbed);
	void NPC_ResetOriginalGravityScale();
	void NPC_ResetOriginalRotationRate();
	void NPC_ScalableFloatIsValid(const struct FScalableFloat& ScalableFloat, bool* Valid);
	void NPC_SendGameplayCuePickupGrabbed();
	void NPC_SetBestLootRarityInInventory(EFortRarity* NPC_BestLootRarityInInventory_0);
	void NPC_SetCanDropLoot(bool CanDropLoot);
	void NPC_SetLeader(class AActor* Leader, bool* Success_, class AActor** LeaderSet);
	void NPC_SetLootCollectionPhaseCompleteToBlackboard(bool LootCollectionPhaseComplete);
	void NPC_SetReturnGatheredLootToBlackboard();
	void NPC_TargetSlotInfo(Enum_NPC_TargetSlots TargetSlotType, class AActor* TargetWeWantToSlotOnto, int32* TargetSlotCount, int32* TargetSlotMax, int32* NPC_TargetSlotsRequired, bool* TargetSlotsMaxOrMore, bool* TargetSlotCountIsExactlyMax, bool* NPC_IsTargetSlotOwner, bool* NPC_HasSpaceToSlotOnTarget, Enum_NPC_TargetSlots* TargetSlotTypeOut, class UClass** TargetSlotCountingGE, struct FScalableFloat* AI_TargetSlotSizeHF, struct FScalableFloat* AI_TargetSlotDurationHF, class UClass** TargetSlotOverrideGE, class UClass** TargetSlotOwnerGE, class UClass** TargetSlotCountingMaxedGE);
	void NPC_TargetSlotIsUsingOverride(Enum_NPC_TargetSlots TargetSlotType, class AActor* TargetWeWantToSlotOnto, bool* Override);
	void NPC_TryToDropLootOnDeath(const struct FGameplayTagContainer& DamageTags, bool* CanDropLoot);
	void NPC_UpdateHealthBarComponentVisibility();
	void NPC_UpdateInteract(bool CanInteract, bool* EnabledInteract);
	void NPCAlertLevelChangedClient(Enum_NPC_AlertLevel NPC_AlertLevel_0);
	void NPCDisableHealthBars();
	void NPCEnableHealthBars();
	void NPCScaleMeshIn();
	void NPCScaleMeshOut();
	void On_NPC_PawnInteractedWith(class AActor* AIPawn, class AFortPlayerPawn* InteractingPlayerPawn);
	void OnBeginDance();
	void OnBeginDeepWaterInteraction(const struct FVector& WaterSurfaceLocation, float WaterDepth);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnEndDance();
	void OnEnteredWaterBody(class AFortWaterBodyActor* WaterBody, bool bIsFirstBody);
	void OnExitedWaterBody(class AFortWaterBodyActor* WaterBody, bool bIsLastBody);
	void OnPawnHealthChanged_Event_0();
	void OnRep_NPC_BestLootRarityInInventory();
	void OnRep_NPC_Death_Time();
	void OnRep_NPC_Leader();
	void OnRep_NPC_AlertLevel();
	void OnRep_SelectedPrimitiveDataFloat();
	void Orphaned(bool* IsOrphaned, class AFortPawn** AttachedPawn);
	void Play_Water_Splash_at_Water_Surface(class AFortWaterBodyActor* Water_Body, bool Enter_Water_0);
	void PlayAdditiveHitReacts(const struct FVector& Hit_Direction, class UAnimMontage* Anim_Montage);
	void PlayEnterWaterSplash(class AFortWaterBodyActor* Water_Body);
	void PlayExitWaterSplash(class AFortWaterBodyActor* Water_Body);
	void PlayStateChangeAudio(Enum_NPC_AlertLevel Index_0);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossessed(class AController* NewController);
	void RemoveLibraryCollection();
	void RemoveSoundSystemLibraries();
	void RequestUpdateNPCAlertLevel(Enum_NPC_AlertLevel NPC_AlertLevel_0, Enum_NPC_ModifyAlertLevelReason Reason);
	void ResetMaterialFromDeath();
	void SelectPrimitiveDataFloat();
	void SetPrimitiveDataFloat();
	bool ShouldUpdateSkeletalMesh();
	void StartUpdatingHleathBarWidget();
	void StopTestingIsInSafeZone();
	void StopUpdatingHealthBarWidget();
	void StoreOriginalGravityAndRotation();
	void TestIsInSafeZone();
	void TestLoot();
	void Timeline_ScaleMeshInOrOut__FinishedFunc();
	void Timeline_ScaleMeshInOrOut__UpdateFunc();
	void TriggerDeathFX();
	void TriggerDespawnAbility();
	void TriggerIdleVO();
	void TryShowHealthBar();
	void TryToDespawnDueToStorm(bool Reset_Timer);
	void TryWaterInteractionDrown(bool CalledFromDeepWaterInteraction);
	void UpdateCustomDepth();
	void UpdateSoundLibFoley();
	void UpdateSoundLibrary(Enum_NPC_AlertLevel Alert_Level);
	void UpdateSoundLibraryCollection(bool AddLibraries, bool* ValidLibraries);
	void UpdateTrackedActorStateFromCurrentAlertLevel();
	void UserConstructionScript();
	void WidgetVisibilityChanged(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NPC_Pawn_Parent_C">();
	}
	static class ANPC_Pawn_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANPC_Pawn_Parent_C>();
	}
};
static_assert(alignof(ANPC_Pawn_Parent_C) == 0x000010, "Wrong alignment on ANPC_Pawn_Parent_C");
static_assert(sizeof(ANPC_Pawn_Parent_C) == 0x003F80, "Wrong size on ANPC_Pawn_Parent_C");
static_assert(offsetof(ANPC_Pawn_Parent_C, UberGraphFrame) == 0x0036C0, "Member 'ANPC_Pawn_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibrary) == 0x0036C8, "Member 'ANPC_Pawn_Parent_C::SoundLibrary' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, FortPawnComponent_CustomDepth) == 0x0036D0, "Member 'ANPC_Pawn_Parent_C::FortPawnComponent_CustomDepth' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, WeaponCapsuleCollision) == 0x0036D8, "Member 'ANPC_Pawn_Parent_C::WeaponCapsuleCollision' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, FortTaggedNavFilters) == 0x0036E0, "Member 'ANPC_Pawn_Parent_C::FortTaggedNavFilters' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, FortActorComponent_Affiliation) == 0x0036E8, "Member 'ANPC_Pawn_Parent_C::FortActorComponent_Affiliation' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibrary_Component) == 0x0036F0, "Member 'ANPC_Pawn_Parent_C::SoundLibrary_Component' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, MovementAudioComponent) == 0x0036F8, "Member 'ANPC_Pawn_Parent_C::MovementAudioComponent' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_VoiceComponent) == 0x003700, "Member 'ANPC_Pawn_Parent_C::NPC_VoiceComponent' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VOAudioComponent) == 0x003708, "Member 'ANPC_Pawn_Parent_C::VOAudioComponent' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCStatusWidget) == 0x003710, "Member 'ANPC_Pawn_Parent_C::NPCStatusWidget' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Timeline_ScaleMeshInOrOut_MeshScaleAlpha_9DAAC0B243D26E4160CEC3A458AE0E86) == 0x003718, "Member 'ANPC_Pawn_Parent_C::Timeline_ScaleMeshInOrOut_MeshScaleAlpha_9DAAC0B243D26E4160CEC3A458AE0E86' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Timeline_ScaleMeshInOrOut__Direction_9DAAC0B243D26E4160CEC3A458AE0E86) == 0x00371C, "Member 'ANPC_Pawn_Parent_C::Timeline_ScaleMeshInOrOut__Direction_9DAAC0B243D26E4160CEC3A458AE0E86' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Timeline_ScaleMeshInOrOut) == 0x003720, "Member 'ANPC_Pawn_Parent_C::Timeline_ScaleMeshInOrOut' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GE_NPC_RecentlyDamaged) == 0x003728, "Member 'ANPC_Pawn_Parent_C::GE_NPC_RecentlyDamaged' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AlertLevel) == 0x003730, "Member 'ANPC_Pawn_Parent_C::NPC_AlertLevel' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AlertLevelPrevious) == 0x003731, "Member 'ANPC_Pawn_Parent_C::NPC_AlertLevelPrevious' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AlertLevelToTagMap) == 0x003738, "Member 'ANPC_Pawn_Parent_C::NPC_AlertLevelToTagMap' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_StatusWidgetHealthBarDisabled) == 0x003788, "Member 'ANPC_Pawn_Parent_C::NPC_StatusWidgetHealthBarDisabled' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayCue_PickupGrabbed) == 0x00378C, "Member 'ANPC_Pawn_Parent_C::GameplayCue_PickupGrabbed' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_BestLootRarityInInventory) == 0x003790, "Member 'ANPC_Pawn_Parent_C::NPC_BestLootRarityInInventory' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DebugPawn) == 0x003791, "Member 'ANPC_Pawn_Parent_C::NPC_DebugPawn' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_ShowInventoryRarityVisuals) == 0x003792, "Member 'ANPC_Pawn_Parent_C::NPC_ShowInventoryRarityVisuals' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, InventoryGlowDelay) == 0x003798, "Member 'ANPC_Pawn_Parent_C::InventoryGlowDelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_NumberOfInventoryItemsToDeliverHF) == 0x0037A0, "Member 'ANPC_Pawn_Parent_C::NPC_NumberOfInventoryItemsToDeliverHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_SpawnInvisible) == 0x0037C8, "Member 'ANPC_Pawn_Parent_C::NPC_SpawnInvisible' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_ScaleMeshInOnSpawn) == 0x0037C9, "Member 'ANPC_Pawn_Parent_C::NPC_ScaleMeshInOnSpawn' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TC_NPC_SpawnAbilityTag) == 0x0037D0, "Member 'ANPC_Pawn_Parent_C::TC_NPC_SpawnAbilityTag' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TC_NPC_AlternateSpawnAbilityTag) == 0x0037F0, "Member 'ANPC_Pawn_Parent_C::TC_NPC_AlternateSpawnAbilityTag' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_IsSpawning) == 0x003810, "Member 'ANPC_Pawn_Parent_C::NPC_IsSpawning' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_OriginalGravityScale) == 0x003818, "Member 'ANPC_Pawn_Parent_C::NPC_OriginalGravityScale' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_OriginalRotationRate) == 0x003820, "Member 'ANPC_Pawn_Parent_C::NPC_OriginalRotationRate' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_HasPawnGoal) == 0x003838, "Member 'ANPC_Pawn_Parent_C::NPC_HasPawnGoal' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PawnGoalActor) == 0x003840, "Member 'ANPC_Pawn_Parent_C::NPC_PawnGoalActor' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_NumberOfInventoryItemsToConsumeBeforeFullHF) == 0x003848, "Member 'ANPC_Pawn_Parent_C::NPC_NumberOfInventoryItemsToConsumeBeforeFullHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PawnIsDestroyingBuildingForNavigation) == 0x003870, "Member 'ANPC_Pawn_Parent_C::NPC_PawnIsDestroyingBuildingForNavigation' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, MaxIdleVODelay) == 0x003878, "Member 'ANPC_Pawn_Parent_C::MaxIdleVODelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, MinIdleVODelay) == 0x0038A0, "Member 'ANPC_Pawn_Parent_C::MinIdleVODelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathDropLootDelay) == 0x0038C8, "Member 'ANPC_Pawn_Parent_C::NPC_DeathDropLootDelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathDropLootTierGroupName) == 0x0038F0, "Member 'ANPC_Pawn_Parent_C::NPC_DeathDropLootTierGroupName' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathDropLootRequiredDamageTags) == 0x0038F8, "Member 'ANPC_Pawn_Parent_C::NPC_DeathDropLootRequiredDamageTags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathDropLootForbiddenDamageTags) == 0x003918, "Member 'ANPC_Pawn_Parent_C::NPC_DeathDropLootForbiddenDamageTags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GrantStartingItemsAbilityTC) == 0x003938, "Member 'ANPC_Pawn_Parent_C::GrantStartingItemsAbilityTC' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_HasItemInInventory) == 0x003958, "Member 'ANPC_Pawn_Parent_C::NPC_HasItemInInventory' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_FullAlertIdle) == 0x00395C, "Member 'ANPC_Pawn_Parent_C::VoiceTag_FullAlertIdle' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_Idle) == 0x003960, "Member 'ANPC_Pawn_Parent_C::VoiceTag_Idle' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_ReturnToIdle) == 0x003964, "Member 'ANPC_Pawn_Parent_C::VoiceTag_ReturnToIdle' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_LostTarget) == 0x003968, "Member 'ANPC_Pawn_Parent_C::VoiceTag_LostTarget' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_Suspicious) == 0x00396C, "Member 'ANPC_Pawn_Parent_C::VoiceTag_Suspicious' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_FullAlert) == 0x003970, "Member 'ANPC_Pawn_Parent_C::VoiceTag_FullAlert' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_TargetSlotsHF) == 0x003978, "Member 'ANPC_Pawn_Parent_C::NPC_TargetSlotsHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DamageCanCancelIntroPhase) == 0x003988, "Member 'ANPC_Pawn_Parent_C::NPC_DamageCanCancelIntroPhase' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TQ_NPC_DamageTagsThatCanCancelIntroPhase) == 0x003990, "Member 'ANPC_Pawn_Parent_C::TQ_NPC_DamageTagsThatCanCancelIntroPhase' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GE_NPC_IntroPhaseBehaviorCooldown) == 0x0039D8, "Member 'ANPC_Pawn_Parent_C::GE_NPC_IntroPhaseBehaviorCooldown' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TC_IntroBehaviorActive) == 0x0039E0, "Member 'ANPC_Pawn_Parent_C::TC_IntroBehaviorActive' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Debug_NPC_AlertLevelForced) == 0x003A00, "Member 'ANPC_Pawn_Parent_C::Debug_NPC_AlertLevelForced' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PawnCanInteractInternal) == 0x003A01, "Member 'ANPC_Pawn_Parent_C::NPC_PawnCanInteractInternal' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PrimtiveDataFloatSetRandomlyInRange) == 0x003A08, "Member 'ANPC_Pawn_Parent_C::NPC_PrimtiveDataFloatSetRandomlyInRange' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PrimtiveDataFloatIndexHF) == 0x003A30, "Member 'ANPC_Pawn_Parent_C::NPC_PrimtiveDataFloatIndexHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PrimtiveDataFloatMinRangeHF) == 0x003A58, "Member 'ANPC_Pawn_Parent_C::NPC_PrimtiveDataFloatMinRangeHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PrimtiveDataFloatMaxRangeHF) == 0x003A80, "Member 'ANPC_Pawn_Parent_C::NPC_PrimtiveDataFloatMaxRangeHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_Leader) == 0x003AA8, "Member 'ANPC_Pawn_Parent_C::NPC_Leader' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayCue_LeaderSet) == 0x003AB0, "Member 'ANPC_Pawn_Parent_C::GameplayCue_LeaderSet' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_Skeletal_Mesh_Index) == 0x003AB8, "Member 'ANPC_Pawn_Parent_C::NPC_Skeletal_Mesh_Index' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TamedSound) == 0x003AC0, "Member 'ANPC_Pawn_Parent_C::TamedSound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, StateChangeSound) == 0x003AC8, "Member 'ANPC_Pawn_Parent_C::StateChangeSound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_ShouldDespawnFromStormHF) == 0x003AD0, "Member 'ANPC_Pawn_Parent_C::NPC_ShouldDespawnFromStormHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DespawnTimerHF) == 0x003AF8, "Member 'ANPC_Pawn_Parent_C::NPC_DespawnTimerHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DespawnGameplayTag) == 0x003B20, "Member 'ANPC_Pawn_Parent_C::NPC_DespawnGameplayTag' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_TestIsInSafeZoneTimer) == 0x003B28, "Member 'ANPC_Pawn_Parent_C::NPC_TestIsInSafeZoneTimer' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DespawnFromStormTimer) == 0x003B30, "Member 'ANPC_Pawn_Parent_C::NPC_DespawnFromStormTimer' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_isTryingToDespawn) == 0x003B38, "Member 'ANPC_Pawn_Parent_C::NPC_isTryingToDespawn' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_ResetIntroGameplayTags) == 0x003B3C, "Member 'ANPC_Pawn_Parent_C::NPC_ResetIntroGameplayTags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SelectedPrimitiveDataFloat) == 0x003B40, "Member 'ANPC_Pawn_Parent_C::SelectedPrimitiveDataFloat' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayCue_Death) == 0x003B48, "Member 'ANPC_Pawn_Parent_C::GameplayCue_Death' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, OG_Materials) == 0x003B50, "Member 'ANPC_Pawn_Parent_C::OG_Materials' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_Apply_GE_for_Swimming) == 0x003B60, "Member 'ANPC_Pawn_Parent_C::NPC_Apply_GE_for_Swimming' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_GE_ClassToApplyForSwimming) == 0x003B68, "Member 'ANPC_Pawn_Parent_C::NPC_GE_ClassToApplyForSwimming' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Exit_Burst_GC) == 0x003B70, "Member 'ANPC_Pawn_Parent_C::Exit_Burst_GC' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_GE_AppliedForSwimming) == 0x003B74, "Member 'ANPC_Pawn_Parent_C::NPC_GE_AppliedForSwimming' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GoalActorBBKey) == 0x003B7C, "Member 'ANPC_Pawn_Parent_C::GoalActorBBKey' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayCueLureInterest) == 0x003B80, "Member 'ANPC_Pawn_Parent_C::GameplayCueLureInterest' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PreviousLureGoal) == 0x003B88, "Member 'ANPC_Pawn_Parent_C::NPC_PreviousLureGoal' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Exit_Water) == 0x003B90, "Member 'ANPC_Pawn_Parent_C::Exit_Water' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Enter_Water) == 0x003B94, "Member 'ANPC_Pawn_Parent_C::Enter_Water' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_MaxDistanceFromDamagedNPCToDrawHeallthBarHF) == 0x003B98, "Member 'ANPC_Pawn_Parent_C::NPC_MaxDistanceFromDamagedNPCToDrawHeallthBarHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_HealthBarHideTimeAfterDeathHF) == 0x003BC0, "Member 'ANPC_Pawn_Parent_C::NPC_HealthBarHideTimeAfterDeathHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PlayEffectWhenLuredHF) == 0x003BE8, "Member 'ANPC_Pawn_Parent_C::NPC_PlayEffectWhenLuredHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PawnCanInteractHF) == 0x003C10, "Member 'ANPC_Pawn_Parent_C::NPC_PawnCanInteractHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AllowInteractOnlyWhenUnawareHF) == 0x003C38, "Member 'ANPC_Pawn_Parent_C::NPC_AllowInteractOnlyWhenUnawareHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AllowInteractWhenHasLeaderHF) == 0x003C60, "Member 'ANPC_Pawn_Parent_C::NPC_AllowInteractWhenHasLeaderHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AllowDrownInShallowWaterHF) == 0x003C88, "Member 'ANPC_Pawn_Parent_C::NPC_AllowDrownInShallowWaterHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_IsInventoryInitialized) == 0x003CB0, "Member 'ANPC_Pawn_Parent_C::NPC_IsInventoryInitialized' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, LeaderClearedCueDelay) == 0x003CB4, "Member 'ANPC_Pawn_Parent_C::LeaderClearedCueDelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayCue_LeaderCleared) == 0x003CB8, "Member 'ANPC_Pawn_Parent_C::GameplayCue_LeaderCleared' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, isGCForLeaderSetLooping) == 0x003CBC, "Member 'ANPC_Pawn_Parent_C::isGCForLeaderSetLooping' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathByStormTag) == 0x003CC0, "Member 'ANPC_Pawn_Parent_C::NPC_DeathByStormTag' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_TryDespawnAbility) == 0x003CC4, "Member 'ANPC_Pawn_Parent_C::NPC_TryDespawnAbility' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GeOutsideSafeZoneDamageHandle) == 0x003CC8, "Member 'ANPC_Pawn_Parent_C::GeOutsideSafeZoneDamageHandle' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, IsGEStormDamageInit) == 0x003CD0, "Member 'ANPC_Pawn_Parent_C::IsGEStormDamageInit' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_MeshScalingInProgress) == 0x003CD1, "Member 'ANPC_Pawn_Parent_C::NPC_MeshScalingInProgress' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DisableCapsuleOverlapsWhenScalingOut) == 0x003CD2, "Member 'ANPC_Pawn_Parent_C::NPC_DisableCapsuleOverlapsWhenScalingOut' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_OriginalMeshScale) == 0x003CD8, "Member 'ANPC_Pawn_Parent_C::NPC_OriginalMeshScale' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCScaleMeshInCompleted) == 0x003CF0, "Member 'ANPC_Pawn_Parent_C::NPCScaleMeshInCompleted' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCScaleMeshOutCompleted) == 0x003D00, "Member 'ANPC_Pawn_Parent_C::NPCScaleMeshOutCompleted' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_CanDropLoot) == 0x003D10, "Member 'ANPC_Pawn_Parent_C::NPC_CanDropLoot' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_StaleDespawnTestDistance_HF) == 0x003D18, "Member 'ANPC_Pawn_Parent_C::NPC_StaleDespawnTestDistance_HF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_StaleDespawnTimeThreshold_HF) == 0x003D40, "Member 'ANPC_Pawn_Parent_C::NPC_StaleDespawnTimeThreshold_HF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_LastNonStaleCheckTime) == 0x003D68, "Member 'ANPC_Pawn_Parent_C::NPC_LastNonStaleCheckTime' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, bCanBeDamagedByNullInstigator) == 0x003D70, "Member 'ANPC_Pawn_Parent_C::bCanBeDamagedByNullInstigator' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, IsEnteringWater) == 0x003D71, "Member 'ANPC_Pawn_Parent_C::IsEnteringWater' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCPawnInteractWithDispatcher) == 0x003D78, "Member 'ANPC_Pawn_Parent_C::NPCPawnInteractWithDispatcher' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCDynamicBlockConversionOnInteract) == 0x003D88, "Member 'ANPC_Pawn_Parent_C::NPCDynamicBlockConversionOnInteract' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_TempInteractOverride) == 0x003D89, "Member 'ANPC_Pawn_Parent_C::NPC_TempInteractOverride' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, HeadShot_Sound) == 0x003D90, "Member 'ANPC_Pawn_Parent_C::HeadShot_Sound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Headshot_FX_Socket) == 0x003D98, "Member 'ANPC_Pawn_Parent_C::Headshot_FX_Socket' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, UseHeadShotFX) == 0x003D9C, "Member 'ANPC_Pawn_Parent_C::UseHeadShotFX' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TC_WeaponTypesAllowedForHeadshotFX) == 0x003DA0, "Member 'ANPC_Pawn_Parent_C::TC_WeaponTypesAllowedForHeadshotFX' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, AllowHeadshot) == 0x003DC0, "Member 'ANPC_Pawn_Parent_C::AllowHeadshot' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, AdditiveHitReactRetriggerDelay) == 0x003DC8, "Member 'ANPC_Pawn_Parent_C::AdditiveHitReactRetriggerDelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Additive_Hit_React_Montage) == 0x003DD0, "Member 'ANPC_Pawn_Parent_C::Additive_Hit_React_Montage' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Death_Normal_Sound) == 0x003DD8, "Member 'ANPC_Pawn_Parent_C::Death_Normal_Sound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, HeadshotFXEmitterTemplate) == 0x003DE0, "Member 'ANPC_Pawn_Parent_C::HeadshotFXEmitterTemplate' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Sound_Library_Collection_Tags) == 0x003DE8, "Member 'ANPC_Pawn_Parent_C::Sound_Library_Collection_Tags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Sound_Library_Default_Tags) == 0x003E08, "Member 'ANPC_Pawn_Parent_C::Sound_Library_Default_Tags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Sound_Library_Alert_Tags) == 0x003E28, "Member 'ANPC_Pawn_Parent_C::Sound_Library_Alert_Tags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Sound_Library_Aggressive_Tags) == 0x003E48, "Member 'ANPC_Pawn_Parent_C::Sound_Library_Aggressive_Tags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Default) == 0x003E68, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Default' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Alert) == 0x003E78, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Alert' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, CurrentSoundLib) == 0x003E88, "Member 'ANPC_Pawn_Parent_C::CurrentSoundLib' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Aggressive) == 0x003E90, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Aggressive' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Foley) == 0x003EA0, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Foley' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Foley_Water) == 0x003EB0, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Foley_Water' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, CurrentFoleyLib) == 0x003EC0, "Member 'ANPC_Pawn_Parent_C::CurrentFoleyLib' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Custom_Depth_Update_Rate) == 0x003EC8, "Member 'ANPC_Pawn_Parent_C::Custom_Depth_Update_Rate' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Class_0) == 0x003ED0, "Member 'ANPC_Pawn_Parent_C::Class_0' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GE_Converted) == 0x003ED8, "Member 'ANPC_Pawn_Parent_C::GE_Converted' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GE_Converted_Handle) == 0x003EE0, "Member 'ANPC_Pawn_Parent_C::GE_Converted_Handle' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_Death_Time) == 0x003EE8, "Member 'ANPC_Pawn_Parent_C::NPC_Death_Time' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, ScaleMeshInOrOutPlayRate) == 0x003EF0, "Member 'ANPC_Pawn_Parent_C::ScaleMeshInOrOutPlayRate' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, AllowSkipScaleOutIfNotRecentlyRendered) == 0x003EF4, "Member 'ANPC_Pawn_Parent_C::AllowSkipScaleOutIfNotRecentlyRendered' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCAlertLevelUpdated) == 0x003EF8, "Member 'ANPC_Pawn_Parent_C::NPCAlertLevelUpdated' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayTagsToBlockHitReact) == 0x003F08, "Member 'ANPC_Pawn_Parent_C::GameplayTagsToBlockHitReact' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GCInstantDeathTag) == 0x003F28, "Member 'ANPC_Pawn_Parent_C::GCInstantDeathTag' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCPickupGrabInitiated) == 0x003F30, "Member 'ANPC_Pawn_Parent_C::NPCPickupGrabInitiated' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, CAS_Interaction_Petting) == 0x003F40, "Member 'ANPC_Pawn_Parent_C::CAS_Interaction_Petting' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, CAS_Interaction_Feeding) == 0x003F48, "Member 'ANPC_Pawn_Parent_C::CAS_Interaction_Feeding' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, CAS_Interaction_Taming) == 0x003F50, "Member 'ANPC_Pawn_Parent_C::CAS_Interaction_Taming' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Athena_GameState_SoftClass) == 0x003F58, "Member 'ANPC_Pawn_Parent_C::Athena_GameState_SoftClass' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, PawnCustomVFXComponent) == 0x003F78, "Member 'ANPC_Pawn_Parent_C::PawnCustomVFXComponent' has a wrong offset!");

}

