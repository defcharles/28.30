#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Generic_TimerManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Generic_TimerManager.BP_Generic_TimerManager_C
// 0x00E0 (0x0370 - 0x0290)
class ABP_Generic_TimerManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        ServerWorldSecondsAtEvent;                         // 0x02A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         TimeOffsetSeconds;                                 // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CountDownTimerAccuracyfix;                         // 0x02B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              TimeUntilCountdownEnd;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         SecondsRemaining;                                  // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              TimespanRemaining;                                 // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 CalendarEventName;                                 // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FTimerHandle                           CountdownTimerHandle;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Phase3VisualDuration;                              // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 SecondsRemaining)> OnSecondsRemainingUpdated;                         // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              FadeOut;                                           // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 NewTimerState)> OnTimerStateChange;                                // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         CurrentState;                                      // 0x0320(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TimerStatesSecondsRemaining;                       // 0x0328(0x0010)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void()>              OnTimerActive;                                     // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnTimerFinished;                                   // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bTimerActive;                                      // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTimerFinished;                                    // 0x0359(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bisFrontEnd;                                       // 0x035A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FakeTimer;                                         // 0x035B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FakeTimerOffset;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipVisualUpdate;                                  // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckStage(int32 SecondsRemaining_0, int32* CurrentStage);
	void ClearTimerVisuals();
	void ContinueClockCountdown();
	void CountDownTimer_AccuracyFix();
	void CountdownTimer_New();
	void DebugCountdown(double Server_Seconds);
	void ErrorCorrection();
	void ExecuteUbergraph_BP_Generic_TimerManager(int32 EntryPoint);
	void OnEventActive_60E8057840996C096DE192A0F298D20C(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventEnded_60E8057840996C096DE192A0F298D20C(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventUpdated_60E8057840996C096DE192A0F298D20C(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnReady_5CD17C734C5C64794A8D0BA05D00B72C();
	void OnReady_B337321A443C013690B7869DF30E5BCC(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnRep_bIsActive();
	void OnRep_bTimerFinished();
	void OnRep_CurrentState();
	void OnRep_ServerWorldSecondsAtEvent();
	void ReceiveBeginPlay();
	void Set_Fake_Timer_Offset();
	void StartFinalAccuracyadjustment();
	void TimerFinished();
	void UpdateStage();
	void UseFakeTimer(double CountdownTime);
	void VisualUpdateEverySecond();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Generic_TimerManager_C">();
	}
	static class ABP_Generic_TimerManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Generic_TimerManager_C>();
	}
};
static_assert(alignof(ABP_Generic_TimerManager_C) == 0x000008, "Wrong alignment on ABP_Generic_TimerManager_C");
static_assert(sizeof(ABP_Generic_TimerManager_C) == 0x000370, "Wrong size on ABP_Generic_TimerManager_C");
static_assert(offsetof(ABP_Generic_TimerManager_C, UberGraphFrame) == 0x000290, "Member 'ABP_Generic_TimerManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_Generic_TimerManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, ServerWorldSecondsAtEvent) == 0x0002A0, "Member 'ABP_Generic_TimerManager_C::ServerWorldSecondsAtEvent' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, TimeOffsetSeconds) == 0x0002A8, "Member 'ABP_Generic_TimerManager_C::TimeOffsetSeconds' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, CountDownTimerAccuracyfix) == 0x0002B0, "Member 'ABP_Generic_TimerManager_C::CountDownTimerAccuracyfix' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, TimeUntilCountdownEnd) == 0x0002B8, "Member 'ABP_Generic_TimerManager_C::TimeUntilCountdownEnd' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, SecondsRemaining) == 0x0002C0, "Member 'ABP_Generic_TimerManager_C::SecondsRemaining' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, TimespanRemaining) == 0x0002C8, "Member 'ABP_Generic_TimerManager_C::TimespanRemaining' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, CalendarEventName) == 0x0002D0, "Member 'ABP_Generic_TimerManager_C::CalendarEventName' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, CountdownTimerHandle) == 0x0002E0, "Member 'ABP_Generic_TimerManager_C::CountdownTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, Phase3VisualDuration) == 0x0002E8, "Member 'ABP_Generic_TimerManager_C::Phase3VisualDuration' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, OnSecondsRemainingUpdated) == 0x0002F0, "Member 'ABP_Generic_TimerManager_C::OnSecondsRemainingUpdated' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, FadeOut) == 0x000300, "Member 'ABP_Generic_TimerManager_C::FadeOut' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, OnTimerStateChange) == 0x000310, "Member 'ABP_Generic_TimerManager_C::OnTimerStateChange' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, CurrentState) == 0x000320, "Member 'ABP_Generic_TimerManager_C::CurrentState' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, TimerStatesSecondsRemaining) == 0x000328, "Member 'ABP_Generic_TimerManager_C::TimerStatesSecondsRemaining' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, OnTimerActive) == 0x000338, "Member 'ABP_Generic_TimerManager_C::OnTimerActive' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, OnTimerFinished) == 0x000348, "Member 'ABP_Generic_TimerManager_C::OnTimerFinished' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, bTimerActive) == 0x000358, "Member 'ABP_Generic_TimerManager_C::bTimerActive' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, bTimerFinished) == 0x000359, "Member 'ABP_Generic_TimerManager_C::bTimerFinished' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, bisFrontEnd) == 0x00035A, "Member 'ABP_Generic_TimerManager_C::bisFrontEnd' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, FakeTimer) == 0x00035B, "Member 'ABP_Generic_TimerManager_C::FakeTimer' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, FakeTimerOffset) == 0x000360, "Member 'ABP_Generic_TimerManager_C::FakeTimerOffset' has a wrong offset!");
static_assert(offsetof(ABP_Generic_TimerManager_C, SkipVisualUpdate) == 0x000368, "Member 'ABP_Generic_TimerManager_C::SkipVisualUpdate' has a wrong offset!");

}

