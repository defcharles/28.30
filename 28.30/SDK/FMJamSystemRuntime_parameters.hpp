#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamSystemRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function FMJamSystemRuntime.JamControllerComponent.GetControllerOfClass
// 0x0018 (0x0018 - 0x0000)
struct JamControllerComponent_GetControllerOfClass final
{
public:
	TSubclassOf<class AController>                ControllerType;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchChildTypes;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamControllerComponent_GetControllerOfClass) == 0x000008, "Wrong alignment on JamControllerComponent_GetControllerOfClass");
static_assert(sizeof(JamControllerComponent_GetControllerOfClass) == 0x000018, "Wrong size on JamControllerComponent_GetControllerOfClass");
static_assert(offsetof(JamControllerComponent_GetControllerOfClass, ControllerType) == 0x000000, "Member 'JamControllerComponent_GetControllerOfClass::ControllerType' has a wrong offset!");
static_assert(offsetof(JamControllerComponent_GetControllerOfClass, bMatchChildTypes) == 0x000008, "Member 'JamControllerComponent_GetControllerOfClass::bMatchChildTypes' has a wrong offset!");
static_assert(offsetof(JamControllerComponent_GetControllerOfClass, ReturnValue) == 0x000010, "Member 'JamControllerComponent_GetControllerOfClass::ReturnValue' has a wrong offset!");

// Function FMJamSystemRuntime.JamControllerComponent_LoopOptions.AddJamCategories
// 0x0001 (0x0001 - 0x0000)
struct JamControllerComponent_LoopOptions_AddJamCategories final
{
public:
	bool                                          bPostLockerCategory;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamControllerComponent_LoopOptions_AddJamCategories) == 0x000001, "Wrong alignment on JamControllerComponent_LoopOptions_AddJamCategories");
static_assert(sizeof(JamControllerComponent_LoopOptions_AddJamCategories) == 0x000001, "Wrong size on JamControllerComponent_LoopOptions_AddJamCategories");
static_assert(offsetof(JamControllerComponent_LoopOptions_AddJamCategories, bPostLockerCategory) == 0x000000, "Member 'JamControllerComponent_LoopOptions_AddJamCategories::bPostLockerCategory' has a wrong offset!");

// Function FMJamSystemRuntime.JamControllerComponent_LoopPreloader.OnPawnSet
// 0x0018 (0x0018 - 0x0000)
struct JamControllerComponent_LoopPreloader_OnPawnSet final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  OldPawn;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamControllerComponent_LoopPreloader_OnPawnSet) == 0x000008, "Wrong alignment on JamControllerComponent_LoopPreloader_OnPawnSet");
static_assert(sizeof(JamControllerComponent_LoopPreloader_OnPawnSet) == 0x000018, "Wrong size on JamControllerComponent_LoopPreloader_OnPawnSet");
static_assert(offsetof(JamControllerComponent_LoopPreloader_OnPawnSet, Player) == 0x000000, "Member 'JamControllerComponent_LoopPreloader_OnPawnSet::Player' has a wrong offset!");
static_assert(offsetof(JamControllerComponent_LoopPreloader_OnPawnSet, NewPawn) == 0x000008, "Member 'JamControllerComponent_LoopPreloader_OnPawnSet::NewPawn' has a wrong offset!");
static_assert(offsetof(JamControllerComponent_LoopPreloader_OnPawnSet, OldPawn) == 0x000010, "Member 'JamControllerComponent_LoopPreloader_OnPawnSet::OldPawn' has a wrong offset!");

// Function FMJamSystemRuntime.JamControllerComponent_LoopPreloader.OnSongCatalogRetrieved
// 0x0001 (0x0001 - 0x0000)
struct JamControllerComponent_LoopPreloader_OnSongCatalogRetrieved final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamControllerComponent_LoopPreloader_OnSongCatalogRetrieved) == 0x000001, "Wrong alignment on JamControllerComponent_LoopPreloader_OnSongCatalogRetrieved");
static_assert(sizeof(JamControllerComponent_LoopPreloader_OnSongCatalogRetrieved) == 0x000001, "Wrong size on JamControllerComponent_LoopPreloader_OnSongCatalogRetrieved");
static_assert(offsetof(JamControllerComponent_LoopPreloader_OnSongCatalogRetrieved, bSuccess) == 0x000000, "Member 'JamControllerComponent_LoopPreloader_OnSongCatalogRetrieved::bSuccess' has a wrong offset!");

// Function FMJamSystemRuntime.JamOnOffSwitchComponent.ShouldApplyJamOnSplitscreenLogic
// 0x0018 (0x0018 - 0x0000)
struct JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      ReferenceController;                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic) == 0x000008, "Wrong alignment on JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic");
static_assert(sizeof(JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic) == 0x000018, "Wrong size on JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic");
static_assert(offsetof(JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic, WorldContextObject) == 0x000000, "Member 'JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic, ReferenceController) == 0x000008, "Member 'JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic::ReferenceController' has a wrong offset!");
static_assert(offsetof(JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic, ReturnValue) == 0x000010, "Member 'JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic::ReturnValue' has a wrong offset!");

// Function FMJamSystemRuntime.JamOnOffSwitchComponent.OnPlayerStatePawnSet
// 0x0018 (0x0018 - 0x0000)
struct JamOnOffSwitchComponent_OnPlayerStatePawnSet final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  OldPawn;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamOnOffSwitchComponent_OnPlayerStatePawnSet) == 0x000008, "Wrong alignment on JamOnOffSwitchComponent_OnPlayerStatePawnSet");
static_assert(sizeof(JamOnOffSwitchComponent_OnPlayerStatePawnSet) == 0x000018, "Wrong size on JamOnOffSwitchComponent_OnPlayerStatePawnSet");
static_assert(offsetof(JamOnOffSwitchComponent_OnPlayerStatePawnSet, Player) == 0x000000, "Member 'JamOnOffSwitchComponent_OnPlayerStatePawnSet::Player' has a wrong offset!");
static_assert(offsetof(JamOnOffSwitchComponent_OnPlayerStatePawnSet, NewPawn) == 0x000008, "Member 'JamOnOffSwitchComponent_OnPlayerStatePawnSet::NewPawn' has a wrong offset!");
static_assert(offsetof(JamOnOffSwitchComponent_OnPlayerStatePawnSet, OldPawn) == 0x000010, "Member 'JamOnOffSwitchComponent_OnPlayerStatePawnSet::OldPawn' has a wrong offset!");

// Function FMJamSystemRuntime.JamPlayerPawnComponent.GetPawnOfClass
// 0x0018 (0x0018 - 0x0000)
struct JamPlayerPawnComponent_GetPawnOfClass final
{
public:
	TSubclassOf<class APawn>                      PawnType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchChildTypes;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamPlayerPawnComponent_GetPawnOfClass) == 0x000008, "Wrong alignment on JamPlayerPawnComponent_GetPawnOfClass");
static_assert(sizeof(JamPlayerPawnComponent_GetPawnOfClass) == 0x000018, "Wrong size on JamPlayerPawnComponent_GetPawnOfClass");
static_assert(offsetof(JamPlayerPawnComponent_GetPawnOfClass, PawnType) == 0x000000, "Member 'JamPlayerPawnComponent_GetPawnOfClass::PawnType' has a wrong offset!");
static_assert(offsetof(JamPlayerPawnComponent_GetPawnOfClass, bMatchChildTypes) == 0x000008, "Member 'JamPlayerPawnComponent_GetPawnOfClass::bMatchChildTypes' has a wrong offset!");
static_assert(offsetof(JamPlayerPawnComponent_GetPawnOfClass, ReturnValue) == 0x000010, "Member 'JamPlayerPawnComponent_GetPawnOfClass::ReturnValue' has a wrong offset!");

// Function FMJamSystemRuntime.JamSystemEmoteBPFL.GetEmoteActionBinding
// 0x0030 (0x0030 - 0x0000)
struct JamSystemEmoteBPFL_GetEmoteActionBinding final
{
public:
	class FString                                 EmoteTemplateID;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEmoteActionBinding                    OutCreatedEmote;                                   // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamSystemEmoteBPFL_GetEmoteActionBinding) == 0x000008, "Wrong alignment on JamSystemEmoteBPFL_GetEmoteActionBinding");
static_assert(sizeof(JamSystemEmoteBPFL_GetEmoteActionBinding) == 0x000030, "Wrong size on JamSystemEmoteBPFL_GetEmoteActionBinding");
static_assert(offsetof(JamSystemEmoteBPFL_GetEmoteActionBinding, EmoteTemplateID) == 0x000000, "Member 'JamSystemEmoteBPFL_GetEmoteActionBinding::EmoteTemplateID' has a wrong offset!");
static_assert(offsetof(JamSystemEmoteBPFL_GetEmoteActionBinding, OutCreatedEmote) == 0x000010, "Member 'JamSystemEmoteBPFL_GetEmoteActionBinding::OutCreatedEmote' has a wrong offset!");

// Function FMJamSystemRuntime.JamSystemEmoteBPFL.IsJamDebugDisplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct JamSystemEmoteBPFL_IsJamDebugDisplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JamSystemEmoteBPFL_IsJamDebugDisplayEnabled) == 0x000001, "Wrong alignment on JamSystemEmoteBPFL_IsJamDebugDisplayEnabled");
static_assert(sizeof(JamSystemEmoteBPFL_IsJamDebugDisplayEnabled) == 0x000001, "Wrong size on JamSystemEmoteBPFL_IsJamDebugDisplayEnabled");
static_assert(offsetof(JamSystemEmoteBPFL_IsJamDebugDisplayEnabled, ReturnValue) == 0x000000, "Member 'JamSystemEmoteBPFL_IsJamDebugDisplayEnabled::ReturnValue' has a wrong offset!");

}

