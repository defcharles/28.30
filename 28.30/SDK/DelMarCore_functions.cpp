#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarCore

#include "Basic.hpp"

#include "DelMarCore_classes.hpp"
#include "DelMarCore_parameters.hpp"


namespace SDK
{

// Function DelMarCore.DelMarActorMover.InitializeMovement
// (Final, Native, Protected, BlueprintCallable)

void ADelMarActorMover::InitializeMovement()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InitializeMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarActorMover.OnRep_ServerStartTime
// (Final, Native, Protected)

void ADelMarActorMover::OnRep_ServerStartTime()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ServerStartTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGhostSessionComponent.StartSession
// (Native, Public, BlueprintCallable)

void UDelMarGhostSessionComponent::StartSession()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartSession");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGhostSessionComponent.StopSession
// (Native, Public, BlueprintCallable)

void UDelMarGhostSessionComponent::StopSession()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StopSession");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGhostSessionComponent.IsSessionActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarGhostSessionComponent::IsSessionActive() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsSessionActive");

	Params::DelMarGhostSessionComponent_IsSessionActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarGhostPlaybackSessionComponent.SetPlaybackLog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDelMarGhostReplayLog*            InLog                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarGhostPlaybackSessionComponent::SetPlaybackLog(class UDelMarGhostReplayLog* InLog)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPlaybackLog");

	Params::DelMarGhostPlaybackSessionComponent_SetPlaybackLog Parms{};

	Parms.InLog = InLog;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarAIController.HandleGroundedStateChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TScriptInterface<class IDelMarVehicleInterface>VehicleRef                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarAIController::HandleGroundedStateChanged(const TScriptInterface<class IDelMarVehicleInterface>& VehicleRef, bool bValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleGroundedStateChanged");

	Params::DelMarAIController_HandleGroundedStateChanged Parms{};

	Parms.VehicleRef = VehicleRef;
	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceMusicPlaylistComponent.SetMusicPlaylist
// (Native, Protected, BlueprintCallable)
// Parameters:
// class UDelMarRaceMusicPlaylist*         SetPlaylist                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableMusic                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicPlaylistComponent::SetMusicPlaylist(class UDelMarRaceMusicPlaylist* SetPlaylist, bool bEnableMusic)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetMusicPlaylist");

	Params::DelMarRaceMusicPlaylistComponent_SetMusicPlaylist Parms{};

	Parms.SetPlaylist = SetPlaylist;
	Parms.bEnableMusic = bEnableMusic;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarAIService.GetRegisteredAIBotControllers
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class ADelMarAIController*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ADelMarAIController*> UDelMarAIService::GetRegisteredAIBotControllers()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRegisteredAIBotControllers");

	Params::DelMarAIService_GetRegisteredAIBotControllers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarAIService.HandlePlayerRegistered
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerState*                 RegisteredPlayerState                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarAIService::HandlePlayerRegistered(class AFortPlayerState* RegisteredPlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePlayerRegistered");

	Params::DelMarAIService_HandlePlayerRegistered Parms{};

	Parms.RegisteredPlayerState = RegisteredPlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarAIService.HandlePlayerUnregistered
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerState*                 UnregisteredPlayerState                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetAsInactive                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarAIService::HandlePlayerUnregistered(class AFortPlayerState* UnregisteredPlayerState, bool bSetAsInactive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePlayerUnregistered");

	Params::DelMarAIService_HandlePlayerUnregistered Parms{};

	Parms.UnregisteredPlayerState = UnregisteredPlayerState;
	Parms.bSetAsInactive = bSetAsInactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarAIService.GetMaxNumberOfPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDelMarAIService::GetMaxNumberOfPlayers() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMaxNumberOfPlayers");

	Params::DelMarAIService_GetMaxNumberOfPlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.FinalizeRegisteredPlayerInitialization
// (Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::FinalizeRegisteredPlayerInitialization(class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FinalizeRegisteredPlayerInitialization");

	Params::DelMarRaceManager_FinalizeRegisteredPlayerInitialization Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.FinishRace
// (Native, Public, BlueprintCallable)

void ADelMarRaceManager::FinishRace()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FinishRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRaceManager.HandleRegisteredPlayerPawnSet
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::HandleRegisteredPlayerPawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRegisteredPlayerPawnSet");

	Params::DelMarRaceManager_HandleRegisteredPlayerPawnSet Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.NetMulticast_FinishRace
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// double                                  RaceFinishedTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::NetMulticast_FinishRace(double RaceFinishedTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_FinishRace");

	Params::DelMarRaceManager_NetMulticast_FinishRace Parms{};

	Parms.RaceFinishedTime = RaceFinishedTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.NetMulticast_ResetRace
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// bool                                    bNextRound                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::NetMulticast_ResetRace(bool bNextRound)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_ResetRace");

	Params::DelMarRaceManager_NetMulticast_ResetRace Parms{};

	Parms.bNextRound = bNextRound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.NetMulticast_ResetRun
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AFortPlayerState*                 InPlayerState                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayerTriggered                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::NetMulticast_ResetRun(const class AFortPlayerState* InPlayerState, bool bPlayerTriggered)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_ResetRun");

	Params::DelMarRaceManager_NetMulticast_ResetRun Parms{};

	Parms.InPlayerState = InPlayerState;
	Parms.bPlayerTriggered = bPlayerTriggered;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.OnRep_ActiveRaceLevelConfig
// (Final, Native, Protected)

void ADelMarRaceManager::OnRep_ActiveRaceLevelConfig()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ActiveRaceLevelConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRaceManager.RegisterPlayerController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      InController                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::RegisterPlayerController(class AController* InController)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterPlayerController");

	Params::DelMarRaceManager_RegisterPlayerController Parms{};

	Parms.InController = InController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.RegisterPlayerState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 InPlayerState                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::RegisterPlayerState(class AFortPlayerState* InPlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterPlayerState");

	Params::DelMarRaceManager_RegisterPlayerState Parms{};

	Parms.InPlayerState = InPlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.RequestStartRace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSkipCountdown                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::RequestStartRace(bool bSkipCountdown)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestStartRace");

	Params::DelMarRaceManager_RequestStartRace Parms{};

	Parms.bSkipCountdown = bSkipCountdown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.ResetRace
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsRoundReset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::ResetRace(bool bIsRoundReset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetRace");

	Params::DelMarRaceManager_ResetRace Parms{};

	Parms.bIsRoundReset = bIsRoundReset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.ResetRun
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayerTriggered                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::ResetRun(class AFortPlayerState* PlayerState, bool bPlayerTriggered)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetRun");

	Params::DelMarRaceManager_ResetRun Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bPlayerTriggered = bPlayerTriggered;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.SetActiveRaceLevelConfig
// (Native, Public, BlueprintCallable)
// Parameters:
// class ADelMarRaceLevelConfig*           InRaceLevelConfig                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::SetActiveRaceLevelConfig(class ADelMarRaceLevelConfig* InRaceLevelConfig)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetActiveRaceLevelConfig");

	Params::DelMarRaceManager_SetActiveRaceLevelConfig Parms{};

	Parms.InRaceLevelConfig = InRaceLevelConfig;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.SetPlayerAsSpectator
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::SetPlayerAsSpectator(class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPlayerAsSpectator");

	Params::DelMarRaceManager_SetPlayerAsSpectator Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.SetSpectatorAsPlayer
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::SetSpectatorAsPlayer(class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpectatorAsPlayer");

	Params::DelMarRaceManager_SetSpectatorAsPlayer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.UnregisterAllPlayers
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSetAsInactive                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::UnregisterAllPlayers(bool bSetAsInactive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UnregisterAllPlayers");

	Params::DelMarRaceManager_UnregisterAllPlayers Parms{};

	Parms.bSetAsInactive = bSetAsInactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.UnregisterPlayerController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      InController                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetAsInactive                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::UnregisterPlayerController(class AController* InController, bool bSetAsInactive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UnregisterPlayerController");

	Params::DelMarRaceManager_UnregisterPlayerController Parms{};

	Parms.InController = InController;
	Parms.bSetAsInactive = bSetAsInactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.UnregisterPlayerState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 InPlayerState                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetAsInactive                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::UnregisterPlayerState(class AFortPlayerState* InPlayerState, bool bSetAsInactive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UnregisterPlayerState");

	Params::DelMarRaceManager_UnregisterPlayerState Parms{};

	Parms.InPlayerState = InPlayerState;
	Parms.bSetAsInactive = bSetAsInactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManager.GetActiveRaceLevelConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADelMarRaceLevelConfig*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADelMarRaceLevelConfig* ADelMarRaceManager::GetActiveRaceLevelConfig() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetActiveRaceLevelConfig");

	Params::DelMarRaceManager_GetActiveRaceLevelConfig Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetActiveRacers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AFortPlayerState*>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AFortPlayerState*> ADelMarRaceManager::GetActiveRacers() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetActiveRacers");

	Params::DelMarRaceManager_GetActiveRacers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetCurrentRaceMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDelMarRaceMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDelMarRaceMode ADelMarRaceManager::GetCurrentRaceMode() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentRaceMode");

	Params::DelMarRaceManager_GetCurrentRaceMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetCurrentSpawnMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDelMarRaceSpawnMode                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDelMarRaceSpawnMode ADelMarRaceManager::GetCurrentSpawnMode() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentSpawnMode");

	Params::DelMarRaceManager_GetCurrentSpawnMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetEliminationManagerComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarEliminationRaceManagerComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarEliminationRaceManagerComponent* ADelMarRaceManager::GetEliminationManagerComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetEliminationManagerComponent");

	Params::DelMarRaceManager_GetEliminationManagerComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetManagedPlayerStatesArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AFortPlayerState*>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AFortPlayerState*> ADelMarRaceManager::GetManagedPlayerStatesArray() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetManagedPlayerStatesArray");

	Params::DelMarRaceManager_GetManagedPlayerStatesArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetNumberOfLapsForRace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADelMarRaceManager::GetNumberOfLapsForRace() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumberOfLapsForRace");

	Params::DelMarRaceManager_GetNumberOfLapsForRace Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetNumInactiveRacers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADelMarRaceManager::GetNumInactiveRacers() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumInactiveRacers");

	Params::DelMarRaceManager_GetNumInactiveRacers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetPositionalTracker
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarPositionalTrackerComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarPositionalTrackerComponent* ADelMarRaceManager::GetPositionalTracker() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPositionalTracker");

	Params::DelMarRaceManager_GetPositionalTracker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetRaceConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarRaceConfigComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarRaceConfigComponent* ADelMarRaceManager::GetRaceConfig() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRaceConfig");

	Params::DelMarRaceManager_GetRaceConfig Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetRespawnManagerComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarRespawnManagerComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarRespawnManagerComponent* ADelMarRaceManager::GetRespawnManagerComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRespawnManagerComponent");

	Params::DelMarRaceManager_GetRespawnManagerComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetRubberbandingManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarRubberbandingManagerComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarRubberbandingManagerComponent* ADelMarRaceManager::GetRubberbandingManager() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRubberbandingManager");

	Params::DelMarRaceManager_GetRubberbandingManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetSpectators
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AFortPlayerState*>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AFortPlayerState*> ADelMarRaceManager::GetSpectators() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSpectators");

	Params::DelMarRaceManager_GetSpectators Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.GetTimeManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarTimeManagerComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarTimeManagerComponent* ADelMarRaceManager::GetTimeManager() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTimeManager");

	Params::DelMarRaceManager_GetTimeManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.IsActiveRacer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarRaceManager::IsActiveRacer(const class AFortPlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsActiveRacer");

	Params::DelMarRaceManager_IsActiveRacer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.IsSpectator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarRaceManager::IsSpectator(const class AFortPlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsSpectator");

	Params::DelMarRaceManager_IsSpectator Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManager.RequestCountdownForPlayer
// (Native, Public, BlueprintCallable, Const)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarRaceManager::RequestCountdownForPlayer(class AFortPlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestCountdownForPlayer");

	Params::DelMarRaceManager_RequestCountdownForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialRaceManager.NetMulticast_TutorialSectionChanged
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectionIndex                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PrevSectionIndex                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarTutorialRaceManager::NetMulticast_TutorialSectionChanged(const class AFortPlayerState* PlayerState, const int32 SectionIndex, const int32 PrevSectionIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_TutorialSectionChanged");

	Params::DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SectionIndex = SectionIndex;
	Parms.PrevSectionIndex = PrevSectionIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialRaceManager.RequestNextTutorialSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarTutorialRaceManager::RequestNextTutorialSection(class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestNextTutorialSection");

	Params::DelMarTutorialRaceManager_RequestNextTutorialSection Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialRaceManager.RequestPrevTutorialSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarTutorialRaceManager::RequestPrevTutorialSection(class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestPrevTutorialSection");

	Params::DelMarTutorialRaceManager_RequestPrevTutorialSection Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialRaceManager.SetCurrentTutorialSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SectionIndex                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarTutorialRaceManager::SetCurrentTutorialSection(const int32 SectionIndex, class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCurrentTutorialSection");

	Params::DelMarTutorialRaceManager_SetCurrentTutorialSection Parms{};

	Parms.SectionIndex = SectionIndex;
	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarSpeedUpDevice.BP_HandleSpeedEffectGranted
// (Event, Protected, BlueprintEvent)

void ADelMarSpeedUpDevice::BP_HandleSpeedEffectGranted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_HandleSpeedEffectGranted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarSpeedUpDevice.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADelMarSpeedUpDevice::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBeginOverlap");

	Params::DelMarSpeedUpDevice_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarSpeedUpDevice.ShouldGrantSpeedEffect
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarSpeedUpDevice::ShouldGrantSpeedEffect(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ShouldGrantSpeedEffect");

	Params::DelMarSpeedUpDevice_ShouldGrantSpeedEffect Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceManagerVerbComponent.HandleCountdownStarted
// (Final, Native, Protected)

void UDelMarRaceManagerVerbComponent::HandleCountdownStarted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleCountdownStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRaceManagerVerbComponent.HandleFinalRacePositionsChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<struct FDelMarFinalRacePositionEntry>FinalRacePositions                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDelMarEvent_RunRecorded         RecordedRun                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarRaceManagerVerbComponent::HandleFinalRacePositionsChanged(const TArray<struct FDelMarFinalRacePositionEntry>& FinalRacePositions, const struct FDelMarEvent_RunRecorded& RecordedRun)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleFinalRacePositionsChanged");

	Params::DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged Parms{};

	Parms.FinalRacePositions = std::move(FinalRacePositions);
	Parms.RecordedRun = std::move(RecordedRun);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManagerVerbComponent.HandlePlayerLapCompleted
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FDelMarEvent_LapComplete         LapCompleteEvent                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarRaceManagerVerbComponent::HandlePlayerLapCompleted(const struct FDelMarEvent_LapComplete& LapCompleteEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePlayerLapCompleted");

	Params::DelMarRaceManagerVerbComponent_HandlePlayerLapCompleted Parms{};

	Parms.LapCompleteEvent = std::move(LapCompleteEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManagerVerbComponent.HandlePlayerPositionsChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<class AFortPlayerState*>         RacePositions                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarRaceManagerVerbComponent::HandlePlayerPositionsChanged(const TArray<class AFortPlayerState*>& RacePositions)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePlayerPositionsChanged");

	Params::DelMarRaceManagerVerbComponent_HandlePlayerPositionsChanged Parms{};

	Parms.RacePositions = std::move(RacePositions);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceManagerVerbComponent.HandleRaceFinished
// (Final, Native, Protected)

void UDelMarRaceManagerVerbComponent::HandleRaceFinished()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRaceFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRaceManagerVerbComponent.HandleRaceStarted
// (Final, Native, Protected)

void UDelMarRaceManagerVerbComponent::HandleRaceStarted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRaceStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarBTTask_DriveTrack.HandleTurboActivated
// (Final, Native, Protected)

void UDelMarBTTask_DriveTrack::HandleTurboActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTurboActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarBTTask_DriveTrack.HandleVehicleGroundedStateChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TScriptInterface<class IDelMarVehicleInterface>VehicleRef                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarBTTask_DriveTrack::HandleVehicleGroundedStateChanged(const TScriptInterface<class IDelMarVehicleInterface>& VehicleRef, bool bValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleGroundedStateChanged");

	Params::DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged Parms{};

	Parms.VehicleRef = VehicleRef;
	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarBTTask_DriveTrack.TurboBonusZoneStateChanged
// (Final, Native, Protected)
// Parameters:
// EDelMarTurboZoneState                   NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarBTTask_DriveTrack::TurboBonusZoneStateChanged(EDelMarTurboZoneState NewState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TurboBonusZoneStateChanged");

	Params::DelMarBTTask_DriveTrack_TurboBonusZoneStateChanged Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleAction_Turbo.HandleTurbo
// (Final, Native, Public)

void UDelMarVehicleAction_Turbo::HandleTurbo()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTurbo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarUIInputControllerComponent.HandleHudWidgetExpandCompleted
// (Final, Native, Protected)

void UDelMarUIInputControllerComponent::HandleHudWidgetExpandCompleted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleHudWidgetExpandCompleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarUIInputControllerComponent.HandleHudWidgetExpandTriggered
// (Final, Native, Protected)

void UDelMarUIInputControllerComponent::HandleHudWidgetExpandTriggered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleHudWidgetExpandTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarUIInputControllerComponent.HandleToggleQuestList
// (Final, Native, Protected)

void UDelMarUIInputControllerComponent::HandleToggleQuestList()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleToggleQuestList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarChallengeRaceManager.NetMulticast_StartOvertime
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// double                                  RaceFinishTimestamp                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarChallengeRaceManager::NetMulticast_StartOvertime(const double RaceFinishTimestamp)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_StartOvertime");

	Params::DelMarChallengeRaceManager_NetMulticast_StartOvertime Parms{};

	Parms.RaceFinishTimestamp = RaceFinishTimestamp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarStateMachine.OnRep_RequestedStateTag
// (Final, Native, Protected)

void UDelMarStateMachine::OnRep_RequestedStateTag()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_RequestedStateTag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarStateMachine.RequestState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     StateTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarStateMachine::RequestState(const struct FGameplayTag& StateTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestState");

	Params::DelMarStateMachine_RequestState Parms{};

	Parms.StateTag = std::move(StateTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarStateMachine.GetActiveStateByTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDelMarState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarState* UDelMarStateMachine::GetActiveStateByTag(const struct FGameplayTag& GameplayTag) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetActiveStateByTag");

	Params::DelMarStateMachine_GetActiveStateByTag Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarStateMachine.GetCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarState* UDelMarStateMachine::GetCurrentState() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentState");

	Params::DelMarStateMachine_GetCurrentState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarStateMachine.GetCurrentStateTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UDelMarStateMachine::GetCurrentStateTag() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentStateTag");

	Params::DelMarStateMachine_GetCurrentStateTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarStateMachine.GetRequestedStateTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UDelMarStateMachine::GetRequestedStateTag() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRequestedStateTag");

	Params::DelMarStateMachine_GetRequestedStateTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleAction_HazardHit.HandleHazardHit
// (Final, Native, Public)

void UDelMarVehicleAction_HazardHit::HandleHazardHit()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleHazardHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleManager.HandlePawnEnteredVehicle
// (Final, Native, Public, HasOutParams)
// Parameters:
// TScriptInterface<class IFortVehicleInterface>Vehicle                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPawn*                        Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SeatIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleManager::HandlePawnEnteredVehicle(const TScriptInterface<class IFortVehicleInterface>& Vehicle, class AFortPawn* Pawn, int32 SeatIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePawnEnteredVehicle");

	Params::DelMarVehicleManager_HandlePawnEnteredVehicle Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Pawn = Pawn;
	Parms.SeatIndex = SeatIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleManager.HandlePawnExitedVehicle
// (Final, Native, Public, HasOutParams)
// Parameters:
// TScriptInterface<class IFortVehicleInterface>Vehicle                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPawn*                        Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SeatIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleManager::HandlePawnExitedVehicle(const TScriptInterface<class IFortVehicleInterface>& Vehicle, class AFortPawn* Pawn, int32 SeatIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePawnExitedVehicle");

	Params::DelMarVehicleManager_HandlePawnExitedVehicle Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Pawn = Pawn;
	Parms.SeatIndex = SeatIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleManager.HandlePawnPlayerStateSet
// (Final, Native, Public)
// Parameters:
// class AFortPlayerPawn*                  Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleManager::HandlePawnPlayerStateSet(class AFortPlayerPawn* Pawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePawnPlayerStateSet");

	Params::DelMarVehicleManager_HandlePawnPlayerStateSet Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleManager.HandleViewTargetChanged
// (Final, Native, Public)
// Parameters:
// class AFortPlayerController*            InController                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OldViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleManager::HandleViewTargetChanged(class AFortPlayerController* InController, class AActor* OldViewTarget, class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleViewTargetChanged");

	Params::DelMarVehicleManager_HandleViewTargetChanged Parms{};

	Parms.InController = InController;
	Parms.OldViewTarget = OldViewTarget;
	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarSpectatorControllerComponent.ExitSpectate
// (Final, Native, Protected)

void UDelMarSpectatorControllerComponent::ExitSpectate()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ExitSpectate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarSpectatorControllerComponent.NetMulticast_BeginSpectating
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)

void UDelMarSpectatorControllerComponent::NetMulticast_BeginSpectating()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_BeginSpectating");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarSpectatorControllerComponent.NetMulticast_FinishSpectating
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)

void UDelMarSpectatorControllerComponent::NetMulticast_FinishSpectating()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_FinishSpectating");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarSpectatorControllerComponent.ServerSetSpectatorTarget
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarSpectatorControllerComponent::ServerSetSpectatorTarget(class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetSpectatorTarget");

	Params::DelMarSpectatorControllerComponent_ServerSetSpectatorTarget Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarSpectatorControllerComponent.SetIsLateJoinSpectator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewLateJoinSpectator                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarSpectatorControllerComponent::SetIsLateJoinSpectator(bool bNewLateJoinSpectator)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetIsLateJoinSpectator");

	Params::DelMarSpectatorControllerComponent_SetIsLateJoinSpectator Parms{};

	Parms.bNewLateJoinSpectator = bNewLateJoinSpectator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarSpectatorControllerComponent.SetSpectatorTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarSpectatorControllerComponent::SetSpectatorTarget(class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpectatorTarget");

	Params::DelMarSpectatorControllerComponent_SetSpectatorTarget Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarSpectatorControllerComponent.SpectateNextPlayer
// (Final, Native, Protected)

void UDelMarSpectatorControllerComponent::SpectateNextPlayer()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SpectateNextPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarSpectatorControllerComponent.SpectatePrevPlayer
// (Final, Native, Protected)

void UDelMarSpectatorControllerComponent::SpectatePrevPlayer()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SpectatePrevPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarSpectatorControllerComponent.IsLateJoinSpectator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarSpectatorControllerComponent::IsLateJoinSpectator() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsLateJoinSpectator");

	Params::DelMarSpectatorControllerComponent_IsLateJoinSpectator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarCoreSplineMeshComponent.OnBeginActorOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDelMarCoreSplineMeshComponent::OnBeginActorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBeginActorOverlap");

	Params::DelMarCoreSplineMeshComponent_OnBeginActorOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarChallengeSpectatorControllerComponent.ClientUpdateFinishedSpectatorTarget
// (Net, NetReliable, Native, Event, Protected, NetClient, BlueprintCallable)

void UDelMarChallengeSpectatorControllerComponent::ClientUpdateFinishedSpectatorTarget()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientUpdateFinishedSpectatorTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleAction_Jump.HandleJump
// (Final, Native, Public)

void UDelMarVehicleAction_Jump::HandleJump()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCompetitiveRaceManager.HandleFinalRacePositionsUpdated
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<struct FDelMarFinalRacePositionEntry>FinalRacePositions                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDelMarEvent_RunRecorded         RecordedRun                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ADelMarCompetitiveRaceManager::HandleFinalRacePositionsUpdated(const TArray<struct FDelMarFinalRacePositionEntry>& FinalRacePositions, const struct FDelMarEvent_RunRecorded& RecordedRun)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleFinalRacePositionsUpdated");

	Params::DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated Parms{};

	Parms.FinalRacePositions = std::move(FinalRacePositions);
	Parms.RecordedRun = std::move(RecordedRun);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCompetitiveRaceManager.OnRep_FirstPlayerFinishedTimestamp
// (Final, Native, Protected)

void ADelMarCompetitiveRaceManager::OnRep_FirstPlayerFinishedTimestamp()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_FirstPlayerFinishedTimestamp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarConnectedHintComponent.BeginPlay
// (Native, Public)

void UDelMarConnectedHintComponent::BeginPlay()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarConnectedHintComponent.HandleActorBeginOverlap
// (Final, Native, Public)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarConnectedHintComponent::HandleActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleActorBeginOverlap");

	Params::DelMarConnectedHintComponent_HandleActorBeginOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarConnectedHintComponent.HandleActorEndOverlap
// (Final, Native, Public)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarConnectedHintComponent::HandleActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleActorEndOverlap");

	Params::DelMarConnectedHintComponent_HandleActorEndOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarConnectedHintComponent.HandleVehicleActionPerformed
// (Final, Native, Protected)

void UDelMarConnectedHintComponent::HandleVehicleActionPerformed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleActionPerformed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarConnectedHintComponent.PassNuxHintTypeToConnectedHintComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     HintTypeTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarConnectedHintComponent::PassNuxHintTypeToConnectedHintComponent(const struct FGameplayTag& HintTypeTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PassNuxHintTypeToConnectedHintComponent");

	Params::DelMarConnectedHintComponent_PassNuxHintTypeToConnectedHintComponent Parms{};

	Parms.HintTypeTag = std::move(HintTypeTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticsDatabase.GetItemsForSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Slot                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UDelMarCosmeticItemDefinition*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UDelMarCosmeticItemDefinition*> UDelMarCosmeticsDatabase::GetItemsForSlot(const struct FGameplayTag& Slot)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemsForSlot");

	Params::DelMarCosmeticsDatabase_GetItemsForSlot Parms{};

	Parms.Slot = std::move(Slot);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarCosmeticsDatabase.GetSlotInfos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FDelMarCosmeticSlotInfo>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDelMarCosmeticSlotInfo> UDelMarCosmeticsDatabase::GetSlotInfos() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSlotInfos");

	Params::DelMarCosmeticsDatabase_GetSlotInfos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarDriverInteractionComponent.HandleViewTargetChanged
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerController*            InController                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OldViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverInteractionComponent::HandleViewTargetChanged(class AFortPlayerController* InController, class AActor* OldViewTarget, class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleViewTargetChanged");

	Params::DelMarDriverInteractionComponent_HandleViewTargetChanged Parms{};

	Parms.InController = InController;
	Parms.OldViewTarget = OldViewTarget;
	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarFlowAnalyticsControllerComponent.TutorialComplete
// (Final, Native, Public, BlueprintCallable)

void UDelMarFlowAnalyticsControllerComponent::TutorialComplete()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TutorialComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarFlowAnalyticsControllerComponent.TutorialGoRace
// (Final, Native, Public, BlueprintCallable)

void UDelMarFlowAnalyticsControllerComponent::TutorialGoRace()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TutorialGoRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarFlowAnalyticsControllerComponent.TutorialKeepTraining
// (Final, Native, Public, BlueprintCallable)

void UDelMarFlowAnalyticsControllerComponent::TutorialKeepTraining()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TutorialKeepTraining");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarFlowAnalyticsControllerComponent.TutorialReplay
// (Final, Native, Public, BlueprintCallable)

void UDelMarFlowAnalyticsControllerComponent::TutorialReplay()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TutorialReplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGhostPlaybackTrigger.BP_HandlePlaybackCompleted
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarGhostPlaybackTrigger::BP_HandlePlaybackCompleted(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_HandlePlaybackCompleted");

	Params::DelMarGhostPlaybackTrigger_BP_HandlePlaybackCompleted Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarGhostPlaybackTrigger.HandlePlaybackCompleted
// (Final, Native, Protected)

void ADelMarGhostPlaybackTrigger::HandlePlaybackCompleted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePlaybackCompleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGhostPlaybackTrigger.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADelMarGhostPlaybackTrigger::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBeginOverlap");

	Params::DelMarGhostPlaybackTrigger_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarGhostRecordingSessionComponent.SetRecordOffPhysicsDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarGhostRecordingSessionComponent::SetRecordOffPhysicsDelegate(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRecordOffPhysicsDelegate");

	Params::DelMarGhostRecordingSessionComponent_SetRecordOffPhysicsDelegate Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarGlobalLeaderboardControllerComponent.ClientNewPersonalBest
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// struct FDelMarEvent_GlobalLeaderboardNewPersonalBestPersonalBestEvent                                      (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarGlobalLeaderboardControllerComponent::ClientNewPersonalBest(const struct FDelMarEvent_GlobalLeaderboardNewPersonalBest& PersonalBestEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientNewPersonalBest");

	Params::DelMarGlobalLeaderboardControllerComponent_ClientNewPersonalBest Parms{};

	Parms.PersonalBestEvent = std::move(PersonalBestEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarGlobalLeaderboardControllerComponent.ClientUpdateLeaderboards
// (Net, NetReliable, Native, Event, Protected, NetClient)

void UDelMarGlobalLeaderboardControllerComponent::ClientUpdateLeaderboards()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientUpdateLeaderboards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGlobalLeaderboardControllerComponent.OnRep_LeaderboardSettings
// (Final, Native, Private)

void UDelMarGlobalLeaderboardControllerComponent::OnRep_LeaderboardSettings()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_LeaderboardSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGlobalLeaderboardControllerComponent.ServerNewPersonalBest
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FDelMarEvent_GlobalLeaderboardNewPersonalBestPersonalBestRetrievedEvent                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarGlobalLeaderboardControllerComponent::ServerNewPersonalBest(const struct FDelMarEvent_GlobalLeaderboardNewPersonalBest& PersonalBestRetrievedEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerNewPersonalBest");

	Params::DelMarGlobalLeaderboardControllerComponent_ServerNewPersonalBest Parms{};

	Parms.PersonalBestRetrievedEvent = std::move(PersonalBestRetrievedEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarGuidedTutorialZoneActor.BP_OnTutorialZoneComplete
// (Event, Protected, BlueprintEvent)

void ADelMarGuidedTutorialZoneActor::BP_OnTutorialZoneComplete()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnTutorialZoneComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGuidedTutorialZoneActor.BP_OnTutorialZoneFailed
// (Event, Protected, BlueprintEvent)

void ADelMarGuidedTutorialZoneActor::BP_OnTutorialZoneFailed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnTutorialZoneFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGuidedTutorialZoneActor.BP_OnTutorialZoneStarted
// (Event, Protected, BlueprintEvent)

void ADelMarGuidedTutorialZoneActor::BP_OnTutorialZoneStarted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnTutorialZoneStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGuidedTutorialZoneActor.HandleVehicleDemolished
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarGuidedTutorialZoneActor::HandleVehicleDemolished(const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleDemolished");

	Params::DelMarGuidedTutorialZoneActor_HandleVehicleDemolished Parms{};

	Parms.CausedByTag = std::move(CausedByTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarGuidedTutorialZoneActor.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADelMarGuidedTutorialZoneActor::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBeginOverlap");

	Params::DelMarGuidedTutorialZoneActor_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarGuidedTutorialZoneActor.OnEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarGuidedTutorialZoneActor::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnEndOverlap");

	Params::DelMarGuidedTutorialZoneActor_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarInputModifierHazard.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADelMarInputModifierHazard::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnBeginOverlap");

	Params::DelMarInputModifierHazard_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPhysicsRateDevice.SetPhysicsRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDelMarPhysicsRate                      PhysicsRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarPhysicsRateDevice::SetPhysicsRate(EDelMarPhysicsRate PhysicsRate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPhysicsRate");

	Params::DelMarPhysicsRateDevice_SetPhysicsRate Parms{};

	Parms.PhysicsRate = PhysicsRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerActiveRaceManagerComponent.OnRep_ActiveRaceManager
// (Final, Native, Protected)
// Parameters:
// class ADelMarRaceManager*               PreviousRaceManager                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerActiveRaceManagerComponent::OnRep_ActiveRaceManager(class ADelMarRaceManager* PreviousRaceManager)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ActiveRaceManager");

	Params::DelMarPlayerActiveRaceManagerComponent_OnRep_ActiveRaceManager Parms{};

	Parms.PreviousRaceManager = PreviousRaceManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerActiveRaceManagerComponent.SetActiveRaceManager
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ADelMarRaceManager*               RaceManager                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerActiveRaceManagerComponent::SetActiveRaceManager(class ADelMarRaceManager* RaceManager)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetActiveRaceManager");

	Params::DelMarPlayerActiveRaceManagerComponent_SetActiveRaceManager Parms{};

	Parms.RaceManager = RaceManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerActiveRaceManagerComponent.GetActiveRaceManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADelMarRaceManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADelMarRaceManager* UDelMarPlayerActiveRaceManagerComponent::GetActiveRaceManager() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetActiveRaceManager");

	Params::DelMarPlayerActiveRaceManagerComponent_GetActiveRaceManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleDraftActivated
// (Final, Native, Protected)

void UDelMarPlayerAnalyticsComponent::HandleDraftActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDraftActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleDriftBoostDeactivated
// (Final, Native, Protected)

void UDelMarPlayerAnalyticsComponent::HandleDriftBoostDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftBoostDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleDriftKickActivated
// (Final, Native, Protected)
// Parameters:
// float                                   DriftDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDelMarVehicleDriftState                DriftState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerAnalyticsComponent::HandleDriftKickActivated(float DriftDirection, EDelMarVehicleDriftState DriftState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftKickActivated");

	Params::DelMarPlayerAnalyticsComponent_HandleDriftKickActivated Parms{};

	Parms.DriftDirection = DriftDirection;
	Parms.DriftState = DriftState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleKickflipActivated
// (Final, Native, Protected)
// Parameters:
// bool                                    bLeft                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerAnalyticsComponent::HandleKickflipActivated(bool bLeft)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleKickflipActivated");

	Params::DelMarPlayerAnalyticsComponent_HandleKickflipActivated Parms{};

	Parms.bLeft = bLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandlePlayerResetRun
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerAnalyticsComponent::HandlePlayerResetRun(class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePlayerResetRun");

	Params::DelMarPlayerAnalyticsComponent_HandlePlayerResetRun Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandlePotentialDriftBoostChanged
// (Final, Native, Protected)
// Parameters:
// float                                   Percent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerAnalyticsComponent::HandlePotentialDriftBoostChanged(float Percent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePotentialDriftBoostChanged");

	Params::DelMarPlayerAnalyticsComponent_HandlePotentialDriftBoostChanged Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleRaceFinished
// (Final, Native, Protected)

void UDelMarPlayerAnalyticsComponent::HandleRaceFinished()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRaceFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleRaceStarted
// (Final, Native, Protected)

void UDelMarPlayerAnalyticsComponent::HandleRaceStarted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRaceStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleTurboBonusZoneChanged
// (Final, Native, Protected)
// Parameters:
// EDelMarTurboZoneState                   BonusZoneState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerAnalyticsComponent::HandleTurboBonusZoneChanged(EDelMarTurboZoneState BonusZoneState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTurboBonusZoneChanged");

	Params::DelMarPlayerAnalyticsComponent_HandleTurboBonusZoneChanged Parms{};

	Parms.BonusZoneState = BonusZoneState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleTurboChargeUsed
// (Final, Native, Protected)

void UDelMarPlayerAnalyticsComponent::HandleTurboChargeUsed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTurboChargeUsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleUnderthrustActivated
// (Final, Native, Protected)

void UDelMarPlayerAnalyticsComponent::HandleUnderthrustActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleUnderthrustActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleUnderthrustDeactivated
// (Final, Native, Protected)

void UDelMarPlayerAnalyticsComponent::HandleUnderthrustDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleUnderthrustDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleUnderthrustPercentChanged
// (Final, Native, Protected)
// Parameters:
// float                                   PercentageUnderthrustRemaining                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerAnalyticsComponent::HandleUnderthrustPercentChanged(float PercentageUnderthrustRemaining)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleUnderthrustPercentChanged");

	Params::DelMarPlayerAnalyticsComponent_HandleUnderthrustPercentChanged Parms{};

	Parms.PercentageUnderthrustRemaining = PercentageUnderthrustRemaining;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleVehicleDemolished
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerAnalyticsComponent::HandleVehicleDemolished(const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleDemolished");

	Params::DelMarPlayerAnalyticsComponent_HandleVehicleDemolished Parms{};

	Parms.CausedByTag = std::move(CausedByTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleVehicleHitHazard
// (Final, Native, Protected)

void UDelMarPlayerAnalyticsComponent::HandleVehicleHitHazard()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleHitHazard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleWorldBonusSpeedStackGained
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerAnalyticsComponent::HandleWorldBonusSpeedStackGained(const struct FGameplayTag& Source, int32 Stacks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWorldBonusSpeedStackGained");

	Params::DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained Parms{};

	Parms.Source = std::move(Source);
	Parms.Stacks = Stacks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerIdleComponent.OnPlayerDisconnected
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerStateAthena*           PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsDisconnected                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerIdleComponent::OnPlayerDisconnected(class AFortPlayerStateAthena* PlayerState, bool bIsDisconnected)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPlayerDisconnected");

	Params::DelMarPlayerIdleComponent_OnPlayerDisconnected Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bIsDisconnected = bIsDisconnected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerQuestDistanceTraveledComponent.HandleVehicleDemolished
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerQuestDistanceTraveledComponent::HandleVehicleDemolished(const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleDemolished");

	Params::DelMarPlayerQuestDistanceTraveledComponent_HandleVehicleDemolished Parms{};

	Parms.CausedByTag = std::move(CausedByTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerQuestMatchInfoComponent.HandleRaceStarted
// (Final, Native, Protected)

void UDelMarPlayerQuestMatchInfoComponent::HandleRaceStarted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRaceStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerQuestMatchInfoComponent.HandleVehicleDemolished
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerQuestMatchInfoComponent::HandleVehicleDemolished(const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleDemolished");

	Params::DelMarPlayerQuestMatchInfoComponent_HandleVehicleDemolished Parms{};

	Parms.CausedByTag = std::move(CausedByTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerQuestMatchInfoComponent.HandleVehicleHitHazard
// (Final, Native, Protected)

void UDelMarPlayerQuestMatchInfoComponent::HandleVehicleHitHazard()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleHitHazard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarProxyGhostVisualComponent.HandlePartCustomizationUpdated
// (Final, Native, Protected)
// Parameters:
// int32                                   MeshPartIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarProxyGhostVisualComponent::HandlePartCustomizationUpdated(const int32 MeshPartIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePartCustomizationUpdated");

	Params::DelMarProxyGhostVisualComponent_HandlePartCustomizationUpdated Parms{};

	Parms.MeshPartIndex = MeshPartIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarProxyGhostVisualComponent.HandleVehicleCosmeticsFinished
// (Final, Native, Protected)

void UDelMarProxyGhostVisualComponent::HandleVehicleCosmeticsFinished()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleCosmeticsFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarProxyGhostVisualComponent.HandleViewTargetChanged
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerController*            InController                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OldViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarProxyGhostVisualComponent::HandleViewTargetChanged(class AFortPlayerController* InController, class AActor* OldViewTarget, class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleViewTargetChanged");

	Params::DelMarProxyGhostVisualComponent_HandleViewTargetChanged Parms{};

	Parms.InController = InController;
	Parms.OldViewTarget = OldViewTarget;
	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRaceInfoComponent.HandleRaceStarted
// (Final, Native, Protected)

void UDelMarRaceInfoComponent::HandleRaceStarted()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRaceStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRaceLevelConfig.SpawnRaceManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFireInitializationEvent                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADelMarRaceManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADelMarRaceManager* ADelMarRaceLevelConfig::SpawnRaceManager(bool bFireInitializationEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SpawnRaceManager");

	Params::DelMarRaceLevelConfig_SpawnRaceManager Parms{};

	Parms.bFireInitializationEvent = bFireInitializationEvent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceLevelConfig.GetRaceManagerClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ADelMarRaceManager>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ADelMarRaceManager> ADelMarRaceLevelConfig::GetRaceManagerClass() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRaceManagerClass");

	Params::DelMarRaceLevelConfig_GetRaceManagerClass Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRaceLevelConfig.GetRaceModeTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag ADelMarRaceLevelConfig::GetRaceModeTag() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRaceModeTag");

	Params::DelMarRaceLevelConfig_GetRaceModeTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTimeManagerComponent.ResetClocks
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UDelMarTimeManagerComponent::ResetClocks()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetClocks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTimeManagerComponent.StartCountdownForPlayer
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ServerCountdownStartTime                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ServerRunStartTime                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarTimeManagerComponent::StartCountdownForPlayer(class AFortPlayerState* PlayerState, double ServerCountdownStartTime, double ServerRunStartTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartCountdownForPlayer");

	Params::DelMarTimeManagerComponent_StartCountdownForPlayer Parms{};

	Parms.PlayerState = PlayerState;
	Parms.ServerCountdownStartTime = ServerCountdownStartTime;
	Parms.ServerRunStartTime = ServerRunStartTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTimeManagerComponent.StartCountdownForRace
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// double                                  ServerCountdownStartTime                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ServerRunStartTime                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  InServerCountdownIntervalTime                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarTimeManagerComponent::StartCountdownForRace(double ServerCountdownStartTime, double ServerRunStartTime, double InServerCountdownIntervalTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartCountdownForRace");

	Params::DelMarTimeManagerComponent_StartCountdownForRace Parms{};

	Parms.ServerCountdownStartTime = ServerCountdownStartTime;
	Parms.ServerRunStartTime = ServerRunStartTime;
	Parms.InServerCountdownIntervalTime = InServerCountdownIntervalTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTimeManagerComponent.GetRaceTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UDelMarTimeManagerComponent::GetRaceTimeRemaining() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRaceTimeRemaining");

	Params::DelMarTimeManagerComponent_GetRaceTimeRemaining Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTimeManagerComponent.GetSecondsRemainingTillRaceStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UDelMarTimeManagerComponent::GetSecondsRemainingTillRaceStart() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSecondsRemainingTillRaceStart");

	Params::DelMarTimeManagerComponent_GetSecondsRemainingTillRaceStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTimeManagerComponent.GetSecondsSinceRaceStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UDelMarTimeManagerComponent::GetSecondsSinceRaceStart() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSecondsSinceRaceStart");

	Params::DelMarTimeManagerComponent_GetSecondsSinceRaceStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTimeManagerComponent.GetServerCountdownIntervalTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UDelMarTimeManagerComponent::GetServerCountdownIntervalTime() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetServerCountdownIntervalTime");

	Params::DelMarTimeManagerComponent_GetServerCountdownIntervalTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTimeManagerComponent.GetServerRaceFinishTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UDelMarTimeManagerComponent::GetServerRaceFinishTime() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetServerRaceFinishTime");

	Params::DelMarTimeManagerComponent_GetServerRaceFinishTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTimeManagerComponent.GetServerRaceStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UDelMarTimeManagerComponent::GetServerRaceStartTime() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetServerRaceStartTime");

	Params::DelMarTimeManagerComponent_GetServerRaceStartTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTutorialInteractableSpline.BP_HandleAllSplineTriggersCompleted
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           FinalCompletedTrigger                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarTutorialInteractableSpline::BP_HandleAllSplineTriggersCompleted(class AActor* FinalCompletedTrigger)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_HandleAllSplineTriggersCompleted");

	Params::DelMarTutorialInteractableSpline_BP_HandleAllSplineTriggersCompleted Parms{};

	Parms.FinalCompletedTrigger = FinalCompletedTrigger;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialInteractableSpline.HandleColliderOverlap
// (Final, Native, Protected)
// Parameters:
// class ADelMarTutorialTriggerActor*      InTrigger                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarTutorialInteractableSpline::HandleColliderOverlap(class ADelMarTutorialTriggerActor* InTrigger)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleColliderOverlap");

	Params::DelMarTutorialInteractableSpline_HandleColliderOverlap Parms{};

	Parms.InTrigger = InTrigger;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialInteractableSpline.ResetTriggers
// (Final, Native, Public, BlueprintCallable)

void ADelMarTutorialInteractableSpline::ResetTriggers()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetTriggers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTutorialInteractableSpline.GetHaveAllTriggersCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarTutorialInteractableSpline::GetHaveAllTriggersCompleted() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetHaveAllTriggersCompleted");

	Params::DelMarTutorialInteractableSpline_GetHaveAllTriggersCompleted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTutorialInteractableSpline.GetTriggerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADelMarTutorialTriggerActor*      InTrigger                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADelMarTutorialInteractableSpline::GetTriggerIndex(class ADelMarTutorialTriggerActor* InTrigger) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTriggerIndex");

	Params::DelMarTutorialInteractableSpline_GetTriggerIndex Parms{};

	Parms.InTrigger = InTrigger;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTutorialInteractableSpline.GetTriggerIndexAsRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADelMarTutorialTriggerActor*      InTrigger                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADelMarTutorialInteractableSpline::GetTriggerIndexAsRatio(class ADelMarTutorialTriggerActor* InTrigger) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTriggerIndexAsRatio");

	Params::DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio Parms{};

	Parms.InTrigger = InTrigger;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTutorialTriggerActor.BP_CanTriggerActor
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarTutorialTriggerActor::BP_CanTriggerActor(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_CanTriggerActor");

	Params::DelMarTutorialTriggerActor_BP_CanTriggerActor Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTutorialTriggerActor.BP_HandleColliderReset
// (Event, Protected, BlueprintEvent)

void ADelMarTutorialTriggerActor::BP_HandleColliderReset()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_HandleColliderReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTutorialTriggerActor.BP_HandleColliderTriggered
// (Event, Protected, BlueprintEvent)

void ADelMarTutorialTriggerActor::BP_HandleColliderTriggered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_HandleColliderTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTutorialTriggerActor.CanTriggerActor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarTutorialTriggerActor::CanTriggerActor(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanTriggerActor");

	Params::DelMarTutorialTriggerActor_CanTriggerActor Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTutorialTriggerActor.HandleColliderOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADelMarTutorialTriggerActor::HandleColliderOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleColliderOverlap");

	Params::DelMarTutorialTriggerActor_HandleColliderOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialTriggerActor.ResetTrigger
// (Final, Native, Public, BlueprintCallable)

void ADelMarTutorialTriggerActor::ResetTrigger()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleAction_Drift.HandleDrift
// (Final, Native, Public)
// Parameters:
// float                                   DriftDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDelMarVehicleDriftState                DriftState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleAction_Drift::HandleDrift(float DriftDirection, EDelMarVehicleDriftState DriftState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDrift");

	Params::DelMarVehicleAction_Drift_HandleDrift Parms{};

	Parms.DriftDirection = DriftDirection;
	Parms.DriftState = DriftState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleAction_KickFlip.HandleKickflip
// (Final, Native, Public)
// Parameters:
// bool                                    bLeftSide                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleAction_KickFlip::HandleKickflip(bool bLeftSide)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleKickflip");

	Params::DelMarVehicleAction_KickFlip_HandleKickflip Parms{};

	Parms.bLeftSide = bLeftSide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleAction_Underthrust.HandleUnderthrust
// (Final, Native, Public)

void UDelMarVehicleAction_Underthrust::HandleUnderthrust()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleUnderthrust");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnAirFreestyleDeactivated
// (Final, Native, Protected)

void UDelMarVehicleCameraMode_V2::OnAirFreestyleDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAirFreestyleDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnAppliedTeleportRotation
// (Final, Native, Protected)

void UDelMarVehicleCameraMode_V2::OnAppliedTeleportRotation()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAppliedTeleportRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnDriftBonusActivated
// (Final, Native, Protected)

void UDelMarVehicleCameraMode_V2::OnDriftBonusActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDriftBonusActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnDriftBonusDeactivated
// (Final, Native, Protected)

void UDelMarVehicleCameraMode_V2::OnDriftBonusDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDriftBonusDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnDriftKickActivated
// (Final, Native, Protected)
// Parameters:
// float                                   DriftDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDelMarVehicleDriftState                DriftState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleCameraMode_V2::OnDriftKickActivated(float DriftDirection, EDelMarVehicleDriftState DriftState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDriftKickActivated");

	Params::DelMarVehicleCameraMode_V2_OnDriftKickActivated Parms{};

	Parms.DriftDirection = DriftDirection;
	Parms.DriftState = DriftState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnDriftKickDeactivated
// (Final, Native, Protected)

void UDelMarVehicleCameraMode_V2::OnDriftKickDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDriftKickDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnStartlineBoostActivated
// (Final, Native, Protected)
// Parameters:
// float                                   StartlineBoostPerc                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleCameraMode_V2::OnStartlineBoostActivated(float StartlineBoostPerc)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnStartlineBoostActivated");

	Params::DelMarVehicleCameraMode_V2_OnStartlineBoostActivated Parms{};

	Parms.StartlineBoostPerc = StartlineBoostPerc;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnStartlineBoostDeactivated
// (Final, Native, Protected)

void UDelMarVehicleCameraMode_V2::OnStartlineBoostDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnStartlineBoostDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnTurboActivated
// (Final, Native, Protected)

void UDelMarVehicleCameraMode_V2::OnTurboActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTurboActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnTurboBonusZoneStateChanged
// (Final, Native, Protected)
// Parameters:
// EDelMarTurboZoneState                   ZoneState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleCameraMode_V2::OnTurboBonusZoneStateChanged(EDelMarTurboZoneState ZoneState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTurboBonusZoneStateChanged");

	Params::DelMarVehicleCameraMode_V2_OnTurboBonusZoneStateChanged Parms{};

	Parms.ZoneState = ZoneState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnTurboDeactivated
// (Final, Native, Protected)

void UDelMarVehicleCameraMode_V2::OnTurboDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTurboDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnWorldBonusSpeedStackGained
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleCameraMode_V2::OnWorldBonusSpeedStackGained(const struct FGameplayTag& Source, int32 Stacks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnWorldBonusSpeedStackGained");

	Params::DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained Parms{};

	Parms.Source = std::move(Source);
	Parms.Stacks = Stacks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleCameraMode_V2.OnWorldBonusSpeedStackLost
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleCameraMode_V2::OnWorldBonusSpeedStackLost(const struct FGameplayTag& Source, int32 Stacks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnWorldBonusSpeedStackLost");

	Params::DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost Parms{};

	Parms.Source = std::move(Source);
	Parms.Stacks = Stacks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleInterface.AnyWheelsOnGround
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::AnyWheelsOnGround() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AnyWheelsOnGround");

	Params::DelMarVehicleInterface_AnyWheelsOnGround Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.CanStrafeBeActivated
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::CanStrafeBeActivated() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanStrafeBeActivated");

	Params::DelMarVehicleInterface_CanStrafeBeActivated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetAcceleration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetAcceleration() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAcceleration");

	Params::DelMarVehicleInterface_GetAcceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetBaseForwardSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetBaseForwardSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBaseForwardSpeed");

	Params::DelMarVehicleInterface_GetBaseForwardSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetBaseTargetSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetBaseTargetSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBaseTargetSpeed");

	Params::DelMarVehicleInterface_GetBaseTargetSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBonusSpeed");

	Params::DelMarVehicleInterface_GetBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetCosmeticComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarVehicleCosmeticComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarVehicleCosmeticComponent* IDelMarVehicleInterface::GetCosmeticComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCosmeticComponent");

	Params::DelMarVehicleInterface_GetCosmeticComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetCurrentNumTurboCharges
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetCurrentNumTurboCharges() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentNumTurboCharges");

	Params::DelMarVehicleInterface_GetCurrentNumTurboCharges Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetCurrentTurboBonusZoneState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDelMarTurboZoneState                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDelMarTurboZoneState IDelMarVehicleInterface::GetCurrentTurboBonusZoneState() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentTurboBonusZoneState");

	Params::DelMarVehicleInterface_GetCurrentTurboBonusZoneState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetDraftingMaxBonusSpeedPercentage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetDraftingMaxBonusSpeedPercentage() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDraftingMaxBonusSpeedPercentage");

	Params::DelMarVehicleInterface_GetDraftingMaxBonusSpeedPercentage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetDraftingState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDelmarDraftingState                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDelmarDraftingState IDelMarVehicleInterface::GetDraftingState() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDraftingState");

	Params::DelMarVehicleInterface_GetDraftingState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetDriftAngle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetDriftAngle() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDriftAngle");

	Params::DelMarVehicleInterface_GetDriftAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetDriftBoostAppliedBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetDriftBoostAppliedBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDriftBoostAppliedBonusSpeed");

	Params::DelMarVehicleInterface_GetDriftBoostAppliedBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetDriftDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetDriftDuration() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDriftDuration");

	Params::DelMarVehicleInterface_GetDriftDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetDriftSlipAngleRatio
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetDriftSlipAngleRatio() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDriftSlipAngleRatio");

	Params::DelMarVehicleInterface_GetDriftSlipAngleRatio Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetForwardSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetForwardSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetForwardSpeed");

	Params::DelMarVehicleInterface_GetForwardSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetKickflipActivationCharges
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IDelMarVehicleInterface::GetKickflipActivationCharges() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetKickflipActivationCharges");

	Params::DelMarVehicleInterface_GetKickflipActivationCharges Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetKickflipDistanceToSuctionSurface
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetKickflipDistanceToSuctionSurface() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetKickflipDistanceToSuctionSurface");

	Params::DelMarVehicleInterface_GetKickflipDistanceToSuctionSurface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetKickflipDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetKickflipDuration() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetKickflipDuration");

	Params::DelMarVehicleInterface_GetKickflipDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetLandingData
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDelMarVehicleLandingData        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDelMarVehicleLandingData IDelMarVehicleInterface::GetLandingData() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLandingData");

	Params::DelMarVehicleInterface_GetLandingData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetMaxNumTurboCharges
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetMaxNumTurboCharges() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMaxNumTurboCharges");

	Params::DelMarVehicleInterface_GetMaxNumTurboCharges Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetNormalizedBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetNormalizedBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNormalizedBonusSpeed");

	Params::DelMarVehicleInterface_GetNormalizedBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetNormalizedForwardSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetNormalizedForwardSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNormalizedForwardSpeed");

	Params::DelMarVehicleInterface_GetNormalizedForwardSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetOversteerAccumulationPercentage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetOversteerAccumulationPercentage() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetOversteerAccumulationPercentage");

	Params::DelMarVehicleInterface_GetOversteerAccumulationPercentage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetPercentageTurboActiveTimeRemaining
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetPercentageTurboActiveTimeRemaining() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPercentageTurboActiveTimeRemaining");

	Params::DelMarVehicleInterface_GetPercentageTurboActiveTimeRemaining Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetPostProcessComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPostProcessComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPostProcessComponent* IDelMarVehicleInterface::GetPostProcessComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPostProcessComponent");

	Params::DelMarVehicleInterface_GetPostProcessComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetPotentialDriftBoostPercentage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetPotentialDriftBoostPercentage() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPotentialDriftBoostPercentage");

	Params::DelMarVehicleInterface_GetPotentialDriftBoostPercentage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetQueuedBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetQueuedBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetQueuedBonusSpeed");

	Params::DelMarVehicleInterface_GetQueuedBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetReattachmentDirection
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector IDelMarVehicleInterface::GetReattachmentDirection() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetReattachmentDirection");

	Params::DelMarVehicleInterface_GetReattachmentDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetRemainingTurboActiveSeconds
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetRemainingTurboActiveSeconds() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRemainingTurboActiveSeconds");

	Params::DelMarVehicleInterface_GetRemainingTurboActiveSeconds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetSideSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetSideSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSideSpeed");

	Params::DelMarVehicleInterface_GetSideSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetSkeletalMeshComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* IDelMarVehicleInterface::GetSkeletalMeshComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSkeletalMeshComponent");

	Params::DelMarVehicleInterface_GetSkeletalMeshComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetSpeedometerSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetSpeedometerSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSpeedometerSpeed");

	Params::DelMarVehicleInterface_GetSpeedometerSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetStableSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetStableSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStableSpeed");

	Params::DelMarVehicleInterface_GetStableSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetStartlineAppliedBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetStartlineAppliedBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStartlineAppliedBonusSpeed");

	Params::DelMarVehicleInterface_GetStartlineAppliedBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetStartlineMaxEarnedBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetStartlineMaxEarnedBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStartlineMaxEarnedBonusSpeed");

	Params::DelMarVehicleInterface_GetStartlineMaxEarnedBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetStartlinePercentageMaxBonusSpeedEarned
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetStartlinePercentageMaxBonusSpeedEarned() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStartlinePercentageMaxBonusSpeedEarned");

	Params::DelMarVehicleInterface_GetStartlinePercentageMaxBonusSpeedEarned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetSteering
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetSteering() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSteering");

	Params::DelMarVehicleInterface_GetSteering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetSteeringAngle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetSteeringAngle() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSteeringAngle");

	Params::DelMarVehicleInterface_GetSteeringAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetStrafeCooldownPercentage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetStrafeCooldownPercentage() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStrafeCooldownPercentage");

	Params::DelMarVehicleInterface_GetStrafeCooldownPercentage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetTargetDriftSide
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetTargetDriftSide() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTargetDriftSide");

	Params::DelMarVehicleInterface_GetTargetDriftSide Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetTargetSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetTargetSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTargetSpeed");

	Params::DelMarVehicleInterface_GetTargetSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetThrottle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetThrottle() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetThrottle");

	Params::DelMarVehicleInterface_GetThrottle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetTotalTimeSkydiving
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetTotalTimeSkydiving() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTotalTimeSkydiving");

	Params::DelMarVehicleInterface_GetTotalTimeSkydiving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetTrackPositionComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarTrackPositionComponent*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarTrackPositionComponent* IDelMarVehicleInterface::GetTrackPositionComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTrackPositionComponent");

	Params::DelMarVehicleInterface_GetTrackPositionComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetTurboAdditionalActiveSeconds
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetTurboAdditionalActiveSeconds() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTurboAdditionalActiveSeconds");

	Params::DelMarVehicleInterface_GetTurboAdditionalActiveSeconds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetTurboAppliedBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetTurboAppliedBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTurboAppliedBonusSpeed");

	Params::DelMarVehicleInterface_GetTurboAppliedBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetTurboBonusZoneBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetTurboBonusZoneBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTurboBonusZoneBonusSpeed");

	Params::DelMarVehicleInterface_GetTurboBonusZoneBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetUnderthrustActiveDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetUnderthrustActiveDuration() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetUnderthrustActiveDuration");

	Params::DelMarVehicleInterface_GetUnderthrustActiveDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetUnderthrustPercentageTankRemaining
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetUnderthrustPercentageTankRemaining() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetUnderthrustPercentageTankRemaining");

	Params::DelMarVehicleInterface_GetUnderthrustPercentageTankRemaining Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetVehicleForwardState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDelMarVehicleForwardState              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDelMarVehicleForwardState IDelMarVehicleInterface::GetVehicleForwardState() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetVehicleForwardState");

	Params::DelMarVehicleInterface_GetVehicleForwardState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetVelocity
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector IDelMarVehicleInterface::GetVelocity() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetVelocity");

	Params::DelMarVehicleInterface_GetVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.GetWorldAppliedBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IDelMarVehicleInterface::GetWorldAppliedBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetWorldAppliedBonusSpeed");

	Params::DelMarVehicleInterface_GetWorldAppliedBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.HasValidDraftingTarget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::HasValidDraftingTarget() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasValidDraftingTarget");

	Params::DelMarVehicleInterface_HasValidDraftingTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.InDriftBoostRange
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::InDriftBoostRange() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InDriftBoostRange");

	Params::DelMarVehicleInterface_InDriftBoostRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsAccelerating
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsAccelerating() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsAccelerating");

	Params::DelMarVehicleInterface_IsAccelerating Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsAirFreestyling
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsAirFreestyling() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsAirFreestyling");

	Params::DelMarVehicleInterface_IsAirFreestyling Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsAllVehicleInputDisabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsAllVehicleInputDisabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsAllVehicleInputDisabled");

	Params::DelMarVehicleInterface_IsAllVehicleInputDisabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsBraking
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsBraking() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsBraking");

	Params::DelMarVehicleInterface_IsBraking Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsDriftControlled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsDriftControlled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsDriftControlled");

	Params::DelMarVehicleInterface_IsDriftControlled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsInvulnerabilityActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsInvulnerabilityActive() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsInvulnerabilityActive");

	Params::DelMarVehicleInterface_IsInvulnerabilityActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsKickflipSuctionActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsKickflipSuctionActive() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsKickflipSuctionActive");

	Params::DelMarVehicleInterface_IsKickflipSuctionActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsKickingWheels
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsKickingWheels() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsKickingWheels");

	Params::DelMarVehicleInterface_IsKickingWheels Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsLosingAppliedBonusSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsLosingAppliedBonusSpeed() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsLosingAppliedBonusSpeed");

	Params::DelMarVehicleInterface_IsLosingAppliedBonusSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsReattaching
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsReattaching() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsReattaching");

	Params::DelMarVehicleInterface_IsReattaching Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsSkyDiving
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsSkyDiving() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsSkyDiving");

	Params::DelMarVehicleInterface_IsSkyDiving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsStrafeActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsStrafeActive() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsStrafeActive");

	Params::DelMarVehicleInterface_IsStrafeActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsStrafeDisabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsStrafeDisabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsStrafeDisabled");

	Params::DelMarVehicleInterface_IsStrafeDisabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.IsStrafeLeft
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::IsStrafeLeft() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsStrafeLeft");

	Params::DelMarVehicleInterface_IsStrafeLeft Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleInterface.WheelsOnGround
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IDelMarVehicleInterface::WheelsOnGround() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("WheelsOnGround");

	Params::DelMarVehicleInterface_WheelsOnGround Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicle.AddTargetSpeedAdjustment
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class FName                             Source                                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarVehicle::AddTargetSpeedAdjustment(const class FName& Source, float Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddTargetSpeedAdjustment");

	Params::DelMarVehicle_AddTargetSpeedAdjustment Parms{};

	Parms.Source = Source;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.AddWorldBonusSpeedStack
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDelMarWorldBonusSpeedStack      BonusSpeedStack                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ADelMarVehicle::AddWorldBonusSpeedStack(const struct FDelMarWorldBonusSpeedStack& BonusSpeedStack)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddWorldBonusSpeedStack");

	Params::DelMarVehicle_AddWorldBonusSpeedStack Parms{};

	Parms.BonusSpeedStack = std::move(BonusSpeedStack);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.DemolishVehicle
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FGameplayTag                     InCausedByTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarVehicle::DemolishVehicle(const struct FGameplayTag& InCausedByTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DemolishVehicle");

	Params::DelMarVehicle_DemolishVehicle Parms{};

	Parms.InCausedByTag = std::move(InCausedByTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.HandleAerialThrottleBrakeChanged
// (Final, Native, Protected)

void ADelMarVehicle::HandleAerialThrottleBrakeChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleAerialThrottleBrakeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.HandleOnVehicleCosmeticsFinished
// (Final, Native, Protected)

void ADelMarVehicle::HandleOnVehicleCosmeticsFinished()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleOnVehicleCosmeticsFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.HandlePitchDeadzoneChanged
// (Final, Native, Protected)

void ADelMarVehicle::HandlePitchDeadzoneChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePitchDeadzoneChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.HandleSteerDeadzoneChanged
// (Final, Native, Protected)

void ADelMarVehicle::HandleSteerDeadzoneChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleSteerDeadzoneChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.HandleThrottleDeadzoneChanged
// (Final, Native, Protected)

void ADelMarVehicle::HandleThrottleDeadzoneChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleThrottleDeadzoneChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.HandleThrottleToggleChanged
// (Final, Native, Protected)

void ADelMarVehicle::HandleThrottleToggleChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleThrottleToggleChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.OnRep_bPawnCollisionsEnabled
// (Final, Native, Protected)

void ADelMarVehicle::OnRep_bPawnCollisionsEnabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_bPawnCollisionsEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.OnRep_bVehicleCollisionsEnabled
// (Final, Native, Protected)

void ADelMarVehicle::OnRep_bVehicleCollisionsEnabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_bVehicleCollisionsEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.OnRep_SpawnInfo
// (Final, Native, Private)

void ADelMarVehicle::OnRep_SpawnInfo()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_SpawnInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.OnRep_StartlineBoostData
// (Final, Native, Private)

void ADelMarVehicle::OnRep_StartlineBoostData()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_StartlineBoostData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.OnRep_TurboCharges
// (Final, Native, Public)

void ADelMarVehicle::OnRep_TurboCharges()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_TurboCharges");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.ResetRunPressed
// (Net, NetReliable, Native, Event, Public, NetServer)

void ADelMarVehicle::ResetRunPressed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetRunPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.ResetTrackPosition
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class ADelMarTrackBase*                 Track                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackSegment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarVehicle::ResetTrackPosition(class ADelMarTrackBase* Track, int32 TrackSegment)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetTrackPosition");

	Params::DelMarVehicle_ResetTrackPosition Parms{};

	Parms.Track = Track;
	Parms.TrackSegment = TrackSegment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.ServerAddReplicatedGameplayTag
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FGameplayTag                     InTag                                                  (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarVehicle::ServerAddReplicatedGameplayTag(const struct FGameplayTag& InTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerAddReplicatedGameplayTag");

	Params::DelMarVehicle_ServerAddReplicatedGameplayTag Parms{};

	Parms.InTag = std::move(InTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.ServerAddReplicatedGameplayTags
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FGameplayTagContainer            InTags                                                 (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ADelMarVehicle::ServerAddReplicatedGameplayTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerAddReplicatedGameplayTags");

	Params::DelMarVehicle_ServerAddReplicatedGameplayTags Parms{};

	Parms.InTags = std::move(InTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.ServerDemolishVehicle
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InCausedByTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarVehicle::ServerDemolishVehicle(const struct FGameplayTag& InCausedByTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerDemolishVehicle");

	Params::DelMarVehicle_ServerDemolishVehicle Parms{};

	Parms.InCausedByTag = std::move(InCausedByTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.ServerNotifyTurboActivated
// (Net, NetReliable, Native, Event, Public, NetServer)

void ADelMarVehicle::ServerNotifyTurboActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerNotifyTurboActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.ServerRemoveReplicatedGameplayTag
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FGameplayTag                     InTag                                                  (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarVehicle::ServerRemoveReplicatedGameplayTag(const struct FGameplayTag& InTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRemoveReplicatedGameplayTag");

	Params::DelMarVehicle_ServerRemoveReplicatedGameplayTag Parms{};

	Parms.InTag = std::move(InTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.ServerRemoveReplicatedGameplayTags
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FGameplayTagContainer            InTags                                                 (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ADelMarVehicle::ServerRemoveReplicatedGameplayTags(const struct FGameplayTagContainer& InTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRemoveReplicatedGameplayTags");

	Params::DelMarVehicle_ServerRemoveReplicatedGameplayTags Parms{};

	Parms.InTags = std::move(InTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.ServerSetLocalDriverHasReplicatedTheVehicle
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarVehicle::ServerSetLocalDriverHasReplicatedTheVehicle(bool bNewValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetLocalDriverHasReplicatedTheVehicle");

	Params::DelMarVehicle_ServerSetLocalDriverHasReplicatedTheVehicle Parms{};

	Parms.bNewValue = bNewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.ServerTeleportVehicleEntered
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void ADelMarVehicle::ServerTeleportVehicleEntered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerTeleportVehicleEntered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.ServerTeleportVehicleExited
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void ADelMarVehicle::ServerTeleportVehicleExited()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerTeleportVehicleExited");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.SetTeleportRotation
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FRotator                         DestRotation                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ADelMarVehicle::SetTeleportRotation(const struct FRotator& DestRotation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTeleportRotation");

	Params::DelMarVehicle_SetTeleportRotation Parms{};

	Parms.DestRotation = std::move(DestRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.SetVehicleMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    NewMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicsAsset*                    PhysicsAsset                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarVehicle::SetVehicleMesh(class USkeletalMesh* NewMesh, class UPhysicsAsset* PhysicsAsset)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetVehicleMesh");

	Params::DelMarVehicle_SetVehicleMesh Parms{};

	Parms.NewMesh = NewMesh;
	Parms.PhysicsAsset = PhysicsAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicle.TeleportVehicleEntered
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ADelMarVehicle::TeleportVehicleEntered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TeleportVehicleEntered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.TeleportVehicleExited
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ADelMarVehicle::TeleportVehicleExited()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TeleportVehicleExited");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.TryGetFortClientSettings
// (Final, Native, Protected)

void ADelMarVehicle::TryGetFortClientSettings()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TryGetFortClientSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicle.GetAudioComponentGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarAudioComponentGroup*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarAudioComponentGroup* ADelMarVehicle::GetAudioComponentGroup() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAudioComponentGroup");

	Params::DelMarVehicle_GetAudioComponentGroup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicle.GetCosmeticComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarVehicleCosmeticComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarVehicleCosmeticComponent* ADelMarVehicle::GetCosmeticComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCosmeticComponent");

	Params::DelMarVehicle_GetCosmeticComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicle.GetNewestStackActiveDurationFromSource
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADelMarVehicle::GetNewestStackActiveDurationFromSource(const struct FGameplayTag& Source) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNewestStackActiveDurationFromSource");

	Params::DelMarVehicle_GetNewestStackActiveDurationFromSource Parms{};

	Parms.Source = std::move(Source);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicle.GetRaceManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADelMarRaceManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADelMarRaceManager* ADelMarVehicle::GetRaceManager() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRaceManager");

	Params::DelMarVehicle_GetRaceManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicle.GetTrackPositionComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarTrackPositionComponent*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarTrackPositionComponent* ADelMarVehicle::GetTrackPositionComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTrackPositionComponent");

	Params::DelMarVehicle_GetTrackPositionComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicle.IsInvulnerabilityActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarVehicle::IsInvulnerabilityActive() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsInvulnerabilityActive");

	Params::DelMarVehicle_IsInvulnerabilityActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicle.IsRespawnEffectSignificant
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarVehicle::IsRespawnEffectSignificant() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsRespawnEffectSignificant");

	Params::DelMarVehicle_IsRespawnEffectSignificant Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicle.IsWheelOnGround
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDelMarVehicleWheelIndex                WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarVehicle::IsWheelOnGround(EDelMarVehicleWheelIndex WheelIndex) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsWheelOnGround");

	Params::DelMarVehicle_IsWheelOnGround Parms{};

	Parms.WheelIndex = WheelIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicle.VehicleHasTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     InTag                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarVehicle::VehicleHasTag(const struct FGameplayTag& InTag) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("VehicleHasTag");

	Params::DelMarVehicle_VehicleHasTag Parms{};

	Parms.InTag = std::move(InTag);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleNetworkPhysicsComponent.OnPhysicsStateChanged
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              ChangedComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EComponentPhysicsStateChange            StateChange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleNetworkPhysicsComponent::OnPhysicsStateChanged(class UPrimitiveComponent* ChangedComponent, EComponentPhysicsStateChange StateChange)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPhysicsStateChanged");

	Params::DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged Parms{};

	Parms.ChangedComponent = ChangedComponent;
	Parms.StateChange = StateChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleNetworkPhysicsComponent.OnRep_ReplicatedState
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FDelMarVehicleReplicatedState    PrevReplicatedState                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarVehicleNetworkPhysicsComponent::OnRep_ReplicatedState(const struct FDelMarVehicleReplicatedState& PrevReplicatedState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ReplicatedState");

	Params::DelMarVehicleNetworkPhysicsComponent_OnRep_ReplicatedState Parms{};

	Parms.PrevReplicatedState = std::move(PrevReplicatedState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleAnyWheelsOnGroundChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TScriptInterface<class IDelMarVehicleInterface>Vehicle                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWheelsOnGround                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleStateTagManagerComponent::HandleAnyWheelsOnGroundChanged(const TScriptInterface<class IDelMarVehicleInterface>& Vehicle, bool bWheelsOnGround)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleAnyWheelsOnGroundChanged");

	Params::DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged Parms{};

	Parms.Vehicle = Vehicle;
	Parms.bWheelsOnGround = bWheelsOnGround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleDraftActivated
// (Final, Native, Protected)

void UDelMarVehicleStateTagManagerComponent::HandleDraftActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDraftActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleDraftDeactivated
// (Final, Native, Protected)

void UDelMarVehicleStateTagManagerComponent::HandleDraftDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDraftDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleDriftActivated
// (Final, Native, Protected)

void UDelMarVehicleStateTagManagerComponent::HandleDriftActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleDriftBoostActivated
// (Final, Native, Protected)

void UDelMarVehicleStateTagManagerComponent::HandleDriftBoostActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftBoostActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleDriftBoostDeactivated
// (Final, Native, Protected)

void UDelMarVehicleStateTagManagerComponent::HandleDriftBoostDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftBoostDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleDriftDeactivated
// (Final, Native, Protected)

void UDelMarVehicleStateTagManagerComponent::HandleDriftDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleTurboChargeUsed
// (Final, Native, Protected)

void UDelMarVehicleStateTagManagerComponent::HandleTurboChargeUsed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTurboChargeUsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleTurboDeactivated
// (Final, Native, Protected)

void UDelMarVehicleStateTagManagerComponent::HandleTurboDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTurboDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleWorldBonusSpeedStackGained
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleStateTagManagerComponent::HandleWorldBonusSpeedStackGained(const struct FGameplayTag& Source, int32 Stacks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWorldBonusSpeedStackGained");

	Params::DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained Parms{};

	Parms.Source = std::move(Source);
	Parms.Stacks = Stacks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleWorldBonusSpeedStackLost
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleStateTagManagerComponent::HandleWorldBonusSpeedStackLost(const struct FGameplayTag& Source, int32 Stacks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWorldBonusSpeedStackLost");

	Params::DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost Parms{};

	Parms.Source = std::move(Source);
	Parms.Stacks = Stacks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleAnyWheelsOnGroundChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TScriptInterface<class IDelMarVehicleInterface>Vehicle                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWheelsOnGround                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleAnyWheelsOnGroundChanged(const TScriptInterface<class IDelMarVehicleInterface>& Vehicle, bool bWheelsOnGround)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleAnyWheelsOnGroundChanged");

	Params::DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged Parms{};

	Parms.Vehicle = Vehicle;
	Parms.bWheelsOnGround = bWheelsOnGround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleDraftActivated
// (Final, Native, Protected)

void UDelMarVehicleVerbComponent::HandleDraftActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDraftActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleDriftBoostActivated
// (Final, Native, Protected)

void UDelMarVehicleVerbComponent::HandleDriftBoostActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftBoostActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleDriftBoostDeactivated
// (Final, Native, Protected)

void UDelMarVehicleVerbComponent::HandleDriftBoostDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftBoostDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleDriftDeactivated
// (Final, Native, Protected)

void UDelMarVehicleVerbComponent::HandleDriftDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleDriftDurationChanged
// (Final, Native, Protected)
// Parameters:
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleDriftDurationChanged(float duration)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleDriftDurationChanged");

	Params::DelMarVehicleVerbComponent_HandleDriftDurationChanged Parms{};

	Parms.duration = duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleJumpActivated
// (Final, Native, Protected)

void UDelMarVehicleVerbComponent::HandleJumpActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleJumpActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleKickflipped
// (Final, Native, Protected)
// Parameters:
// bool                                    bLeft                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleKickflipped(bool bLeft)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleKickflipped");

	Params::DelMarVehicleVerbComponent_HandleKickflipped Parms{};

	Parms.bLeft = bLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandlePotentialDriftBoostChanged
// (Final, Native, Protected)
// Parameters:
// float                                   Percent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandlePotentialDriftBoostChanged(float Percent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePotentialDriftBoostChanged");

	Params::DelMarVehicleVerbComponent_HandlePotentialDriftBoostChanged Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleSpeedometerSpeedChanged
// (Final, Native, Protected)
// Parameters:
// float                                   UpdatedSpeedometerSpeed                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleSpeedometerSpeedChanged(float UpdatedSpeedometerSpeed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleSpeedometerSpeedChanged");

	Params::DelMarVehicleVerbComponent_HandleSpeedometerSpeedChanged Parms{};

	Parms.UpdatedSpeedometerSpeed = UpdatedSpeedometerSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleStartlineBoostActivated
// (Final, Native, Protected)
// Parameters:
// float                                   BoostPercent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleStartlineBoostActivated(float BoostPercent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleStartlineBoostActivated");

	Params::DelMarVehicleVerbComponent_HandleStartlineBoostActivated Parms{};

	Parms.BoostPercent = BoostPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleTurboBonusZoneChanged
// (Final, Native, Protected)
// Parameters:
// EDelMarTurboZoneState                   BonusZoneState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleTurboBonusZoneChanged(EDelMarTurboZoneState BonusZoneState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTurboBonusZoneChanged");

	Params::DelMarVehicleVerbComponent_HandleTurboBonusZoneChanged Parms{};

	Parms.BonusZoneState = BonusZoneState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleTurboChargeUsed
// (Final, Native, Protected)

void UDelMarVehicleVerbComponent::HandleTurboChargeUsed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTurboChargeUsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleUnderthrustDeactivated
// (Final, Native, Protected)

void UDelMarVehicleVerbComponent::HandleUnderthrustDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleUnderthrustDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleUnderthrustPercentChanged
// (Final, Native, Protected)
// Parameters:
// float                                   PercentageUnderthrustRemaining                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleUnderthrustPercentChanged(float PercentageUnderthrustRemaining)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleUnderthrustPercentChanged");

	Params::DelMarVehicleVerbComponent_HandleUnderthrustPercentChanged Parms{};

	Parms.PercentageUnderthrustRemaining = PercentageUnderthrustRemaining;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleVehicleLanded
// (Final, Native, Protected)
// Parameters:
// float                                   LandingForce                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLandedKickflip                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleVehicleLanded(float LandingForce, bool bLandedKickflip)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleLanded");

	Params::DelMarVehicleVerbComponent_HandleVehicleLanded Parms{};

	Parms.LandingForce = LandingForce;
	Parms.bLandedKickflip = bLandedKickflip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleWorldBonusSpeedStackGained
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleWorldBonusSpeedStackGained(const struct FGameplayTag& Source, int32 Stacks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWorldBonusSpeedStackGained");

	Params::DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained Parms{};

	Parms.Source = std::move(Source);
	Parms.Stacks = Stacks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleVerbComponent.HandleWorldBonusSpeedStackLost
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleVerbComponent::HandleWorldBonusSpeedStackLost(const struct FGameplayTag& Source, int32 Stacks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWorldBonusSpeedStackLost");

	Params::DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost Parms{};

	Parms.Source = std::move(Source);
	Parms.Stacks = Stacks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarAudioComponentGroup.GetMixModifiers
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarAudioMixModifierExtension* ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarAudioMixModifierExtension* UDelMarAudioComponentGroup::GetMixModifiers() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMixModifiers");

	Params::DelMarAudioComponentGroup_GetMixModifiers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarAudioComponentGroup.GetSubmixSends
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarSubmixSendExtension*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarSubmixSendExtension* UDelMarAudioComponentGroup::GetSubmixSends() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSubmixSends");

	Params::DelMarAudioComponentGroup_GetSubmixSends Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarAudioController.HandleVehicleDemolished
// (Final, Native, Public)
// Parameters:
// struct FGameplayTag                     CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarAudioController::HandleVehicleDemolished(const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleDemolished");

	Params::DelMarAudioController_HandleVehicleDemolished Parms{};

	Parms.CausedByTag = std::move(CausedByTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarAudioController.PlaySound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFadeInTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTargetVolume                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDisableAttenuation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAudioFaderCurve                        InFadeCurve                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* ADelMarAudioController::PlaySound(class USoundBase* sound, float InFadeInTime, float InTargetVolume, bool bDisableAttenuation, const EAudioFaderCurve InFadeCurve)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlaySound");

	Params::DelMarAudioController_PlaySound Parms{};

	Parms.sound = sound;
	Parms.InFadeInTime = InFadeInTime;
	Parms.InTargetVolume = InTargetVolume;
	Parms.bDisableAttenuation = bDisableAttenuation;
	Parms.InFadeCurve = InFadeCurve;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarAudioController.GetComponentGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDelMarAudioComponentGroup*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDelMarAudioComponentGroup* ADelMarAudioController::GetComponentGroup() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetComponentGroup");

	Params::DelMarAudioController_GetComponentGroup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarAudioController.IsVirtualized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarAudioController::IsVirtualized() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsVirtualized");

	Params::DelMarAudioController_IsVirtualized Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarAudioMixModifierExtension.AddMixGroup
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAudioMixModifierGroup           InMixModifier                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarAudioMixModifierExtension::AddMixGroup(const struct FAudioMixModifierGroup& InMixModifier)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddMixGroup");

	Params::DelMarAudioMixModifierExtension_AddMixGroup Parms{};

	Parms.InMixModifier = std::move(InMixModifier);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarAudioMixModifierExtension.RemoveMixGroup
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAudioMixModifierGroup           InMixModifier                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarAudioMixModifierExtension::RemoveMixGroup(const struct FAudioMixModifierGroup& InMixModifier)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveMixGroup");

	Params::DelMarAudioMixModifierExtension_RemoveMixGroup Parms{};

	Parms.InMixModifier = std::move(InMixModifier);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarAudioMixModifierExtension.RemoveMixGroupByName
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InName                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarAudioMixModifierExtension::RemoveMixGroupByName(const class FName InName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveMixGroupByName");

	Params::DelMarAudioMixModifierExtension_RemoveMixGroupByName Parms{};

	Parms.InName = InName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarSubmixSendExtension.RemoveSend
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class USoundSubmixBase*                 InSubmix                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarSubmixSendExtension::RemoveSend(class USoundSubmixBase* InSubmix)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveSend");

	Params::DelMarSubmixSendExtension_RemoveSend Parms{};

	Parms.InSubmix = InSubmix;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarSubmixSendExtension.SetSend
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class USoundSubmixBase*                 InSubmix                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InLevel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrackCount                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarSubmixSendExtension::SetSend(class USoundSubmixBase* InSubmix, const float InLevel, const bool bTrackCount)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSend");

	Params::DelMarSubmixSendExtension_SetSend Parms{};

	Parms.InSubmix = InSubmix;
	Parms.InLevel = InLevel;
	Parms.bTrackCount = bTrackCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarNuxBlueprintFunctionLibrary.GetCurrentLapNumber
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ADelMarVehicle*                   Vehicle                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDelMarNuxBlueprintFunctionLibrary::GetCurrentLapNumber(const class ADelMarVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetCurrentLapNumber");

	Params::DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber Parms{};

	Parms.Vehicle = Vehicle;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarNuxBlueprintFunctionLibrary.GetCurrentRankedInfoForVehicle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ADelMarVehicle*                   Vehicle                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDelMarRankedInfo                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDelMarRankedInfo UDelMarNuxBlueprintFunctionLibrary::GetCurrentRankedInfoForVehicle(const class ADelMarVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetCurrentRankedInfoForVehicle");

	Params::DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle Parms{};

	Parms.Vehicle = Vehicle;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarCheckpoint.BP_ActivateRift
// (Event, Public, BlueprintEvent)

void ADelMarCheckpoint::BP_ActivateRift()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_ActivateRift");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheckpoint.BP_DeactivateRift
// (Event, Public, BlueprintEvent)

void ADelMarCheckpoint::BP_DeactivateRift()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_DeactivateRift");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheckpoint.BP_FirstPlaceChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bValidPrevFirstPlace                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCheckpoint::BP_FirstPlaceChanged(bool bValidPrevFirstPlace)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_FirstPlaceChanged");

	Params::DelMarCheckpoint_BP_FirstPlaceChanged Parms{};

	Parms.bValidPrevFirstPlace = bValidPrevFirstPlace;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheckpoint.BP_LapFinished
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   CompletedLap                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentLap                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalLaps                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCheckpoint::BP_LapFinished(int32 CompletedLap, int32 CurrentLap, int32 TotalLaps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_LapFinished");

	Params::DelMarCheckpoint_BP_LapFinished Parms{};

	Parms.CompletedLap = CompletedLap;
	Parms.CurrentLap = CurrentLap;
	Parms.TotalLaps = TotalLaps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheckpoint.BP_RaceFinished
// (Event, Public, BlueprintEvent)

void ADelMarCheckpoint::BP_RaceFinished()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_RaceFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheckpoint.BP_RaceReset
// (Event, Public, BlueprintEvent)

void ADelMarCheckpoint::BP_RaceReset()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_RaceReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheckpoint.ClientSetCheckpointActive
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentLap                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalLaps                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCheckpoint::ClientSetCheckpointActive(int32 CurrentLap, int32 TotalLaps)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientSetCheckpointActive");

	Params::DelMarCheckpoint_ClientSetCheckpointActive Parms{};

	Parms.CurrentLap = CurrentLap;
	Parms.TotalLaps = TotalLaps;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheckpoint.ClientSetCheckpointInactive
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ADelMarCheckpoint::ClientSetCheckpointInactive()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientSetCheckpointInactive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheckpoint.HandlePawnEnteredVehicle
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TScriptInterface<class IFortVehicleInterface>Vehicle                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPawn*                        Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SeatIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCheckpoint::HandlePawnEnteredVehicle(const TScriptInterface<class IFortVehicleInterface>& Vehicle, class AFortPawn* Pawn, int32 SeatIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandlePawnEnteredVehicle");

	Params::DelMarCheckpoint_HandlePawnEnteredVehicle Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Pawn = Pawn;
	Parms.SeatIndex = SeatIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheckpoint.OnTriggered
// (Native, Public, BlueprintCallable)
// Parameters:
// class ADelMarVehicle*                   InDelMarVehicle                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCheckpoint::OnTriggered(class ADelMarVehicle* InDelMarVehicle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTriggered");

	Params::DelMarCheckpoint_OnTriggered Parms{};

	Parms.InDelMarVehicle = InDelMarVehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheckpoint.UpdateCheckpointMesh
// (Event, Protected, BlueprintEvent)
// Parameters:
// EDelMarCheckpointMeshType               MeshType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCheckpoint::UpdateCheckpointMesh(EDelMarCheckpointMeshType MeshType)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateCheckpointMesh");

	Params::DelMarCheckpoint_UpdateCheckpointMesh Parms{};

	Parms.MeshType = MeshType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheckpoint.GetCheckpointMeshType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDelMarCheckpointMeshType               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDelMarCheckpointMeshType ADelMarCheckpoint::GetCheckpointMeshType() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCheckpointMeshType");

	Params::DelMarCheckpoint_GetCheckpointMeshType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarCheckpoint.GetFurthestAheadTrackDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FCheckpointTrackDistance   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FCheckpointTrackDistance ADelMarCheckpoint::GetFurthestAheadTrackDistance() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFurthestAheadTrackDistance");

	Params::DelMarCheckpoint_GetFurthestAheadTrackDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarCheckpoint.GetFurthestBehindTrackDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FCheckpointTrackDistance   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FCheckpointTrackDistance ADelMarCheckpoint::GetFurthestBehindTrackDistance() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFurthestBehindTrackDistance");

	Params::DelMarCheckpoint_GetFurthestBehindTrackDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarCheckpoint.GetNearestTrackData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FCheckpointTrackDistance   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FCheckpointTrackDistance ADelMarCheckpoint::GetNearestTrackData() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNearestTrackData");

	Params::DelMarCheckpoint_GetNearestTrackData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarCheckpoint.GetSpawnTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform ADelMarCheckpoint::GetSpawnTransform() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSpawnTransform");

	Params::DelMarCheckpoint_GetSpawnTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarCheckpoint.GetTrackDistanceDataForTrack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADelMarTrackBase*                 InTrack                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnsureAssociated                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCheckpointTrackDistance   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FCheckpointTrackDistance ADelMarCheckpoint::GetTrackDistanceDataForTrack(const class ADelMarTrackBase* InTrack, const bool bEnsureAssociated) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTrackDistanceDataForTrack");

	Params::DelMarCheckpoint_GetTrackDistanceDataForTrack Parms{};

	Parms.InTrack = InTrack;
	Parms.bEnsureAssociated = bEnsureAssociated;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarCheckpoint.IsAssociatedWithTrack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADelMarTrackBase*                 InTrack                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarCheckpoint::IsAssociatedWithTrack(const class ADelMarTrackBase* InTrack) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsAssociatedWithTrack");

	Params::DelMarCheckpoint_IsAssociatedWithTrack Parms{};

	Parms.InTrack = InTrack;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.AreAllLeaderboardFiltersEnabled
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarBlueprintLibrary::AreAllLeaderboardFiltersEnabled()
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("AreAllLeaderboardFiltersEnabled");

	Params::DelMarBlueprintLibrary_AreAllLeaderboardFiltersEnabled Parms{};

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.BP_KillAndRespawnVehicle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AController*                      Controller                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarBlueprintLibrary::BP_KillAndRespawnVehicle(const class AController* Controller, const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("BP_KillAndRespawnVehicle");

	Params::DelMarBlueprintLibrary_BP_KillAndRespawnVehicle Parms{};

	Parms.Controller = Controller;
	Parms.CausedByTag = std::move(CausedByTag);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.DelMarFormatTime
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  TimeSeconds                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeMilliseconds                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UDelMarBlueprintLibrary::DelMarFormatTime(const double TimeSeconds, const bool bIncludeMilliseconds)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("DelMarFormatTime");

	Params::DelMarBlueprintLibrary_DelMarFormatTime Parms{};

	Parms.TimeSeconds = TimeSeconds;
	Parms.bIncludeMilliseconds = bIncludeMilliseconds;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.GetClientWorldTimeSeconds
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UDelMarBlueprintLibrary::GetClientWorldTimeSeconds(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetClientWorldTimeSeconds");

	Params::DelMarBlueprintLibrary_GetClientWorldTimeSeconds Parms{};

	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.GetDelMarPlayspace
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADelMarPlayspace*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADelMarPlayspace* UDelMarBlueprintLibrary::GetDelMarPlayspace(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetDelMarPlayspace");

	Params::DelMarBlueprintLibrary_GetDelMarPlayspace Parms{};

	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.GetDelMarVehicle
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADelMarVehicle*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADelMarVehicle* UDelMarBlueprintLibrary::GetDelMarVehicle(const class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetDelMarVehicle");

	Params::DelMarBlueprintLibrary_GetDelMarVehicle Parms{};

	Parms.PlayerController = PlayerController;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.GetNetModel
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDelMarNetModel                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDelMarNetModel UDelMarBlueprintLibrary::GetNetModel(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetNetModel");

	Params::DelMarBlueprintLibrary_GetNetModel Parms{};

	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.GetPrimaryPlayerController
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerController*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFortPlayerController* UDelMarBlueprintLibrary::GetPrimaryPlayerController(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetPrimaryPlayerController");

	Params::DelMarBlueprintLibrary_GetPrimaryPlayerController Parms{};

	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.GetPrimaryPlayerState
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerState*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFortPlayerState* UDelMarBlueprintLibrary::GetPrimaryPlayerState(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetPrimaryPlayerState");

	Params::DelMarBlueprintLibrary_GetPrimaryPlayerState Parms{};

	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.GetTimerDeltaFromServerTime
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  TimestampSeconds                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDelMarTimerDirection                   Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCapAtZero                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPositive                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UDelMarBlueprintLibrary::GetTimerDeltaFromServerTime(const double TimestampSeconds, const EDelMarTimerDirection Direction, const bool bCapAtZero, bool* bIsPositive, const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetTimerDeltaFromServerTime");

	Params::DelMarBlueprintLibrary_GetTimerDeltaFromServerTime Parms{};

	Parms.TimestampSeconds = TimestampSeconds;
	Parms.Direction = Direction;
	Parms.bCapAtZero = bCapAtZero;
	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	if (bIsPositive != nullptr)
		*bIsPositive = Parms.bIsPositive;

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.IsDelMarExperience
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bEnableCaching                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarBlueprintLibrary::IsDelMarExperience(bool bEnableCaching)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("IsDelMarExperience");

	Params::DelMarBlueprintLibrary_IsDelMarExperience Parms{};

	Parms.bEnableCaching = bEnableCaching;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarBlueprintLibrary.SetDelMarControlsText
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDelMarEvent_SetControlsText     Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarBlueprintLibrary::SetDelMarControlsText(const class APlayerController* PlayerController, const struct FDelMarEvent_SetControlsText& Event)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("SetDelMarControlsText");

	Params::DelMarBlueprintLibrary_SetDelMarControlsText Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Event = std::move(Event);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarBlueprintLibrary.SetDelMarTutorialHint
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDelMarEvent_SetTutorialHint     Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarBlueprintLibrary::SetDelMarTutorialHint(const class APlayerController* PlayerController, const struct FDelMarEvent_SetTutorialHint& Event)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("SetDelMarTutorialHint");

	Params::DelMarBlueprintLibrary_SetDelMarTutorialHint Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Event = std::move(Event);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarCancelMissedCheckpointDemoCountdown
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarCancelMissedCheckpointDemoCountdown()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarCancelMissedCheckpointDemoCountdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarCancelReturnToTrackDemoCountdown
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarCancelReturnToTrackDemoCountdown()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarCancelReturnToTrackDemoCountdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarClearActiveAutoInput
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarClearActiveAutoInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarClearActiveAutoInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarClearQueuedAutoInput
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarClearQueuedAutoInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarClearQueuedAutoInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarDemolishSelf
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarDemolishSelf()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarDemolishSelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarDemolishSelfWithTag
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// class FString                           DemolishTagString                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarDemolishSelfWithTag(const class FString& DemolishTagString)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarDemolishSelfWithTag");

	Params::DelMarCheatManager_DelMarDemolishSelfWithTag Parms{};

	Parms.DemolishTagString = std::move(DemolishTagString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarEndSpectate
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarEndSpectate()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarEndSpectate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarExitVehicle
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarExitVehicle()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarExitVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarFetchFocusedLeaderboard
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarFetchFocusedLeaderboard()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarFetchFocusedLeaderboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarFetchFriendsLeaderboard
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarFetchFriendsLeaderboard()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarFetchFriendsLeaderboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarFetchGlobalLeaderboard
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarFetchGlobalLeaderboard()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarFetchGlobalLeaderboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarFinishRace
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarFinishRace()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarFinishRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarFinishRaceSelf
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarFinishRaceSelf()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarFinishRaceSelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarForceEveryoneToReadyUp
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarForceEveryoneToReadyUp()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarForceEveryoneToReadyUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarForceLoadLevel
// (Final, Exec, Native, Protected)
// Parameters:
// class FString                           LevelName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarForceLoadLevel(const class FString& LevelName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarForceLoadLevel");

	Params::DelMarCheatManager_DelMarForceLoadLevel Parms{};

	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarForceLoadUEFNIsland
// (Final, Exec, Native, Protected)
// Parameters:
// class FString                           IslandCode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarForceLoadUEFNIsland(const class FString& IslandCode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarForceLoadUEFNIsland");

	Params::DelMarCheatManager_DelMarForceLoadUEFNIsland Parms{};

	Parms.IslandCode = std::move(IslandCode);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarGhostClearPlaybackFile
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarGhostClearPlaybackFile()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGhostClearPlaybackFile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarGhostForcePlayAllTriggers
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarGhostForcePlayAllTriggers()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGhostForcePlayAllTriggers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarGhostSetRecordOffPhysics
// (Final, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarGhostSetRecordOffPhysics(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGhostSetRecordOffPhysics");

	Params::DelMarCheatManager_DelMarGhostSetRecordOffPhysics Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarGhostSetReplayEnabled
// (Final, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarGhostSetReplayEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGhostSetReplayEnabled");

	Params::DelMarCheatManager_DelMarGhostSetReplayEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarGhostStartPlayerPlayback
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarGhostStartPlayerPlayback()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGhostStartPlayerPlayback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarGhostStartPlayerRecording
// (Final, Exec, Native, Protected)
// Parameters:
// class FString                           SaveFileName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSaveToFile                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarGhostStartPlayerRecording(const class FString& SaveFileName, bool bSaveToFile)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGhostStartPlayerRecording");

	Params::DelMarCheatManager_DelMarGhostStartPlayerRecording Parms{};

	Parms.SaveFileName = std::move(SaveFileName);
	Parms.bSaveToFile = bSaveToFile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarGhostStopPlayerRecording
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarGhostStopPlayerRecording()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGhostStopPlayerRecording");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarGiveSelfSomeCompetitiveMMRStats
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// int32                                   MyPosition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalNumberOfPlayers                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfTimesToSendMMRUpdate                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarGiveSelfSomeCompetitiveMMRStats(const int32 MyPosition, const int32 TotalNumberOfPlayers, const int32 NumberOfTimesToSendMMRUpdate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGiveSelfSomeCompetitiveMMRStats");

	Params::DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats Parms{};

	Parms.MyPosition = MyPosition;
	Parms.TotalNumberOfPlayers = TotalNumberOfPlayers;
	Parms.NumberOfTimesToSendMMRUpdate = NumberOfTimesToSendMMRUpdate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarGrantQuestsInDir
// (Final, Exec, Native, Protected)
// Parameters:
// class FString                           Dir                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarGrantQuestsInDir(const class FString& Dir)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGrantQuestsInDir");

	Params::DelMarCheatManager_DelMarGrantQuestsInDir Parms{};

	Parms.Dir = std::move(Dir);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarGrantTurboCharges
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGrantToEveryone                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarGrantTurboCharges(const float Amount, const bool bGrantToEveryone)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarGrantTurboCharges");

	Params::DelMarCheatManager_DelMarGrantTurboCharges Parms{};

	Parms.Amount = Amount;
	Parms.bGrantToEveryone = bGrantToEveryone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarInitiateMissedCheckpointDemoCountdown
// (Final, Exec, Native, Protected)
// Parameters:
// float                                   SecondsUntilDemo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarInitiateMissedCheckpointDemoCountdown(float SecondsUntilDemo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarInitiateMissedCheckpointDemoCountdown");

	Params::DelMarCheatManager_DelMarInitiateMissedCheckpointDemoCountdown Parms{};

	Parms.SecondsUntilDemo = SecondsUntilDemo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarInitiateReturnToTrackDemoCountdown
// (Final, Exec, Native, Protected)
// Parameters:
// float                                   SecondsUntilDemo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarInitiateReturnToTrackDemoCountdown(float SecondsUntilDemo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarInitiateReturnToTrackDemoCountdown");

	Params::DelMarCheatManager_DelMarInitiateReturnToTrackDemoCountdown Parms{};

	Parms.SecondsUntilDemo = SecondsUntilDemo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarNextTutorialSection
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarNextTutorialSection()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarNextTutorialSection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarPauseAllBots
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarPauseAllBots()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarPauseAllBots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarPrevTutorialSection
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarPrevTutorialSection()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarPrevTutorialSection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarPrintLogsToDiagnoseSpinout
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarPrintLogsToDiagnoseSpinout()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarPrintLogsToDiagnoseSpinout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarPrintQuestProgress
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarPrintQuestProgress()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarPrintQuestProgress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarQueueAutoInputDriveThenTurn
// (Final, Exec, Native, Protected)
// Parameters:
// int32                                   Repeat                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Throttle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StraightDuration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Steer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TurnDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarQueueAutoInputDriveThenTurn(int32 Repeat, float Throttle, float StraightDuration, float Steer, float TurnDuration)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarQueueAutoInputDriveThenTurn");

	Params::DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn Parms{};

	Parms.Repeat = Repeat;
	Parms.Throttle = Throttle;
	Parms.StraightDuration = StraightDuration;
	Parms.Steer = Steer;
	Parms.TurnDuration = TurnDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarQueueAutoInputJump
// (Final, Exec, Native, Protected)
// Parameters:
// int32                                   Repeat                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarQueueAutoInputJump(int32 Repeat, float Delay)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarQueueAutoInputJump");

	Params::DelMarCheatManager_DelMarQueueAutoInputJump Parms{};

	Parms.Repeat = Repeat;
	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarQueueAutoInputThrottle
// (Final, Exec, Native, Protected)
// Parameters:
// float                                   Throttle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarQueueAutoInputThrottle(float Throttle, float duration)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarQueueAutoInputThrottle");

	Params::DelMarCheatManager_DelMarQueueAutoInputThrottle Parms{};

	Parms.Throttle = Throttle;
	Parms.duration = duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarRemoveAllBots
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarRemoveAllBots()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarRemoveAllBots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarRemoveBotByName
// (Final, Exec, Native, Protected, HasOutParams)
// Parameters:
// class FString                           BotName                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarRemoveBotByName(class FString* BotName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarRemoveBotByName");

	Params::DelMarCheatManager_DelMarRemoveBotByName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BotName != nullptr)
		*BotName = std::move(Parms.BotName);
}


// Function DelMarCore.DelMarCheatManager.DelMarRemoveNumberOfBots
// (Final, Exec, Native, Protected)
// Parameters:
// int32                                   NumberOfBotsToRemove                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarRemoveNumberOfBots(int32 NumberOfBotsToRemove)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarRemoveNumberOfBots");

	Params::DelMarCheatManager_DelMarRemoveNumberOfBots Parms{};

	Parms.NumberOfBotsToRemove = NumberOfBotsToRemove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarRenamePlayers
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarRenamePlayers()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarRenamePlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarResetPreRaceViewTarget
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarResetPreRaceViewTarget()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarResetPreRaceViewTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarResetRace
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarResetRace()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarResetRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarResetTutorialSplines
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarResetTutorialSplines()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarResetTutorialSplines");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarRespawnAtLastCheckpoint
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarRespawnAtLastCheckpoint()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarRespawnAtLastCheckpoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarRespawnAtLastCheckpoint_ParallelPath
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarRespawnAtLastCheckpoint_ParallelPath()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarRespawnAtLastCheckpoint_ParallelPath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarResumeAllBots
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarResumeAllBots()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarResumeAllBots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarReturnToLobby
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarReturnToLobby()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarReturnToLobby");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetAirFreestyleEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetAirFreestyleEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetAirFreestyleEnabled");

	Params::DelMarCheatManager_DelMarSetAirFreestyleEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetCollisionDemosEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetCollisionDemosEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetCollisionDemosEnabled");

	Params::DelMarCheatManager_DelMarSetCollisionDemosEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetDemoModeEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetDemoModeEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetDemoModeEnabled");

	Params::DelMarCheatManager_DelMarSetDemoModeEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetDraftingEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetDraftingEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetDraftingEnabled");

	Params::DelMarCheatManager_DelMarSetDraftingEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetGlobalInputEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// class FString                           InputTag                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableInput                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetGlobalInputEnabled(const class FString& InputTag, const bool bEnableInput)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetGlobalInputEnabled");

	Params::DelMarCheatManager_DelMarSetGlobalInputEnabled Parms{};

	Parms.InputTag = std::move(InputTag);
	Parms.bEnableInput = bEnableInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetInfiniteUnderthrustEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetInfiniteUnderthrustEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetInfiniteUnderthrustEnabled");

	Params::DelMarCheatManager_DelMarSetInfiniteUnderthrustEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetInputMappingContextEnabled
// (Final, Exec, Native, Protected)
// Parameters:
// class FString                           InputTag                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableInput                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetInputMappingContextEnabled(const class FString& InputTag, const bool bEnableInput)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetInputMappingContextEnabled");

	Params::DelMarCheatManager_DelMarSetInputMappingContextEnabled Parms{};

	Parms.InputTag = std::move(InputTag);
	Parms.bEnableInput = bEnableInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetInvertSteerMethod
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// EDelMarInvertSteerMethod                InInvertSteerMethod                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetInvertSteerMethod(EDelMarInvertSteerMethod InInvertSteerMethod)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetInvertSteerMethod");

	Params::DelMarCheatManager_DelMarSetInvertSteerMethod Parms{};

	Parms.InInvertSteerMethod = InInvertSteerMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetLap
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// int32                                   LapNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetLap(int32 LapNum)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetLap");

	Params::DelMarCheatManager_DelMarSetLap Parms{};

	Parms.LapNum = LapNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetLapTotal
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// int32                                   NewTotal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetLapTotal(int32 NewTotal)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetLapTotal");

	Params::DelMarCheatManager_DelMarSetLapTotal Parms{};

	Parms.NewTotal = NewTotal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetLoadingScreenVisibility
// (Final, Exec, Native, Protected)
// Parameters:
// bool                                    bShouldBeVisible                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetLoadingScreenVisibility(bool bShouldBeVisible)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetLoadingScreenVisibility");

	Params::DelMarCheatManager_DelMarSetLoadingScreenVisibility Parms{};

	Parms.bShouldBeVisible = bShouldBeVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetReplicatedTagEnabledOnSelf
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// class FString                           InputTag                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetReplicatedTagEnabledOnSelf(const class FString& InputTag, const bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetReplicatedTagEnabledOnSelf");

	Params::DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf Parms{};

	Parms.InputTag = std::move(InputTag);
	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnCollisionProtectionEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRespawnCollisionProtectionEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRespawnCollisionProtectionEnabled");

	Params::DelMarCheatManager_DelMarSetRespawnCollisionProtectionEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnCollisionProtectionSeconds
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRespawnCollisionProtectionSeconds(float Seconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRespawnCollisionProtectionSeconds");

	Params::DelMarCheatManager_DelMarSetRespawnCollisionProtectionSeconds Parms{};

	Parms.Seconds = Seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnInvulnerabilityEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRespawnInvulnerabilityEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRespawnInvulnerabilityEnabled");

	Params::DelMarCheatManager_DelMarSetRespawnInvulnerabilityEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnInvulnerabilitySeconds
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRespawnInvulnerabilitySeconds(float Seconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRespawnInvulnerabilitySeconds");

	Params::DelMarCheatManager_DelMarSetRespawnInvulnerabilitySeconds Parms{};

	Parms.Seconds = Seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnTracesEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRespawnTracesEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRespawnTracesEnabled");

	Params::DelMarCheatManager_DelMarSetRespawnTracesEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingEnabled");

	Params::DelMarCheatManager_DelMarSetRubberbandingEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxBonusSpeedScalar
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   InMaxBonusSpeedScalar                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingMaxBonusSpeedScalar(float InMaxBonusSpeedScalar)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingMaxBonusSpeedScalar");

	Params::DelMarCheatManager_DelMarSetRubberbandingMaxBonusSpeedScalar Parms{};

	Parms.InMaxBonusSpeedScalar = InMaxBonusSpeedScalar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxDistanceFromPack
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   InMaxDistanceFromPack                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingMaxDistanceFromPack(float InMaxDistanceFromPack)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingMaxDistanceFromPack");

	Params::DelMarCheatManager_DelMarSetRubberbandingMaxDistanceFromPack Parms{};

	Parms.InMaxDistanceFromPack = InMaxDistanceFromPack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxPackDistance
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   InMaxPackDistance                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingMaxPackDistance(float InMaxPackDistance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingMaxPackDistance");

	Params::DelMarCheatManager_DelMarSetRubberbandingMaxPackDistance Parms{};

	Parms.InMaxPackDistance = InMaxPackDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxPackDistanceGainedPerSecond
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   InMaxPackDistanceGainedPerSecond                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingMaxPackDistanceGainedPerSecond(float InMaxPackDistanceGainedPerSecond)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingMaxPackDistanceGainedPerSecond");

	Params::DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceGainedPerSecond Parms{};

	Parms.InMaxPackDistanceGainedPerSecond = InMaxPackDistanceGainedPerSecond;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxPackDistanceLostPerSecond
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   InMaxPackDistanceLostPerSecond                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingMaxPackDistanceLostPerSecond(float InMaxPackDistanceLostPerSecond)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingMaxPackDistanceLostPerSecond");

	Params::DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceLostPerSecond Parms{};

	Parms.InMaxPackDistanceLostPerSecond = InMaxPackDistanceLostPerSecond;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMinDistanceFromPack
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   InMinDistanceFromPack                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingMinDistanceFromPack(float InMinDistanceFromPack)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingMinDistanceFromPack");

	Params::DelMarCheatManager_DelMarSetRubberbandingMinDistanceFromPack Parms{};

	Parms.InMinDistanceFromPack = InMinDistanceFromPack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMinPackDistance
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   InMinPackDistance                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingMinPackDistance(float InMinPackDistance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingMinPackDistance");

	Params::DelMarCheatManager_DelMarSetRubberbandingMinPackDistance Parms{};

	Parms.InMinPackDistance = InMinPackDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMMR
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// int32                                   InMMR                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingMMR(int32 InMMR)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingMMR");

	Params::DelMarCheatManager_DelMarSetRubberbandingMMR Parms{};

	Parms.InMMR = InMMR;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingNumPlayersForPackDistance
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// int32                                   InNumPlayersForPackDistance                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetRubberbandingNumPlayersForPackDistance(int32 InNumPlayersForPackDistance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetRubberbandingNumPlayersForPackDistance");

	Params::DelMarCheatManager_DelMarSetRubberbandingNumPlayersForPackDistance Parms{};

	Parms.InNumPlayersForPackDistance = InNumPlayersForPackDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetSpawnMode
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// EDelMarRaceSpawnMode                    SpawnMode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetSpawnMode(EDelMarRaceSpawnMode SpawnMode)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetSpawnMode");

	Params::DelMarCheatManager_DelMarSetSpawnMode Parms{};

	Parms.SpawnMode = SpawnMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetStartlineBoostEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetStartlineBoostEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetStartlineBoostEnabled");

	Params::DelMarCheatManager_DelMarSetStartlineBoostEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetStrafeEnabled
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetStrafeEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetStrafeEnabled");

	Params::DelMarCheatManager_DelMarSetStrafeEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetTurboCharges
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// float                                   Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGrantToEveryone                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetTurboCharges(const float Amount, const bool bGrantToEveryone)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetTurboCharges");

	Params::DelMarCheatManager_DelMarSetTurboCharges Parms{};

	Parms.Amount = Amount;
	Parms.bGrantToEveryone = bGrantToEveryone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetTutorialSection
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetTutorialSection(int32 Index_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetTutorialSection");

	Params::DelMarCheatManager_DelMarSetTutorialSection Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetVehicleCollisionsOverrideForSelf
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// EDelMarVehicleCollisionOverrideSetting  NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetVehicleCollisionsOverrideForSelf(EDelMarVehicleCollisionOverrideSetting NewValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetVehicleCollisionsOverrideForSelf");

	Params::DelMarCheatManager_DelMarSetVehicleCollisionsOverrideForSelf Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetVehicleCollisionsOverrideGlobal
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// EDelMarVehicleCollisionOverrideSetting  NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetVehicleCollisionsOverrideGlobal(EDelMarVehicleCollisionOverrideSetting NewValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetVehicleCollisionsOverrideGlobal");

	Params::DelMarCheatManager_DelMarSetVehicleCollisionsOverrideGlobal Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSetVerticalKickflipInverted
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)
// Parameters:
// bool                                    InbVerticalKickflipInverted                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSetVerticalKickflipInverted(bool InbVerticalKickflipInverted)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSetVerticalKickflipInverted");

	Params::DelMarCheatManager_DelMarSetVerticalKickflipInverted Parms{};

	Parms.InbVerticalKickflipInverted = InbVerticalKickflipInverted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSkipWaitingForPlayers
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarSkipWaitingForPlayers()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSkipWaitingForPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarSpawnBots
// (Final, Exec, Native, Protected)
// Parameters:
// int32                                   NumberOfBotsToSpawn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSpawnBots(int32 NumberOfBotsToSpawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSpawnBots");

	Params::DelMarCheatManager_DelMarSpawnBots Parms{};

	Parms.NumberOfBotsToSpawn = NumberOfBotsToSpawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSpawnBotsAtSkillLevel
// (Final, Exec, Native, Protected)
// Parameters:
// int32                                   NumberOfBotsToSpawn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SkillLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarSpawnBotsAtSkillLevel(int32 NumberOfBotsToSpawn, int32 SkillLevel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSpawnBotsAtSkillLevel");

	Params::DelMarCheatManager_DelMarSpawnBotsAtSkillLevel Parms{};

	Parms.NumberOfBotsToSpawn = NumberOfBotsToSpawn;
	Parms.SkillLevel = SkillLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarSpawnVehicleForSelf
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarSpawnVehicleForSelf()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSpawnVehicleForSelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarSpectate
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarSpectate()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarSpectate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarStartFollowTrack
// (Final, Exec, Native, Protected)
// Parameters:
// float                                   Throttle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarStartFollowTrack(float Throttle)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarStartFollowTrack");

	Params::DelMarCheatManager_DelMarStartFollowTrack Parms{};

	Parms.Throttle = Throttle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarStartQueuedAutoInput
// (Final, Exec, Native, Protected)

void UDelMarCheatManager::DelMarStartQueuedAutoInput()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarStartQueuedAutoInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarStartRace
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected)

void UDelMarCheatManager::DelMarStartRace()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarStartRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarUsePredictiveInterpolation
// (Final, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEveryOther                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarUsePredictiveInterpolation(bool bEnabled, bool bEveryOther)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarUsePredictiveInterpolation");

	Params::DelMarCheatManager_DelMarUsePredictiveInterpolation Parms{};

	Parms.bEnabled = bEnabled;
	Parms.bEveryOther = bEveryOther;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheatManager.DelMarCreateTrackScrubberForProfiling
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected, Const)

void UDelMarCheatManager::DelMarCreateTrackScrubberForProfiling() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarCreateTrackScrubberForProfiling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarDestroyTrackScrubbers
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected, Const)

void UDelMarCheatManager::DelMarDestroyTrackScrubbers() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarDestroyTrackScrubbers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCheatManager.DelMarStartTrackScrubberWithViewTarget
// (Final, BlueprintAuthorityOnly, Exec, Native, Protected, Const)
// Parameters:
// bool                                    bRunCsvProfilerDuringScrub                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCheatManager::DelMarStartTrackScrubberWithViewTarget(bool bRunCsvProfilerDuringScrub) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DelMarStartTrackScrubberWithViewTarget");

	Params::DelMarCheatManager_DelMarStartTrackScrubberWithViewTarget Parms{};

	Parms.bRunCsvProfilerDuringScrub = bRunCsvProfilerDuringScrub;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarStateSequencerFXComponent.HandleCurrentStateChanged
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     NewState                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarStateSequencerFXComponent::HandleCurrentStateChanged(const struct FGameplayTag& NewState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleCurrentStateChanged");

	Params::DelMarStateSequencerFXComponent_HandleCurrentStateChanged Parms{};

	Parms.NewState = std::move(NewState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarStateSequencerFXComponent.HandleEnabledChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarStateSequencerFXComponent::HandleEnabledChanged(bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleEnabledChanged");

	Params::DelMarStateSequencerFXComponent_HandleEnabledChanged Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTimeDelayedStateSequencer.OnRep_bIsEnabled
// (Final, Native, Protected)

void ADelMarTimeDelayedStateSequencer::OnRep_bIsEnabled()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_bIsEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTimeDelayedStateSequencer.OnRep_CurrentStateIndex
// (Final, Native, Protected)

void ADelMarTimeDelayedStateSequencer::OnRep_CurrentStateIndex()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_CurrentStateIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTimeDelayedStateSequencer.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarTimeDelayedStateSequencer::SetEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnabled");

	Params::DelMarTimeDelayedStateSequencer_SetEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTimeDelayedStateSequencer.GetCurrentStateTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag ADelMarTimeDelayedStateSequencer::GetCurrentStateTag() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCurrentStateTag");

	Params::DelMarTimeDelayedStateSequencer_GetCurrentStateTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTimeDelayedStateSequencer.GetStateCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADelMarTimeDelayedStateSequencer::GetStateCount() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStateCount");

	Params::DelMarTimeDelayedStateSequencer_GetStateCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarTimeDelayedStateSequencer.GetStateTagAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag ADelMarTimeDelayedStateSequencer::GetStateTagAtIndex(const int32 Index_0) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetStateTagAtIndex");

	Params::DelMarTimeDelayedStateSequencer_GetStateTagAtIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarGhostVehicle.HandleVehicleCosmeticsFinished
// (Final, Native, Protected)

void ADelMarGhostVehicle::HandleVehicleCosmeticsFinished()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleCosmeticsFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarGlobalInputDisabler.SetGlobalInputsEnabled
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            InputTags                                              (Parm, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarGlobalInputDisabler::SetGlobalInputsEnabled(const struct FGameplayTagContainer& InputTags, const bool bEnable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGlobalInputsEnabled");

	Params::DelMarGlobalInputDisabler_SetGlobalInputsEnabled Parms{};

	Parms.InputTags = std::move(InputTags);
	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.ApplyCosmetic
// (Native, Public)

void ADelMarCosmeticActor::ApplyCosmetic()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyCosmetic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnAnyWheelsOnGroundChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TScriptInterface<class IDelMarVehicleInterface>VehicleRef                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnAnyWheelsOnGroundChanged(const TScriptInterface<class IDelMarVehicleInterface>& VehicleRef, bool bValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnAnyWheelsOnGroundChanged");

	Params::DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged Parms{};

	Parms.VehicleRef = VehicleRef;
	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnBonusSpeedActivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnBonusSpeedActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnBonusSpeedActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnBonusSpeedChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   BonusSpeed                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnBonusSpeedChanged(float BonusSpeed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnBonusSpeedChanged");

	Params::DelMarCosmeticActor_BP_OnBonusSpeedChanged Parms{};

	Parms.BonusSpeed = BonusSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnBonusSpeedDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnBonusSpeedDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnBonusSpeedDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnCosmeticApplied
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnCosmeticApplied()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnCosmeticApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDelMarAppliedTeleportRotation
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnDelMarAppliedTeleportRotation()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDelMarAppliedTeleportRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDelMarTeleportEntered
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnDelMarTeleportEntered()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDelMarTeleportEntered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDelMarTeleportExited
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnDelMarTeleportExited()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDelMarTeleportExited");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDelMarVehicleSpawned
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bFirstVehicleForPlayer                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPrevVehicleDemolished                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnDelMarVehicleSpawned(bool bFirstVehicleForPlayer, bool bPrevVehicleDemolished)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDelMarVehicleSpawned");

	Params::DelMarCosmeticActor_BP_OnDelMarVehicleSpawned Parms{};

	Parms.bFirstVehicleForPlayer = bFirstVehicleForPlayer;
	Parms.bPrevVehicleDemolished = bPrevVehicleDemolished;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDraftStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EDelmarDraftingState                    CurrentState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnDraftStateChanged(EDelmarDraftingState CurrentState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDraftStateChanged");

	Params::DelMarCosmeticActor_BP_OnDraftStateChanged Parms{};

	Parms.CurrentState = CurrentState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftActivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnDriftActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDriftActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftBoostActivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnDriftBoostActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDriftBoostActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftBoostDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnDriftBoostDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDriftBoostDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftControlChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsDriftingControlled                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnDriftControlChanged(bool bIsDriftingControlled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDriftControlChanged");

	Params::DelMarCosmeticActor_BP_OnDriftControlChanged Parms{};

	Parms.bIsDriftingControlled = bIsDriftingControlled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnDriftDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDriftDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftDurationChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnDriftDurationChanged(float duration)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDriftDurationChanged");

	Params::DelMarCosmeticActor_BP_OnDriftDurationChanged Parms{};

	Parms.duration = duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftKickActivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DriftDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDelMarVehicleDriftState                DriftState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnDriftKickActivated(float DriftDirection, EDelMarVehicleDriftState DriftState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDriftKickActivated");

	Params::DelMarCosmeticActor_BP_OnDriftKickActivated Parms{};

	Parms.DriftDirection = DriftDirection;
	Parms.DriftState = DriftState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftKickDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnDriftKickDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnDriftKickDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnInvulnerabilityActivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnInvulnerabilityActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnInvulnerabilityActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnInvulnerabilityDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnInvulnerabilityDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnInvulnerabilityDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnJumpActivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnJumpActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnJumpActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnJumpDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnJumpDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnJumpDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipActivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bLeftSide                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnKickflipActivated(bool bLeftSide)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnKickflipActivated");

	Params::DelMarCosmeticActor_BP_OnKickflipActivated Parms{};

	Parms.bLeftSide = bLeftSide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipActivationChargesChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   ActivationCharges                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnKickflipActivationChargesChanged(int32 ActivationCharges)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnKickflipActivationChargesChanged");

	Params::DelMarCosmeticActor_BP_OnKickflipActivationChargesChanged Parms{};

	Parms.ActivationCharges = ActivationCharges;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnKickflipDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnKickflipDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipDistanceToSuctionSurfaceChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnKickflipDistanceToSuctionSurfaceChanged(float Distance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnKickflipDistanceToSuctionSurfaceChanged");

	Params::DelMarCosmeticActor_BP_OnKickflipDistanceToSuctionSurfaceChanged Parms{};

	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipDurationChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnKickflipDurationChanged(float duration)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnKickflipDurationChanged");

	Params::DelMarCosmeticActor_BP_OnKickflipDurationChanged Parms{};

	Parms.duration = duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipSuctionActivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnKickflipSuctionActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnKickflipSuctionActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipSuctionDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnKickflipSuctionDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnKickflipSuctionDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnReachedMaxDraftBonusSpeed
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnReachedMaxDraftBonusSpeed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnReachedMaxDraftBonusSpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnReattachmentActivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnReattachmentActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnReattachmentActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnReattachmentDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnReattachmentDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnReattachmentDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnStartlineBoostActivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   PercentageMaxBonusSpeedEarned                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnStartlineBoostActivated(float PercentageMaxBonusSpeedEarned)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStartlineBoostActivated");

	Params::DelMarCosmeticActor_BP_OnStartlineBoostActivated Parms{};

	Parms.PercentageMaxBonusSpeedEarned = PercentageMaxBonusSpeedEarned;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnStartlineBoostDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnStartlineBoostDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStartlineBoostDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnStartlineBoostFailed
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnStartlineBoostFailed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStartlineBoostFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnStrafeActivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bLeftSide                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnStrafeActivated(bool bLeftSide)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStrafeActivated");

	Params::DelMarCosmeticActor_BP_OnStrafeActivated Parms{};

	Parms.bLeftSide = bLeftSide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnStrafeCooldownChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   CooldownPercentage                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnStrafeCooldownChanged(float CooldownPercentage)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStrafeCooldownChanged");

	Params::DelMarCosmeticActor_BP_OnStrafeCooldownChanged Parms{};

	Parms.CooldownPercentage = CooldownPercentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnStrafeDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnStrafeDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStrafeDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnStrafeDisabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bDisabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnStrafeDisabledChanged(bool bDisabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStrafeDisabledChanged");

	Params::DelMarCosmeticActor_BP_OnStrafeDisabledChanged Parms{};

	Parms.bDisabled = bDisabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnStrafeUsabilityChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCanActivate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnStrafeUsabilityChanged(bool bCanActivate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnStrafeUsabilityChanged");

	Params::DelMarCosmeticActor_BP_OnStrafeUsabilityChanged Parms{};

	Parms.bCanActivate = bCanActivate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnTurboActivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnTurboActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnTurboActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnTurboBonusStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EDelMarTurboZoneState                   NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnTurboBonusStateChanged(EDelMarTurboZoneState NewState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnTurboBonusStateChanged");

	Params::DelMarCosmeticActor_BP_OnTurboBonusStateChanged Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnTurboDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnTurboDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnTurboDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnUnderthrustActivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnUnderthrustActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnUnderthrustActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnUnderthrustDeactivated
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnUnderthrustDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnUnderthrustDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnVehicleDemolished
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnVehicleDemolished(const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnVehicleDemolished");

	Params::DelMarCosmeticActor_BP_OnVehicleDemolished Parms{};

	Parms.CausedByTag = std::move(CausedByTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnVehicleForwardStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EDelMarVehicleForwardState              NewForwardState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnVehicleForwardStateChanged(EDelMarVehicleForwardState NewForwardState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnVehicleForwardStateChanged");

	Params::DelMarCosmeticActor_BP_OnVehicleForwardStateChanged Parms{};

	Parms.NewForwardState = NewForwardState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnVehicleLanded
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   LandingForced                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLandedKickflip                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnVehicleLanded(float LandingForced, bool bLandedKickflip)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnVehicleLanded");

	Params::DelMarCosmeticActor_BP_OnVehicleLanded Parms{};

	Parms.LandingForced = LandingForced;
	Parms.bLandedKickflip = bLandedKickflip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnVehicleStartedSkydiving
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnVehicleStartedSkydiving()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnVehicleStartedSkydiving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnVehicleStoppedSkydiving
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnVehicleStoppedSkydiving()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnVehicleStoppedSkydiving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnVehicleWheelsLeftGround
// (Event, Protected, BlueprintEvent)

void ADelMarCosmeticActor::BP_OnVehicleWheelsLeftGround()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnVehicleWheelsLeftGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnWheelsOnGroundChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TScriptInterface<class IDelMarVehicleInterface>VehicleRef                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnWheelsOnGroundChanged(const TScriptInterface<class IDelMarVehicleInterface>& VehicleRef, bool bValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnWheelsOnGroundChanged");

	Params::DelMarCosmeticActor_BP_OnWheelsOnGroundChanged Parms{};

	Parms.VehicleRef = VehicleRef;
	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnWorldBonusSpeedStackGained
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnWorldBonusSpeedStackGained(const struct FGameplayTag& Source, int32 Stacks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnWorldBonusSpeedStackGained");

	Params::DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained Parms{};

	Parms.Source = std::move(Source);
	Parms.Stacks = Stacks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.BP_OnWorldBonusSpeedStackLost
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Source                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Stacks                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCosmeticActor::BP_OnWorldBonusSpeedStackLost(const struct FGameplayTag& Source, int32 Stacks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BP_OnWorldBonusSpeedStackLost");

	Params::DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost Parms{};

	Parms.Source = std::move(Source);
	Parms.Stacks = Stacks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCosmeticActor.GetBodyMeshComponent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ADelMarCosmeticActor::GetBodyMeshComponent() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetBodyMeshComponent");

	Params::DelMarCosmeticActor_GetBodyMeshComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarLeaderboardManager.OnRep_LeaderboardConfig
// (Final, Native, Private)

void UDelMarLeaderboardManager::OnRep_LeaderboardConfig()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_LeaderboardConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarMatchmakingComponent.ClientStartMatchmaking
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FOnlineLinkId                    LinkId                                                 (ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarMatchmakingComponent::ClientStartMatchmaking(const struct FOnlineLinkId& LinkId)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientStartMatchmaking");

	Params::DelMarMatchmakingComponent_ClientStartMatchmaking Parms{};

	Parms.LinkId = std::move(LinkId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarAsyncPhysicsTickMutator.TryToApplySolverOverrides
// (Final, Native, Protected)

void ADelMarAsyncPhysicsTickMutator::TryToApplySolverOverrides()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TryToApplySolverOverrides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCameraInputControllerComponent.HandleCameraSwivelDeadzoneChanged
// (Final, Native, Protected)

void UDelMarCameraInputControllerComponent::HandleCameraSwivelDeadzoneChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleCameraSwivelDeadzoneChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCameraInputControllerComponent.HandleInputSettingsChanged
// (Final, Native, Protected)

void UDelMarCameraInputControllerComponent::HandleInputSettingsChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleInputSettingsChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarContextualHintComponent.HandleVehicleDemolished
// (Final, Native, Private)
// Parameters:
// struct FGameplayTag                     CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarContextualHintComponent::HandleVehicleDemolished(const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleDemolished");

	Params::DelMarContextualHintComponent_HandleVehicleDemolished Parms{};

	Parms.CausedByTag = std::move(CausedByTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarContextualHintComponent.HandleVehicleHazardHit
// (Final, Native, Private)

void UDelMarContextualHintComponent::HandleVehicleHazardHit()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleVehicleHazardHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarLocalCheckpointVisibilityControllerComponent.HandleCheckpointPassed
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FDelMarEvent_CheckpointPassed_ParallelPathCheckpointEvent                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarLocalCheckpointVisibilityControllerComponent::HandleCheckpointPassed(const struct FDelMarEvent_CheckpointPassed_ParallelPath& CheckpointEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleCheckpointPassed");

	Params::DelMarLocalCheckpointVisibilityControllerComponent_HandleCheckpointPassed Parms{};

	Parms.CheckpointEvent = std::move(CheckpointEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarLocalCheckpointVisibilityControllerComponent.HandleLapComplete
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FDelMarEvent_LapComplete         LapEvent                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarLocalCheckpointVisibilityControllerComponent::HandleLapComplete(const struct FDelMarEvent_LapComplete& LapEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleLapComplete");

	Params::DelMarLocalCheckpointVisibilityControllerComponent_HandleLapComplete Parms{};

	Parms.LapEvent = std::move(LapEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarLocalCheckpointVisibilityControllerComponent.HandleViewTargetChanged
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerController*            PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OldViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarLocalCheckpointVisibilityControllerComponent::HandleViewTargetChanged(class AFortPlayerController* PlayerController, class AActor* OldViewTarget, class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleViewTargetChanged");

	Params::DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged Parms{};

	Parms.PlayerController = PlayerController;
	Parms.OldViewTarget = OldViewTarget;
	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarNetworkInputComponent.ServerSendInputs
// (Final, Net, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FDelMarNetworkInputPacket        InputPacket                                            (ConstParm, Parm, NativeAccessSpecifierPublic)

void UDelMarNetworkInputComponent::ServerSendInputs(const struct FDelMarNetworkInputPacket& InputPacket)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSendInputs");

	Params::DelMarNetworkInputComponent_ServerSendInputs Parms{};

	Parms.InputPacket = std::move(InputPacket);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerRaceDataComponent.GetNumViewingSpectator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDelMarPlayerRaceDataComponent::GetNumViewingSpectator()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetNumViewingSpectator");

	Params::DelMarPlayerRaceDataComponent_GetNumViewingSpectator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarPlayerRaceDataComponent.GetViewingSpectators
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> UDelMarPlayerRaceDataComponent::GetViewingSpectators()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetViewingSpectators");

	Params::DelMarPlayerRaceDataComponent_GetViewingSpectators Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_CheckpointPassed_ParallelPath
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDelMarEvent_CheckpointPassed_ParallelPathCheckpointEvent                                        (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarPlayerRaceDataComponent::NetMulticast_CheckpointPassed_ParallelPath(const struct FDelMarEvent_CheckpointPassed_ParallelPath& CheckpointEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_CheckpointPassed_ParallelPath");

	Params::DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassed_ParallelPath Parms{};

	Parms.CheckpointEvent = std::move(CheckpointEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_CheckpointPassedOutOfOrder_ParallelPath
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDelMarEvent_CheckpointPassedOutOfOrder_ParallelPathInCheckpointPassedOutOfOrderEvent                      (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarPlayerRaceDataComponent::NetMulticast_CheckpointPassedOutOfOrder_ParallelPath(const struct FDelMarEvent_CheckpointPassedOutOfOrder_ParallelPath& InCheckpointPassedOutOfOrderEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_CheckpointPassedOutOfOrder_ParallelPath");

	Params::DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassedOutOfOrder_ParallelPath Parms{};

	Parms.InCheckpointPassedOutOfOrderEvent = std::move(InCheckpointPassedOutOfOrderEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_LapCompleted
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDelMarEvent_LapComplete         InLapEvent                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarPlayerRaceDataComponent::NetMulticast_LapCompleted(const struct FDelMarEvent_LapComplete& InLapEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_LapCompleted");

	Params::DelMarPlayerRaceDataComponent_NetMulticast_LapCompleted Parms{};

	Parms.InLapEvent = std::move(InLapEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_RaceCompleted
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// double                                  RunTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValidRun                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerRaceDataComponent::NetMulticast_RaceCompleted(double RunTime, const bool bValidRun)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_RaceCompleted");

	Params::DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted Parms{};

	Parms.RunTime = RunTime;
	Parms.bValidRun = bValidRun;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_SectionCompleted_ParallelPath
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDelMarEvent_SectionComplete_ParallelPathInSectionEvent                                         (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarPlayerRaceDataComponent::NetMulticast_SectionCompleted_ParallelPath(const struct FDelMarEvent_SectionComplete_ParallelPath& InSectionEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_SectionCompleted_ParallelPath");

	Params::DelMarPlayerRaceDataComponent_NetMulticast_SectionCompleted_ParallelPath Parms{};

	Parms.InSectionEvent = std::move(InSectionEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_TeleportEntered
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDelMarEvent_TeleportEnteredEventInCheckpointTeleportingEvent                           (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarPlayerRaceDataComponent::NetMulticast_TeleportEntered(const struct FDelMarEvent_TeleportEnteredEvent& InCheckpointTeleportingEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_TeleportEntered");

	Params::DelMarPlayerRaceDataComponent_NetMulticast_TeleportEntered Parms{};

	Parms.InCheckpointTeleportingEvent = std::move(InCheckpointTeleportingEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerRaceDataComponent.OnRep_ViewingSpectators
// (Final, Native, Protected)

void UDelMarPlayerRaceDataComponent::OnRep_ViewingSpectators()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ViewingSpectators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.HandleAerialPitchActivationSettingChanged
// (Final, Native, Protected)

void UDelMarPlayerPreferencesComponent::HandleAerialPitchActivationSettingChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleAerialPitchActivationSettingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.HandleIconOnlyNameplatesSettingChanged
// (Final, Native, Protected)

void UDelMarPlayerPreferencesComponent::HandleIconOnlyNameplatesSettingChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleIconOnlyNameplatesSettingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.HandleInvertSteerSettingChanged
// (Final, Native, Protected)

void UDelMarPlayerPreferencesComponent::HandleInvertSteerSettingChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleInvertSteerSettingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.HandleLocalFortInputSettingsChanged
// (Final, Native, Protected)

void UDelMarPlayerPreferencesComponent::HandleLocalFortInputSettingsChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleLocalFortInputSettingsChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.HandleTouchControlsSettingsChanged
// (Final, Native, Protected)

void UDelMarPlayerPreferencesComponent::HandleTouchControlsSettingsChanged()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTouchControlsSettingsChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.ServerSetInvertSteerMethod
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// EDelMarInvertSteerMethod                InInvertSteerMethod                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerPreferencesComponent::ServerSetInvertSteerMethod(EDelMarInvertSteerMethod InInvertSteerMethod)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetInvertSteerMethod");

	Params::DelMarPlayerPreferencesComponent_ServerSetInvertSteerMethod Parms{};

	Parms.InInvertSteerMethod = InInvertSteerMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.ServerUpdateAerialPitchActivation
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bInAerialPitchActivationEnabled                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerPreferencesComponent::ServerUpdateAerialPitchActivation(const bool bInAerialPitchActivationEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerUpdateAerialPitchActivation");

	Params::DelMarPlayerPreferencesComponent_ServerUpdateAerialPitchActivation Parms{};

	Parms.bInAerialPitchActivationEnabled = bInAerialPitchActivationEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.ServerUpdatePitchInverted
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bInPitchInverted                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerPreferencesComponent::ServerUpdatePitchInverted(const bool bInPitchInverted)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerUpdatePitchInverted");

	Params::DelMarPlayerPreferencesComponent_ServerUpdatePitchInverted Parms{};

	Parms.bInPitchInverted = bInPitchInverted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.TryGetFortClientSettings
// (Final, Native, Protected)

void UDelMarPlayerPreferencesComponent::TryGetFortClientSettings()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TryGetFortClientSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.GetTouchControlsLayout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UDelMarPlayerPreferencesComponent::GetTouchControlsLayout() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTouchControlsLayout");

	Params::DelMarPlayerPreferencesComponent_GetTouchControlsLayout Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.GetUseIconOnlyPlayerNameplates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarPlayerPreferencesComponent::GetUseIconOnlyPlayerNameplates() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetUseIconOnlyPlayerNameplates");

	Params::DelMarPlayerPreferencesComponent_GetUseIconOnlyPlayerNameplates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarPlayerPreferencesComponent.GetUseToggleOnExpandableHudWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarPlayerPreferencesComponent::GetUseToggleOnExpandableHudWidget() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetUseToggleOnExpandableHudWidget");

	Params::DelMarPlayerPreferencesComponent_GetUseToggleOnExpandableHudWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarPlayerTurboManagerComponent.HandleTurboChargeUsed
// (Final, Native, Protected)

void UDelMarPlayerTurboManagerComponent::HandleTurboChargeUsed()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleTurboChargeUsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayerTurboManagerComponent.ModifyTurboCharges
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TurboChargeAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerTurboManagerComponent::ModifyTurboCharges(float TurboChargeAmount)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ModifyTurboCharges");

	Params::DelMarPlayerTurboManagerComponent_ModifyTurboCharges Parms{};

	Parms.TurboChargeAmount = TurboChargeAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerTurboManagerComponent.ModifyTurboCharges_Delayed
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TurboChargeAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerTurboManagerComponent::ModifyTurboCharges_Delayed(float TurboChargeAmount)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ModifyTurboCharges_Delayed");

	Params::DelMarPlayerTurboManagerComponent_ModifyTurboCharges_Delayed Parms{};

	Parms.TurboChargeAmount = TurboChargeAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayerTurboManagerComponent.SetTurboCharges
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TurboChargeAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPlayerTurboManagerComponent::SetTurboCharges(float TurboChargeAmount)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTurboCharges");

	Params::DelMarPlayerTurboManagerComponent_SetTurboCharges Parms{};

	Parms.TurboChargeAmount = TurboChargeAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRequestComponent.PostRaceNextRaceSelected
// (Final, Native, Public, BlueprintCallable)

void UDelMarRequestComponent::PostRaceNextRaceSelected()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PostRaceNextRaceSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.PostRaceReturnToLobbySelected
// (Final, Native, Public, BlueprintCallable)

void UDelMarRequestComponent::PostRaceReturnToLobbySelected()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PostRaceReturnToLobbySelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.ServerPostRaceNextRaceSelected
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable)

void UDelMarRequestComponent::ServerPostRaceNextRaceSelected()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerPostRaceNextRaceSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.ServerPostRaceReturnToLobbySelected
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable)

void UDelMarRequestComponent::ServerPostRaceReturnToLobbySelected()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerPostRaceReturnToLobbySelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.ServerReadyUp
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// bool                                    bInReadyUp                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRequestComponent::ServerReadyUp(bool bInReadyUp)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerReadyUp");

	Params::DelMarRequestComponent_ServerReadyUp Parms{};

	Parms.bInReadyUp = bInReadyUp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRequestComponent.ServerRequestBecomeSpectator
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UDelMarRequestComponent::ServerRequestBecomeSpectator()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestBecomeSpectator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.ServerRequestFinalInitialization
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UDelMarRequestComponent::ServerRequestFinalInitialization()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestFinalInitialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.ServerRequestMap
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            InMapChoice                                            (Parm, NativeAccessSpecifierPublic)

void UDelMarRequestComponent::ServerRequestMap(const struct FGameplayTagContainer& InMapChoice)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestMap");

	Params::DelMarRequestComponent_ServerRequestMap Parms{};

	Parms.InMapChoice = std::move(InMapChoice);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRequestComponent.ServerRequestMapFromGameplay
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            InMapChoice                                            (Parm, NativeAccessSpecifierPublic)

void UDelMarRequestComponent::ServerRequestMapFromGameplay(const struct FGameplayTagContainer& InMapChoice)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestMapFromGameplay");

	Params::DelMarRequestComponent_ServerRequestMapFromGameplay Parms{};

	Parms.InMapChoice = std::move(InMapChoice);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRequestComponent.ServerRequestRacerCountdown
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UDelMarRequestComponent::ServerRequestRacerCountdown()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestRacerCountdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.ServerRequestResetRun
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UDelMarRequestComponent::ServerRequestResetRun()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestResetRun");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.ServerRequestSpectatorBecomePlayer
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UDelMarRequestComponent::ServerRequestSpectatorBecomePlayer()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestSpectatorBecomePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.ServerRequestVehicleSpawn
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UDelMarRequestComponent::ServerRequestVehicleSpawn()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestVehicleSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.ServerSetJoinNextRace
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// bool                                    bInReadyToJoinRace                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRequestComponent::ServerSetJoinNextRace(bool bInReadyToJoinRace)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetJoinNextRace");

	Params::DelMarRequestComponent_ServerSetJoinNextRace Parms{};

	Parms.bInReadyToJoinRace = bInReadyToJoinRace;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRequestComponent.ServerSetPostRaceVote
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// EDelMarPostRaceVote                     NewVote                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRequestComponent::ServerSetPostRaceVote(EDelMarPostRaceVote NewVote)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetPostRaceVote");

	Params::DelMarRequestComponent_ServerSetPostRaceVote Parms{};

	Parms.NewVote = NewVote;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRequestComponent.OnRep_bIsReadyToJoinRace
// (Final, Native, Protected, Const)

void UDelMarRequestComponent::OnRep_bIsReadyToJoinRace() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_bIsReadyToJoinRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.OnRep_bIsReadyToStartRace
// (Final, Native, Protected, Const)

void UDelMarRequestComponent::OnRep_bIsReadyToStartRace() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_bIsReadyToStartRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRequestComponent.OnRep_PostRaceVote
// (Final, Native, Protected, Const)

void UDelMarRequestComponent::OnRep_PostRaceVote() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_PostRaceVote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRunRecordPlayerComponent.PrintRecords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDelMarRunRecord                 RunRecord                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRunRecordPlayerComponent::PrintRecords(const struct FDelMarRunRecord& RunRecord, const class FString& Name_0)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("PrintRecords");

	Params::DelMarRunRecordPlayerComponent_PrintRecords Parms{};

	Parms.RunRecord = std::move(RunRecord);
	Parms.Name_0 = std::move(Name_0);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRunRecordPlayerComponent.NetMulticast_LapRecorded
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDelMarEvent_LapRecorded         InLapRecordedEvent                                     (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarRunRecordPlayerComponent::NetMulticast_LapRecorded(const struct FDelMarEvent_LapRecorded& InLapRecordedEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_LapRecorded");

	Params::DelMarRunRecordPlayerComponent_NetMulticast_LapRecorded Parms{};

	Parms.InLapRecordedEvent = std::move(InLapRecordedEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRunRecordPlayerComponent.NetMulticast_RunRecorded
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDelMarEvent_RunRecorded         InRunRecordedEvent                                     (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarRunRecordPlayerComponent::NetMulticast_RunRecorded(const struct FDelMarEvent_RunRecorded& InRunRecordedEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_RunRecorded");

	Params::DelMarRunRecordPlayerComponent_NetMulticast_RunRecorded Parms{};

	Parms.InRunRecordedEvent = std::move(InRunRecordedEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRunRecordPlayerComponent.NetMulticast_SectionRecorded
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FDelMarEvent_SectionRecorded     InSectionRecordedEvent                                 (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarRunRecordPlayerComponent::NetMulticast_SectionRecorded(const struct FDelMarEvent_SectionRecorded& InSectionRecordedEvent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("NetMulticast_SectionRecorded");

	Params::DelMarRunRecordPlayerComponent_NetMulticast_SectionRecorded Parms{};

	Parms.InSectionRecordedEvent = std::move(InSectionRecordedEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialRequestComponent.Replay
// (Final, Native, Public, BlueprintCallable)

void UDelMarTutorialRequestComponent::Replay()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Replay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTutorialRequestComponent.Server_RequestNextSection
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UDelMarTutorialRequestComponent::Server_RequestNextSection()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_RequestNextSection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTutorialRequestComponent.Server_RequestPrevSection
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void UDelMarTutorialRequestComponent::Server_RequestPrevSection()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_RequestPrevSection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTutorialRequestComponent.Server_RequestSection
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// int32                                   SectionIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarTutorialRequestComponent::Server_RequestSection(int32 SectionIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_RequestSection");

	Params::DelMarTutorialRequestComponent_Server_RequestSection Parms{};

	Parms.SectionIndex = SectionIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialRequestComponent.Server_RequestStartRace
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// bool                                    bSkipCountdown                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarTutorialRequestComponent::Server_RequestStartRace(const bool bSkipCountdown)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_RequestStartRace");

	Params::DelMarTutorialRequestComponent_Server_RequestStartRace Parms{};

	Parms.bSkipCountdown = bSkipCountdown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarTutorialRequestComponent.GoRace
// (Final, Native, Public, BlueprintCallable, Const)

void UDelMarTutorialRequestComponent::GoRace() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GoRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTutorialRequestComponent.KeepTraining
// (Final, Native, Public, BlueprintCallable, Const)

void UDelMarTutorialRequestComponent::KeepTraining() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("KeepTraining");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTutorialRequestComponent.Server_KeepTraining
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, Const)

void UDelMarTutorialRequestComponent::Server_KeepTraining() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_KeepTraining");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarTutorialRequestComponent.TutorialComplete
// (Final, Native, Public, BlueprintCallable, Const)

void UDelMarTutorialRequestComponent::TutorialComplete() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TutorialComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarLevelManagerComponent.RequestLevelLoad
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            DesiredMap                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarLevelManagerComponent::RequestLevelLoad(const struct FGameplayTagContainer& DesiredMap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestLevelLoad");

	Params::DelMarLevelManagerComponent_RequestLevelLoad Parms{};

	Parms.DesiredMap = std::move(DesiredMap);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarLevelManagerComponent.ServerRequestLevel
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FGameplayTagContainer            DesiredMap                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarLevelManagerComponent::ServerRequestLevel(const struct FGameplayTagContainer& DesiredMap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestLevel");

	Params::DelMarLevelManagerComponent_ServerRequestLevel Parms{};

	Parms.DesiredMap = std::move(DesiredMap);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayspace.OnRep_ActiveRaceManagerUpdated
// (Final, Native, Protected)

void ADelMarPlayspace::OnRep_ActiveRaceManagerUpdated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ActiveRaceManagerUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayspace.RequestNextMapFromMapSet
// (Net, NetReliable, Native, Event, Public, NetServer)

void ADelMarPlayspace::RequestNextMapFromMapSet()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestNextMapFromMapSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarPlayspace.ServerRequestLoadingLevel
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FGameplayTagContainer            DesiredMap                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ADelMarPlayspace::ServerRequestLoadingLevel(const struct FGameplayTagContainer& DesiredMap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestLoadingLevel");

	Params::DelMarPlayspace_ServerRequestLoadingLevel Parms{};

	Parms.DesiredMap = std::move(DesiredMap);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayspace.ServerRequestLoadingLevelWithLinkCode
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FOnlineLinkId                    DesiredMap                                             (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarPlayspace::ServerRequestLoadingLevelWithLinkCode(const struct FOnlineLinkId& DesiredMap)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerRequestLoadingLevelWithLinkCode");

	Params::DelMarPlayspace_ServerRequestLoadingLevelWithLinkCode Parms{};

	Parms.DesiredMap = std::move(DesiredMap);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayspace.ServerReturnToSetup
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FGameplayTagContainer            OptionalMapToForceLoad                                 (ConstParm, Parm, NativeAccessSpecifierPublic)

void ADelMarPlayspace::ServerReturnToSetup(const struct FGameplayTagContainer& OptionalMapToForceLoad)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerReturnToSetup");

	Params::DelMarPlayspace_ServerReturnToSetup Parms{};

	Parms.OptionalMapToForceLoad = std::move(OptionalMapToForceLoad);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayspace.ServerReturnToSetupWithLinkCode
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FOnlineLinkId                    OptionalMapToForceLoad                                 (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarPlayspace::ServerReturnToSetupWithLinkCode(const struct FOnlineLinkId& OptionalMapToForceLoad)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerReturnToSetupWithLinkCode");

	Params::DelMarPlayspace_ServerReturnToSetupWithLinkCode Parms{};

	Parms.OptionalMapToForceLoad = std::move(OptionalMapToForceLoad);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayspace.SetLoadingScreenVisibiliy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInShouldShowLoadingScreen                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarPlayspace::SetLoadingScreenVisibiliy(bool bInShouldShowLoadingScreen)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLoadingScreenVisibiliy");

	Params::DelMarPlayspace_SetLoadingScreenVisibiliy Parms{};

	Parms.bInShouldShowLoadingScreen = bInShouldShowLoadingScreen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarPlayspace.ShouldShowLoadingScreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADelMarPlayspace::ShouldShowLoadingScreen()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ShouldShowLoadingScreen");

	Params::DelMarPlayspace_ShouldShowLoadingScreen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarPreRaceControllerComponent.ServerSetViewTarget
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarPreRaceControllerComponent::ServerSetViewTarget(class AFortPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetViewTarget");

	Params::DelMarPreRaceControllerComponent_ServerSetViewTarget Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheckpointManagerComponent.HandleRaceFinished
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FDelMarEvent_RaceFinished        Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarCheckpointManagerComponent::HandleRaceFinished(const struct FDelMarEvent_RaceFinished& Event)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleRaceFinished");

	Params::DelMarCheckpointManagerComponent_HandleRaceFinished Parms{};

	Parms.Event = std::move(Event);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCheckpointManagerComponent.HandleResetRace
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FDelMarEvent_ResetRace           Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarCheckpointManagerComponent::HandleResetRace(const struct FDelMarEvent_ResetRace& Event)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleResetRace");

	Params::DelMarCheckpointManagerComponent_HandleResetRace Parms{};

	Parms.Event = std::move(Event);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarDeathRaceManager.GetPointsAwardForPlacement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InPlacement                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADelMarDeathRaceManager::GetPointsAwardForPlacement(const int32 InPlacement) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPointsAwardForPlacement");

	Params::DelMarDeathRaceManager_GetPointsAwardForPlacement Parms{};

	Parms.InPlacement = InPlacement;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarDeathRaceManager.GetScoreThresholdToEndMatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADelMarDeathRaceManager::GetScoreThresholdToEndMatch() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetScoreThresholdToEndMatch");

	Params::DelMarDeathRaceManager_GetScoreThresholdToEndMatch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarPositionalTrackerComponent.OnRep_FinalRacePositions
// (Final, Native, Protected)

void UDelMarPositionalTrackerComponent::OnRep_FinalRacePositions()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_FinalRacePositions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRaceConfigComponent.BroadcastVehicleAbilityConfigUpdated
// (Final, Native, Public, BlueprintCallable)

void UDelMarRaceConfigComponent::BroadcastVehicleAbilityConfigUpdated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BroadcastVehicleAbilityConfigUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRaceConfigComponent.OnRep_VehicleAbilityConfig
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FDelMarVehicleAbilityConfig      OldConfig                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarRaceConfigComponent::OnRep_VehicleAbilityConfig(const struct FDelMarVehicleAbilityConfig& OldConfig)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_VehicleAbilityConfig");

	Params::DelMarRaceConfigComponent_OnRep_VehicleAbilityConfig Parms{};

	Parms.OldConfig = std::move(OldConfig);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarRequestTrackerComponent.OnRep_PlayerReadyStates
// (Final, Native, Protected)

void UDelMarRequestTrackerComponent::OnRep_PlayerReadyStates()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_PlayerReadyStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarRespawnManagerComponent.RequestRespawnPawnAndVehicle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      InController                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADelMarVehicle*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADelMarVehicle* UDelMarRespawnManagerComponent::RequestRespawnPawnAndVehicle(class AController* InController)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestRespawnPawnAndVehicle");

	Params::DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle Parms{};

	Parms.InController = InController;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRespawnManagerComponent.RequestRespawnVehicleForPawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerPawn*                  InPlayerPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADelMarVehicle*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADelMarVehicle* UDelMarRespawnManagerComponent::RequestRespawnVehicleForPawn(class AFortPlayerPawn* InPlayerPawn)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestRespawnVehicleForPawn");

	Params::DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn Parms{};

	Parms.InPlayerPawn = InPlayerPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarRubberbandingManagerComponent.OnRep_RubberbandingConfig
// (Final, Native, Protected)

void UDelMarRubberbandingManagerComponent::OnRep_RubberbandingConfig()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_RubberbandingConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarState_Gameplay_Postrace.OnRep_EliminationList
// (Final, Native, Private)

void UDelMarState_Gameplay_Postrace::OnRep_EliminationList()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_EliminationList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarState_Gameplay_Postrace.OnRep_PostRaceEndServerTime
// (Final, Native, Protected)

void UDelMarState_Gameplay_Postrace::OnRep_PostRaceEndServerTime()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_PostRaceEndServerTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarState_Gameplay_Prerace.OnRep_PreRaceCountdownFinishServerTime
// (Final, Native, Private)

void UDelMarState_Gameplay_Prerace::OnRep_PreRaceCountdownFinishServerTime()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_PreRaceCountdownFinishServerTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarState_Gameplay_WaitingForPlayers.OnRep_LoadedPlayerStates
// (Final, Native, Protected)

void UDelMarState_Gameplay_WaitingForPlayers::OnRep_LoadedPlayerStates()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_LoadedPlayerStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCameraShakeComponent.OnCameraShakeIntensitySettingsChanged
// (Final, Native, Private)
// Parameters:
// class UFortClientSettingsRecord*        Settings                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCameraShakeComponent::OnCameraShakeIntensitySettingsChanged(class UFortClientSettingsRecord* Settings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCameraShakeIntensitySettingsChanged");

	Params::DelMarCameraShakeComponent_OnCameraShakeIntensitySettingsChanged Parms{};

	Parms.Settings = Settings;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCameraShakeComponent.OnHazardHit
// (Final, Native, Protected)

void UDelMarCameraShakeComponent::OnHazardHit()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnHazardHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCameraShakeComponent.OnJumpActivated
// (Final, Native, Protected)

void UDelMarCameraShakeComponent::OnJumpActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnJumpActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarCameraShakeComponent.OnVehicleHitVehicle
// (Final, Native, Protected, HasDefaults)
// Parameters:
// float                                   Magnitude                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCameraShakeComponent::OnVehicleHitVehicle(float Magnitude, const struct FVector& WorldLocation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnVehicleHitVehicle");

	Params::DelMarCameraShakeComponent_OnVehicleHitVehicle Parms{};

	Parms.Magnitude = Magnitude;
	Parms.WorldLocation = std::move(WorldLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCameraShakeComponent.OnVehicleHitWall
// (Final, Native, Protected, HasDefaults)
// Parameters:
// float                                   Magnitude                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ForwardRotationDegrees                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCameraShakeComponent::OnVehicleHitWall(float Magnitude, const struct FVector& WorldLocation, float ForwardRotationDegrees)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnVehicleHitWall");

	Params::DelMarCameraShakeComponent_OnVehicleHitWall Parms{};

	Parms.Magnitude = Magnitude;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.ForwardRotationDegrees = ForwardRotationDegrees;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarCameraShakeComponent.OnVehicleLanded
// (Final, Native, Protected)
// Parameters:
// float                                   LandingForce                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLandedKickflip                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCameraShakeComponent::OnVehicleLanded(float LandingForce, bool bLandedKickflip)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnVehicleLanded");

	Params::DelMarCameraShakeComponent_OnVehicleLanded Parms{};

	Parms.LandingForce = LandingForce;
	Parms.bLandedKickflip = bLandedKickflip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleCosmeticComponent.GetCosmeticActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ADelMarCosmeticActor> CosmeticClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLookForChildClasses                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADelMarCosmeticActor*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADelMarCosmeticActor* UDelMarVehicleCosmeticComponent::GetCosmeticActor(TSubclassOf<class ADelMarCosmeticActor> CosmeticClass, bool bLookForChildClasses) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCosmeticActor");

	Params::DelMarVehicleCosmeticComponent_GetCosmeticActor Parms{};

	Parms.CosmeticClass = CosmeticClass;
	Parms.bLookForChildClasses = bLookForChildClasses;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleCosmeticComponent.GetCosmeticActors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ADelMarCosmeticActor> CosmeticClass                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLookForChildClasses                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ADelMarCosmeticActor*>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ADelMarCosmeticActor*> UDelMarVehicleCosmeticComponent::GetCosmeticActors(TSubclassOf<class ADelMarCosmeticActor> CosmeticClass, bool bLookForChildClasses) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetCosmeticActors");

	Params::DelMarVehicleCosmeticComponent_GetCosmeticActors Parms{};

	Parms.CosmeticClass = CosmeticClass;
	Parms.bLookForChildClasses = bLookForChildClasses;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.HandleLoadingScreenVisibilityChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleForceFeedbackComponent::HandleLoadingScreenVisibilityChanged(bool bVisibility)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleLoadingScreenVisibilityChanged");

	Params::DelMarVehicleForceFeedbackComponent_HandleLoadingScreenVisibilityChanged Parms{};

	Parms.bVisibility = bVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnDriftActivated
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnDriftActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDriftActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnDriftBoostActivated
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnDriftBoostActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDriftBoostActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnDriftBoostDeactivated
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnDriftBoostDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDriftBoostDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnDriftControlChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsDriftControlled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleForceFeedbackComponent::OnDriftControlChanged(bool bIsDriftControlled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDriftControlChanged");

	Params::DelMarVehicleForceFeedbackComponent_OnDriftControlChanged Parms{};

	Parms.bIsDriftControlled = bIsDriftControlled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnDriftDeactivated
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnDriftDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDriftDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnHazardHit
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnHazardHit()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnHazardHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnJumpActivated
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnJumpActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnJumpActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnTurboActivated
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnTurboActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTurboActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnTurboDeactivated
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnTurboDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnTurboDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnUnderthrustActivated
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnUnderthrustActivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnUnderthrustActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnUnderthrustDeactivated
// (Final, Native, Protected)

void UDelMarVehicleForceFeedbackComponent::OnUnderthrustDeactivated()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnUnderthrustDeactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnVehicleLanded
// (Final, Native, Protected)
// Parameters:
// float                                   LandingForce                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLandedKickflip                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarVehicleForceFeedbackComponent::OnVehicleLanded(float LandingForce, bool bLandedKickflip)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnVehicleLanded");

	Params::DelMarVehicleForceFeedbackComponent_OnVehicleLanded Parms{};

	Parms.LandingForce = LandingForce;
	Parms.bLandedKickflip = bLandedKickflip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleMovementSet.OnRep_AccelMultiplier
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FFortGameplayAttributeData       OldSpeedMultiplier                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarVehicleMovementSet::OnRep_AccelMultiplier(const struct FFortGameplayAttributeData& OldSpeedMultiplier)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_AccelMultiplier");

	Params::DelMarVehicleMovementSet_OnRep_AccelMultiplier Parms{};

	Parms.OldSpeedMultiplier = std::move(OldSpeedMultiplier);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleMovementSet.OnRep_BonusSpeed
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FFortGameplayAttributeData       OldBonusSpeed                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarVehicleMovementSet::OnRep_BonusSpeed(const struct FFortGameplayAttributeData& OldBonusSpeed)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_BonusSpeed");

	Params::DelMarVehicleMovementSet_OnRep_BonusSpeed Parms{};

	Parms.OldBonusSpeed = std::move(OldBonusSpeed);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarCore.DelMarVehicleMovementSet.OnRep_VehicleThrottleDisabled
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FFortGameplayAttributeData       OldInputDisabled                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarVehicleMovementSet::OnRep_VehicleThrottleDisabled(const struct FFortGameplayAttributeData& OldInputDisabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_VehicleThrottleDisabled");

	Params::DelMarVehicleMovementSet_OnRep_VehicleThrottleDisabled Parms{};

	Parms.OldInputDisabled = std::move(OldInputDisabled);

	UObject::ProcessEvent(Func, &Parms);
}

}

