#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SqueegeeUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "SqueegeeUI_structs.hpp"


namespace SDK::Params
{

// Function SqueegeeUI.FortContentGateDetailsWidget.OnShowGamemodeDescription
// 0x0010 (0x0010 - 0x0000)
struct FortContentGateDetailsWidget_OnShowGamemodeDescription final
{
public:
	class FString                                 ActivityTitle;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentGateDetailsWidget_OnShowGamemodeDescription) == 0x000008, "Wrong alignment on FortContentGateDetailsWidget_OnShowGamemodeDescription");
static_assert(sizeof(FortContentGateDetailsWidget_OnShowGamemodeDescription) == 0x000010, "Wrong size on FortContentGateDetailsWidget_OnShowGamemodeDescription");
static_assert(offsetof(FortContentGateDetailsWidget_OnShowGamemodeDescription, ActivityTitle) == 0x000000, "Member 'FortContentGateDetailsWidget_OnShowGamemodeDescription::ActivityTitle' has a wrong offset!");

// Function SqueegeeUI.FortContentGateRatingWidget.OnLabelUpdated
// 0x0038 (0x0038 - 0x0000)
struct FortContentGateRatingWidget_OnLabelUpdated final
{
public:
	bool                                          bLabelEnabled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LabelText;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   LabelNumber;                                       // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentGateRatingWidget_OnLabelUpdated) == 0x000008, "Wrong alignment on FortContentGateRatingWidget_OnLabelUpdated");
static_assert(sizeof(FortContentGateRatingWidget_OnLabelUpdated) == 0x000038, "Wrong size on FortContentGateRatingWidget_OnLabelUpdated");
static_assert(offsetof(FortContentGateRatingWidget_OnLabelUpdated, bLabelEnabled) == 0x000000, "Member 'FortContentGateRatingWidget_OnLabelUpdated::bLabelEnabled' has a wrong offset!");
static_assert(offsetof(FortContentGateRatingWidget_OnLabelUpdated, LabelText) == 0x000008, "Member 'FortContentGateRatingWidget_OnLabelUpdated::LabelText' has a wrong offset!");
static_assert(offsetof(FortContentGateRatingWidget_OnLabelUpdated, LabelNumber) == 0x000020, "Member 'FortContentGateRatingWidget_OnLabelUpdated::LabelNumber' has a wrong offset!");

// Function SqueegeeUI.FortContentGateRatingWidget.OnStyleUpdated
// 0x0030 (0x0030 - 0x0000)
struct FortContentGateRatingWidget_OnStyleUpdated final
{
public:
	struct FSqueegeeStyleParams                   StyleParams;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentGateRatingWidget_OnStyleUpdated) == 0x000008, "Wrong alignment on FortContentGateRatingWidget_OnStyleUpdated");
static_assert(sizeof(FortContentGateRatingWidget_OnStyleUpdated) == 0x000030, "Wrong size on FortContentGateRatingWidget_OnStyleUpdated");
static_assert(offsetof(FortContentGateRatingWidget_OnStyleUpdated, StyleParams) == 0x000000, "Member 'FortContentGateRatingWidget_OnStyleUpdated::StyleParams' has a wrong offset!");

// Function SqueegeeUI.FortContentManagementDetails.OnPreviewImageChanged
// 0x0010 (0x0010 - 0x0000)
struct FortContentManagementDetails_OnPreviewImageChanged final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         Texture;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentManagementDetails_OnPreviewImageChanged) == 0x000008, "Wrong alignment on FortContentManagementDetails_OnPreviewImageChanged");
static_assert(sizeof(FortContentManagementDetails_OnPreviewImageChanged) == 0x000010, "Wrong size on FortContentManagementDetails_OnPreviewImageChanged");
static_assert(offsetof(FortContentManagementDetails_OnPreviewImageChanged, bIsLoading) == 0x000000, "Member 'FortContentManagementDetails_OnPreviewImageChanged::bIsLoading' has a wrong offset!");
static_assert(offsetof(FortContentManagementDetails_OnPreviewImageChanged, Texture) == 0x000008, "Member 'FortContentManagementDetails_OnPreviewImageChanged::Texture' has a wrong offset!");

// Function SqueegeeUI.FortContentManagementDetails.OnShowActivityData
// 0x0070 (0x0070 - 0x0000)
struct FortContentManagementDetails_OnShowActivityData final
{
public:
	class FText                                   ActivityDisplayName;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ActivityDescription;                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LinkCode;                                          // 0x0040(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsCreative;                                        // 0x0058(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UnlockTime;                                        // 0x0060(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortGameActivity*                      GameActivity;                                      // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentManagementDetails_OnShowActivityData) == 0x000008, "Wrong alignment on FortContentManagementDetails_OnShowActivityData");
static_assert(sizeof(FortContentManagementDetails_OnShowActivityData) == 0x000070, "Wrong size on FortContentManagementDetails_OnShowActivityData");
static_assert(offsetof(FortContentManagementDetails_OnShowActivityData, ActivityDisplayName) == 0x000000, "Member 'FortContentManagementDetails_OnShowActivityData::ActivityDisplayName' has a wrong offset!");
static_assert(offsetof(FortContentManagementDetails_OnShowActivityData, ActivityDescription) == 0x000018, "Member 'FortContentManagementDetails_OnShowActivityData::ActivityDescription' has a wrong offset!");
static_assert(offsetof(FortContentManagementDetails_OnShowActivityData, CreatorName) == 0x000030, "Member 'FortContentManagementDetails_OnShowActivityData::CreatorName' has a wrong offset!");
static_assert(offsetof(FortContentManagementDetails_OnShowActivityData, LinkCode) == 0x000040, "Member 'FortContentManagementDetails_OnShowActivityData::LinkCode' has a wrong offset!");
static_assert(offsetof(FortContentManagementDetails_OnShowActivityData, IsCreative) == 0x000058, "Member 'FortContentManagementDetails_OnShowActivityData::IsCreative' has a wrong offset!");
static_assert(offsetof(FortContentManagementDetails_OnShowActivityData, UnlockTime) == 0x000060, "Member 'FortContentManagementDetails_OnShowActivityData::UnlockTime' has a wrong offset!");
static_assert(offsetof(FortContentManagementDetails_OnShowActivityData, GameActivity) == 0x000068, "Member 'FortContentManagementDetails_OnShowActivityData::GameActivity' has a wrong offset!");

// Function SqueegeeUI.FortContentManagementButton.OnChangeManagementState
// 0x0001 (0x0001 - 0x0000)
struct FortContentManagementButton_OnChangeManagementState final
{
public:
	EFortContentManagementState                   NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentManagementButton_OnChangeManagementState) == 0x000001, "Wrong alignment on FortContentManagementButton_OnChangeManagementState");
static_assert(sizeof(FortContentManagementButton_OnChangeManagementState) == 0x000001, "Wrong size on FortContentManagementButton_OnChangeManagementState");
static_assert(offsetof(FortContentManagementButton_OnChangeManagementState, NewState) == 0x000000, "Member 'FortContentManagementButton_OnChangeManagementState::NewState' has a wrong offset!");

// Function SqueegeeUI.FortContentManagementButton.OnShowError
// 0x0018 (0x0018 - 0x0000)
struct FortContentManagementButton_OnShowError final
{
public:
	class FText                                   ErrorText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentManagementButton_OnShowError) == 0x000008, "Wrong alignment on FortContentManagementButton_OnShowError");
static_assert(sizeof(FortContentManagementButton_OnShowError) == 0x000018, "Wrong size on FortContentManagementButton_OnShowError");
static_assert(offsetof(FortContentManagementButton_OnShowError, ErrorText) == 0x000000, "Member 'FortContentManagementButton_OnShowError::ErrorText' has a wrong offset!");

// Function SqueegeeUI.FortContentManagementButton.OnShowGameActivity
// 0x0008 (0x0008 - 0x0000)
struct FortContentManagementButton_OnShowGameActivity final
{
public:
	const class UFortGameActivity*                NewGameActivity;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentManagementButton_OnShowGameActivity) == 0x000008, "Wrong alignment on FortContentManagementButton_OnShowGameActivity");
static_assert(sizeof(FortContentManagementButton_OnShowGameActivity) == 0x000008, "Wrong size on FortContentManagementButton_OnShowGameActivity");
static_assert(offsetof(FortContentManagementButton_OnShowGameActivity, NewGameActivity) == 0x000000, "Member 'FortContentManagementButton_OnShowGameActivity::NewGameActivity' has a wrong offset!");

// Function SqueegeeUI.FortContentManagementLabelWidget.OnSetLabel
// 0x0018 (0x0018 - 0x0000)
struct FortContentManagementLabelWidget_OnSetLabel final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentManagementLabelWidget_OnSetLabel) == 0x000008, "Wrong alignment on FortContentManagementLabelWidget_OnSetLabel");
static_assert(sizeof(FortContentManagementLabelWidget_OnSetLabel) == 0x000018, "Wrong size on FortContentManagementLabelWidget_OnSetLabel");
static_assert(offsetof(FortContentManagementLabelWidget_OnSetLabel, InText) == 0x000000, "Member 'FortContentManagementLabelWidget_OnSetLabel::InText' has a wrong offset!");

// Function SqueegeeUI.FortContentManagementList.OnNextUnlockPageRequestCompleted
// 0x0001 (0x0001 - 0x0000)
struct FortContentManagementList_OnNextUnlockPageRequestCompleted final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentManagementList_OnNextUnlockPageRequestCompleted) == 0x000001, "Wrong alignment on FortContentManagementList_OnNextUnlockPageRequestCompleted");
static_assert(sizeof(FortContentManagementList_OnNextUnlockPageRequestCompleted) == 0x000001, "Wrong size on FortContentManagementList_OnNextUnlockPageRequestCompleted");
static_assert(offsetof(FortContentManagementList_OnNextUnlockPageRequestCompleted, bSuccess) == 0x000000, "Member 'FortContentManagementList_OnNextUnlockPageRequestCompleted::bSuccess' has a wrong offset!");

// Function SqueegeeUI.FortContentManagementList.CanRequestNextUnlockPage
// 0x0001 (0x0001 - 0x0000)
struct FortContentManagementList_CanRequestNextUnlockPage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentManagementList_CanRequestNextUnlockPage) == 0x000001, "Wrong alignment on FortContentManagementList_CanRequestNextUnlockPage");
static_assert(sizeof(FortContentManagementList_CanRequestNextUnlockPage) == 0x000001, "Wrong size on FortContentManagementList_CanRequestNextUnlockPage");
static_assert(offsetof(FortContentManagementList_CanRequestNextUnlockPage, ReturnValue) == 0x000000, "Member 'FortContentManagementList_CanRequestNextUnlockPage::ReturnValue' has a wrong offset!");

}

