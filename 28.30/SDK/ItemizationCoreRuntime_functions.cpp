#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationCoreRuntime

#include "Basic.hpp"

#include "ItemizationCoreRuntime_classes.hpp"
#include "ItemizationCoreRuntime_parameters.hpp"


namespace SDK
{

// Function ItemizationCoreRuntime.ItemizationWorldSubsystem.OnInventoryComponentDestroyed
// (Final, Native, Protected)
// Parameters:
// class UInventoryComponent*              InventoryComponent                                     (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemizationWorldSubsystem::OnInventoryComponentDestroyed(const class UInventoryComponent* InventoryComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnInventoryComponentDestroyed");

	Params::ItemizationWorldSubsystem_OnInventoryComponentDestroyed Parms{};

	Parms.InventoryComponent = InventoryComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.ItemPickup.OnRep_ItemDefinition
// (Final, Native, Private)

void AItemPickup::OnRep_ItemDefinition()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ItemDefinition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationCoreRuntime.InventoryCollection.ClientOnItemAbilityCooldownUpdated
// (Net, NetReliable, Native, Event, Protected, HasDefaults, NetClient)
// Parameters:
// class UInventory*                       Inventory                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FItemAbilityCooldownState        CooldownState                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AInventoryCollection::ClientOnItemAbilityCooldownUpdated(class UInventory* Inventory, const struct FGuid& ItemEntryID, const struct FItemAbilityCooldownState& CooldownState)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClientOnItemAbilityCooldownUpdated");

	Params::InventoryCollection_ClientOnItemAbilityCooldownUpdated Parms{};

	Parms.Inventory = Inventory;
	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.CooldownState = std::move(CooldownState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.DropItem
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToDrop                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::DropItem(const struct FGuid& ItemEntryID, const int64 AmountToDrop)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DropItem");

	Params::InventoryCollection_DropItem Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.AmountToDrop = AmountToDrop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_DropItem
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToDrop                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_DropItem(const struct FGuid& ItemEntryID, const int64 AmountToDrop)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_DropItem");

	Params::InventoryCollection_Server_DropItem Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.AmountToDrop = AmountToDrop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_SetEquippableItemActive
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_SetEquippableItemActive(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_SetEquippableItemActive");

	Params::InventoryCollection_Server_SetEquippableItemActive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_SetEquippableItemInactive
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_SetEquippableItemInactive(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_SetEquippableItemInactive");

	Params::InventoryCollection_Server_SetEquippableItemInactive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_SetItemSlot
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FGuid                            OwningInventoryID                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                                  SlotNumber                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVkInventoryMoveBehaviour               MoveBehaviour                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_SetItemSlot(const struct FGuid& OwningInventoryID, const struct FGuid& ItemEntryID, const uint16 SlotNumber, const EVkInventoryMoveBehaviour MoveBehaviour)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_SetItemSlot");

	Params::InventoryCollection_Server_SetItemSlot Parms{};

	Parms.OwningInventoryID = std::move(OwningInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.SlotNumber = SlotNumber;
	Parms.MoveBehaviour = MoveBehaviour;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_UseItem
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FGuid                            ItemId                                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            AdditionalItemID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_UseItem(const struct FGuid& ItemId, const struct FGuid& AdditionalItemID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Server_UseItem");

	Params::InventoryCollection_Server_UseItem Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.AdditionalItemID = std::move(AdditionalItemID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.SetEquippableItemActive
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::SetEquippableItemActive(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEquippableItemActive");

	Params::InventoryCollection_SetEquippableItemActive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.SetEquippableItemInactive
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::SetEquippableItemInactive(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEquippableItemInactive");

	Params::InventoryCollection_SetEquippableItemInactive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.UseItem
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            AdditionalItemID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::UseItem(const struct FGuid& ItemId, const struct FGuid& AdditionalItemID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UseItem");

	Params::InventoryCollection_UseItem Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.AdditionalItemID = std::move(AdditionalItemID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCollection.GetAllInventoriesInCollection
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGuid>                    OutInventoryIDList                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryCollection::GetAllInventoriesInCollection(TArray<struct FGuid>* OutInventoryIDList) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAllInventoriesInCollection");

	Params::InventoryCollection_GetAllInventoriesInCollection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutInventoryIDList != nullptr)
		*OutInventoryIDList = std::move(Parms.OutInventoryIDList);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetAllItemsInInventory
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGuid>                    OutItemEntryIDList                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryCollection::GetAllItemsInInventory(const struct FGuid& TargetInventoryID, TArray<struct FGuid>* OutItemEntryIDList) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAllItemsInInventory");

	Params::InventoryCollection_GetAllItemsInInventory Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);

	UObject::ProcessEvent(Func, &Parms);

	if (OutItemEntryIDList != nullptr)
		*OutItemEntryIDList = std::move(Parms.OutItemEntryIDList);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoriesWithInventoryDefinition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInventoryDefinition*             InventoryDefinition                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGuid>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGuid> AInventoryCollection::GetInventoriesWithInventoryDefinition(const class UInventoryDefinition* InventoryDefinition) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInventoriesWithInventoryDefinition");

	Params::InventoryCollection_GetInventoriesWithInventoryDefinition Parms{};

	Parms.InventoryDefinition = InventoryDefinition;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryDefinition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UInventoryDefinition*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UInventoryDefinition* AInventoryCollection::GetInventoryDefinition(const struct FGuid& TargetInventoryID) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInventoryDefinition");

	Params::InventoryCollection_GetInventoryDefinition Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryListInPickupPriorityForItemDefinition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UItemDefinitionBase*              ItemDefinition                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGuid>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGuid> AInventoryCollection::GetInventoryListInPickupPriorityForItemDefinition(const class UItemDefinitionBase* ItemDefinition) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInventoryListInPickupPriorityForItemDefinition");

	Params::InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition Parms{};

	Parms.ItemDefinition = ItemDefinition;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryName
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText AInventoryCollection::GetInventoryName(const struct FGuid& TargetInventoryID) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInventoryName");

	Params::InventoryCollection_GetInventoryName Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UItemDefinitionBase*              ItemDefinition                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetItemAmount(const class UItemDefinitionBase* ItemDefinition) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemAmount");

	Params::InventoryCollection_GetItemAmount Parms{};

	Parms.ItemDefinition = ItemDefinition;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemAmountFromEntry
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetItemAmountFromEntry(const struct FGuid& TargetInventoryID, const struct FGuid& ItemEntryID) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemAmountFromEntry");

	Params::InventoryCollection_GetItemAmountFromEntry Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemAmountFromInventory
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UItemDefinitionBase*              ItemDefinition                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetItemAmountFromInventory(const class UItemDefinitionBase* ItemDefinition, const struct FGuid& TargetInventoryID) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemAmountFromInventory");

	Params::InventoryCollection_GetItemAmountFromInventory Parms{};

	Parms.ItemDefinition = ItemDefinition;
	Parms.TargetInventoryID = std::move(TargetInventoryID);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemDefinition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UItemDefinitionBase*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemDefinitionBase* AInventoryCollection::GetItemDefinition(const struct FGuid& TargetInventoryID, const struct FGuid& ItemEntryID) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemDefinition");

	Params::InventoryCollection_GetItemDefinition Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemIntAttribute
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UItemAttribute_Int>   Attribute                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetItemIntAttribute(const struct FGuid& TargetInventoryID, const struct FGuid& ItemEntryID, const TSubclassOf<class UItemAttribute_Int>& Attribute) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemIntAttribute");

	Params::InventoryCollection_GetItemIntAttribute Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.Attribute = Attribute;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemSlotNumber
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AInventoryCollection::GetItemSlotNumber(const struct FGuid& TargetInventoryID, const struct FGuid& ItemEntryID) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemSlotNumber");

	Params::InventoryCollection_GetItemSlotNumber Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.IsItemEquipped
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryCollection::IsItemEquipped(const struct FGuid& ItemEntryID) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsItemEquipped");

	Params::InventoryCollection_IsItemEquipped Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.Inventory.OnRep_InventoryDefinition
// (Native, Protected)

void UInventory::OnRep_InventoryDefinition()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_InventoryDefinition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationCoreRuntime.Inventory.OnRep_InventoryID
// (Final, Native, Protected)

void UInventory::OnRep_InventoryID()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_InventoryID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationCoreRuntime.Inventory.OnRep_InventoryMaxStackSizeOverride
// (Final, Native, Protected)

void UInventory::OnRep_InventoryMaxStackSizeOverride()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_InventoryMaxStackSizeOverride");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationCoreRuntime.Inventory.OnRep_InventoryTotalSlotsOverride
// (Final, Native, Protected)

void UInventory::OnRep_InventoryTotalSlotsOverride()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_InventoryTotalSlotsOverride");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationCoreRuntime.Inventory.OnRep_ItemData
// (Final, Native, Protected)

void UInventory::OnRep_ItemData()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ItemData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationCoreRuntime.EquippableInventory.OnRep_EquippedItems
// (Final, Native, Private)

void UEquippableInventory::OnRep_EquippedItems()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_EquippedItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryAddToItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToAdd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryAddToItem(int32 InventoryIndex, int32 ItemIndex, int64 AmountToAdd)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InventoryAddToItem");

	Params::InventoryCheatManager_InventoryAddToItem Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.AmountToAdd = AmountToAdd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryDropItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToDrop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryDropItem(int32 InventoryIndex, int32 ItemIndex, int64 AmountToDrop)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InventoryDropItem");

	Params::InventoryCheatManager_InventoryDropItem Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.AmountToDrop = AmountToDrop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryMoveAmountOfItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   SourceInventoryIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetInventoryIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToMove                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryMoveAmountOfItem(int32 SourceInventoryIndex, int32 ItemIndex, int32 TargetInventoryIndex, int64 AmountToMove)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InventoryMoveAmountOfItem");

	Params::InventoryCheatManager_InventoryMoveAmountOfItem Parms{};

	Parms.SourceInventoryIndex = SourceInventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.TargetInventoryIndex = TargetInventoryIndex;
	Parms.AmountToMove = AmountToMove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryMoveItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   SourceInventoryIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetInventoryIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryMoveItem(int32 SourceInventoryIndex, int32 ItemIndex, int32 TargetInventoryIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InventoryMoveItem");

	Params::InventoryCheatManager_InventoryMoveItem Parms{};

	Parms.SourceInventoryIndex = SourceInventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.TargetInventoryIndex = TargetInventoryIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryRemoveFromItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToRemove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryRemoveFromItem(int32 InventoryIndex, int32 ItemIndex, int64 AmountToRemove)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InventoryRemoveFromItem");

	Params::InventoryCheatManager_InventoryRemoveFromItem Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.AmountToRemove = AmountToRemove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventorySetEquippedItemActive
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventorySetEquippedItemActive(int32 InventoryIndex, int32 ItemIndex, bool bActive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InventorySetEquippedItemActive");

	Params::InventoryCheatManager_InventorySetEquippedItemActive Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.bActive = bActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventorySetItemSlot
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                                  NewSlotIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventorySetItemSlot(int32 InventoryIndex, int32 ItemIndex, uint16 NewSlotIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InventorySetItemSlot");

	Params::InventoryCheatManager_InventorySetItemSlot Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.NewSlotIndex = NewSlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryUseItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryUseItem(int32 InventoryIndex, int32 ItemIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InventoryUseItem");

	Params::InventoryCheatManager_InventoryUseItem Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.ItemDefinitionBase.GetDisplayName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UItemDefinitionBase::GetDisplayName() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDisplayName");

	Params::ItemDefinitionBase_GetDisplayName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemDefinitionBase.GetItemComponentByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UItemComponentBase>   ItemComponentClass                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UItemComponentBase*         ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemComponentBase* UItemDefinitionBase::GetItemComponentByClass(const TSubclassOf<class UItemComponentBase> ItemComponentClass) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemComponentByClass");

	Params::ItemDefinitionBase_GetItemComponentByClass Parms{};

	Parms.ItemComponentClass = ItemComponentClass;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemDefinitionBase.GetItemDescription
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UItemDefinitionBase::GetItemDescription() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemDescription");

	Params::ItemDefinitionBase_GetItemDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemDefinitionBase.GetItemShortDescription
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UItemDefinitionBase::GetItemShortDescription() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemShortDescription");

	Params::ItemDefinitionBase_GetItemShortDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemAbilityConfigurationAsset.Construct
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UGameplayAbility*                 Ability                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemAbilityConfigurationAsset::Construct(class UGameplayAbility* Ability) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Construct");

	Params::ItemAbilityConfigurationAsset_Construct Parms{};

	Parms.Ability = Ability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.DescribeInventoryID
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                            InventoryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UItemizationFunctionLibrary::DescribeInventoryID(const struct FGuid& InventoryID)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("DescribeInventoryID");

	Params::ItemizationFunctionLibrary_DescribeInventoryID Parms{};

	Parms.InventoryID = std::move(InventoryID);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.DescribeItemEntryID
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UItemizationFunctionLibrary::DescribeItemEntryID(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("DescribeItemEntryID");

	Params::ItemizationFunctionLibrary_DescribeItemEntryID Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataAttributeList
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FItemAggregatedData              ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class UItemAttribute>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UItemAttribute>> UItemizationFunctionLibrary::GetItemDataAttributeList(const struct FItemAggregatedData& ItemData)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetItemDataAttributeList");

	Params::ItemizationFunctionLibrary_GetItemDataAttributeList Parms{};

	Parms.ItemData = std::move(ItemData);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataBoolAttributeValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FItemAggregatedData              ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UItemAttribute_Bool>  AttributeClass                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemizationFunctionLibrary::GetItemDataBoolAttributeValue(const struct FItemAggregatedData& ItemData, const TSubclassOf<class UItemAttribute_Bool> AttributeClass)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetItemDataBoolAttributeValue");

	Params::ItemizationFunctionLibrary_GetItemDataBoolAttributeValue Parms{};

	Parms.ItemData = std::move(ItemData);
	Parms.AttributeClass = AttributeClass;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataDecimalAttributeValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FItemAggregatedData              ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UItemAttribute_Decimal>AttributeClass                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UItemizationFunctionLibrary::GetItemDataDecimalAttributeValue(const struct FItemAggregatedData& ItemData, const TSubclassOf<class UItemAttribute_Decimal> AttributeClass)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetItemDataDecimalAttributeValue");

	Params::ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue Parms{};

	Parms.ItemData = std::move(ItemData);
	Parms.AttributeClass = AttributeClass;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataDefinition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FItemAggregatedData              ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UItemDefinitionBase*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemDefinitionBase* UItemizationFunctionLibrary::GetItemDataDefinition(const struct FItemAggregatedData& ItemData)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetItemDataDefinition");

	Params::ItemizationFunctionLibrary_GetItemDataDefinition Parms{};

	Parms.ItemData = std::move(ItemData);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataIntAttributeValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FItemAggregatedData              ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UItemAttribute_Int>   AttributeClass                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UItemizationFunctionLibrary::GetItemDataIntAttributeValue(const struct FItemAggregatedData& ItemData, const TSubclassOf<class UItemAttribute_Int> AttributeClass)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetItemDataIntAttributeValue");

	Params::ItemizationFunctionLibrary_GetItemDataIntAttributeValue Parms{};

	Parms.ItemData = std::move(ItemData);
	Parms.AttributeClass = AttributeClass;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataItemEntryID
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FItemAggregatedData              ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGuid UItemizationFunctionLibrary::GetItemDataItemEntryID(const struct FItemAggregatedData& ItemData)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetItemDataItemEntryID");

	Params::ItemizationFunctionLibrary_GetItemDataItemEntryID Parms{};

	Parms.ItemData = std::move(ItemData);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FItemAggregatedData              ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UItemizationFunctionLibrary::GetItemDataSlot(const struct FItemAggregatedData& ItemData)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetItemDataSlot");

	Params::ItemizationFunctionLibrary_GetItemDataSlot Parms{};

	Parms.ItemData = std::move(ItemData);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataStringAttributeValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FItemAggregatedData              ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UItemAttribute_String>AttributeClass                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UItemizationFunctionLibrary::GetItemDataStringAttributeValue(const struct FItemAggregatedData& ItemData, const TSubclassOf<class UItemAttribute_String> AttributeClass)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetItemDataStringAttributeValue");

	Params::ItemizationFunctionLibrary_GetItemDataStringAttributeValue Parms{};

	Parms.ItemData = std::move(ItemData);
	Parms.AttributeClass = AttributeClass;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemAttribute.GetAttributeDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UItemAttribute::GetAttributeDescription() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAttributeDescription");

	Params::ItemAttribute_GetAttributeDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemAttribute.GetAttributeName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UItemAttribute::GetAttributeName() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAttributeName");

	Params::ItemAttribute_GetAttributeName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemComponentStorage_Attach.OnOwnerTransformUpdated
// (Final, Native, Public, HasDefaults)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OldLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OldVelocity                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemComponentStorage_Attach::OnOwnerTransformUpdated(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnOwnerTransformUpdated");

	Params::ItemComponentStorage_Attach_OnOwnerTransformUpdated Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.OldLocation = std::move(OldLocation);
	Parms.OldVelocity = std::move(OldVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.ItemComponent_Core.GetItemRarity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UItemRarity*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemRarity* UItemComponent_Core::GetItemRarity() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemRarity");

	Params::ItemComponent_Core_GetItemRarity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemComponent_Core.GetItemType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UItemType*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemType* UItemComponent_Core::GetItemType() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemType");

	Params::ItemComponent_Core_GetItemType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetItemIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UTexture2D> UItemComponent_DisplayUI::GetItemIcon() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemIcon");

	Params::ItemComponent_DisplayUI_GetItemIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetItemIconDisplayTextType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EItemIconDisplayTextType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EItemIconDisplayTextType UItemComponent_DisplayUI::GetItemIconDisplayTextType() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemIconDisplayTextType");

	Params::ItemComponent_DisplayUI_GetItemIconDisplayTextType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetItemMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UMaterialInterface>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UMaterialInterface> UItemComponent_DisplayUI::GetItemMaterial() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemMaterial");

	Params::ItemComponent_DisplayUI_GetItemMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetMaterialTextureParameter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UItemComponent_DisplayUI::GetMaterialTextureParameter() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMaterialTextureParameter");

	Params::ItemComponent_DisplayUI_GetMaterialTextureParameter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetSmallItemIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UTexture2D> UItemComponent_DisplayUI::GetSmallItemIcon() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSmallItemIcon");

	Params::ItemComponent_DisplayUI_GetSmallItemIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationPickupFunctionLibrary.DropItemFromInventoryAsPickup
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AInventoryCollection*             Collection                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            InventoryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToDrop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AItemPickup*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AItemPickup* UItemizationPickupFunctionLibrary::DropItemFromInventoryAsPickup(class AInventoryCollection* Collection, const struct FGuid& InventoryID, const struct FGuid& ItemEntryID, int64 AmountToDrop)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("DropItemFromInventoryAsPickup");

	Params::ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup Parms{};

	Parms.Collection = Collection;
	Parms.InventoryID = std::move(InventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.AmountToDrop = AmountToDrop;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationPickupFunctionLibrary.SetDefaultItemPickupClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AItemPickup>          ItemPickupClass                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemizationPickupFunctionLibrary::SetDefaultItemPickupClass(TSubclassOf<class AItemPickup> ItemPickupClass)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("SetDefaultItemPickupClass");

	Params::ItemizationPickupFunctionLibrary_SetDefaultItemPickupClass Parms{};

	Parms.ItemPickupClass = ItemPickupClass;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.ItemizationPickupFunctionLibrary.SetDefaultItemPickupMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemizationPickupFunctionLibrary::SetDefaultItemPickupMesh(class UStaticMesh* Mesh)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("SetDefaultItemPickupMesh");

	Params::ItemizationPickupFunctionLibrary_SetDefaultItemPickupMesh Parms{};

	Parms.Mesh = Mesh;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.ItemizationPickupFunctionLibrary.SpawnItemPickupInWorld
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemDefinitionBase*              ItemDefinition                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InPosition                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AItemPickup*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AItemPickup* UItemizationPickupFunctionLibrary::SpawnItemPickupInWorld(class UObject* WorldContextObject, const class UItemDefinitionBase* ItemDefinition, const struct FVector& InPosition, const int64 Amount)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("SpawnItemPickupInWorld");

	Params::ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ItemDefinition = ItemDefinition;
	Parms.InPosition = std::move(InPosition);
	Parms.Amount = Amount;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemRarity.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLinearColor               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FLinearColor UItemRarity::GetColor() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetColor");

	Params::ItemRarity_GetColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemRarity.GetDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UItemRarity::GetDescription() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDescription");

	Params::ItemRarity_GetDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemRarity.GetName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UItemRarity::GetName() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetName");

	Params::ItemRarity_GetName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemRarity.GetTier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UItemRarity::GetTier() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTier");

	Params::ItemRarity_GetTier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemType.GetDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UItemType::GetDescription() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDescription");

	Params::ItemType_GetDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemType.GetName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UItemType::GetName() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetName");

	Params::ItemType_GetName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemType.GetParentType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemType*                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemType* UItemType::GetParentType() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetParentType");

	Params::ItemType_GetParentType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryComponent.AddItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UItemDefinitionBase*              ItemDefinition                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::AddItem(class UItemDefinitionBase* ItemDefinition, int64 Amount)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddItem");

	Params::InventoryComponent_AddItem Parms{};

	Parms.ItemDefinition = ItemDefinition;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryComponent.AddOrResetInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryDefinition*             NewInventoryDefinition                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::AddOrResetInventory(class UInventoryDefinition* NewInventoryDefinition)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddOrResetInventory");

	Params::InventoryComponent_AddOrResetInventory Parms{};

	Parms.NewInventoryDefinition = NewInventoryDefinition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryComponent.DropItem
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::DropItem(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DropItem");

	Params::InventoryComponent_DropItem Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryComponent.SetEquippableItemActive
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::SetEquippableItemActive(const struct FGuid& ItemEntryID, bool bActive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEquippableItemActive");

	Params::InventoryComponent_SetEquippableItemActive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.bActive = bActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryComponent.UseItem
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            AdditionalItemID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::UseItem(const struct FGuid& ItemId, const struct FGuid& AdditionalItemID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UseItem");

	Params::InventoryComponent_UseItem Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.AdditionalItemID = std::move(AdditionalItemID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.InventoryComponent.GetInventoryCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AInventoryCollection*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AInventoryCollection* UInventoryComponent::GetInventoryCollection() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInventoryCollection");

	Params::InventoryComponent_GetInventoryCollection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

