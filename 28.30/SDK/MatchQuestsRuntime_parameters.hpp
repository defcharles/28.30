#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MatchQuestsRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function MatchQuestsRuntime.ControllerComponent_MatchQuests.OnLandedFromBus
// 0x0008 (0x0008 - 0x0000)
struct ControllerComponent_MatchQuests_OnLandedFromBus final
{
public:
	class AFortPlayerControllerZone*              PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerComponent_MatchQuests_OnLandedFromBus) == 0x000008, "Wrong alignment on ControllerComponent_MatchQuests_OnLandedFromBus");
static_assert(sizeof(ControllerComponent_MatchQuests_OnLandedFromBus) == 0x000008, "Wrong size on ControllerComponent_MatchQuests_OnLandedFromBus");
static_assert(offsetof(ControllerComponent_MatchQuests_OnLandedFromBus, PlayerController) == 0x000000, "Member 'ControllerComponent_MatchQuests_OnLandedFromBus::PlayerController' has a wrong offset!");

// Function MatchQuestsRuntime.ControllerComponent_MatchQuests.Server_SetSelectedQuest
// 0x0010 (0x0010 - 0x0000)
struct ControllerComponent_MatchQuests_Server_SetSelectedQuest final
{
public:
	TScriptInterface<class IQuestDefinitionInterface> Quest;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerComponent_MatchQuests_Server_SetSelectedQuest) == 0x000008, "Wrong alignment on ControllerComponent_MatchQuests_Server_SetSelectedQuest");
static_assert(sizeof(ControllerComponent_MatchQuests_Server_SetSelectedQuest) == 0x000010, "Wrong size on ControllerComponent_MatchQuests_Server_SetSelectedQuest");
static_assert(offsetof(ControllerComponent_MatchQuests_Server_SetSelectedQuest, Quest) == 0x000000, "Member 'ControllerComponent_MatchQuests_Server_SetSelectedQuest::Quest' has a wrong offset!");

// Function MatchQuestsRuntime.ControllerComponent_MatchQuests.TryToGrantSelectedQuest
// 0x0001 (0x0001 - 0x0000)
struct ControllerComponent_MatchQuests_TryToGrantSelectedQuest final
{
public:
	struct FFortGamePhaseUpdatedEvent             Event;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerComponent_MatchQuests_TryToGrantSelectedQuest) == 0x000001, "Wrong alignment on ControllerComponent_MatchQuests_TryToGrantSelectedQuest");
static_assert(sizeof(ControllerComponent_MatchQuests_TryToGrantSelectedQuest) == 0x000001, "Wrong size on ControllerComponent_MatchQuests_TryToGrantSelectedQuest");
static_assert(offsetof(ControllerComponent_MatchQuests_TryToGrantSelectedQuest, Event) == 0x000000, "Member 'ControllerComponent_MatchQuests_TryToGrantSelectedQuest::Event' has a wrong offset!");

// Function MatchQuestsRuntime.ControllerComponent_MatchQuests.TryToRollOffer
// 0x0001 (0x0001 - 0x0000)
struct ControllerComponent_MatchQuests_TryToRollOffer final
{
public:
	struct FFortGamePhaseUpdatedEvent             Event;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerComponent_MatchQuests_TryToRollOffer) == 0x000001, "Wrong alignment on ControllerComponent_MatchQuests_TryToRollOffer");
static_assert(sizeof(ControllerComponent_MatchQuests_TryToRollOffer) == 0x000001, "Wrong size on ControllerComponent_MatchQuests_TryToRollOffer");
static_assert(offsetof(ControllerComponent_MatchQuests_TryToRollOffer, Event) == 0x000000, "Member 'ControllerComponent_MatchQuests_TryToRollOffer::Event' has a wrong offset!");

// Function MatchQuestsRuntime.FortPlayerStateComponent_MatchQuests.OnLandedFromBus
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerStateComponent_MatchQuests_OnLandedFromBus final
{
public:
	class AFortPlayerControllerZone*              PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateComponent_MatchQuests_OnLandedFromBus) == 0x000008, "Wrong alignment on FortPlayerStateComponent_MatchQuests_OnLandedFromBus");
static_assert(sizeof(FortPlayerStateComponent_MatchQuests_OnLandedFromBus) == 0x000008, "Wrong size on FortPlayerStateComponent_MatchQuests_OnLandedFromBus");
static_assert(offsetof(FortPlayerStateComponent_MatchQuests_OnLandedFromBus, PlayerController) == 0x000000, "Member 'FortPlayerStateComponent_MatchQuests_OnLandedFromBus::PlayerController' has a wrong offset!");

// Function MatchQuestsRuntime.FortPlayerStateComponent_MatchQuests.Server_SetSelectedQuest
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerStateComponent_MatchQuests_Server_SetSelectedQuest final
{
public:
	TScriptInterface<class IQuestDefinitionInterface> Quest;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateComponent_MatchQuests_Server_SetSelectedQuest) == 0x000008, "Wrong alignment on FortPlayerStateComponent_MatchQuests_Server_SetSelectedQuest");
static_assert(sizeof(FortPlayerStateComponent_MatchQuests_Server_SetSelectedQuest) == 0x000010, "Wrong size on FortPlayerStateComponent_MatchQuests_Server_SetSelectedQuest");
static_assert(offsetof(FortPlayerStateComponent_MatchQuests_Server_SetSelectedQuest, Quest) == 0x000000, "Member 'FortPlayerStateComponent_MatchQuests_Server_SetSelectedQuest::Quest' has a wrong offset!");

// Function MatchQuestsRuntime.FortPlayerStateComponent_MatchQuests.TryToGrantSelectedQuest
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerStateComponent_MatchQuests_TryToGrantSelectedQuest final
{
public:
	struct FFortGamePhaseUpdatedEvent             FortGamePhaseUpdatedEvent;                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateComponent_MatchQuests_TryToGrantSelectedQuest) == 0x000001, "Wrong alignment on FortPlayerStateComponent_MatchQuests_TryToGrantSelectedQuest");
static_assert(sizeof(FortPlayerStateComponent_MatchQuests_TryToGrantSelectedQuest) == 0x000001, "Wrong size on FortPlayerStateComponent_MatchQuests_TryToGrantSelectedQuest");
static_assert(offsetof(FortPlayerStateComponent_MatchQuests_TryToGrantSelectedQuest, FortGamePhaseUpdatedEvent) == 0x000000, "Member 'FortPlayerStateComponent_MatchQuests_TryToGrantSelectedQuest::FortGamePhaseUpdatedEvent' has a wrong offset!");

// Function MatchQuestsRuntime.MatchQuestsCheatManager.MatchQuests_LogReportSimulatedRolls
// 0x0004 (0x0004 - 0x0000)
struct MatchQuestsCheatManager_MatchQuests_LogReportSimulatedRolls final
{
public:
	int32                                         RollsToSimulate;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchQuestsCheatManager_MatchQuests_LogReportSimulatedRolls) == 0x000004, "Wrong alignment on MatchQuestsCheatManager_MatchQuests_LogReportSimulatedRolls");
static_assert(sizeof(MatchQuestsCheatManager_MatchQuests_LogReportSimulatedRolls) == 0x000004, "Wrong size on MatchQuestsCheatManager_MatchQuests_LogReportSimulatedRolls");
static_assert(offsetof(MatchQuestsCheatManager_MatchQuests_LogReportSimulatedRolls, RollsToSimulate) == 0x000000, "Member 'MatchQuestsCheatManager_MatchQuests_LogReportSimulatedRolls::RollsToSimulate' has a wrong offset!");

}

