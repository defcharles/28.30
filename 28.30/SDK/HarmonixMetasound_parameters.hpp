#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HarmonixMetasound

#include "Basic.hpp"

#include "HarmonixMetasound_structs.hpp"
#include "MetasoundFrontend_structs.hpp"
#include "MetasoundEngine_structs.hpp"
#include "HarmonixMidi_structs.hpp"
#include "Harmonix_structs.hpp"


namespace SDK::Params
{

// Function HarmonixMetasound.MidiEventInfoBlueprintLibrary.GetChannel
// 0x0014 (0x0014 - 0x0000)
struct MidiEventInfoBlueprintLibrary_GetChannel final
{
public:
	struct FMidiEventInfo                         Event;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiEventInfoBlueprintLibrary_GetChannel) == 0x000004, "Wrong alignment on MidiEventInfoBlueprintLibrary_GetChannel");
static_assert(sizeof(MidiEventInfoBlueprintLibrary_GetChannel) == 0x000014, "Wrong size on MidiEventInfoBlueprintLibrary_GetChannel");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_GetChannel, Event) == 0x000000, "Member 'MidiEventInfoBlueprintLibrary_GetChannel::Event' has a wrong offset!");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_GetChannel, ReturnValue) == 0x000010, "Member 'MidiEventInfoBlueprintLibrary_GetChannel::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiEventInfoBlueprintLibrary.GetMidiEventInfo
// 0x0028 (0x0028 - 0x0000)
struct MidiEventInfoBlueprintLibrary_GetMidiEventInfo final
{
public:
	struct FMetaSoundOutput                       Output;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMidiEventInfo                         ReturnValue;                                       // 0x0014(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiEventInfoBlueprintLibrary_GetMidiEventInfo) == 0x000008, "Wrong alignment on MidiEventInfoBlueprintLibrary_GetMidiEventInfo");
static_assert(sizeof(MidiEventInfoBlueprintLibrary_GetMidiEventInfo) == 0x000028, "Wrong size on MidiEventInfoBlueprintLibrary_GetMidiEventInfo");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_GetMidiEventInfo, Output) == 0x000000, "Member 'MidiEventInfoBlueprintLibrary_GetMidiEventInfo::Output' has a wrong offset!");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_GetMidiEventInfo, Success) == 0x000010, "Member 'MidiEventInfoBlueprintLibrary_GetMidiEventInfo::Success' has a wrong offset!");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_GetMidiEventInfo, ReturnValue) == 0x000014, "Member 'MidiEventInfoBlueprintLibrary_GetMidiEventInfo::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiEventInfoBlueprintLibrary.GetNoteNumber
// 0x0014 (0x0014 - 0x0000)
struct MidiEventInfoBlueprintLibrary_GetNoteNumber final
{
public:
	struct FMidiEventInfo                         Event;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiEventInfoBlueprintLibrary_GetNoteNumber) == 0x000004, "Wrong alignment on MidiEventInfoBlueprintLibrary_GetNoteNumber");
static_assert(sizeof(MidiEventInfoBlueprintLibrary_GetNoteNumber) == 0x000014, "Wrong size on MidiEventInfoBlueprintLibrary_GetNoteNumber");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_GetNoteNumber, Event) == 0x000000, "Member 'MidiEventInfoBlueprintLibrary_GetNoteNumber::Event' has a wrong offset!");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_GetNoteNumber, ReturnValue) == 0x000010, "Member 'MidiEventInfoBlueprintLibrary_GetNoteNumber::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiEventInfoBlueprintLibrary.GetVelocity
// 0x0014 (0x0014 - 0x0000)
struct MidiEventInfoBlueprintLibrary_GetVelocity final
{
public:
	struct FMidiEventInfo                         Event;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiEventInfoBlueprintLibrary_GetVelocity) == 0x000004, "Wrong alignment on MidiEventInfoBlueprintLibrary_GetVelocity");
static_assert(sizeof(MidiEventInfoBlueprintLibrary_GetVelocity) == 0x000014, "Wrong size on MidiEventInfoBlueprintLibrary_GetVelocity");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_GetVelocity, Event) == 0x000000, "Member 'MidiEventInfoBlueprintLibrary_GetVelocity::Event' has a wrong offset!");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_GetVelocity, ReturnValue) == 0x000010, "Member 'MidiEventInfoBlueprintLibrary_GetVelocity::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiEventInfoBlueprintLibrary.IsMidiEventInfo
// 0x0018 (0x0018 - 0x0000)
struct MidiEventInfoBlueprintLibrary_IsMidiEventInfo final
{
public:
	struct FMetaSoundOutput                       Output;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiEventInfoBlueprintLibrary_IsMidiEventInfo) == 0x000008, "Wrong alignment on MidiEventInfoBlueprintLibrary_IsMidiEventInfo");
static_assert(sizeof(MidiEventInfoBlueprintLibrary_IsMidiEventInfo) == 0x000018, "Wrong size on MidiEventInfoBlueprintLibrary_IsMidiEventInfo");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_IsMidiEventInfo, Output) == 0x000000, "Member 'MidiEventInfoBlueprintLibrary_IsMidiEventInfo::Output' has a wrong offset!");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_IsMidiEventInfo, ReturnValue) == 0x000010, "Member 'MidiEventInfoBlueprintLibrary_IsMidiEventInfo::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiEventInfoBlueprintLibrary.IsNote
// 0x0014 (0x0014 - 0x0000)
struct MidiEventInfoBlueprintLibrary_IsNote final
{
public:
	struct FMidiEventInfo                         Event;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiEventInfoBlueprintLibrary_IsNote) == 0x000004, "Wrong alignment on MidiEventInfoBlueprintLibrary_IsNote");
static_assert(sizeof(MidiEventInfoBlueprintLibrary_IsNote) == 0x000014, "Wrong size on MidiEventInfoBlueprintLibrary_IsNote");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_IsNote, Event) == 0x000000, "Member 'MidiEventInfoBlueprintLibrary_IsNote::Event' has a wrong offset!");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_IsNote, ReturnValue) == 0x000010, "Member 'MidiEventInfoBlueprintLibrary_IsNote::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiEventInfoBlueprintLibrary.IsNoteOff
// 0x0014 (0x0014 - 0x0000)
struct MidiEventInfoBlueprintLibrary_IsNoteOff final
{
public:
	struct FMidiEventInfo                         Event;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiEventInfoBlueprintLibrary_IsNoteOff) == 0x000004, "Wrong alignment on MidiEventInfoBlueprintLibrary_IsNoteOff");
static_assert(sizeof(MidiEventInfoBlueprintLibrary_IsNoteOff) == 0x000014, "Wrong size on MidiEventInfoBlueprintLibrary_IsNoteOff");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_IsNoteOff, Event) == 0x000000, "Member 'MidiEventInfoBlueprintLibrary_IsNoteOff::Event' has a wrong offset!");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_IsNoteOff, ReturnValue) == 0x000010, "Member 'MidiEventInfoBlueprintLibrary_IsNoteOff::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiEventInfoBlueprintLibrary.IsNoteOn
// 0x0014 (0x0014 - 0x0000)
struct MidiEventInfoBlueprintLibrary_IsNoteOn final
{
public:
	struct FMidiEventInfo                         Event;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiEventInfoBlueprintLibrary_IsNoteOn) == 0x000004, "Wrong alignment on MidiEventInfoBlueprintLibrary_IsNoteOn");
static_assert(sizeof(MidiEventInfoBlueprintLibrary_IsNoteOn) == 0x000014, "Wrong size on MidiEventInfoBlueprintLibrary_IsNoteOn");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_IsNoteOn, Event) == 0x000000, "Member 'MidiEventInfoBlueprintLibrary_IsNoteOn::Event' has a wrong offset!");
static_assert(offsetof(MidiEventInfoBlueprintLibrary_IsNoteOn, ReturnValue) == 0x000010, "Member 'MidiEventInfoBlueprintLibrary_IsNoteOn::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.DisableRowsAbove
// 0x0004 (0x0004 - 0x0000)
struct MidiStepSequence_DisableRowsAbove final
{
public:
	int32                                         FirstDisabledRow;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiStepSequence_DisableRowsAbove) == 0x000004, "Wrong alignment on MidiStepSequence_DisableRowsAbove");
static_assert(sizeof(MidiStepSequence_DisableRowsAbove) == 0x000004, "Wrong size on MidiStepSequence_DisableRowsAbove");
static_assert(offsetof(MidiStepSequence_DisableRowsAbove, FirstDisabledRow) == 0x000000, "Member 'MidiStepSequence_DisableRowsAbove::FirstDisabledRow' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.GetCell
// 0x000C (0x000C - 0x0000)
struct MidiStepSequence_GetCell final
{
public:
	int32                                         Row;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStepSequenceCell                      ReturnValue;                                       // 0x0008(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_GetCell) == 0x000004, "Wrong alignment on MidiStepSequence_GetCell");
static_assert(sizeof(MidiStepSequence_GetCell) == 0x00000C, "Wrong size on MidiStepSequence_GetCell");
static_assert(offsetof(MidiStepSequence_GetCell, Row) == 0x000000, "Member 'MidiStepSequence_GetCell::Row' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_GetCell, Column) == 0x000004, "Member 'MidiStepSequence_GetCell::Column' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_GetCell, ReturnValue) == 0x000008, "Member 'MidiStepSequence_GetCell::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.GetCellOnPage
// 0x0010 (0x0010 - 0x0000)
struct MidiStepSequence_GetCellOnPage final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStepSequenceCell                      ReturnValue;                                       // 0x000C(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_GetCellOnPage) == 0x000004, "Wrong alignment on MidiStepSequence_GetCellOnPage");
static_assert(sizeof(MidiStepSequence_GetCellOnPage) == 0x000010, "Wrong size on MidiStepSequence_GetCellOnPage");
static_assert(offsetof(MidiStepSequence_GetCellOnPage, Page) == 0x000000, "Member 'MidiStepSequence_GetCellOnPage::Page' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_GetCellOnPage, Row) == 0x000004, "Member 'MidiStepSequence_GetCellOnPage::Row' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_GetCellOnPage, Column) == 0x000008, "Member 'MidiStepSequence_GetCellOnPage::Column' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_GetCellOnPage, ReturnValue) == 0x00000C, "Member 'MidiStepSequence_GetCellOnPage::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetCell
// 0x000C (0x000C - 0x0000)
struct MidiStepSequence_SetCell final
{
public:
	int32                                         Row;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStepSequenceCell                      ReturnValue;                                       // 0x0009(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_SetCell) == 0x000004, "Wrong alignment on MidiStepSequence_SetCell");
static_assert(sizeof(MidiStepSequence_SetCell) == 0x00000C, "Wrong size on MidiStepSequence_SetCell");
static_assert(offsetof(MidiStepSequence_SetCell, Row) == 0x000000, "Member 'MidiStepSequence_SetCell::Row' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCell, Column) == 0x000004, "Member 'MidiStepSequence_SetCell::Column' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCell, State) == 0x000008, "Member 'MidiStepSequence_SetCell::State' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCell, ReturnValue) == 0x000009, "Member 'MidiStepSequence_SetCell::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetCellContinuation
// 0x000C (0x000C - 0x0000)
struct MidiStepSequence_SetCellContinuation final
{
public:
	int32                                         Row;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStepSequenceCell                      ReturnValue;                                       // 0x0009(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_SetCellContinuation) == 0x000004, "Wrong alignment on MidiStepSequence_SetCellContinuation");
static_assert(sizeof(MidiStepSequence_SetCellContinuation) == 0x00000C, "Wrong size on MidiStepSequence_SetCellContinuation");
static_assert(offsetof(MidiStepSequence_SetCellContinuation, Row) == 0x000000, "Member 'MidiStepSequence_SetCellContinuation::Row' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellContinuation, Column) == 0x000004, "Member 'MidiStepSequence_SetCellContinuation::Column' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellContinuation, bState) == 0x000008, "Member 'MidiStepSequence_SetCellContinuation::bState' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellContinuation, ReturnValue) == 0x000009, "Member 'MidiStepSequence_SetCellContinuation::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetCellContinuationOnPage
// 0x0010 (0x0010 - 0x0000)
struct MidiStepSequence_SetCellContinuationOnPage final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStepSequenceCell                      ReturnValue;                                       // 0x000D(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_SetCellContinuationOnPage) == 0x000004, "Wrong alignment on MidiStepSequence_SetCellContinuationOnPage");
static_assert(sizeof(MidiStepSequence_SetCellContinuationOnPage) == 0x000010, "Wrong size on MidiStepSequence_SetCellContinuationOnPage");
static_assert(offsetof(MidiStepSequence_SetCellContinuationOnPage, Page) == 0x000000, "Member 'MidiStepSequence_SetCellContinuationOnPage::Page' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellContinuationOnPage, Row) == 0x000004, "Member 'MidiStepSequence_SetCellContinuationOnPage::Row' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellContinuationOnPage, Column) == 0x000008, "Member 'MidiStepSequence_SetCellContinuationOnPage::Column' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellContinuationOnPage, bState) == 0x00000C, "Member 'MidiStepSequence_SetCellContinuationOnPage::bState' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellContinuationOnPage, ReturnValue) == 0x00000D, "Member 'MidiStepSequence_SetCellContinuationOnPage::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetCellOnPage
// 0x0010 (0x0010 - 0x0000)
struct MidiStepSequence_SetCellOnPage final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStepSequenceCell                      ReturnValue;                                       // 0x000D(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_SetCellOnPage) == 0x000004, "Wrong alignment on MidiStepSequence_SetCellOnPage");
static_assert(sizeof(MidiStepSequence_SetCellOnPage) == 0x000010, "Wrong size on MidiStepSequence_SetCellOnPage");
static_assert(offsetof(MidiStepSequence_SetCellOnPage, Page) == 0x000000, "Member 'MidiStepSequence_SetCellOnPage::Page' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellOnPage, Row) == 0x000004, "Member 'MidiStepSequence_SetCellOnPage::Row' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellOnPage, Column) == 0x000008, "Member 'MidiStepSequence_SetCellOnPage::Column' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellOnPage, State) == 0x00000C, "Member 'MidiStepSequence_SetCellOnPage::State' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetCellOnPage, ReturnValue) == 0x00000D, "Member 'MidiStepSequence_SetCellOnPage::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetNumColumns
// 0x0004 (0x0004 - 0x0000)
struct MidiStepSequence_SetNumColumns final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiStepSequence_SetNumColumns) == 0x000004, "Wrong alignment on MidiStepSequence_SetNumColumns");
static_assert(sizeof(MidiStepSequence_SetNumColumns) == 0x000004, "Wrong size on MidiStepSequence_SetNumColumns");
static_assert(offsetof(MidiStepSequence_SetNumColumns, Count) == 0x000000, "Member 'MidiStepSequence_SetNumColumns::Count' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetNumPages
// 0x0004 (0x0004 - 0x0000)
struct MidiStepSequence_SetNumPages final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiStepSequence_SetNumPages) == 0x000004, "Wrong alignment on MidiStepSequence_SetNumPages");
static_assert(sizeof(MidiStepSequence_SetNumPages) == 0x000004, "Wrong size on MidiStepSequence_SetNumPages");
static_assert(offsetof(MidiStepSequence_SetNumPages, Count) == 0x000000, "Member 'MidiStepSequence_SetNumPages::Count' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetNumRows
// 0x0004 (0x0004 - 0x0000)
struct MidiStepSequence_SetNumRows final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiStepSequence_SetNumRows) == 0x000004, "Wrong alignment on MidiStepSequence_SetNumRows");
static_assert(sizeof(MidiStepSequence_SetNumRows) == 0x000004, "Wrong size on MidiStepSequence_SetNumRows");
static_assert(offsetof(MidiStepSequence_SetNumRows, Count) == 0x000000, "Member 'MidiStepSequence_SetNumRows::Count' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetRowNoteNumber
// 0x000C (0x000C - 0x0000)
struct MidiStepSequence_SetRowNoteNumber final
{
public:
	int32                                         RowIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MidiNoteNumber;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_SetRowNoteNumber) == 0x000004, "Wrong alignment on MidiStepSequence_SetRowNoteNumber");
static_assert(sizeof(MidiStepSequence_SetRowNoteNumber) == 0x00000C, "Wrong size on MidiStepSequence_SetRowNoteNumber");
static_assert(offsetof(MidiStepSequence_SetRowNoteNumber, RowIndex) == 0x000000, "Member 'MidiStepSequence_SetRowNoteNumber::RowIndex' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetRowNoteNumber, MidiNoteNumber) == 0x000004, "Member 'MidiStepSequence_SetRowNoteNumber::MidiNoteNumber' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetRowNoteNumber, ReturnValue) == 0x000008, "Member 'MidiStepSequence_SetRowNoteNumber::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetRowVelocity
// 0x000C (0x000C - 0x0000)
struct MidiStepSequence_SetRowVelocity final
{
public:
	int32                                         RowIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MidiVelocoty;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_SetRowVelocity) == 0x000004, "Wrong alignment on MidiStepSequence_SetRowVelocity");
static_assert(sizeof(MidiStepSequence_SetRowVelocity) == 0x00000C, "Wrong size on MidiStepSequence_SetRowVelocity");
static_assert(offsetof(MidiStepSequence_SetRowVelocity, RowIndex) == 0x000000, "Member 'MidiStepSequence_SetRowVelocity::RowIndex' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetRowVelocity, MidiVelocoty) == 0x000004, "Member 'MidiStepSequence_SetRowVelocity::MidiVelocoty' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetRowVelocity, ReturnValue) == 0x000008, "Member 'MidiStepSequence_SetRowVelocity::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetStepSkipIndex
// 0x0008 (0x0008 - 0x0000)
struct MidiStepSequence_SetStepSkipIndex final
{
public:
	int32                                         StepIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_SetStepSkipIndex) == 0x000004, "Wrong alignment on MidiStepSequence_SetStepSkipIndex");
static_assert(sizeof(MidiStepSequence_SetStepSkipIndex) == 0x000008, "Wrong size on MidiStepSequence_SetStepSkipIndex");
static_assert(offsetof(MidiStepSequence_SetStepSkipIndex, StepIndex) == 0x000000, "Member 'MidiStepSequence_SetStepSkipIndex::StepIndex' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_SetStepSkipIndex, ReturnValue) == 0x000004, "Member 'MidiStepSequence_SetStepSkipIndex::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.SetStepTable
// 0x0028 (0x0028 - 0x0000)
struct MidiStepSequence_SetStepTable final
{
public:
	struct FStepSequenceTable                     NewStepTable;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiStepSequence_SetStepTable) == 0x000008, "Wrong alignment on MidiStepSequence_SetStepTable");
static_assert(sizeof(MidiStepSequence_SetStepTable) == 0x000028, "Wrong size on MidiStepSequence_SetStepTable");
static_assert(offsetof(MidiStepSequence_SetStepTable, NewStepTable) == 0x000000, "Member 'MidiStepSequence_SetStepTable::NewStepTable' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.ToggleCell
// 0x000C (0x000C - 0x0000)
struct MidiStepSequence_ToggleCell final
{
public:
	int32                                         Row;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStepSequenceCell                      ReturnValue;                                       // 0x0008(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_ToggleCell) == 0x000004, "Wrong alignment on MidiStepSequence_ToggleCell");
static_assert(sizeof(MidiStepSequence_ToggleCell) == 0x00000C, "Wrong size on MidiStepSequence_ToggleCell");
static_assert(offsetof(MidiStepSequence_ToggleCell, Row) == 0x000000, "Member 'MidiStepSequence_ToggleCell::Row' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_ToggleCell, Column) == 0x000004, "Member 'MidiStepSequence_ToggleCell::Column' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_ToggleCell, ReturnValue) == 0x000008, "Member 'MidiStepSequence_ToggleCell::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.ToggleCellOnPage
// 0x0010 (0x0010 - 0x0000)
struct MidiStepSequence_ToggleCellOnPage final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStepSequenceCell                      ReturnValue;                                       // 0x000C(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiStepSequence_ToggleCellOnPage) == 0x000004, "Wrong alignment on MidiStepSequence_ToggleCellOnPage");
static_assert(sizeof(MidiStepSequence_ToggleCellOnPage) == 0x000010, "Wrong size on MidiStepSequence_ToggleCellOnPage");
static_assert(offsetof(MidiStepSequence_ToggleCellOnPage, Page) == 0x000000, "Member 'MidiStepSequence_ToggleCellOnPage::Page' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_ToggleCellOnPage, Row) == 0x000004, "Member 'MidiStepSequence_ToggleCellOnPage::Row' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_ToggleCellOnPage, Column) == 0x000008, "Member 'MidiStepSequence_ToggleCellOnPage::Column' has a wrong offset!");
static_assert(offsetof(MidiStepSequence_ToggleCellOnPage, ReturnValue) == 0x00000C, "Member 'MidiStepSequence_ToggleCellOnPage::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MidiStepSequence.GetStepTable
// 0x0028 (0x0028 - 0x0000)
struct MidiStepSequence_GetStepTable final
{
public:
	struct FStepSequenceTable                     ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiStepSequence_GetStepTable) == 0x000008, "Wrong alignment on MidiStepSequence_GetStepTable");
static_assert(sizeof(MidiStepSequence_GetStepTable) == 0x000028, "Wrong size on MidiStepSequence_GetStepTable");
static_assert(offsetof(MidiStepSequence_GetStepTable, ReturnValue) == 0x000000, "Member 'MidiStepSequence_GetStepTable::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicParameterBlueprintLibrary.SetMusicLoopConfiguration
// 0x0028 (0x0028 - 0x0000)
struct MusicParameterBlueprintLibrary_SetMusicLoopConfiguration final
{
public:
	class UMetasoundParameterPack*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMusicLoopConfiguration                Value;                                             // 0x000C(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ESetParamResult                               Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyIfExists;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicParameterBlueprintLibrary_SetMusicLoopConfiguration) == 0x000008, "Wrong alignment on MusicParameterBlueprintLibrary_SetMusicLoopConfiguration");
static_assert(sizeof(MusicParameterBlueprintLibrary_SetMusicLoopConfiguration) == 0x000028, "Wrong size on MusicParameterBlueprintLibrary_SetMusicLoopConfiguration");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicLoopConfiguration, Target) == 0x000000, "Member 'MusicParameterBlueprintLibrary_SetMusicLoopConfiguration::Target' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicLoopConfiguration, ParameterName) == 0x000008, "Member 'MusicParameterBlueprintLibrary_SetMusicLoopConfiguration::ParameterName' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicLoopConfiguration, Value) == 0x00000C, "Member 'MusicParameterBlueprintLibrary_SetMusicLoopConfiguration::Value' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicLoopConfiguration, Result) == 0x000020, "Member 'MusicParameterBlueprintLibrary_SetMusicLoopConfiguration::Result' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicLoopConfiguration, OnlyIfExists) == 0x000021, "Member 'MusicParameterBlueprintLibrary_SetMusicLoopConfiguration::OnlyIfExists' has a wrong offset!");

// Function HarmonixMetasound.MusicParameterBlueprintLibrary.SetMusicSeekRequest
// 0x0028 (0x0028 - 0x0000)
struct MusicParameterBlueprintLibrary_SetMusicSeekRequest final
{
public:
	class UMetasoundParameterPack*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMusicSeekRequest                      Value;                                             // 0x000C(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ESetParamResult                               Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyIfExists;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicParameterBlueprintLibrary_SetMusicSeekRequest) == 0x000008, "Wrong alignment on MusicParameterBlueprintLibrary_SetMusicSeekRequest");
static_assert(sizeof(MusicParameterBlueprintLibrary_SetMusicSeekRequest) == 0x000028, "Wrong size on MusicParameterBlueprintLibrary_SetMusicSeekRequest");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicSeekRequest, Target) == 0x000000, "Member 'MusicParameterBlueprintLibrary_SetMusicSeekRequest::Target' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicSeekRequest, ParameterName) == 0x000008, "Member 'MusicParameterBlueprintLibrary_SetMusicSeekRequest::ParameterName' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicSeekRequest, Value) == 0x00000C, "Member 'MusicParameterBlueprintLibrary_SetMusicSeekRequest::Value' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicSeekRequest, Result) == 0x000020, "Member 'MusicParameterBlueprintLibrary_SetMusicSeekRequest::Result' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicSeekRequest, OnlyIfExists) == 0x000021, "Member 'MusicParameterBlueprintLibrary_SetMusicSeekRequest::OnlyIfExists' has a wrong offset!");

// Function HarmonixMetasound.MusicParameterBlueprintLibrary.SetMusicTimestamp
// 0x0018 (0x0018 - 0x0000)
struct MusicParameterBlueprintLibrary_SetMusicTimestamp final
{
public:
	class UMetasoundParameterPack*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMusicTimestamp                        Value;                                             // 0x000C(0x0008)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ESetParamResult                               Result;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyIfExists;                                      // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicParameterBlueprintLibrary_SetMusicTimestamp) == 0x000008, "Wrong alignment on MusicParameterBlueprintLibrary_SetMusicTimestamp");
static_assert(sizeof(MusicParameterBlueprintLibrary_SetMusicTimestamp) == 0x000018, "Wrong size on MusicParameterBlueprintLibrary_SetMusicTimestamp");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicTimestamp, Target) == 0x000000, "Member 'MusicParameterBlueprintLibrary_SetMusicTimestamp::Target' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicTimestamp, ParameterName) == 0x000008, "Member 'MusicParameterBlueprintLibrary_SetMusicTimestamp::ParameterName' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicTimestamp, Value) == 0x00000C, "Member 'MusicParameterBlueprintLibrary_SetMusicTimestamp::Value' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicTimestamp, Result) == 0x000014, "Member 'MusicParameterBlueprintLibrary_SetMusicTimestamp::Result' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_SetMusicTimestamp, OnlyIfExists) == 0x000015, "Member 'MusicParameterBlueprintLibrary_SetMusicTimestamp::OnlyIfExists' has a wrong offset!");

// Function HarmonixMetasound.MusicParameterBlueprintLibrary.GetMusicLoopConfiguration
// 0x0028 (0x0028 - 0x0000)
struct MusicParameterBlueprintLibrary_GetMusicLoopConfiguration final
{
public:
	class UMetasoundParameterPack*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetParamResult                               Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicLoopConfiguration                ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicParameterBlueprintLibrary_GetMusicLoopConfiguration) == 0x000008, "Wrong alignment on MusicParameterBlueprintLibrary_GetMusicLoopConfiguration");
static_assert(sizeof(MusicParameterBlueprintLibrary_GetMusicLoopConfiguration) == 0x000028, "Wrong size on MusicParameterBlueprintLibrary_GetMusicLoopConfiguration");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicLoopConfiguration, Target) == 0x000000, "Member 'MusicParameterBlueprintLibrary_GetMusicLoopConfiguration::Target' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicLoopConfiguration, ParameterName) == 0x000008, "Member 'MusicParameterBlueprintLibrary_GetMusicLoopConfiguration::ParameterName' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicLoopConfiguration, Result) == 0x00000C, "Member 'MusicParameterBlueprintLibrary_GetMusicLoopConfiguration::Result' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicLoopConfiguration, ReturnValue) == 0x000010, "Member 'MusicParameterBlueprintLibrary_GetMusicLoopConfiguration::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicParameterBlueprintLibrary.GetMusicSeekRequest
// 0x0028 (0x0028 - 0x0000)
struct MusicParameterBlueprintLibrary_GetMusicSeekRequest final
{
public:
	class UMetasoundParameterPack*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetParamResult                               Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicSeekRequest                      ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicParameterBlueprintLibrary_GetMusicSeekRequest) == 0x000008, "Wrong alignment on MusicParameterBlueprintLibrary_GetMusicSeekRequest");
static_assert(sizeof(MusicParameterBlueprintLibrary_GetMusicSeekRequest) == 0x000028, "Wrong size on MusicParameterBlueprintLibrary_GetMusicSeekRequest");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicSeekRequest, Target) == 0x000000, "Member 'MusicParameterBlueprintLibrary_GetMusicSeekRequest::Target' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicSeekRequest, ParameterName) == 0x000008, "Member 'MusicParameterBlueprintLibrary_GetMusicSeekRequest::ParameterName' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicSeekRequest, Result) == 0x00000C, "Member 'MusicParameterBlueprintLibrary_GetMusicSeekRequest::Result' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicSeekRequest, ReturnValue) == 0x000010, "Member 'MusicParameterBlueprintLibrary_GetMusicSeekRequest::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicParameterBlueprintLibrary.GetMusicTimestamp
// 0x0018 (0x0018 - 0x0000)
struct MusicParameterBlueprintLibrary_GetMusicTimestamp final
{
public:
	class UMetasoundParameterPack*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetParamResult                               Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicTimestamp                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicParameterBlueprintLibrary_GetMusicTimestamp) == 0x000008, "Wrong alignment on MusicParameterBlueprintLibrary_GetMusicTimestamp");
static_assert(sizeof(MusicParameterBlueprintLibrary_GetMusicTimestamp) == 0x000018, "Wrong size on MusicParameterBlueprintLibrary_GetMusicTimestamp");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicTimestamp, Target) == 0x000000, "Member 'MusicParameterBlueprintLibrary_GetMusicTimestamp::Target' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicTimestamp, ParameterName) == 0x000008, "Member 'MusicParameterBlueprintLibrary_GetMusicTimestamp::ParameterName' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicTimestamp, Result) == 0x00000C, "Member 'MusicParameterBlueprintLibrary_GetMusicTimestamp::Result' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_GetMusicTimestamp, ReturnValue) == 0x000010, "Member 'MusicParameterBlueprintLibrary_GetMusicTimestamp::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicParameterBlueprintLibrary.HasMusicLoopConfiguration
// 0x0010 (0x0010 - 0x0000)
struct MusicParameterBlueprintLibrary_HasMusicLoopConfiguration final
{
public:
	class UMetasoundParameterPack*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicParameterBlueprintLibrary_HasMusicLoopConfiguration) == 0x000008, "Wrong alignment on MusicParameterBlueprintLibrary_HasMusicLoopConfiguration");
static_assert(sizeof(MusicParameterBlueprintLibrary_HasMusicLoopConfiguration) == 0x000010, "Wrong size on MusicParameterBlueprintLibrary_HasMusicLoopConfiguration");
static_assert(offsetof(MusicParameterBlueprintLibrary_HasMusicLoopConfiguration, Target) == 0x000000, "Member 'MusicParameterBlueprintLibrary_HasMusicLoopConfiguration::Target' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_HasMusicLoopConfiguration, Name_0) == 0x000008, "Member 'MusicParameterBlueprintLibrary_HasMusicLoopConfiguration::Name_0' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_HasMusicLoopConfiguration, ReturnValue) == 0x00000C, "Member 'MusicParameterBlueprintLibrary_HasMusicLoopConfiguration::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicParameterBlueprintLibrary.HasMusicSeekRequest
// 0x0010 (0x0010 - 0x0000)
struct MusicParameterBlueprintLibrary_HasMusicSeekRequest final
{
public:
	class UMetasoundParameterPack*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicParameterBlueprintLibrary_HasMusicSeekRequest) == 0x000008, "Wrong alignment on MusicParameterBlueprintLibrary_HasMusicSeekRequest");
static_assert(sizeof(MusicParameterBlueprintLibrary_HasMusicSeekRequest) == 0x000010, "Wrong size on MusicParameterBlueprintLibrary_HasMusicSeekRequest");
static_assert(offsetof(MusicParameterBlueprintLibrary_HasMusicSeekRequest, Target) == 0x000000, "Member 'MusicParameterBlueprintLibrary_HasMusicSeekRequest::Target' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_HasMusicSeekRequest, Name_0) == 0x000008, "Member 'MusicParameterBlueprintLibrary_HasMusicSeekRequest::Name_0' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_HasMusicSeekRequest, ReturnValue) == 0x00000C, "Member 'MusicParameterBlueprintLibrary_HasMusicSeekRequest::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicParameterBlueprintLibrary.HasMusicTimestamp
// 0x0010 (0x0010 - 0x0000)
struct MusicParameterBlueprintLibrary_HasMusicTimestamp final
{
public:
	class UMetasoundParameterPack*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicParameterBlueprintLibrary_HasMusicTimestamp) == 0x000008, "Wrong alignment on MusicParameterBlueprintLibrary_HasMusicTimestamp");
static_assert(sizeof(MusicParameterBlueprintLibrary_HasMusicTimestamp) == 0x000010, "Wrong size on MusicParameterBlueprintLibrary_HasMusicTimestamp");
static_assert(offsetof(MusicParameterBlueprintLibrary_HasMusicTimestamp, Target) == 0x000000, "Member 'MusicParameterBlueprintLibrary_HasMusicTimestamp::Target' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_HasMusicTimestamp, Name_0) == 0x000008, "Member 'MusicParameterBlueprintLibrary_HasMusicTimestamp::Name_0' has a wrong offset!");
static_assert(offsetof(MusicParameterBlueprintLibrary_HasMusicTimestamp, ReturnValue) == 0x00000C, "Member 'MusicParameterBlueprintLibrary_HasMusicTimestamp::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTimestampBlueprintLibrary.GetMusicTimestamp
// 0x0020 (0x0020 - 0x0000)
struct MusicTimestampBlueprintLibrary_GetMusicTimestamp final
{
public:
	struct FMetaSoundOutput                       Output;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicTimestamp                        ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicTimestampBlueprintLibrary_GetMusicTimestamp) == 0x000008, "Wrong alignment on MusicTimestampBlueprintLibrary_GetMusicTimestamp");
static_assert(sizeof(MusicTimestampBlueprintLibrary_GetMusicTimestamp) == 0x000020, "Wrong size on MusicTimestampBlueprintLibrary_GetMusicTimestamp");
static_assert(offsetof(MusicTimestampBlueprintLibrary_GetMusicTimestamp, Output) == 0x000000, "Member 'MusicTimestampBlueprintLibrary_GetMusicTimestamp::Output' has a wrong offset!");
static_assert(offsetof(MusicTimestampBlueprintLibrary_GetMusicTimestamp, Success) == 0x000010, "Member 'MusicTimestampBlueprintLibrary_GetMusicTimestamp::Success' has a wrong offset!");
static_assert(offsetof(MusicTimestampBlueprintLibrary_GetMusicTimestamp, ReturnValue) == 0x000014, "Member 'MusicTimestampBlueprintLibrary_GetMusicTimestamp::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTimestampBlueprintLibrary.IsMusicTimestamp
// 0x0018 (0x0018 - 0x0000)
struct MusicTimestampBlueprintLibrary_IsMusicTimestamp final
{
public:
	struct FMetaSoundOutput                       Output;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicTimestampBlueprintLibrary_IsMusicTimestamp) == 0x000008, "Wrong alignment on MusicTimestampBlueprintLibrary_IsMusicTimestamp");
static_assert(sizeof(MusicTimestampBlueprintLibrary_IsMusicTimestamp) == 0x000018, "Wrong size on MusicTimestampBlueprintLibrary_IsMusicTimestamp");
static_assert(offsetof(MusicTimestampBlueprintLibrary_IsMusicTimestamp, Output) == 0x000000, "Member 'MusicTimestampBlueprintLibrary_IsMusicTimestamp::Output' has a wrong offset!");
static_assert(offsetof(MusicTimestampBlueprintLibrary_IsMusicTimestamp, ReturnValue) == 0x000010, "Member 'MusicTimestampBlueprintLibrary_IsMusicTimestamp::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.TimeSignatureBlueprintLibrary.GetTimeSignature
// 0x0018 (0x0018 - 0x0000)
struct TimeSignatureBlueprintLibrary_GetTimeSignature final
{
public:
	struct FMetaSoundOutput                       Output;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x1];                                       // 0x0011(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeSignature                         ReturnValue;                                       // 0x0012(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeSignatureBlueprintLibrary_GetTimeSignature) == 0x000008, "Wrong alignment on TimeSignatureBlueprintLibrary_GetTimeSignature");
static_assert(sizeof(TimeSignatureBlueprintLibrary_GetTimeSignature) == 0x000018, "Wrong size on TimeSignatureBlueprintLibrary_GetTimeSignature");
static_assert(offsetof(TimeSignatureBlueprintLibrary_GetTimeSignature, Output) == 0x000000, "Member 'TimeSignatureBlueprintLibrary_GetTimeSignature::Output' has a wrong offset!");
static_assert(offsetof(TimeSignatureBlueprintLibrary_GetTimeSignature, Success) == 0x000010, "Member 'TimeSignatureBlueprintLibrary_GetTimeSignature::Success' has a wrong offset!");
static_assert(offsetof(TimeSignatureBlueprintLibrary_GetTimeSignature, ReturnValue) == 0x000012, "Member 'TimeSignatureBlueprintLibrary_GetTimeSignature::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.TimeSignatureBlueprintLibrary.IsTimeSignature
// 0x0018 (0x0018 - 0x0000)
struct TimeSignatureBlueprintLibrary_IsTimeSignature final
{
public:
	struct FMetaSoundOutput                       Output;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimeSignatureBlueprintLibrary_IsTimeSignature) == 0x000008, "Wrong alignment on TimeSignatureBlueprintLibrary_IsTimeSignature");
static_assert(sizeof(TimeSignatureBlueprintLibrary_IsTimeSignature) == 0x000018, "Wrong size on TimeSignatureBlueprintLibrary_IsTimeSignature");
static_assert(offsetof(TimeSignatureBlueprintLibrary_IsTimeSignature, Output) == 0x000000, "Member 'TimeSignatureBlueprintLibrary_IsTimeSignature::Output' has a wrong offset!");
static_assert(offsetof(TimeSignatureBlueprintLibrary_IsTimeSignature, ReturnValue) == 0x000010, "Member 'TimeSignatureBlueprintLibrary_IsTimeSignature::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.CreateMetasoundDrivenMusicClock
// 0x0020 (0x0020 - 0x0000)
struct MusicClockComponent_CreateMetasoundDrivenMusicClock final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        InAudioComponent;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MetasoundOuputPinName;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Start_0;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMusicClockComponent*                   ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_CreateMetasoundDrivenMusicClock) == 0x000008, "Wrong alignment on MusicClockComponent_CreateMetasoundDrivenMusicClock");
static_assert(sizeof(MusicClockComponent_CreateMetasoundDrivenMusicClock) == 0x000020, "Wrong size on MusicClockComponent_CreateMetasoundDrivenMusicClock");
static_assert(offsetof(MusicClockComponent_CreateMetasoundDrivenMusicClock, WorldContextObject) == 0x000000, "Member 'MusicClockComponent_CreateMetasoundDrivenMusicClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_CreateMetasoundDrivenMusicClock, InAudioComponent) == 0x000008, "Member 'MusicClockComponent_CreateMetasoundDrivenMusicClock::InAudioComponent' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_CreateMetasoundDrivenMusicClock, MetasoundOuputPinName) == 0x000010, "Member 'MusicClockComponent_CreateMetasoundDrivenMusicClock::MetasoundOuputPinName' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_CreateMetasoundDrivenMusicClock, Start_0) == 0x000014, "Member 'MusicClockComponent_CreateMetasoundDrivenMusicClock::Start_0' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_CreateMetasoundDrivenMusicClock, ReturnValue) == 0x000018, "Member 'MusicClockComponent_CreateMetasoundDrivenMusicClock::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.CreateWallClockDrivenMusicClock
// 0x0020 (0x0020 - 0x0000)
struct MusicClockComponent_CreateWallClockDrivenMusicClock final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMidiFile*                              WithTempoMap;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Start_0;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMusicClockComponent*                   ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_CreateWallClockDrivenMusicClock) == 0x000008, "Wrong alignment on MusicClockComponent_CreateWallClockDrivenMusicClock");
static_assert(sizeof(MusicClockComponent_CreateWallClockDrivenMusicClock) == 0x000020, "Wrong size on MusicClockComponent_CreateWallClockDrivenMusicClock");
static_assert(offsetof(MusicClockComponent_CreateWallClockDrivenMusicClock, WorldContextObject) == 0x000000, "Member 'MusicClockComponent_CreateWallClockDrivenMusicClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_CreateWallClockDrivenMusicClock, WithTempoMap) == 0x000008, "Member 'MusicClockComponent_CreateWallClockDrivenMusicClock::WithTempoMap' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_CreateWallClockDrivenMusicClock, Start_0) == 0x000010, "Member 'MusicClockComponent_CreateWallClockDrivenMusicClock::Start_0' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_CreateWallClockDrivenMusicClock, ReturnValue) == 0x000018, "Member 'MusicClockComponent_CreateWallClockDrivenMusicClock::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.ConnectToMetasoundOnAudioComponent
// 0x0010 (0x0010 - 0x0000)
struct MusicClockComponent_ConnectToMetasoundOnAudioComponent final
{
public:
	class UAudioComponent*                        InAudioComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MusicClockComponent_ConnectToMetasoundOnAudioComponent) == 0x000008, "Wrong alignment on MusicClockComponent_ConnectToMetasoundOnAudioComponent");
static_assert(sizeof(MusicClockComponent_ConnectToMetasoundOnAudioComponent) == 0x000010, "Wrong size on MusicClockComponent_ConnectToMetasoundOnAudioComponent");
static_assert(offsetof(MusicClockComponent_ConnectToMetasoundOnAudioComponent, InAudioComponent) == 0x000000, "Member 'MusicClockComponent_ConnectToMetasoundOnAudioComponent::InAudioComponent' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_ConnectToMetasoundOnAudioComponent, ReturnValue) == 0x000008, "Member 'MusicClockComponent_ConnectToMetasoundOnAudioComponent::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.ConnectToWallClockForMidi
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_ConnectToWallClockForMidi final
{
public:
	class UMidiFile*                              InTempoMap;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_ConnectToWallClockForMidi) == 0x000008, "Wrong alignment on MusicClockComponent_ConnectToWallClockForMidi");
static_assert(sizeof(MusicClockComponent_ConnectToWallClockForMidi) == 0x000008, "Wrong size on MusicClockComponent_ConnectToWallClockForMidi");
static_assert(offsetof(MusicClockComponent_ConnectToWallClockForMidi, InTempoMap) == 0x000000, "Member 'MusicClockComponent_ConnectToWallClockForMidi::InTempoMap' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.BarToMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_BarToMs final
{
public:
	float                                         Bar;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_BarToMs) == 0x000004, "Wrong alignment on MusicClockComponent_BarToMs");
static_assert(sizeof(MusicClockComponent_BarToMs) == 0x000008, "Wrong size on MusicClockComponent_BarToMs");
static_assert(offsetof(MusicClockComponent_BarToMs, Bar) == 0x000000, "Member 'MusicClockComponent_BarToMs::Bar' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_BarToMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_BarToMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.BeatToMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_BeatToMs final
{
public:
	float                                         Beat;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_BeatToMs) == 0x000004, "Wrong alignment on MusicClockComponent_BeatToMs");
static_assert(sizeof(MusicClockComponent_BeatToMs) == 0x000008, "Wrong size on MusicClockComponent_BeatToMs");
static_assert(offsetof(MusicClockComponent_BeatToMs, Beat) == 0x000000, "Member 'MusicClockComponent_BeatToMs::Beat' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_BeatToMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_BeatToMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetBarsIncludingCountIn
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetBarsIncludingCountIn final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetBarsIncludingCountIn) == 0x000004, "Wrong alignment on MusicClockComponent_GetBarsIncludingCountIn");
static_assert(sizeof(MusicClockComponent_GetBarsIncludingCountIn) == 0x000008, "Wrong size on MusicClockComponent_GetBarsIncludingCountIn");
static_assert(offsetof(MusicClockComponent_GetBarsIncludingCountIn, Timebase) == 0x000000, "Member 'MusicClockComponent_GetBarsIncludingCountIn::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetBarsIncludingCountIn, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetBarsIncludingCountIn::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetBeatInBarAtMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetBeatInBarAtMs final
{
public:
	float                                         Ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetBeatInBarAtMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetBeatInBarAtMs");
static_assert(sizeof(MusicClockComponent_GetBeatInBarAtMs) == 0x000008, "Wrong size on MusicClockComponent_GetBeatInBarAtMs");
static_assert(offsetof(MusicClockComponent_GetBeatInBarAtMs, Ms) == 0x000000, "Member 'MusicClockComponent_GetBeatInBarAtMs::Ms' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetBeatInBarAtMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetBeatInBarAtMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetBeatsIncludingCountIn
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetBeatsIncludingCountIn final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetBeatsIncludingCountIn) == 0x000004, "Wrong alignment on MusicClockComponent_GetBeatsIncludingCountIn");
static_assert(sizeof(MusicClockComponent_GetBeatsIncludingCountIn) == 0x000008, "Wrong size on MusicClockComponent_GetBeatsIncludingCountIn");
static_assert(offsetof(MusicClockComponent_GetBeatsIncludingCountIn, Timebase) == 0x000000, "Member 'MusicClockComponent_GetBeatsIncludingCountIn::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetBeatsIncludingCountIn, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetBeatsIncludingCountIn::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetCountInSeconds
// 0x0004 (0x0004 - 0x0000)
struct MusicClockComponent_GetCountInSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetCountInSeconds) == 0x000004, "Wrong alignment on MusicClockComponent_GetCountInSeconds");
static_assert(sizeof(MusicClockComponent_GetCountInSeconds) == 0x000004, "Wrong size on MusicClockComponent_GetCountInSeconds");
static_assert(offsetof(MusicClockComponent_GetCountInSeconds, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetCountInSeconds::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetCurrentPlayerExperiencedSongPos
// 0x0040 (0x0040 - 0x0000)
struct MusicClockComponent_GetCurrentPlayerExperiencedSongPos final
{
public:
	struct FMidiSongPos                           ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetCurrentPlayerExperiencedSongPos) == 0x000008, "Wrong alignment on MusicClockComponent_GetCurrentPlayerExperiencedSongPos");
static_assert(sizeof(MusicClockComponent_GetCurrentPlayerExperiencedSongPos) == 0x000040, "Wrong size on MusicClockComponent_GetCurrentPlayerExperiencedSongPos");
static_assert(offsetof(MusicClockComponent_GetCurrentPlayerExperiencedSongPos, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetCurrentPlayerExperiencedSongPos::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetCurrentSectionIndex
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetCurrentSectionIndex final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetCurrentSectionIndex) == 0x000004, "Wrong alignment on MusicClockComponent_GetCurrentSectionIndex");
static_assert(sizeof(MusicClockComponent_GetCurrentSectionIndex) == 0x000008, "Wrong size on MusicClockComponent_GetCurrentSectionIndex");
static_assert(offsetof(MusicClockComponent_GetCurrentSectionIndex, Timebase) == 0x000000, "Member 'MusicClockComponent_GetCurrentSectionIndex::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetCurrentSectionIndex, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetCurrentSectionIndex::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetCurrentSectionLengthMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetCurrentSectionLengthMs final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetCurrentSectionLengthMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetCurrentSectionLengthMs");
static_assert(sizeof(MusicClockComponent_GetCurrentSectionLengthMs) == 0x000008, "Wrong size on MusicClockComponent_GetCurrentSectionLengthMs");
static_assert(offsetof(MusicClockComponent_GetCurrentSectionLengthMs, Timebase) == 0x000000, "Member 'MusicClockComponent_GetCurrentSectionLengthMs::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetCurrentSectionLengthMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetCurrentSectionLengthMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetCurrentSectionName
// 0x0018 (0x0018 - 0x0000)
struct MusicClockComponent_GetCurrentSectionName final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetCurrentSectionName) == 0x000008, "Wrong alignment on MusicClockComponent_GetCurrentSectionName");
static_assert(sizeof(MusicClockComponent_GetCurrentSectionName) == 0x000018, "Wrong size on MusicClockComponent_GetCurrentSectionName");
static_assert(offsetof(MusicClockComponent_GetCurrentSectionName, Timebase) == 0x000000, "Member 'MusicClockComponent_GetCurrentSectionName::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetCurrentSectionName, ReturnValue) == 0x000008, "Member 'MusicClockComponent_GetCurrentSectionName::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetCurrentSectionStartMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetCurrentSectionStartMs final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetCurrentSectionStartMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetCurrentSectionStartMs");
static_assert(sizeof(MusicClockComponent_GetCurrentSectionStartMs) == 0x000008, "Wrong size on MusicClockComponent_GetCurrentSectionStartMs");
static_assert(offsetof(MusicClockComponent_GetCurrentSectionStartMs, Timebase) == 0x000000, "Member 'MusicClockComponent_GetCurrentSectionStartMs::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetCurrentSectionStartMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetCurrentSectionStartMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetCurrentSmoothedAudioRenderSongPos
// 0x0040 (0x0040 - 0x0000)
struct MusicClockComponent_GetCurrentSmoothedAudioRenderSongPos final
{
public:
	struct FMidiSongPos                           ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetCurrentSmoothedAudioRenderSongPos) == 0x000008, "Wrong alignment on MusicClockComponent_GetCurrentSmoothedAudioRenderSongPos");
static_assert(sizeof(MusicClockComponent_GetCurrentSmoothedAudioRenderSongPos) == 0x000040, "Wrong size on MusicClockComponent_GetCurrentSmoothedAudioRenderSongPos");
static_assert(offsetof(MusicClockComponent_GetCurrentSmoothedAudioRenderSongPos, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetCurrentSmoothedAudioRenderSongPos::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetCurrentTimestamp
// 0x000C (0x000C - 0x0000)
struct MusicClockComponent_GetCurrentTimestamp final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMusicTimestamp                        ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetCurrentTimestamp) == 0x000004, "Wrong alignment on MusicClockComponent_GetCurrentTimestamp");
static_assert(sizeof(MusicClockComponent_GetCurrentTimestamp) == 0x00000C, "Wrong size on MusicClockComponent_GetCurrentTimestamp");
static_assert(offsetof(MusicClockComponent_GetCurrentTimestamp, Timebase) == 0x000000, "Member 'MusicClockComponent_GetCurrentTimestamp::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetCurrentTimestamp, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetCurrentTimestamp::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetCurrentVideoRenderSongPos
// 0x0040 (0x0040 - 0x0000)
struct MusicClockComponent_GetCurrentVideoRenderSongPos final
{
public:
	struct FMidiSongPos                           ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetCurrentVideoRenderSongPos) == 0x000008, "Wrong alignment on MusicClockComponent_GetCurrentVideoRenderSongPos");
static_assert(sizeof(MusicClockComponent_GetCurrentVideoRenderSongPos) == 0x000040, "Wrong size on MusicClockComponent_GetCurrentVideoRenderSongPos");
static_assert(offsetof(MusicClockComponent_GetCurrentVideoRenderSongPos, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetCurrentVideoRenderSongPos::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetDeltaBar
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetDeltaBar final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetDeltaBar) == 0x000004, "Wrong alignment on MusicClockComponent_GetDeltaBar");
static_assert(sizeof(MusicClockComponent_GetDeltaBar) == 0x000008, "Wrong size on MusicClockComponent_GetDeltaBar");
static_assert(offsetof(MusicClockComponent_GetDeltaBar, Timebase) == 0x000000, "Member 'MusicClockComponent_GetDeltaBar::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetDeltaBar, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetDeltaBar::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetDeltaBeat
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetDeltaBeat final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetDeltaBeat) == 0x000004, "Wrong alignment on MusicClockComponent_GetDeltaBeat");
static_assert(sizeof(MusicClockComponent_GetDeltaBeat) == 0x000008, "Wrong size on MusicClockComponent_GetDeltaBeat");
static_assert(offsetof(MusicClockComponent_GetDeltaBeat, Timebase) == 0x000000, "Member 'MusicClockComponent_GetDeltaBeat::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetDeltaBeat, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetDeltaBeat::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetDistanceFromCurrentBar
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetDistanceFromCurrentBar final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetDistanceFromCurrentBar) == 0x000004, "Wrong alignment on MusicClockComponent_GetDistanceFromCurrentBar");
static_assert(sizeof(MusicClockComponent_GetDistanceFromCurrentBar) == 0x000008, "Wrong size on MusicClockComponent_GetDistanceFromCurrentBar");
static_assert(offsetof(MusicClockComponent_GetDistanceFromCurrentBar, Timebase) == 0x000000, "Member 'MusicClockComponent_GetDistanceFromCurrentBar::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetDistanceFromCurrentBar, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetDistanceFromCurrentBar::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetDistanceFromCurrentBeat
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetDistanceFromCurrentBeat final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetDistanceFromCurrentBeat) == 0x000004, "Wrong alignment on MusicClockComponent_GetDistanceFromCurrentBeat");
static_assert(sizeof(MusicClockComponent_GetDistanceFromCurrentBeat) == 0x000008, "Wrong size on MusicClockComponent_GetDistanceFromCurrentBeat");
static_assert(offsetof(MusicClockComponent_GetDistanceFromCurrentBeat, Timebase) == 0x000000, "Member 'MusicClockComponent_GetDistanceFromCurrentBeat::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetDistanceFromCurrentBeat, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetDistanceFromCurrentBeat::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetDistanceToClosestBar
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetDistanceToClosestBar final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetDistanceToClosestBar) == 0x000004, "Wrong alignment on MusicClockComponent_GetDistanceToClosestBar");
static_assert(sizeof(MusicClockComponent_GetDistanceToClosestBar) == 0x000008, "Wrong size on MusicClockComponent_GetDistanceToClosestBar");
static_assert(offsetof(MusicClockComponent_GetDistanceToClosestBar, Timebase) == 0x000000, "Member 'MusicClockComponent_GetDistanceToClosestBar::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetDistanceToClosestBar, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetDistanceToClosestBar::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetDistanceToClosestBeat
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetDistanceToClosestBeat final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetDistanceToClosestBeat) == 0x000004, "Wrong alignment on MusicClockComponent_GetDistanceToClosestBeat");
static_assert(sizeof(MusicClockComponent_GetDistanceToClosestBeat) == 0x000008, "Wrong size on MusicClockComponent_GetDistanceToClosestBeat");
static_assert(offsetof(MusicClockComponent_GetDistanceToClosestBeat, Timebase) == 0x000000, "Member 'MusicClockComponent_GetDistanceToClosestBeat::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetDistanceToClosestBeat, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetDistanceToClosestBeat::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetDistanceToNextBar
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetDistanceToNextBar final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetDistanceToNextBar) == 0x000004, "Wrong alignment on MusicClockComponent_GetDistanceToNextBar");
static_assert(sizeof(MusicClockComponent_GetDistanceToNextBar) == 0x000008, "Wrong size on MusicClockComponent_GetDistanceToNextBar");
static_assert(offsetof(MusicClockComponent_GetDistanceToNextBar, Timebase) == 0x000000, "Member 'MusicClockComponent_GetDistanceToNextBar::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetDistanceToNextBar, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetDistanceToNextBar::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetDistanceToNextBeat
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetDistanceToNextBeat final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetDistanceToNextBeat) == 0x000004, "Wrong alignment on MusicClockComponent_GetDistanceToNextBeat");
static_assert(sizeof(MusicClockComponent_GetDistanceToNextBeat) == 0x000008, "Wrong size on MusicClockComponent_GetDistanceToNextBeat");
static_assert(offsetof(MusicClockComponent_GetDistanceToNextBeat, Timebase) == 0x000000, "Member 'MusicClockComponent_GetDistanceToNextBeat::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetDistanceToNextBeat, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetDistanceToNextBeat::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetMsPerBarAtMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetMsPerBarAtMs final
{
public:
	float                                         Ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetMsPerBarAtMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetMsPerBarAtMs");
static_assert(sizeof(MusicClockComponent_GetMsPerBarAtMs) == 0x000008, "Wrong size on MusicClockComponent_GetMsPerBarAtMs");
static_assert(offsetof(MusicClockComponent_GetMsPerBarAtMs, Ms) == 0x000000, "Member 'MusicClockComponent_GetMsPerBarAtMs::Ms' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetMsPerBarAtMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetMsPerBarAtMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetMsPerBeatAtMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetMsPerBeatAtMs final
{
public:
	float                                         Ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetMsPerBeatAtMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetMsPerBeatAtMs");
static_assert(sizeof(MusicClockComponent_GetMsPerBeatAtMs) == 0x000008, "Wrong size on MusicClockComponent_GetMsPerBeatAtMs");
static_assert(offsetof(MusicClockComponent_GetMsPerBeatAtMs, Ms) == 0x000000, "Member 'MusicClockComponent_GetMsPerBeatAtMs::Ms' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetMsPerBeatAtMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetMsPerBeatAtMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetNumBeatsInBarAtMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetNumBeatsInBarAtMs final
{
public:
	float                                         Ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetNumBeatsInBarAtMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetNumBeatsInBarAtMs");
static_assert(sizeof(MusicClockComponent_GetNumBeatsInBarAtMs) == 0x000008, "Wrong size on MusicClockComponent_GetNumBeatsInBarAtMs");
static_assert(offsetof(MusicClockComponent_GetNumBeatsInBarAtMs, Ms) == 0x000000, "Member 'MusicClockComponent_GetNumBeatsInBarAtMs::Ms' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetNumBeatsInBarAtMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetNumBeatsInBarAtMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetNumSections
// 0x0004 (0x0004 - 0x0000)
struct MusicClockComponent_GetNumSections final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetNumSections) == 0x000004, "Wrong alignment on MusicClockComponent_GetNumSections");
static_assert(sizeof(MusicClockComponent_GetNumSections) == 0x000004, "Wrong size on MusicClockComponent_GetNumSections");
static_assert(offsetof(MusicClockComponent_GetNumSections, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetNumSections::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSecondsFromBarOne
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetSecondsFromBarOne final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSecondsFromBarOne) == 0x000004, "Wrong alignment on MusicClockComponent_GetSecondsFromBarOne");
static_assert(sizeof(MusicClockComponent_GetSecondsFromBarOne) == 0x000008, "Wrong size on MusicClockComponent_GetSecondsFromBarOne");
static_assert(offsetof(MusicClockComponent_GetSecondsFromBarOne, Timebase) == 0x000000, "Member 'MusicClockComponent_GetSecondsFromBarOne::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetSecondsFromBarOne, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetSecondsFromBarOne::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSecondsIncludingCountIn
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetSecondsIncludingCountIn final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSecondsIncludingCountIn) == 0x000004, "Wrong alignment on MusicClockComponent_GetSecondsIncludingCountIn");
static_assert(sizeof(MusicClockComponent_GetSecondsIncludingCountIn) == 0x000008, "Wrong size on MusicClockComponent_GetSecondsIncludingCountIn");
static_assert(offsetof(MusicClockComponent_GetSecondsIncludingCountIn, Timebase) == 0x000000, "Member 'MusicClockComponent_GetSecondsIncludingCountIn::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetSecondsIncludingCountIn, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetSecondsIncludingCountIn::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSectionEndMsAtMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetSectionEndMsAtMs final
{
public:
	float                                         Ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSectionEndMsAtMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetSectionEndMsAtMs");
static_assert(sizeof(MusicClockComponent_GetSectionEndMsAtMs) == 0x000008, "Wrong size on MusicClockComponent_GetSectionEndMsAtMs");
static_assert(offsetof(MusicClockComponent_GetSectionEndMsAtMs, Ms) == 0x000000, "Member 'MusicClockComponent_GetSectionEndMsAtMs::Ms' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetSectionEndMsAtMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetSectionEndMsAtMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSectionLengthMsAtMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetSectionLengthMsAtMs final
{
public:
	float                                         Ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSectionLengthMsAtMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetSectionLengthMsAtMs");
static_assert(sizeof(MusicClockComponent_GetSectionLengthMsAtMs) == 0x000008, "Wrong size on MusicClockComponent_GetSectionLengthMsAtMs");
static_assert(offsetof(MusicClockComponent_GetSectionLengthMsAtMs, Ms) == 0x000000, "Member 'MusicClockComponent_GetSectionLengthMsAtMs::Ms' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetSectionLengthMsAtMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetSectionLengthMsAtMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSectionNameAtMs
// 0x0018 (0x0018 - 0x0000)
struct MusicClockComponent_GetSectionNameAtMs final
{
public:
	float                                         Ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSectionNameAtMs) == 0x000008, "Wrong alignment on MusicClockComponent_GetSectionNameAtMs");
static_assert(sizeof(MusicClockComponent_GetSectionNameAtMs) == 0x000018, "Wrong size on MusicClockComponent_GetSectionNameAtMs");
static_assert(offsetof(MusicClockComponent_GetSectionNameAtMs, Ms) == 0x000000, "Member 'MusicClockComponent_GetSectionNameAtMs::Ms' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetSectionNameAtMs, ReturnValue) == 0x000008, "Member 'MusicClockComponent_GetSectionNameAtMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSectionStartMsAtMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetSectionStartMsAtMs final
{
public:
	float                                         Ms;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSectionStartMsAtMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetSectionStartMsAtMs");
static_assert(sizeof(MusicClockComponent_GetSectionStartMsAtMs) == 0x000008, "Wrong size on MusicClockComponent_GetSectionStartMsAtMs");
static_assert(offsetof(MusicClockComponent_GetSectionStartMsAtMs, Ms) == 0x000000, "Member 'MusicClockComponent_GetSectionStartMsAtMs::Ms' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetSectionStartMsAtMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetSectionStartMsAtMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSongLengthBars
// 0x0004 (0x0004 - 0x0000)
struct MusicClockComponent_GetSongLengthBars final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSongLengthBars) == 0x000004, "Wrong alignment on MusicClockComponent_GetSongLengthBars");
static_assert(sizeof(MusicClockComponent_GetSongLengthBars) == 0x000004, "Wrong size on MusicClockComponent_GetSongLengthBars");
static_assert(offsetof(MusicClockComponent_GetSongLengthBars, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetSongLengthBars::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSongLengthBeats
// 0x0004 (0x0004 - 0x0000)
struct MusicClockComponent_GetSongLengthBeats final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSongLengthBeats) == 0x000004, "Wrong alignment on MusicClockComponent_GetSongLengthBeats");
static_assert(sizeof(MusicClockComponent_GetSongLengthBeats) == 0x000004, "Wrong size on MusicClockComponent_GetSongLengthBeats");
static_assert(offsetof(MusicClockComponent_GetSongLengthBeats, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetSongLengthBeats::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSongLengthMs
// 0x0004 (0x0004 - 0x0000)
struct MusicClockComponent_GetSongLengthMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSongLengthMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetSongLengthMs");
static_assert(sizeof(MusicClockComponent_GetSongLengthMs) == 0x000004, "Wrong size on MusicClockComponent_GetSongLengthMs");
static_assert(offsetof(MusicClockComponent_GetSongLengthMs, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetSongLengthMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSongPos
// 0x0048 (0x0048 - 0x0000)
struct MusicClockComponent_GetSongPos final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMidiSongPos                           ReturnValue;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSongPos) == 0x000008, "Wrong alignment on MusicClockComponent_GetSongPos");
static_assert(sizeof(MusicClockComponent_GetSongPos) == 0x000048, "Wrong size on MusicClockComponent_GetSongPos");
static_assert(offsetof(MusicClockComponent_GetSongPos, Timebase) == 0x000000, "Member 'MusicClockComponent_GetSongPos::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetSongPos, ReturnValue) == 0x000008, "Member 'MusicClockComponent_GetSongPos::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSongRemainingMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_GetSongRemainingMs final
{
public:
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSongRemainingMs) == 0x000004, "Wrong alignment on MusicClockComponent_GetSongRemainingMs");
static_assert(sizeof(MusicClockComponent_GetSongRemainingMs) == 0x000008, "Wrong size on MusicClockComponent_GetSongRemainingMs");
static_assert(offsetof(MusicClockComponent_GetSongRemainingMs, Timebase) == 0x000000, "Member 'MusicClockComponent_GetSongRemainingMs::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_GetSongRemainingMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_GetSongRemainingMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetSongSections
// 0x0010 (0x0010 - 0x0000)
struct MusicClockComponent_GetSongSections final
{
public:
	TArray<struct FSongSection>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetSongSections) == 0x000008, "Wrong alignment on MusicClockComponent_GetSongSections");
static_assert(sizeof(MusicClockComponent_GetSongSections) == 0x000010, "Wrong size on MusicClockComponent_GetSongSections");
static_assert(offsetof(MusicClockComponent_GetSongSections, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetSongSections::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.GetState
// 0x0001 (0x0001 - 0x0000)
struct MusicClockComponent_GetState final
{
public:
	EMusicClockState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_GetState) == 0x000001, "Wrong alignment on MusicClockComponent_GetState");
static_assert(sizeof(MusicClockComponent_GetState) == 0x000001, "Wrong size on MusicClockComponent_GetState");
static_assert(offsetof(MusicClockComponent_GetState, ReturnValue) == 0x000000, "Member 'MusicClockComponent_GetState::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.MeasureSpanProgress
// 0x0018 (0x0018 - 0x0000)
struct MusicClockComponent_MeasureSpanProgress final
{
public:
	struct FMusicalTimeSpan                       Span;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ECalibratedMusicTimebase                      Timebase;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_MeasureSpanProgress) == 0x000004, "Wrong alignment on MusicClockComponent_MeasureSpanProgress");
static_assert(sizeof(MusicClockComponent_MeasureSpanProgress) == 0x000018, "Wrong size on MusicClockComponent_MeasureSpanProgress");
static_assert(offsetof(MusicClockComponent_MeasureSpanProgress, Span) == 0x000000, "Member 'MusicClockComponent_MeasureSpanProgress::Span' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_MeasureSpanProgress, Timebase) == 0x000010, "Member 'MusicClockComponent_MeasureSpanProgress::Timebase' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_MeasureSpanProgress, ReturnValue) == 0x000014, "Member 'MusicClockComponent_MeasureSpanProgress::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicClockComponent.TickToMs
// 0x0008 (0x0008 - 0x0000)
struct MusicClockComponent_TickToMs final
{
public:
	float                                         Tick;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicClockComponent_TickToMs) == 0x000004, "Wrong alignment on MusicClockComponent_TickToMs");
static_assert(sizeof(MusicClockComponent_TickToMs) == 0x000008, "Wrong size on MusicClockComponent_TickToMs");
static_assert(offsetof(MusicClockComponent_TickToMs, Tick) == 0x000000, "Member 'MusicClockComponent_TickToMs::Tick' has a wrong offset!");
static_assert(offsetof(MusicClockComponent_TickToMs, ReturnValue) == 0x000004, "Member 'MusicClockComponent_TickToMs::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.SetClock
// 0x0008 (0x0008 - 0x0000)
struct MusicTempometerComponent_SetClock final
{
public:
	class UMusicClockComponent*                   InClockComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_SetClock) == 0x000008, "Wrong alignment on MusicTempometerComponent_SetClock");
static_assert(sizeof(MusicTempometerComponent_SetClock) == 0x000008, "Wrong size on MusicTempometerComponent_SetClock");
static_assert(offsetof(MusicTempometerComponent_SetClock, InClockComponent) == 0x000000, "Member 'MusicTempometerComponent_SetClock::InClockComponent' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.SetClockFromActor
// 0x0008 (0x0008 - 0x0000)
struct MusicTempometerComponent_SetClockFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_SetClockFromActor) == 0x000008, "Wrong alignment on MusicTempometerComponent_SetClockFromActor");
static_assert(sizeof(MusicTempometerComponent_SetClockFromActor) == 0x000008, "Wrong size on MusicTempometerComponent_SetClockFromActor");
static_assert(offsetof(MusicTempometerComponent_SetClockFromActor, Actor) == 0x000000, "Member 'MusicTempometerComponent_SetClockFromActor::Actor' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.SetMaterialParameterCollection
// 0x0008 (0x0008 - 0x0000)
struct MusicTempometerComponent_SetMaterialParameterCollection final
{
public:
	class UMaterialParameterCollection*           InMaterialParameterCollection;                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_SetMaterialParameterCollection) == 0x000008, "Wrong alignment on MusicTempometerComponent_SetMaterialParameterCollection");
static_assert(sizeof(MusicTempometerComponent_SetMaterialParameterCollection) == 0x000008, "Wrong size on MusicTempometerComponent_SetMaterialParameterCollection");
static_assert(offsetof(MusicTempometerComponent_SetMaterialParameterCollection, InMaterialParameterCollection) == 0x000000, "Member 'MusicTempometerComponent_SetMaterialParameterCollection::InMaterialParameterCollection' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetBarProgress
// 0x0004 (0x0004 - 0x0000)
struct MusicTempometerComponent_GetBarProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetBarProgress) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetBarProgress");
static_assert(sizeof(MusicTempometerComponent_GetBarProgress) == 0x000004, "Wrong size on MusicTempometerComponent_GetBarProgress");
static_assert(offsetof(MusicTempometerComponent_GetBarProgress, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetBarProgress::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetBarsIncludingCountIn
// 0x0004 (0x0004 - 0x0000)
struct MusicTempometerComponent_GetBarsIncludingCountIn final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetBarsIncludingCountIn) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetBarsIncludingCountIn");
static_assert(sizeof(MusicTempometerComponent_GetBarsIncludingCountIn) == 0x000004, "Wrong size on MusicTempometerComponent_GetBarsIncludingCountIn");
static_assert(offsetof(MusicTempometerComponent_GetBarsIncludingCountIn, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetBarsIncludingCountIn::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetBeatProgress
// 0x0004 (0x0004 - 0x0000)
struct MusicTempometerComponent_GetBeatProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetBeatProgress) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetBeatProgress");
static_assert(sizeof(MusicTempometerComponent_GetBeatProgress) == 0x000004, "Wrong size on MusicTempometerComponent_GetBeatProgress");
static_assert(offsetof(MusicTempometerComponent_GetBeatProgress, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetBeatProgress::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetBeatsIncludingCountIn
// 0x0004 (0x0004 - 0x0000)
struct MusicTempometerComponent_GetBeatsIncludingCountIn final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetBeatsIncludingCountIn) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetBeatsIncludingCountIn");
static_assert(sizeof(MusicTempometerComponent_GetBeatsIncludingCountIn) == 0x000004, "Wrong size on MusicTempometerComponent_GetBeatsIncludingCountIn");
static_assert(offsetof(MusicTempometerComponent_GetBeatsIncludingCountIn, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetBeatsIncludingCountIn::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetClock
// 0x0008 (0x0008 - 0x0000)
struct MusicTempometerComponent_GetClock final
{
public:
	const class UMusicClockComponent*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetClock) == 0x000008, "Wrong alignment on MusicTempometerComponent_GetClock");
static_assert(sizeof(MusicTempometerComponent_GetClock) == 0x000008, "Wrong size on MusicTempometerComponent_GetClock");
static_assert(offsetof(MusicTempometerComponent_GetClock, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetClock::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetClockNoMutex
// 0x0008 (0x0008 - 0x0000)
struct MusicTempometerComponent_GetClockNoMutex final
{
public:
	const class UMusicClockComponent*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetClockNoMutex) == 0x000008, "Wrong alignment on MusicTempometerComponent_GetClockNoMutex");
static_assert(sizeof(MusicTempometerComponent_GetClockNoMutex) == 0x000008, "Wrong size on MusicTempometerComponent_GetClockNoMutex");
static_assert(offsetof(MusicTempometerComponent_GetClockNoMutex, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetClockNoMutex::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetMaterialParameterCollection
// 0x0008 (0x0008 - 0x0000)
struct MusicTempometerComponent_GetMaterialParameterCollection final
{
public:
	class UMaterialParameterCollection*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetMaterialParameterCollection) == 0x000008, "Wrong alignment on MusicTempometerComponent_GetMaterialParameterCollection");
static_assert(sizeof(MusicTempometerComponent_GetMaterialParameterCollection) == 0x000008, "Wrong size on MusicTempometerComponent_GetMaterialParameterCollection");
static_assert(offsetof(MusicTempometerComponent_GetMaterialParameterCollection, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetMaterialParameterCollection::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetSecondsFromBarOne
// 0x0004 (0x0004 - 0x0000)
struct MusicTempometerComponent_GetSecondsFromBarOne final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetSecondsFromBarOne) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetSecondsFromBarOne");
static_assert(sizeof(MusicTempometerComponent_GetSecondsFromBarOne) == 0x000004, "Wrong size on MusicTempometerComponent_GetSecondsFromBarOne");
static_assert(offsetof(MusicTempometerComponent_GetSecondsFromBarOne, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetSecondsFromBarOne::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetSecondsIncludingCountIn
// 0x0004 (0x0004 - 0x0000)
struct MusicTempometerComponent_GetSecondsIncludingCountIn final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetSecondsIncludingCountIn) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetSecondsIncludingCountIn");
static_assert(sizeof(MusicTempometerComponent_GetSecondsIncludingCountIn) == 0x000004, "Wrong size on MusicTempometerComponent_GetSecondsIncludingCountIn");
static_assert(offsetof(MusicTempometerComponent_GetSecondsIncludingCountIn, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetSecondsIncludingCountIn::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetSongPos
// 0x0040 (0x0040 - 0x0000)
struct MusicTempometerComponent_GetSongPos final
{
public:
	struct FMidiSongPos                           ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetSongPos) == 0x000008, "Wrong alignment on MusicTempometerComponent_GetSongPos");
static_assert(sizeof(MusicTempometerComponent_GetSongPos) == 0x000040, "Wrong size on MusicTempometerComponent_GetSongPos");
static_assert(offsetof(MusicTempometerComponent_GetSongPos, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetSongPos::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetTempo
// 0x0004 (0x0004 - 0x0000)
struct MusicTempometerComponent_GetTempo final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetTempo) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetTempo");
static_assert(sizeof(MusicTempometerComponent_GetTempo) == 0x000004, "Wrong size on MusicTempometerComponent_GetTempo");
static_assert(offsetof(MusicTempometerComponent_GetTempo, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetTempo::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetTimeSignatureDenominator
// 0x0004 (0x0004 - 0x0000)
struct MusicTempometerComponent_GetTimeSignatureDenominator final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetTimeSignatureDenominator) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetTimeSignatureDenominator");
static_assert(sizeof(MusicTempometerComponent_GetTimeSignatureDenominator) == 0x000004, "Wrong size on MusicTempometerComponent_GetTimeSignatureDenominator");
static_assert(offsetof(MusicTempometerComponent_GetTimeSignatureDenominator, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetTimeSignatureDenominator::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetTimeSignatureNumerator
// 0x0004 (0x0004 - 0x0000)
struct MusicTempometerComponent_GetTimeSignatureNumerator final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetTimeSignatureNumerator) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetTimeSignatureNumerator");
static_assert(sizeof(MusicTempometerComponent_GetTimeSignatureNumerator) == 0x000004, "Wrong size on MusicTempometerComponent_GetTimeSignatureNumerator");
static_assert(offsetof(MusicTempometerComponent_GetTimeSignatureNumerator, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetTimeSignatureNumerator::ReturnValue' has a wrong offset!");

// Function HarmonixMetasound.MusicTempometerComponent.GetTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct MusicTempometerComponent_GetTimeStamp final
{
public:
	struct FMusicTimestamp                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicTempometerComponent_GetTimeStamp) == 0x000004, "Wrong alignment on MusicTempometerComponent_GetTimeStamp");
static_assert(sizeof(MusicTempometerComponent_GetTimeStamp) == 0x000008, "Wrong size on MusicTempometerComponent_GetTimeStamp");
static_assert(offsetof(MusicTempometerComponent_GetTimeStamp, ReturnValue) == 0x000000, "Member 'MusicTempometerComponent_GetTimeStamp::ReturnValue' has a wrong offset!");

}

