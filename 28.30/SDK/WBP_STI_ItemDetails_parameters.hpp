#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_STI_ItemDetails

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_STI_ItemDetails.WBP_STI_ItemDetails_C.ExecuteUbergraph_WBP_STI_ItemDetails
// 0x0008 (0x0008 - 0x0000)
struct WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bValidItem;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsSubscribed;                        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsOwned;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails) == 0x000004, "Wrong alignment on WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails");
static_assert(sizeof(WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails) == 0x000008, "Wrong size on WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails");
static_assert(offsetof(WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails, EntryPoint) == 0x000000, "Member 'WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails, K2Node_Event_bValidItem) == 0x000005, "Member 'WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails::K2Node_Event_bValidItem' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails, K2Node_Event_bIsSubscribed) == 0x000006, "Member 'WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails::K2Node_Event_bIsSubscribed' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails, K2Node_Event_IsOwned) == 0x000007, "Member 'WBP_STI_ItemDetails_C_ExecuteUbergraph_WBP_STI_ItemDetails::K2Node_Event_IsOwned' has a wrong offset!");

// Function WBP_STI_ItemDetails.WBP_STI_ItemDetails_C.OnDataSet
// 0x0003 (0x0003 - 0x0000)
struct WBP_STI_ItemDetails_C_OnDataSet final
{
public:
	bool                                          bValidItem;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSubscribed;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOwned;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_STI_ItemDetails_C_OnDataSet) == 0x000001, "Wrong alignment on WBP_STI_ItemDetails_C_OnDataSet");
static_assert(sizeof(WBP_STI_ItemDetails_C_OnDataSet) == 0x000003, "Wrong size on WBP_STI_ItemDetails_C_OnDataSet");
static_assert(offsetof(WBP_STI_ItemDetails_C_OnDataSet, bValidItem) == 0x000000, "Member 'WBP_STI_ItemDetails_C_OnDataSet::bValidItem' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_OnDataSet, bIsSubscribed) == 0x000001, "Member 'WBP_STI_ItemDetails_C_OnDataSet::bIsSubscribed' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_OnDataSet, IsOwned) == 0x000002, "Member 'WBP_STI_ItemDetails_C_OnDataSet::IsOwned' has a wrong offset!");

// Function WBP_STI_ItemDetails.WBP_STI_ItemDetails_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_STI_ItemDetails_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_STI_ItemDetails_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_STI_ItemDetails_C_PreConstruct");
static_assert(sizeof(WBP_STI_ItemDetails_C_PreConstruct) == 0x000001, "Wrong size on WBP_STI_ItemDetails_C_PreConstruct");
static_assert(offsetof(WBP_STI_ItemDetails_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_STI_ItemDetails_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_STI_ItemDetails.WBP_STI_ItemDetails_C.SetItemDetailsStatus
// 0x0058 (0x0058 - 0x0000)
struct WBP_STI_ItemDetails_C_SetItemDetailsStatus final
{
public:
	bool                                          IsValidItem;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSubscribed;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOwned;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWidget*                          K2Node_Select_Default_1;                           // 0x0010(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x001C(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0030(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_3;                           // 0x0044(0x0014)()
};
static_assert(alignof(WBP_STI_ItemDetails_C_SetItemDetailsStatus) == 0x000008, "Wrong alignment on WBP_STI_ItemDetails_C_SetItemDetailsStatus");
static_assert(sizeof(WBP_STI_ItemDetails_C_SetItemDetailsStatus) == 0x000058, "Wrong size on WBP_STI_ItemDetails_C_SetItemDetailsStatus");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, IsValidItem) == 0x000000, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::IsValidItem' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, IsSubscribed) == 0x000001, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::IsSubscribed' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, IsOwned) == 0x000002, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::IsOwned' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, Temp_bool_Variable) == 0x000003, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, Temp_byte_Variable) == 0x000004, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, Temp_bool_Variable_1) == 0x000006, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, Temp_byte_Variable_2) == 0x000007, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, Temp_byte_Variable_3) == 0x000008, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, Temp_bool_Variable_2) == 0x000009, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, Temp_bool_Variable_3) == 0x00000C, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, K2Node_Select_Default) == 0x00000D, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, K2Node_Select_Default_1) == 0x000010, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, K2Node_Select_Default_2) == 0x000018, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, K2Node_MakeStruct_SlateColor) == 0x00001C, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, K2Node_MakeStruct_SlateColor_1) == 0x000030, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WBP_STI_ItemDetails_C_SetItemDetailsStatus, K2Node_Select_Default_3) == 0x000044, "Member 'WBP_STI_ItemDetails_C_SetItemDetailsStatus::K2Node_Select_Default_3' has a wrong offset!");

}

