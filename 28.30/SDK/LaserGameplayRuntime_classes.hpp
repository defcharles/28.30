#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LaserGameplayRuntime

#include "Basic.hpp"

#include "LaserGameplayRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class LaserGameplayRuntime.LaserCapsuleComponent
// 0x0010 (0x0540 - 0x0530)
class ULaserCapsuleComponent final : public UCapsuleComponent
{
public:
	ECollisionEnabled                             CollisionWhenEnabled;                              // 0x0530(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionEnabled                             CollisionWhenDisabled;                             // 0x0531(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_532[0xE];                                      // 0x0532(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LaserCapsuleComponent">();
	}
	static class ULaserCapsuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULaserCapsuleComponent>();
	}
};
static_assert(alignof(ULaserCapsuleComponent) == 0x000010, "Wrong alignment on ULaserCapsuleComponent");
static_assert(sizeof(ULaserCapsuleComponent) == 0x000540, "Wrong size on ULaserCapsuleComponent");
static_assert(offsetof(ULaserCapsuleComponent, CollisionWhenEnabled) == 0x000530, "Member 'ULaserCapsuleComponent::CollisionWhenEnabled' has a wrong offset!");
static_assert(offsetof(ULaserCapsuleComponent, CollisionWhenDisabled) == 0x000531, "Member 'ULaserCapsuleComponent::CollisionWhenDisabled' has a wrong offset!");

// Class LaserGameplayRuntime.LaserGridEditorComponent
// 0x0008 (0x00A8 - 0x00A0)
class ULaserGridEditorComponent final : public UActorComponent
{
public:
	int32                                         VisualizeLaserGridPatternIndex;                    // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bVisualizeOutletIndex;                             // 0x00A4(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LaserGridEditorComponent">();
	}
	static class ULaserGridEditorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULaserGridEditorComponent>();
	}
};
static_assert(alignof(ULaserGridEditorComponent) == 0x000008, "Wrong alignment on ULaserGridEditorComponent");
static_assert(sizeof(ULaserGridEditorComponent) == 0x0000A8, "Wrong size on ULaserGridEditorComponent");
static_assert(offsetof(ULaserGridEditorComponent, VisualizeLaserGridPatternIndex) == 0x0000A0, "Member 'ULaserGridEditorComponent::VisualizeLaserGridPatternIndex' has a wrong offset!");
static_assert(offsetof(ULaserGridEditorComponent, bVisualizeOutletIndex) == 0x0000A4, "Member 'ULaserGridEditorComponent::bVisualizeOutletIndex' has a wrong offset!");

// Class LaserGameplayRuntime.BuildingGameplayActorLaserGrid
// 0x0420 (0x0DA0 - 0x0980)
class ABuildingGameplayActorLaserGrid final : public ABuildingGameplayActor
{
public:
	TMulticastInlineDelegate<void(class ABuildingGameplayActorLaserGrid* LaserGrid, struct FLaserGridConnectionEntry& LaserConnectionData, class AActor* TriggeringActor)> OnLaserGridTriggered;                              // 0x0980(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ABuildingGameplayActorLaserGrid* LaserGrid)> OnLaserGridOutletDestroyed;                        // 0x0990(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FLaserGridPattern>              LaserGridPatterns;                                 // 0x09A0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         LaserPatternChangeWarningTime;                     // 0x09B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9B4[0x4];                                      // 0x09B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class ABuildingActor*>            LaserOutletToBuildingAttachmentMap;                // 0x09B8(0x0050)(Edit, DisableEditOnTemplate, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  IgnoreActorTags;                                   // 0x0A08(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class ULaserCapsuleComponent>     LaserCapsuleComponentClass;                        // 0x0A28(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               LaserCapsuleCollisionRotationOffset;               // 0x0A30(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         LaserCustomDataIndexForRandomizedVisuals;          // 0x0A48(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A4C[0x4];                                      // 0x0A4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLaserGridConnectionArray              LaserGridConnections;                              // 0x0A50(0x0118)(Net, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLaserGridConnectionEntry>      LocalLaserGridConnections;                         // 0x0B68(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B78[0x8];                                      // 0x0B78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LaserConnectionOffset;                             // 0x0B80(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LaserOutletConnectionOffset;                       // 0x0BE0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             SoundOutletTransitionOn;                           // 0x0BF8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             SoundLaserTransitionPrimaryOutlet;                 // 0x0C00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             SoundLaserTransitionSecondaryOutlet;               // 0x0C08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             SoundLaserTransition;                              // 0x0C10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OutletMaterialCustomDataIndex_EmissiveEnabled;     // 0x0C18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OutletMaterialCustomDataIndex_DisableEmissivePulse; // 0x0C1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OutletMaterialCustomDataIndex_AnimTimestamp;       // 0x0C20(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OutletMaterialCustomDataIndex_AnimTimestampDuration; // 0x0C24(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaterialCosineWavePeriod;                          // 0x0C28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C2C[0x4];                                      // 0x0C2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OutletMaterialTransitionOffTimestampOffset;        // 0x0C30(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LaserMaterialCustomDataIndex_PulseEnabled;         // 0x0C40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LaserMaterialCustomDataIndex_RandomFlickeringSpeed; // 0x0C44(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LaserMaterialCustomDataIndex_AnimTimestamp;        // 0x0C48(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LaserMaterialCustomDataIndex_PulseTimeOffset;      // 0x0C4C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              LaserMaterialRandomFlickeringSpeed;                // 0x0C50(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLaserGridOutletArray                  LaserGridOutlets;                                  // 0x0C60(0x0120)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	class UHierarchicalInstancedStaticMeshComponent* HISMComponentOutlet;                               // 0x0D80(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHierarchicalInstancedStaticMeshComponent* HISMComponentLaser;                                // 0x0D88(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnabled;                                          // 0x0D90(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D91[0x3];                                      // 0x0D91(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LaserGridPatternIndex;                             // 0x0D94(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           LaserPatternTimerHandle;                           // 0x0D98(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CosmeticDestroyOutletInstance(const struct FLaserGridOutletEntry& OutletEntry);
	void HandleAttachedBuildingActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& Momentum);
	void HandleLaserCollisionOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void HandlePatternTimerComplete_PostTransition();
	void HandlePatternTimerComplete_PreTransition();
	void LaserGridStateUpdated(bool bLaserGridEnabled);
	void LaserGridTriggered(const struct FLaserGridConnectionEntry& LaserConnectionData, class AActor* TriggeringActor);
	void OnRep_bEnabled();
	void OnRep_LaserGridConnections();
	void SetLaserGridEnable(const bool bEnable);

	bool CanActorTriggerLaserGrid(const class AActor* TriggeringActor) const;
	void GetActiveLaserGridConnections(TArray<struct FLaserGridConnectionEntry>* OutActiveLaserGridConnections) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuildingGameplayActorLaserGrid">();
	}
	static class ABuildingGameplayActorLaserGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuildingGameplayActorLaserGrid>();
	}
};
static_assert(alignof(ABuildingGameplayActorLaserGrid) == 0x000010, "Wrong alignment on ABuildingGameplayActorLaserGrid");
static_assert(sizeof(ABuildingGameplayActorLaserGrid) == 0x000DA0, "Wrong size on ABuildingGameplayActorLaserGrid");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, OnLaserGridTriggered) == 0x000980, "Member 'ABuildingGameplayActorLaserGrid::OnLaserGridTriggered' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, OnLaserGridOutletDestroyed) == 0x000990, "Member 'ABuildingGameplayActorLaserGrid::OnLaserGridOutletDestroyed' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserGridPatterns) == 0x0009A0, "Member 'ABuildingGameplayActorLaserGrid::LaserGridPatterns' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserPatternChangeWarningTime) == 0x0009B0, "Member 'ABuildingGameplayActorLaserGrid::LaserPatternChangeWarningTime' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserOutletToBuildingAttachmentMap) == 0x0009B8, "Member 'ABuildingGameplayActorLaserGrid::LaserOutletToBuildingAttachmentMap' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, IgnoreActorTags) == 0x000A08, "Member 'ABuildingGameplayActorLaserGrid::IgnoreActorTags' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserCapsuleComponentClass) == 0x000A28, "Member 'ABuildingGameplayActorLaserGrid::LaserCapsuleComponentClass' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserCapsuleCollisionRotationOffset) == 0x000A30, "Member 'ABuildingGameplayActorLaserGrid::LaserCapsuleCollisionRotationOffset' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserCustomDataIndexForRandomizedVisuals) == 0x000A48, "Member 'ABuildingGameplayActorLaserGrid::LaserCustomDataIndexForRandomizedVisuals' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserGridConnections) == 0x000A50, "Member 'ABuildingGameplayActorLaserGrid::LaserGridConnections' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LocalLaserGridConnections) == 0x000B68, "Member 'ABuildingGameplayActorLaserGrid::LocalLaserGridConnections' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserConnectionOffset) == 0x000B80, "Member 'ABuildingGameplayActorLaserGrid::LaserConnectionOffset' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserOutletConnectionOffset) == 0x000BE0, "Member 'ABuildingGameplayActorLaserGrid::LaserOutletConnectionOffset' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, SoundOutletTransitionOn) == 0x000BF8, "Member 'ABuildingGameplayActorLaserGrid::SoundOutletTransitionOn' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, SoundLaserTransitionPrimaryOutlet) == 0x000C00, "Member 'ABuildingGameplayActorLaserGrid::SoundLaserTransitionPrimaryOutlet' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, SoundLaserTransitionSecondaryOutlet) == 0x000C08, "Member 'ABuildingGameplayActorLaserGrid::SoundLaserTransitionSecondaryOutlet' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, SoundLaserTransition) == 0x000C10, "Member 'ABuildingGameplayActorLaserGrid::SoundLaserTransition' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, OutletMaterialCustomDataIndex_EmissiveEnabled) == 0x000C18, "Member 'ABuildingGameplayActorLaserGrid::OutletMaterialCustomDataIndex_EmissiveEnabled' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, OutletMaterialCustomDataIndex_DisableEmissivePulse) == 0x000C1C, "Member 'ABuildingGameplayActorLaserGrid::OutletMaterialCustomDataIndex_DisableEmissivePulse' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, OutletMaterialCustomDataIndex_AnimTimestamp) == 0x000C20, "Member 'ABuildingGameplayActorLaserGrid::OutletMaterialCustomDataIndex_AnimTimestamp' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, OutletMaterialCustomDataIndex_AnimTimestampDuration) == 0x000C24, "Member 'ABuildingGameplayActorLaserGrid::OutletMaterialCustomDataIndex_AnimTimestampDuration' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, MaterialCosineWavePeriod) == 0x000C28, "Member 'ABuildingGameplayActorLaserGrid::MaterialCosineWavePeriod' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, OutletMaterialTransitionOffTimestampOffset) == 0x000C30, "Member 'ABuildingGameplayActorLaserGrid::OutletMaterialTransitionOffTimestampOffset' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserMaterialCustomDataIndex_PulseEnabled) == 0x000C40, "Member 'ABuildingGameplayActorLaserGrid::LaserMaterialCustomDataIndex_PulseEnabled' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserMaterialCustomDataIndex_RandomFlickeringSpeed) == 0x000C44, "Member 'ABuildingGameplayActorLaserGrid::LaserMaterialCustomDataIndex_RandomFlickeringSpeed' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserMaterialCustomDataIndex_AnimTimestamp) == 0x000C48, "Member 'ABuildingGameplayActorLaserGrid::LaserMaterialCustomDataIndex_AnimTimestamp' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserMaterialCustomDataIndex_PulseTimeOffset) == 0x000C4C, "Member 'ABuildingGameplayActorLaserGrid::LaserMaterialCustomDataIndex_PulseTimeOffset' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserMaterialRandomFlickeringSpeed) == 0x000C50, "Member 'ABuildingGameplayActorLaserGrid::LaserMaterialRandomFlickeringSpeed' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserGridOutlets) == 0x000C60, "Member 'ABuildingGameplayActorLaserGrid::LaserGridOutlets' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, HISMComponentOutlet) == 0x000D80, "Member 'ABuildingGameplayActorLaserGrid::HISMComponentOutlet' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, HISMComponentLaser) == 0x000D88, "Member 'ABuildingGameplayActorLaserGrid::HISMComponentLaser' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, bEnabled) == 0x000D90, "Member 'ABuildingGameplayActorLaserGrid::bEnabled' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserGridPatternIndex) == 0x000D94, "Member 'ABuildingGameplayActorLaserGrid::LaserGridPatternIndex' has a wrong offset!");
static_assert(offsetof(ABuildingGameplayActorLaserGrid, LaserPatternTimerHandle) == 0x000D98, "Member 'ABuildingGameplayActorLaserGrid::LaserPatternTimerHandle' has a wrong offset!");

}

