#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CompatibilityTags

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "E_UI_TagType_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CompatibilityTags.CompatibilityTags_C
// 0x0020 (0x0338 - 0x0318)
class UCompatibilityTags_C final : public UFortCompatibilityTags
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortDynamicEntryBox*                   CompatibleTags;                                    // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UClass*                                 GameTagClass;                                      // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_UI_TagType                                  GameTagType;                                       // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CompatibilityTags(int32 EntryPoint);
	void OnRefreshTags(const TArray<ECosmeticCompatibleMode>& CompatibleModes);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CompatibilityTags_C">();
	}
	static class UCompatibilityTags_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompatibilityTags_C>();
	}
};
static_assert(alignof(UCompatibilityTags_C) == 0x000008, "Wrong alignment on UCompatibilityTags_C");
static_assert(sizeof(UCompatibilityTags_C) == 0x000338, "Wrong size on UCompatibilityTags_C");
static_assert(offsetof(UCompatibilityTags_C, UberGraphFrame) == 0x000318, "Member 'UCompatibilityTags_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCompatibilityTags_C, CompatibleTags) == 0x000320, "Member 'UCompatibilityTags_C::CompatibleTags' has a wrong offset!");
static_assert(offsetof(UCompatibilityTags_C, GameTagClass) == 0x000328, "Member 'UCompatibilityTags_C::GameTagClass' has a wrong offset!");
static_assert(offsetof(UCompatibilityTags_C, GameTagType) == 0x000330, "Member 'UCompatibilityTags_C::GameTagType' has a wrong offset!");

}

