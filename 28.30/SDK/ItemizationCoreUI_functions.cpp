#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationCoreUI

#include "Basic.hpp"

#include "ItemizationCoreUI_classes.hpp"
#include "ItemizationCoreUI_parameters.hpp"


namespace SDK
{

// Function ItemizationCoreUI.InventoryCollectionViewModel.InitializeViewModel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InitializingObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCollectionViewModel::InitializeViewModel(class UObject* InitializingObject)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InitializeViewModel");

	Params::InventoryCollectionViewModel_InitializeViewModel Parms{};

	Parms.InitializingObject = InitializingObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryCollectionViewModel.UnbindInventoryCollection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUnusedParam                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCollectionViewModel::UnbindInventoryCollection(const bool bUnusedParam)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UnbindInventoryCollection");

	Params::InventoryCollectionViewModel_UnbindInventoryCollection Parms{};

	Parms.bUnusedParam = bUnusedParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.DropAll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUnused                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::DropAll(const bool bUnused)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DropAll");

	Params::InventoryItemEntryViewModel_DropAll Parms{};

	Parms.bUnused = bUnused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.DropAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::DropAmount(const int64 Amount)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DropAmount");

	Params::InventoryItemEntryViewModel_DropAmount Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.DropHalf
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUnused                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::DropHalf(const bool bUnused)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DropHalf");

	Params::InventoryItemEntryViewModel_DropHalf Parms{};

	Parms.bUnused = bUnused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.SetEquippableItemActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bActive                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::SetEquippableItemActive(const bool bActive)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEquippableItemActive");

	Params::InventoryItemEntryViewModel_SetEquippableItemActive Parms{};

	Parms.bActive = bActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.SetItemSlotNumber
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SlotNumber                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::SetItemSlotNumber(const int32 SlotNumber)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetItemSlotNumber");

	Params::InventoryItemEntryViewModel_SetItemSlotNumber Parms{};

	Parms.SlotNumber = SlotNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.ToggleEquippableItemActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUnused                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::ToggleEquippableItemActive(const bool bUnused)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ToggleEquippableItemActive");

	Params::InventoryItemEntryViewModel_ToggleEquippableItemActive Parms{};

	Parms.bUnused = bUnused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.UpdateCanSwap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryItemEntryViewModel*     SwapInventoryItemEntryViewModel                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::UpdateCanSwap(const class UInventoryItemEntryViewModel* SwapInventoryItemEntryViewModel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateCanSwap");

	Params::InventoryItemEntryViewModel_UpdateCanSwap Parms{};

	Parms.SwapInventoryItemEntryViewModel = SwapInventoryItemEntryViewModel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.UseItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUnused                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemEntryViewModel::UseItem(const bool bUnused)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UseItem");

	Params::InventoryItemEntryViewModel_UseItem Parms{};

	Parms.bUnused = bUnused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.CanItemBeMadeActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::CanItemBeMadeActive() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanItemBeMadeActive");

	Params::InventoryItemEntryViewModel_CanItemBeMadeActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.CanItemBeMadeInactive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::CanItemBeMadeInactive() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CanItemBeMadeInactive");

	Params::InventoryItemEntryViewModel_CanItemBeMadeInactive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetEquipSlotInputAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInputAction*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInputAction* UInventoryItemEntryViewModel::GetEquipSlotInputAction() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetEquipSlotInputAction");

	Params::InventoryItemEntryViewModel_GetEquipSlotInputAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetInventoryID
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid UInventoryItemEntryViewModel::GetInventoryID() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInventoryID");

	Params::InventoryItemEntryViewModel_GetInventoryID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UInventoryItemEntryViewModel::GetItemAmount() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemAmount");

	Params::InventoryItemEntryViewModel_GetItemAmount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemDefinition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemDefinitionBase*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemDefinitionBase* UInventoryItemEntryViewModel::GetItemDefinition() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemDefinition");

	Params::InventoryItemEntryViewModel_GetItemDefinition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryItemEntryViewModel::GetItemDescription() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemDescription");

	Params::InventoryItemEntryViewModel_GetItemDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemEntryID
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid UInventoryItemEntryViewModel::GetItemEntryID() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemEntryID");

	Params::InventoryItemEntryViewModel_GetItemEntryID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UInventoryItemEntryViewModel::GetItemIcon() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemIcon");

	Params::InventoryItemEntryViewModel_GetItemIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemIconDisplayTextType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EItemIconDisplayTextType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EItemIconDisplayTextType UInventoryItemEntryViewModel::GetItemIconDisplayTextType() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemIconDisplayTextType");

	Params::InventoryItemEntryViewModel_GetItemIconDisplayTextType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UInventoryItemEntryViewModel::GetItemName() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemName");

	Params::InventoryItemEntryViewModel_GetItemName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemPrimaryAmmoCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UInventoryItemEntryViewModel::GetItemPrimaryAmmoCount() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemPrimaryAmmoCount");

	Params::InventoryItemEntryViewModel_GetItemPrimaryAmmoCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemRarity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemRarity*                ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemRarity* UInventoryItemEntryViewModel::GetItemRarity() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemRarity");

	Params::InventoryItemEntryViewModel_GetItemRarity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemSlotNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryItemEntryViewModel::GetItemSlotNumber() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemSlotNumber");

	Params::InventoryItemEntryViewModel_GetItemSlotNumber Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetItemType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemType*                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemType* UInventoryItemEntryViewModel::GetItemType() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetItemType");

	Params::InventoryItemEntryViewModel_GetItemType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetSmallItemIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UInventoryItemEntryViewModel::GetSmallItemIcon() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSmallItemIcon");

	Params::InventoryItemEntryViewModel_GetSmallItemIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetSoftItemIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UInventoryItemEntryViewModel::GetSoftItemIcon() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSoftItemIcon");

	Params::InventoryItemEntryViewModel_GetSoftItemIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.GetSoftSmallItemIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UInventoryItemEntryViewModel::GetSoftSmallItemIcon() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSoftSmallItemIcon");

	Params::InventoryItemEntryViewModel_GetSoftSmallItemIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.IsEquipSlotInputBindingVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::IsEquipSlotInputBindingVisible() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsEquipSlotInputBindingVisible");

	Params::InventoryItemEntryViewModel_IsEquipSlotInputBindingVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.IsItemActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::IsItemActive() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsItemActive");

	Params::InventoryItemEntryViewModel_IsItemActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.IsItemEntryIDValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::IsItemEntryIDValid() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsItemEntryIDValid");

	Params::InventoryItemEntryViewModel_IsItemEntryIDValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.IsItemIconLoading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::IsItemIconLoading() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsItemIconLoading");

	Params::InventoryItemEntryViewModel_IsItemIconLoading Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryItemEntryViewModel.IsSmallItemIconLoading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInventoryItemEntryViewModel::IsSmallItemIconLoading() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsSmallItemIconLoading");

	Params::InventoryItemEntryViewModel_IsSmallItemIconLoading Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModel.GetInventoryDefinition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UInventoryDefinition*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UInventoryDefinition* UInventoryViewModel::GetInventoryDefinition() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInventoryDefinition");

	Params::InventoryViewModel_GetInventoryDefinition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModel.GetInventoryDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UInventoryViewModel::GetInventoryDescription() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInventoryDescription");

	Params::InventoryViewModel_GetInventoryDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModel.GetInventoryName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UInventoryViewModel::GetInventoryName() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInventoryName");

	Params::InventoryViewModel_GetInventoryName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModel.GetTotalSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInventoryViewModel::GetTotalSlots() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTotalSlots");

	Params::InventoryViewModel_GetTotalSlots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModelAllowedConversionFunctions.FindInventoryViewModel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UInventoryDefinition*             InventoryDefinition                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInventoryViewModel*>      InventoryViewModels                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UInventoryViewModel*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInventoryViewModel* UInventoryViewModelAllowedConversionFunctions::FindInventoryViewModel(const class UInventoryDefinition* InventoryDefinition, const TArray<class UInventoryViewModel*>& InventoryViewModels)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("FindInventoryViewModel");

	Params::InventoryViewModelAllowedConversionFunctions_FindInventoryViewModel Parms{};

	Parms.InventoryDefinition = InventoryDefinition;
	Parms.InventoryViewModels = std::move(InventoryViewModels);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.InventoryViewModelAllowedConversionFunctions.GetInventoryItemEntryViewModels
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class UInventoryItemEntryViewModel*>InventoryItemEntryViewModels                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bIncludeEmptySlots                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInventoryItemEntryViewModel*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UInventoryItemEntryViewModel*> UInventoryViewModelAllowedConversionFunctions::GetInventoryItemEntryViewModels(const TArray<class UInventoryItemEntryViewModel*>& InventoryItemEntryViewModels, const bool bIncludeEmptySlots)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetInventoryItemEntryViewModels");

	Params::InventoryViewModelAllowedConversionFunctions_GetInventoryItemEntryViewModels Parms{};

	Parms.InventoryItemEntryViewModels = std::move(InventoryItemEntryViewModels);
	Parms.bIncludeEmptySlots = bIncludeEmptySlots;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ItemizationCoreUI.UniformGridEntryPanel.SetGridItems
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  GridItems                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUniformGridEntryPanel::SetGridItems(const TArray<class UObject*>& GridItems)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGridItems");

	Params::UniformGridEntryPanel_SetGridItems Parms{};

	Parms.GridItems = std::move(GridItems);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreUI.UniformGridEntryPanel.SetSlotAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InSlotHorizontalAlignment                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVerticalAlignment                      InSlotVerticalAlignment                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUniformGridEntryPanel::SetSlotAlignment(const EHorizontalAlignment InSlotHorizontalAlignment, const EVerticalAlignment InSlotVerticalAlignment)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSlotAlignment");

	Params::UniformGridEntryPanel_SetSlotAlignment Parms{};

	Parms.InSlotHorizontalAlignment = InSlotHorizontalAlignment;
	Parms.InSlotVerticalAlignment = InSlotVerticalAlignment;

	UObject::ProcessEvent(Func, &Parms);
}

}

