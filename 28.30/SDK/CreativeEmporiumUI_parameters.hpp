#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativeEmporiumUI

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CreativeEmporiumUI_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CreativeEmporiumUI.EmporiumBrowserFilterEntry.SetIsFilterActive
// 0x0001 (0x0001 - 0x0000)
struct EmporiumBrowserFilterEntry_SetIsFilterActive final
{
public:
	bool                                          bInFilterActive;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFilterEntry_SetIsFilterActive) == 0x000001, "Wrong alignment on EmporiumBrowserFilterEntry_SetIsFilterActive");
static_assert(sizeof(EmporiumBrowserFilterEntry_SetIsFilterActive) == 0x000001, "Wrong size on EmporiumBrowserFilterEntry_SetIsFilterActive");
static_assert(offsetof(EmporiumBrowserFilterEntry_SetIsFilterActive, bInFilterActive) == 0x000000, "Member 'EmporiumBrowserFilterEntry_SetIsFilterActive::bInFilterActive' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFilterEntry.UpdateCheckMarkState
// 0x0001 (0x0001 - 0x0000)
struct EmporiumBrowserFilterEntry_UpdateCheckMarkState final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFilterEntry_UpdateCheckMarkState) == 0x000001, "Wrong alignment on EmporiumBrowserFilterEntry_UpdateCheckMarkState");
static_assert(sizeof(EmporiumBrowserFilterEntry_UpdateCheckMarkState) == 0x000001, "Wrong size on EmporiumBrowserFilterEntry_UpdateCheckMarkState");
static_assert(offsetof(EmporiumBrowserFilterEntry_UpdateCheckMarkState, bIsChecked) == 0x000000, "Member 'EmporiumBrowserFilterEntry_UpdateCheckMarkState::bIsChecked' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFilterEntry.UpdateItemCount
// 0x0004 (0x0004 - 0x0000)
struct EmporiumBrowserFilterEntry_UpdateItemCount final
{
public:
	int32                                         ItemCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFilterEntry_UpdateItemCount) == 0x000004, "Wrong alignment on EmporiumBrowserFilterEntry_UpdateItemCount");
static_assert(sizeof(EmporiumBrowserFilterEntry_UpdateItemCount) == 0x000004, "Wrong size on EmporiumBrowserFilterEntry_UpdateItemCount");
static_assert(offsetof(EmporiumBrowserFilterEntry_UpdateItemCount, ItemCount) == 0x000000, "Member 'EmporiumBrowserFilterEntry_UpdateItemCount::ItemCount' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFilterEntry.IsFilterActive
// 0x0001 (0x0001 - 0x0000)
struct EmporiumBrowserFilterEntry_IsFilterActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFilterEntry_IsFilterActive) == 0x000001, "Wrong alignment on EmporiumBrowserFilterEntry_IsFilterActive");
static_assert(sizeof(EmporiumBrowserFilterEntry_IsFilterActive) == 0x000001, "Wrong size on EmporiumBrowserFilterEntry_IsFilterActive");
static_assert(offsetof(EmporiumBrowserFilterEntry_IsFilterActive, ReturnValue) == 0x000000, "Member 'EmporiumBrowserFilterEntry_IsFilterActive::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.ExcludeItemDetailTag
// 0x0004 (0x0004 - 0x0000)
struct EmporiumBrowserFiltersPanel_ExcludeItemDetailTag final
{
public:
	class FName                                   TagID;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_ExcludeItemDetailTag) == 0x000004, "Wrong alignment on EmporiumBrowserFiltersPanel_ExcludeItemDetailTag");
static_assert(sizeof(EmporiumBrowserFiltersPanel_ExcludeItemDetailTag) == 0x000004, "Wrong size on EmporiumBrowserFiltersPanel_ExcludeItemDetailTag");
static_assert(offsetof(EmporiumBrowserFiltersPanel_ExcludeItemDetailTag, TagID) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_ExcludeItemDetailTag::TagID' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.HandleCategoryActivated
// 0x0010 (0x0010 - 0x0000)
struct EmporiumBrowserFiltersPanel_HandleCategoryActivated final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ListItemObject;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_HandleCategoryActivated) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_HandleCategoryActivated");
static_assert(sizeof(EmporiumBrowserFiltersPanel_HandleCategoryActivated) == 0x000010, "Wrong size on EmporiumBrowserFiltersPanel_HandleCategoryActivated");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleCategoryActivated, bIsExpanded) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_HandleCategoryActivated::bIsExpanded' has a wrong offset!");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleCategoryActivated, ListItemObject) == 0x000008, "Member 'EmporiumBrowserFiltersPanel_HandleCategoryActivated::ListItemObject' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.HandleCategoryExpansion
// 0x0008 (0x0008 - 0x0000)
struct EmporiumBrowserFiltersPanel_HandleCategoryExpansion final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_HandleCategoryExpansion) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_HandleCategoryExpansion");
static_assert(sizeof(EmporiumBrowserFiltersPanel_HandleCategoryExpansion) == 0x000008, "Wrong size on EmporiumBrowserFiltersPanel_HandleCategoryExpansion");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleCategoryExpansion, ListItemObject) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_HandleCategoryExpansion::ListItemObject' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.HandleCategoryWidgetDestroyed
// 0x0008 (0x0008 - 0x0000)
struct EmporiumBrowserFiltersPanel_HandleCategoryWidgetDestroyed final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_HandleCategoryWidgetDestroyed) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_HandleCategoryWidgetDestroyed");
static_assert(sizeof(EmporiumBrowserFiltersPanel_HandleCategoryWidgetDestroyed) == 0x000008, "Wrong size on EmporiumBrowserFiltersPanel_HandleCategoryWidgetDestroyed");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleCategoryWidgetDestroyed, ListItemObject) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_HandleCategoryWidgetDestroyed::ListItemObject' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.HandleFilterEnabled
// 0x0010 (0x0010 - 0x0000)
struct EmporiumBrowserFiltersPanel_HandleFilterEnabled final
{
public:
	bool                                          bIsFilterEnabled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ListItemObject;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_HandleFilterEnabled) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_HandleFilterEnabled");
static_assert(sizeof(EmporiumBrowserFiltersPanel_HandleFilterEnabled) == 0x000010, "Wrong size on EmporiumBrowserFiltersPanel_HandleFilterEnabled");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleFilterEnabled, bIsFilterEnabled) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_HandleFilterEnabled::bIsFilterEnabled' has a wrong offset!");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleFilterEnabled, ListItemObject) == 0x000008, "Member 'EmporiumBrowserFiltersPanel_HandleFilterEnabled::ListItemObject' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.HandleFilterSelected
// 0x0010 (0x0010 - 0x0000)
struct EmporiumBrowserFiltersPanel_HandleFilterSelected final
{
public:
	bool                                          bIsFilterEnabled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEmporiumBrowserFilterEntry*            Entry;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_HandleFilterSelected) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_HandleFilterSelected");
static_assert(sizeof(EmporiumBrowserFiltersPanel_HandleFilterSelected) == 0x000010, "Wrong size on EmporiumBrowserFiltersPanel_HandleFilterSelected");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleFilterSelected, bIsFilterEnabled) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_HandleFilterSelected::bIsFilterEnabled' has a wrong offset!");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleFilterSelected, Entry) == 0x000008, "Member 'EmporiumBrowserFiltersPanel_HandleFilterSelected::Entry' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.HandleSearchTextChanged
// 0x0018 (0x0018 - 0x0000)
struct EmporiumBrowserFiltersPanel_HandleSearchTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_HandleSearchTextChanged) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_HandleSearchTextChanged");
static_assert(sizeof(EmporiumBrowserFiltersPanel_HandleSearchTextChanged) == 0x000018, "Wrong size on EmporiumBrowserFiltersPanel_HandleSearchTextChanged");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleSearchTextChanged, Text) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_HandleSearchTextChanged::Text' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.HandleShowAllEnabled
// 0x0010 (0x0010 - 0x0000)
struct EmporiumBrowserFiltersPanel_HandleShowAllEnabled final
{
public:
	bool                                          bShowAllItems;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ListItemObject;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_HandleShowAllEnabled) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_HandleShowAllEnabled");
static_assert(sizeof(EmporiumBrowserFiltersPanel_HandleShowAllEnabled) == 0x000010, "Wrong size on EmporiumBrowserFiltersPanel_HandleShowAllEnabled");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleShowAllEnabled, bShowAllItems) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_HandleShowAllEnabled::bShowAllItems' has a wrong offset!");
static_assert(offsetof(EmporiumBrowserFiltersPanel_HandleShowAllEnabled, ListItemObject) == 0x000008, "Member 'EmporiumBrowserFiltersPanel_HandleShowAllEnabled::ListItemObject' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.IncludeItemDetailTag
// 0x0004 (0x0004 - 0x0000)
struct EmporiumBrowserFiltersPanel_IncludeItemDetailTag final
{
public:
	class FName                                   TagID;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_IncludeItemDetailTag) == 0x000004, "Wrong alignment on EmporiumBrowserFiltersPanel_IncludeItemDetailTag");
static_assert(sizeof(EmporiumBrowserFiltersPanel_IncludeItemDetailTag) == 0x000004, "Wrong size on EmporiumBrowserFiltersPanel_IncludeItemDetailTag");
static_assert(offsetof(EmporiumBrowserFiltersPanel_IncludeItemDetailTag, TagID) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_IncludeItemDetailTag::TagID' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.NavigateToNextSection
// 0x0010 (0x0010 - 0x0000)
struct EmporiumBrowserFiltersPanel_NavigateToNextSection final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_NavigateToNextSection) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_NavigateToNextSection");
static_assert(sizeof(EmporiumBrowserFiltersPanel_NavigateToNextSection) == 0x000010, "Wrong size on EmporiumBrowserFiltersPanel_NavigateToNextSection");
static_assert(offsetof(EmporiumBrowserFiltersPanel_NavigateToNextSection, bReverse) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_NavigateToNextSection::bReverse' has a wrong offset!");
static_assert(offsetof(EmporiumBrowserFiltersPanel_NavigateToNextSection, ReturnValue) == 0x000008, "Member 'EmporiumBrowserFiltersPanel_NavigateToNextSection::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.OnSetSearchText
// 0x0018 (0x0018 - 0x0000)
struct EmporiumBrowserFiltersPanel_OnSetSearchText final
{
public:
	class FText                                   NewSearchText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_OnSetSearchText) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_OnSetSearchText");
static_assert(sizeof(EmporiumBrowserFiltersPanel_OnSetSearchText) == 0x000018, "Wrong size on EmporiumBrowserFiltersPanel_OnSetSearchText");
static_assert(offsetof(EmporiumBrowserFiltersPanel_OnSetSearchText, NewSearchText) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_OnSetSearchText::NewSearchText' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.OnSetSearchVisible
// 0x0001 (0x0001 - 0x0000)
struct EmporiumBrowserFiltersPanel_OnSetSearchVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_OnSetSearchVisible) == 0x000001, "Wrong alignment on EmporiumBrowserFiltersPanel_OnSetSearchVisible");
static_assert(sizeof(EmporiumBrowserFiltersPanel_OnSetSearchVisible) == 0x000001, "Wrong size on EmporiumBrowserFiltersPanel_OnSetSearchVisible");
static_assert(offsetof(EmporiumBrowserFiltersPanel_OnSetSearchVisible, bVisible) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_OnSetSearchVisible::bVisible' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.SetItemDetailTags
// 0x0010 (0x0010 - 0x0000)
struct EmporiumBrowserFiltersPanel_SetItemDetailTags final
{
public:
	TArray<class FName>                           TagIDs;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_SetItemDetailTags) == 0x000008, "Wrong alignment on EmporiumBrowserFiltersPanel_SetItemDetailTags");
static_assert(sizeof(EmporiumBrowserFiltersPanel_SetItemDetailTags) == 0x000010, "Wrong size on EmporiumBrowserFiltersPanel_SetItemDetailTags");
static_assert(offsetof(EmporiumBrowserFiltersPanel_SetItemDetailTags, TagIDs) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_SetItemDetailTags::TagIDs' has a wrong offset!");

// Function CreativeEmporiumUI.EmporiumBrowserFiltersPanel.GetFilterCount
// 0x0004 (0x0004 - 0x0000)
struct EmporiumBrowserFiltersPanel_GetFilterCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmporiumBrowserFiltersPanel_GetFilterCount) == 0x000004, "Wrong alignment on EmporiumBrowserFiltersPanel_GetFilterCount");
static_assert(sizeof(EmporiumBrowserFiltersPanel_GetFilterCount) == 0x000004, "Wrong size on EmporiumBrowserFiltersPanel_GetFilterCount");
static_assert(offsetof(EmporiumBrowserFiltersPanel_GetFilterCount, ReturnValue) == 0x000000, "Member 'EmporiumBrowserFiltersPanel_GetFilterCount::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.ActivateCategory
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumFilterCategoryHeader_ActivateCategory final
{
public:
	bool                                          bExpanded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_ActivateCategory) == 0x000001, "Wrong alignment on FortEmporiumFilterCategoryHeader_ActivateCategory");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_ActivateCategory) == 0x000001, "Wrong size on FortEmporiumFilterCategoryHeader_ActivateCategory");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_ActivateCategory, bExpanded) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_ActivateCategory::bExpanded' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.AddSubcategoryWidget
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumFilterCategoryHeader_AddSubcategoryWidget final
{
public:
	class UWidget*                                SubcategoryWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_AddSubcategoryWidget) == 0x000008, "Wrong alignment on FortEmporiumFilterCategoryHeader_AddSubcategoryWidget");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_AddSubcategoryWidget) == 0x000008, "Wrong size on FortEmporiumFilterCategoryHeader_AddSubcategoryWidget");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_AddSubcategoryWidget, SubcategoryWidget) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_AddSubcategoryWidget::SubcategoryWidget' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.EnableCategoryExpansion
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumFilterCategoryHeader_EnableCategoryExpansion final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_EnableCategoryExpansion) == 0x000001, "Wrong alignment on FortEmporiumFilterCategoryHeader_EnableCategoryExpansion");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_EnableCategoryExpansion) == 0x000001, "Wrong size on FortEmporiumFilterCategoryHeader_EnableCategoryExpansion");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_EnableCategoryExpansion, bShow) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_EnableCategoryExpansion::bShow' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.ExpandCategory
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumFilterCategoryHeader_ExpandCategory final
{
public:
	bool                                          bExpanded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_ExpandCategory) == 0x000001, "Wrong alignment on FortEmporiumFilterCategoryHeader_ExpandCategory");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_ExpandCategory) == 0x000001, "Wrong size on FortEmporiumFilterCategoryHeader_ExpandCategory");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_ExpandCategory, bExpanded) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_ExpandCategory::bExpanded' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.SetCategoryText
// 0x0018 (0x0018 - 0x0000)
struct FortEmporiumFilterCategoryHeader_SetCategoryText final
{
public:
	class FText                                   NewButtonText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_SetCategoryText) == 0x000008, "Wrong alignment on FortEmporiumFilterCategoryHeader_SetCategoryText");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_SetCategoryText) == 0x000018, "Wrong size on FortEmporiumFilterCategoryHeader_SetCategoryText");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_SetCategoryText, NewButtonText) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_SetCategoryText::NewButtonText' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.SetSubcategoryCount
// 0x0004 (0x0004 - 0x0000)
struct FortEmporiumFilterCategoryHeader_SetSubcategoryCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_SetSubcategoryCount) == 0x000004, "Wrong alignment on FortEmporiumFilterCategoryHeader_SetSubcategoryCount");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_SetSubcategoryCount) == 0x000004, "Wrong size on FortEmporiumFilterCategoryHeader_SetSubcategoryCount");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_SetSubcategoryCount, NewCount) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_SetSubcategoryCount::NewCount' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.ShowCategoryActive
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumFilterCategoryHeader_ShowCategoryActive final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_ShowCategoryActive) == 0x000001, "Wrong alignment on FortEmporiumFilterCategoryHeader_ShowCategoryActive");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_ShowCategoryActive) == 0x000001, "Wrong size on FortEmporiumFilterCategoryHeader_ShowCategoryActive");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_ShowCategoryActive, bIsActive) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_ShowCategoryActive::bIsActive' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.UpdateCategoryCount
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumFilterCategoryHeader_UpdateCategoryCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideIfEmpty;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_UpdateCategoryCount) == 0x000004, "Wrong alignment on FortEmporiumFilterCategoryHeader_UpdateCategoryCount");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_UpdateCategoryCount) == 0x000008, "Wrong size on FortEmporiumFilterCategoryHeader_UpdateCategoryCount");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_UpdateCategoryCount, NewCount) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_UpdateCategoryCount::NewCount' has a wrong offset!");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_UpdateCategoryCount, bHideIfEmpty) == 0x000004, "Member 'FortEmporiumFilterCategoryHeader_UpdateCategoryCount::bHideIfEmpty' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.GetCategoryButton
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumFilterCategoryHeader_GetCategoryButton final
{
public:
	class UCommonButtonBase*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_GetCategoryButton) == 0x000008, "Wrong alignment on FortEmporiumFilterCategoryHeader_GetCategoryButton");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_GetCategoryButton) == 0x000008, "Wrong size on FortEmporiumFilterCategoryHeader_GetCategoryButton");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_GetCategoryButton, ReturnValue) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_GetCategoryButton::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumFilterCategoryHeader.GetSubcategoryWidgets
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumFilterCategoryHeader_GetSubcategoryWidgets final
{
public:
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumFilterCategoryHeader_GetSubcategoryWidgets) == 0x000008, "Wrong alignment on FortEmporiumFilterCategoryHeader_GetSubcategoryWidgets");
static_assert(sizeof(FortEmporiumFilterCategoryHeader_GetSubcategoryWidgets) == 0x000010, "Wrong size on FortEmporiumFilterCategoryHeader_GetSubcategoryWidgets");
static_assert(offsetof(FortEmporiumFilterCategoryHeader_GetSubcategoryWidgets, ReturnValue) == 0x000000, "Member 'FortEmporiumFilterCategoryHeader_GetSubcategoryWidgets::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumHomeListEntry.UpdateWarningMessage
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumHomeListEntry_UpdateWarningMessage final
{
public:
	bool                                          bShowMessage;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumHomeListEntry_UpdateWarningMessage) == 0x000001, "Wrong alignment on FortEmporiumHomeListEntry_UpdateWarningMessage");
static_assert(sizeof(FortEmporiumHomeListEntry_UpdateWarningMessage) == 0x000001, "Wrong size on FortEmporiumHomeListEntry_UpdateWarningMessage");
static_assert(offsetof(FortEmporiumHomeListEntry_UpdateWarningMessage, bShowMessage) == 0x000000, "Member 'FortEmporiumHomeListEntry_UpdateWarningMessage::bShowMessage' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumHomeListEntry.GetCardSizeForCategory
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumHomeListEntry_GetCardSizeForCategory final
{
public:
	EFortItemCardSize                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumHomeListEntry_GetCardSizeForCategory) == 0x000001, "Wrong alignment on FortEmporiumHomeListEntry_GetCardSizeForCategory");
static_assert(sizeof(FortEmporiumHomeListEntry_GetCardSizeForCategory) == 0x000001, "Wrong size on FortEmporiumHomeListEntry_GetCardSizeForCategory");
static_assert(offsetof(FortEmporiumHomeListEntry_GetCardSizeForCategory, ReturnValue) == 0x000000, "Member 'FortEmporiumHomeListEntry_GetCardSizeForCategory::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumHomeListEntry.GetCollapseBorderPadFlagForCategory
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumHomeListEntry_GetCollapseBorderPadFlagForCategory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumHomeListEntry_GetCollapseBorderPadFlagForCategory) == 0x000001, "Wrong alignment on FortEmporiumHomeListEntry_GetCollapseBorderPadFlagForCategory");
static_assert(sizeof(FortEmporiumHomeListEntry_GetCollapseBorderPadFlagForCategory) == 0x000001, "Wrong size on FortEmporiumHomeListEntry_GetCollapseBorderPadFlagForCategory");
static_assert(offsetof(FortEmporiumHomeListEntry_GetCollapseBorderPadFlagForCategory, ReturnValue) == 0x000000, "Member 'FortEmporiumHomeListEntry_GetCollapseBorderPadFlagForCategory::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumHomeListView.GetFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumHomeListView_GetFocusWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumHomeListView_GetFocusWidget) == 0x000008, "Wrong alignment on FortEmporiumHomeListView_GetFocusWidget");
static_assert(sizeof(FortEmporiumHomeListView_GetFocusWidget) == 0x000008, "Wrong size on FortEmporiumHomeListView_GetFocusWidget");
static_assert(offsetof(FortEmporiumHomeListView_GetFocusWidget, ReturnValue) == 0x000000, "Member 'FortEmporiumHomeListView_GetFocusWidget::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDefinition.GetEmporiumItemData
// 0x00E8 (0x00E8 - 0x0000)
struct FortEmporiumItemDefinition_GetEmporiumItemData final
{
public:
	struct FFortEmporiumItemData                  ReturnValue;                                       // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemDefinition_GetEmporiumItemData) == 0x000008, "Wrong alignment on FortEmporiumItemDefinition_GetEmporiumItemData");
static_assert(sizeof(FortEmporiumItemDefinition_GetEmporiumItemData) == 0x0000E8, "Wrong size on FortEmporiumItemDefinition_GetEmporiumItemData");
static_assert(offsetof(FortEmporiumItemDefinition_GetEmporiumItemData, ReturnValue) == 0x000000, "Member 'FortEmporiumItemDefinition_GetEmporiumItemData::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.HandleItemTagSelected
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemDetailsPanel_HandleItemTagSelected final
{
public:
	class FName                                   TagID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemDetailsPanel_HandleItemTagSelected) == 0x000004, "Wrong alignment on FortEmporiumItemDetailsPanel_HandleItemTagSelected");
static_assert(sizeof(FortEmporiumItemDetailsPanel_HandleItemTagSelected) == 0x000008, "Wrong size on FortEmporiumItemDetailsPanel_HandleItemTagSelected");
static_assert(offsetof(FortEmporiumItemDetailsPanel_HandleItemTagSelected, TagID) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_HandleItemTagSelected::TagID' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemDetailsPanel_HandleItemTagSelected, bSelected) == 0x000004, "Member 'FortEmporiumItemDetailsPanel_HandleItemTagSelected::bSelected' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.IsShowingAdditionalButtons
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemDetailsPanel_IsShowingAdditionalButtons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemDetailsPanel_IsShowingAdditionalButtons) == 0x000001, "Wrong alignment on FortEmporiumItemDetailsPanel_IsShowingAdditionalButtons");
static_assert(sizeof(FortEmporiumItemDetailsPanel_IsShowingAdditionalButtons) == 0x000001, "Wrong size on FortEmporiumItemDetailsPanel_IsShowingAdditionalButtons");
static_assert(offsetof(FortEmporiumItemDetailsPanel_IsShowingAdditionalButtons, ReturnValue) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_IsShowingAdditionalButtons::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.SetActiveItemDetailTags
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumItemDetailsPanel_SetActiveItemDetailTags final
{
public:
	TArray<class FName>                           ActiveTags;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemDetailsPanel_SetActiveItemDetailTags) == 0x000008, "Wrong alignment on FortEmporiumItemDetailsPanel_SetActiveItemDetailTags");
static_assert(sizeof(FortEmporiumItemDetailsPanel_SetActiveItemDetailTags) == 0x000010, "Wrong size on FortEmporiumItemDetailsPanel_SetActiveItemDetailTags");
static_assert(offsetof(FortEmporiumItemDetailsPanel_SetActiveItemDetailTags, ActiveTags) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_SetActiveItemDetailTags::ActiveTags' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.SetItemDetails
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumItemDetailsPanel_SetItemDetails final
{
public:
	const class UFortItem*                        FortItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLargeThumbnail;                                // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInteractiveTags;                             // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemDetailsPanel_SetItemDetails) == 0x000008, "Wrong alignment on FortEmporiumItemDetailsPanel_SetItemDetails");
static_assert(sizeof(FortEmporiumItemDetailsPanel_SetItemDetails) == 0x000010, "Wrong size on FortEmporiumItemDetailsPanel_SetItemDetails");
static_assert(offsetof(FortEmporiumItemDetailsPanel_SetItemDetails, FortItem) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_SetItemDetails::FortItem' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemDetailsPanel_SetItemDetails, bUseLargeThumbnail) == 0x000008, "Member 'FortEmporiumItemDetailsPanel_SetItemDetails::bUseLargeThumbnail' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemDetailsPanel_SetItemDetails, bAllowInteractiveTags) == 0x000009, "Member 'FortEmporiumItemDetailsPanel_SetItemDetails::bAllowInteractiveTags' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.SetItemToDetail
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumItemDetailsPanel_SetItemToDetail final
{
public:
	const class UFortItem*                        InItemToDetail;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLargeThumbnail;                                // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInteractiveTags;                             // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemDetailsPanel_SetItemToDetail) == 0x000008, "Wrong alignment on FortEmporiumItemDetailsPanel_SetItemToDetail");
static_assert(sizeof(FortEmporiumItemDetailsPanel_SetItemToDetail) == 0x000010, "Wrong size on FortEmporiumItemDetailsPanel_SetItemToDetail");
static_assert(offsetof(FortEmporiumItemDetailsPanel_SetItemToDetail, InItemToDetail) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_SetItemToDetail::InItemToDetail' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemDetailsPanel_SetItemToDetail, bUseLargeThumbnail) == 0x000008, "Member 'FortEmporiumItemDetailsPanel_SetItemToDetail::bUseLargeThumbnail' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemDetailsPanel_SetItemToDetail, bAllowInteractiveTags) == 0x000009, "Member 'FortEmporiumItemDetailsPanel_SetItemToDetail::bAllowInteractiveTags' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.SetSpecialItemTagVisibility
// 0x0004 (0x0004 - 0x0000)
struct FortEmporiumItemDetailsPanel_SetSpecialItemTagVisibility final
{
public:
	class FName                                   SpecialItemTag;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemDetailsPanel_SetSpecialItemTagVisibility) == 0x000004, "Wrong alignment on FortEmporiumItemDetailsPanel_SetSpecialItemTagVisibility");
static_assert(sizeof(FortEmporiumItemDetailsPanel_SetSpecialItemTagVisibility) == 0x000004, "Wrong size on FortEmporiumItemDetailsPanel_SetSpecialItemTagVisibility");
static_assert(offsetof(FortEmporiumItemDetailsPanel_SetSpecialItemTagVisibility, SpecialItemTag) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_SetSpecialItemTagVisibility::SpecialItemTag' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.UpdateItemDetailsDisplay
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemDetailsPanel_UpdateItemDetailsDisplay final
{
public:
	bool                                          bShowItemDetails;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemDetailsPanel_UpdateItemDetailsDisplay) == 0x000001, "Wrong alignment on FortEmporiumItemDetailsPanel_UpdateItemDetailsDisplay");
static_assert(sizeof(FortEmporiumItemDetailsPanel_UpdateItemDetailsDisplay) == 0x000001, "Wrong size on FortEmporiumItemDetailsPanel_UpdateItemDetailsDisplay");
static_assert(offsetof(FortEmporiumItemDetailsPanel_UpdateItemDetailsDisplay, bShowItemDetails) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_UpdateItemDetailsDisplay::bShowItemDetails' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.BP_GetSpecialItemTags
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumItemDetailsPanel_BP_GetSpecialItemTags final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemDetailsPanel_BP_GetSpecialItemTags) == 0x000008, "Wrong alignment on FortEmporiumItemDetailsPanel_BP_GetSpecialItemTags");
static_assert(sizeof(FortEmporiumItemDetailsPanel_BP_GetSpecialItemTags) == 0x000010, "Wrong size on FortEmporiumItemDetailsPanel_BP_GetSpecialItemTags");
static_assert(offsetof(FortEmporiumItemDetailsPanel_BP_GetSpecialItemTags, ReturnValue) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_BP_GetSpecialItemTags::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.HasLegacyItemDetailsPanel
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemDetailsPanel_HasLegacyItemDetailsPanel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemDetailsPanel_HasLegacyItemDetailsPanel) == 0x000001, "Wrong alignment on FortEmporiumItemDetailsPanel_HasLegacyItemDetailsPanel");
static_assert(sizeof(FortEmporiumItemDetailsPanel_HasLegacyItemDetailsPanel) == 0x000001, "Wrong size on FortEmporiumItemDetailsPanel_HasLegacyItemDetailsPanel");
static_assert(offsetof(FortEmporiumItemDetailsPanel_HasLegacyItemDetailsPanel, ReturnValue) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_HasLegacyItemDetailsPanel::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemDetailsPanel.IsShowingExtendedDataPanel
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemDetailsPanel_IsShowingExtendedDataPanel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemDetailsPanel_IsShowingExtendedDataPanel) == 0x000001, "Wrong alignment on FortEmporiumItemDetailsPanel_IsShowingExtendedDataPanel");
static_assert(sizeof(FortEmporiumItemDetailsPanel_IsShowingExtendedDataPanel) == 0x000001, "Wrong size on FortEmporiumItemDetailsPanel_IsShowingExtendedDataPanel");
static_assert(offsetof(FortEmporiumItemDetailsPanel_IsShowingExtendedDataPanel, ReturnValue) == 0x000000, "Member 'FortEmporiumItemDetailsPanel_IsShowingExtendedDataPanel::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemInfo.SetSelectItemTagsIcon
// 0x00C0 (0x00C0 - 0x0000)
struct FortEmporiumItemInfo_SetSelectItemTagsIcon final
{
public:
	struct FSlateBrush                            SelectItemTagsIcon;                                // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemInfo_SetSelectItemTagsIcon) == 0x000010, "Wrong alignment on FortEmporiumItemInfo_SetSelectItemTagsIcon");
static_assert(sizeof(FortEmporiumItemInfo_SetSelectItemTagsIcon) == 0x0000C0, "Wrong size on FortEmporiumItemInfo_SetSelectItemTagsIcon");
static_assert(offsetof(FortEmporiumItemInfo_SetSelectItemTagsIcon, SelectItemTagsIcon) == 0x000000, "Member 'FortEmporiumItemInfo_SetSelectItemTagsIcon::SelectItemTagsIcon' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemInfo.SetSelectItemTagsPrompt
// 0x0018 (0x0018 - 0x0000)
struct FortEmporiumItemInfo_SetSelectItemTagsPrompt final
{
public:
	class FText                                   Prompt;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemInfo_SetSelectItemTagsPrompt) == 0x000008, "Wrong alignment on FortEmporiumItemInfo_SetSelectItemTagsPrompt");
static_assert(sizeof(FortEmporiumItemInfo_SetSelectItemTagsPrompt) == 0x000018, "Wrong size on FortEmporiumItemInfo_SetSelectItemTagsPrompt");
static_assert(offsetof(FortEmporiumItemInfo_SetSelectItemTagsPrompt, Prompt) == 0x000000, "Member 'FortEmporiumItemInfo_SetSelectItemTagsPrompt::Prompt' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemInfo.ShowSelectItemTagsPrompt
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemInfo_ShowSelectItemTagsPrompt final
{
public:
	bool                                          bShowPrompt;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemInfo_ShowSelectItemTagsPrompt) == 0x000001, "Wrong alignment on FortEmporiumItemInfo_ShowSelectItemTagsPrompt");
static_assert(sizeof(FortEmporiumItemInfo_ShowSelectItemTagsPrompt) == 0x000001, "Wrong size on FortEmporiumItemInfo_ShowSelectItemTagsPrompt");
static_assert(offsetof(FortEmporiumItemInfo_ShowSelectItemTagsPrompt, bShowPrompt) == 0x000000, "Member 'FortEmporiumItemInfo_ShowSelectItemTagsPrompt::bShowPrompt' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemInfo.UpdateWithFortItem
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumItemInfo_UpdateWithFortItem final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInteractiveTags;                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemInfo_UpdateWithFortItem) == 0x000008, "Wrong alignment on FortEmporiumItemInfo_UpdateWithFortItem");
static_assert(sizeof(FortEmporiumItemInfo_UpdateWithFortItem) == 0x000010, "Wrong size on FortEmporiumItemInfo_UpdateWithFortItem");
static_assert(offsetof(FortEmporiumItemInfo_UpdateWithFortItem, Item) == 0x000000, "Member 'FortEmporiumItemInfo_UpdateWithFortItem::Item' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemInfo_UpdateWithFortItem, bAllowInteractiveTags) == 0x000008, "Member 'FortEmporiumItemInfo_UpdateWithFortItem::bAllowInteractiveTags' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemInfo.HasFocusableTags
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemInfo_HasFocusableTags final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemInfo_HasFocusableTags) == 0x000001, "Wrong alignment on FortEmporiumItemInfo_HasFocusableTags");
static_assert(sizeof(FortEmporiumItemInfo_HasFocusableTags) == 0x000001, "Wrong size on FortEmporiumItemInfo_HasFocusableTags");
static_assert(offsetof(FortEmporiumItemInfo_HasFocusableTags, ReturnValue) == 0x000000, "Member 'FortEmporiumItemInfo_HasFocusableTags::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.AddSelectionToQuickBar
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_AddSelectionToQuickBar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_AddSelectionToQuickBar) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_AddSelectionToQuickBar");
static_assert(sizeof(FortEmporiumItemListMenu_AddSelectionToQuickBar) == 0x000001, "Wrong size on FortEmporiumItemListMenu_AddSelectionToQuickBar");
static_assert(offsetof(FortEmporiumItemListMenu_AddSelectionToQuickBar, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListMenu_AddSelectionToQuickBar::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.DropItem
// 0x01A8 (0x01A8 - 0x0000)
struct FortEmporiumItemListMenu_DropItem final
{
public:
	struct FFortItemEntry                         SelectedItem;                                      // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemListMenu_DropItem) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_DropItem");
static_assert(sizeof(FortEmporiumItemListMenu_DropItem) == 0x0001A8, "Wrong size on FortEmporiumItemListMenu_DropItem");
static_assert(offsetof(FortEmporiumItemListMenu_DropItem, SelectedItem) == 0x000000, "Member 'FortEmporiumItemListMenu_DropItem::SelectedItem' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_DropItem, ReturnValue) == 0x0001A0, "Member 'FortEmporiumItemListMenu_DropItem::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.EquipItem
// 0x01A8 (0x01A8 - 0x0000)
struct FortEmporiumItemListMenu_EquipItem final
{
public:
	struct FFortItemEntry                         ItemEntry;                                         // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemListMenu_EquipItem) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_EquipItem");
static_assert(sizeof(FortEmporiumItemListMenu_EquipItem) == 0x0001A8, "Wrong size on FortEmporiumItemListMenu_EquipItem");
static_assert(offsetof(FortEmporiumItemListMenu_EquipItem, ItemEntry) == 0x000000, "Member 'FortEmporiumItemListMenu_EquipItem::ItemEntry' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_EquipItem, ReturnValue) == 0x0001A0, "Member 'FortEmporiumItemListMenu_EquipItem::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.EquipSelection
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_EquipSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_EquipSelection) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_EquipSelection");
static_assert(sizeof(FortEmporiumItemListMenu_EquipSelection) == 0x000001, "Wrong size on FortEmporiumItemListMenu_EquipSelection");
static_assert(offsetof(FortEmporiumItemListMenu_EquipSelection, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListMenu_EquipSelection::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleCategoryActivated
// 0x0004 (0x0004 - 0x0000)
struct FortEmporiumItemListMenu_HandleCategoryActivated final
{
public:
	class FName                                   CategoryID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleCategoryActivated) == 0x000004, "Wrong alignment on FortEmporiumItemListMenu_HandleCategoryActivated");
static_assert(sizeof(FortEmporiumItemListMenu_HandleCategoryActivated) == 0x000004, "Wrong size on FortEmporiumItemListMenu_HandleCategoryActivated");
static_assert(offsetof(FortEmporiumItemListMenu_HandleCategoryActivated, CategoryID) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleCategoryActivated::CategoryID' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleCategoryFocused
// 0x0004 (0x0004 - 0x0000)
struct FortEmporiumItemListMenu_HandleCategoryFocused final
{
public:
	class FName                                   CategoryID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleCategoryFocused) == 0x000004, "Wrong alignment on FortEmporiumItemListMenu_HandleCategoryFocused");
static_assert(sizeof(FortEmporiumItemListMenu_HandleCategoryFocused) == 0x000004, "Wrong size on FortEmporiumItemListMenu_HandleCategoryFocused");
static_assert(offsetof(FortEmporiumItemListMenu_HandleCategoryFocused, CategoryID) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleCategoryFocused::CategoryID' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleChestItemCountChanged
// 0x0004 (0x0004 - 0x0000)
struct FortEmporiumItemListMenu_HandleChestItemCountChanged final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleChestItemCountChanged) == 0x000004, "Wrong alignment on FortEmporiumItemListMenu_HandleChestItemCountChanged");
static_assert(sizeof(FortEmporiumItemListMenu_HandleChestItemCountChanged) == 0x000004, "Wrong size on FortEmporiumItemListMenu_HandleChestItemCountChanged");
static_assert(offsetof(FortEmporiumItemListMenu_HandleChestItemCountChanged, Count) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleChestItemCountChanged::Count' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleEquipItem
// 0x01A0 (0x01A0 - 0x0000)
struct FortEmporiumItemListMenu_HandleEquipItem final
{
public:
	struct FFortItemEntry                         ItemEntry;                                         // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleEquipItem) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_HandleEquipItem");
static_assert(sizeof(FortEmporiumItemListMenu_HandleEquipItem) == 0x0001A0, "Wrong size on FortEmporiumItemListMenu_HandleEquipItem");
static_assert(offsetof(FortEmporiumItemListMenu_HandleEquipItem, ItemEntry) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleEquipItem::ItemEntry' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleFilterButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumItemListMenu_HandleFilterButtonClicked final
{
public:
	class FName                                   FilterNameId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      NewButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleFilterButtonClicked) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_HandleFilterButtonClicked");
static_assert(sizeof(FortEmporiumItemListMenu_HandleFilterButtonClicked) == 0x000010, "Wrong size on FortEmporiumItemListMenu_HandleFilterButtonClicked");
static_assert(offsetof(FortEmporiumItemListMenu_HandleFilterButtonClicked, FilterNameId) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleFilterButtonClicked::FilterNameId' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_HandleFilterButtonClicked, NewButton) == 0x000008, "Member 'FortEmporiumItemListMenu_HandleFilterButtonClicked::NewButton' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleFilterPanelIsFocused
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_HandleFilterPanelIsFocused final
{
public:
	bool                                          bIsFocused;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleFilterPanelIsFocused) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_HandleFilterPanelIsFocused");
static_assert(sizeof(FortEmporiumItemListMenu_HandleFilterPanelIsFocused) == 0x000001, "Wrong size on FortEmporiumItemListMenu_HandleFilterPanelIsFocused");
static_assert(offsetof(FortEmporiumItemListMenu_HandleFilterPanelIsFocused, bIsFocused) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleFilterPanelIsFocused::bIsFocused' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleItemClicked
// 0x01A0 (0x01A0 - 0x0000)
struct FortEmporiumItemListMenu_HandleItemClicked final
{
public:
	struct FFortItemEntry                         ItemEntry;                                         // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleItemClicked) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_HandleItemClicked");
static_assert(sizeof(FortEmporiumItemListMenu_HandleItemClicked) == 0x0001A0, "Wrong size on FortEmporiumItemListMenu_HandleItemClicked");
static_assert(offsetof(FortEmporiumItemListMenu_HandleItemClicked, ItemEntry) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleItemClicked::ItemEntry' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleItemDoubleClicked
// 0x01A0 (0x01A0 - 0x0000)
struct FortEmporiumItemListMenu_HandleItemDoubleClicked final
{
public:
	struct FFortItemEntry                         ItemEntry;                                         // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleItemDoubleClicked) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_HandleItemDoubleClicked");
static_assert(sizeof(FortEmporiumItemListMenu_HandleItemDoubleClicked) == 0x0001A0, "Wrong size on FortEmporiumItemListMenu_HandleItemDoubleClicked");
static_assert(offsetof(FortEmporiumItemListMenu_HandleItemDoubleClicked, ItemEntry) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleItemDoubleClicked::ItemEntry' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleItemTagSelected
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListMenu_HandleItemTagSelected final
{
public:
	class FName                                   TagID;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemListMenu_HandleItemTagSelected) == 0x000004, "Wrong alignment on FortEmporiumItemListMenu_HandleItemTagSelected");
static_assert(sizeof(FortEmporiumItemListMenu_HandleItemTagSelected) == 0x000008, "Wrong size on FortEmporiumItemListMenu_HandleItemTagSelected");
static_assert(offsetof(FortEmporiumItemListMenu_HandleItemTagSelected, TagID) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleItemTagSelected::TagID' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_HandleItemTagSelected, bSelected) == 0x000004, "Member 'FortEmporiumItemListMenu_HandleItemTagSelected::bSelected' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleItemThumbnailDownloaded
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListMenu_HandleItemThumbnailDownloaded final
{
public:
	class UFortEmporiumItemDefinition*            ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleItemThumbnailDownloaded) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_HandleItemThumbnailDownloaded");
static_assert(sizeof(FortEmporiumItemListMenu_HandleItemThumbnailDownloaded) == 0x000008, "Wrong size on FortEmporiumItemListMenu_HandleItemThumbnailDownloaded");
static_assert(offsetof(FortEmporiumItemListMenu_HandleItemThumbnailDownloaded, ItemDefinition) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleItemThumbnailDownloaded::ItemDefinition' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleQuickbarPanelIsFocused
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_HandleQuickbarPanelIsFocused final
{
public:
	bool                                          bIsFocused;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleQuickbarPanelIsFocused) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_HandleQuickbarPanelIsFocused");
static_assert(sizeof(FortEmporiumItemListMenu_HandleQuickbarPanelIsFocused) == 0x000001, "Wrong size on FortEmporiumItemListMenu_HandleQuickbarPanelIsFocused");
static_assert(offsetof(FortEmporiumItemListMenu_HandleQuickbarPanelIsFocused, bIsFocused) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleQuickbarPanelIsFocused::bIsFocused' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleQuickbarStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_HandleQuickbarStateChanged final
{
public:
	EFortContentBrowserQuickbarState              State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleQuickbarStateChanged) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_HandleQuickbarStateChanged");
static_assert(sizeof(FortEmporiumItemListMenu_HandleQuickbarStateChanged) == 0x000001, "Wrong size on FortEmporiumItemListMenu_HandleQuickbarStateChanged");
static_assert(offsetof(FortEmporiumItemListMenu_HandleQuickbarStateChanged, State) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleQuickbarStateChanged::State' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListMenu_HandleSelectionChanged final
{
public:
	class UFortCreativeContentBrowserTabPanelBase* Tab;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleSelectionChanged) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_HandleSelectionChanged");
static_assert(sizeof(FortEmporiumItemListMenu_HandleSelectionChanged) == 0x000008, "Wrong size on FortEmporiumItemListMenu_HandleSelectionChanged");
static_assert(offsetof(FortEmporiumItemListMenu_HandleSelectionChanged, Tab) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleSelectionChanged::Tab' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleSortButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumItemListMenu_HandleSortButtonClicked final
{
public:
	class FName                                   SortNameId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      NewButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleSortButtonClicked) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_HandleSortButtonClicked");
static_assert(sizeof(FortEmporiumItemListMenu_HandleSortButtonClicked) == 0x000010, "Wrong size on FortEmporiumItemListMenu_HandleSortButtonClicked");
static_assert(offsetof(FortEmporiumItemListMenu_HandleSortButtonClicked, SortNameId) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleSortButtonClicked::SortNameId' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_HandleSortButtonClicked, NewButton) == 0x000008, "Member 'FortEmporiumItemListMenu_HandleSortButtonClicked::NewButton' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleTabItemDetailClicked
// 0x0004 (0x0004 - 0x0000)
struct FortEmporiumItemListMenu_HandleTabItemDetailClicked final
{
public:
	class FName                                   TagID;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_HandleTabItemDetailClicked) == 0x000004, "Wrong alignment on FortEmporiumItemListMenu_HandleTabItemDetailClicked");
static_assert(sizeof(FortEmporiumItemListMenu_HandleTabItemDetailClicked) == 0x000004, "Wrong size on FortEmporiumItemListMenu_HandleTabItemDetailClicked");
static_assert(offsetof(FortEmporiumItemListMenu_HandleTabItemDetailClicked, TagID) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleTabItemDetailClicked::TagID' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.HandleTabSelected
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListMenu_HandleTabSelected final
{
public:
	class FName                                   TabID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureFocus;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemListMenu_HandleTabSelected) == 0x000004, "Wrong alignment on FortEmporiumItemListMenu_HandleTabSelected");
static_assert(sizeof(FortEmporiumItemListMenu_HandleTabSelected) == 0x000008, "Wrong size on FortEmporiumItemListMenu_HandleTabSelected");
static_assert(offsetof(FortEmporiumItemListMenu_HandleTabSelected, TabID) == 0x000000, "Member 'FortEmporiumItemListMenu_HandleTabSelected::TabID' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_HandleTabSelected, bCaptureFocus) == 0x000004, "Member 'FortEmporiumItemListMenu_HandleTabSelected::bCaptureFocus' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OnCursorModeChanged
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumItemListMenu_OnCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            CursorModeContentWidget;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OnCursorModeChanged) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_OnCursorModeChanged");
static_assert(sizeof(FortEmporiumItemListMenu_OnCursorModeChanged) == 0x000010, "Wrong size on FortEmporiumItemListMenu_OnCursorModeChanged");
static_assert(offsetof(FortEmporiumItemListMenu_OnCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'FortEmporiumItemListMenu_OnCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_OnCursorModeChanged, ActionName) == 0x000004, "Member 'FortEmporiumItemListMenu_OnCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_OnCursorModeChanged, CursorModeContentWidget) == 0x000008, "Member 'FortEmporiumItemListMenu_OnCursorModeChanged::CursorModeContentWidget' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OnFabCategoryListLoaded
// 0x0018 (0x0018 - 0x0000)
struct FortEmporiumItemListMenu_OnFabCategoryListLoaded final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JsonString;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OnFabCategoryListLoaded) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_OnFabCategoryListLoaded");
static_assert(sizeof(FortEmporiumItemListMenu_OnFabCategoryListLoaded) == 0x000018, "Wrong size on FortEmporiumItemListMenu_OnFabCategoryListLoaded");
static_assert(offsetof(FortEmporiumItemListMenu_OnFabCategoryListLoaded, bSuccess) == 0x000000, "Member 'FortEmporiumItemListMenu_OnFabCategoryListLoaded::bSuccess' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_OnFabCategoryListLoaded, JsonString) == 0x000008, "Member 'FortEmporiumItemListMenu_OnFabCategoryListLoaded::JsonString' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OnFabItemQueryComplete
// 0x0018 (0x0018 - 0x0000)
struct FortEmporiumItemListMenu_OnFabItemQueryComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JsonString;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OnFabItemQueryComplete) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_OnFabItemQueryComplete");
static_assert(sizeof(FortEmporiumItemListMenu_OnFabItemQueryComplete) == 0x000018, "Wrong size on FortEmporiumItemListMenu_OnFabItemQueryComplete");
static_assert(offsetof(FortEmporiumItemListMenu_OnFabItemQueryComplete, bSuccess) == 0x000000, "Member 'FortEmporiumItemListMenu_OnFabItemQueryComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_OnFabItemQueryComplete, JsonString) == 0x000008, "Member 'FortEmporiumItemListMenu_OnFabItemQueryComplete::JsonString' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OnItemEquipped
// 0x01A0 (0x01A0 - 0x0000)
struct FortEmporiumItemListMenu_OnItemEquipped final
{
public:
	struct FFortItemEntry                         EquippedItemEntry;                                 // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OnItemEquipped) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_OnItemEquipped");
static_assert(sizeof(FortEmporiumItemListMenu_OnItemEquipped) == 0x0001A0, "Wrong size on FortEmporiumItemListMenu_OnItemEquipped");
static_assert(offsetof(FortEmporiumItemListMenu_OnItemEquipped, EquippedItemEntry) == 0x000000, "Member 'FortEmporiumItemListMenu_OnItemEquipped::EquippedItemEntry' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OnQuickbarStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_OnQuickbarStateChanged final
{
public:
	EFortContentBrowserQuickbarState              State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OnQuickbarStateChanged) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_OnQuickbarStateChanged");
static_assert(sizeof(FortEmporiumItemListMenu_OnQuickbarStateChanged) == 0x000001, "Wrong size on FortEmporiumItemListMenu_OnQuickbarStateChanged");
static_assert(offsetof(FortEmporiumItemListMenu_OnQuickbarStateChanged, State) == 0x000000, "Member 'FortEmporiumItemListMenu_OnQuickbarStateChanged::State' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OnSearchFiltersVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_OnSearchFiltersVisibilityChanged final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OnSearchFiltersVisibilityChanged) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_OnSearchFiltersVisibilityChanged");
static_assert(sizeof(FortEmporiumItemListMenu_OnSearchFiltersVisibilityChanged) == 0x000001, "Wrong size on FortEmporiumItemListMenu_OnSearchFiltersVisibilityChanged");
static_assert(offsetof(FortEmporiumItemListMenu_OnSearchFiltersVisibilityChanged, bIsVisible) == 0x000000, "Member 'FortEmporiumItemListMenu_OnSearchFiltersVisibilityChanged::bIsVisible' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OnSelectionOpened
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListMenu_OnSelectionOpened final
{
public:
	const class UItemDefinitionBase*              SelectedItemDefinition;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OnSelectionOpened) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_OnSelectionOpened");
static_assert(sizeof(FortEmporiumItemListMenu_OnSelectionOpened) == 0x000008, "Wrong size on FortEmporiumItemListMenu_OnSelectionOpened");
static_assert(offsetof(FortEmporiumItemListMenu_OnSelectionOpened, SelectedItemDefinition) == 0x000000, "Member 'FortEmporiumItemListMenu_OnSelectionOpened::SelectedItemDefinition' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OnShowCategoryModal
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_OnShowCategoryModal final
{
public:
	bool                                          bShowModal;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OnShowCategoryModal) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_OnShowCategoryModal");
static_assert(sizeof(FortEmporiumItemListMenu_OnShowCategoryModal) == 0x000001, "Wrong size on FortEmporiumItemListMenu_OnShowCategoryModal");
static_assert(offsetof(FortEmporiumItemListMenu_OnShowCategoryModal, bShowModal) == 0x000000, "Member 'FortEmporiumItemListMenu_OnShowCategoryModal::bShowModal' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OnUpdateCommandBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_OnUpdateCommandBarVisibility final
{
public:
	bool                                          bShowBar;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OnUpdateCommandBarVisibility) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_OnUpdateCommandBarVisibility");
static_assert(sizeof(FortEmporiumItemListMenu_OnUpdateCommandBarVisibility) == 0x000001, "Wrong size on FortEmporiumItemListMenu_OnUpdateCommandBarVisibility");
static_assert(offsetof(FortEmporiumItemListMenu_OnUpdateCommandBarVisibility, bShowBar) == 0x000000, "Member 'FortEmporiumItemListMenu_OnUpdateCommandBarVisibility::bShowBar' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.OpenSelection
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_OpenSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_OpenSelection) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_OpenSelection");
static_assert(sizeof(FortEmporiumItemListMenu_OpenSelection) == 0x000001, "Wrong size on FortEmporiumItemListMenu_OpenSelection");
static_assert(offsetof(FortEmporiumItemListMenu_OpenSelection, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListMenu_OpenSelection::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.PlaceSelectionInMoveTool
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_PlaceSelectionInMoveTool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_PlaceSelectionInMoveTool) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_PlaceSelectionInMoveTool");
static_assert(sizeof(FortEmporiumItemListMenu_PlaceSelectionInMoveTool) == 0x000001, "Wrong size on FortEmporiumItemListMenu_PlaceSelectionInMoveTool");
static_assert(offsetof(FortEmporiumItemListMenu_PlaceSelectionInMoveTool, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListMenu_PlaceSelectionInMoveTool::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.SetIsItemCommandsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_SetIsItemCommandsEnabled final
{
public:
	bool                                          bInIsItemCommandEnabled;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_SetIsItemCommandsEnabled) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_SetIsItemCommandsEnabled");
static_assert(sizeof(FortEmporiumItemListMenu_SetIsItemCommandsEnabled) == 0x000001, "Wrong size on FortEmporiumItemListMenu_SetIsItemCommandsEnabled");
static_assert(offsetof(FortEmporiumItemListMenu_SetIsItemCommandsEnabled, bInIsItemCommandEnabled) == 0x000000, "Member 'FortEmporiumItemListMenu_SetIsItemCommandsEnabled::bInIsItemCommandEnabled' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.SetSubTabOpened
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListMenu_SetSubTabOpened final
{
public:
	class UItemDefinitionBase*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_SetSubTabOpened) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_SetSubTabOpened");
static_assert(sizeof(FortEmporiumItemListMenu_SetSubTabOpened) == 0x000008, "Wrong size on FortEmporiumItemListMenu_SetSubTabOpened");
static_assert(offsetof(FortEmporiumItemListMenu_SetSubTabOpened, ItemDefinition) == 0x000000, "Member 'FortEmporiumItemListMenu_SetSubTabOpened::ItemDefinition' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.SpawnContainer
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListMenu_SpawnContainer final
{
public:
	TSubclassOf<class AActor>                     SupplyDropClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_SpawnContainer) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_SpawnContainer");
static_assert(sizeof(FortEmporiumItemListMenu_SpawnContainer) == 0x000008, "Wrong size on FortEmporiumItemListMenu_SpawnContainer");
static_assert(offsetof(FortEmporiumItemListMenu_SpawnContainer, SupplyDropClass) == 0x000000, "Member 'FortEmporiumItemListMenu_SpawnContainer::SupplyDropClass' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.SwitchItemDetailsPanel
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_SwitchItemDetailsPanel final
{
public:
	bool                                          bUseLegacy;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_SwitchItemDetailsPanel) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_SwitchItemDetailsPanel");
static_assert(sizeof(FortEmporiumItemListMenu_SwitchItemDetailsPanel) == 0x000001, "Wrong size on FortEmporiumItemListMenu_SwitchItemDetailsPanel");
static_assert(offsetof(FortEmporiumItemListMenu_SwitchItemDetailsPanel, bUseLegacy) == 0x000000, "Member 'FortEmporiumItemListMenu_SwitchItemDetailsPanel::bUseLegacy' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.UpdateBackButtonText
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_UpdateBackButtonText final
{
public:
	bool                                          bFilterFocus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_UpdateBackButtonText) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_UpdateBackButtonText");
static_assert(sizeof(FortEmporiumItemListMenu_UpdateBackButtonText) == 0x000001, "Wrong size on FortEmporiumItemListMenu_UpdateBackButtonText");
static_assert(offsetof(FortEmporiumItemListMenu_UpdateBackButtonText, bFilterFocus) == 0x000000, "Member 'FortEmporiumItemListMenu_UpdateBackButtonText::bFilterFocus' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.CanAddToChest
// 0x01A8 (0x01A8 - 0x0000)
struct FortEmporiumItemListMenu_CanAddToChest final
{
public:
	struct FFortItemEntry                         SelectedItem;                                      // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemListMenu_CanAddToChest) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_CanAddToChest");
static_assert(sizeof(FortEmporiumItemListMenu_CanAddToChest) == 0x0001A8, "Wrong size on FortEmporiumItemListMenu_CanAddToChest");
static_assert(offsetof(FortEmporiumItemListMenu_CanAddToChest, SelectedItem) == 0x000000, "Member 'FortEmporiumItemListMenu_CanAddToChest::SelectedItem' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_CanAddToChest, ReturnValue) == 0x0001A0, "Member 'FortEmporiumItemListMenu_CanAddToChest::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.CanDropItem
// 0x01A8 (0x01A8 - 0x0000)
struct FortEmporiumItemListMenu_CanDropItem final
{
public:
	struct FFortItemEntry                         SelectedItem;                                      // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemListMenu_CanDropItem) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_CanDropItem");
static_assert(sizeof(FortEmporiumItemListMenu_CanDropItem) == 0x0001A8, "Wrong size on FortEmporiumItemListMenu_CanDropItem");
static_assert(offsetof(FortEmporiumItemListMenu_CanDropItem, SelectedItem) == 0x000000, "Member 'FortEmporiumItemListMenu_CanDropItem::SelectedItem' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_CanDropItem, ReturnValue) == 0x0001A0, "Member 'FortEmporiumItemListMenu_CanDropItem::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.CanEquip
// 0x01A8 (0x01A8 - 0x0000)
struct FortEmporiumItemListMenu_CanEquip final
{
public:
	struct FFortItemEntry                         SelectedItem;                                      // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumItemListMenu_CanEquip) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_CanEquip");
static_assert(sizeof(FortEmporiumItemListMenu_CanEquip) == 0x0001A8, "Wrong size on FortEmporiumItemListMenu_CanEquip");
static_assert(offsetof(FortEmporiumItemListMenu_CanEquip, SelectedItem) == 0x000000, "Member 'FortEmporiumItemListMenu_CanEquip::SelectedItem' has a wrong offset!");
static_assert(offsetof(FortEmporiumItemListMenu_CanEquip, ReturnValue) == 0x0001A0, "Member 'FortEmporiumItemListMenu_CanEquip::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.GetCurrentSelection
// 0x01A0 (0x01A0 - 0x0000)
struct FortEmporiumItemListMenu_GetCurrentSelection final
{
public:
	struct FFortItemEntry                         ReturnValue;                                       // 0x0000(0x01A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_GetCurrentSelection) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_GetCurrentSelection");
static_assert(sizeof(FortEmporiumItemListMenu_GetCurrentSelection) == 0x0001A0, "Wrong size on FortEmporiumItemListMenu_GetCurrentSelection");
static_assert(offsetof(FortEmporiumItemListMenu_GetCurrentSelection, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListMenu_GetCurrentSelection::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.GetCurrentTab
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListMenu_GetCurrentTab final
{
public:
	class UFortCreativeContentBrowserTabPanelBase* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_GetCurrentTab) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_GetCurrentTab");
static_assert(sizeof(FortEmporiumItemListMenu_GetCurrentTab) == 0x000008, "Wrong size on FortEmporiumItemListMenu_GetCurrentTab");
static_assert(offsetof(FortEmporiumItemListMenu_GetCurrentTab, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListMenu_GetCurrentTab::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.GetLastSelectedTabName
// 0x0004 (0x0004 - 0x0000)
struct FortEmporiumItemListMenu_GetLastSelectedTabName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_GetLastSelectedTabName) == 0x000004, "Wrong alignment on FortEmporiumItemListMenu_GetLastSelectedTabName");
static_assert(sizeof(FortEmporiumItemListMenu_GetLastSelectedTabName) == 0x000004, "Wrong size on FortEmporiumItemListMenu_GetLastSelectedTabName");
static_assert(offsetof(FortEmporiumItemListMenu_GetLastSelectedTabName, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListMenu_GetLastSelectedTabName::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.GetSubTabSelectedItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListMenu_GetSubTabSelectedItemDefinition final
{
public:
	class UItemDefinitionBase*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_GetSubTabSelectedItemDefinition) == 0x000008, "Wrong alignment on FortEmporiumItemListMenu_GetSubTabSelectedItemDefinition");
static_assert(sizeof(FortEmporiumItemListMenu_GetSubTabSelectedItemDefinition) == 0x000008, "Wrong size on FortEmporiumItemListMenu_GetSubTabSelectedItemDefinition");
static_assert(offsetof(FortEmporiumItemListMenu_GetSubTabSelectedItemDefinition, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListMenu_GetSubTabSelectedItemDefinition::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListMenu.IsSubTabOpened
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListMenu_IsSubTabOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListMenu_IsSubTabOpened) == 0x000001, "Wrong alignment on FortEmporiumItemListMenu_IsSubTabOpened");
static_assert(sizeof(FortEmporiumItemListMenu_IsSubTabOpened) == 0x000001, "Wrong size on FortEmporiumItemListMenu_IsSubTabOpened");
static_assert(offsetof(FortEmporiumItemListMenu_IsSubTabOpened, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListMenu_IsSubTabOpened::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.AddItem
// 0x01A0 (0x01A0 - 0x0000)
struct FortEmporiumItemListTabPanel_AddItem final
{
public:
	struct FFortItemEntry                         ItemToAdd;                                         // 0x0000(0x01A0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_AddItem) == 0x000008, "Wrong alignment on FortEmporiumItemListTabPanel_AddItem");
static_assert(sizeof(FortEmporiumItemListTabPanel_AddItem) == 0x0001A0, "Wrong size on FortEmporiumItemListTabPanel_AddItem");
static_assert(offsetof(FortEmporiumItemListTabPanel_AddItem, ItemToAdd) == 0x000000, "Member 'FortEmporiumItemListTabPanel_AddItem::ItemToAdd' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.AddItemToSource
// 0x01A0 (0x01A0 - 0x0000)
struct FortEmporiumItemListTabPanel_AddItemToSource final
{
public:
	struct FFortItemEntry                         ItemToAdd;                                         // 0x0000(0x01A0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_AddItemToSource) == 0x000008, "Wrong alignment on FortEmporiumItemListTabPanel_AddItemToSource");
static_assert(sizeof(FortEmporiumItemListTabPanel_AddItemToSource) == 0x0001A0, "Wrong size on FortEmporiumItemListTabPanel_AddItemToSource");
static_assert(offsetof(FortEmporiumItemListTabPanel_AddItemToSource, ItemToAdd) == 0x000000, "Member 'FortEmporiumItemListTabPanel_AddItemToSource::ItemToAdd' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.HandleItemDetailTagSelected
// 0x0004 (0x0004 - 0x0000)
struct FortEmporiumItemListTabPanel_HandleItemDetailTagSelected final
{
public:
	class FName                                   TagID;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_HandleItemDetailTagSelected) == 0x000004, "Wrong alignment on FortEmporiumItemListTabPanel_HandleItemDetailTagSelected");
static_assert(sizeof(FortEmporiumItemListTabPanel_HandleItemDetailTagSelected) == 0x000004, "Wrong size on FortEmporiumItemListTabPanel_HandleItemDetailTagSelected");
static_assert(offsetof(FortEmporiumItemListTabPanel_HandleItemDetailTagSelected, TagID) == 0x000000, "Member 'FortEmporiumItemListTabPanel_HandleItemDetailTagSelected::TagID' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListTabPanel_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_IsEmpty) == 0x000001, "Wrong alignment on FortEmporiumItemListTabPanel_IsEmpty");
static_assert(sizeof(FortEmporiumItemListTabPanel_IsEmpty) == 0x000001, "Wrong size on FortEmporiumItemListTabPanel_IsEmpty");
static_assert(offsetof(FortEmporiumItemListTabPanel_IsEmpty, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListTabPanel_IsEmpty::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.ItemEquipped
// 0x01A0 (0x01A0 - 0x0000)
struct FortEmporiumItemListTabPanel_ItemEquipped final
{
public:
	struct FFortItemEntry                         Item;                                              // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_ItemEquipped) == 0x000008, "Wrong alignment on FortEmporiumItemListTabPanel_ItemEquipped");
static_assert(sizeof(FortEmporiumItemListTabPanel_ItemEquipped) == 0x0001A0, "Wrong size on FortEmporiumItemListTabPanel_ItemEquipped");
static_assert(offsetof(FortEmporiumItemListTabPanel_ItemEquipped, Item) == 0x000000, "Member 'FortEmporiumItemListTabPanel_ItemEquipped::Item' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.SetActiveItemDetailTags
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumItemListTabPanel_SetActiveItemDetailTags final
{
public:
	TArray<class FName>                           TagIDs;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_SetActiveItemDetailTags) == 0x000008, "Wrong alignment on FortEmporiumItemListTabPanel_SetActiveItemDetailTags");
static_assert(sizeof(FortEmporiumItemListTabPanel_SetActiveItemDetailTags) == 0x000010, "Wrong size on FortEmporiumItemListTabPanel_SetActiveItemDetailTags");
static_assert(offsetof(FortEmporiumItemListTabPanel_SetActiveItemDetailTags, TagIDs) == 0x000000, "Member 'FortEmporiumItemListTabPanel_SetActiveItemDetailTags::TagIDs' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.ShowTopButtonBar
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListTabPanel_ShowTopButtonBar final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_ShowTopButtonBar) == 0x000001, "Wrong alignment on FortEmporiumItemListTabPanel_ShowTopButtonBar");
static_assert(sizeof(FortEmporiumItemListTabPanel_ShowTopButtonBar) == 0x000001, "Wrong size on FortEmporiumItemListTabPanel_ShowTopButtonBar");
static_assert(offsetof(FortEmporiumItemListTabPanel_ShowTopButtonBar, bShow) == 0x000000, "Member 'FortEmporiumItemListTabPanel_ShowTopButtonBar::bShow' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.UpdateSortButton
// 0x0018 (0x0018 - 0x0000)
struct FortEmporiumItemListTabPanel_UpdateSortButton final
{
public:
	class FText                                   SortType;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_UpdateSortButton) == 0x000008, "Wrong alignment on FortEmporiumItemListTabPanel_UpdateSortButton");
static_assert(sizeof(FortEmporiumItemListTabPanel_UpdateSortButton) == 0x000018, "Wrong size on FortEmporiumItemListTabPanel_UpdateSortButton");
static_assert(offsetof(FortEmporiumItemListTabPanel_UpdateSortButton, SortType) == 0x000000, "Member 'FortEmporiumItemListTabPanel_UpdateSortButton::SortType' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.CanPlayerCreateInVolume
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListTabPanel_CanPlayerCreateInVolume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_CanPlayerCreateInVolume) == 0x000001, "Wrong alignment on FortEmporiumItemListTabPanel_CanPlayerCreateInVolume");
static_assert(sizeof(FortEmporiumItemListTabPanel_CanPlayerCreateInVolume) == 0x000001, "Wrong size on FortEmporiumItemListTabPanel_CanPlayerCreateInVolume");
static_assert(offsetof(FortEmporiumItemListTabPanel_CanPlayerCreateInVolume, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListTabPanel_CanPlayerCreateInVolume::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.GetCardSizeForCategory
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListTabPanel_GetCardSizeForCategory final
{
public:
	EFortItemCardSize                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_GetCardSizeForCategory) == 0x000001, "Wrong alignment on FortEmporiumItemListTabPanel_GetCardSizeForCategory");
static_assert(sizeof(FortEmporiumItemListTabPanel_GetCardSizeForCategory) == 0x000001, "Wrong size on FortEmporiumItemListTabPanel_GetCardSizeForCategory");
static_assert(offsetof(FortEmporiumItemListTabPanel_GetCardSizeForCategory, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListTabPanel_GetCardSizeForCategory::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.GetCollapseBorderPadFlagForCategory
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListTabPanel_GetCollapseBorderPadFlagForCategory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_GetCollapseBorderPadFlagForCategory) == 0x000001, "Wrong alignment on FortEmporiumItemListTabPanel_GetCollapseBorderPadFlagForCategory");
static_assert(sizeof(FortEmporiumItemListTabPanel_GetCollapseBorderPadFlagForCategory) == 0x000001, "Wrong size on FortEmporiumItemListTabPanel_GetCollapseBorderPadFlagForCategory");
static_assert(offsetof(FortEmporiumItemListTabPanel_GetCollapseBorderPadFlagForCategory, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListTabPanel_GetCollapseBorderPadFlagForCategory::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.GetSubTabSelectedItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortEmporiumItemListTabPanel_GetSubTabSelectedItemDefinition final
{
public:
	class UItemDefinitionBase*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_GetSubTabSelectedItemDefinition) == 0x000008, "Wrong alignment on FortEmporiumItemListTabPanel_GetSubTabSelectedItemDefinition");
static_assert(sizeof(FortEmporiumItemListTabPanel_GetSubTabSelectedItemDefinition) == 0x000008, "Wrong size on FortEmporiumItemListTabPanel_GetSubTabSelectedItemDefinition");
static_assert(offsetof(FortEmporiumItemListTabPanel_GetSubTabSelectedItemDefinition, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListTabPanel_GetSubTabSelectedItemDefinition::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.IsSubTabOpened
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListTabPanel_IsSubTabOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_IsSubTabOpened) == 0x000001, "Wrong alignment on FortEmporiumItemListTabPanel_IsSubTabOpened");
static_assert(sizeof(FortEmporiumItemListTabPanel_IsSubTabOpened) == 0x000001, "Wrong size on FortEmporiumItemListTabPanel_IsSubTabOpened");
static_assert(offsetof(FortEmporiumItemListTabPanel_IsSubTabOpened, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListTabPanel_IsSubTabOpened::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumItemListTabPanel.ShowLegacyItemDetailsPanel
// 0x0001 (0x0001 - 0x0000)
struct FortEmporiumItemListTabPanel_ShowLegacyItemDetailsPanel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumItemListTabPanel_ShowLegacyItemDetailsPanel) == 0x000001, "Wrong alignment on FortEmporiumItemListTabPanel_ShowLegacyItemDetailsPanel");
static_assert(sizeof(FortEmporiumItemListTabPanel_ShowLegacyItemDetailsPanel) == 0x000001, "Wrong size on FortEmporiumItemListTabPanel_ShowLegacyItemDetailsPanel");
static_assert(offsetof(FortEmporiumItemListTabPanel_ShowLegacyItemDetailsPanel, ReturnValue) == 0x000000, "Member 'FortEmporiumItemListTabPanel_ShowLegacyItemDetailsPanel::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumUtilities.GetCategoryDisplayName
// 0x0020 (0x0020 - 0x0000)
struct FortEmporiumUtilities_GetCategoryDisplayName final
{
public:
	class FName                                   CategoryID;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumUtilities_GetCategoryDisplayName) == 0x000008, "Wrong alignment on FortEmporiumUtilities_GetCategoryDisplayName");
static_assert(sizeof(FortEmporiumUtilities_GetCategoryDisplayName) == 0x000020, "Wrong size on FortEmporiumUtilities_GetCategoryDisplayName");
static_assert(offsetof(FortEmporiumUtilities_GetCategoryDisplayName, CategoryID) == 0x000000, "Member 'FortEmporiumUtilities_GetCategoryDisplayName::CategoryID' has a wrong offset!");
static_assert(offsetof(FortEmporiumUtilities_GetCategoryDisplayName, ReturnValue) == 0x000008, "Member 'FortEmporiumUtilities_GetCategoryDisplayName::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumUtilities.GetCreativeTagIDs
// 0x0018 (0x0018 - 0x0000)
struct FortEmporiumUtilities_GetCreativeTagIDs final
{
public:
	const class UItemDefinitionBase*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumUtilities_GetCreativeTagIDs) == 0x000008, "Wrong alignment on FortEmporiumUtilities_GetCreativeTagIDs");
static_assert(sizeof(FortEmporiumUtilities_GetCreativeTagIDs) == 0x000018, "Wrong size on FortEmporiumUtilities_GetCreativeTagIDs");
static_assert(offsetof(FortEmporiumUtilities_GetCreativeTagIDs, ItemDefinition) == 0x000000, "Member 'FortEmporiumUtilities_GetCreativeTagIDs::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortEmporiumUtilities_GetCreativeTagIDs, ReturnValue) == 0x000008, "Member 'FortEmporiumUtilities_GetCreativeTagIDs::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumUtilities.GetCreativeTagLabel
// 0x0020 (0x0020 - 0x0000)
struct FortEmporiumUtilities_GetCreativeTagLabel final
{
public:
	class FName                                   TagID;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsBeta;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumUtilities_GetCreativeTagLabel) == 0x000008, "Wrong alignment on FortEmporiumUtilities_GetCreativeTagLabel");
static_assert(sizeof(FortEmporiumUtilities_GetCreativeTagLabel) == 0x000020, "Wrong size on FortEmporiumUtilities_GetCreativeTagLabel");
static_assert(offsetof(FortEmporiumUtilities_GetCreativeTagLabel, TagID) == 0x000000, "Member 'FortEmporiumUtilities_GetCreativeTagLabel::TagID' has a wrong offset!");
static_assert(offsetof(FortEmporiumUtilities_GetCreativeTagLabel, bOutIsBeta) == 0x000004, "Member 'FortEmporiumUtilities_GetCreativeTagLabel::bOutIsBeta' has a wrong offset!");
static_assert(offsetof(FortEmporiumUtilities_GetCreativeTagLabel, ReturnValue) == 0x000008, "Member 'FortEmporiumUtilities_GetCreativeTagLabel::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumUtilities.GetTextFromEmporiumLicense
// 0x0020 (0x0020 - 0x0000)
struct FortEmporiumUtilities_GetTextFromEmporiumLicense final
{
public:
	EFortEmporiumItemLicense                      License;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumUtilities_GetTextFromEmporiumLicense) == 0x000008, "Wrong alignment on FortEmporiumUtilities_GetTextFromEmporiumLicense");
static_assert(sizeof(FortEmporiumUtilities_GetTextFromEmporiumLicense) == 0x000020, "Wrong size on FortEmporiumUtilities_GetTextFromEmporiumLicense");
static_assert(offsetof(FortEmporiumUtilities_GetTextFromEmporiumLicense, License) == 0x000000, "Member 'FortEmporiumUtilities_GetTextFromEmporiumLicense::License' has a wrong offset!");
static_assert(offsetof(FortEmporiumUtilities_GetTextFromEmporiumLicense, ReturnValue) == 0x000008, "Member 'FortEmporiumUtilities_GetTextFromEmporiumLicense::ReturnValue' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumUtilities.RequestJSON
// 0x0058 (0x0058 - 0x0000)
struct FortEmporiumUtilities_RequestJSON final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JSONURL;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, const class FString& JsonString)> Callback;                                          // 0x0048(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEmporiumUtilities_RequestJSON) == 0x000008, "Wrong alignment on FortEmporiumUtilities_RequestJSON");
static_assert(sizeof(FortEmporiumUtilities_RequestJSON) == 0x000058, "Wrong size on FortEmporiumUtilities_RequestJSON");
static_assert(offsetof(FortEmporiumUtilities_RequestJSON, WorldContextObject) == 0x000000, "Member 'FortEmporiumUtilities_RequestJSON::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortEmporiumUtilities_RequestJSON, UniqueNetId) == 0x000008, "Member 'FortEmporiumUtilities_RequestJSON::UniqueNetId' has a wrong offset!");
static_assert(offsetof(FortEmporiumUtilities_RequestJSON, JSONURL) == 0x000038, "Member 'FortEmporiumUtilities_RequestJSON::JSONURL' has a wrong offset!");
static_assert(offsetof(FortEmporiumUtilities_RequestJSON, Callback) == 0x000048, "Member 'FortEmporiumUtilities_RequestJSON::Callback' has a wrong offset!");

// Function CreativeEmporiumUI.FortEmporiumUtilities.RequestLicenseText
// 0x0010 (0x0010 - 0x0000)
struct FortEmporiumUtilities_RequestLicenseText final
{
public:
	EFortEmporiumItemLicense                      License;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bSuccess, const class FString& LicenseText)> Callback;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmporiumUtilities_RequestLicenseText) == 0x000004, "Wrong alignment on FortEmporiumUtilities_RequestLicenseText");
static_assert(sizeof(FortEmporiumUtilities_RequestLicenseText) == 0x000010, "Wrong size on FortEmporiumUtilities_RequestLicenseText");
static_assert(offsetof(FortEmporiumUtilities_RequestLicenseText, License) == 0x000000, "Member 'FortEmporiumUtilities_RequestLicenseText::License' has a wrong offset!");
static_assert(offsetof(FortEmporiumUtilities_RequestLicenseText, Callback) == 0x000004, "Member 'FortEmporiumUtilities_RequestLicenseText::Callback' has a wrong offset!");

}

