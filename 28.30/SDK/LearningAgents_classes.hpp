#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LearningAgents

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class LearningAgents.LearningAgentsAction
// 0x0228 (0x0250 - 0x0028)
class ULearningAgentsAction : public UObject
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x220];                                     // 0x0030(0x0220)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsAction">();
	}
	static class ULearningAgentsAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsAction>();
	}
};
static_assert(alignof(ULearningAgentsAction) == 0x000008, "Wrong alignment on ULearningAgentsAction");
static_assert(sizeof(ULearningAgentsAction) == 0x000250, "Wrong size on ULearningAgentsAction");
static_assert(offsetof(ULearningAgentsAction, Interactor) == 0x000028, "Member 'ULearningAgentsAction::Interactor' has a wrong offset!");

// Class LearningAgents.FloatAction
// 0x0010 (0x0260 - 0x0250)
class UFloatAction final : public ULearningAgentsAction
{
public:
	uint8                                         Pad_250[0x10];                                     // 0x0250(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFloatAction* AddFloatAction(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	float GetFloatAction(const int32 AgentId);
	void SetFloatAction(const int32 AgentId, const float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloatAction">();
	}
	static class UFloatAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatAction>();
	}
};
static_assert(alignof(UFloatAction) == 0x000008, "Wrong alignment on UFloatAction");
static_assert(sizeof(UFloatAction) == 0x000260, "Wrong size on UFloatAction");

// Class LearningAgents.FloatArrayAction
// 0x0010 (0x0260 - 0x0250)
class UFloatArrayAction final : public ULearningAgentsAction
{
public:
	uint8                                         Pad_250[0x10];                                     // 0x0250(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFloatArrayAction* AddFloatArrayAction(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 Num, const float Scale);

	void GetFloatArrayAction(const int32 AgentId, TArray<float>* OutValues);
	void SetFloatArrayAction(const int32 AgentId, const TArray<float>& Values);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloatArrayAction">();
	}
	static class UFloatArrayAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatArrayAction>();
	}
};
static_assert(alignof(UFloatArrayAction) == 0x000008, "Wrong alignment on UFloatArrayAction");
static_assert(sizeof(UFloatArrayAction) == 0x000260, "Wrong size on UFloatArrayAction");

// Class LearningAgents.VectorAction
// 0x0010 (0x0260 - 0x0250)
class UVectorAction final : public ULearningAgentsAction
{
public:
	uint8                                         Pad_250[0x10];                                     // 0x0250(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVectorAction* AddVectorAction(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	struct FVector GetVectorAction(const int32 AgentId);
	void SetVectorAction(const int32 AgentId, const struct FVector& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VectorAction">();
	}
	static class UVectorAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVectorAction>();
	}
};
static_assert(alignof(UVectorAction) == 0x000008, "Wrong alignment on UVectorAction");
static_assert(sizeof(UVectorAction) == 0x000260, "Wrong size on UVectorAction");

// Class LearningAgents.VectorArrayAction
// 0x0010 (0x0260 - 0x0250)
class UVectorArrayAction final : public ULearningAgentsAction
{
public:
	uint8                                         Pad_250[0x10];                                     // 0x0250(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVectorArrayAction* AddVectorArrayAction(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 Num, const float Scale);

	void GetVectorArrayAction(const int32 AgentId, TArray<struct FVector>* OutVectors);
	void SetVectorArrayAction(const int32 AgentId, const TArray<struct FVector>& Vectors);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VectorArrayAction">();
	}
	static class UVectorArrayAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVectorArrayAction>();
	}
};
static_assert(alignof(UVectorArrayAction) == 0x000008, "Wrong alignment on UVectorArrayAction");
static_assert(sizeof(UVectorArrayAction) == 0x000260, "Wrong size on UVectorArrayAction");

// Class LearningAgents.PlanarVelocityAction
// 0x0010 (0x0260 - 0x0250)
class UPlanarVelocityAction final : public ULearningAgentsAction
{
public:
	uint8                                         Pad_250[0x10];                                     // 0x0250(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPlanarVelocityAction* AddPlanarVelocityAction(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale, const struct FVector& Axis0, const struct FVector& Axis1);

	struct FVector GetPlanarVelocityAction(const int32 AgentId);
	void SetPlanarVelocityAction(const int32 AgentId, const struct FVector& Velocity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlanarVelocityAction">();
	}
	static class UPlanarVelocityAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlanarVelocityAction>();
	}
};
static_assert(alignof(UPlanarVelocityAction) == 0x000008, "Wrong alignment on UPlanarVelocityAction");
static_assert(sizeof(UPlanarVelocityAction) == 0x000260, "Wrong size on UPlanarVelocityAction");

// Class LearningAgents.RotationAction
// 0x0010 (0x0260 - 0x0250)
class URotationAction final : public ULearningAgentsAction
{
public:
	uint8                                         Pad_250[0x10];                                     // 0x0250(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URotationAction* AddRotationAction(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	struct FRotator GetRotationAction(const int32 AgentId);
	struct FQuat GetRotationActionAsQuat(const int32 AgentId);
	struct FVector GetRotationActionAsRotationVector(const int32 AgentId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RotationAction">();
	}
	static class URotationAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<URotationAction>();
	}
};
static_assert(alignof(URotationAction) == 0x000008, "Wrong alignment on URotationAction");
static_assert(sizeof(URotationAction) == 0x000260, "Wrong size on URotationAction");

// Class LearningAgents.RotationArrayAction
// 0x0010 (0x0260 - 0x0250)
class URotationArrayAction final : public ULearningAgentsAction
{
public:
	uint8                                         Pad_250[0x10];                                     // 0x0250(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URotationArrayAction* AddRotationArrayAction(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 RotationNum, const float Scale);

	void GetRotationArrayAction(const int32 AgentId, TArray<struct FRotator>* OutRotations);
	void GetRotationArrayActionAsQuats(const int32 AgentId, TArray<struct FQuat>* OutRotations);
	void GetRotationArrayActionAsRotationVectors(const int32 AgentId, TArray<struct FVector>* OutRotationVectors);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RotationArrayAction">();
	}
	static class URotationArrayAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<URotationArrayAction>();
	}
};
static_assert(alignof(URotationArrayAction) == 0x000008, "Wrong alignment on URotationArrayAction");
static_assert(sizeof(URotationArrayAction) == 0x000260, "Wrong size on URotationArrayAction");

// Class LearningAgents.LearningAgentsManagerComponent
// 0x0020 (0x00C0 - 0x00A0)
class ULearningAgentsManagerComponent : public UActorComponent
{
public:
	bool                                          bIsSetup;                                          // 0x00A0(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALearningAgentsManager*                 Manager;                                           // 0x00A8(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ULearningAgentsHelper*>          HelperObjects;                                     // 0x00B0(0x0010)(Edit, ZeroConstructor, Transient, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void AgentsAdded(const TArray<int32>& AgentIds);
	void AgentsRemoved(const TArray<int32>& AgentIds);
	void AgentsReset(const TArray<int32>& AgentIds);

	class UObject* GetAgent(const int32 AgentId, const TSubclassOf<class UObject> AgentClass) const;
	class ALearningAgentsManager* GetAgentManager(const TSubclassOf<class ALearningAgentsManager> AgentManagerClass) const;
	void GetAgents(const TArray<int32>& AgentIds, const TSubclassOf<class UObject> AgentClass, TArray<class UObject*>* OutAgents) const;
	void GetAllAgents(TArray<class UObject*>* OutAgents, TArray<int32>* OutAgentIds, const TSubclassOf<class UObject> AgentClass) const;
	bool IsSetup() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsManagerComponent">();
	}
	static class ULearningAgentsManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsManagerComponent>();
	}
};
static_assert(alignof(ULearningAgentsManagerComponent) == 0x000008, "Wrong alignment on ULearningAgentsManagerComponent");
static_assert(sizeof(ULearningAgentsManagerComponent) == 0x0000C0, "Wrong size on ULearningAgentsManagerComponent");
static_assert(offsetof(ULearningAgentsManagerComponent, bIsSetup) == 0x0000A0, "Member 'ULearningAgentsManagerComponent::bIsSetup' has a wrong offset!");
static_assert(offsetof(ULearningAgentsManagerComponent, Manager) == 0x0000A8, "Member 'ULearningAgentsManagerComponent::Manager' has a wrong offset!");
static_assert(offsetof(ULearningAgentsManagerComponent, HelperObjects) == 0x0000B0, "Member 'ULearningAgentsManagerComponent::HelperObjects' has a wrong offset!");

// Class LearningAgents.LearningAgentsController
// 0x0050 (0x0110 - 0x00C0)
class ULearningAgentsController final : public ULearningAgentsManagerComponent
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x00C0(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x48];                                      // 0x00C8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EncodeActions();
	void RunController();
	void SetActions(const TArray<int32>& AgentIds);
	void SetupController(class ULearningAgentsInteractor* InInteractor);

	class ULearningAgentsInteractor* GetInteractor(const TSubclassOf<class ULearningAgentsInteractor> InteractorClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsController">();
	}
	static class ULearningAgentsController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsController>();
	}
};
static_assert(alignof(ULearningAgentsController) == 0x000008, "Wrong alignment on ULearningAgentsController");
static_assert(sizeof(ULearningAgentsController) == 0x000110, "Wrong size on ULearningAgentsController");
static_assert(offsetof(ULearningAgentsController, Interactor) == 0x0000C0, "Member 'ULearningAgentsController::Interactor' has a wrong offset!");

// Class LearningAgents.LearningAgentsCritic
// 0x0160 (0x0220 - 0x00C0)
class ULearningAgentsCritic final : public ULearningAgentsManagerComponent
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x00C0(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsPolicy*                  Policy;                                            // 0x00C8(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsNeuralNetwork*           Network;                                           // 0x00D0(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0x148];                                     // 0x00D8(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EvaluateCritic();
	void LoadCriticFromAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void LoadCriticFromSnapshot(const struct FFilePath& File);
	void SaveCriticToAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void SetupCritic(class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, const struct FLearningAgentsCriticSettings& CriticSettings, class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void UseCriticFromAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);

	float GetEstimatedDiscountedReturn(const int32 AgentId) const;
	void SaveCriticToSnapshot(const struct FFilePath& File) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsCritic">();
	}
	static class ULearningAgentsCritic* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsCritic>();
	}
};
static_assert(alignof(ULearningAgentsCritic) == 0x000008, "Wrong alignment on ULearningAgentsCritic");
static_assert(sizeof(ULearningAgentsCritic) == 0x000220, "Wrong size on ULearningAgentsCritic");
static_assert(offsetof(ULearningAgentsCritic, Interactor) == 0x0000C0, "Member 'ULearningAgentsCritic::Interactor' has a wrong offset!");
static_assert(offsetof(ULearningAgentsCritic, Policy) == 0x0000C8, "Member 'ULearningAgentsCritic::Policy' has a wrong offset!");
static_assert(offsetof(ULearningAgentsCritic, Network) == 0x0000D0, "Member 'ULearningAgentsCritic::Network' has a wrong offset!");

// Class LearningAgents.LearningAgentsHelper
// 0x0008 (0x0030 - 0x0028)
class ULearningAgentsHelper : public UObject
{
public:
	class ULearningAgentsManagerComponent*        ManagerComponent;                                  // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsHelper">();
	}
	static class ULearningAgentsHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsHelper>();
	}
};
static_assert(alignof(ULearningAgentsHelper) == 0x000008, "Wrong alignment on ULearningAgentsHelper");
static_assert(sizeof(ULearningAgentsHelper) == 0x000030, "Wrong size on ULearningAgentsHelper");
static_assert(offsetof(ULearningAgentsHelper, ManagerComponent) == 0x000028, "Member 'ULearningAgentsHelper::ManagerComponent' has a wrong offset!");

// Class LearningAgents.SplineComponentHelper
// 0x0000 (0x0030 - 0x0030)
class USplineComponentHelper final : public ULearningAgentsHelper
{
public:
	static class USplineComponentHelper* AddSplineComponentHelper(class ULearningAgentsManagerComponent* InManagerComponent, const class FName Name_0);

	struct FVector GetDirectionAtDistanceAlongSpline(const int32 AgentId, const class USplineComponent* SplineComponent, const float DistanceAlongSpline, const ESplineCoordinateSpace CoordinateSpace) const;
	float GetDistanceAlongSplineAtPosition(const int32 AgentId, const class USplineComponent* SplineComponent, const struct FVector& Position, const ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetNearestPositionOnSpline(const int32 AgentId, const class USplineComponent* SplineComponent, const struct FVector& Position, const ESplineCoordinateSpace CoordinateSpace) const;
	struct FVector GetPositionAtDistanceAlongSpline(const int32 AgentId, const class USplineComponent* SplineComponent, const float DistanceAlongSpline, const ESplineCoordinateSpace CoordinateSpace) const;
	void GetPositionsAlongSpline(TArray<struct FVector>* OutPositions, const int32 AgentId, const class USplineComponent* SplineComponent, const int32 PositionNum, const float StartDistanceAlongSpline, const float StopDistanceAlongSpline, const ESplineCoordinateSpace CoordinateSpace) const;
	float GetProportionAlongSpline(const int32 AgentId, const class USplineComponent* SplineComponent, const float DistanceAlongSpline) const;
	float GetProportionAlongSplineAsAngle(const int32 AgentId, const class USplineComponent* SplineComponent, const float DistanceAlongSpline) const;
	float GetVelocityAlongSpline(const int32 AgentId, const class USplineComponent* SplineComponent, const struct FVector& Position, const struct FVector& Velocity, const float FiniteDifferenceDelta, const ESplineCoordinateSpace CoordinateSpace) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineComponentHelper">();
	}
	static class USplineComponentHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineComponentHelper>();
	}
};
static_assert(alignof(USplineComponentHelper) == 0x000008, "Wrong alignment on USplineComponentHelper");
static_assert(sizeof(USplineComponentHelper) == 0x000030, "Wrong size on USplineComponentHelper");

// Class LearningAgents.ProjectionHelper
// 0x0000 (0x0030 - 0x0030)
class UProjectionHelper final : public ULearningAgentsHelper
{
public:
	static class UProjectionHelper* AddProjectionHelper(class ULearningAgentsManagerComponent* InManagerComponent, const class FName Name_0);

	void ProjectPositionRotationOntoGroundPlane(struct FVector* OutPosition, struct FRotator* OutRotation, const int32 AgentId, const struct FVector& InPosition, const struct FRotator& InRotation, const struct FVector& LocalForwardVector) const;
	struct FTransform ProjectTransformOntoGroundPlane(const int32 AgentId, const struct FTransform& Transform, const struct FVector& LocalForwardVector) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProjectionHelper">();
	}
	static class UProjectionHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectionHelper>();
	}
};
static_assert(alignof(UProjectionHelper) == 0x000008, "Wrong alignment on UProjectionHelper");
static_assert(sizeof(UProjectionHelper) == 0x000030, "Wrong size on UProjectionHelper");

// Class LearningAgents.MeshComponentHelper
// 0x0000 (0x0030 - 0x0030)
class UMeshComponentHelper final : public ULearningAgentsHelper
{
public:
	static class UMeshComponentHelper* AddMeshComponentHelper(class ULearningAgentsManagerComponent* InManagerComponent, const class FName Name_0);

	void GetMeshBonePositions(TArray<struct FVector>* OutBonePositions, const int32 AgentId, const class UMeshComponent* MeshComponent, const TArray<class FName>& BoneNames) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshComponentHelper">();
	}
	static class UMeshComponentHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshComponentHelper>();
	}
};
static_assert(alignof(UMeshComponentHelper) == 0x000008, "Wrong alignment on UMeshComponentHelper");
static_assert(sizeof(UMeshComponentHelper) == 0x000030, "Wrong size on UMeshComponentHelper");

// Class LearningAgents.RayCastHelper
// 0x0000 (0x0030 - 0x0030)
class URayCastHelper final : public ULearningAgentsHelper
{
public:
	static class URayCastHelper* AddRayCastHelper(class ULearningAgentsManagerComponent* InManagerComponent, const class FName Name_0);

	void RayCastGridHeights(TArray<float>* OutHeights, const int32 AgentId, const struct FVector& Position, const struct FRotator& Rotation, const int32 RowNum, const int32 ColNum, const float RowWidth, const float ColWidth, const float MaxHeight, const float MinHeight, const ECollisionChannel CollisionChannel) const;
	void RayCastRadial(TArray<float>* OutDistances, const int32 AgentId, const struct FVector& Position, const struct FRotator& Rotation, const int32 RayNum, const float MinAngle, const float MaxAngle, const float MaxRayDist, const struct FVector& LocalForward, const ECollisionChannel CollisionChannel) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RayCastHelper">();
	}
	static class URayCastHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<URayCastHelper>();
	}
};
static_assert(alignof(URayCastHelper) == 0x000008, "Wrong alignment on URayCastHelper");
static_assert(sizeof(URayCastHelper) == 0x000030, "Wrong size on URayCastHelper");

// Class LearningAgents.CollisionMonitorHelper
// 0x01D0 (0x0200 - 0x0030)
class UCollisionMonitorHelper final : public ULearningAgentsHelper
{
public:
	uint8                                         Pad_30[0x1D0];                                     // 0x0030(0x01D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCollisionMonitorHelper* AddCollisionMonitorHelper(class ULearningAgentsManagerComponent* InManagerComponent, const class FName Name_0);

	bool GetAndResetCollisionOccurred(const int32 AgentId);
	void HandleOnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ResetCollisionOccurred(const int32 AgentId);
	void SetComponent(const int32 AgentId, class UPrimitiveComponent* Component, const class FName OtherComponentTag);

	bool GetCollisionOccurred(const int32 AgentId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollisionMonitorHelper">();
	}
	static class UCollisionMonitorHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollisionMonitorHelper>();
	}
};
static_assert(alignof(UCollisionMonitorHelper) == 0x000008, "Wrong alignment on UCollisionMonitorHelper");
static_assert(sizeof(UCollisionMonitorHelper) == 0x000200, "Wrong size on UCollisionMonitorHelper");

// Class LearningAgents.LearningAgentsInteractor
// 0x0538 (0x05F8 - 0x00C0)
class ULearningAgentsInteractor final : public ULearningAgentsManagerComponent
{
public:
	TArray<class ULearningAgentsObservation*>     ObservationObjects;                                // 0x00C0(0x0010)(Edit, ZeroConstructor, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class ULearningAgentsAction*>          ActionObjects;                                     // 0x00D0(0x0010)(Edit, ZeroConstructor, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x518];                                     // 0x00E0(0x0518)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DecodeActions();
	void EncodeObservations();
	void GetActions(const TArray<int32>& AgentIds);
	void SetObservations(const TArray<int32>& AgentIds);
	void SetupActions();
	void SetupInteractor();
	void SetupObservations();

	void GetActionVector(const int32 AgentId, TArray<float>* OutActionVector) const;
	void GetObservationVector(const int32 AgentId, TArray<float>* OutObservationVector) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsInteractor">();
	}
	static class ULearningAgentsInteractor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsInteractor>();
	}
};
static_assert(alignof(ULearningAgentsInteractor) == 0x000008, "Wrong alignment on ULearningAgentsInteractor");
static_assert(sizeof(ULearningAgentsInteractor) == 0x0005F8, "Wrong size on ULearningAgentsInteractor");
static_assert(offsetof(ULearningAgentsInteractor, ObservationObjects) == 0x0000C0, "Member 'ULearningAgentsInteractor::ObservationObjects' has a wrong offset!");
static_assert(offsetof(ULearningAgentsInteractor, ActionObjects) == 0x0000D0, "Member 'ULearningAgentsInteractor::ActionObjects' has a wrong offset!");

// Class LearningAgents.LearningAgentsManager
// 0x0088 (0x0318 - 0x0290)
class ALearningAgentsManager final : public AActor
{
public:
	int32                                         MaxAgentNum;                                       // 0x0290(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Agents;                                            // 0x0298(0x0010)(Edit, ZeroConstructor, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x70];                                     // 0x02A8(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddAgent(class UObject* Agent);
	void AddAgents(TArray<int32>* OutAgentIds, const TArray<class UObject*>& InAgents);
	void AddAgentsAsTickPrerequisiteOfManager(const TArray<class AActor*>& InAgents);
	void AddManagerAsTickPrerequisiteOfAgents(const TArray<class AActor*>& InAgents);
	void RemoveAgent(const int32 AgentId);
	void RemoveAgents(const TArray<int32>& AgentIds);
	void RemoveAllAgents();
	void ResetAgent(const int32 AgentId);
	void ResetAgents(const TArray<int32>& AgentIds);
	void ResetAllAgents();

	class UObject* GetAgent(const int32 AgentId, const TSubclassOf<class UObject> AgentClass) const;
	int32 GetAgentId(class UObject* Agent) const;
	void GetAgentIds(TArray<int32>* OutAgentIds, const TArray<class UObject*>& InAgents) const;
	int32 GetAgentNum() const;
	void GetAgents(TArray<class UObject*>* OutAgents, const TArray<int32>& AgentIds, const TSubclassOf<class UObject> AgentClass) const;
	void GetAllAgents(TArray<class UObject*>* OutAgents, TArray<int32>* OutAgentIds, const TSubclassOf<class UObject> AgentClass) const;
	int32 GetMaxAgentNum() const;
	bool HasAgent(const int32 AgentId) const;
	bool HasAgentObject(class UObject* Agent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsManager">();
	}
	static class ALearningAgentsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALearningAgentsManager>();
	}
};
static_assert(alignof(ALearningAgentsManager) == 0x000008, "Wrong alignment on ALearningAgentsManager");
static_assert(sizeof(ALearningAgentsManager) == 0x000318, "Wrong size on ALearningAgentsManager");
static_assert(offsetof(ALearningAgentsManager, MaxAgentNum) == 0x000290, "Member 'ALearningAgentsManager::MaxAgentNum' has a wrong offset!");
static_assert(offsetof(ALearningAgentsManager, Agents) == 0x000298, "Member 'ALearningAgentsManager::Agents' has a wrong offset!");

// Class LearningAgents.LearningAgentsNeuralNetwork
// 0x0008 (0x0038 - 0x0030)
class ULearningAgentsNeuralNetwork final : public UDataAsset
{
public:
	class ULearningAgentsNeuralNetworkData*       NeuralNetworkData;                                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void LoadNetworkFromAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void LoadNetworkFromSnapshot(const struct FFilePath& File);
	void ResetNetwork();
	void SaveNetworkToAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void SaveNetworkToSnapshot(const struct FFilePath& File);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsNeuralNetwork">();
	}
	static class ULearningAgentsNeuralNetwork* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsNeuralNetwork>();
	}
};
static_assert(alignof(ULearningAgentsNeuralNetwork) == 0x000008, "Wrong alignment on ULearningAgentsNeuralNetwork");
static_assert(sizeof(ULearningAgentsNeuralNetwork) == 0x000038, "Wrong size on ULearningAgentsNeuralNetwork");
static_assert(offsetof(ULearningAgentsNeuralNetwork, NeuralNetworkData) == 0x000030, "Member 'ULearningAgentsNeuralNetwork::NeuralNetworkData' has a wrong offset!");

// Class LearningAgents.LearningAgentsNeuralNetworkData
// 0x0030 (0x0058 - 0x0028)
class ULearningAgentsNeuralNetworkData final : public UObject
{
public:
	int32                                         InputNum;                                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         OutputNum;                                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 FileData;                                          // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UNNEModelData*                          ModelData;                                         // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsNeuralNetworkData">();
	}
	static class ULearningAgentsNeuralNetworkData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsNeuralNetworkData>();
	}
};
static_assert(alignof(ULearningAgentsNeuralNetworkData) == 0x000008, "Wrong alignment on ULearningAgentsNeuralNetworkData");
static_assert(sizeof(ULearningAgentsNeuralNetworkData) == 0x000058, "Wrong size on ULearningAgentsNeuralNetworkData");
static_assert(offsetof(ULearningAgentsNeuralNetworkData, InputNum) == 0x000028, "Member 'ULearningAgentsNeuralNetworkData::InputNum' has a wrong offset!");
static_assert(offsetof(ULearningAgentsNeuralNetworkData, OutputNum) == 0x00002C, "Member 'ULearningAgentsNeuralNetworkData::OutputNum' has a wrong offset!");
static_assert(offsetof(ULearningAgentsNeuralNetworkData, FileData) == 0x000030, "Member 'ULearningAgentsNeuralNetworkData::FileData' has a wrong offset!");
static_assert(offsetof(ULearningAgentsNeuralNetworkData, ModelData) == 0x000040, "Member 'ULearningAgentsNeuralNetworkData::ModelData' has a wrong offset!");

// Class LearningAgents.LearningAgentsObservation
// 0x0118 (0x0140 - 0x0028)
class ULearningAgentsObservation : public UObject
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x110];                                     // 0x0030(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsObservation">();
	}
	static class ULearningAgentsObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsObservation>();
	}
};
static_assert(alignof(ULearningAgentsObservation) == 0x000008, "Wrong alignment on ULearningAgentsObservation");
static_assert(sizeof(ULearningAgentsObservation) == 0x000140, "Wrong size on ULearningAgentsObservation");
static_assert(offsetof(ULearningAgentsObservation, Interactor) == 0x000028, "Member 'ULearningAgentsObservation::Interactor' has a wrong offset!");

// Class LearningAgents.FloatObservation
// 0x0010 (0x0150 - 0x0140)
class UFloatObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFloatObservation* AddFloatObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetFloatObservation(const int32 AgentId, const float Observation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloatObservation">();
	}
	static class UFloatObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatObservation>();
	}
};
static_assert(alignof(UFloatObservation) == 0x000008, "Wrong alignment on UFloatObservation");
static_assert(sizeof(UFloatObservation) == 0x000150, "Wrong size on UFloatObservation");

// Class LearningAgents.FloatArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UFloatArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFloatArrayObservation* AddFloatArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 Num, const float Scale);

	void SetFloatArrayObservation(const int32 AgentId, const TArray<float>& Observation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloatArrayObservation">();
	}
	static class UFloatArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatArrayObservation>();
	}
};
static_assert(alignof(UFloatArrayObservation) == 0x000008, "Wrong alignment on UFloatArrayObservation");
static_assert(sizeof(UFloatArrayObservation) == 0x000150, "Wrong size on UFloatArrayObservation");

// Class LearningAgents.VectorObservation
// 0x0010 (0x0150 - 0x0140)
class UVectorObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVectorObservation* AddVectorObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetVectorObservation(const int32 AgentId, const struct FVector& Observation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VectorObservation">();
	}
	static class UVectorObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVectorObservation>();
	}
};
static_assert(alignof(UVectorObservation) == 0x000008, "Wrong alignment on UVectorObservation");
static_assert(sizeof(UVectorObservation) == 0x000150, "Wrong size on UVectorObservation");

// Class LearningAgents.VectorArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UVectorArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVectorArrayObservation* AddVectorArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 Num, const float Scale);

	void SetVectorArrayObservation(const int32 AgentId, const TArray<struct FVector>& Observation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VectorArrayObservation">();
	}
	static class UVectorArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVectorArrayObservation>();
	}
};
static_assert(alignof(UVectorArrayObservation) == 0x000008, "Wrong alignment on UVectorArrayObservation");
static_assert(sizeof(UVectorArrayObservation) == 0x000150, "Wrong size on UVectorArrayObservation");

// Class LearningAgents.EnumObservation
// 0x0018 (0x0158 - 0x0140)
class UEnumObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x18];                                     // 0x0140(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEnumObservation* AddEnumObservation(class ULearningAgentsInteractor* InInteractor, const class UEnum* EnumType, const class FName Name_0);

	void SetEnumObservation(const int32 AgentId, const uint8 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnumObservation">();
	}
	static class UEnumObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnumObservation>();
	}
};
static_assert(alignof(UEnumObservation) == 0x000008, "Wrong alignment on UEnumObservation");
static_assert(sizeof(UEnumObservation) == 0x000158, "Wrong size on UEnumObservation");

// Class LearningAgents.EnumArrayObservation
// 0x0018 (0x0158 - 0x0140)
class UEnumArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x18];                                     // 0x0140(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UEnumArrayObservation* AddEnumArrayObservation(class ULearningAgentsInteractor* InInteractor, const class UEnum* EnumType, const class FName Name_0, const int32 EnumNum);

	void SetEnumArrayObservation(const int32 AgentId, const TArray<uint8>& Values);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnumArrayObservation">();
	}
	static class UEnumArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnumArrayObservation>();
	}
};
static_assert(alignof(UEnumArrayObservation) == 0x000008, "Wrong alignment on UEnumArrayObservation");
static_assert(sizeof(UEnumArrayObservation) == 0x000158, "Wrong size on UEnumArrayObservation");

// Class LearningAgents.TimeObservation
// 0x0010 (0x0150 - 0x0140)
class UTimeObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UTimeObservation* AddTimeObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetTimeObservation(const int32 AgentId, const float Time, const float RelativeTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeObservation">();
	}
	static class UTimeObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeObservation>();
	}
};
static_assert(alignof(UTimeObservation) == 0x000008, "Wrong alignment on UTimeObservation");
static_assert(sizeof(UTimeObservation) == 0x000150, "Wrong size on UTimeObservation");

// Class LearningAgents.TimeArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UTimeArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UTimeArrayObservation* AddTimeArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 TimeNum, const float Scale);

	void SetTimeArrayObservation(const int32 AgentId, const TArray<float>& Times, const float RelativeTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeArrayObservation">();
	}
	static class UTimeArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeArrayObservation>();
	}
};
static_assert(alignof(UTimeArrayObservation) == 0x000008, "Wrong alignment on UTimeArrayObservation");
static_assert(sizeof(UTimeArrayObservation) == 0x000150, "Wrong size on UTimeArrayObservation");

// Class LearningAgents.AngleObservation
// 0x0010 (0x0150 - 0x0140)
class UAngleObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAngleObservation* AddAngleObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetAngleObservation(const int32 AgentId, const float Angle, const float RelativeAngle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AngleObservation">();
	}
	static class UAngleObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAngleObservation>();
	}
};
static_assert(alignof(UAngleObservation) == 0x000008, "Wrong alignment on UAngleObservation");
static_assert(sizeof(UAngleObservation) == 0x000150, "Wrong size on UAngleObservation");

// Class LearningAgents.AngleArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UAngleArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAngleArrayObservation* AddAngleArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 AngleNum, const float Scale);

	void SetAngleArrayObservation(const int32 AgentId, const TArray<float>& Angles, const float RelativeAngle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AngleArrayObservation">();
	}
	static class UAngleArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAngleArrayObservation>();
	}
};
static_assert(alignof(UAngleArrayObservation) == 0x000008, "Wrong alignment on UAngleArrayObservation");
static_assert(sizeof(UAngleArrayObservation) == 0x000150, "Wrong size on UAngleArrayObservation");

// Class LearningAgents.RotationObservation
// 0x0010 (0x0150 - 0x0140)
class URotationObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URotationObservation* AddRotationObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetRotationObservation(const int32 AgentId, const struct FRotator& Rotation, const struct FRotator& RelativeRotation);
	void SetRotationObservationFromQuat(const int32 AgentId, const struct FQuat& Rotation, const struct FQuat& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RotationObservation">();
	}
	static class URotationObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<URotationObservation>();
	}
};
static_assert(alignof(URotationObservation) == 0x000008, "Wrong alignment on URotationObservation");
static_assert(sizeof(URotationObservation) == 0x000150, "Wrong size on URotationObservation");

// Class LearningAgents.RotationArrayObservation
// 0x0010 (0x0150 - 0x0140)
class URotationArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URotationArrayObservation* AddRotationArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 RotationNum, const float Scale);

	void SetRotationArrayObservation(const int32 AgentId, const TArray<struct FRotator>& Rotations, const struct FRotator& RelativeRotation);
	void SetRotationArrayObservationFromQuats(const int32 AgentId, const TArray<struct FQuat>& Rotations, const struct FQuat& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RotationArrayObservation">();
	}
	static class URotationArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<URotationArrayObservation>();
	}
};
static_assert(alignof(URotationArrayObservation) == 0x000008, "Wrong alignment on URotationArrayObservation");
static_assert(sizeof(URotationArrayObservation) == 0x000150, "Wrong size on URotationArrayObservation");

// Class LearningAgents.DirectionObservation
// 0x0010 (0x0150 - 0x0140)
class UDirectionObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UDirectionObservation* AddDirectionObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetDirectionObservation(const int32 AgentId, const struct FVector& Direction, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DirectionObservation">();
	}
	static class UDirectionObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDirectionObservation>();
	}
};
static_assert(alignof(UDirectionObservation) == 0x000008, "Wrong alignment on UDirectionObservation");
static_assert(sizeof(UDirectionObservation) == 0x000150, "Wrong size on UDirectionObservation");

// Class LearningAgents.DirectionArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UDirectionArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UDirectionArrayObservation* AddDirectionArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 DirectionNum, const float Scale);

	void SetDirectionArrayObservation(const int32 AgentId, const TArray<struct FVector>& Directions, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DirectionArrayObservation">();
	}
	static class UDirectionArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDirectionArrayObservation>();
	}
};
static_assert(alignof(UDirectionArrayObservation) == 0x000008, "Wrong alignment on UDirectionArrayObservation");
static_assert(sizeof(UDirectionArrayObservation) == 0x000150, "Wrong size on UDirectionArrayObservation");

// Class LearningAgents.PlanarDirectionObservation
// 0x0010 (0x0150 - 0x0140)
class UPlanarDirectionObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPlanarDirectionObservation* AddPlanarDirectionObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale, const struct FVector& Axis0, const struct FVector& Axis1);

	void SetPlanarDirectionObservation(const int32 AgentId, const struct FVector& Direction, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlanarDirectionObservation">();
	}
	static class UPlanarDirectionObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlanarDirectionObservation>();
	}
};
static_assert(alignof(UPlanarDirectionObservation) == 0x000008, "Wrong alignment on UPlanarDirectionObservation");
static_assert(sizeof(UPlanarDirectionObservation) == 0x000150, "Wrong size on UPlanarDirectionObservation");

// Class LearningAgents.PlanarDirectionArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UPlanarDirectionArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPlanarDirectionArrayObservation* AddPlanarDirectionArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 DirectionNum, const float Scale, const struct FVector& Axis0, const struct FVector& Axis1);

	void SetPlanarDirectionArrayObservation(const int32 AgentId, const TArray<struct FVector>& Directions, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlanarDirectionArrayObservation">();
	}
	static class UPlanarDirectionArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlanarDirectionArrayObservation>();
	}
};
static_assert(alignof(UPlanarDirectionArrayObservation) == 0x000008, "Wrong alignment on UPlanarDirectionArrayObservation");
static_assert(sizeof(UPlanarDirectionArrayObservation) == 0x000150, "Wrong size on UPlanarDirectionArrayObservation");

// Class LearningAgents.PositionObservation
// 0x0010 (0x0150 - 0x0140)
class UPositionObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPositionObservation* AddPositionObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetPositionObservation(const int32 AgentId, const struct FVector& Position, const struct FVector& RelativePosition, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PositionObservation">();
	}
	static class UPositionObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPositionObservation>();
	}
};
static_assert(alignof(UPositionObservation) == 0x000008, "Wrong alignment on UPositionObservation");
static_assert(sizeof(UPositionObservation) == 0x000150, "Wrong size on UPositionObservation");

// Class LearningAgents.PositionArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UPositionArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPositionArrayObservation* AddPositionArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 PositionNum, const float Scale);

	void SetPositionArrayObservation(int32 AgentId, const TArray<struct FVector>& Positions, const struct FVector& RelativePosition, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PositionArrayObservation">();
	}
	static class UPositionArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPositionArrayObservation>();
	}
};
static_assert(alignof(UPositionArrayObservation) == 0x000008, "Wrong alignment on UPositionArrayObservation");
static_assert(sizeof(UPositionArrayObservation) == 0x000150, "Wrong size on UPositionArrayObservation");

// Class LearningAgents.ScalarPositionObservation
// 0x0010 (0x0150 - 0x0140)
class UScalarPositionObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UScalarPositionObservation* AddScalarPositionObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetScalarPositionObservation(const int32 AgentId, const float Position, const float RelativePosition);
	void SetScalarPositionObservationWithAxis(const int32 AgentId, const struct FVector& Position, const struct FVector& RelativePosition, const struct FVector& Axis);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScalarPositionObservation">();
	}
	static class UScalarPositionObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScalarPositionObservation>();
	}
};
static_assert(alignof(UScalarPositionObservation) == 0x000008, "Wrong alignment on UScalarPositionObservation");
static_assert(sizeof(UScalarPositionObservation) == 0x000150, "Wrong size on UScalarPositionObservation");

// Class LearningAgents.ScalarPositionArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UScalarPositionArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UScalarPositionArrayObservation* AddScalarPositionArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 PositionNum, const float Scale);

	void SetScalarPositionArrayObservation(const int32 AgentId, const TArray<float>& Positions, const float RelativePosition);
	void SetScalarPositionArrayObservationWithAxis(const int32 AgentId, const TArray<struct FVector>& Positions, const struct FVector& RelativePosition, const struct FVector& Axis);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScalarPositionArrayObservation">();
	}
	static class UScalarPositionArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScalarPositionArrayObservation>();
	}
};
static_assert(alignof(UScalarPositionArrayObservation) == 0x000008, "Wrong alignment on UScalarPositionArrayObservation");
static_assert(sizeof(UScalarPositionArrayObservation) == 0x000150, "Wrong size on UScalarPositionArrayObservation");

// Class LearningAgents.PlanarPositionObservation
// 0x0010 (0x0150 - 0x0140)
class UPlanarPositionObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPlanarPositionObservation* AddPlanarPositionObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale, const struct FVector& Axis0, const struct FVector& Axis1);

	void SetPlanarPositionObservation(const int32 AgentId, const struct FVector& Position, const struct FVector& RelativePosition, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlanarPositionObservation">();
	}
	static class UPlanarPositionObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlanarPositionObservation>();
	}
};
static_assert(alignof(UPlanarPositionObservation) == 0x000008, "Wrong alignment on UPlanarPositionObservation");
static_assert(sizeof(UPlanarPositionObservation) == 0x000150, "Wrong size on UPlanarPositionObservation");

// Class LearningAgents.PlanarPositionArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UPlanarPositionArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPlanarPositionArrayObservation* AddPlanarPositionArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 PositionNum, const float Scale, const struct FVector& Axis0, const struct FVector& Axis1);

	void SetPlanarPositionArrayObservation(const int32 AgentId, const TArray<struct FVector>& Positions, const struct FVector& RelativePosition, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlanarPositionArrayObservation">();
	}
	static class UPlanarPositionArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlanarPositionArrayObservation>();
	}
};
static_assert(alignof(UPlanarPositionArrayObservation) == 0x000008, "Wrong alignment on UPlanarPositionArrayObservation");
static_assert(sizeof(UPlanarPositionArrayObservation) == 0x000150, "Wrong size on UPlanarPositionArrayObservation");

// Class LearningAgents.VelocityObservation
// 0x0010 (0x0150 - 0x0140)
class UVelocityObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVelocityObservation* AddVelocityObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetVelocityObservation(const int32 AgentId, const struct FVector& Velocity, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VelocityObservation">();
	}
	static class UVelocityObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVelocityObservation>();
	}
};
static_assert(alignof(UVelocityObservation) == 0x000008, "Wrong alignment on UVelocityObservation");
static_assert(sizeof(UVelocityObservation) == 0x000150, "Wrong size on UVelocityObservation");

// Class LearningAgents.VelocityArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UVelocityArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVelocityArrayObservation* AddVelocityArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 VelocityNum, const float Scale);

	void SetVelocityArrayObservation(const int32 AgentId, const TArray<struct FVector>& Velocities, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VelocityArrayObservation">();
	}
	static class UVelocityArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVelocityArrayObservation>();
	}
};
static_assert(alignof(UVelocityArrayObservation) == 0x000008, "Wrong alignment on UVelocityArrayObservation");
static_assert(sizeof(UVelocityArrayObservation) == 0x000150, "Wrong size on UVelocityArrayObservation");

// Class LearningAgents.ScalarVelocityObservation
// 0x0010 (0x0150 - 0x0140)
class UScalarVelocityObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UScalarVelocityObservation* AddScalarVelocityObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetScalarVelocityObservation(const int32 AgentId, const float Velocity);
	void SetScalarVelocityObservationWithAxis(const int32 AgentId, const struct FVector& Velocity, const struct FVector& Axis);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScalarVelocityObservation">();
	}
	static class UScalarVelocityObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScalarVelocityObservation>();
	}
};
static_assert(alignof(UScalarVelocityObservation) == 0x000008, "Wrong alignment on UScalarVelocityObservation");
static_assert(sizeof(UScalarVelocityObservation) == 0x000150, "Wrong size on UScalarVelocityObservation");

// Class LearningAgents.ScalarVelocityArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UScalarVelocityArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UScalarVelocityArrayObservation* AddScalarVelocityArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 VelocityNum, const float Scale);

	void SetScalarVelocityArrayObservation(const int32 AgentId, const TArray<float>& Velocities);
	void SetScalarVelocityArrayObservationWithAxis(const int32 AgentId, const TArray<struct FVector>& Velocities, const struct FVector& Axis);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScalarVelocityArrayObservation">();
	}
	static class UScalarVelocityArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScalarVelocityArrayObservation>();
	}
};
static_assert(alignof(UScalarVelocityArrayObservation) == 0x000008, "Wrong alignment on UScalarVelocityArrayObservation");
static_assert(sizeof(UScalarVelocityArrayObservation) == 0x000150, "Wrong size on UScalarVelocityArrayObservation");

// Class LearningAgents.PlanarVelocityObservation
// 0x0010 (0x0150 - 0x0140)
class UPlanarVelocityObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPlanarVelocityObservation* AddPlanarVelocityObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale, const struct FVector& Axis0, const struct FVector& Axis1);

	void SetPlanarVelocityObservation(const int32 AgentId, const struct FVector& Velocity, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlanarVelocityObservation">();
	}
	static class UPlanarVelocityObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlanarVelocityObservation>();
	}
};
static_assert(alignof(UPlanarVelocityObservation) == 0x000008, "Wrong alignment on UPlanarVelocityObservation");
static_assert(sizeof(UPlanarVelocityObservation) == 0x000150, "Wrong size on UPlanarVelocityObservation");

// Class LearningAgents.PlanarVelocityArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UPlanarVelocityArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPlanarVelocityArrayObservation* AddPlanarVelocityArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 VelocityNum, const float Scale, const struct FVector& Axis0, const struct FVector& Axis1);

	void SetPlanarVelocityArrayObservation(const int32 AgentId, const TArray<struct FVector>& Velocities, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlanarVelocityArrayObservation">();
	}
	static class UPlanarVelocityArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlanarVelocityArrayObservation>();
	}
};
static_assert(alignof(UPlanarVelocityArrayObservation) == 0x000008, "Wrong alignment on UPlanarVelocityArrayObservation");
static_assert(sizeof(UPlanarVelocityArrayObservation) == 0x000150, "Wrong size on UPlanarVelocityArrayObservation");

// Class LearningAgents.AngularVelocityObservation
// 0x0010 (0x0150 - 0x0140)
class UAngularVelocityObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAngularVelocityObservation* AddAngularVelocityObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetAngularVelocityObservation(const int32 AgentId, const struct FVector& AngularVelocity, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AngularVelocityObservation">();
	}
	static class UAngularVelocityObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAngularVelocityObservation>();
	}
};
static_assert(alignof(UAngularVelocityObservation) == 0x000008, "Wrong alignment on UAngularVelocityObservation");
static_assert(sizeof(UAngularVelocityObservation) == 0x000150, "Wrong size on UAngularVelocityObservation");

// Class LearningAgents.AngularVelocityArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UAngularVelocityArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAngularVelocityArrayObservation* AddAngularVelocityArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 AngularVelocityNum, const float Scale);

	void SetAngularVelocityArrayObservation(const int32 AgentId, const TArray<struct FVector>& AngularVelocities, const struct FRotator& RelativeRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AngularVelocityArrayObservation">();
	}
	static class UAngularVelocityArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAngularVelocityArrayObservation>();
	}
};
static_assert(alignof(UAngularVelocityArrayObservation) == 0x000008, "Wrong alignment on UAngularVelocityArrayObservation");
static_assert(sizeof(UAngularVelocityArrayObservation) == 0x000150, "Wrong size on UAngularVelocityArrayObservation");

// Class LearningAgents.ScalarAngularVelocityObservation
// 0x0010 (0x0150 - 0x0140)
class UScalarAngularVelocityObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UScalarAngularVelocityObservation* AddScalarAngularVelocityObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const float Scale);

	void SetScalarAngularVelocityObservation(const int32 AgentId, const float AngularVelocity);
	void SetScalarAngularVelocityObservationWithAxis(const int32 AgentId, const struct FVector& AngularVelocity, const struct FVector& Axis);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScalarAngularVelocityObservation">();
	}
	static class UScalarAngularVelocityObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScalarAngularVelocityObservation>();
	}
};
static_assert(alignof(UScalarAngularVelocityObservation) == 0x000008, "Wrong alignment on UScalarAngularVelocityObservation");
static_assert(sizeof(UScalarAngularVelocityObservation) == 0x000150, "Wrong size on UScalarAngularVelocityObservation");

// Class LearningAgents.ScalarAngularVelocityArrayObservation
// 0x0010 (0x0150 - 0x0140)
class UScalarAngularVelocityArrayObservation final : public ULearningAgentsObservation
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UScalarAngularVelocityArrayObservation* AddScalarAngularVelocityArrayObservation(class ULearningAgentsInteractor* InInteractor, const class FName Name_0, const int32 AngularVelocityNum, const float Scale);

	void SetScalarAngularVelocityArrayObservation(const int32 AgentId, const TArray<float>& AngularVelocities);
	void SetScalarAngularVelocityArrayObservationWithAxis(const int32 AgentId, const TArray<struct FVector>& AngularVelocities, const struct FVector& Axis);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScalarAngularVelocityArrayObservation">();
	}
	static class UScalarAngularVelocityArrayObservation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScalarAngularVelocityArrayObservation>();
	}
};
static_assert(alignof(UScalarAngularVelocityArrayObservation) == 0x000008, "Wrong alignment on UScalarAngularVelocityArrayObservation");
static_assert(sizeof(UScalarAngularVelocityArrayObservation) == 0x000150, "Wrong size on UScalarAngularVelocityArrayObservation");

// Class LearningAgents.LearningAgentsPolicy
// 0x0160 (0x0220 - 0x00C0)
class ULearningAgentsPolicy final : public ULearningAgentsManagerComponent
{
public:
	class ULearningAgentsInteractor*              Interactor;                                        // 0x00C0(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULearningAgentsNeuralNetwork*           Network;                                           // 0x00C8(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x150];                                     // 0x00D0(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EvaluatePolicy();
	void LoadPolicyFromAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void LoadPolicyFromSnapshot(const struct FFilePath& File);
	void RunInference();
	void SavePolicyToAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void SetActionNoiseScale(const float ActionNoiseScale);
	void SetMemoryState(const int32 AgentId, const TArray<float>& InMemoryState);
	void SetupPolicy(class ULearningAgentsInteractor* InInteractor, const struct FLearningAgentsPolicySettings& PolicySettings, class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);
	void UsePolicyFromAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset);

	float GetActionNoiseScale() const;
	void GetMemoryState(TArray<float>* OutMemoryState, const int32 AgentId) const;
	void SavePolicyToSnapshot(const struct FFilePath& File) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LearningAgentsPolicy">();
	}
	static class ULearningAgentsPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULearningAgentsPolicy>();
	}
};
static_assert(alignof(ULearningAgentsPolicy) == 0x000008, "Wrong alignment on ULearningAgentsPolicy");
static_assert(sizeof(ULearningAgentsPolicy) == 0x000220, "Wrong size on ULearningAgentsPolicy");
static_assert(offsetof(ULearningAgentsPolicy, Interactor) == 0x0000C0, "Member 'ULearningAgentsPolicy::Interactor' has a wrong offset!");
static_assert(offsetof(ULearningAgentsPolicy, Network) == 0x0000C8, "Member 'ULearningAgentsPolicy::Network' has a wrong offset!");

}

