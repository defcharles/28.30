#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HitTicksUI

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function HitTicksUI.FortUserWidget_HitTicks.OnDisplayHitNotify
// 0x0050 (0x0050 - 0x0000)
struct FortUserWidget_HitTicks_OnDisplayHitNotify final
{
public:
	double                                        InDamage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCritical;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInFatal;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShield;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InPawn;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0030(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUserWidget_HitTicks_OnDisplayHitNotify) == 0x000008, "Wrong alignment on FortUserWidget_HitTicks_OnDisplayHitNotify");
static_assert(sizeof(FortUserWidget_HitTicks_OnDisplayHitNotify) == 0x000050, "Wrong size on FortUserWidget_HitTicks_OnDisplayHitNotify");
static_assert(offsetof(FortUserWidget_HitTicks_OnDisplayHitNotify, InDamage) == 0x000000, "Member 'FortUserWidget_HitTicks_OnDisplayHitNotify::InDamage' has a wrong offset!");
static_assert(offsetof(FortUserWidget_HitTicks_OnDisplayHitNotify, bInCritical) == 0x000008, "Member 'FortUserWidget_HitTicks_OnDisplayHitNotify::bInCritical' has a wrong offset!");
static_assert(offsetof(FortUserWidget_HitTicks_OnDisplayHitNotify, bInFatal) == 0x000009, "Member 'FortUserWidget_HitTicks_OnDisplayHitNotify::bInFatal' has a wrong offset!");
static_assert(offsetof(FortUserWidget_HitTicks_OnDisplayHitNotify, bInShield) == 0x00000A, "Member 'FortUserWidget_HitTicks_OnDisplayHitNotify::bInShield' has a wrong offset!");
static_assert(offsetof(FortUserWidget_HitTicks_OnDisplayHitNotify, InPawn) == 0x000010, "Member 'FortUserWidget_HitTicks_OnDisplayHitNotify::InPawn' has a wrong offset!");
static_assert(offsetof(FortUserWidget_HitTicks_OnDisplayHitNotify, HitLocation) == 0x000018, "Member 'FortUserWidget_HitTicks_OnDisplayHitNotify::HitLocation' has a wrong offset!");
static_assert(offsetof(FortUserWidget_HitTicks_OnDisplayHitNotify, Tags) == 0x000030, "Member 'FortUserWidget_HitTicks_OnDisplayHitNotify::Tags' has a wrong offset!");

// Function HitTicksUI.FortUserWidget_HitTicks.OnShieldBreak
// 0x0001 (0x0001 - 0x0000)
struct FortUserWidget_HitTicks_OnShieldBreak final
{
public:
	bool                                          bInOverShield;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUserWidget_HitTicks_OnShieldBreak) == 0x000001, "Wrong alignment on FortUserWidget_HitTicks_OnShieldBreak");
static_assert(sizeof(FortUserWidget_HitTicks_OnShieldBreak) == 0x000001, "Wrong size on FortUserWidget_HitTicks_OnShieldBreak");
static_assert(offsetof(FortUserWidget_HitTicks_OnShieldBreak, bInOverShield) == 0x000000, "Member 'FortUserWidget_HitTicks_OnShieldBreak::bInOverShield' has a wrong offset!");

// Function HitTicksUI.FortUserWidget_HitTicks.UpdateTickMarkerOpacity
// 0x0004 (0x0004 - 0x0000)
struct FortUserWidget_HitTicks_UpdateTickMarkerOpacity final
{
public:
	float                                         NewOpacity;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUserWidget_HitTicks_UpdateTickMarkerOpacity) == 0x000004, "Wrong alignment on FortUserWidget_HitTicks_UpdateTickMarkerOpacity");
static_assert(sizeof(FortUserWidget_HitTicks_UpdateTickMarkerOpacity) == 0x000004, "Wrong size on FortUserWidget_HitTicks_UpdateTickMarkerOpacity");
static_assert(offsetof(FortUserWidget_HitTicks_UpdateTickMarkerOpacity, NewOpacity) == 0x000000, "Member 'FortUserWidget_HitTicks_UpdateTickMarkerOpacity::NewOpacity' has a wrong offset!");

}

