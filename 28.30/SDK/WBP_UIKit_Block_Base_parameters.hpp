#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UIKit_Block_Base

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_UIKit_Block_Base.WBP_UIKit_Block_Base_C.GetIsLocked
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Block_Base_C_GetIsLocked final
{
public:
	bool                                          IsLocked_0;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_Base_C_GetIsLocked) == 0x000001, "Wrong alignment on WBP_UIKit_Block_Base_C_GetIsLocked");
static_assert(sizeof(WBP_UIKit_Block_Base_C_GetIsLocked) == 0x000001, "Wrong size on WBP_UIKit_Block_Base_C_GetIsLocked");
static_assert(offsetof(WBP_UIKit_Block_Base_C_GetIsLocked, IsLocked_0) == 0x000000, "Member 'WBP_UIKit_Block_Base_C_GetIsLocked::IsLocked_0' has a wrong offset!");

// Function WBP_UIKit_Block_Base.WBP_UIKit_Block_Base_C.GetIsSelectable
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Block_Base_C_GetIsSelectable final
{
public:
	bool                                          IsSelectable_0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_Base_C_GetIsSelectable) == 0x000001, "Wrong alignment on WBP_UIKit_Block_Base_C_GetIsSelectable");
static_assert(sizeof(WBP_UIKit_Block_Base_C_GetIsSelectable) == 0x000001, "Wrong size on WBP_UIKit_Block_Base_C_GetIsSelectable");
static_assert(offsetof(WBP_UIKit_Block_Base_C_GetIsSelectable, IsSelectable_0) == 0x000000, "Member 'WBP_UIKit_Block_Base_C_GetIsSelectable::IsSelectable_0' has a wrong offset!");

// Function WBP_UIKit_Block_Base.WBP_UIKit_Block_Base_C.GetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Block_Base_C_GetIsSelected final
{
public:
	bool                                          IsSelected_0;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_Base_C_GetIsSelected) == 0x000001, "Wrong alignment on WBP_UIKit_Block_Base_C_GetIsSelected");
static_assert(sizeof(WBP_UIKit_Block_Base_C_GetIsSelected) == 0x000001, "Wrong size on WBP_UIKit_Block_Base_C_GetIsSelected");
static_assert(offsetof(WBP_UIKit_Block_Base_C_GetIsSelected, IsSelected_0) == 0x000000, "Member 'WBP_UIKit_Block_Base_C_GetIsSelected::IsSelected_0' has a wrong offset!");

// Function WBP_UIKit_Block_Base.WBP_UIKit_Block_Base_C.SetBlockVisibility
// 0x0005 (0x0005 - 0x0000)
struct WBP_UIKit_Block_Base_C_SetBlockVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_Base_C_SetBlockVisibility) == 0x000001, "Wrong alignment on WBP_UIKit_Block_Base_C_SetBlockVisibility");
static_assert(sizeof(WBP_UIKit_Block_Base_C_SetBlockVisibility) == 0x000005, "Wrong size on WBP_UIKit_Block_Base_C_SetBlockVisibility");
static_assert(offsetof(WBP_UIKit_Block_Base_C_SetBlockVisibility, Visible) == 0x000000, "Member 'WBP_UIKit_Block_Base_C_SetBlockVisibility::Visible' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_Base_C_SetBlockVisibility, Temp_bool_Variable) == 0x000001, "Member 'WBP_UIKit_Block_Base_C_SetBlockVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_Base_C_SetBlockVisibility, Temp_byte_Variable) == 0x000002, "Member 'WBP_UIKit_Block_Base_C_SetBlockVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_Base_C_SetBlockVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_UIKit_Block_Base_C_SetBlockVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Block_Base_C_SetBlockVisibility, K2Node_Select_Default) == 0x000004, "Member 'WBP_UIKit_Block_Base_C_SetBlockVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_UIKit_Block_Base.WBP_UIKit_Block_Base_C.SetIsLocked
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Block_Base_C_SetIsLocked final
{
public:
	bool                                          Is_Locked;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_Base_C_SetIsLocked) == 0x000001, "Wrong alignment on WBP_UIKit_Block_Base_C_SetIsLocked");
static_assert(sizeof(WBP_UIKit_Block_Base_C_SetIsLocked) == 0x000001, "Wrong size on WBP_UIKit_Block_Base_C_SetIsLocked");
static_assert(offsetof(WBP_UIKit_Block_Base_C_SetIsLocked, Is_Locked) == 0x000000, "Member 'WBP_UIKit_Block_Base_C_SetIsLocked::Is_Locked' has a wrong offset!");

// Function WBP_UIKit_Block_Base.WBP_UIKit_Block_Base_C.SetIsSelectable
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Block_Base_C_SetIsSelectable final
{
public:
	bool                                          Is_Selectable;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_Base_C_SetIsSelectable) == 0x000001, "Wrong alignment on WBP_UIKit_Block_Base_C_SetIsSelectable");
static_assert(sizeof(WBP_UIKit_Block_Base_C_SetIsSelectable) == 0x000001, "Wrong size on WBP_UIKit_Block_Base_C_SetIsSelectable");
static_assert(offsetof(WBP_UIKit_Block_Base_C_SetIsSelectable, Is_Selectable) == 0x000000, "Member 'WBP_UIKit_Block_Base_C_SetIsSelectable::Is_Selectable' has a wrong offset!");

// Function WBP_UIKit_Block_Base.WBP_UIKit_Block_Base_C.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Block_Base_C_SetIsSelected final
{
public:
	bool                                          IsSelected_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Block_Base_C_SetIsSelected) == 0x000001, "Wrong alignment on WBP_UIKit_Block_Base_C_SetIsSelected");
static_assert(sizeof(WBP_UIKit_Block_Base_C_SetIsSelected) == 0x000001, "Wrong size on WBP_UIKit_Block_Base_C_SetIsSelected");
static_assert(offsetof(WBP_UIKit_Block_Base_C_SetIsSelected, IsSelected_0) == 0x000000, "Member 'WBP_UIKit_Block_Base_C_SetIsSelected::IsSelected_0' has a wrong offset!");

}

