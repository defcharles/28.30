#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_UIKit_Highlight_Base

#include "Basic.hpp"

#include "E_UI_HighlightType_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_UI_HighlightSize_structs.hpp"


namespace SDK::Params
{

// Function WBP_UIKit_Highlight_Base.WBP_UIKit_Highlight_Base_C.ExecuteUbergraph_WBP_UIKit_Highlight_Base
// 0x0008 (0x0008 - 0x0000)
struct WBP_UIKit_Highlight_Base_C_ExecuteUbergraph_WBP_UIKit_Highlight_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Highlight_Base_C_ExecuteUbergraph_WBP_UIKit_Highlight_Base) == 0x000004, "Wrong alignment on WBP_UIKit_Highlight_Base_C_ExecuteUbergraph_WBP_UIKit_Highlight_Base");
static_assert(sizeof(WBP_UIKit_Highlight_Base_C_ExecuteUbergraph_WBP_UIKit_Highlight_Base) == 0x000008, "Wrong size on WBP_UIKit_Highlight_Base_C_ExecuteUbergraph_WBP_UIKit_Highlight_Base");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_ExecuteUbergraph_WBP_UIKit_Highlight_Base, EntryPoint) == 0x000000, "Member 'WBP_UIKit_Highlight_Base_C_ExecuteUbergraph_WBP_UIKit_Highlight_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_ExecuteUbergraph_WBP_UIKit_Highlight_Base, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_UIKit_Highlight_Base_C_ExecuteUbergraph_WBP_UIKit_Highlight_Base::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_UIKit_Highlight_Base.WBP_UIKit_Highlight_Base_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_UIKit_Highlight_Base_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Highlight_Base_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_UIKit_Highlight_Base_C_PreConstruct");
static_assert(sizeof(WBP_UIKit_Highlight_Base_C_PreConstruct) == 0x000001, "Wrong size on WBP_UIKit_Highlight_Base_C_PreConstruct");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_UIKit_Highlight_Base_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_UIKit_Highlight_Base.WBP_UIKit_Highlight_Base_C.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct WBP_UIKit_Highlight_Base_C_SetBackgroundColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Highlight_Base_C_SetBackgroundColor) == 0x000004, "Wrong alignment on WBP_UIKit_Highlight_Base_C_SetBackgroundColor");
static_assert(sizeof(WBP_UIKit_Highlight_Base_C_SetBackgroundColor) == 0x000010, "Wrong size on WBP_UIKit_Highlight_Base_C_SetBackgroundColor");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetBackgroundColor, Color) == 0x000000, "Member 'WBP_UIKit_Highlight_Base_C_SetBackgroundColor::Color' has a wrong offset!");

// Function WBP_UIKit_Highlight_Base.WBP_UIKit_Highlight_Base_C.SetFontSize
// 0x0060 (0x0060 - 0x0000)
struct WBP_UIKit_Highlight_Base_C_SetFontSize final
{
public:
	E_UI_HighlightSize                            FontSize;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_HighlightSize                            Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_Select_Default;                             // 0x0008(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Highlight_Base_C_SetFontSize) == 0x000008, "Wrong alignment on WBP_UIKit_Highlight_Base_C_SetFontSize");
static_assert(sizeof(WBP_UIKit_Highlight_Base_C_SetFontSize) == 0x000060, "Wrong size on WBP_UIKit_Highlight_Base_C_SetFontSize");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetFontSize, FontSize) == 0x000000, "Member 'WBP_UIKit_Highlight_Base_C_SetFontSize::FontSize' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetFontSize, Temp_byte_Variable) == 0x000001, "Member 'WBP_UIKit_Highlight_Base_C_SetFontSize::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetFontSize, K2Node_Select_Default) == 0x000008, "Member 'WBP_UIKit_Highlight_Base_C_SetFontSize::K2Node_Select_Default' has a wrong offset!");

// Function WBP_UIKit_Highlight_Base.WBP_UIKit_Highlight_Base_C.SetText
// 0x0040 (0x0040 - 0x0000)
struct WBP_UIKit_Highlight_Base_C_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0020(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Highlight_Base_C_SetText) == 0x000008, "Wrong alignment on WBP_UIKit_Highlight_Base_C_SetText");
static_assert(sizeof(WBP_UIKit_Highlight_Base_C_SetText) == 0x000040, "Wrong size on WBP_UIKit_Highlight_Base_C_SetText");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetText, Text) == 0x000000, "Member 'WBP_UIKit_Highlight_Base_C_SetText::Text' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetText, Temp_byte_Variable) == 0x000018, "Member 'WBP_UIKit_Highlight_Base_C_SetText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetText, Temp_byte_Variable_1) == 0x000019, "Member 'WBP_UIKit_Highlight_Base_C_SetText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetText, Temp_bool_Variable) == 0x00001A, "Member 'WBP_UIKit_Highlight_Base_C_SetText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetText, CallFunc_GetText_ReturnValue) == 0x000020, "Member 'WBP_UIKit_Highlight_Base_C_SetText::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetText, CallFunc_TextIsEmpty_ReturnValue) == 0x000038, "Member 'WBP_UIKit_Highlight_Base_C_SetText::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetText, K2Node_Select_Default) == 0x000039, "Member 'WBP_UIKit_Highlight_Base_C_SetText::K2Node_Select_Default' has a wrong offset!");

// Function WBP_UIKit_Highlight_Base.WBP_UIKit_Highlight_Base_C.SetTextColor
// 0x0024 (0x0024 - 0x0000)
struct WBP_UIKit_Highlight_Base_C_SetTextColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0014)()
};
static_assert(alignof(WBP_UIKit_Highlight_Base_C_SetTextColor) == 0x000004, "Wrong alignment on WBP_UIKit_Highlight_Base_C_SetTextColor");
static_assert(sizeof(WBP_UIKit_Highlight_Base_C_SetTextColor) == 0x000024, "Wrong size on WBP_UIKit_Highlight_Base_C_SetTextColor");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetTextColor, Color) == 0x000000, "Member 'WBP_UIKit_Highlight_Base_C_SetTextColor::Color' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetTextColor, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'WBP_UIKit_Highlight_Base_C_SetTextColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WBP_UIKit_Highlight_Base.WBP_UIKit_Highlight_Base_C.SetTextPadding
// 0x0018 (0x0018 - 0x0000)
struct WBP_UIKit_Highlight_Base_C_SetTextPadding final
{
public:
	struct FMargin                                Padding_0;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Highlight_Base_C_SetTextPadding) == 0x000008, "Wrong alignment on WBP_UIKit_Highlight_Base_C_SetTextPadding");
static_assert(sizeof(WBP_UIKit_Highlight_Base_C_SetTextPadding) == 0x000018, "Wrong size on WBP_UIKit_Highlight_Base_C_SetTextPadding");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetTextPadding, Padding_0) == 0x000000, "Member 'WBP_UIKit_Highlight_Base_C_SetTextPadding::Padding_0' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetTextPadding, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000010, "Member 'WBP_UIKit_Highlight_Base_C_SetTextPadding::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");

// Function WBP_UIKit_Highlight_Base.WBP_UIKit_Highlight_Base_C.SetType
// 0x0024 (0x0024 - 0x0000)
struct WBP_UIKit_Highlight_Base_C_SetType final
{
public:
	E_UI_HighlightType                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_HighlightType                            Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UI_HighlightType                            Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Highlight_Base_C_SetType) == 0x000004, "Wrong alignment on WBP_UIKit_Highlight_Base_C_SetType");
static_assert(sizeof(WBP_UIKit_Highlight_Base_C_SetType) == 0x000024, "Wrong size on WBP_UIKit_Highlight_Base_C_SetType");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetType, Type) == 0x000000, "Member 'WBP_UIKit_Highlight_Base_C_SetType::Type' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetType, Temp_byte_Variable) == 0x000001, "Member 'WBP_UIKit_Highlight_Base_C_SetType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetType, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_UIKit_Highlight_Base_C_SetType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetType, K2Node_Select_Default) == 0x000004, "Member 'WBP_UIKit_Highlight_Base_C_SetType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetType, K2Node_Select_Default_1) == 0x000014, "Member 'WBP_UIKit_Highlight_Base_C_SetType::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_UIKit_Highlight_Base.WBP_UIKit_Highlight_Base_C.SetWidth
// 0x0010 (0x0010 - 0x0000)
struct WBP_UIKit_Highlight_Base_C_SetWidth final
{
public:
	double                                        MaxWidth_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_UIKit_Highlight_Base_C_SetWidth) == 0x000008, "Wrong alignment on WBP_UIKit_Highlight_Base_C_SetWidth");
static_assert(sizeof(WBP_UIKit_Highlight_Base_C_SetWidth) == 0x000010, "Wrong size on WBP_UIKit_Highlight_Base_C_SetWidth");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetWidth, MaxWidth_0) == 0x000000, "Member 'WBP_UIKit_Highlight_Base_C_SetWidth::MaxWidth_0' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetWidth, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'WBP_UIKit_Highlight_Base_C_SetWidth::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_UIKit_Highlight_Base_C_SetWidth, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x00000C, "Member 'WBP_UIKit_Highlight_Base_C_SetWidth::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");

}

