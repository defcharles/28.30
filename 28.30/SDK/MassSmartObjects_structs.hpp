#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassSmartObjects

#include "Basic.hpp"

#include "SmartObjectsModule_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "MassEntity_structs.hpp"
#include "ZoneGraph_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MassSmartObjects.EMassSmartObjectInteractionStatus
// NumValues: 0x0005
enum class EMassSmartObjectInteractionStatus : uint8
{
	Unset                                    = 0,
	InProgress                               = 1,
	BehaviorCompleted                        = 2,
	TaskCompleted                            = 3,
	Aborted                                  = 4,
};

// ScriptStruct MassSmartObjects.MassSmartObjectUserFragment
// 0x0050 (0x0050 - 0x0000)
struct FMassSmartObjectUserFragment final : public FMassFragment
{
public:
	struct FGameplayTagContainer                  UserTags;                                          // 0x0000(0x0020)(Transient, NativeAccessSpecifierPublic)
	struct FSmartObjectClaimHandle                InteractionHandle;                                 // 0x0020(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	EMassSmartObjectInteractionStatus             InteractionStatus;                                 // 0x0040(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InteractionCooldownEndTime;                        // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassSmartObjectUserFragment) == 0x000008, "Wrong alignment on FMassSmartObjectUserFragment");
static_assert(sizeof(FMassSmartObjectUserFragment) == 0x000050, "Wrong size on FMassSmartObjectUserFragment");
static_assert(offsetof(FMassSmartObjectUserFragment, UserTags) == 0x000000, "Member 'FMassSmartObjectUserFragment::UserTags' has a wrong offset!");
static_assert(offsetof(FMassSmartObjectUserFragment, InteractionHandle) == 0x000020, "Member 'FMassSmartObjectUserFragment::InteractionHandle' has a wrong offset!");
static_assert(offsetof(FMassSmartObjectUserFragment, InteractionStatus) == 0x000040, "Member 'FMassSmartObjectUserFragment::InteractionStatus' has a wrong offset!");
static_assert(offsetof(FMassSmartObjectUserFragment, InteractionCooldownEndTime) == 0x000048, "Member 'FMassSmartObjectUserFragment::InteractionCooldownEndTime' has a wrong offset!");

// ScriptStruct MassSmartObjects.MassSmartObjectTimedBehaviorFragment
// 0x0004 (0x0004 - 0x0000)
struct FMassSmartObjectTimedBehaviorFragment final : public FMassFragment
{
public:
	float                                         UseTime;                                           // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassSmartObjectTimedBehaviorFragment) == 0x000004, "Wrong alignment on FMassSmartObjectTimedBehaviorFragment");
static_assert(sizeof(FMassSmartObjectTimedBehaviorFragment) == 0x000004, "Wrong size on FMassSmartObjectTimedBehaviorFragment");
static_assert(offsetof(FMassSmartObjectTimedBehaviorFragment, UseTime) == 0x000000, "Member 'FMassSmartObjectTimedBehaviorFragment::UseTime' has a wrong offset!");

// ScriptStruct MassSmartObjects.SmartObjectCandidateSlot
// 0x0020 (0x0020 - 0x0000)
struct FSmartObjectCandidateSlot final
{
public:
	struct FSmartObjectRequestResult              Result;                                            // 0x0000(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Cost;                                              // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectCandidateSlot) == 0x000008, "Wrong alignment on FSmartObjectCandidateSlot");
static_assert(sizeof(FSmartObjectCandidateSlot) == 0x000020, "Wrong size on FSmartObjectCandidateSlot");
static_assert(offsetof(FSmartObjectCandidateSlot, Result) == 0x000000, "Member 'FSmartObjectCandidateSlot::Result' has a wrong offset!");
static_assert(offsetof(FSmartObjectCandidateSlot, Cost) == 0x000018, "Member 'FSmartObjectCandidateSlot::Cost' has a wrong offset!");

// ScriptStruct MassSmartObjects.MassSmartObjectRequestID
// 0x0008 (0x0008 - 0x0000)
struct FMassSmartObjectRequestID final
{
public:
	struct FMassEntityHandle                      Entity;                                            // 0x0000(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMassSmartObjectRequestID) == 0x000008, "Wrong alignment on FMassSmartObjectRequestID");
static_assert(sizeof(FMassSmartObjectRequestID) == 0x000008, "Wrong size on FMassSmartObjectRequestID");
static_assert(offsetof(FMassSmartObjectRequestID, Entity) == 0x000000, "Member 'FMassSmartObjectRequestID::Entity' has a wrong offset!");

// ScriptStruct MassSmartObjects.MassSmartObjectCandidateSlots
// 0x0088 (0x0088 - 0x0000)
struct alignas(0x08) FMassSmartObjectCandidateSlots final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         NumSlots;                                          // 0x0080(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSmartObjectCandidateSlots) == 0x000008, "Wrong alignment on FMassSmartObjectCandidateSlots");
static_assert(sizeof(FMassSmartObjectCandidateSlots) == 0x000088, "Wrong size on FMassSmartObjectCandidateSlots");
static_assert(offsetof(FMassSmartObjectCandidateSlots, NumSlots) == 0x000080, "Member 'FMassSmartObjectCandidateSlots::NumSlots' has a wrong offset!");

// ScriptStruct MassSmartObjects.MassSmartObjectRequestResultFragment
// 0x0090 (0x0090 - 0x0000)
struct FMassSmartObjectRequestResultFragment final : public FMassFragment
{
public:
	struct FMassSmartObjectCandidateSlots         Candidates;                                        // 0x0000(0x0088)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bProcessed;                                        // 0x0088(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSmartObjectRequestResultFragment) == 0x000008, "Wrong alignment on FMassSmartObjectRequestResultFragment");
static_assert(sizeof(FMassSmartObjectRequestResultFragment) == 0x000090, "Wrong size on FMassSmartObjectRequestResultFragment");
static_assert(offsetof(FMassSmartObjectRequestResultFragment, Candidates) == 0x000000, "Member 'FMassSmartObjectRequestResultFragment::Candidates' has a wrong offset!");
static_assert(offsetof(FMassSmartObjectRequestResultFragment, bProcessed) == 0x000088, "Member 'FMassSmartObjectRequestResultFragment::bProcessed' has a wrong offset!");

// ScriptStruct MassSmartObjects.MassSmartObjectWorldLocationRequestFragment
// 0x0088 (0x0088 - 0x0000)
struct FMassSmartObjectWorldLocationRequestFragment final : public FMassFragment
{
public:
	struct FVector                                SearchOrigin;                                      // 0x0000(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMassEntityHandle                      RequestingEntity;                                  // 0x0018(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UserTags;                                          // 0x0020(0x0020)(Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ActivityRequirements;                              // 0x0040(0x0048)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassSmartObjectWorldLocationRequestFragment) == 0x000008, "Wrong alignment on FMassSmartObjectWorldLocationRequestFragment");
static_assert(sizeof(FMassSmartObjectWorldLocationRequestFragment) == 0x000088, "Wrong size on FMassSmartObjectWorldLocationRequestFragment");
static_assert(offsetof(FMassSmartObjectWorldLocationRequestFragment, SearchOrigin) == 0x000000, "Member 'FMassSmartObjectWorldLocationRequestFragment::SearchOrigin' has a wrong offset!");
static_assert(offsetof(FMassSmartObjectWorldLocationRequestFragment, RequestingEntity) == 0x000018, "Member 'FMassSmartObjectWorldLocationRequestFragment::RequestingEntity' has a wrong offset!");
static_assert(offsetof(FMassSmartObjectWorldLocationRequestFragment, UserTags) == 0x000020, "Member 'FMassSmartObjectWorldLocationRequestFragment::UserTags' has a wrong offset!");
static_assert(offsetof(FMassSmartObjectWorldLocationRequestFragment, ActivityRequirements) == 0x000040, "Member 'FMassSmartObjectWorldLocationRequestFragment::ActivityRequirements' has a wrong offset!");

// ScriptStruct MassSmartObjects.MassSmartObjectLaneLocationRequestFragment
// 0x0080 (0x0080 - 0x0000)
struct FMassSmartObjectLaneLocationRequestFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMassEntityHandle                      RequestingEntity;                                  // 0x0010(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UserTags;                                          // 0x0018(0x0020)(Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ActivityRequirements;                              // 0x0038(0x0048)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassSmartObjectLaneLocationRequestFragment) == 0x000008, "Wrong alignment on FMassSmartObjectLaneLocationRequestFragment");
static_assert(sizeof(FMassSmartObjectLaneLocationRequestFragment) == 0x000080, "Wrong size on FMassSmartObjectLaneLocationRequestFragment");
static_assert(offsetof(FMassSmartObjectLaneLocationRequestFragment, RequestingEntity) == 0x000010, "Member 'FMassSmartObjectLaneLocationRequestFragment::RequestingEntity' has a wrong offset!");
static_assert(offsetof(FMassSmartObjectLaneLocationRequestFragment, UserTags) == 0x000018, "Member 'FMassSmartObjectLaneLocationRequestFragment::UserTags' has a wrong offset!");
static_assert(offsetof(FMassSmartObjectLaneLocationRequestFragment, ActivityRequirements) == 0x000038, "Member 'FMassSmartObjectLaneLocationRequestFragment::ActivityRequirements' has a wrong offset!");

// ScriptStruct MassSmartObjects.MassSmartObjectCompletedRequestTag
// 0x0000 (0x0001 - 0x0001)
struct FMassSmartObjectCompletedRequestTag final : public FMassTag
{
};
static_assert(alignof(FMassSmartObjectCompletedRequestTag) == 0x000001, "Wrong alignment on FMassSmartObjectCompletedRequestTag");
static_assert(sizeof(FMassSmartObjectCompletedRequestTag) == 0x000001, "Wrong size on FMassSmartObjectCompletedRequestTag");

// ScriptStruct MassSmartObjects.SmartObjectMassEntityUserData
// 0x0008 (0x0008 - 0x0000)
struct FSmartObjectMassEntityUserData final
{
public:
	struct FMassEntityHandle                      UserEntity;                                        // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectMassEntityUserData) == 0x000008, "Wrong alignment on FSmartObjectMassEntityUserData");
static_assert(sizeof(FSmartObjectMassEntityUserData) == 0x000008, "Wrong size on FSmartObjectMassEntityUserData");
static_assert(offsetof(FSmartObjectMassEntityUserData, UserEntity) == 0x000000, "Member 'FSmartObjectMassEntityUserData::UserEntity' has a wrong offset!");

// ScriptStruct MassSmartObjects.SmartObjectLaneLocation
// 0x0010 (0x0010 - 0x0000)
struct FSmartObjectLaneLocation final
{
public:
	struct FSmartObjectHandle                     ObjectHandle;                                      // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LaneIndex;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongLane;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectLaneLocation) == 0x000008, "Wrong alignment on FSmartObjectLaneLocation");
static_assert(sizeof(FSmartObjectLaneLocation) == 0x000010, "Wrong size on FSmartObjectLaneLocation");
static_assert(offsetof(FSmartObjectLaneLocation, ObjectHandle) == 0x000000, "Member 'FSmartObjectLaneLocation::ObjectHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectLaneLocation, LaneIndex) == 0x000008, "Member 'FSmartObjectLaneLocation::LaneIndex' has a wrong offset!");
static_assert(offsetof(FSmartObjectLaneLocation, DistanceAlongLane) == 0x00000C, "Member 'FSmartObjectLaneLocation::DistanceAlongLane' has a wrong offset!");

// ScriptStruct MassSmartObjects.SmartObjectLaneLocationIndices
// 0x0010 (0x0010 - 0x0000)
struct FSmartObjectLaneLocationIndices final
{
public:
	TArray<int32>                                 SmartObjectLaneLocationIndices;                    // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectLaneLocationIndices) == 0x000008, "Wrong alignment on FSmartObjectLaneLocationIndices");
static_assert(sizeof(FSmartObjectLaneLocationIndices) == 0x000010, "Wrong size on FSmartObjectLaneLocationIndices");
static_assert(offsetof(FSmartObjectLaneLocationIndices, SmartObjectLaneLocationIndices) == 0x000000, "Member 'FSmartObjectLaneLocationIndices::SmartObjectLaneLocationIndices' has a wrong offset!");

// ScriptStruct MassSmartObjects.SmartObjectAnnotationData
// 0x00D0 (0x00D0 - 0x0000)
struct FSmartObjectAnnotationData final
{
public:
	struct FZoneGraphDataHandle                   DataHandle;                                        // 0x0000(0x0004)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AffectedLanes;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSmartObjectLaneLocation>       SmartObjectLaneLocations;                          // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<struct FSmartObjectHandle, int32>        SmartObjectToLaneLocationIndexLookup;              // 0x0028(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<int32, struct FSmartObjectLaneLocationIndices> LaneToLaneLocationIndicesLookup;                   // 0x0078(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectAnnotationData) == 0x000008, "Wrong alignment on FSmartObjectAnnotationData");
static_assert(sizeof(FSmartObjectAnnotationData) == 0x0000D0, "Wrong size on FSmartObjectAnnotationData");
static_assert(offsetof(FSmartObjectAnnotationData, DataHandle) == 0x000000, "Member 'FSmartObjectAnnotationData::DataHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectAnnotationData, AffectedLanes) == 0x000008, "Member 'FSmartObjectAnnotationData::AffectedLanes' has a wrong offset!");
static_assert(offsetof(FSmartObjectAnnotationData, SmartObjectLaneLocations) == 0x000018, "Member 'FSmartObjectAnnotationData::SmartObjectLaneLocations' has a wrong offset!");
static_assert(offsetof(FSmartObjectAnnotationData, SmartObjectToLaneLocationIndexLookup) == 0x000028, "Member 'FSmartObjectAnnotationData::SmartObjectToLaneLocationIndexLookup' has a wrong offset!");
static_assert(offsetof(FSmartObjectAnnotationData, LaneToLaneLocationIndicesLookup) == 0x000078, "Member 'FSmartObjectAnnotationData::LaneToLaneLocationIndicesLookup' has a wrong offset!");

}

