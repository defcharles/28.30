#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LimeNative

#include "Basic.hpp"

#include "LimeNative_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function LimeNative.LimeOverrideManager.OnEndPlay
// 0x0010 (0x0010 - 0x0000)
struct LimeOverrideManager_OnEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LimeOverrideManager_OnEndPlay) == 0x000008, "Wrong alignment on LimeOverrideManager_OnEndPlay");
static_assert(sizeof(LimeOverrideManager_OnEndPlay) == 0x000010, "Wrong size on LimeOverrideManager_OnEndPlay");
static_assert(offsetof(LimeOverrideManager_OnEndPlay, Actor) == 0x000000, "Member 'LimeOverrideManager_OnEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(LimeOverrideManager_OnEndPlay, EndPlayReason) == 0x000008, "Member 'LimeOverrideManager_OnEndPlay::EndPlayReason' has a wrong offset!");

// Function LimeNative.LimePawnComponentOverrides.OnLimeSettingsEndPlay
// 0x0010 (0x0010 - 0x0000)
struct LimePawnComponentOverrides_OnLimeSettingsEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LimePawnComponentOverrides_OnLimeSettingsEndPlay) == 0x000008, "Wrong alignment on LimePawnComponentOverrides_OnLimeSettingsEndPlay");
static_assert(sizeof(LimePawnComponentOverrides_OnLimeSettingsEndPlay) == 0x000010, "Wrong size on LimePawnComponentOverrides_OnLimeSettingsEndPlay");
static_assert(offsetof(LimePawnComponentOverrides_OnLimeSettingsEndPlay, Actor) == 0x000000, "Member 'LimePawnComponentOverrides_OnLimeSettingsEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(LimePawnComponentOverrides_OnLimeSettingsEndPlay, EndPlayReason) == 0x000008, "Member 'LimePawnComponentOverrides_OnLimeSettingsEndPlay::EndPlayReason' has a wrong offset!");

// Function LimeNative.LimePawnComponentOverrides.AreJunoControlsEnabled
// 0x0001 (0x0001 - 0x0000)
struct LimePawnComponentOverrides_AreJunoControlsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimePawnComponentOverrides_AreJunoControlsEnabled) == 0x000001, "Wrong alignment on LimePawnComponentOverrides_AreJunoControlsEnabled");
static_assert(sizeof(LimePawnComponentOverrides_AreJunoControlsEnabled) == 0x000001, "Wrong size on LimePawnComponentOverrides_AreJunoControlsEnabled");
static_assert(offsetof(LimePawnComponentOverrides_AreJunoControlsEnabled, ReturnValue) == 0x000000, "Member 'LimePawnComponentOverrides_AreJunoControlsEnabled::ReturnValue' has a wrong offset!");

// Function LimeNative.LimePawnComponentOverrides.IsOrbitCameraEnabled
// 0x0001 (0x0001 - 0x0000)
struct LimePawnComponentOverrides_IsOrbitCameraEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimePawnComponentOverrides_IsOrbitCameraEnabled) == 0x000001, "Wrong alignment on LimePawnComponentOverrides_IsOrbitCameraEnabled");
static_assert(sizeof(LimePawnComponentOverrides_IsOrbitCameraEnabled) == 0x000001, "Wrong size on LimePawnComponentOverrides_IsOrbitCameraEnabled");
static_assert(offsetof(LimePawnComponentOverrides_IsOrbitCameraEnabled, ReturnValue) == 0x000000, "Member 'LimePawnComponentOverrides_IsOrbitCameraEnabled::ReturnValue' has a wrong offset!");

// Function LimeNative.LimeCameraMode_OrbitCam.OnBecomeActiveBP
// 0x0008 (0x0008 - 0x0000)
struct LimeCameraMode_OrbitCam_OnBecomeActiveBP final
{
public:
	class AActor*                                 ViewTarget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimeCameraMode_OrbitCam_OnBecomeActiveBP) == 0x000008, "Wrong alignment on LimeCameraMode_OrbitCam_OnBecomeActiveBP");
static_assert(sizeof(LimeCameraMode_OrbitCam_OnBecomeActiveBP) == 0x000008, "Wrong size on LimeCameraMode_OrbitCam_OnBecomeActiveBP");
static_assert(offsetof(LimeCameraMode_OrbitCam_OnBecomeActiveBP, ViewTarget) == 0x000000, "Member 'LimeCameraMode_OrbitCam_OnBecomeActiveBP::ViewTarget' has a wrong offset!");

// Function LimeNative.LimeCameraMode_OrbitCam.UpdateCameraBP
// 0x07F0 (0x07F0 - 0x0000)
struct LimeCameraMode_OrbitCam_UpdateCameraBP final
{
public:
	class AActor*                                 ViewTarget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTViewTarget                           OutVT;                                             // 0x0010(0x07E0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimeCameraMode_OrbitCam_UpdateCameraBP) == 0x000010, "Wrong alignment on LimeCameraMode_OrbitCam_UpdateCameraBP");
static_assert(sizeof(LimeCameraMode_OrbitCam_UpdateCameraBP) == 0x0007F0, "Wrong size on LimeCameraMode_OrbitCam_UpdateCameraBP");
static_assert(offsetof(LimeCameraMode_OrbitCam_UpdateCameraBP, ViewTarget) == 0x000000, "Member 'LimeCameraMode_OrbitCam_UpdateCameraBP::ViewTarget' has a wrong offset!");
static_assert(offsetof(LimeCameraMode_OrbitCam_UpdateCameraBP, DeltaTime) == 0x000008, "Member 'LimeCameraMode_OrbitCam_UpdateCameraBP::DeltaTime' has a wrong offset!");
static_assert(offsetof(LimeCameraMode_OrbitCam_UpdateCameraBP, OutVT) == 0x000010, "Member 'LimeCameraMode_OrbitCam_UpdateCameraBP::OutVT' has a wrong offset!");

// Function LimeNative.LimePawnComponentMood.GetCurrentMoodState
// 0x0004 (0x0004 - 0x0000)
struct LimePawnComponentMood_GetCurrentMoodState final
{
public:
	struct FLimeMoodStateData                     ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimePawnComponentMood_GetCurrentMoodState) == 0x000004, "Wrong alignment on LimePawnComponentMood_GetCurrentMoodState");
static_assert(sizeof(LimePawnComponentMood_GetCurrentMoodState) == 0x000004, "Wrong size on LimePawnComponentMood_GetCurrentMoodState");
static_assert(offsetof(LimePawnComponentMood_GetCurrentMoodState, ReturnValue) == 0x000000, "Member 'LimePawnComponentMood_GetCurrentMoodState::ReturnValue' has a wrong offset!");

// Function LimeNative.LimePawnComponent_EmotionalState.HandleLimeAwesomeLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct LimePawnComponent_EmotionalState_HandleLimeAwesomeLevelChanged final
{
public:
	int32                                         NewAwesomeLevel;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimePawnComponent_EmotionalState_HandleLimeAwesomeLevelChanged) == 0x000004, "Wrong alignment on LimePawnComponent_EmotionalState_HandleLimeAwesomeLevelChanged");
static_assert(sizeof(LimePawnComponent_EmotionalState_HandleLimeAwesomeLevelChanged) == 0x000004, "Wrong size on LimePawnComponent_EmotionalState_HandleLimeAwesomeLevelChanged");
static_assert(offsetof(LimePawnComponent_EmotionalState_HandleLimeAwesomeLevelChanged, NewAwesomeLevel) == 0x000000, "Member 'LimePawnComponent_EmotionalState_HandleLimeAwesomeLevelChanged::NewAwesomeLevel' has a wrong offset!");

// Function LimeNative.LimePawnComponent_EmotionalState.SetCurrentEmotionalState
// 0x0001 (0x0001 - 0x0000)
struct LimePawnComponent_EmotionalState_SetCurrentEmotionalState final
{
public:
	ELimePawnEmotionalState                       NewEmotion;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimePawnComponent_EmotionalState_SetCurrentEmotionalState) == 0x000001, "Wrong alignment on LimePawnComponent_EmotionalState_SetCurrentEmotionalState");
static_assert(sizeof(LimePawnComponent_EmotionalState_SetCurrentEmotionalState) == 0x000001, "Wrong size on LimePawnComponent_EmotionalState_SetCurrentEmotionalState");
static_assert(offsetof(LimePawnComponent_EmotionalState_SetCurrentEmotionalState, NewEmotion) == 0x000000, "Member 'LimePawnComponent_EmotionalState_SetCurrentEmotionalState::NewEmotion' has a wrong offset!");

// Function LimeNative.LimePawnComponent_EmotionalState.SetEmotionalState
// 0x0010 (0x0010 - 0x0000)
struct LimePawnComponent_EmotionalState_SetEmotionalState final
{
public:
	struct FLimeEmotionalStateData                Emotion;                                           // 0x0000(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimePawnComponent_EmotionalState_SetEmotionalState) == 0x000004, "Wrong alignment on LimePawnComponent_EmotionalState_SetEmotionalState");
static_assert(sizeof(LimePawnComponent_EmotionalState_SetEmotionalState) == 0x000010, "Wrong size on LimePawnComponent_EmotionalState_SetEmotionalState");
static_assert(offsetof(LimePawnComponent_EmotionalState_SetEmotionalState, Emotion) == 0x000000, "Member 'LimePawnComponent_EmotionalState_SetEmotionalState::Emotion' has a wrong offset!");

// Function LimeNative.LimePawnComponent_EmotionalState.GetCurrentEmotionalState
// 0x0001 (0x0001 - 0x0000)
struct LimePawnComponent_EmotionalState_GetCurrentEmotionalState final
{
public:
	ELimePawnEmotionalState                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimePawnComponent_EmotionalState_GetCurrentEmotionalState) == 0x000001, "Wrong alignment on LimePawnComponent_EmotionalState_GetCurrentEmotionalState");
static_assert(sizeof(LimePawnComponent_EmotionalState_GetCurrentEmotionalState) == 0x000001, "Wrong size on LimePawnComponent_EmotionalState_GetCurrentEmotionalState");
static_assert(offsetof(LimePawnComponent_EmotionalState_GetCurrentEmotionalState, ReturnValue) == 0x000000, "Member 'LimePawnComponent_EmotionalState_GetCurrentEmotionalState::ReturnValue' has a wrong offset!");

// Function LimeNative.LimePawnComponent_EmotionalState.GetCurrentEmotionalStateValue
// 0x0004 (0x0004 - 0x0000)
struct LimePawnComponent_EmotionalState_GetCurrentEmotionalStateValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimePawnComponent_EmotionalState_GetCurrentEmotionalStateValue) == 0x000004, "Wrong alignment on LimePawnComponent_EmotionalState_GetCurrentEmotionalStateValue");
static_assert(sizeof(LimePawnComponent_EmotionalState_GetCurrentEmotionalStateValue) == 0x000004, "Wrong size on LimePawnComponent_EmotionalState_GetCurrentEmotionalStateValue");
static_assert(offsetof(LimePawnComponent_EmotionalState_GetCurrentEmotionalStateValue, ReturnValue) == 0x000000, "Member 'LimePawnComponent_EmotionalState_GetCurrentEmotionalStateValue::ReturnValue' has a wrong offset!");

}

