#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KeysAndLocksRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function KeysAndLocksRuntime.FortKeysAndLocksDisplayCase.GetLockChildActorsNativeHelper
// 0x0010 (0x0010 - 0x0000)
struct FortKeysAndLocksDisplayCase_GetLockChildActorsNativeHelper final
{
public:
	TArray<class UChildActorComponent*>           LockChildActors;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeysAndLocksDisplayCase_GetLockChildActorsNativeHelper) == 0x000008, "Wrong alignment on FortKeysAndLocksDisplayCase_GetLockChildActorsNativeHelper");
static_assert(sizeof(FortKeysAndLocksDisplayCase_GetLockChildActorsNativeHelper) == 0x000010, "Wrong size on FortKeysAndLocksDisplayCase_GetLockChildActorsNativeHelper");
static_assert(offsetof(FortKeysAndLocksDisplayCase_GetLockChildActorsNativeHelper, LockChildActors) == 0x000000, "Member 'FortKeysAndLocksDisplayCase_GetLockChildActorsNativeHelper::LockChildActors' has a wrong offset!");

// Function KeysAndLocksRuntime.FortKeysAndLocksDisplayCase.NativeCalculateLockInteractStrings
// 0x0068 (0x0068 - 0x0000)
struct FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings final
{
public:
	TArray<struct FFortItemEntry>                 Loot;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FText>                           RarityTexts;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDefinition;                                    // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCount;                                        // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HaveKey;                                           // 0x0030(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   NeedKey;                                           // 0x0048(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UFortWeaponModSetData*            WeaponModSetData;                                  // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings) == 0x000008, "Wrong alignment on FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings");
static_assert(sizeof(FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings) == 0x000068, "Wrong size on FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings, Loot) == 0x000000, "Member 'FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings::Loot' has a wrong offset!");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings, RarityTexts) == 0x000010, "Member 'FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings::RarityTexts' has a wrong offset!");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings, ItemDefinition) == 0x000020, "Member 'FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings, bShowCount) == 0x000028, "Member 'FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings::bShowCount' has a wrong offset!");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings, HaveKey) == 0x000030, "Member 'FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings::HaveKey' has a wrong offset!");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings, NeedKey) == 0x000048, "Member 'FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings::NeedKey' has a wrong offset!");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings, WeaponModSetData) == 0x000060, "Member 'FortKeysAndLocksDisplayCase_NativeCalculateLockInteractStrings::WeaponModSetData' has a wrong offset!");

// Function KeysAndLocksRuntime.FortKeysAndLocksDisplayCase.NativeLockChildActorsPassAllRequirements
// 0x0020 (0x0020 - 0x0000)
struct FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements final
{
public:
	TArray<class UChildActorComponent*>           LockChildActors;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDefinition;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements) == 0x000008, "Wrong alignment on FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements");
static_assert(sizeof(FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements) == 0x000020, "Wrong size on FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements, LockChildActors) == 0x000000, "Member 'FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements::LockChildActors' has a wrong offset!");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements, ItemDefinition) == 0x000010, "Member 'FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements, ReturnValue) == 0x000018, "Member 'FortKeysAndLocksDisplayCase_NativeLockChildActorsPassAllRequirements::ReturnValue' has a wrong offset!");

}

