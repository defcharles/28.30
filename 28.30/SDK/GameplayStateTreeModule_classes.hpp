#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayStateTreeModule

#include "Basic.hpp"

#include "StateTreeModule_structs.hpp"
#include "StateTreeModule_classes.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// Class GameplayStateTreeModule.StateTreeComponent
// 0x0050 (0x0148 - 0x00F8)
class UStateTreeComponent : public UBrainComponent
{
public:
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EStateTreeRunStatus StateTreeRunStatus)> OnStateTreeRunStatusChanged;                       // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FStateTreeReference                    StateTreeRef;                                      // 0x0110(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bStartLogicAutomatically;                          // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateTreeInstanceData                 InstanceData;                                      // 0x0130(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_140[0x8];                                      // 0x0140(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SendStateTreeEvent(const struct FStateTreeEvent& Event);
	void SetStartLogicAutomatically(const bool bInStartLogicAutomatically);

	EStateTreeRunStatus GetStateTreeRunStatus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeComponent">();
	}
	static class UStateTreeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeComponent>();
	}
};
static_assert(alignof(UStateTreeComponent) == 0x000008, "Wrong alignment on UStateTreeComponent");
static_assert(sizeof(UStateTreeComponent) == 0x000148, "Wrong size on UStateTreeComponent");
static_assert(offsetof(UStateTreeComponent, OnStateTreeRunStatusChanged) == 0x000100, "Member 'UStateTreeComponent::OnStateTreeRunStatusChanged' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, StateTreeRef) == 0x000110, "Member 'UStateTreeComponent::StateTreeRef' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, bStartLogicAutomatically) == 0x000128, "Member 'UStateTreeComponent::bStartLogicAutomatically' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, InstanceData) == 0x000130, "Member 'UStateTreeComponent::InstanceData' has a wrong offset!");

// Class GameplayStateTreeModule.StateTreeComponentSchema
// 0x0018 (0x0040 - 0x0028)
class UStateTreeComponentSchema final : public UStateTreeSchema
{
public:
	TSubclassOf<class AActor>                     ContextActorClass;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStateTreeExternalDataDesc             ContextActorDataDesc;                              // 0x0030(0x0010)(NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeComponentSchema">();
	}
	static class UStateTreeComponentSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeComponentSchema>();
	}
};
static_assert(alignof(UStateTreeComponentSchema) == 0x000008, "Wrong alignment on UStateTreeComponentSchema");
static_assert(sizeof(UStateTreeComponentSchema) == 0x000040, "Wrong size on UStateTreeComponentSchema");
static_assert(offsetof(UStateTreeComponentSchema, ContextActorClass) == 0x000028, "Member 'UStateTreeComponentSchema::ContextActorClass' has a wrong offset!");
static_assert(offsetof(UStateTreeComponentSchema, ContextActorDataDesc) == 0x000030, "Member 'UStateTreeComponentSchema::ContextActorDataDesc' has a wrong offset!");

}

