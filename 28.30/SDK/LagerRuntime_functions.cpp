#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LagerRuntime

#include "Basic.hpp"

#include "LagerRuntime_classes.hpp"
#include "LagerRuntime_parameters.hpp"


namespace SDK
{

// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.EvaluateAndEnablePointProviders
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaLivingWorldPointProvidersEnabler::EvaluateAndEnablePointProviders()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EvaluateAndEnablePointProviders");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.OnCurrentPlaylistLoaded
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             PlaylistName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldPointProvidersEnabler::OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCurrentPlaylistLoaded");

	Params::FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded Parms{};

	Parms.PlaylistName = PlaylistName;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.RemoveClosestPointProvidersToPoint
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaximumDistance                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointsToDisable                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldPointProvidersEnabler::RemoveClosestPointProvidersToPoint(const struct FVector& Point, const float MaximumDistance, const int32 PointsToDisable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveClosestPointProvidersToPoint");

	Params::FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint Parms{};

	Parms.Point = std::move(Point);
	Parms.MaximumDistance = MaximumDistance;
	Parms.PointsToDisable = PointsToDisable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.DoesStartEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortAthenaLivingWorldPointProvidersEnabler::DoesStartEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DoesStartEnabled");

	Params::FortAthenaLivingWorldPointProvidersEnabler_DoesStartEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.GetEnabledLinkedPointProviders
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

const TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> AFortAthenaLivingWorldPointProvidersEnabler::GetEnabledLinkedPointProviders() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetEnabledLinkedPointProviders");

	Params::FortAthenaLivingWorldPointProvidersEnabler_GetEnabledLinkedPointProviders Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.GetEnablerTags
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer AFortAthenaLivingWorldPointProvidersEnabler::GetEnablerTags() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetEnablerTags");

	Params::FortAthenaLivingWorldPointProvidersEnabler_GetEnablerTags Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.HasCompletedEvaluation
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortAthenaLivingWorldPointProvidersEnabler::HasCompletedEvaluation() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasCompletedEvaluation");

	Params::FortAthenaLivingWorldPointProvidersEnabler_HasCompletedEvaluation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnAttackerSpawned
// (Final, Native, Private)
// Parameters:
// class AActor*                           SpawnedAttacker                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLinearEncounterAnalyticComponent::OnAttackerSpawned(class AActor* SpawnedAttacker)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAttackerSpawned");

	Params::FortAthenaLinearEncounterAnalyticComponent_OnAttackerSpawned Parms{};

	Parms.SpawnedAttacker = SpawnedAttacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnDefenderDamaged
// (Final, Native, Private, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLinearEncounterAnalyticComponent::OnDefenderDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDefenderDamaged");

	Params::FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnDefenderDidDamage
// (Final, Native, Private, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLinearEncounterAnalyticComponent::OnDefenderDidDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDefenderDidDamage");

	Params::FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnDefenderDied
// (Final, Native, Private, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLinearEncounterAnalyticComponent::OnDefenderDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDefenderDied");

	Params::FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnDefenderSpawned
// (Final, Native, Private)
// Parameters:
// class AActor*                           SpawnedDefender                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLinearEncounterAnalyticComponent::OnDefenderSpawned(class AActor* SpawnedDefender)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDefenderSpawned");

	Params::FortAthenaLinearEncounterAnalyticComponent_OnDefenderSpawned Parms{};

	Parms.SpawnedDefender = SpawnedDefender;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnEncounterEnd
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UFortAthenaLinearEncounterAnalyticComponent::OnEncounterEnd()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnEncounterEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnEncounterStart
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UFortAthenaLivingWorldEncounterInstance*InAttackerEncounter                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortAthenaLivingWorldEncounterInstance*InDefenderEncounter                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLinearEncounterAnalyticComponent::OnEncounterStart(class UFortAthenaLivingWorldEncounterInstance* InAttackerEncounter, class UFortAthenaLivingWorldEncounterInstance* InDefenderEncounter)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnEncounterStart");

	Params::FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart Parms{};

	Parms.InAttackerEncounter = InAttackerEncounter;
	Parms.InDefenderEncounter = InDefenderEncounter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnStageCompleted
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class AFortPickup*>              SpawnedRewards                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAthenaLinearEncounterAnalyticComponent::OnStageCompleted(const TArray<class AFortPickup*>& SpawnedRewards)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnStageCompleted");

	Params::FortAthenaLinearEncounterAnalyticComponent_OnStageCompleted Parms{};

	Parms.SpawnedRewards = std::move(SpawnedRewards);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.AddAllowedPointProvider
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>PointProvider                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldEncounterInstance::AddAllowedPointProvider(const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& PointProvider)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddAllowedPointProvider");

	Params::FortAthenaLivingWorldEncounterInstance_AddAllowedPointProvider Parms{};

	Parms.PointProvider = PointProvider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.AdvanceEncounterStage
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UFortAthenaLivingWorldEncounterInstance::AdvanceEncounterStage()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AdvanceEncounterStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.OnEncounterActorDied
// (Final, Native, Private, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldEncounterInstance::OnEncounterActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnEncounterActorDied");

	Params::FortAthenaLivingWorldEncounterInstance_OnEncounterActorDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.PauseEncounter
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UFortAthenaLivingWorldEncounterInstance::PauseEncounter()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PauseEncounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.RemoveAllowedPointProvider
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>PointProvider                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldEncounterInstance::RemoveAllowedPointProvider(const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& PointProvider)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveAllowedPointProvider");

	Params::FortAthenaLivingWorldEncounterInstance_RemoveAllowedPointProvider Parms{};

	Parms.PointProvider = PointProvider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.RequestEventGeneration
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UFortAthenaLivingWorldEncounterInstance::RequestEventGeneration()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestEventGeneration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.Reset
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UFortAthenaLivingWorldEncounterInstance::Reset()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.ResumeEncounter
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UFortAthenaLivingWorldEncounterInstance::ResumeEncounter()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResumeEncounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.StartEncounterStage
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StageIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldEncounterInstance::StartEncounterStage(const int32 StageIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartEncounterStage");

	Params::FortAthenaLivingWorldEncounterInstance_StartEncounterStage Parms{};

	Parms.StageIndex = StageIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.GetAliveSpawnedActorCount
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortAthenaLivingWorldEncounterInstance::GetAliveSpawnedActorCount() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAliveSpawnedActorCount");

	Params::FortAthenaLivingWorldEncounterInstance_GetAliveSpawnedActorCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.GetTotalActorCount
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortAthenaLivingWorldEncounterInstance::GetTotalActorCount() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTotalActorCount");

	Params::FortAthenaLivingWorldEncounterInstance_GetTotalActorCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.HasPendingSpawnRequest
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldEncounterInstance::HasPendingSpawnRequest() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasPendingSpawnRequest");

	Params::FortAthenaLivingWorldEncounterInstance_HasPendingSpawnRequest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.HasReachedMaxSpawnedCount
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldEncounterInstance::HasReachedMaxSpawnedCount() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasReachedMaxSpawnedCount");

	Params::FortAthenaLivingWorldEncounterInstance_HasReachedMaxSpawnedCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.OwnsActor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldEncounterInstance::OwnsActor(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OwnsActor");

	Params::FortAthenaLivingWorldEncounterInstance_OwnsActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.GetLivingWorldManager
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortAthenaLivingWorldManager*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortAthenaLivingWorldManager* UFortAthenaLivingWorldManager::GetLivingWorldManager(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetLivingWorldManager");

	Params::FortAthenaLivingWorldManager_GetLivingWorldManager Parms{};

	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerDisablePointProvider
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           PointProvider                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LivingWorldManagerDisablePointProvider(class AActor* PointProvider)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("LivingWorldManagerDisablePointProvider");

	Params::FortAthenaLivingWorldManager_LivingWorldManagerDisablePointProvider Parms{};

	Parms.PointProvider = PointProvider;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerEnablePointProvider
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           PointProvider                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LivingWorldManagerEnablePointProvider(class AActor* PointProvider)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("LivingWorldManagerEnablePointProvider");

	Params::FortAthenaLivingWorldManager_LivingWorldManagerEnablePointProvider Parms{};

	Parms.PointProvider = PointProvider;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerRegisterPointProvider
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           PointProvider                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LivingWorldManagerRegisterPointProvider(class AActor* PointProvider)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("LivingWorldManagerRegisterPointProvider");

	Params::FortAthenaLivingWorldManager_LivingWorldManagerRegisterPointProvider Parms{};

	Parms.PointProvider = PointProvider;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerUnregisterPointProvider
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           PointProvider                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LivingWorldManagerUnregisterPointProvider(class AActor* PointProvider)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("LivingWorldManagerUnregisterPointProvider");

	Params::FortAthenaLivingWorldManager_LivingWorldManagerUnregisterPointProvider Parms{};

	Parms.PointProvider = PointProvider;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.CancelSpawnRequest
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RequestID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::CancelSpawnRequest(const int32 RequestID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CancelSpawnRequest");

	Params::FortAthenaLivingWorldManager_CancelSpawnRequest Parms{};

	Parms.RequestID = RequestID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.EndEncounter
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UFortAthenaLivingWorldEncounterInstance*EncounterInstance                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::EndEncounter(class UFortAthenaLivingWorldEncounterInstance* EncounterInstance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EndEncounter");

	Params::FortAthenaLivingWorldManager_EndEncounter Parms{};

	Parms.EncounterInstance = EncounterInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerDebugEvent
// (Final, RequiredAPI, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DebugIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RuntimeSpawnDataName                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EncounterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LivingWorldManagerDebugEvent(const class FString& EventName, int32 DebugIndex, const class FString& RuntimeSpawnDataName, const class FString& EncounterName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerDebugEvent");

	Params::FortAthenaLivingWorldManager_LivingWorldManagerDebugEvent Parms{};

	Parms.EventName = std::move(EventName);
	Parms.DebugIndex = DebugIndex;
	Parms.RuntimeSpawnDataName = std::move(RuntimeSpawnDataName);
	Parms.EncounterName = std::move(EncounterName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerDumpEventInstances
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortAthenaLivingWorldManager::LivingWorldManagerDumpEventInstances()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerDumpEventInstances");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerDumpPrefabLevelBounds
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortAthenaLivingWorldManager::LivingWorldManagerDumpPrefabLevelBounds()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerDumpPrefabLevelBounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerDumpSpawnCount
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortAthenaLivingWorldManager::LivingWorldManagerDumpSpawnCount()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerDumpSpawnCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerFlush
// (Final, RequiredAPI, BlueprintAuthorityOnly, Exec, Native, Public, BlueprintCallable)

void UFortAthenaLivingWorldManager::LivingWorldManagerFlush()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerFlush");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerGenerateEvents
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortAthenaLivingWorldManager::LivingWorldManagerGenerateEvents()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerGenerateEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerProviderDebugActor
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// int32                                   ProviderIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LivingWorldManagerProviderDebugActor(int32 ProviderIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerProviderDebugActor");

	Params::FortAthenaLivingWorldManager_LivingWorldManagerProviderDebugActor Parms{};

	Parms.ProviderIndex = ProviderIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerSetEventGenerationEnabled
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInGenerateEvents                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LivingWorldManagerSetEventGenerationEnabled(const bool bInGenerateEvents)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerSetEventGenerationEnabled");

	Params::FortAthenaLivingWorldManager_LivingWorldManagerSetEventGenerationEnabled Parms{};

	Parms.bInGenerateEvents = bInGenerateEvents;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerSwitchDensityDisplay
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// int32                                   DensityMapIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LivingWorldManagerSwitchDensityDisplay(int32 DensityMapIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerSwitchDensityDisplay");

	Params::FortAthenaLivingWorldManager_LivingWorldManagerSwitchDensityDisplay Parms{};

	Parms.DensityMapIndex = DensityMapIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerToggleActorMinimap
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LivingWorldManagerToggleActorMinimap(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerToggleActorMinimap");

	Params::FortAthenaLivingWorldManager_LivingWorldManagerToggleActorMinimap Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerToggleDensityDisplay
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortAthenaLivingWorldManager::LivingWorldManagerToggleDensityDisplay()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerToggleDensityDisplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerToggleGenerateEvents
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortAthenaLivingWorldManager::LivingWorldManagerToggleGenerateEvents()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerToggleGenerateEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerToggleVerboseLogging
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortAthenaLivingWorldManager::LivingWorldManagerToggleVerboseLogging()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerToggleVerboseLogging");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LWMF
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortAthenaLivingWorldManager::LWMF()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LWMF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.LWMTAM
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::LWMTAM(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LWMTAM");

	Params::FortAthenaLivingWorldManager_LWMTAM Parms{};

	Parms.Name_0 = std::move(Name_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnActorSpawned
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RequestID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::OnActorSpawned(class AActor* Actor, int32 RequestID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnActorSpawned");

	Params::FortAthenaLivingWorldManager_OnActorSpawned Parms{};

	Parms.Actor = Actor;
	Parms.RequestID = RequestID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnCurrentPlaylistLoaded
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             PlaylistName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCurrentPlaylistLoaded");

	Params::FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded Parms{};

	Parms.PlaylistName = PlaylistName;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnDebugSpawnEventSpawned
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class AActor*>                   SpawnedActors                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::OnDebugSpawnEventSpawned(const TArray<class AActor*>& SpawnedActors, bool bSuccess)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnDebugSpawnEventSpawned");

	Params::FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned Parms{};

	Parms.SpawnedActors = std::move(SpawnedActors);
	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnPatrolPathAdded
// (Final, Native, Private)
// Parameters:
// class AFortAthenaPatrolPath*            PatrolPath                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::OnPatrolPathAdded(class AFortAthenaPatrolPath* PatrolPath)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPatrolPathAdded");

	Params::FortAthenaLivingWorldManager_OnPatrolPathAdded Parms{};

	Parms.PatrolPath = PatrolPath;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnPatrolPathDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::OnPatrolPathDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnPatrolPathDestroyed");

	Params::FortAthenaLivingWorldManager_OnPatrolPathDestroyed Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnRep_ActorClassToPreloadOnClient
// (Final, Native, Private)

void UFortAthenaLivingWorldManager::OnRep_ActorClassToPreloadOnClient()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ActorClassToPreloadOnClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnRep_DebugDensityMinimapIndicator
// (Final, Native, Private)
// Parameters:
// class UFortAthenaLivingWorldDebugDensityMiniMapIndicator*OldMapIndicator                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::OnRep_DebugDensityMinimapIndicator(class UFortAthenaLivingWorldDebugDensityMiniMapIndicator* OldMapIndicator)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_DebugDensityMinimapIndicator");

	Params::FortAthenaLivingWorldManager_OnRep_DebugDensityMinimapIndicator Parms{};

	Parms.OldMapIndicator = OldMapIndicator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnSpawnedActorDestroy
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::OnSpawnedActorDestroy(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSpawnedActorDestroy");

	Params::FortAthenaLivingWorldManager_OnSpawnedActorDestroy Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnUnmanagedDensityReservoirActorDestroy
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::OnUnmanagedDensityReservoirActorDestroy(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnUnmanagedDensityReservoirActorDestroy");

	Params::FortAthenaLivingWorldManager_OnUnmanagedDensityReservoirActorDestroy Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.OnWorldFinishedInitialization
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTagContainer            ContextTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnWorldFinishedInitialization");

	Params::FortAthenaLivingWorldManager_OnWorldFinishedInitialization Parms{};

	Parms.ContextTags = std::move(ContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.RegisterDensityReservoir
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorDensityReservoir                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Density                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldManager::RegisterDensityReservoir(class AActor* ActorDensityReservoir, float Density, float Range)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterDensityReservoir");

	Params::FortAthenaLivingWorldManager_RegisterDensityReservoir Parms{};

	Parms.ActorDensityReservoir = ActorDensityReservoir;
	Parms.Density = Density;
	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.RegisterTagDensityReservoir
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           ActorDensityReservoir                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFortAthenaLivingWorldEventTagDensityRegistration>TagsDensity                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldManager::RegisterTagDensityReservoir(class AActor* ActorDensityReservoir, const TArray<struct FFortAthenaLivingWorldEventTagDensityRegistration>& TagsDensity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RegisterTagDensityReservoir");

	Params::FortAthenaLivingWorldManager_RegisterTagDensityReservoir Parms{};

	Parms.ActorDensityReservoir = ActorDensityReservoir;
	Parms.TagsDensity = std::move(TagsDensity);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.RequestEventGeneration
// (Final, Native, Public, BlueprintCallable)

void UFortAthenaLivingWorldManager::RequestEventGeneration()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RequestEventGeneration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.ResetEncounter
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UFortAthenaLivingWorldEncounterInstance*EncounterInstance                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::ResetEncounter(class UFortAthenaLivingWorldEncounterInstance* EncounterInstance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetEncounter");

	Params::FortAthenaLivingWorldManager_ResetEncounter Parms{};

	Parms.EncounterInstance = EncounterInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.StartEncounter
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UFortAthenaLivingWorldEncounter>EncounterType                                          (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>>EncounterPointProviders                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// class AActor*                           ActorDensityReservoir                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortAthenaLivingWorldEncounterInstance*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortAthenaLivingWorldEncounterInstance* UFortAthenaLivingWorldManager::StartEncounter(const TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterType, const TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>>& EncounterPointProviders, class AActor* ActorDensityReservoir)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StartEncounter");

	Params::FortAthenaLivingWorldManager_StartEncounter Parms{};

	Parms.EncounterType = EncounterType;
	Parms.EncounterPointProviders = std::move(EncounterPointProviders);
	Parms.ActorDensityReservoir = ActorDensityReservoir;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.TrySpawnEvent
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FDataTableRowHandle              EventEntry                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnLocation                                          (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(TArray<class AActor*>& SpawnedActors, bool bSuccess)>OnRequestFinished                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RequestID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldManager::TrySpawnEvent(const struct FDataTableRowHandle& EventEntry, const struct FTransform& SpawnLocation, const TDelegate<void(TArray<class AActor*>& SpawnedActors, bool bSuccess)>& OnRequestFinished, int32* RequestID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TrySpawnEvent");

	Params::FortAthenaLivingWorldManager_TrySpawnEvent Parms{};

	Parms.EventEntry = std::move(EventEntry);
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.OnRequestFinished = OnRequestFinished;

	UObject::ProcessEvent(Func, &Parms);

	if (RequestID != nullptr)
		*RequestID = Parms.RequestID;

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.TrySpawnEventWithPreDespawn
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FDataTableRowHandle              EventEntry                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnLocation                                          (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(TArray<class AActor*>& SpawnedActors, bool bSuccess)>OnRequestFinished                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     DespawnDensityTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAllowedDensityValue                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RequestID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldManager::TrySpawnEventWithPreDespawn(const struct FDataTableRowHandle& EventEntry, const struct FTransform& SpawnLocation, const TDelegate<void(TArray<class AActor*>& SpawnedActors, bool bSuccess)>& OnRequestFinished, const struct FGameplayTag& DespawnDensityTag, float MaxAllowedDensityValue, int32* RequestID)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("TrySpawnEventWithPreDespawn");

	Params::FortAthenaLivingWorldManager_TrySpawnEventWithPreDespawn Parms{};

	Parms.EventEntry = std::move(EventEntry);
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.OnRequestFinished = OnRequestFinished;
	Parms.DespawnDensityTag = std::move(DespawnDensityTag);
	Parms.MaxAllowedDensityValue = MaxAllowedDensityValue;

	UObject::ProcessEvent(Func, &Parms);

	if (RequestID != nullptr)
		*RequestID = Parms.RequestID;

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.UnregisterDensityReservoir
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorDensityReservoir                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldManager::UnregisterDensityReservoir(class AActor* ActorDensityReservoir)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UnregisterDensityReservoir");

	Params::FortAthenaLivingWorldManager_UnregisterDensityReservoir Parms{};

	Parms.ActorDensityReservoir = ActorDensityReservoir;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldManager.BuildDataRegistryResolverScope_Implementation
// (Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FName>                     InOutResolverScopes                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   InOutPriority                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldManager::BuildDataRegistryResolverScope_Implementation(TArray<class FName>* InOutResolverScopes, int32* InOutPriority) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("BuildDataRegistryResolverScope_Implementation");

	Params::FortAthenaLivingWorldManager_BuildDataRegistryResolverScope_Implementation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InOutResolverScopes != nullptr)
		*InOutResolverScopes = std::move(Parms.InOutResolverScopes);

	if (InOutPriority != nullptr)
		*InOutPriority = Parms.InOutPriority;

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.GetOwningEncounter
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortAthenaLivingWorldEncounterInstance*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortAthenaLivingWorldEncounterInstance* UFortAthenaLivingWorldManager::GetOwningEncounter(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetOwningEncounter");

	Params::FortAthenaLivingWorldManager_GetOwningEncounter Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.HasPendingSpawnRequestForEncounter
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFortAthenaLivingWorldEncounterInstance*EncounterInstance                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldManager::HasPendingSpawnRequestForEncounter(const class UFortAthenaLivingWorldEncounterInstance* EncounterInstance) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasPendingSpawnRequestForEncounter");

	Params::FortAthenaLivingWorldManager_HasPendingSpawnRequestForEncounter Parms{};

	Parms.EncounterInstance = EncounterInstance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.IsEncounterCategoryActive
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UFortAthenaLivingWorldEncounter>EncounterType                                          (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortAthenaLivingWorldManager::IsEncounterCategoryActive(const TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterType) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsEncounterCategoryActive");

	Params::FortAthenaLivingWorldManager_IsEncounterCategoryActive Parms{};

	Parms.EncounterType = EncounterType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.QueryActorDensityBudget
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReferenceActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortAthenaLivingWorldManager::QueryActorDensityBudget(class AActor* ReferenceActor, float Range) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("QueryActorDensityBudget");

	Params::FortAthenaLivingWorldManager_QueryActorDensityBudget Parms{};

	Parms.ReferenceActor = ReferenceActor;
	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldManager.QueryEventBudget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDataTableRowHandle              EventEntry                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           SpawnLocation                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortAthenaLivingWorldManager::QueryEventBudget(const struct FDataTableRowHandle& EventEntry, const class AActor* SpawnLocation) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("QueryEventBudget");

	Params::FortAthenaLivingWorldManager_QueryEventBudget Parms{};

	Parms.EventEntry = std::move(EventEntry);
	Parms.SpawnLocation = SpawnLocation;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldNavigationInvokerComponent.OnCurrentPlaylistLoaded
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FName                             PlaylistName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldNavigationInvokerComponent::OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCurrentPlaylistLoaded");

	Params::FortAthenaLivingWorldNavigationInvokerComponent_OnCurrentPlaylistLoaded Parms{};

	Parms.PlaylistName = PlaylistName;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldPrefab.GetOwningLivingWorldPrefab
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortAthenaLivingWorldPrefab*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFortAthenaLivingWorldPrefab* AFortAthenaLivingWorldPrefab::GetOwningLivingWorldPrefab(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetOwningLivingWorldPrefab");

	Params::FortAthenaLivingWorldPrefab_GetOwningLivingWorldPrefab Parms{};

	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldPrefab.AllowSpawnerToSpawn
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaLivingWorldPrefab::AllowSpawnerToSpawn()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AllowSpawnerToSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldPrefab.CallWhenAllActorHaveSpawned
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(TArray<class AActor*>& SpawnedActors)>DelegateToCall                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldPrefab::CallWhenAllActorHaveSpawned(const TDelegate<void(TArray<class AActor*>& SpawnedActors)>& DelegateToCall)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CallWhenAllActorHaveSpawned");

	Params::FortAthenaLivingWorldPrefab_CallWhenAllActorHaveSpawned Parms{};

	Parms.DelegateToCall = DelegateToCall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldPrefab.DestroyBuildingsInLevelBounds
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       FinishedDelegate                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldPrefab::DestroyBuildingsInLevelBounds(const TDelegate<void()>& FinishedDelegate)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DestroyBuildingsInLevelBounds");

	Params::FortAthenaLivingWorldPrefab_DestroyBuildingsInLevelBounds Parms{};

	Parms.FinishedDelegate = FinishedDelegate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldPrefab.MakeLevelVisible
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaLivingWorldPrefab::MakeLevelVisible()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("MakeLevelVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldPrefab.OnRep_ShouldLevelBeVisible
// (Final, Native, Protected)

void AFortAthenaLivingWorldPrefab::OnRep_ShouldLevelBeVisible()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_ShouldLevelBeVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldPrefab.RemoveFoliageInsideLevelBound
// (Final, Native, Public, BlueprintCallable)

void AFortAthenaLivingWorldPrefab::RemoveFoliageInsideLevelBound()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveFoliageInsideLevelBound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldPrefab.GetLevelBounds
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox AFortAthenaLivingWorldPrefab::GetLevelBounds() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLevelBounds");

	Params::FortAthenaLivingWorldPrefab_GetLevelBounds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldPrefabActorSpawner.CallWhenActorSpawned
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(class AActor* SpawnedActor)>DelegateToCall                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldPrefabActorSpawner::CallWhenActorSpawned(const TDelegate<void(class AActor* SpawnedActor)>& DelegateToCall)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CallWhenActorSpawned");

	Params::FortAthenaLivingWorldPrefabActorSpawner_CallWhenActorSpawned Parms{};

	Parms.DelegateToCall = DelegateToCall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldPrefabActorSpawner.OnSnapCompleted
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UFortSnapOnSurfaceComponent*      Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OldTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       NewTransfom                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldPrefabActorSpawner::OnSnapCompleted(class UFortSnapOnSurfaceComponent* Component, const struct FTransform& OldTransform, const struct FTransform& NewTransfom)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSnapCompleted");

	Params::FortAthenaLivingWorldPrefabActorSpawner_OnSnapCompleted Parms{};

	Parms.Component = Component;
	Parms.OldTransform = std::move(OldTransform);
	Parms.NewTransfom = std::move(NewTransfom);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldPrefabActorSpawner.GetSpawnedActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AFortAthenaLivingWorldPrefabActorSpawner::GetSpawnedActor() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSpawnedActor");

	Params::FortAthenaLivingWorldPrefabActorSpawner_GetSpawnedActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldSpawnActionBlueprint.K2_ModifySpawnComponentList
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UFortAthenaAISpawnerDataComponentList*ComponentList                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ComponentOuter                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldSpawnActionBlueprint::K2_ModifySpawnComponentList(class UFortAthenaAISpawnerDataComponentList* ComponentList, class UObject* ComponentOuter) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("K2_ModifySpawnComponentList");

	Params::FortAthenaLivingWorldSpawnActionBlueprint_K2_ModifySpawnComponentList Parms{};

	Parms.ComponentList = ComponentList;
	Parms.ComponentOuter = ComponentOuter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldSpawnActionBlueprint.K2_OnAllActorSpawned
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class AActor*>                   SpawnedActor                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>SourcePointProvider                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldSpawnActionBlueprint::K2_OnAllActorSpawned(const TArray<class AActor*>& SpawnedActor, const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& SourcePointProvider) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("K2_OnAllActorSpawned");

	Params::FortAthenaLivingWorldSpawnActionBlueprint_K2_OnAllActorSpawned Parms{};

	Parms.SpawnedActor = std::move(SpawnedActor);
	Parms.SourcePointProvider = SourcePointProvider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldSpawnActionBlueprint.K2_OnSpawnedActor
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AActor*                           SpawnedActor                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>SourcePointProvider                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldSpawnActionBlueprint::K2_OnSpawnedActor(const class AActor* SpawnedActor, const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& SourcePointProvider) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("K2_OnSpawnedActor");

	Params::FortAthenaLivingWorldSpawnActionBlueprint_K2_OnSpawnedActor Parms{};

	Parms.SpawnedActor = SpawnedActor;
	Parms.SourcePointProvider = SourcePointProvider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldSpawnActionBlueprint.K2_OnSpawnedActorFailed
// (Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>SourcePointProvider                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldSpawnActionBlueprint::K2_OnSpawnedActorFailed(const TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>& SourcePointProvider) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("K2_OnSpawnedActorFailed");

	Params::FortAthenaLivingWorldSpawnActionBlueprint_K2_OnSpawnedActorFailed Parms{};

	Parms.SourcePointProvider = SourcePointProvider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldWardComponent.OnCurrentPlaylistLoaded
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             PlaylistName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldWardComponent::OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCurrentPlaylistLoaded");

	Params::FortAthenaLivingWorldWardComponent_OnCurrentPlaylistLoaded Parms{};

	Parms.PlaylistName = PlaylistName;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldWardComponent.OnWorldFinishedInitialization
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTagContainer            ContextTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldWardComponent::OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnWorldFinishedInitialization");

	Params::FortAthenaLivingWorldWardComponent_OnWorldFinishedInitialization Parms{};

	Parms.ContextTags = std::move(ContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldWardComponent.SetWardRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortAthenaLivingWorldWardComponent::SetWardRadius(float Radius)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetWardRadius");

	Params::FortAthenaLivingWorldWardComponent_SetWardRadius Parms{};

	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerDisplaySpawnPoints
// (Final, Exec, Native, Public)
// Parameters:
// float                                   MaxDisplayDistance                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerDisplaySpawnPoints(float MaxDisplayDistance)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerDisplaySpawnPoints");

	Params::FortCheatManager_LivingWorldManager_LivingWorldManagerDisplaySpawnPoints Parms{};

	Parms.MaxDisplayDistance = MaxDisplayDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerGDTNextDensityGrid
// (Final, Exec, Native, Public)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerGDTNextDensityGrid()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerGDTNextDensityGrid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerSpawn
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerSpawn(const class FString& EventDataName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerSpawn");

	Params::FortCheatManager_LivingWorldManager_LivingWorldManagerSpawn Parms{};

	Parms.EventDataName = std::move(EventDataName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerSpawnAtLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, HasDefaults)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerSpawnAtLocation(const class FString& EventDataName, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerSpawnAtLocation");

	Params::FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation Parms{};

	Parms.EventDataName = std::move(EventDataName);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerSpawnEvent
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SpawnerDataNames                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerSpawnEvent(const class FString& EventDataName, const class FString& SpawnerDataNames)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerSpawnEvent");

	Params::FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnEvent Parms{};

	Parms.EventDataName = std::move(EventDataName);
	Parms.SpawnerDataNames = std::move(SpawnerDataNames);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerSpawnEventAtLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, HasDefaults)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           SpawnerDataNames                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerSpawnEventAtLocation(const class FString& EventDataName, const struct FVector& Location, const struct FRotator& Rotation, const class FString& SpawnerDataNames)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerSpawnEventAtLocation");

	Params::FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnEventAtLocation Parms{};

	Parms.EventDataName = std::move(EventDataName);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.SpawnerDataNames = std::move(SpawnerDataNames);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerSpawnTrackedAtLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, HasDefaults)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TrackedActorName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerSpawnTrackedAtLocation(const class FString& EventDataName, const class FString& TrackedActorName, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerSpawnTrackedAtLocation");

	Params::FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnTrackedAtLocation Parms{};

	Parms.EventDataName = std::move(EventDataName);
	Parms.TrackedActorName = std::move(TrackedActorName);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerTeleportTo
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerTeleportTo(const class FString& EventDataName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerTeleportTo");

	Params::FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportTo Parms{};

	Parms.EventDataName = std::move(EventDataName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerTeleportToSpawnPosition
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerTeleportToSpawnPosition(const class FString& EventDataName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerTeleportToSpawnPosition");

	Params::FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportToSpawnPosition Parms{};

	Parms.EventDataName = std::move(EventDataName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerTriggerEvent
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LivingWorldManagerTriggerEvent(const class FString& EventDataName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LivingWorldManagerTriggerEvent");

	Params::FortCheatManager_LivingWorldManager_LivingWorldManagerTriggerEvent Parms{};

	Parms.EventDataName = std::move(EventDataName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LWMS
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LWMS(const class FString& EventDataName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LWMS");

	Params::FortCheatManager_LivingWorldManager_LWMS Parms{};

	Parms.EventDataName = std::move(EventDataName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LWMSE
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SpawnerDataNames                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LWMSE(const class FString& EventDataName, const class FString& SpawnerDataNames)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LWMSE");

	Params::FortCheatManager_LivingWorldManager_LWMSE Parms{};

	Parms.EventDataName = std::move(EventDataName);
	Parms.SpawnerDataNames = std::move(SpawnerDataNames);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortCheatManager_LivingWorldManager.LWMTE
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           EventDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_LivingWorldManager::LWMTE(const class FString& EventDataName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("LWMTE");

	Params::FortCheatManager_LivingWorldManager_LWMTE Parms{};

	Parms.EventDataName = std::move(EventDataName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldLightStaticPointProvider.DisablePointProvider
// (Native, Public, BlueprintCallable)

void UFortAthenaLivingWorldLightStaticPointProvider::DisablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DisablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldLightStaticPointProvider.EnablePointProvider
// (Native, Public, BlueprintCallable)

void UFortAthenaLivingWorldLightStaticPointProvider::EnablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.DisablePointProvider
// (Native, Public, BlueprintCallable)

void IFortAthenaLivingWorldPointProviderInterface::DisablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DisablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.EnablePointProvider
// (Native, Public, BlueprintCallable)

void IFortAthenaLivingWorldPointProviderInterface::EnablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.GetPointProviderLocation
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector IFortAthenaLivingWorldPointProviderInterface::GetPointProviderLocation()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPointProviderLocation");

	Params::FortAthenaLivingWorldPointProviderInterface_GetPointProviderLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.GetPointProviderMaxRadius
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IFortAthenaLivingWorldPointProviderInterface::GetPointProviderMaxRadius()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetPointProviderMaxRadius");

	Params::FortAthenaLivingWorldPointProviderInterface_GetPointProviderMaxRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.GetFiltersTags
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            FilterTags                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void IFortAthenaLivingWorldPointProviderInterface::GetFiltersTags(struct FGameplayTagContainer* FilterTags) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetFiltersTags");

	Params::FortAthenaLivingWorldPointProviderInterface_GetFiltersTags Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FilterTags != nullptr)
		*FilterTags = std::move(Parms.FilterTags);
}


// Function LagerRuntime.FortAthenaLivingWorldStaticPointProvider.DisablePointProvider
// (Native, Public, BlueprintCallable)

void AFortAthenaLivingWorldStaticPointProvider::DisablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DisablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldStaticPointProvider.EnablePointProvider
// (Native, Public, BlueprintCallable)

void AFortAthenaLivingWorldStaticPointProvider::EnablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldStaticPointProvider.OnCurrentPlaylistLoaded
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FName                             PlaylistName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldStaticPointProvider::OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCurrentPlaylistLoaded");

	Params::FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded Parms{};

	Parms.PlaylistName = PlaylistName;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.DisablePointProvider
// (Native, Public, BlueprintCallable)

void AFortAthenaLivingWorldVolume::DisablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DisablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.EnablePointProvider
// (Native, Public, BlueprintCallable)

void AFortAthenaLivingWorldVolume::EnablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.OnCurrentPlaylistLoaded
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             PlaylistName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldVolume::OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCurrentPlaylistLoaded");

	Params::FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded Parms{};

	Parms.PlaylistName = PlaylistName;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.OnNavigationFinishedGeneration
// (Final, Native, Private)
// Parameters:
// class ANavigationData*                  NavData                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldVolume::OnNavigationFinishedGeneration(class ANavigationData* NavData)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnNavigationFinishedGeneration");

	Params::FortAthenaLivingWorldVolume_OnNavigationFinishedGeneration Parms{};

	Parms.NavData = NavData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.OnWorldFinishedInitialization
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTagContainer            ContextTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldVolume::OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnWorldFinishedInitialization");

	Params::FortAthenaLivingWorldVolume_OnWorldFinishedInitialization Parms{};

	Parms.ContextTags = std::move(ContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.ResetSpawnRotation
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortAthenaLivingWorldVolume::ResetSpawnRotation()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ResetSpawnRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.RunEQS
// (Final, Native, Private)

void AFortAthenaLivingWorldVolume::RunEQS()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RunEQS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.SetEQSQuery
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UEnvQuery*                        Query                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldVolume::SetEQSQuery(class UEnvQuery* Query)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEQSQuery");

	Params::FortAthenaLivingWorldVolume_SetEQSQuery Parms{};

	Parms.Query = Query;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.SetEQSQueryConfigParam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ParameterName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldVolume::SetEQSQueryConfigParam(const class FName ParameterName, float Value)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEQSQueryConfigParam");

	Params::FortAthenaLivingWorldVolume_SetEQSQueryConfigParam Parms{};

	Parms.ParameterName = ParameterName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.SetFiltersTags
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            TagContainer                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldVolume::SetFiltersTags(const struct FGameplayTagContainer& TagContainer)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFiltersTags");

	Params::FortAthenaLivingWorldVolume_SetFiltersTags Parms{};

	Parms.TagContainer = std::move(TagContainer);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.SetSpawnRotation
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AFortAthenaLivingWorldVolume::SetSpawnRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetSpawnRotation");

	Params::FortAthenaLivingWorldVolume_SetSpawnRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.DoesStartEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortAthenaLivingWorldVolume::DoesStartEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DoesStartEnabled");

	Params::FortAthenaLivingWorldVolume_DoesStartEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaLivingWorldVolume.IsPointProviderEnabled
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortAthenaLivingWorldVolume::IsPointProviderEnabled() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsPointProviderEnabled");

	Params::FortAthenaLivingWorldVolume_IsPointProviderEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LagerRuntime.FortAthenaPatrolPathPointProvider.DisablePointProvider
// (RequiredAPI, Native, Public, BlueprintCallable)

void AFortAthenaPatrolPathPointProvider::DisablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DisablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaPatrolPathPointProvider.EnablePointProvider
// (RequiredAPI, Native, Public, BlueprintCallable)

void AFortAthenaPatrolPathPointProvider::EnablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaPatrolPathPointProvider.OnCurrentPlaylistLoaded
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             PlaylistName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaPatrolPathPointProvider::OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCurrentPlaylistLoaded");

	Params::FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded Parms{};

	Parms.PlaylistName = PlaylistName;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaPointAroundPlayerProvider.DisablePointProvider
// (Native, Public, BlueprintCallable)

void AFortAthenaPointAroundPlayerProvider::DisablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DisablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaPointAroundPlayerProvider.EnablePointProvider
// (RequiredAPI, Native, Public, BlueprintCallable)

void AFortAthenaPointAroundPlayerProvider::EnablePointProvider()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnablePointProvider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LagerRuntime.FortAthenaPointAroundPlayerProvider.OnCurrentPlaylistLoaded
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             PlaylistName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaPointAroundPlayerProvider::OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnCurrentPlaylistLoaded");

	Params::FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded Parms{};

	Parms.PlaylistName = PlaylistName;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaPointAroundPlayerProvider.OnWorldFinishedInitialization
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTagContainer            ContextTags                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortAthenaPointAroundPlayerProvider::OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnWorldFinishedInitialization");

	Params::FortAthenaPointAroundPlayerProvider_OnWorldFinishedInitialization Parms{};

	Parms.ContextTags = std::move(ContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LagerRuntime.FortAthenaPointAroundPlayerProvider.SetForcedPawnToUse
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InForcedPawnToUse                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortAthenaPointAroundPlayerProvider::SetForcedPawnToUse(const class APawn* InForcedPawnToUse)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetForcedPawnToUse");

	Params::FortAthenaPointAroundPlayerProvider_SetForcedPawnToUse Parms{};

	Parms.InForcedPawnToUse = InForcedPawnToUse;

	UObject::ProcessEvent(Func, &Parms);
}

}

