#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortCosmeticVariantRow_Texture

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass FortCosmeticVariantRow_Texture.FortCosmeticVariantRow_Texture_C
// 0x0030 (0x0318 - 0x02E8)
class UFortCosmeticVariantRow_Texture_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCommonTextBlock*                       Text_VariantName;                                  // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, DuplicateTransient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UFortVariantTextureChannelVM*           FortVariantTextureChannelVM;                       // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, DuplicateTransient, RepSkip, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UCommonRichTextBlock*                   TextBlock_AllItemsArchived;                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTileView*                        TileView_VariantOptions;                           // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_AvailableItems;                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void BndEvt__FortCosmeticVariantRow_Texture_TileView_VariantOptions_K2Node_ComponentBoundEvent_1_SimpleListItemEventDynamic__DelegateSignature(class UObject* Item);
	void ExecuteUbergraph_FortCosmeticVariantRow_Texture(int32 EntryPoint);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void SetFortVariantTextureChannelVM(class UFortVariantTextureChannelVM* ViewModel);

	void GetDesiredFocusTarget(class UWidget** FocusTarget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FortCosmeticVariantRow_Texture_C">();
	}
	static class UFortCosmeticVariantRow_Texture_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCosmeticVariantRow_Texture_C>();
	}
};
static_assert(alignof(UFortCosmeticVariantRow_Texture_C) == 0x000008, "Wrong alignment on UFortCosmeticVariantRow_Texture_C");
static_assert(sizeof(UFortCosmeticVariantRow_Texture_C) == 0x000318, "Wrong size on UFortCosmeticVariantRow_Texture_C");
static_assert(offsetof(UFortCosmeticVariantRow_Texture_C, UberGraphFrame) == 0x0002E8, "Member 'UFortCosmeticVariantRow_Texture_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFortCosmeticVariantRow_Texture_C, Text_VariantName) == 0x0002F0, "Member 'UFortCosmeticVariantRow_Texture_C::Text_VariantName' has a wrong offset!");
static_assert(offsetof(UFortCosmeticVariantRow_Texture_C, FortVariantTextureChannelVM) == 0x0002F8, "Member 'UFortCosmeticVariantRow_Texture_C::FortVariantTextureChannelVM' has a wrong offset!");
static_assert(offsetof(UFortCosmeticVariantRow_Texture_C, TextBlock_AllItemsArchived) == 0x000300, "Member 'UFortCosmeticVariantRow_Texture_C::TextBlock_AllItemsArchived' has a wrong offset!");
static_assert(offsetof(UFortCosmeticVariantRow_Texture_C, TileView_VariantOptions) == 0x000308, "Member 'UFortCosmeticVariantRow_Texture_C::TileView_VariantOptions' has a wrong offset!");
static_assert(offsetof(UFortCosmeticVariantRow_Texture_C, WidgetSwitcher_AvailableItems) == 0x000310, "Member 'UFortCosmeticVariantRow_Texture_C::WidgetSwitcher_AvailableItems' has a wrong offset!");

}

