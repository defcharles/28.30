#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioGameplayBehavior

#include "Basic.hpp"


namespace SDK
{

// Enum AudioGameplayBehavior.EAudioGameplayBehaviorPlayState
// NumValues: 0x0003
enum class EAudioGameplayBehaviorPlayState : uint8
{
	Stopped                                  = 0,
	Playing                                  = 1,
	TickingWhileStopped                      = 2,
};

// ScriptStruct AudioGameplayBehavior.PlayingId
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FPlayingId final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayingId) == 0x000004, "Wrong alignment on FPlayingId");
static_assert(sizeof(FPlayingId) == 0x000004, "Wrong size on FPlayingId");

// ScriptStruct AudioGameplayBehavior.ActiveVoice
// 0x0018 (0x0018 - 0x0000)
struct FActiveVoice final
{
public:
	class USoundBase*                             sound;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        Component;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayingId                             ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveVoice) == 0x000008, "Wrong alignment on FActiveVoice");
static_assert(sizeof(FActiveVoice) == 0x000018, "Wrong size on FActiveVoice");
static_assert(offsetof(FActiveVoice, sound) == 0x000000, "Member 'FActiveVoice::sound' has a wrong offset!");
static_assert(offsetof(FActiveVoice, Component) == 0x000008, "Member 'FActiveVoice::Component' has a wrong offset!");
static_assert(offsetof(FActiveVoice, ID) == 0x000010, "Member 'FActiveVoice::ID' has a wrong offset!");

// ScriptStruct AudioGameplayBehavior.AudioGameplayBehaviorInstance
// 0x0010 (0x0010 - 0x0000)
struct FAudioGameplayBehaviorInstance final
{
public:
	TSubclassOf<class UAudioGameplayBehavior>     sound;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioGameplayBehavior*                 Instance;                                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioGameplayBehaviorInstance) == 0x000008, "Wrong alignment on FAudioGameplayBehaviorInstance");
static_assert(sizeof(FAudioGameplayBehaviorInstance) == 0x000010, "Wrong size on FAudioGameplayBehaviorInstance");
static_assert(offsetof(FAudioGameplayBehaviorInstance, sound) == 0x000000, "Member 'FAudioGameplayBehaviorInstance::sound' has a wrong offset!");
static_assert(offsetof(FAudioGameplayBehaviorInstance, Instance) == 0x000008, "Member 'FAudioGameplayBehaviorInstance::Instance' has a wrong offset!");

}

