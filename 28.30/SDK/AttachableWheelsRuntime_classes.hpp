#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AttachableWheelsRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AttachableWheelsRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AttachableWheelsRuntime.AttachableWheel
// 0x0098 (0x0328 - 0x0290)
class AAttachableWheel : public AActor
{
public:
	class UStaticMeshComponent*                   WheelMeshComponent;                                // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               WheelOrientation;                                  // 0x0298(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         WheelDistance;                                     // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AxleDamping;                                       // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsConstraintComponent*            AxleConstraint;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAttachableWheelAttachData             AttachData;                                        // 0x02C0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoCreateAttachableWheelsComponent;              // 0x0318(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableWheelWheelCollision;                        // 0x0319(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorRef;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool AttachInPlace(class UPrimitiveComponent* InComponent);
	bool AttachTo(class UPrimitiveComponent* InComponent, const struct FVector& WorldLocation, const struct FVector& AxleDirection);
	void Detach();
	bool DetachFrom(class UPrimitiveComponent* InComponent);
	class AActor* GetActorRef();
	void OnAttached(class UPrimitiveComponent* AttachedComponent);
	void OnDetached(class UPrimitiveComponent* DetachedComponent);
	void OnPhysicsStateChanged(class UPrimitiveComponent* PrimitiveComponent, EComponentPhysicsStateChange StateChange);
	void OnRep_AttachData(const struct FAttachableWheelAttachData& AttachDataPrev);
	void SetActorRef(class AActor* NewActorRef);
	void SetAxleDamping(float InWheelDamping);

	void DrawDebug() const;
	const struct FAttachableWheelAttachData GetAttachData() const;
	class UPrimitiveComponent* GetAttachedComponent() const;
	bool GetWorldSpaceAttachData(struct FAttachableWheelAttachData* OutAttachData, class UPrimitiveComponent* PrimitiveComponent, const class FName BodyName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttachableWheel">();
	}
	static class AAttachableWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAttachableWheel>();
	}
};
static_assert(alignof(AAttachableWheel) == 0x000008, "Wrong alignment on AAttachableWheel");
static_assert(sizeof(AAttachableWheel) == 0x000328, "Wrong size on AAttachableWheel");
static_assert(offsetof(AAttachableWheel, WheelMeshComponent) == 0x000290, "Member 'AAttachableWheel::WheelMeshComponent' has a wrong offset!");
static_assert(offsetof(AAttachableWheel, WheelOrientation) == 0x000298, "Member 'AAttachableWheel::WheelOrientation' has a wrong offset!");
static_assert(offsetof(AAttachableWheel, WheelDistance) == 0x0002B0, "Member 'AAttachableWheel::WheelDistance' has a wrong offset!");
static_assert(offsetof(AAttachableWheel, AxleDamping) == 0x0002B4, "Member 'AAttachableWheel::AxleDamping' has a wrong offset!");
static_assert(offsetof(AAttachableWheel, AxleConstraint) == 0x0002B8, "Member 'AAttachableWheel::AxleConstraint' has a wrong offset!");
static_assert(offsetof(AAttachableWheel, AttachData) == 0x0002C0, "Member 'AAttachableWheel::AttachData' has a wrong offset!");
static_assert(offsetof(AAttachableWheel, bAutoCreateAttachableWheelsComponent) == 0x000318, "Member 'AAttachableWheel::bAutoCreateAttachableWheelsComponent' has a wrong offset!");
static_assert(offsetof(AAttachableWheel, bEnableWheelWheelCollision) == 0x000319, "Member 'AAttachableWheel::bEnableWheelWheelCollision' has a wrong offset!");
static_assert(offsetof(AAttachableWheel, ActorRef) == 0x000320, "Member 'AAttachableWheel::ActorRef' has a wrong offset!");

// Class AttachableWheelsRuntime.AttachableWheelsComponent
// 0x0050 (0x00F0 - 0x00A0)
class UAttachableWheelsComponent final : public UActorComponent
{
public:
	TSet<class AAttachableWheel*>                 AttachedWheels;                                    // 0x00A0(0x0050)(NativeAccessSpecifierPrivate)

public:
	int32 DetachAllWheels();
	bool HandleWheelAttached_Internal(class AAttachableWheel* AttachedWheel);
	bool HandleWheelDetached_Internal(class AAttachableWheel* AttachedWheel);
	void OnWheelAttached(class AAttachableWheel* AttachedWheel);
	void OnWheelDetached(class AAttachableWheel* AttachedWheel);

	void DrawDebug() const;
	class AAttachableWheel* GetAttachedWheelClosestOnAxis(const struct FVector& Point, float* OutClosetDistanceToAxis, struct FVector* OutClosestPointOnAxis, struct FVector* OutClosestAxis) const;
	TArray<class AAttachableWheel*> GetAttachedWheels() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttachableWheelsComponent">();
	}
	static class UAttachableWheelsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAttachableWheelsComponent>();
	}
};
static_assert(alignof(UAttachableWheelsComponent) == 0x000008, "Wrong alignment on UAttachableWheelsComponent");
static_assert(sizeof(UAttachableWheelsComponent) == 0x0000F0, "Wrong size on UAttachableWheelsComponent");
static_assert(offsetof(UAttachableWheelsComponent, AttachedWheels) == 0x0000A0, "Member 'UAttachableWheelsComponent::AttachedWheels' has a wrong offset!");

}

