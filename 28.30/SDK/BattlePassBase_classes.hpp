#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassBase

#include "Basic.hpp"

#include "BlueprintContext_classes.hpp"
#include "UMG_classes.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "BattlePassBase_structs.hpp"
#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Class BattlePassBase.BattlePassSubPageInterface
// 0x0000 (0x0028 - 0x0028)
class IBattlePassSubPageInterface final : public IInterface
{
public:
	void OnEnterSubPage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassSubPageInterface">();
	}
	static class IBattlePassSubPageInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBattlePassSubPageInterface>();
	}
};
static_assert(alignof(IBattlePassSubPageInterface) == 0x000008, "Wrong alignment on IBattlePassSubPageInterface");
static_assert(sizeof(IBattlePassSubPageInterface) == 0x000028, "Wrong size on IBattlePassSubPageInterface");

// Class BattlePassBase.FortBattlePassCustomSkinPageTab
// 0x0228 (0x0628 - 0x0400)
class UFortBattlePassCustomSkinPageTab final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x1A0];                                    // 0x0400(0x01A0)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollBox*                             ScrollBox_Categories;                              // 0x05A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A8[0x10];                                     // 0x05A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassEnabledInputData*            EquipEnabledData;                                  // 0x05B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C0[0x8];                                      // 0x05C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonVisibilitySwitcher*              VisibilitySwitcher_Content;                        // 0x05C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FBattlePassCharaterRewardTabInfo> TabInfos;                                          // 0x05D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UDynamicEntryBox*                       ListView_PrimaryTabs;                              // 0x05E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FBattlePassCharaterRewardTabInfo> ActiveTabInfos;                                    // 0x05E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCommonActivatableWidget>   CustomizationRowClass;                             // 0x05F8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDataTableRowHandle                    NextTabInputAction;                                // 0x0600(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataTableRowHandle                    PreviousTabInputAction;                            // 0x0610(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_620[0x8];                                      // 0x0620(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableTabActions();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCustomSkinPageTab">();
	}
	static class UFortBattlePassCustomSkinPageTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCustomSkinPageTab>();
	}
};
static_assert(alignof(UFortBattlePassCustomSkinPageTab) == 0x000008, "Wrong alignment on UFortBattlePassCustomSkinPageTab");
static_assert(sizeof(UFortBattlePassCustomSkinPageTab) == 0x000628, "Wrong size on UFortBattlePassCustomSkinPageTab");
static_assert(offsetof(UFortBattlePassCustomSkinPageTab, ScrollBox_Categories) == 0x0005A0, "Member 'UFortBattlePassCustomSkinPageTab::ScrollBox_Categories' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageTab, EquipEnabledData) == 0x0005B8, "Member 'UFortBattlePassCustomSkinPageTab::EquipEnabledData' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageTab, VisibilitySwitcher_Content) == 0x0005C8, "Member 'UFortBattlePassCustomSkinPageTab::VisibilitySwitcher_Content' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageTab, TabInfos) == 0x0005D0, "Member 'UFortBattlePassCustomSkinPageTab::TabInfos' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageTab, ListView_PrimaryTabs) == 0x0005E0, "Member 'UFortBattlePassCustomSkinPageTab::ListView_PrimaryTabs' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageTab, ActiveTabInfos) == 0x0005E8, "Member 'UFortBattlePassCustomSkinPageTab::ActiveTabInfos' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageTab, CustomizationRowClass) == 0x0005F8, "Member 'UFortBattlePassCustomSkinPageTab::CustomizationRowClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageTab, NextTabInputAction) == 0x000600, "Member 'UFortBattlePassCustomSkinPageTab::NextTabInputAction' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageTab, PreviousTabInputAction) == 0x000610, "Member 'UFortBattlePassCustomSkinPageTab::PreviousTabInputAction' has a wrong offset!");

// Class BattlePassBase.FortBattlePassCustomSkinTab
// 0x0020 (0x14B0 - 0x1490)
class UFortBattlePassCustomSkinTab final : public UCommonButtonBase
{
public:
	class UCommonLazyImage*                       LazyImage_Icon;                                    // 0x1490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              ImageSize_Mobile;                                  // 0x1498(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14A8[0x8];                                     // 0x14A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_ShowBang(bool bShow);
	void SetIcon(TSoftObjectPtr<class UObject> LazyObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCustomSkinTab">();
	}
	static class UFortBattlePassCustomSkinTab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCustomSkinTab>();
	}
};
static_assert(alignof(UFortBattlePassCustomSkinTab) == 0x000010, "Wrong alignment on UFortBattlePassCustomSkinTab");
static_assert(sizeof(UFortBattlePassCustomSkinTab) == 0x0014B0, "Wrong size on UFortBattlePassCustomSkinTab");
static_assert(offsetof(UFortBattlePassCustomSkinTab, LazyImage_Icon) == 0x001490, "Member 'UFortBattlePassCustomSkinTab::LazyImage_Icon' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinTab, ImageSize_Mobile) == 0x001498, "Member 'UFortBattlePassCustomSkinTab::ImageSize_Mobile' has a wrong offset!");

// Class BattlePassBase.FortBattlePassSkinCategoriesTile
// 0x0008 (0x0408 - 0x0400)
class UFortBattlePassSkinCategoriesTile final : public UCommonActivatableWidget
{
public:
	class UDynamicEntryBox*                       FortDynamicEntryBox_Categories;                    // 0x0400(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassSkinCategoriesTile">();
	}
	static class UFortBattlePassSkinCategoriesTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassSkinCategoriesTile>();
	}
};
static_assert(alignof(UFortBattlePassSkinCategoriesTile) == 0x000008, "Wrong alignment on UFortBattlePassSkinCategoriesTile");
static_assert(sizeof(UFortBattlePassSkinCategoriesTile) == 0x000408, "Wrong size on UFortBattlePassSkinCategoriesTile");
static_assert(offsetof(UFortBattlePassSkinCategoriesTile, FortDynamicEntryBox_Categories) == 0x000400, "Member 'UFortBattlePassSkinCategoriesTile::FortDynamicEntryBox_Categories' has a wrong offset!");

// Class BattlePassBase.BattlePassLandingPageBase
// 0x0158 (0x0558 - 0x0400)
class UBattlePassLandingPageBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x120];                                    // 0x0400(0x0120)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassLandingPageButton*           LastHoveredPageButton;                             // 0x0520(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonGroupBase*                 LandingPageButtonGroupBase;                        // 0x0528(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_530[0x28];                                     // 0x0530(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassLandingPageBase">();
	}
	static class UBattlePassLandingPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassLandingPageBase>();
	}
};
static_assert(alignof(UBattlePassLandingPageBase) == 0x000008, "Wrong alignment on UBattlePassLandingPageBase");
static_assert(sizeof(UBattlePassLandingPageBase) == 0x000558, "Wrong size on UBattlePassLandingPageBase");
static_assert(offsetof(UBattlePassLandingPageBase, LastHoveredPageButton) == 0x000520, "Member 'UBattlePassLandingPageBase::LastHoveredPageButton' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageBase, LandingPageButtonGroupBase) == 0x000528, "Member 'UBattlePassLandingPageBase::LandingPageButtonGroupBase' has a wrong offset!");

// Class BattlePassBase.BattlePassLandingPageButton
// 0x0280 (0x1710 - 0x1490)
class UBattlePassLandingPageButton : public UCommonButtonBase
{
public:
	EBattlePassView                               SubPageType;                                       // 0x1490(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBattlePassFeatures                           FeatureType;                                       // 0x1491(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1492[0x6];                                     // 0x1492(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBattlePassLandingPageEntryPreviewInfo PreviewInfo;                                       // 0x1498(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bNeedsBattlePass;                                  // 0x1528(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1529[0x7];                                     // 0x1529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChallengeBundleScheduleDefinition* DelayQuestSchedule;                                // 0x1530(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DelayDaysSinceSeasonStart;                         // 0x1538(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_153C[0x4];                                     // 0x153C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    RequiredItem;                                      // 0x1540(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortBangWrapper_NUI*                   BangWrapper;                                       // 0x1548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsesTelemetry;                                    // 0x1550(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1551[0x3];                                     // 0x1551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Telemetry_Size;                                    // 0x1554(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              Telemetry_Position;                                // 0x155C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1564[0x4];                                     // 0x1564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBattlePassLandingPageButtonTexts      DefaultTexts;                                      // 0x1568(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FBattlePassLandingPageButtonTexts      DelayedTexts;                                      // 0x15B0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FBattlePassLandingPageButtonTexts      SubscribedTexts;                                   // 0x15F8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FBattlePassLandingPageButtonDisplayBehaviorData DisplayBehaviorData;                               // 0x1640(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1658[0xB8];                                    // 0x1658(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDisplayDetailsUpdated(const struct FBattlePassLandingPageButtonDisplayDetails& NewDisplayDetails);
	void OnSetTileImageMaterial(class UMaterialInstance* Material);
	void OnShowDisplayDetails();
	void OnSubscriptionOwnershipUpdated(const bool bOwnsSubsciption);
	void OnSubscriptionTextureLoaded(class UTexture2D* Texture);

	const struct FBattlePassLandingPageButtonDisplayDetails GetBattlePassDisplayDetails() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassLandingPageButton">();
	}
	static class UBattlePassLandingPageButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassLandingPageButton>();
	}
};
static_assert(alignof(UBattlePassLandingPageButton) == 0x000010, "Wrong alignment on UBattlePassLandingPageButton");
static_assert(sizeof(UBattlePassLandingPageButton) == 0x001710, "Wrong size on UBattlePassLandingPageButton");
static_assert(offsetof(UBattlePassLandingPageButton, SubPageType) == 0x001490, "Member 'UBattlePassLandingPageButton::SubPageType' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, FeatureType) == 0x001491, "Member 'UBattlePassLandingPageButton::FeatureType' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, PreviewInfo) == 0x001498, "Member 'UBattlePassLandingPageButton::PreviewInfo' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, bNeedsBattlePass) == 0x001528, "Member 'UBattlePassLandingPageButton::bNeedsBattlePass' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, DelayQuestSchedule) == 0x001530, "Member 'UBattlePassLandingPageButton::DelayQuestSchedule' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, DelayDaysSinceSeasonStart) == 0x001538, "Member 'UBattlePassLandingPageButton::DelayDaysSinceSeasonStart' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, RequiredItem) == 0x001540, "Member 'UBattlePassLandingPageButton::RequiredItem' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, BangWrapper) == 0x001548, "Member 'UBattlePassLandingPageButton::BangWrapper' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, bUsesTelemetry) == 0x001550, "Member 'UBattlePassLandingPageButton::bUsesTelemetry' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, Telemetry_Size) == 0x001554, "Member 'UBattlePassLandingPageButton::Telemetry_Size' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, Telemetry_Position) == 0x00155C, "Member 'UBattlePassLandingPageButton::Telemetry_Position' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, DefaultTexts) == 0x001568, "Member 'UBattlePassLandingPageButton::DefaultTexts' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, DelayedTexts) == 0x0015B0, "Member 'UBattlePassLandingPageButton::DelayedTexts' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, SubscribedTexts) == 0x0015F8, "Member 'UBattlePassLandingPageButton::SubscribedTexts' has a wrong offset!");
static_assert(offsetof(UBattlePassLandingPageButton, DisplayBehaviorData) == 0x001640, "Member 'UBattlePassLandingPageButton::DisplayBehaviorData' has a wrong offset!");

// Class BattlePassBase.BattlePassRewardPageBase
// 0x0118 (0x0518 - 0x0400)
class UBattlePassRewardPageBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x118];                                    // 0x0400(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassRewardPageBase">();
	}
	static class UBattlePassRewardPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassRewardPageBase>();
	}
};
static_assert(alignof(UBattlePassRewardPageBase) == 0x000008, "Wrong alignment on UBattlePassRewardPageBase");
static_assert(sizeof(UBattlePassRewardPageBase) == 0x000518, "Wrong size on UBattlePassRewardPageBase");

// Class BattlePassBase.BattlePassUIGameFeatureAction
// 0x0060 (0x0088 - 0x0028)
class UBattlePassUIGameFeatureAction final : public UFortUIGameFeatureAction
{
public:
	TSoftClassPtr<class UClass>                   BattlePassScreenClass;                             // 0x0028(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   BattlePassResourceWidgetClass;                     // 0x0048(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   BattlePassInfoModalClass;                          // 0x0068(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePassUIGameFeatureAction">();
	}
	static class UBattlePassUIGameFeatureAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassUIGameFeatureAction>();
	}
};
static_assert(alignof(UBattlePassUIGameFeatureAction) == 0x000008, "Wrong alignment on UBattlePassUIGameFeatureAction");
static_assert(sizeof(UBattlePassUIGameFeatureAction) == 0x000088, "Wrong size on UBattlePassUIGameFeatureAction");
static_assert(offsetof(UBattlePassUIGameFeatureAction, BattlePassScreenClass) == 0x000028, "Member 'UBattlePassUIGameFeatureAction::BattlePassScreenClass' has a wrong offset!");
static_assert(offsetof(UBattlePassUIGameFeatureAction, BattlePassResourceWidgetClass) == 0x000048, "Member 'UBattlePassUIGameFeatureAction::BattlePassResourceWidgetClass' has a wrong offset!");
static_assert(offsetof(UBattlePassUIGameFeatureAction, BattlePassInfoModalClass) == 0x000068, "Member 'UBattlePassUIGameFeatureAction::BattlePassInfoModalClass' has a wrong offset!");

// Class BattlePassBase.FortBattlePassCustomSkinCategoryTile
// 0x00B8 (0x0378 - 0x02C0)
class UFortBattlePassCustomSkinCategoryTile : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x20];                                     // 0x02C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UProgressBar*                           ProgressBar;                                       // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortDynamicEntryBox*                   FortDynamicEntryBox_Items;                         // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URichTextBlock*                         Text_CategoryTitle;                                // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortBattlePassTile*                    PreviewedTile;                                     // 0x02F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OwnedRewards;                                      // 0x0300(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_304[0x74];                                     // 0x0304(0x0074)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FocusTile(const int32 Index_0);
	void OnLockedProgressUpdated(const int32 CurrentlyOwnedBeforeCategory, const int32 TotalRewardsBeforeCategory, const float LockedProgress);
	void OnLockedStateChanged(const bool bCategoryLocked);
	void OnOwnedTilesUpdated(const int32 CurrentlyOwnedRewards, const int32 TotalRewards, const float CategoryProgress);
	void SetPreviewedTile(const int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCustomSkinCategoryTile">();
	}
	static class UFortBattlePassCustomSkinCategoryTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCustomSkinCategoryTile>();
	}
};
static_assert(alignof(UFortBattlePassCustomSkinCategoryTile) == 0x000008, "Wrong alignment on UFortBattlePassCustomSkinCategoryTile");
static_assert(sizeof(UFortBattlePassCustomSkinCategoryTile) == 0x000378, "Wrong size on UFortBattlePassCustomSkinCategoryTile");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, ProgressBar) == 0x0002E0, "Member 'UFortBattlePassCustomSkinCategoryTile::ProgressBar' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, FortDynamicEntryBox_Items) == 0x0002E8, "Member 'UFortBattlePassCustomSkinCategoryTile::FortDynamicEntryBox_Items' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, Text_CategoryTitle) == 0x0002F0, "Member 'UFortBattlePassCustomSkinCategoryTile::Text_CategoryTitle' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, PreviewedTile) == 0x0002F8, "Member 'UFortBattlePassCustomSkinCategoryTile::PreviewedTile' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinCategoryTile, OwnedRewards) == 0x000300, "Member 'UFortBattlePassCustomSkinCategoryTile::OwnedRewards' has a wrong offset!");

// Class BattlePassBase.FortBattlePassCustomSkinPageBase
// 0x01C8 (0x05C8 - 0x0400)
class UFortBattlePassCustomSkinPageBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x1A0];                                    // 0x0400(0x01A0)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollBox*                             ScrollBox_Categories;                              // 0x05A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortDynamicEntryBox*                   FortDynamicEntryBox_Categories;                    // 0x05A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B0[0x8];                                      // 0x05B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassEnabledInputData*            EquipEnabledData;                                  // 0x05B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C0[0x8];                                      // 0x05C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCustomSkinPageBase">();
	}
	static class UFortBattlePassCustomSkinPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCustomSkinPageBase>();
	}
};
static_assert(alignof(UFortBattlePassCustomSkinPageBase) == 0x000008, "Wrong alignment on UFortBattlePassCustomSkinPageBase");
static_assert(sizeof(UFortBattlePassCustomSkinPageBase) == 0x0005C8, "Wrong size on UFortBattlePassCustomSkinPageBase");
static_assert(offsetof(UFortBattlePassCustomSkinPageBase, ScrollBox_Categories) == 0x0005A0, "Member 'UFortBattlePassCustomSkinPageBase::ScrollBox_Categories' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageBase, FortDynamicEntryBox_Categories) == 0x0005A8, "Member 'UFortBattlePassCustomSkinPageBase::FortDynamicEntryBox_Categories' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCustomSkinPageBase, EquipEnabledData) == 0x0005B8, "Member 'UFortBattlePassCustomSkinPageBase::EquipEnabledData' has a wrong offset!");

// Class BattlePassBase.FortBattlePassBulkBuyPageBase
// 0x01A0 (0x05A0 - 0x0400)
class UFortBattlePassBulkBuyPageBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x118];                                    // 0x0400(0x0118)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_Addition;                                   // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Subtraction;                                // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicEntryBox*                       DynamicEntryBox_TilesEntries;                      // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonVisibilitySwitcher*              Switcher_BottomButtons;                            // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCTAButton*                         Button_BuyLevels;                                  // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCTAButton*                         Button_ClaimReward;                                // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                Widget_LevelUpMessagePremium;                      // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaSeasonItemData_BattleStar*       SeasonData_BattleStar;                             // 0x0550(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_558[0x18];                                     // 0x0558(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaSeasonItemDefinition*            SeasonItemDefinition;                              // 0x0570(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBattlePassTile*                    FocusedReward;                                     // 0x0578(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_580[0x18];                                     // 0x0580(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollBox*                             ScrollBox_Pages;                                   // 0x0598(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleUserScrolled(float ScrollAmount);
	void OnCostChanged(const int32 Cost);
	void OnPageRangeChanged(const int32 FromPage, const int32 ToPage);
	void OnRewardCountChanged(const int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassBulkBuyPageBase">();
	}
	static class UFortBattlePassBulkBuyPageBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassBulkBuyPageBase>();
	}
};
static_assert(alignof(UFortBattlePassBulkBuyPageBase) == 0x000008, "Wrong alignment on UFortBattlePassBulkBuyPageBase");
static_assert(sizeof(UFortBattlePassBulkBuyPageBase) == 0x0005A0, "Wrong size on UFortBattlePassBulkBuyPageBase");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Button_Addition) == 0x000518, "Member 'UFortBattlePassBulkBuyPageBase::Button_Addition' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Button_Subtraction) == 0x000520, "Member 'UFortBattlePassBulkBuyPageBase::Button_Subtraction' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, DynamicEntryBox_TilesEntries) == 0x000528, "Member 'UFortBattlePassBulkBuyPageBase::DynamicEntryBox_TilesEntries' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Switcher_BottomButtons) == 0x000530, "Member 'UFortBattlePassBulkBuyPageBase::Switcher_BottomButtons' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Button_BuyLevels) == 0x000538, "Member 'UFortBattlePassBulkBuyPageBase::Button_BuyLevels' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Button_ClaimReward) == 0x000540, "Member 'UFortBattlePassBulkBuyPageBase::Button_ClaimReward' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, Widget_LevelUpMessagePremium) == 0x000548, "Member 'UFortBattlePassBulkBuyPageBase::Widget_LevelUpMessagePremium' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, SeasonData_BattleStar) == 0x000550, "Member 'UFortBattlePassBulkBuyPageBase::SeasonData_BattleStar' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, SeasonItemDefinition) == 0x000570, "Member 'UFortBattlePassBulkBuyPageBase::SeasonItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, FocusedReward) == 0x000578, "Member 'UFortBattlePassBulkBuyPageBase::FocusedReward' has a wrong offset!");
static_assert(offsetof(UFortBattlePassBulkBuyPageBase, ScrollBox_Pages) == 0x000598, "Member 'UFortBattlePassBulkBuyPageBase::ScrollBox_Pages' has a wrong offset!");

// Class BattlePassBase.FortBattlePassCheckBoxButton
// 0x0010 (0x14A0 - 0x1490)
class UFortBattlePassCheckBoxButton : public UCommonButtonBase
{
public:
	uint8                                         Pad_1490[0x10];                                    // 0x1490(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnStateChanged(const bool bNewIsChecked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCheckBoxButton">();
	}
	static class UFortBattlePassCheckBoxButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCheckBoxButton>();
	}
};
static_assert(alignof(UFortBattlePassCheckBoxButton) == 0x000010, "Wrong alignment on UFortBattlePassCheckBoxButton");
static_assert(sizeof(UFortBattlePassCheckBoxButton) == 0x0014A0, "Wrong size on UFortBattlePassCheckBoxButton");

// Class BattlePassBase.FortBattlePassContext
// 0x0078 (0x00A8 - 0x0030)
class UFortBattlePassContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortPersistentResourceItemDefinition*> CustomizationPageSeasonalResources;                // 0x0038(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UFortPersistentResourceItemDefinition*> AllSeasonalResources;                              // 0x0048(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<ERewardPageType, struct FSeasonalResourceList> RewardPageSeasonalResources;                       // 0x0058(0x0050)(NativeAccessSpecifierPrivate)

public:
	bool CanPurchaseBattlePassLevel() const;
	class FText GetCurrentChapterAsText(const bool bFullText) const;
	class FText GetCurrentSeasonNumberAsText(const bool bFullText) const;
	class FText GetDefaultDisclaimerText() const;
	class FText GetLevelPurchaseDisclaimerText() const;
	TArray<struct FSeasonCurrencyMcpData> GetSeasonalCurrencies() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassContext">();
	}
	static class UFortBattlePassContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassContext>();
	}
};
static_assert(alignof(UFortBattlePassContext) == 0x000008, "Wrong alignment on UFortBattlePassContext");
static_assert(sizeof(UFortBattlePassContext) == 0x0000A8, "Wrong size on UFortBattlePassContext");
static_assert(offsetof(UFortBattlePassContext, CustomizationPageSeasonalResources) == 0x000038, "Member 'UFortBattlePassContext::CustomizationPageSeasonalResources' has a wrong offset!");
static_assert(offsetof(UFortBattlePassContext, AllSeasonalResources) == 0x000048, "Member 'UFortBattlePassContext::AllSeasonalResources' has a wrong offset!");
static_assert(offsetof(UFortBattlePassContext, RewardPageSeasonalResources) == 0x000058, "Member 'UFortBattlePassContext::RewardPageSeasonalResources' has a wrong offset!");

// Class BattlePassBase.FortBattlePassResourcesWidgetBase
// 0x0010 (0x02F8 - 0x02E8)
class UFortBattlePassResourcesWidgetBase : public UFortGlobalSeasonResourceWidget
{
public:
	TSubclassOf<class UFortBattlePassResourceCounter> ResourceCounterClass;                              // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicEntryBox*                       EntryBox_ResourceCounters;                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnShowMoreInfo(bool bShouldShowMoreInfo);
	void ShowResourcesInfoModal();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassResourcesWidgetBase">();
	}
	static class UFortBattlePassResourcesWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassResourcesWidgetBase>();
	}
};
static_assert(alignof(UFortBattlePassResourcesWidgetBase) == 0x000008, "Wrong alignment on UFortBattlePassResourcesWidgetBase");
static_assert(sizeof(UFortBattlePassResourcesWidgetBase) == 0x0002F8, "Wrong size on UFortBattlePassResourcesWidgetBase");
static_assert(offsetof(UFortBattlePassResourcesWidgetBase, ResourceCounterClass) == 0x0002E8, "Member 'UFortBattlePassResourcesWidgetBase::ResourceCounterClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassResourcesWidgetBase, EntryBox_ResourceCounters) == 0x0002F0, "Member 'UFortBattlePassResourcesWidgetBase::EntryBox_ResourceCounters' has a wrong offset!");

// Class BattlePassBase.FortBattlePassCurrencyPanel
// 0x0040 (0x0338 - 0x02F8)
class UFortBattlePassCurrencyPanel final : public UFortBattlePassResourcesWidgetBase
{
public:
	class UHorizontalBox*                         HBox_BattleStarContainer;                          // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_BattleStar;                                   // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHorizontalBox*                         HBox_CustomSkinContainer;                          // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_CustomSkin;                                   // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_318[0x20];                                     // 0x0318(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassCurrencyPanel">();
	}
	static class UFortBattlePassCurrencyPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassCurrencyPanel>();
	}
};
static_assert(alignof(UFortBattlePassCurrencyPanel) == 0x000008, "Wrong alignment on UFortBattlePassCurrencyPanel");
static_assert(sizeof(UFortBattlePassCurrencyPanel) == 0x000338, "Wrong size on UFortBattlePassCurrencyPanel");
static_assert(offsetof(UFortBattlePassCurrencyPanel, HBox_BattleStarContainer) == 0x0002F8, "Member 'UFortBattlePassCurrencyPanel::HBox_BattleStarContainer' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCurrencyPanel, Text_BattleStar) == 0x000300, "Member 'UFortBattlePassCurrencyPanel::Text_BattleStar' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCurrencyPanel, HBox_CustomSkinContainer) == 0x000308, "Member 'UFortBattlePassCurrencyPanel::HBox_CustomSkinContainer' has a wrong offset!");
static_assert(offsetof(UFortBattlePassCurrencyPanel, Text_CustomSkin) == 0x000310, "Member 'UFortBattlePassCurrencyPanel::Text_CustomSkin' has a wrong offset!");

// Class BattlePassBase.FortBattlePassDynamicIcon
// 0x0048 (0x0308 - 0x02C0)
class UFortBattlePassDynamicIcon : public UUserWidget
{
public:
	TSoftObjectPtr<class UObject>                 BattlePassDefaultIcon;                             // 0x02C0(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UObject>                 BattlePassOwnedIcon;                               // 0x02E0(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLazyImage*                         LazyImage_BattlePassIcon;                          // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBattlePassInfoUpdated(const bool bOwnsBattlePass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassDynamicIcon">();
	}
	static class UFortBattlePassDynamicIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassDynamicIcon>();
	}
};
static_assert(alignof(UFortBattlePassDynamicIcon) == 0x000008, "Wrong alignment on UFortBattlePassDynamicIcon");
static_assert(sizeof(UFortBattlePassDynamicIcon) == 0x000308, "Wrong size on UFortBattlePassDynamicIcon");
static_assert(offsetof(UFortBattlePassDynamicIcon, BattlePassDefaultIcon) == 0x0002C0, "Member 'UFortBattlePassDynamicIcon::BattlePassDefaultIcon' has a wrong offset!");
static_assert(offsetof(UFortBattlePassDynamicIcon, BattlePassOwnedIcon) == 0x0002E0, "Member 'UFortBattlePassDynamicIcon::BattlePassOwnedIcon' has a wrong offset!");
static_assert(offsetof(UFortBattlePassDynamicIcon, LazyImage_BattlePassIcon) == 0x000300, "Member 'UFortBattlePassDynamicIcon::LazyImage_BattlePassIcon' has a wrong offset!");

// Class BattlePassBase.FortBattlePassLevelCount
// 0x0010 (0x02D0 - 0x02C0)
class UFortBattlePassLevelCount : public UUserWidget
{
public:
	class UCommonTextBlock*                       Text_LevelCount;                                   // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassLevelCount">();
	}
	static class UFortBattlePassLevelCount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassLevelCount>();
	}
};
static_assert(alignof(UFortBattlePassLevelCount) == 0x000008, "Wrong alignment on UFortBattlePassLevelCount");
static_assert(sizeof(UFortBattlePassLevelCount) == 0x0002D0, "Wrong size on UFortBattlePassLevelCount");
static_assert(offsetof(UFortBattlePassLevelCount, Text_LevelCount) == 0x0002C0, "Member 'UFortBattlePassLevelCount::Text_LevelCount' has a wrong offset!");

// Class BattlePassBase.FortBattlePassPrerequisiteHeader
// 0x0008 (0x02C8 - 0x02C0)
class UFortBattlePassPrerequisiteHeader : public UUserWidget
{
public:
	class UTextBlock*                             Text_Prerequisite;                                 // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassPrerequisiteHeader">();
	}
	static class UFortBattlePassPrerequisiteHeader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassPrerequisiteHeader>();
	}
};
static_assert(alignof(UFortBattlePassPrerequisiteHeader) == 0x000008, "Wrong alignment on UFortBattlePassPrerequisiteHeader");
static_assert(sizeof(UFortBattlePassPrerequisiteHeader) == 0x0002C8, "Wrong size on UFortBattlePassPrerequisiteHeader");
static_assert(offsetof(UFortBattlePassPrerequisiteHeader, Text_Prerequisite) == 0x0002C0, "Member 'UFortBattlePassPrerequisiteHeader::Text_Prerequisite' has a wrong offset!");

// Class BattlePassBase.FortBattlePassPurchaseResourcesWidget
// 0x00C0 (0x04C0 - 0x0400)
class UFortBattlePassPurchaseResourcesWidget : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x8];                                      // 0x0400(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_Addition;                                   // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_BatchAddition;                              // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Subtraction;                                // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_BatchSubtraction;                           // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonVisibilitySwitcher*              Switcher_PurchaseButtons;                          // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHoldableButton*                    Button_Purchase;                                   // 0x0430(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_GetVBucks;                                  // 0x0438(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_ReloadMtx;                                  // 0x0440(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x0448(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortBattlePassCheckBoxButton*          CheckBox_Bundle;                                   // 0x0450(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseTouch;                                 // 0x0458(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentLevel;                                      // 0x0460(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOfferActive;                                    // 0x0464(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_465[0x3];                                      // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentVBucks;                                     // 0x0468(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentBattleStars;                                // 0x046C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BatchNum;                                          // 0x0470(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOfferUnavailable;                                 // 0x0474(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_475[0x3];                                      // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBundleLevel;                                    // 0x0478(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxLevel;                                          // 0x047C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxLevelPurchases;                                 // 0x0480(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BundleAmount;                                      // 0x0484(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemDefinition*                    LevelPreviewItem;                                  // 0x0488(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAthenaSeasonItemData_BattleStar*       BattleStarData;                                    // 0x0490(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_498[0x28];                                     // 0x0498(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePurchaseComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const class FString& OfferId);
	void HandlePurchaseMultiComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const TArray<class FString>& OfferIdList);
	bool IsReloadMtxEnabled();
	void OnAmountChangeButtonClicked();
	void OnOfferUnavailable();
	void OnPurchaseAmountChanged(const int32 NewAmount, const int32 LevelsLeft);
	void OnTotalPriceChanged(const int32 NewPrice);
	void OnUpdatePageUnlockText(const class FText& PageUnlockText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassPurchaseResourcesWidget">();
	}
	static class UFortBattlePassPurchaseResourcesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassPurchaseResourcesWidget>();
	}
};
static_assert(alignof(UFortBattlePassPurchaseResourcesWidget) == 0x000008, "Wrong alignment on UFortBattlePassPurchaseResourcesWidget");
static_assert(sizeof(UFortBattlePassPurchaseResourcesWidget) == 0x0004C0, "Wrong size on UFortBattlePassPurchaseResourcesWidget");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_Addition) == 0x000408, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_Addition' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_BatchAddition) == 0x000410, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_BatchAddition' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_Subtraction) == 0x000418, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_Subtraction' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_BatchSubtraction) == 0x000420, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_BatchSubtraction' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Switcher_PurchaseButtons) == 0x000428, "Member 'UFortBattlePassPurchaseResourcesWidget::Switcher_PurchaseButtons' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_Purchase) == 0x000430, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_Purchase' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_GetVBucks) == 0x000438, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_GetVBucks' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_ReloadMtx) == 0x000440, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_ReloadMtx' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_Back) == 0x000448, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, CheckBox_Bundle) == 0x000450, "Member 'UFortBattlePassPurchaseResourcesWidget::CheckBox_Bundle' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, Button_CloseTouch) == 0x000458, "Member 'UFortBattlePassPurchaseResourcesWidget::Button_CloseTouch' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, CurrentLevel) == 0x000460, "Member 'UFortBattlePassPurchaseResourcesWidget::CurrentLevel' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, bIsOfferActive) == 0x000464, "Member 'UFortBattlePassPurchaseResourcesWidget::bIsOfferActive' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, CurrentVBucks) == 0x000468, "Member 'UFortBattlePassPurchaseResourcesWidget::CurrentVBucks' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, CurrentBattleStars) == 0x00046C, "Member 'UFortBattlePassPurchaseResourcesWidget::CurrentBattleStars' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, BatchNum) == 0x000470, "Member 'UFortBattlePassPurchaseResourcesWidget::BatchNum' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, bOfferUnavailable) == 0x000474, "Member 'UFortBattlePassPurchaseResourcesWidget::bOfferUnavailable' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, MaxBundleLevel) == 0x000478, "Member 'UFortBattlePassPurchaseResourcesWidget::MaxBundleLevel' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, MaxLevel) == 0x00047C, "Member 'UFortBattlePassPurchaseResourcesWidget::MaxLevel' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, MaxLevelPurchases) == 0x000480, "Member 'UFortBattlePassPurchaseResourcesWidget::MaxLevelPurchases' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, BundleAmount) == 0x000484, "Member 'UFortBattlePassPurchaseResourcesWidget::BundleAmount' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, LevelPreviewItem) == 0x000488, "Member 'UFortBattlePassPurchaseResourcesWidget::LevelPreviewItem' has a wrong offset!");
static_assert(offsetof(UFortBattlePassPurchaseResourcesWidget, BattleStarData) == 0x000490, "Member 'UFortBattlePassPurchaseResourcesWidget::BattleStarData' has a wrong offset!");

// Class BattlePassBase.FortBattlePassResourceCounter
// 0x0020 (0x0308 - 0x02E8)
class UFortBattlePassResourceCounter : public UCommonUserWidget
{
public:
	class UCommonTextBlock*                       Text_ResourceName;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortLazyImage*                         LazyImage_ResourceIcon;                            // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_ResourceCount;                                // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortPersistentResourceItemDefinition*  CurrentResource;                                   // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassResourceCounter">();
	}
	static class UFortBattlePassResourceCounter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassResourceCounter>();
	}
};
static_assert(alignof(UFortBattlePassResourceCounter) == 0x000008, "Wrong alignment on UFortBattlePassResourceCounter");
static_assert(sizeof(UFortBattlePassResourceCounter) == 0x000308, "Wrong size on UFortBattlePassResourceCounter");
static_assert(offsetof(UFortBattlePassResourceCounter, Text_ResourceName) == 0x0002E8, "Member 'UFortBattlePassResourceCounter::Text_ResourceName' has a wrong offset!");
static_assert(offsetof(UFortBattlePassResourceCounter, LazyImage_ResourceIcon) == 0x0002F0, "Member 'UFortBattlePassResourceCounter::LazyImage_ResourceIcon' has a wrong offset!");
static_assert(offsetof(UFortBattlePassResourceCounter, Text_ResourceCount) == 0x0002F8, "Member 'UFortBattlePassResourceCounter::Text_ResourceCount' has a wrong offset!");
static_assert(offsetof(UFortBattlePassResourceCounter, CurrentResource) == 0x000300, "Member 'UFortBattlePassResourceCounter::CurrentResource' has a wrong offset!");

// Class BattlePassBase.FortBattlePassRewardGrid
// 0x00D0 (0x04D0 - 0x0400)
class UFortBattlePassRewardGrid final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x68];                                     // 0x0400(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortBattlePassTileBase>    GridTileClass;                                     // 0x0468(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortBattlePassTileBase>    GridEmptyTileClass;                                // 0x0470(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              GridCellPadding;                                   // 0x0478(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBattlePassRewardGridHeader*        PageHeader;                                        // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGridPanel*                             GridPanel_Rewards;                                 // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBattlePassTileBase*                DefaultFocusTile;                                  // 0x0498(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UCommonButtonBase>       LastFocusedTile;                                   // 0x04A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x28];                                     // 0x04A8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPageSelected();
	void OnPageUnselected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassRewardGrid">();
	}
	static class UFortBattlePassRewardGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassRewardGrid>();
	}
};
static_assert(alignof(UFortBattlePassRewardGrid) == 0x000008, "Wrong alignment on UFortBattlePassRewardGrid");
static_assert(sizeof(UFortBattlePassRewardGrid) == 0x0004D0, "Wrong size on UFortBattlePassRewardGrid");
static_assert(offsetof(UFortBattlePassRewardGrid, GridTileClass) == 0x000468, "Member 'UFortBattlePassRewardGrid::GridTileClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, GridEmptyTileClass) == 0x000470, "Member 'UFortBattlePassRewardGrid::GridEmptyTileClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, GridCellPadding) == 0x000478, "Member 'UFortBattlePassRewardGrid::GridCellPadding' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, PageHeader) == 0x000488, "Member 'UFortBattlePassRewardGrid::PageHeader' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, GridPanel_Rewards) == 0x000490, "Member 'UFortBattlePassRewardGrid::GridPanel_Rewards' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, DefaultFocusTile) == 0x000498, "Member 'UFortBattlePassRewardGrid::DefaultFocusTile' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardGrid, LastFocusedTile) == 0x0004A0, "Member 'UFortBattlePassRewardGrid::LastFocusedTile' has a wrong offset!");

// Class BattlePassBase.FortBattlePassRewardGridHeader
// 0x0008 (0x02C8 - 0x02C0)
class UFortBattlePassRewardGridHeader final : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBattlePassLevelSet(const int32 BattlePassLevel);
	void OnPageLocked(const int32 RequiredLevel, const int32 RequiredRewards, const bool IsTimeLocked, const struct FTimespan& TimeRemaining);
	void OnPageNumberSet(const int32 InPageNumber);
	void OnPageUnlocked(const int32 PurchasedRewards, const int32 TotalRewards);
	void OnSetPageCustomName(const class FText& CustomName);
	void OnSetPageType(const ERewardPageType PageType);

	int32 GetPageNumber() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassRewardGridHeader">();
	}
	static class UFortBattlePassRewardGridHeader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassRewardGridHeader>();
	}
};
static_assert(alignof(UFortBattlePassRewardGridHeader) == 0x000008, "Wrong alignment on UFortBattlePassRewardGridHeader");
static_assert(sizeof(UFortBattlePassRewardGridHeader) == 0x0002C8, "Wrong size on UFortBattlePassRewardGridHeader");

// Class BattlePassBase.FortBattlePassRewardTrack
// 0x00A0 (0x04A0 - 0x0400)
class UFortBattlePassRewardTrack : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x50];                                     // 0x0400(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortBattlePassTileBase>    RewardTileClass;                                   // 0x0450(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortBattlePassTileBase>    RewardEmptyTileClass;                              // 0x0458(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortBattlePassPrerequisiteHeader> PrerequisiteHeaderClass;                           // 0x0460(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              GridCellPadding;                                   // 0x0468(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGridPanel*                             GridPanel_Rewards;                                 // 0x0478(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBattlePassTileBase*                DefaultFocusTile;                                  // 0x0480(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UCommonButtonBase>       LastFocusedTile;                                   // 0x0488(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_490[0x10];                                     // 0x0490(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPageSelected();
	void OnPageUnselected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassRewardTrack">();
	}
	static class UFortBattlePassRewardTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassRewardTrack>();
	}
};
static_assert(alignof(UFortBattlePassRewardTrack) == 0x000008, "Wrong alignment on UFortBattlePassRewardTrack");
static_assert(sizeof(UFortBattlePassRewardTrack) == 0x0004A0, "Wrong size on UFortBattlePassRewardTrack");
static_assert(offsetof(UFortBattlePassRewardTrack, RewardTileClass) == 0x000450, "Member 'UFortBattlePassRewardTrack::RewardTileClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardTrack, RewardEmptyTileClass) == 0x000458, "Member 'UFortBattlePassRewardTrack::RewardEmptyTileClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardTrack, PrerequisiteHeaderClass) == 0x000460, "Member 'UFortBattlePassRewardTrack::PrerequisiteHeaderClass' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardTrack, GridCellPadding) == 0x000468, "Member 'UFortBattlePassRewardTrack::GridCellPadding' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardTrack, GridPanel_Rewards) == 0x000478, "Member 'UFortBattlePassRewardTrack::GridPanel_Rewards' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardTrack, DefaultFocusTile) == 0x000480, "Member 'UFortBattlePassRewardTrack::DefaultFocusTile' has a wrong offset!");
static_assert(offsetof(UFortBattlePassRewardTrack, LastFocusedTile) == 0x000488, "Member 'UFortBattlePassRewardTrack::LastFocusedTile' has a wrong offset!");

// Class BattlePassBase.FortBattlePassTileBase
// 0x00C0 (0x15F0 - 0x1530)
class UFortBattlePassTileBase : public UFortHoldableButton
{
public:
	uint8                                         Pad_1528[0x8];                                     // 0x1528(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ERewardPageType                               RewardPageType;                                    // 0x1530(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1531[0x7];                                     // 0x1531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USizeBox*                               SizeBox_Content;                                   // 0x1538(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FLinearColor>        TileColors;                                        // 0x1540(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	struct FLinearColor                           OverlayDimColor;                                   // 0x1590(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              TileDesiredCellSpan;                               // 0x15A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UnitHeight;                                        // 0x15B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         UnitWidth;                                         // 0x15B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15B8[0x38];                                    // 0x15B8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPeeked();
	void OnRevealed();
	void OnSetRequiresBattlePass(const bool bRequiresBP);
	void OnSetTileColors();
	void OnSizeChanged(const struct FVector2D& NewSize);
	void OnStateChanged(const EBattlePassTileAvailabilityStates NewState);
	void SetSize(const EPageItemTileSize TileSize, const struct FVector2D& CellSpacing);
	void SetState(const EBattlePassTileAvailabilityStates NewState);

	bool AreAnyGrantedItemsEquipped() const;
	const EBattlePassTileAvailabilityStates GetState() const;
	bool IsAvailable() const;
	bool IsLocked() const;
	bool IsOwned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassTileBase">();
	}
	static class UFortBattlePassTileBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassTileBase>();
	}
};
static_assert(alignof(UFortBattlePassTileBase) == 0x000010, "Wrong alignment on UFortBattlePassTileBase");
static_assert(sizeof(UFortBattlePassTileBase) == 0x0015F0, "Wrong size on UFortBattlePassTileBase");
static_assert(offsetof(UFortBattlePassTileBase, RewardPageType) == 0x001530, "Member 'UFortBattlePassTileBase::RewardPageType' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTileBase, SizeBox_Content) == 0x001538, "Member 'UFortBattlePassTileBase::SizeBox_Content' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTileBase, TileColors) == 0x001540, "Member 'UFortBattlePassTileBase::TileColors' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTileBase, OverlayDimColor) == 0x001590, "Member 'UFortBattlePassTileBase::OverlayDimColor' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTileBase, TileDesiredCellSpan) == 0x0015A0, "Member 'UFortBattlePassTileBase::TileDesiredCellSpan' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTileBase, UnitHeight) == 0x0015B0, "Member 'UFortBattlePassTileBase::UnitHeight' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTileBase, UnitWidth) == 0x0015B4, "Member 'UFortBattlePassTileBase::UnitWidth' has a wrong offset!");

// Class BattlePassBase.FortBattlePassTile
// 0x0080 (0x1670 - 0x15F0)
class UFortBattlePassTile : public UFortBattlePassTileBase
{
public:
	uint8                                         Pad_15F0[0x18];                                    // 0x15F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLazyImage*                         Image_RewardItem;                                  // 0x1608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Currency;                                    // 0x1610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Age_Gating_Item;                                   // 0x1618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOnBulkBuyMode;                                  // 0x1620(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1621[0x4F];                                    // 0x1621(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAffordabilityChanged(const bool bHasEnougCurrency);
	void OnHighlighted();
	void OnLockedProgressUpdated(const float Progress, const int32 CurrentlyOwnedRewards, const int32 NeededRewards);
	void OnLockedStateUpdated(const bool OwnsBattlePass, const bool ParentUnlocked, const bool HasRemainingPrerequisites, const bool bIsDelayed);
	void OnPreviewed();
	void OnSetCurrencyAndPrice(const EBattlePassCurrencyType Currency, const int32 Price);
	void OnSetTrack(const bool bIsFreeTrack, const bool bOwnsBattlePass);
	void OnTilePreviewCycled();
	void OnUnhighlighted();
	void OnUnpreviewed();

	bool HasPrerequisites() const;
	bool IsAffordable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassTile">();
	}
	static class UFortBattlePassTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassTile>();
	}
};
static_assert(alignof(UFortBattlePassTile) == 0x000010, "Wrong alignment on UFortBattlePassTile");
static_assert(sizeof(UFortBattlePassTile) == 0x001670, "Wrong size on UFortBattlePassTile");
static_assert(offsetof(UFortBattlePassTile, Image_RewardItem) == 0x001608, "Member 'UFortBattlePassTile::Image_RewardItem' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTile, Image_Currency) == 0x001610, "Member 'UFortBattlePassTile::Image_Currency' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTile, Age_Gating_Item) == 0x001618, "Member 'UFortBattlePassTile::Age_Gating_Item' has a wrong offset!");
static_assert(offsetof(UFortBattlePassTile, bIsOnBulkBuyMode) == 0x001620, "Member 'UFortBattlePassTile::bIsOnBulkBuyMode' has a wrong offset!");

// Class BattlePassBase.FortBattlePassTutorialTooltip
// 0x0010 (0x02F8 - 0x02E8)
class UFortBattlePassTutorialTooltip : public UCommonUserWidget
{
public:
	class UCommonRichTextBlock*                   Text_Tooltip;                                      // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideTooltip();
	void SetText(const class FText& Text);
	void SetTooltipEnabled(const bool bEnable);
	void ShowTooltip();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBattlePassTutorialTooltip">();
	}
	static class UFortBattlePassTutorialTooltip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBattlePassTutorialTooltip>();
	}
};
static_assert(alignof(UFortBattlePassTutorialTooltip) == 0x000008, "Wrong alignment on UFortBattlePassTutorialTooltip");
static_assert(sizeof(UFortBattlePassTutorialTooltip) == 0x0002F8, "Wrong size on UFortBattlePassTutorialTooltip");
static_assert(offsetof(UFortBattlePassTutorialTooltip, Text_Tooltip) == 0x0002E8, "Member 'UFortBattlePassTutorialTooltip::Text_Tooltip' has a wrong offset!");

// Class BattlePassBase.RebootRallyQuestPanel
// 0x0000 (0x02C0 - 0x02C0)
class URebootRallyQuestPanel final : public UUserWidget
{
public:
	void OnRebootRallyEligibilityUpdated(bool bEligible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RebootRallyQuestPanel">();
	}
	static class URebootRallyQuestPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<URebootRallyQuestPanel>();
	}
};
static_assert(alignof(URebootRallyQuestPanel) == 0x000008, "Wrong alignment on URebootRallyQuestPanel");
static_assert(sizeof(URebootRallyQuestPanel) == 0x0002C0, "Wrong size on URebootRallyQuestPanel");

}

