#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraModesRuntime

#include "Basic.hpp"


namespace SDK::Params
{

// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.ClearFovOverride
// 0x0004 (0x0004 - 0x0000)
struct CameraModes_FirstPersonCameraController_ClearFovOverride final
{
public:
	float                                         TransitionTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModes_FirstPersonCameraController_ClearFovOverride) == 0x000004, "Wrong alignment on CameraModes_FirstPersonCameraController_ClearFovOverride");
static_assert(sizeof(CameraModes_FirstPersonCameraController_ClearFovOverride) == 0x000004, "Wrong size on CameraModes_FirstPersonCameraController_ClearFovOverride");
static_assert(offsetof(CameraModes_FirstPersonCameraController_ClearFovOverride, TransitionTime) == 0x000000, "Member 'CameraModes_FirstPersonCameraController_ClearFovOverride::TransitionTime' has a wrong offset!");

// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.HandleWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct CameraModes_FirstPersonCameraController_HandleWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModes_FirstPersonCameraController_HandleWeaponEquipped) == 0x000008, "Wrong alignment on CameraModes_FirstPersonCameraController_HandleWeaponEquipped");
static_assert(sizeof(CameraModes_FirstPersonCameraController_HandleWeaponEquipped) == 0x000010, "Wrong size on CameraModes_FirstPersonCameraController_HandleWeaponEquipped");
static_assert(offsetof(CameraModes_FirstPersonCameraController_HandleWeaponEquipped, NewWeapon) == 0x000000, "Member 'CameraModes_FirstPersonCameraController_HandleWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(CameraModes_FirstPersonCameraController_HandleWeaponEquipped, PrevWeapon) == 0x000008, "Member 'CameraModes_FirstPersonCameraController_HandleWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.OnLocalPlayerVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct CameraModes_FirstPersonCameraController_OnLocalPlayerVisibilityChanged final
{
public:
	bool                                          bShouldBeVisible;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModes_FirstPersonCameraController_OnLocalPlayerVisibilityChanged) == 0x000001, "Wrong alignment on CameraModes_FirstPersonCameraController_OnLocalPlayerVisibilityChanged");
static_assert(sizeof(CameraModes_FirstPersonCameraController_OnLocalPlayerVisibilityChanged) == 0x000001, "Wrong size on CameraModes_FirstPersonCameraController_OnLocalPlayerVisibilityChanged");
static_assert(offsetof(CameraModes_FirstPersonCameraController_OnLocalPlayerVisibilityChanged, bShouldBeVisible) == 0x000000, "Member 'CameraModes_FirstPersonCameraController_OnLocalPlayerVisibilityChanged::bShouldBeVisible' has a wrong offset!");

// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.SetFovOverride
// 0x0008 (0x0008 - 0x0000)
struct CameraModes_FirstPersonCameraController_SetFovOverride final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModes_FirstPersonCameraController_SetFovOverride) == 0x000004, "Wrong alignment on CameraModes_FirstPersonCameraController_SetFovOverride");
static_assert(sizeof(CameraModes_FirstPersonCameraController_SetFovOverride) == 0x000008, "Wrong size on CameraModes_FirstPersonCameraController_SetFovOverride");
static_assert(offsetof(CameraModes_FirstPersonCameraController_SetFovOverride, FOV) == 0x000000, "Member 'CameraModes_FirstPersonCameraController_SetFovOverride::FOV' has a wrong offset!");
static_assert(offsetof(CameraModes_FirstPersonCameraController_SetFovOverride, TransitionTime) == 0x000004, "Member 'CameraModes_FirstPersonCameraController_SetFovOverride::TransitionTime' has a wrong offset!");

// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.UpdateFirstPersonFOV
// 0x0004 (0x0004 - 0x0000)
struct CameraModes_FirstPersonCameraController_UpdateFirstPersonFOV final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModes_FirstPersonCameraController_UpdateFirstPersonFOV) == 0x000004, "Wrong alignment on CameraModes_FirstPersonCameraController_UpdateFirstPersonFOV");
static_assert(sizeof(CameraModes_FirstPersonCameraController_UpdateFirstPersonFOV) == 0x000004, "Wrong size on CameraModes_FirstPersonCameraController_UpdateFirstPersonFOV");
static_assert(offsetof(CameraModes_FirstPersonCameraController_UpdateFirstPersonFOV, FOV) == 0x000000, "Member 'CameraModes_FirstPersonCameraController_UpdateFirstPersonFOV::FOV' has a wrong offset!");

}

