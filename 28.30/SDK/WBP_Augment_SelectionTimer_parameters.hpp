#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Augment_SelectionTimer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.ExecuteUbergraph_WBP_Augment_SelectionTimer
// 0x0148 (0x0148 - 0x0000)
struct WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_DynamicCast_AsPaper_Sprite;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_DynamicCast_AsPaper_Sprite_1;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x003C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAugmentSelectionAvailable_IsEnabled;    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSelectAugment_ReturnValue;             // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  K2Node_Event_HiddenElementTagContainer;            // 0x0060(0x0020)(ConstParm)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue_1;                     // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEnteredBuildMode;              // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkydiving_ReturnValue;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDBNO_ReturnValue;                       // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bEnteredBuildMode)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x00D4(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x00E0(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISlateTextureAtlasInterface> CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput; // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_3;            // 0x0100(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bCanSelectAugment;                    // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller_1;     // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AreTouchControlsActive_ReturnValue;       // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISlateTextureAtlasInterface> CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput_1; // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer) == 0x000148, "Wrong size on WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, EntryPoint) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, Temp_object_Variable) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_AsPaper_Sprite) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_AsPaper_Sprite' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CustomEvent_Loaded) == 0x000020, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, Temp_object_Variable_1) == 0x000028, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_AsPaper_Sprite_1) == 0x000030, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_AsPaper_Sprite_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CreateDelegate_OutputDelegate) == 0x00003C, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsAugmentSelectionAvailable_IsEnabled) == 0x000048, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsAugmentSelectionAvailable_IsEnabled' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000050, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Event_IsDesignTime) == 0x000058, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_CanSelectAugment_ReturnValue) == 0x000059, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_CanSelectAugment_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Event_HiddenElementTagContainer) == 0x000060, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Event_HiddenElementTagContainer' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_HasTag_ReturnValue) == 0x000080, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_HasTag_ReturnValue_1) == 0x000081, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_HasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_Not_PreBool_ReturnValue) == 0x000082, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CustomEvent_Loaded_1) == 0x000088, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, Temp_bool_Variable) == 0x000090, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000098, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x0000A0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CustomEvent_bEnteredBuildMode) == 0x0000A9, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CustomEvent_bEnteredBuildMode' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsSkydiving_ReturnValue) == 0x0000AA, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsSkydiving_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsDBNO_ReturnValue) == 0x0000AB, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsDBNO_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_BooleanOR_ReturnValue) == 0x0000AC, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_BooleanOR_ReturnValue_1) == 0x0000AD, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Select_Default) == 0x0000B0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000B8, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_GetOwningPlayer_ReturnValue) == 0x0000C0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_AsFort_Player_Controller) == 0x0000C8, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_bSuccess_3) == 0x0000D0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000D4, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000E0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput) == 0x0000F0, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_CreateDelegate_OutputDelegate_3) == 0x000100, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_Event_bCanSelectAugment) == 0x00010C, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_Event_bCanSelectAugment' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_PlayAnimation_ReturnValue) == 0x000110, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000118, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_IsMobileGame_ReturnValue) == 0x000120, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_AsFort_Player_Controller_1) == 0x000128, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_AsFort_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, K2Node_DynamicCast_bSuccess_4) == 0x000130, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_AreTouchControlsActive_ReturnValue) == 0x000131, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_AreTouchControlsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000132, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer, CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput_1) == 0x000138, "Member 'WBP_Augment_SelectionTimer_C_ExecuteUbergraph_WBP_Augment_SelectionTimer::CallFunc_SetBrushFromAtlasInterface_AtlasRegion_CastInput_1' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.ForceAugmentReadyState
// 0x0018 (0x0018 - 0x0000)
struct WBP_Augment_SelectionTimer_C_ForceAugmentReadyState final
{
public:
	bool                                          AugmentSelectionAvailable;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InEditorOrPIE_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_ForceAugmentReadyState");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState) == 0x000018, "Wrong size on WBP_Augment_SelectionTimer_C_ForceAugmentReadyState");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState, AugmentSelectionAvailable) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_ForceAugmentReadyState::AugmentSelectionAvailable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState, CallFunc_InEditorOrPIE_ReturnValue) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_ForceAugmentReadyState::CallFunc_InEditorOrPIE_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState, CallFunc_SpawnSound2D_ReturnValue) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_ForceAugmentReadyState::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ForceAugmentReadyState, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_ForceAugmentReadyState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.IsAugmentSelectionAvailable
// 0x0003 (0x0003 - 0x0000)
struct WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable) == 0x000003, "Wrong size on WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable, IsEnabled) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable::IsEnabled' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'WBP_Augment_SelectionTimer_C_IsAugmentSelectionAvailable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnAugmentReadyFadeInFinished
// 0x0008 (0x0008 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished) == 0x000008, "Wrong size on WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnAugmentReadyFadeInFinished::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnCanSelectAugmentChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged final
{
public:
	bool                                          bCanSelectAugment;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged) == 0x000001, "Wrong size on WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged, bCanSelectAugment) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnCanSelectAugmentChanged::bCanSelectAugment' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnHUDElementVisibilityChanged
// 0x0020 (0x0020 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged final
{
public:
	struct FGameplayTagContainer                  HiddenElementTagContainer;                         // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged) == 0x000020, "Wrong size on WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged, HiddenElementTagContainer) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnHUDElementVisibilityChanged::HiddenElementTagContainer' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnLoaded_7B3490DB452F1589FC28169C2C321233
// 0x0008 (0x0008 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233) == 0x000008, "Wrong size on WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233, Loaded) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnLoaded_7B3490DB452F1589FC28169C2C321233::Loaded' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnLoaded_A3FED9F64CE5252CEA253EA599ED5B9A
// 0x0008 (0x0008 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnLoaded_A3FED9F64CE5252CEA253EA599ED5B9A final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnLoaded_A3FED9F64CE5252CEA253EA599ED5B9A) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnLoaded_A3FED9F64CE5252CEA253EA599ED5B9A");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnLoaded_A3FED9F64CE5252CEA253EA599ED5B9A) == 0x000008, "Wrong size on WBP_Augment_SelectionTimer_C_OnLoaded_A3FED9F64CE5252CEA253EA599ED5B9A");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnLoaded_A3FED9F64CE5252CEA253EA599ED5B9A, Loaded) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnLoaded_A3FED9F64CE5252CEA253EA599ED5B9A::Loaded' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnNumPendingAugmentsToGrantUpdated
// 0x00E0 (0x00E0 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated final
{
public:
	int32                                         NumPendingAugmentsToGrant;                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DidValueIncrease;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	bool                                          CallFunc_InEditorOrPIE_ReturnValue;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsAugmentSelectionAvailable_IsEnabled;    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A8(0x0018)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00C8(0x0018)()
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated) == 0x0000E0, "Wrong size on WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, NumPendingAugmentsToGrant) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::NumPendingAugmentsToGrant' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, DidValueIncrease) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::DidValueIncrease' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, Temp_bool_Variable) == 0x000005, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, Temp_text_Variable) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_InEditorOrPIE_ReturnValue) == 0x000020, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_InEditorOrPIE_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_SpawnSound2D_ReturnValue) == 0x000028, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Greater_IntInt_ReturnValue) == 0x000030, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000031, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000038, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, K2Node_MakeArray_Array) == 0x000090, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_IsAugmentSelectionAvailable_IsEnabled) == 0x0000A0, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_IsAugmentSelectionAvailable_IsEnabled' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Format_ReturnValue) == 0x0000A8, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_BooleanAND_ReturnValue) == 0x0000C0, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0000C1, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated, K2Node_Select_Default) == 0x0000C8, "Member 'WBP_Augment_SelectionTimer_C_OnNumPendingAugmentsToGrantUpdated::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.OnPlayerChangedBuildMode
// 0x0001 (0x0001 - 0x0000)
struct WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode final
{
public:
	bool                                          bEnteredBuildMode;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode) == 0x000001, "Wrong size on WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode, bEnteredBuildMode) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_OnPlayerChangedBuildMode::bEnteredBuildMode' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.PlayReminderAnimation
// 0x0010 (0x0010 - 0x0000)
struct WBP_Augment_SelectionTimer_C_PlayReminderAnimation final
{
public:
	bool                                          CallFunc_InEditorOrPIE_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_PlayReminderAnimation) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_PlayReminderAnimation");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_PlayReminderAnimation) == 0x000010, "Wrong size on WBP_Augment_SelectionTimer_C_PlayReminderAnimation");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_PlayReminderAnimation, CallFunc_InEditorOrPIE_ReturnValue) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_PlayReminderAnimation::CallFunc_InEditorOrPIE_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_PlayReminderAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_PlayReminderAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Augment_SelectionTimer_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_PreConstruct");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_PreConstruct) == 0x000001, "Wrong size on WBP_Augment_SelectionTimer_C_PreConstruct");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.ResetAugmentReadyStateAnims
// 0x0018 (0x0018 - 0x0000)
struct WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims) == 0x000018, "Wrong size on WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_ResetAugmentReadyStateAnims::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.SetAugmentReadyState
// 0x0020 (0x0020 - 0x0000)
struct WBP_Augment_SelectionTimer_C_SetAugmentReadyState final
{
public:
	bool                                          AugmentSelectionAvailable;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_SetAugmentReadyState");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState) == 0x000020, "Wrong size on WBP_Augment_SelectionTimer_C_SetAugmentReadyState");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, AugmentSelectionAvailable) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::AugmentSelectionAvailable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_IsUsingTouch_ReturnValue) == 0x000018, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_IsMobileGame_ReturnValue) == 0x000019, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_BooleanAND_ReturnValue) == 0x00001A, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetAugmentReadyState, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x00001C, "Member 'WBP_Augment_SelectionTimer_C_SetAugmentReadyState::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.SetMobileVisuals
// 0x0198 (0x0198 - 0x0000)
struct WBP_Augment_SelectionTimer_C_SetMobileVisuals final
{
public:
	float                                         Temp_real_Variable;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_4;                            // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_5;                            // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_3;                           // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x00F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_5;                           // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_2;          // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasChild_ReturnValue;                     // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10F[0x1];                                      // 0x010F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_6;                            // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_7;                           // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasChild_ReturnValue_1;                   // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_123[0x5];                                      // 0x0123(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue_1;    // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_7;                            // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_8;                           // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_9;                           // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            Temp_byte_Variable_10;                             // 0x015B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            Temp_byte_Variable_11;                             // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_10;                             // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15E[0x2];                                      // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0160(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            K2Node_Select_Default_10;                          // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_2;                              // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0170(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_3;                              // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_11;                             // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_11;                          // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0184(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_SetMobileVisuals) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_SetMobileVisuals");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_SetMobileVisuals) == 0x000198, "Wrong size on WBP_Augment_SelectionTimer_C_SetMobileVisuals");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_real_Variable) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_real_Variable_1) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_1) == 0x000020, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_1) == 0x000030, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_2) == 0x000038, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_3) == 0x000048, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_2) == 0x000058, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_4) == 0x000060, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_5) == 0x000070, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_IsMobileGame_ReturnValue) == 0x000080, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_IsUsingTouch_ReturnValue) == 0x000081, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_BooleanAND_ReturnValue) == 0x000082, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default) == 0x000088, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_1) == 0x000098, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_2) == 0x0000A8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_3) == 0x0000B8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable) == 0x0000B9, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_3) == 0x0000BC, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_MakeStruct_Margin) == 0x0000C0, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_1) == 0x0000D0, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x0000D8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_4) == 0x0000E0, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x0000E8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_2) == 0x0000F0, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_4) == 0x0000F1, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_3) == 0x0000F2, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_5) == 0x0000F3, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_4) == 0x0000F4, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_5) == 0x0000F5, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_SlotAsOverlaySlot_ReturnValue_2) == 0x0000F8, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_SlotAsOverlaySlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000100, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_5) == 0x000108, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_HasChild_ReturnValue) == 0x000109, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_HasChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_6) == 0x00010A, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_6) == 0x00010B, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_6) == 0x00010C, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_7) == 0x00010D, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_7) == 0x00010E, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_6) == 0x000110, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_7) == 0x000120, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_HasChild_ReturnValue_1) == 0x000121, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_HasChild_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_BooleanAND_ReturnValue_1) == 0x000122, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_AddChildToHorizontalBox_ReturnValue_1) == 0x000128, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_AddChildToHorizontalBox_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_struct_Variable_7) == 0x000130, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_8) == 0x000140, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_8) == 0x000141, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_8) == 0x000148, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_9) == 0x000158, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_9) == 0x000159, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_9) == 0x00015A, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_10) == 0x00015B, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_byte_Variable_11) == 0x00015C, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_10) == 0x00015D, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000160, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_10) == 0x000168, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_real_Variable_2) == 0x00016C, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, CallFunc_AddChildToOverlay_ReturnValue) == 0x000170, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_real_Variable_3) == 0x000178, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, Temp_bool_Variable_11) == 0x00017C, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_Select_Default_11) == 0x000180, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_Select_Default_11' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_SetMobileVisuals, K2Node_MakeStruct_Margin_1) == 0x000184, "Member 'WBP_Augment_SelectionTimer_C_SetMobileVisuals::K2Node_MakeStruct_Margin_1' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.StartHideTimerEvent
// 0x0040 (0x0040 - 0x0000)
struct WBP_Augment_SelectionTimer_C_StartHideTimerEvent final
{
public:
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetValueAsInteger_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent) == 0x000008, "Wrong alignment on WBP_Augment_SelectionTimer_C_StartHideTimerEvent");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent) == 0x000040, "Wrong size on WBP_Augment_SelectionTimer_C_StartHideTimerEvent");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_IsUsingTouch_ReturnValue) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_GetValueAsInteger_ReturnValue) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_GetValueAsInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_IsMobileGame_ReturnValue) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000010, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_StartHideTimerEvent, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000038, "Member 'WBP_Augment_SelectionTimer_C_StartHideTimerEvent::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.UpdateCanOpenSelector
// 0x0002 (0x0002 - 0x0000)
struct WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector final
{
public:
	bool                                          InPlayerAbleToOpenSelector;                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAugmentSelectionAvailable_IsEnabled;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector) == 0x000002, "Wrong size on WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector, InPlayerAbleToOpenSelector) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector::InPlayerAbleToOpenSelector' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector, CallFunc_IsAugmentSelectionAvailable_IsEnabled) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_UpdateCanOpenSelector::CallFunc_IsAugmentSelectionAvailable_IsEnabled' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.UpdateMobileIcon
// 0x000A (0x000A - 0x0000)
struct WBP_Augment_SelectionTimer_C_UpdateMobileIcon final
{
public:
	bool                                          IsSelectionToolOpened;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_UpdateMobileIcon");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon) == 0x00000A, "Wrong size on WBP_Augment_SelectionTimer_C_UpdateMobileIcon");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, IsSelectionToolOpened) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::IsSelectionToolOpened' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, Temp_byte_Variable) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, Temp_bool_Variable) == 0x000003, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, Temp_byte_Variable_2) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, Temp_byte_Variable_3) == 0x000005, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, Temp_bool_Variable_1) == 0x000006, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, K2Node_Select_Default) == 0x000007, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, K2Node_Select_Default_1) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateMobileIcon, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000009, "Member 'WBP_Augment_SelectionTimer_C_UpdateMobileIcon::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");

// Function WBP_Augment_SelectionTimer.WBP_Augment_SelectionTimer_C.UpdateVisibility
// 0x000D (0x000D - 0x0000)
struct WBP_Augment_SelectionTimer_C_UpdateVisibility final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCountdownVisible_ReturnValue;           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Augment_SelectionTimer_C_UpdateVisibility) == 0x000001, "Wrong alignment on WBP_Augment_SelectionTimer_C_UpdateVisibility");
static_assert(sizeof(WBP_Augment_SelectionTimer_C_UpdateVisibility) == 0x00000D, "Wrong size on WBP_Augment_SelectionTimer_C_UpdateVisibility");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, Temp_byte_Variable) == 0x000000, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, Temp_bool_Variable) == 0x000002, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, Temp_byte_Variable_2) == 0x000003, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, Temp_byte_Variable_3) == 0x000004, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, Temp_bool_Variable_1) == 0x000005, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_IsMobileGame_ReturnValue) == 0x000006, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_IsUsingTouch_ReturnValue) == 0x000007, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, K2Node_Select_Default) == 0x000008, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_IsCountdownVisible_ReturnValue) == 0x00000A, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_IsCountdownVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Augment_SelectionTimer_C_UpdateVisibility, K2Node_Select_Default_1) == 0x00000C, "Member 'WBP_Augment_SelectionTimer_C_UpdateVisibility::K2Node_Select_Default_1' has a wrong offset!");

}

