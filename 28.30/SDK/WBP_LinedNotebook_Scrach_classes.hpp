#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LinedNotebook_Scrach

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_LinedNotebook_Scrach.WBP_LinedNotebook_Scrach_C
// 0x0018 (0x02D8 - 0x02C0)
class UWBP_LinedNotebook_Scrach_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 ImageScrach;                                       // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          InvertX;                                           // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertY;                                           // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPurple;                                          // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBig;                                             // 0x02D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DrawAgain();
	void ExecuteUbergraph_WBP_LinedNotebook_Scrach(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void SetIsPurple(bool IsPurple_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_LinedNotebook_Scrach_C">();
	}
	static class UWBP_LinedNotebook_Scrach_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_LinedNotebook_Scrach_C>();
	}
};
static_assert(alignof(UWBP_LinedNotebook_Scrach_C) == 0x000008, "Wrong alignment on UWBP_LinedNotebook_Scrach_C");
static_assert(sizeof(UWBP_LinedNotebook_Scrach_C) == 0x0002D8, "Wrong size on UWBP_LinedNotebook_Scrach_C");
static_assert(offsetof(UWBP_LinedNotebook_Scrach_C, UberGraphFrame) == 0x0002C0, "Member 'UWBP_LinedNotebook_Scrach_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_Scrach_C, ImageScrach) == 0x0002C8, "Member 'UWBP_LinedNotebook_Scrach_C::ImageScrach' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_Scrach_C, InvertX) == 0x0002D0, "Member 'UWBP_LinedNotebook_Scrach_C::InvertX' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_Scrach_C, InvertY) == 0x0002D1, "Member 'UWBP_LinedNotebook_Scrach_C::InvertY' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_Scrach_C, IsPurple) == 0x0002D2, "Member 'UWBP_LinedNotebook_Scrach_C::IsPurple' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_Scrach_C, IsBig) == 0x0002D3, "Member 'UWBP_LinedNotebook_Scrach_C::IsBig' has a wrong offset!");

}

