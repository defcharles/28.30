#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassRepresentation

#include "Basic.hpp"

#include "MassEntity_structs.hpp"
#include "MassLOD_structs.hpp"
#include "Engine_structs.hpp"
#include "MassActors_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MassRepresentation.EMassRepresentationType
// NumValues: 0x0004
enum class EMassRepresentationType : uint8
{
	HighResSpawnedActor                      = 0,
	LowResSpawnedActor                       = 1,
	StaticMeshInstance                       = 2,
	None                                     = 3,
};

// ScriptStruct MassRepresentation.MassDistanceLODProcessorTag
// 0x0000 (0x0001 - 0x0001)
struct FMassDistanceLODProcessorTag final : public FMassTag
{
};
static_assert(alignof(FMassDistanceLODProcessorTag) == 0x000001, "Wrong alignment on FMassDistanceLODProcessorTag");
static_assert(sizeof(FMassDistanceLODProcessorTag) == 0x000001, "Wrong size on FMassDistanceLODProcessorTag");

// ScriptStruct MassRepresentation.MassStaticRepresentationTag
// 0x0000 (0x0001 - 0x0001)
struct FMassStaticRepresentationTag final : public FMassTag
{
};
static_assert(alignof(FMassStaticRepresentationTag) == 0x000001, "Wrong alignment on FMassStaticRepresentationTag");
static_assert(sizeof(FMassStaticRepresentationTag) == 0x000001, "Wrong size on FMassStaticRepresentationTag");

// ScriptStruct MassRepresentation.MassRepresentationLODFragment
// 0x0008 (0x0008 - 0x0000)
struct FMassRepresentationLODFragment final : public FMassFragment
{
public:
	EMassLOD                                      LOD;                                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMassLOD                                      PrevLOD;                                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMassVisibility                               Visibility;                                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMassVisibility                               PrevVisibility;                                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODSignificance;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassRepresentationLODFragment) == 0x000004, "Wrong alignment on FMassRepresentationLODFragment");
static_assert(sizeof(FMassRepresentationLODFragment) == 0x000008, "Wrong size on FMassRepresentationLODFragment");
static_assert(offsetof(FMassRepresentationLODFragment, LOD) == 0x000000, "Member 'FMassRepresentationLODFragment::LOD' has a wrong offset!");
static_assert(offsetof(FMassRepresentationLODFragment, PrevLOD) == 0x000001, "Member 'FMassRepresentationLODFragment::PrevLOD' has a wrong offset!");
static_assert(offsetof(FMassRepresentationLODFragment, Visibility) == 0x000002, "Member 'FMassRepresentationLODFragment::Visibility' has a wrong offset!");
static_assert(offsetof(FMassRepresentationLODFragment, PrevVisibility) == 0x000003, "Member 'FMassRepresentationLODFragment::PrevVisibility' has a wrong offset!");
static_assert(offsetof(FMassRepresentationLODFragment, LODSignificance) == 0x000004, "Member 'FMassRepresentationLODFragment::LODSignificance' has a wrong offset!");

// ScriptStruct MassRepresentation.StaticMeshInstanceVisualizationDescHandle
// 0x0002 (0x0002 - 0x0000)
struct FStaticMeshInstanceVisualizationDescHandle final
{
public:
	uint16                                        Index;                                             // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FStaticMeshInstanceVisualizationDescHandle) == 0x000002, "Wrong alignment on FStaticMeshInstanceVisualizationDescHandle");
static_assert(sizeof(FStaticMeshInstanceVisualizationDescHandle) == 0x000002, "Wrong size on FStaticMeshInstanceVisualizationDescHandle");
static_assert(offsetof(FStaticMeshInstanceVisualizationDescHandle, Index) == 0x000000, "Member 'FStaticMeshInstanceVisualizationDescHandle::Index' has a wrong offset!");

// ScriptStruct MassRepresentation.MassRepresentationFragment
// 0x0080 (0x0080 - 0x0000)
struct FMassRepresentationFragment final : public FMassFragment
{
public:
	EMassRepresentationType                       CurrentRepresentation;                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMassRepresentationType                       PrevRepresentation;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         HighResTemplateActorIndex;                         // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         LowResTemplateActorIndex;                          // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStaticMeshInstanceVisualizationDescHandle StaticMeshDescHandle;                              // 0x0006(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMassActorSpawnRequestHandle           ActorSpawnRequestHandle;                           // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             PrevTransform;                                     // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrevLODSignificance;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassRepresentationFragment) == 0x000010, "Wrong alignment on FMassRepresentationFragment");
static_assert(sizeof(FMassRepresentationFragment) == 0x000080, "Wrong size on FMassRepresentationFragment");
static_assert(offsetof(FMassRepresentationFragment, CurrentRepresentation) == 0x000000, "Member 'FMassRepresentationFragment::CurrentRepresentation' has a wrong offset!");
static_assert(offsetof(FMassRepresentationFragment, PrevRepresentation) == 0x000001, "Member 'FMassRepresentationFragment::PrevRepresentation' has a wrong offset!");
static_assert(offsetof(FMassRepresentationFragment, HighResTemplateActorIndex) == 0x000002, "Member 'FMassRepresentationFragment::HighResTemplateActorIndex' has a wrong offset!");
static_assert(offsetof(FMassRepresentationFragment, LowResTemplateActorIndex) == 0x000004, "Member 'FMassRepresentationFragment::LowResTemplateActorIndex' has a wrong offset!");
static_assert(offsetof(FMassRepresentationFragment, StaticMeshDescHandle) == 0x000006, "Member 'FMassRepresentationFragment::StaticMeshDescHandle' has a wrong offset!");
static_assert(offsetof(FMassRepresentationFragment, ActorSpawnRequestHandle) == 0x000008, "Member 'FMassRepresentationFragment::ActorSpawnRequestHandle' has a wrong offset!");
static_assert(offsetof(FMassRepresentationFragment, PrevTransform) == 0x000010, "Member 'FMassRepresentationFragment::PrevTransform' has a wrong offset!");
static_assert(offsetof(FMassRepresentationFragment, PrevLODSignificance) == 0x000070, "Member 'FMassRepresentationFragment::PrevLODSignificance' has a wrong offset!");

// ScriptStruct MassRepresentation.MassRepresentationSubsystemSharedFragment
// 0x0008 (0x0008 - 0x0000)
struct FMassRepresentationSubsystemSharedFragment final : public FMassSharedFragment
{
public:
	class UMassRepresentationSubsystem*           RepresentationSubsystem;                           // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassRepresentationSubsystemSharedFragment) == 0x000008, "Wrong alignment on FMassRepresentationSubsystemSharedFragment");
static_assert(sizeof(FMassRepresentationSubsystemSharedFragment) == 0x000008, "Wrong size on FMassRepresentationSubsystemSharedFragment");
static_assert(offsetof(FMassRepresentationSubsystemSharedFragment, RepresentationSubsystem) == 0x000000, "Member 'FMassRepresentationSubsystemSharedFragment::RepresentationSubsystem' has a wrong offset!");

// ScriptStruct MassRepresentation.MassRepresentationParameters
// 0x0028 (0x0028 - 0x0000)
struct FMassRepresentationParameters final : public FMassSharedFragment
{
public:
	TSubclassOf<class UMassRepresentationActorManagement> RepresentationActorManagementClass;                // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMassRepresentationType                       LODRepresentation[0x4];                            // 0x0008(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bForceActorRepresentationForExternalActors : 1;    // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bKeepLowResActors : 1;                             // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bKeepActorExtraFrame : 1;                          // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSpreadFirstVisualizationUpdate : 1;               // 0x000C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WorldPartitionGridNameContainingCollision;         // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotVisibleUpdateRate;                              // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMassRepresentationType                       CachedDefaultRepresentationType;                   // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMassRepresentationActorManagement*     CachedRepresentationActorManagement;               // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassRepresentationParameters) == 0x000008, "Wrong alignment on FMassRepresentationParameters");
static_assert(sizeof(FMassRepresentationParameters) == 0x000028, "Wrong size on FMassRepresentationParameters");
static_assert(offsetof(FMassRepresentationParameters, RepresentationActorManagementClass) == 0x000000, "Member 'FMassRepresentationParameters::RepresentationActorManagementClass' has a wrong offset!");
static_assert(offsetof(FMassRepresentationParameters, LODRepresentation) == 0x000008, "Member 'FMassRepresentationParameters::LODRepresentation' has a wrong offset!");
static_assert(offsetof(FMassRepresentationParameters, WorldPartitionGridNameContainingCollision) == 0x000010, "Member 'FMassRepresentationParameters::WorldPartitionGridNameContainingCollision' has a wrong offset!");
static_assert(offsetof(FMassRepresentationParameters, NotVisibleUpdateRate) == 0x000014, "Member 'FMassRepresentationParameters::NotVisibleUpdateRate' has a wrong offset!");
static_assert(offsetof(FMassRepresentationParameters, CachedDefaultRepresentationType) == 0x000018, "Member 'FMassRepresentationParameters::CachedDefaultRepresentationType' has a wrong offset!");
static_assert(offsetof(FMassRepresentationParameters, CachedRepresentationActorManagement) == 0x000020, "Member 'FMassRepresentationParameters::CachedRepresentationActorManagement' has a wrong offset!");

// ScriptStruct MassRepresentation.MassVisualizationLODParameters
// 0x0048 (0x0048 - 0x0000)
struct FMassVisualizationLODParameters final : public FMassSharedFragment
{
public:
	float                                         BaseLODDistance[0x4];                              // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleLODDistance[0x4];                           // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BufferHysteresisOnDistancePercentage;              // 0x0020(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODMaxCount[0x4];                                  // 0x0024(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToFrustum;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToFrustumHysteresis;                       // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          FilterTag;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassVisualizationLODParameters) == 0x000008, "Wrong alignment on FMassVisualizationLODParameters");
static_assert(sizeof(FMassVisualizationLODParameters) == 0x000048, "Wrong size on FMassVisualizationLODParameters");
static_assert(offsetof(FMassVisualizationLODParameters, BaseLODDistance) == 0x000000, "Member 'FMassVisualizationLODParameters::BaseLODDistance' has a wrong offset!");
static_assert(offsetof(FMassVisualizationLODParameters, VisibleLODDistance) == 0x000010, "Member 'FMassVisualizationLODParameters::VisibleLODDistance' has a wrong offset!");
static_assert(offsetof(FMassVisualizationLODParameters, BufferHysteresisOnDistancePercentage) == 0x000020, "Member 'FMassVisualizationLODParameters::BufferHysteresisOnDistancePercentage' has a wrong offset!");
static_assert(offsetof(FMassVisualizationLODParameters, LODMaxCount) == 0x000024, "Member 'FMassVisualizationLODParameters::LODMaxCount' has a wrong offset!");
static_assert(offsetof(FMassVisualizationLODParameters, DistanceToFrustum) == 0x000034, "Member 'FMassVisualizationLODParameters::DistanceToFrustum' has a wrong offset!");
static_assert(offsetof(FMassVisualizationLODParameters, DistanceToFrustumHysteresis) == 0x000038, "Member 'FMassVisualizationLODParameters::DistanceToFrustumHysteresis' has a wrong offset!");
static_assert(offsetof(FMassVisualizationLODParameters, FilterTag) == 0x000040, "Member 'FMassVisualizationLODParameters::FilterTag' has a wrong offset!");

// ScriptStruct MassRepresentation.MassVisualizationLODSharedFragment
// 0x2028 (0x2028 - 0x0000)
struct FMassVisualizationLODSharedFragment final : public FMassSharedFragment
{
public:
	uint8                                         Pad_0[0x2020];                                     // 0x0000(0x2020)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          FilterTag;                                         // 0x2020(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassVisualizationLODSharedFragment) == 0x000008, "Wrong alignment on FMassVisualizationLODSharedFragment");
static_assert(sizeof(FMassVisualizationLODSharedFragment) == 0x002028, "Wrong size on FMassVisualizationLODSharedFragment");
static_assert(offsetof(FMassVisualizationLODSharedFragment, FilterTag) == 0x002020, "Member 'FMassVisualizationLODSharedFragment::FilterTag' has a wrong offset!");

// ScriptStruct MassRepresentation.MassDistanceLODParameters
// 0x0020 (0x0020 - 0x0000)
struct FMassDistanceLODParameters final : public FMassSharedFragment
{
public:
	float                                         LODDistance[0x4];                                  // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BufferHysteresisOnDistancePercentage;              // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          FilterTag;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassDistanceLODParameters) == 0x000008, "Wrong alignment on FMassDistanceLODParameters");
static_assert(sizeof(FMassDistanceLODParameters) == 0x000020, "Wrong size on FMassDistanceLODParameters");
static_assert(offsetof(FMassDistanceLODParameters, LODDistance) == 0x000000, "Member 'FMassDistanceLODParameters::LODDistance' has a wrong offset!");
static_assert(offsetof(FMassDistanceLODParameters, BufferHysteresisOnDistancePercentage) == 0x000010, "Member 'FMassDistanceLODParameters::BufferHysteresisOnDistancePercentage' has a wrong offset!");
static_assert(offsetof(FMassDistanceLODParameters, FilterTag) == 0x000018, "Member 'FMassDistanceLODParameters::FilterTag' has a wrong offset!");

// ScriptStruct MassRepresentation.MassDistanceLODSharedFragment
// 0x2020 (0x2020 - 0x0000)
struct FMassDistanceLODSharedFragment final : public FMassSharedFragment
{
public:
	uint8                                         Pad_0[0x2018];                                     // 0x0000(0x2018)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          FilterTag;                                         // 0x2018(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassDistanceLODSharedFragment) == 0x000008, "Wrong alignment on FMassDistanceLODSharedFragment");
static_assert(sizeof(FMassDistanceLODSharedFragment) == 0x002020, "Wrong size on FMassDistanceLODSharedFragment");
static_assert(offsetof(FMassDistanceLODSharedFragment, FilterTag) == 0x002018, "Member 'FMassDistanceLODSharedFragment::FilterTag' has a wrong offset!");

// ScriptStruct MassRepresentation.MassRepresentationUpdateParams
// 0x0001 (0x0001 - 0x0000)
struct FMassRepresentationUpdateParams final
{
public:
	bool                                          bTestCollisionAvailibilityForActorVisualization;   // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassRepresentationUpdateParams) == 0x000001, "Wrong alignment on FMassRepresentationUpdateParams");
static_assert(sizeof(FMassRepresentationUpdateParams) == 0x000001, "Wrong size on FMassRepresentationUpdateParams");
static_assert(offsetof(FMassRepresentationUpdateParams, bTestCollisionAvailibilityForActorVisualization) == 0x000000, "Member 'FMassRepresentationUpdateParams::bTestCollisionAvailibilityForActorVisualization' has a wrong offset!");

// ScriptStruct MassRepresentation.MassVisualizationProcessorTag
// 0x0000 (0x0001 - 0x0001)
struct FMassVisualizationProcessorTag final : public FMassTag
{
};
static_assert(alignof(FMassVisualizationProcessorTag) == 0x000001, "Wrong alignment on FMassVisualizationProcessorTag");
static_assert(sizeof(FMassVisualizationProcessorTag) == 0x000001, "Wrong size on FMassVisualizationProcessorTag");

// ScriptStruct MassRepresentation.MassStaticMeshInstanceVisualizationMeshDesc
// 0x0030 (0x0030 - 0x0000)
struct FMassStaticMeshInstanceVisualizationMeshDesc final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MaterialOverrides;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         MinLODSignificance;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLODSignificance;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadows;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UInstancedStaticMeshComponent> ISMComponentClass;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassStaticMeshInstanceVisualizationMeshDesc) == 0x000008, "Wrong alignment on FMassStaticMeshInstanceVisualizationMeshDesc");
static_assert(sizeof(FMassStaticMeshInstanceVisualizationMeshDesc) == 0x000030, "Wrong size on FMassStaticMeshInstanceVisualizationMeshDesc");
static_assert(offsetof(FMassStaticMeshInstanceVisualizationMeshDesc, Mesh) == 0x000000, "Member 'FMassStaticMeshInstanceVisualizationMeshDesc::Mesh' has a wrong offset!");
static_assert(offsetof(FMassStaticMeshInstanceVisualizationMeshDesc, MaterialOverrides) == 0x000008, "Member 'FMassStaticMeshInstanceVisualizationMeshDesc::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(FMassStaticMeshInstanceVisualizationMeshDesc, MinLODSignificance) == 0x000018, "Member 'FMassStaticMeshInstanceVisualizationMeshDesc::MinLODSignificance' has a wrong offset!");
static_assert(offsetof(FMassStaticMeshInstanceVisualizationMeshDesc, MaxLODSignificance) == 0x00001C, "Member 'FMassStaticMeshInstanceVisualizationMeshDesc::MaxLODSignificance' has a wrong offset!");
static_assert(offsetof(FMassStaticMeshInstanceVisualizationMeshDesc, bCastShadows) == 0x000020, "Member 'FMassStaticMeshInstanceVisualizationMeshDesc::bCastShadows' has a wrong offset!");
static_assert(offsetof(FMassStaticMeshInstanceVisualizationMeshDesc, ISMComponentClass) == 0x000028, "Member 'FMassStaticMeshInstanceVisualizationMeshDesc::ISMComponentClass' has a wrong offset!");

// ScriptStruct MassRepresentation.StaticMeshInstanceVisualizationDesc
// 0x0078 (0x0080 - 0x0008)
struct FStaticMeshInstanceVisualizationDesc final : public FTableRowBase
{
public:
	TArray<struct FMassStaticMeshInstanceVisualizationMeshDesc> Meshes;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseTransformOffset;                               // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformOffset;                                   // 0x0020(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaticMeshInstanceVisualizationDesc) == 0x000010, "Wrong alignment on FStaticMeshInstanceVisualizationDesc");
static_assert(sizeof(FStaticMeshInstanceVisualizationDesc) == 0x000080, "Wrong size on FStaticMeshInstanceVisualizationDesc");
static_assert(offsetof(FStaticMeshInstanceVisualizationDesc, Meshes) == 0x000008, "Member 'FStaticMeshInstanceVisualizationDesc::Meshes' has a wrong offset!");
static_assert(offsetof(FStaticMeshInstanceVisualizationDesc, bUseTransformOffset) == 0x000018, "Member 'FStaticMeshInstanceVisualizationDesc::bUseTransformOffset' has a wrong offset!");
static_assert(offsetof(FStaticMeshInstanceVisualizationDesc, TransformOffset) == 0x000020, "Member 'FStaticMeshInstanceVisualizationDesc::TransformOffset' has a wrong offset!");

// ScriptStruct MassRepresentation.MassLODSignificanceRange
// 0x0020 (0x0020 - 0x0000)
struct FMassLODSignificanceRange final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint32>                                StaticMeshRefs;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassLODSignificanceRange) == 0x000008, "Wrong alignment on FMassLODSignificanceRange");
static_assert(sizeof(FMassLODSignificanceRange) == 0x000020, "Wrong size on FMassLODSignificanceRange");
static_assert(offsetof(FMassLODSignificanceRange, StaticMeshRefs) == 0x000008, "Member 'FMassLODSignificanceRange::StaticMeshRefs' has a wrong offset!");

// ScriptStruct MassRepresentation.MassInstancedStaticMeshInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FMassInstancedStaticMeshInfo final
{
public:
	struct FStaticMeshInstanceVisualizationDesc   Desc;                                              // 0x0000(0x0080)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class UInstancedStaticMeshComponent*>  InstancedStaticMeshComponents;                     // 0x0080(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FMassLODSignificanceRange>      LODSignificanceRanges;                             // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMassInstancedStaticMeshInfo) == 0x000010, "Wrong alignment on FMassInstancedStaticMeshInfo");
static_assert(sizeof(FMassInstancedStaticMeshInfo) == 0x0000A0, "Wrong size on FMassInstancedStaticMeshInfo");
static_assert(offsetof(FMassInstancedStaticMeshInfo, Desc) == 0x000000, "Member 'FMassInstancedStaticMeshInfo::Desc' has a wrong offset!");
static_assert(offsetof(FMassInstancedStaticMeshInfo, InstancedStaticMeshComponents) == 0x000080, "Member 'FMassInstancedStaticMeshInfo::InstancedStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(FMassInstancedStaticMeshInfo, LODSignificanceRanges) == 0x000090, "Member 'FMassInstancedStaticMeshInfo::LODSignificanceRanges' has a wrong offset!");

// ScriptStruct MassRepresentation.MassStationaryISMSwitcherProcessorTag
// 0x0000 (0x0001 - 0x0001)
struct FMassStationaryISMSwitcherProcessorTag final : public FMassTag
{
};
static_assert(alignof(FMassStationaryISMSwitcherProcessorTag) == 0x000001, "Wrong alignment on FMassStationaryISMSwitcherProcessorTag");
static_assert(sizeof(FMassStationaryISMSwitcherProcessorTag) == 0x000001, "Wrong size on FMassStationaryISMSwitcherProcessorTag");

// ScriptStruct MassRepresentation.MassVisualizationLODProcessorTag
// 0x0000 (0x0001 - 0x0001)
struct FMassVisualizationLODProcessorTag final : public FMassTag
{
};
static_assert(alignof(FMassVisualizationLODProcessorTag) == 0x000001, "Wrong alignment on FMassVisualizationLODProcessorTag");
static_assert(sizeof(FMassVisualizationLODProcessorTag) == 0x000001, "Wrong size on FMassVisualizationLODProcessorTag");

}

