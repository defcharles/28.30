#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChronoWeaponGameplayRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class ChronoWeaponGameplayRuntime.AnimInstance_ChronoPanRifle
// 0x0010 (0x0380 - 0x0370)
class UAnimInstance_ChronoPanRifle final : public UAnimInstance
{
public:
	bool                                          bIsFiring;                                         // 0x0368(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReloading;                                      // 0x0369(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36A[0x2];                                      // 0x036A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MagRotationValue;                                  // 0x036C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResetMagRotationCurveName;                         // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0xC];                                      // 0x0374(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimInstance_ChronoPanRifle">();
	}
	static class UAnimInstance_ChronoPanRifle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimInstance_ChronoPanRifle>();
	}
};
static_assert(alignof(UAnimInstance_ChronoPanRifle) == 0x000010, "Wrong alignment on UAnimInstance_ChronoPanRifle");
static_assert(sizeof(UAnimInstance_ChronoPanRifle) == 0x000380, "Wrong size on UAnimInstance_ChronoPanRifle");
static_assert(offsetof(UAnimInstance_ChronoPanRifle, bIsFiring) == 0x000368, "Member 'UAnimInstance_ChronoPanRifle::bIsFiring' has a wrong offset!");
static_assert(offsetof(UAnimInstance_ChronoPanRifle, bIsReloading) == 0x000369, "Member 'UAnimInstance_ChronoPanRifle::bIsReloading' has a wrong offset!");
static_assert(offsetof(UAnimInstance_ChronoPanRifle, MagRotationValue) == 0x00036C, "Member 'UAnimInstance_ChronoPanRifle::MagRotationValue' has a wrong offset!");
static_assert(offsetof(UAnimInstance_ChronoPanRifle, ResetMagRotationCurveName) == 0x000370, "Member 'UAnimInstance_ChronoPanRifle::ResetMagRotationCurveName' has a wrong offset!");

}

