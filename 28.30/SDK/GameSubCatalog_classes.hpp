#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameSubCatalog

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "GameSubCatalog_structs.hpp"


namespace SDK
{

// Class GameSubCatalog.McpCatalogItemsForRandomPlayer
// 0x0028 (0x0050 - 0x0028)
class UMcpCatalogItemsForRandomPlayer final : public UObject
{
public:
	uint32                                        Percentage;                                        // 0x0028(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Salt;                                              // 0x0030(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CatalogItems;                                      // 0x0040(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"McpCatalogItemsForRandomPlayer">();
	}
	static class UMcpCatalogItemsForRandomPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMcpCatalogItemsForRandomPlayer>();
	}
};
static_assert(alignof(UMcpCatalogItemsForRandomPlayer) == 0x000008, "Wrong alignment on UMcpCatalogItemsForRandomPlayer");
static_assert(sizeof(UMcpCatalogItemsForRandomPlayer) == 0x000050, "Wrong size on UMcpCatalogItemsForRandomPlayer");
static_assert(offsetof(UMcpCatalogItemsForRandomPlayer, Percentage) == 0x000028, "Member 'UMcpCatalogItemsForRandomPlayer::Percentage' has a wrong offset!");
static_assert(offsetof(UMcpCatalogItemsForRandomPlayer, Salt) == 0x000030, "Member 'UMcpCatalogItemsForRandomPlayer::Salt' has a wrong offset!");
static_assert(offsetof(UMcpCatalogItemsForRandomPlayer, CatalogItems) == 0x000040, "Member 'UMcpCatalogItemsForRandomPlayer::CatalogItems' has a wrong offset!");

// Class GameSubCatalog.McpVerifierModeSelector
// 0x0020 (0x0048 - 0x0028)
class UMcpVerifierModeSelector final : public UObject
{
public:
	uint32                                        RangeStart;                                        // 0x0028(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        RangeEnd;                                          // 0x002C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Salt;                                              // 0x0030(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerifierModeOverride                         VerifierModeOverride;                              // 0x0040(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReceiptRefactorVersionOverride;                    // 0x0044(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"McpVerifierModeSelector">();
	}
	static class UMcpVerifierModeSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMcpVerifierModeSelector>();
	}
};
static_assert(alignof(UMcpVerifierModeSelector) == 0x000008, "Wrong alignment on UMcpVerifierModeSelector");
static_assert(sizeof(UMcpVerifierModeSelector) == 0x000048, "Wrong size on UMcpVerifierModeSelector");
static_assert(offsetof(UMcpVerifierModeSelector, RangeStart) == 0x000028, "Member 'UMcpVerifierModeSelector::RangeStart' has a wrong offset!");
static_assert(offsetof(UMcpVerifierModeSelector, RangeEnd) == 0x00002C, "Member 'UMcpVerifierModeSelector::RangeEnd' has a wrong offset!");
static_assert(offsetof(UMcpVerifierModeSelector, Salt) == 0x000030, "Member 'UMcpVerifierModeSelector::Salt' has a wrong offset!");
static_assert(offsetof(UMcpVerifierModeSelector, VerifierModeOverride) == 0x000040, "Member 'UMcpVerifierModeSelector::VerifierModeOverride' has a wrong offset!");
static_assert(offsetof(UMcpVerifierModeSelector, ReceiptRefactorVersionOverride) == 0x000044, "Member 'UMcpVerifierModeSelector::ReceiptRefactorVersionOverride' has a wrong offset!");

}

