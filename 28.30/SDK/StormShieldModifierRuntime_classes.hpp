#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StormShieldModifierRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "StormShieldModifierRuntime_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class StormShieldModifierRuntime.FortAthenaMutator_SplitStorm
// 0x01E0 (0x0670 - 0x0490)
class AFortAthenaMutator_SplitStorm final : public AFortAthenaMutator_GameModeBase
{
public:
	TSubclassOf<class AActor>                     SafeZoneProxyClass;                                // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ProxyUpdateFrequency;                              // 0x0498(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SplitParallelTravelDistance;                       // 0x04C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         JoinParallelTravelDistance;                        // 0x04E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SplitPerpendicularTravelDistance;                  // 0x0510(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         JoinAngleFromParallelDegrees;                      // 0x0538(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         PhaseToSplitStorm;                                 // 0x0560(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           ProxyMapCircleColor;                               // 0x0588(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProxyMapCircleLineThickness;                       // 0x0598(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProxyMapCircleLineSegments;                        // 0x059C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SafeZoneProxy;                                     // 0x05A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESplitStormProxyPhase                         CurrentProxyPhase;                                 // 0x05A8(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveToHoldWaitDuration;                            // 0x05AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveToHoldDuration;                                // 0x05B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveToEndWaitDuration;                             // 0x05B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveToEndDuration;                                 // 0x05B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveStartTime;                                     // 0x05BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSplitStormProxyCircle                 ProxyStartCircle;                                  // 0x05C0(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSplitStormProxyCircle                 ProxyEndCircle;                                    // 0x05E0(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSplitStormProxyCircle                 ProxyHoldCircle;                                   // 0x0600(0x0020)(BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSplitStormProxyCircle                 CurrentProxyCircle;                                // 0x0620(0x0020)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_640[0x30];                                     // 0x0640(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_CurrentProxyCircle();
	void OnSafeZoneIndicatorSpawned(const struct FFortSafeZoneIndicatorUpdatedEvent& Event);
	void OnSafeZonePhaseChanged();
	void SetProxyCenter(const struct FVector& NewCenter);
	void SetProxyRadius(const float NewRadius);
	void SetSafeZoneProxyPhase(ESplitStormProxyPhase NewPhase);
	void StartProxyUpdateTimer();
	void UpdateProxyCenterAndRadius();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_SplitStorm">();
	}
	static class AFortAthenaMutator_SplitStorm* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_SplitStorm>();
	}
};
static_assert(alignof(AFortAthenaMutator_SplitStorm) == 0x000008, "Wrong alignment on AFortAthenaMutator_SplitStorm");
static_assert(sizeof(AFortAthenaMutator_SplitStorm) == 0x000670, "Wrong size on AFortAthenaMutator_SplitStorm");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, SafeZoneProxyClass) == 0x000490, "Member 'AFortAthenaMutator_SplitStorm::SafeZoneProxyClass' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, ProxyUpdateFrequency) == 0x000498, "Member 'AFortAthenaMutator_SplitStorm::ProxyUpdateFrequency' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, SplitParallelTravelDistance) == 0x0004C0, "Member 'AFortAthenaMutator_SplitStorm::SplitParallelTravelDistance' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, JoinParallelTravelDistance) == 0x0004E8, "Member 'AFortAthenaMutator_SplitStorm::JoinParallelTravelDistance' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, SplitPerpendicularTravelDistance) == 0x000510, "Member 'AFortAthenaMutator_SplitStorm::SplitPerpendicularTravelDistance' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, JoinAngleFromParallelDegrees) == 0x000538, "Member 'AFortAthenaMutator_SplitStorm::JoinAngleFromParallelDegrees' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, PhaseToSplitStorm) == 0x000560, "Member 'AFortAthenaMutator_SplitStorm::PhaseToSplitStorm' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, ProxyMapCircleColor) == 0x000588, "Member 'AFortAthenaMutator_SplitStorm::ProxyMapCircleColor' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, ProxyMapCircleLineThickness) == 0x000598, "Member 'AFortAthenaMutator_SplitStorm::ProxyMapCircleLineThickness' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, ProxyMapCircleLineSegments) == 0x00059C, "Member 'AFortAthenaMutator_SplitStorm::ProxyMapCircleLineSegments' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, SafeZoneProxy) == 0x0005A0, "Member 'AFortAthenaMutator_SplitStorm::SafeZoneProxy' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, CurrentProxyPhase) == 0x0005A8, "Member 'AFortAthenaMutator_SplitStorm::CurrentProxyPhase' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, MoveToHoldWaitDuration) == 0x0005AC, "Member 'AFortAthenaMutator_SplitStorm::MoveToHoldWaitDuration' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, MoveToHoldDuration) == 0x0005B0, "Member 'AFortAthenaMutator_SplitStorm::MoveToHoldDuration' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, MoveToEndWaitDuration) == 0x0005B4, "Member 'AFortAthenaMutator_SplitStorm::MoveToEndWaitDuration' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, MoveToEndDuration) == 0x0005B8, "Member 'AFortAthenaMutator_SplitStorm::MoveToEndDuration' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, MoveStartTime) == 0x0005BC, "Member 'AFortAthenaMutator_SplitStorm::MoveStartTime' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, ProxyStartCircle) == 0x0005C0, "Member 'AFortAthenaMutator_SplitStorm::ProxyStartCircle' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, ProxyEndCircle) == 0x0005E0, "Member 'AFortAthenaMutator_SplitStorm::ProxyEndCircle' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, ProxyHoldCircle) == 0x000600, "Member 'AFortAthenaMutator_SplitStorm::ProxyHoldCircle' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SplitStorm, CurrentProxyCircle) == 0x000620, "Member 'AFortAthenaMutator_SplitStorm::CurrentProxyCircle' has a wrong offset!");

}

