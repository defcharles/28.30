#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MatchObjectivesUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "MatchObjectivesUI_structs.hpp"


namespace SDK::Params
{

// Function MatchObjectivesUI.FortMobileButtonBehaviorComponent_MatchObjectivePicker.HandleSkydiveModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortMobileButtonBehaviorComponent_MatchObjectivePicker_HandleSkydiveModeChanged final
{
public:
	ESkydiveFeedbackPhase                         Phase;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMobileButtonBehaviorComponent_MatchObjectivePicker_HandleSkydiveModeChanged) == 0x000001, "Wrong alignment on FortMobileButtonBehaviorComponent_MatchObjectivePicker_HandleSkydiveModeChanged");
static_assert(sizeof(FortMobileButtonBehaviorComponent_MatchObjectivePicker_HandleSkydiveModeChanged) == 0x000001, "Wrong size on FortMobileButtonBehaviorComponent_MatchObjectivePicker_HandleSkydiveModeChanged");
static_assert(offsetof(FortMobileButtonBehaviorComponent_MatchObjectivePicker_HandleSkydiveModeChanged, Phase) == 0x000000, "Member 'FortMobileButtonBehaviorComponent_MatchObjectivePicker_HandleSkydiveModeChanged::Phase' has a wrong offset!");

// Function MatchObjectivesUI.FortMobileHUDElement_ObjectiveSelectorWrapper.HandleSkydiveModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortMobileHUDElement_ObjectiveSelectorWrapper_HandleSkydiveModeChanged final
{
public:
	ESkydiveFeedbackPhase                         Phase;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMobileHUDElement_ObjectiveSelectorWrapper_HandleSkydiveModeChanged) == 0x000001, "Wrong alignment on FortMobileHUDElement_ObjectiveSelectorWrapper_HandleSkydiveModeChanged");
static_assert(sizeof(FortMobileHUDElement_ObjectiveSelectorWrapper_HandleSkydiveModeChanged) == 0x000001, "Wrong size on FortMobileHUDElement_ObjectiveSelectorWrapper_HandleSkydiveModeChanged");
static_assert(offsetof(FortMobileHUDElement_ObjectiveSelectorWrapper_HandleSkydiveModeChanged, Phase) == 0x000000, "Member 'FortMobileHUDElement_ObjectiveSelectorWrapper_HandleSkydiveModeChanged::Phase' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesOptionEntryWidget.OnMatchObjectiveEntrySetup
// 0x01B0 (0x01B0 - 0x0000)
struct MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup final
{
public:
	struct FUrgentQuestData                       UrgentQuestData;                                   // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortItemQuantityPair                  VisibleReward;                                     // 0x01A0(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ObjectiveCount;                                    // 0x01AC(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup) == 0x000008, "Wrong alignment on MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup");
static_assert(sizeof(MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup) == 0x0001B0, "Wrong size on MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup");
static_assert(offsetof(MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup, UrgentQuestData) == 0x000000, "Member 'MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup::UrgentQuestData' has a wrong offset!");
static_assert(offsetof(MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup, VisibleReward) == 0x0001A0, "Member 'MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup::VisibleReward' has a wrong offset!");
static_assert(offsetof(MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup, ObjectiveCount) == 0x0001AC, "Member 'MatchObjectivesOptionEntryWidget_OnMatchObjectiveEntrySetup::ObjectiveCount' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesOptionEntryWidget.OnOptionFocusedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct MatchObjectivesOptionEntryWidget_OnOptionFocusedStateChanged final
{
public:
	bool                                          bIsFocused;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesOptionEntryWidget_OnOptionFocusedStateChanged) == 0x000001, "Wrong alignment on MatchObjectivesOptionEntryWidget_OnOptionFocusedStateChanged");
static_assert(sizeof(MatchObjectivesOptionEntryWidget_OnOptionFocusedStateChanged) == 0x000001, "Wrong size on MatchObjectivesOptionEntryWidget_OnOptionFocusedStateChanged");
static_assert(offsetof(MatchObjectivesOptionEntryWidget_OnOptionFocusedStateChanged, bIsFocused) == 0x000000, "Member 'MatchObjectivesOptionEntryWidget_OnOptionFocusedStateChanged::bIsFocused' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesOptionEntryWidget.OnOptionSelectedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct MatchObjectivesOptionEntryWidget_OnOptionSelectedStateChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesOptionEntryWidget_OnOptionSelectedStateChanged) == 0x000001, "Wrong alignment on MatchObjectivesOptionEntryWidget_OnOptionSelectedStateChanged");
static_assert(sizeof(MatchObjectivesOptionEntryWidget_OnOptionSelectedStateChanged) == 0x000001, "Wrong size on MatchObjectivesOptionEntryWidget_OnOptionSelectedStateChanged");
static_assert(offsetof(MatchObjectivesOptionEntryWidget_OnOptionSelectedStateChanged, bIsSelected) == 0x000000, "Member 'MatchObjectivesOptionEntryWidget_OnOptionSelectedStateChanged::bIsSelected' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesOptionEntryWidget.OnTeammateSelectionUpdated
// 0x0010 (0x0010 - 0x0000)
struct MatchObjectivesOptionEntryWidget_OnTeammateSelectionUpdated final
{
public:
	TArray<class AFortPlayerState*>               PlayersThatHaveSelectedThis;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesOptionEntryWidget_OnTeammateSelectionUpdated) == 0x000008, "Wrong alignment on MatchObjectivesOptionEntryWidget_OnTeammateSelectionUpdated");
static_assert(sizeof(MatchObjectivesOptionEntryWidget_OnTeammateSelectionUpdated) == 0x000010, "Wrong size on MatchObjectivesOptionEntryWidget_OnTeammateSelectionUpdated");
static_assert(offsetof(MatchObjectivesOptionEntryWidget_OnTeammateSelectionUpdated, PlayersThatHaveSelectedThis) == 0x000000, "Member 'MatchObjectivesOptionEntryWidget_OnTeammateSelectionUpdated::PlayersThatHaveSelectedThis' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesSocialAvatar.SetSocialAvatar
// 0x0008 (0x0008 - 0x0000)
struct MatchObjectivesSocialAvatar_SetSocialAvatar final
{
public:
	const class AFortPlayerState*                 PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesSocialAvatar_SetSocialAvatar) == 0x000008, "Wrong alignment on MatchObjectivesSocialAvatar_SetSocialAvatar");
static_assert(sizeof(MatchObjectivesSocialAvatar_SetSocialAvatar) == 0x000008, "Wrong size on MatchObjectivesSocialAvatar_SetSocialAvatar");
static_assert(offsetof(MatchObjectivesSocialAvatar_SetSocialAvatar, PlayerState) == 0x000000, "Member 'MatchObjectivesSocialAvatar_SetSocialAvatar::PlayerState' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesSocialAvatar.SetSocialAvatarTexture
// 0x0020 (0x0020 - 0x0000)
struct MatchObjectivesSocialAvatar_SetSocialAvatarTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              AvatarTexture;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesSocialAvatar_SetSocialAvatarTexture) == 0x000008, "Wrong alignment on MatchObjectivesSocialAvatar_SetSocialAvatarTexture");
static_assert(sizeof(MatchObjectivesSocialAvatar_SetSocialAvatarTexture) == 0x000020, "Wrong size on MatchObjectivesSocialAvatar_SetSocialAvatarTexture");
static_assert(offsetof(MatchObjectivesSocialAvatar_SetSocialAvatarTexture, AvatarTexture) == 0x000000, "Member 'MatchObjectivesSocialAvatar_SetSocialAvatarTexture::AvatarTexture' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesUIDirectorBase.HandleSkydiveModeChanged
// 0x0001 (0x0001 - 0x0000)
struct MatchObjectivesUIDirectorBase_HandleSkydiveModeChanged final
{
public:
	ESkydiveFeedbackPhase                         Phase;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesUIDirectorBase_HandleSkydiveModeChanged) == 0x000001, "Wrong alignment on MatchObjectivesUIDirectorBase_HandleSkydiveModeChanged");
static_assert(sizeof(MatchObjectivesUIDirectorBase_HandleSkydiveModeChanged) == 0x000001, "Wrong size on MatchObjectivesUIDirectorBase_HandleSkydiveModeChanged");
static_assert(offsetof(MatchObjectivesUIDirectorBase_HandleSkydiveModeChanged, Phase) == 0x000000, "Member 'MatchObjectivesUIDirectorBase_HandleSkydiveModeChanged::Phase' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesUIDirectorBase.IsAnyChallengeAvailable
// 0x0001 (0x0001 - 0x0000)
struct MatchObjectivesUIDirectorBase_IsAnyChallengeAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesUIDirectorBase_IsAnyChallengeAvailable) == 0x000001, "Wrong alignment on MatchObjectivesUIDirectorBase_IsAnyChallengeAvailable");
static_assert(sizeof(MatchObjectivesUIDirectorBase_IsAnyChallengeAvailable) == 0x000001, "Wrong size on MatchObjectivesUIDirectorBase_IsAnyChallengeAvailable");
static_assert(offsetof(MatchObjectivesUIDirectorBase_IsAnyChallengeAvailable, ReturnValue) == 0x000000, "Member 'MatchObjectivesUIDirectorBase_IsAnyChallengeAvailable::ReturnValue' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.OnQuestEntrySelected
// 0x0008 (0x0008 - 0x0000)
struct MatchObjectivesSelectorWidget_OnQuestEntrySelected final
{
public:
	class UUserWidget*                            SelectedEntry;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesSelectorWidget_OnQuestEntrySelected) == 0x000008, "Wrong alignment on MatchObjectivesSelectorWidget_OnQuestEntrySelected");
static_assert(sizeof(MatchObjectivesSelectorWidget_OnQuestEntrySelected) == 0x000008, "Wrong size on MatchObjectivesSelectorWidget_OnQuestEntrySelected");
static_assert(offsetof(MatchObjectivesSelectorWidget_OnQuestEntrySelected, SelectedEntry) == 0x000000, "Member 'MatchObjectivesSelectorWidget_OnQuestEntrySelected::SelectedEntry' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.SetSelectorState
// 0x0001 (0x0001 - 0x0000)
struct MatchObjectivesSelectorWidget_SetSelectorState final
{
public:
	EMatchQuestsSelectorState                     State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesSelectorWidget_SetSelectorState) == 0x000001, "Wrong alignment on MatchObjectivesSelectorWidget_SetSelectorState");
static_assert(sizeof(MatchObjectivesSelectorWidget_SetSelectorState) == 0x000001, "Wrong size on MatchObjectivesSelectorWidget_SetSelectorState");
static_assert(offsetof(MatchObjectivesSelectorWidget_SetSelectorState, State) == 0x000000, "Member 'MatchObjectivesSelectorWidget_SetSelectorState::State' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.IsOpenByDefault
// 0x0001 (0x0001 - 0x0000)
struct MatchObjectivesSelectorWidget_IsOpenByDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesSelectorWidget_IsOpenByDefault) == 0x000001, "Wrong alignment on MatchObjectivesSelectorWidget_IsOpenByDefault");
static_assert(sizeof(MatchObjectivesSelectorWidget_IsOpenByDefault) == 0x000001, "Wrong size on MatchObjectivesSelectorWidget_IsOpenByDefault");
static_assert(offsetof(MatchObjectivesSelectorWidget_IsOpenByDefault, ReturnValue) == 0x000000, "Member 'MatchObjectivesSelectorWidget_IsOpenByDefault::ReturnValue' has a wrong offset!");

// Function MatchObjectivesUI.MatchObjectivesSelectorWidget.PopulateChallengeEntries
// 0x0010 (0x0010 - 0x0000)
struct MatchObjectivesSelectorWidget_PopulateChallengeEntries final
{
public:
	TArray<TScriptInterface<class IQuestDefinitionInterface>> QuestOffering;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchObjectivesSelectorWidget_PopulateChallengeEntries) == 0x000008, "Wrong alignment on MatchObjectivesSelectorWidget_PopulateChallengeEntries");
static_assert(sizeof(MatchObjectivesSelectorWidget_PopulateChallengeEntries) == 0x000010, "Wrong size on MatchObjectivesSelectorWidget_PopulateChallengeEntries");
static_assert(offsetof(MatchObjectivesSelectorWidget_PopulateChallengeEntries, QuestOffering) == 0x000000, "Member 'MatchObjectivesSelectorWidget_PopulateChallengeEntries::QuestOffering' has a wrong offset!");

}

