#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CRD_CinematicSequence

#include "Basic.hpp"

#include "CRD_CinematicSequence_structs.hpp"
#include "MovieScene_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class CRD_CinematicSequence.CinematicSequenceDeviceBase
// 0x00B0 (0x0C78 - 0x0BC8)
class ACinematicSequenceDeviceBase final : public ABuildingProp
{
public:
	uint8                                         Pad_BC8[0x50];                                     // 0x0BC8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         Sequence;                                          // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0C20(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortPlayerController*                  InstigatingController;                             // 0x0C28(0x0008)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         InstigatingTeam;                                   // 0x0C30(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C31[0x3];                                      // 0x0C31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bLoopPlayback : 1;                                 // 0x0C34(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bAutoPlay : 1;                                     // 0x0C34(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_C35[0x3];                                      // 0x0C35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ECinematicSequenceEnabledOnPhase              EnabledOnPhase;                                    // 0x0C38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECinematicSequenceVisibility                  Visibility;                                        // 0x0C39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLevelSequenceActorAlwaysRelevant;                 // 0x0C3A(0x0001)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C3B[0x1];                                      // 0x0C3B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0C3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMovieSceneCompletionModeOverride             FinishCompletionStateOverride;                     // 0x0C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C41[0x37];                                     // 0x0C41(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GoToEndAndStop();
	void HandleSequencePlayerCreated(class ULevelSequencePlayer* Player);
	void OnSequenceFinished();
	void Pause();
	void Play();
	void SetPlaybackFrame(int32 Frame);
	void SetPlaybackTime(float Time);
	void SetPlayRate(float PlayRate_0);
	void SetSequence(class ULevelSequence* Sequence_0);
	void Stop();

	int32 GetPlaybackFrame() const;
	float GetPlaybackTime() const;
	float GetPlayRate() const;
	class UMovieSceneSequencePlayer* GetSequencePlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CinematicSequenceDeviceBase">();
	}
	static class ACinematicSequenceDeviceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACinematicSequenceDeviceBase>();
	}
};
static_assert(alignof(ACinematicSequenceDeviceBase) == 0x000008, "Wrong alignment on ACinematicSequenceDeviceBase");
static_assert(sizeof(ACinematicSequenceDeviceBase) == 0x000C78, "Wrong size on ACinematicSequenceDeviceBase");
static_assert(offsetof(ACinematicSequenceDeviceBase, Sequence) == 0x000C18, "Member 'ACinematicSequenceDeviceBase::Sequence' has a wrong offset!");
static_assert(offsetof(ACinematicSequenceDeviceBase, LevelSequenceActor) == 0x000C20, "Member 'ACinematicSequenceDeviceBase::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(ACinematicSequenceDeviceBase, InstigatingController) == 0x000C28, "Member 'ACinematicSequenceDeviceBase::InstigatingController' has a wrong offset!");
static_assert(offsetof(ACinematicSequenceDeviceBase, InstigatingTeam) == 0x000C30, "Member 'ACinematicSequenceDeviceBase::InstigatingTeam' has a wrong offset!");
static_assert(offsetof(ACinematicSequenceDeviceBase, EnabledOnPhase) == 0x000C38, "Member 'ACinematicSequenceDeviceBase::EnabledOnPhase' has a wrong offset!");
static_assert(offsetof(ACinematicSequenceDeviceBase, Visibility) == 0x000C39, "Member 'ACinematicSequenceDeviceBase::Visibility' has a wrong offset!");
static_assert(offsetof(ACinematicSequenceDeviceBase, bLevelSequenceActorAlwaysRelevant) == 0x000C3A, "Member 'ACinematicSequenceDeviceBase::bLevelSequenceActorAlwaysRelevant' has a wrong offset!");
static_assert(offsetof(ACinematicSequenceDeviceBase, PlayRate) == 0x000C3C, "Member 'ACinematicSequenceDeviceBase::PlayRate' has a wrong offset!");
static_assert(offsetof(ACinematicSequenceDeviceBase, FinishCompletionStateOverride) == 0x000C40, "Member 'ACinematicSequenceDeviceBase::FinishCompletionStateOverride' has a wrong offset!");

}

