#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomControlsRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CustomControlsRuntime.CustomControlOptions_Base.GetOwningComponent
// 0x0008 (0x0008 - 0x0000)
struct CustomControlOptions_Base_GetOwningComponent final
{
public:
	class UFortControllerComponent_CustomControls* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomControlOptions_Base_GetOwningComponent) == 0x000008, "Wrong alignment on CustomControlOptions_Base_GetOwningComponent");
static_assert(sizeof(CustomControlOptions_Base_GetOwningComponent) == 0x000008, "Wrong size on CustomControlOptions_Base_GetOwningComponent");
static_assert(offsetof(CustomControlOptions_Base_GetOwningComponent, ReturnValue) == 0x000000, "Member 'CustomControlOptions_Base_GetOwningComponent::ReturnValue' has a wrong offset!");

// Function CustomControlsRuntime.CustomControlOptions_ThirdPerson.BP_InitAimingTargetingPreset
// 0x0008 (0x0008 - 0x0000)
struct CustomControlOptions_ThirdPerson_BP_InitAimingTargetingPreset final
{
public:
	class UTargetingPreset*                       Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomControlOptions_ThirdPerson_BP_InitAimingTargetingPreset) == 0x000008, "Wrong alignment on CustomControlOptions_ThirdPerson_BP_InitAimingTargetingPreset");
static_assert(sizeof(CustomControlOptions_ThirdPerson_BP_InitAimingTargetingPreset) == 0x000008, "Wrong size on CustomControlOptions_ThirdPerson_BP_InitAimingTargetingPreset");
static_assert(offsetof(CustomControlOptions_ThirdPerson_BP_InitAimingTargetingPreset, Preset) == 0x000000, "Member 'CustomControlOptions_ThirdPerson_BP_InitAimingTargetingPreset::Preset' has a wrong offset!");

// Function CustomControlsRuntime.CustomControlOptions_ThirdPerson.BP_InitMeleeTargetingPreset
// 0x0008 (0x0008 - 0x0000)
struct CustomControlOptions_ThirdPerson_BP_InitMeleeTargetingPreset final
{
public:
	class UTargetingPreset*                       Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomControlOptions_ThirdPerson_BP_InitMeleeTargetingPreset) == 0x000008, "Wrong alignment on CustomControlOptions_ThirdPerson_BP_InitMeleeTargetingPreset");
static_assert(sizeof(CustomControlOptions_ThirdPerson_BP_InitMeleeTargetingPreset) == 0x000008, "Wrong size on CustomControlOptions_ThirdPerson_BP_InitMeleeTargetingPreset");
static_assert(offsetof(CustomControlOptions_ThirdPerson_BP_InitMeleeTargetingPreset, Preset) == 0x000000, "Member 'CustomControlOptions_ThirdPerson_BP_InitMeleeTargetingPreset::Preset' has a wrong offset!");

// Function CustomControlsRuntime.CustomControlOptions_ThirdPerson.BP_InitRangedTargetingPreset
// 0x0008 (0x0008 - 0x0000)
struct CustomControlOptions_ThirdPerson_BP_InitRangedTargetingPreset final
{
public:
	class UTargetingPreset*                       Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomControlOptions_ThirdPerson_BP_InitRangedTargetingPreset) == 0x000008, "Wrong alignment on CustomControlOptions_ThirdPerson_BP_InitRangedTargetingPreset");
static_assert(sizeof(CustomControlOptions_ThirdPerson_BP_InitRangedTargetingPreset) == 0x000008, "Wrong size on CustomControlOptions_ThirdPerson_BP_InitRangedTargetingPreset");
static_assert(offsetof(CustomControlOptions_ThirdPerson_BP_InitRangedTargetingPreset, Preset) == 0x000000, "Member 'CustomControlOptions_ThirdPerson_BP_InitRangedTargetingPreset::Preset' has a wrong offset!");

// Function CustomControlsRuntime.CustomControlOptions_ThirdPerson.BP_InitRetentionTargetingPreset
// 0x0008 (0x0008 - 0x0000)
struct CustomControlOptions_ThirdPerson_BP_InitRetentionTargetingPreset final
{
public:
	class UTargetingPreset*                       Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomControlOptions_ThirdPerson_BP_InitRetentionTargetingPreset) == 0x000008, "Wrong alignment on CustomControlOptions_ThirdPerson_BP_InitRetentionTargetingPreset");
static_assert(sizeof(CustomControlOptions_ThirdPerson_BP_InitRetentionTargetingPreset) == 0x000008, "Wrong size on CustomControlOptions_ThirdPerson_BP_InitRetentionTargetingPreset");
static_assert(offsetof(CustomControlOptions_ThirdPerson_BP_InitRetentionTargetingPreset, Preset) == 0x000000, "Member 'CustomControlOptions_ThirdPerson_BP_InitRetentionTargetingPreset::Preset' has a wrong offset!");

// Function CustomControlsRuntime.FortControllerComponent_CustomControls.CreateOptionsWithPriority
// 0x0020 (0x0020 - 0x0000)
struct FortControllerComponent_CustomControls_CreateOptionsWithPriority final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCustomControlOptions_Base> OptionsClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomControlOptions_Base*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CustomControls_CreateOptionsWithPriority) == 0x000008, "Wrong alignment on FortControllerComponent_CustomControls_CreateOptionsWithPriority");
static_assert(sizeof(FortControllerComponent_CustomControls_CreateOptionsWithPriority) == 0x000020, "Wrong size on FortControllerComponent_CustomControls_CreateOptionsWithPriority");
static_assert(offsetof(FortControllerComponent_CustomControls_CreateOptionsWithPriority, ContextObject) == 0x000000, "Member 'FortControllerComponent_CustomControls_CreateOptionsWithPriority::ContextObject' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CustomControls_CreateOptionsWithPriority, OptionsClass) == 0x000008, "Member 'FortControllerComponent_CustomControls_CreateOptionsWithPriority::OptionsClass' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CustomControls_CreateOptionsWithPriority, Priority) == 0x000010, "Member 'FortControllerComponent_CustomControls_CreateOptionsWithPriority::Priority' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CustomControls_CreateOptionsWithPriority, bEnabled) == 0x000014, "Member 'FortControllerComponent_CustomControls_CreateOptionsWithPriority::bEnabled' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CustomControls_CreateOptionsWithPriority, ReturnValue) == 0x000018, "Member 'FortControllerComponent_CustomControls_CreateOptionsWithPriority::ReturnValue' has a wrong offset!");

// Function CustomControlsRuntime.FortControllerComponent_CustomControls.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_CustomControls_GetOptions final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomControlOptions_Base*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CustomControls_GetOptions) == 0x000008, "Wrong alignment on FortControllerComponent_CustomControls_GetOptions");
static_assert(sizeof(FortControllerComponent_CustomControls_GetOptions) == 0x000010, "Wrong size on FortControllerComponent_CustomControls_GetOptions");
static_assert(offsetof(FortControllerComponent_CustomControls_GetOptions, ContextObject) == 0x000000, "Member 'FortControllerComponent_CustomControls_GetOptions::ContextObject' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CustomControls_GetOptions, ReturnValue) == 0x000008, "Member 'FortControllerComponent_CustomControls_GetOptions::ReturnValue' has a wrong offset!");

// Function CustomControlsRuntime.FortControllerComponent_CustomControls.NotifyOptionsUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_CustomControls_NotifyOptionsUpdated final
{
public:
	const class UCustomControlOptions_Base*       Options;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CustomControls_NotifyOptionsUpdated) == 0x000008, "Wrong alignment on FortControllerComponent_CustomControls_NotifyOptionsUpdated");
static_assert(sizeof(FortControllerComponent_CustomControls_NotifyOptionsUpdated) == 0x000008, "Wrong size on FortControllerComponent_CustomControls_NotifyOptionsUpdated");
static_assert(offsetof(FortControllerComponent_CustomControls_NotifyOptionsUpdated, Options) == 0x000000, "Member 'FortControllerComponent_CustomControls_NotifyOptionsUpdated::Options' has a wrong offset!");

// Function CustomControlsRuntime.FortControllerComponent_CustomControls.OnRep_ActiveOptions
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_CustomControls_OnRep_ActiveOptions final
{
public:
	class UCustomControlOptions_Base*             OldOptions;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CustomControls_OnRep_ActiveOptions) == 0x000008, "Wrong alignment on FortControllerComponent_CustomControls_OnRep_ActiveOptions");
static_assert(sizeof(FortControllerComponent_CustomControls_OnRep_ActiveOptions) == 0x000008, "Wrong size on FortControllerComponent_CustomControls_OnRep_ActiveOptions");
static_assert(offsetof(FortControllerComponent_CustomControls_OnRep_ActiveOptions, OldOptions) == 0x000000, "Member 'FortControllerComponent_CustomControls_OnRep_ActiveOptions::OldOptions' has a wrong offset!");

// Function CustomControlsRuntime.FortControllerComponent_CustomControls.RemoveOptions
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_CustomControls_RemoveOptions final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CustomControls_RemoveOptions) == 0x000008, "Wrong alignment on FortControllerComponent_CustomControls_RemoveOptions");
static_assert(sizeof(FortControllerComponent_CustomControls_RemoveOptions) == 0x000008, "Wrong size on FortControllerComponent_CustomControls_RemoveOptions");
static_assert(offsetof(FortControllerComponent_CustomControls_RemoveOptions, ContextObject) == 0x000000, "Member 'FortControllerComponent_CustomControls_RemoveOptions::ContextObject' has a wrong offset!");

// Function CustomControlsRuntime.FortControllerComponent_CustomControls.ServerSetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_CustomControls_ServerSetFocusTarget final
{
public:
	const class AActor*                           NewFocusTarget;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CustomControls_ServerSetFocusTarget) == 0x000008, "Wrong alignment on FortControllerComponent_CustomControls_ServerSetFocusTarget");
static_assert(sizeof(FortControllerComponent_CustomControls_ServerSetFocusTarget) == 0x000008, "Wrong size on FortControllerComponent_CustomControls_ServerSetFocusTarget");
static_assert(offsetof(FortControllerComponent_CustomControls_ServerSetFocusTarget, NewFocusTarget) == 0x000000, "Member 'FortControllerComponent_CustomControls_ServerSetFocusTarget::NewFocusTarget' has a wrong offset!");

// Function CustomControlsRuntime.FortControllerComponent_CustomControls.ServerSetOptionsQueueBlocked
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_CustomControls_ServerSetOptionsQueueBlocked final
{
public:
	bool                                          bIsBlocked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CustomControls_ServerSetOptionsQueueBlocked) == 0x000001, "Wrong alignment on FortControllerComponent_CustomControls_ServerSetOptionsQueueBlocked");
static_assert(sizeof(FortControllerComponent_CustomControls_ServerSetOptionsQueueBlocked) == 0x000001, "Wrong size on FortControllerComponent_CustomControls_ServerSetOptionsQueueBlocked");
static_assert(offsetof(FortControllerComponent_CustomControls_ServerSetOptionsQueueBlocked, bIsBlocked) == 0x000000, "Member 'FortControllerComponent_CustomControls_ServerSetOptionsQueueBlocked::bIsBlocked' has a wrong offset!");

// Function CustomControlsRuntime.FortControllerComponent_CustomControls.SetOptionsEnabled
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_CustomControls_SetOptionsEnabled final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_CustomControls_SetOptionsEnabled) == 0x000008, "Wrong alignment on FortControllerComponent_CustomControls_SetOptionsEnabled");
static_assert(sizeof(FortControllerComponent_CustomControls_SetOptionsEnabled) == 0x000010, "Wrong size on FortControllerComponent_CustomControls_SetOptionsEnabled");
static_assert(offsetof(FortControllerComponent_CustomControls_SetOptionsEnabled, ContextObject) == 0x000000, "Member 'FortControllerComponent_CustomControls_SetOptionsEnabled::ContextObject' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CustomControls_SetOptionsEnabled, bEnabled) == 0x000008, "Member 'FortControllerComponent_CustomControls_SetOptionsEnabled::bEnabled' has a wrong offset!");

// Function CustomControlsRuntime.FortControllerComponent_CustomControls.WeaponGetAimRotOverride
// 0x0030 (0x0030 - 0x0000)
struct FortControllerComponent_CustomControls_WeaponGetAimRotOverride final
{
public:
	const class AFortWeapon*                      Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAbilityTargetingSource                   TargetingSource;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OutOverrideAimRot;                                 // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOutExecutionResult;                               // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_CustomControls_WeaponGetAimRotOverride) == 0x000008, "Wrong alignment on FortControllerComponent_CustomControls_WeaponGetAimRotOverride");
static_assert(sizeof(FortControllerComponent_CustomControls_WeaponGetAimRotOverride) == 0x000030, "Wrong size on FortControllerComponent_CustomControls_WeaponGetAimRotOverride");
static_assert(offsetof(FortControllerComponent_CustomControls_WeaponGetAimRotOverride, Weapon) == 0x000000, "Member 'FortControllerComponent_CustomControls_WeaponGetAimRotOverride::Weapon' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CustomControls_WeaponGetAimRotOverride, TargetingSource) == 0x000008, "Member 'FortControllerComponent_CustomControls_WeaponGetAimRotOverride::TargetingSource' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CustomControls_WeaponGetAimRotOverride, OutOverrideAimRot) == 0x000010, "Member 'FortControllerComponent_CustomControls_WeaponGetAimRotOverride::OutOverrideAimRot' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CustomControls_WeaponGetAimRotOverride, bOutExecutionResult) == 0x000028, "Member 'FortControllerComponent_CustomControls_WeaponGetAimRotOverride::bOutExecutionResult' has a wrong offset!");

}

