#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomControlsRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK
{

// Enum CustomControlsRuntime.ECustomControlsAttackType
// NumValues: 0x0004
enum class ECustomControlsAttackType : uint8
{
	None                                     = 0,
	Ranged                                   = 1,
	Melee                                    = 2,
	Throw                                    = 3,
};

// Enum CustomControlsRuntime.ECustomControlsTargetingType
// NumValues: 0x0004
enum class ECustomControlsTargetingType : uint8
{
	None                                     = 0,
	Aiming                                   = 1,
	Windup                                   = 2,
	MeleeLockOn                              = 3,
};

// Enum CustomControlsRuntime.ECustomControlsWeaponType
// NumValues: 0x0004
enum class ECustomControlsWeaponType : uint8
{
	None                                     = 0,
	Ranged                                   = 1,
	Melee                                    = 2,
	Other                                    = 3,
};

// Enum CustomControlsRuntime.EPlaceFireMissed
// NumValues: 0x0009
enum class EPlaceFireMissed : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	Up                                       = 3,
	Down                                     = 4,
	UpLeft                                   = 5,
	UpRight                                  = 6,
	DownLeft                                 = 7,
	DownRight                                = 8,
};

// Enum CustomControlsRuntime.ECustomControlsFacingMode
// NumValues: 0x0003
enum class ECustomControlsFacingMode : uint8
{
	Movement                                 = 0,
	Maintained                               = 1,
	Fixed                                    = 2,
};

// Enum CustomControlsRuntime.ECustomControlsLockOnMode
// NumValues: 0x0005
enum class ECustomControlsLockOnMode : uint8
{
	Never                                    = 0,
	Always                                   = 1,
	Shooting                                 = 2,
	Aiming                                   = 3,
	ShootingOrAiming                         = 4,
};

// ScriptStruct CustomControlsRuntime.CustomControlsState
// 0x0004 (0x0004 - 0x0000)
struct FCustomControlsState final
{
public:
	bool                                          bHasFocusTarget;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomControlsAttackType                     AttackType;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomControlsTargetingType                  TargetingType;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomControlsWeaponType                     WeaponType;                                        // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomControlsState) == 0x000001, "Wrong alignment on FCustomControlsState");
static_assert(sizeof(FCustomControlsState) == 0x000004, "Wrong size on FCustomControlsState");
static_assert(offsetof(FCustomControlsState, bHasFocusTarget) == 0x000000, "Member 'FCustomControlsState::bHasFocusTarget' has a wrong offset!");
static_assert(offsetof(FCustomControlsState, AttackType) == 0x000001, "Member 'FCustomControlsState::AttackType' has a wrong offset!");
static_assert(offsetof(FCustomControlsState, TargetingType) == 0x000002, "Member 'FCustomControlsState::TargetingType' has a wrong offset!");
static_assert(offsetof(FCustomControlsState, WeaponType) == 0x000003, "Member 'FCustomControlsState::WeaponType' has a wrong offset!");

// ScriptStruct CustomControlsRuntime.InteractionPointOptions
// 0x0010 (0x0010 - 0x0000)
struct FInteractionPointOptions final
{
public:
	EInteractionOrigin                            InteractionOrigin;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InteractDistance;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractHighlightDistance;                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractExtentRadius;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionPointOptions) == 0x000004, "Wrong alignment on FInteractionPointOptions");
static_assert(sizeof(FInteractionPointOptions) == 0x000010, "Wrong size on FInteractionPointOptions");
static_assert(offsetof(FInteractionPointOptions, InteractionOrigin) == 0x000000, "Member 'FInteractionPointOptions::InteractionOrigin' has a wrong offset!");
static_assert(offsetof(FInteractionPointOptions, InteractDistance) == 0x000004, "Member 'FInteractionPointOptions::InteractDistance' has a wrong offset!");
static_assert(offsetof(FInteractionPointOptions, InteractHighlightDistance) == 0x000008, "Member 'FInteractionPointOptions::InteractHighlightDistance' has a wrong offset!");
static_assert(offsetof(FInteractionPointOptions, InteractExtentRadius) == 0x00000C, "Member 'FInteractionPointOptions::InteractExtentRadius' has a wrong offset!");

// ScriptStruct CustomControlsRuntime.FortMovementMode_ExtBaseCustomControlsCreationData
// 0x0000 (0x0008 - 0x0008)
struct FFortMovementMode_ExtBaseCustomControlsCreationData : public FFortMovementMode_BaseExtCreationData
{
};
static_assert(alignof(FFortMovementMode_ExtBaseCustomControlsCreationData) == 0x000008, "Wrong alignment on FFortMovementMode_ExtBaseCustomControlsCreationData");
static_assert(sizeof(FFortMovementMode_ExtBaseCustomControlsCreationData) == 0x000008, "Wrong size on FFortMovementMode_ExtBaseCustomControlsCreationData");

// ScriptStruct CustomControlsRuntime.FortMovementMode_ExtCCThirdPersonCreationData
// 0x0018 (0x0020 - 0x0008)
struct FFortMovementMode_ExtCCThirdPersonCreationData final : public FFortMovementMode_ExtBaseCustomControlsCreationData
{
public:
	float                                         RotationRateYaw;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMultiplier;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomControlsFacingMode                     FacingMode;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedFacingYaw;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateTowardsTarget;                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMovementMode_ExtCCThirdPersonCreationData) == 0x000008, "Wrong alignment on FFortMovementMode_ExtCCThirdPersonCreationData");
static_assert(sizeof(FFortMovementMode_ExtCCThirdPersonCreationData) == 0x000020, "Wrong size on FFortMovementMode_ExtCCThirdPersonCreationData");
static_assert(offsetof(FFortMovementMode_ExtCCThirdPersonCreationData, RotationRateYaw) == 0x000008, "Member 'FFortMovementMode_ExtCCThirdPersonCreationData::RotationRateYaw' has a wrong offset!");
static_assert(offsetof(FFortMovementMode_ExtCCThirdPersonCreationData, SpeedMultiplier) == 0x00000C, "Member 'FFortMovementMode_ExtCCThirdPersonCreationData::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FFortMovementMode_ExtCCThirdPersonCreationData, FacingMode) == 0x000010, "Member 'FFortMovementMode_ExtCCThirdPersonCreationData::FacingMode' has a wrong offset!");
static_assert(offsetof(FFortMovementMode_ExtCCThirdPersonCreationData, FixedFacingYaw) == 0x000014, "Member 'FFortMovementMode_ExtCCThirdPersonCreationData::FixedFacingYaw' has a wrong offset!");
static_assert(offsetof(FFortMovementMode_ExtCCThirdPersonCreationData, bRotateTowardsTarget) == 0x000018, "Member 'FFortMovementMode_ExtCCThirdPersonCreationData::bRotateTowardsTarget' has a wrong offset!");

// ScriptStruct CustomControlsRuntime.CustomControlMovementModeData
// 0x0030 (0x0030 - 0x0000)
struct FCustomControlMovementModeData final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortMovementMode_ExtLogicCCThirdPerson> Class;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMovementMode_ExtCCThirdPersonCreationData CreationData;                                      // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomControlMovementModeData) == 0x000008, "Wrong alignment on FCustomControlMovementModeData");
static_assert(sizeof(FCustomControlMovementModeData) == 0x000030, "Wrong size on FCustomControlMovementModeData");
static_assert(offsetof(FCustomControlMovementModeData, bEnabled) == 0x000000, "Member 'FCustomControlMovementModeData::bEnabled' has a wrong offset!");
static_assert(offsetof(FCustomControlMovementModeData, Class) == 0x000008, "Member 'FCustomControlMovementModeData::Class' has a wrong offset!");
static_assert(offsetof(FCustomControlMovementModeData, CreationData) == 0x000010, "Member 'FCustomControlMovementModeData::CreationData' has a wrong offset!");

// ScriptStruct CustomControlsRuntime.FortMovementMode_ExtBaseCustomControlsRuntimeData
// 0x0000 (0x0010 - 0x0010)
struct FFortMovementMode_ExtBaseCustomControlsRuntimeData : public FFortMovementMode_BaseExtRuntimeData
{
};
static_assert(alignof(FFortMovementMode_ExtBaseCustomControlsRuntimeData) == 0x000008, "Wrong alignment on FFortMovementMode_ExtBaseCustomControlsRuntimeData");
static_assert(sizeof(FFortMovementMode_ExtBaseCustomControlsRuntimeData) == 0x000010, "Wrong size on FFortMovementMode_ExtBaseCustomControlsRuntimeData");

// ScriptStruct CustomControlsRuntime.FortMovementMode_ExtCCThirdPersonRuntimeData
// 0x0030 (0x0040 - 0x0010)
struct FFortMovementMode_ExtCCThirdPersonRuntimeData final : public FFortMovementMode_ExtBaseCustomControlsRuntimeData
{
public:
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMovementMode_ExtCCThirdPersonRuntimeData) == 0x000008, "Wrong alignment on FFortMovementMode_ExtCCThirdPersonRuntimeData");
static_assert(sizeof(FFortMovementMode_ExtCCThirdPersonRuntimeData) == 0x000040, "Wrong size on FFortMovementMode_ExtCCThirdPersonRuntimeData");

}

