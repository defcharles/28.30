#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseColors

#include "Basic.hpp"


namespace SDK
{

// VerseStruct VerseColors.Colors_color
// 0x0018 (0x0018 - 0x0000)
struct FColors_color final
{
public:
	double                                        __verse_0x35184040_R;                              // 0x0000(0x0008)(Edit, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x98BF8727_G;                              // 0x0008(0x0008)(Edit, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0xAA4F5910_B;                              // 0x0010(0x0008)(Edit, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FColors_color) == 0x000008, "Wrong alignment on FColors_color");
static_assert(sizeof(FColors_color) == 0x000018, "Wrong size on FColors_color");
static_assert(offsetof(FColors_color, __verse_0x35184040_R) == 0x000000, "Member 'FColors_color::__verse_0x35184040_R' has a wrong offset!");
static_assert(offsetof(FColors_color, __verse_0x98BF8727_G) == 0x000008, "Member 'FColors_color::__verse_0x98BF8727_G' has a wrong offset!");
static_assert(offsetof(FColors_color, __verse_0xAA4F5910_B) == 0x000010, "Member 'FColors_color::__verse_0xAA4F5910_B' has a wrong offset!");

// VerseStruct VerseColors.tuple_Lcolor_Mcolor_R
// 0x0030 (0x0030 - 0x0000)
struct Ftuple_Lcolor_Mcolor_R final
{
public:
	struct FColors_color                          __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct FColors_color                          __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lcolor_Mcolor_R) == 0x000008, "Wrong alignment on Ftuple_Lcolor_Mcolor_R");
static_assert(sizeof(Ftuple_Lcolor_Mcolor_R) == 0x000030, "Wrong size on Ftuple_Lcolor_Mcolor_R");
static_assert(offsetof(Ftuple_Lcolor_Mcolor_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lcolor_Mcolor_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcolor_Mcolor_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lcolor_Mcolor_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseColors.tuple_Lcolor_Mfloat_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lcolor_Mfloat_R final
{
public:
	struct FColors_color                          __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lcolor_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lcolor_Mfloat_R");
static_assert(sizeof(Ftuple_Lcolor_Mfloat_R) == 0x000020, "Wrong size on Ftuple_Lcolor_Mfloat_R");
static_assert(offsetof(Ftuple_Lcolor_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lcolor_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcolor_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lcolor_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseColors.tuple_Lcolor_Mint_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lcolor_Mint_R final
{
public:
	struct FColors_color                          __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	int64                                         __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lcolor_Mint_R) == 0x000008, "Wrong alignment on Ftuple_Lcolor_Mint_R");
static_assert(sizeof(Ftuple_Lcolor_Mint_R) == 0x000020, "Wrong size on Ftuple_Lcolor_Mint_R");
static_assert(offsetof(Ftuple_Lcolor_Mint_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lcolor_Mint_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcolor_Mint_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lcolor_Mint_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseColors.tuple_Lfloat_Mcolor_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lfloat_Mcolor_R final
{
public:
	double                                        __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColors_color                          __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lfloat_Mcolor_R) == 0x000008, "Wrong alignment on Ftuple_Lfloat_Mcolor_R");
static_assert(sizeof(Ftuple_Lfloat_Mcolor_R) == 0x000020, "Wrong size on Ftuple_Lfloat_Mcolor_R");
static_assert(offsetof(Ftuple_Lfloat_Mcolor_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lfloat_Mcolor_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfloat_Mcolor_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lfloat_Mcolor_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseColors.tuple_Lfloat_Mfloat_Mfloat_R
// 0x0018 (0x0018 - 0x0000)
struct VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R final
{
public:
	double                                        __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x932BF92E_Elem2;                          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R) == 0x000008, "Wrong alignment on VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R");
static_assert(sizeof(VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R) == 0x000018, "Wrong size on VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R");
static_assert(offsetof(VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R, __verse_0x932BF92E_Elem2) == 0x000010, "Member 'VerseColors::Ftuple_Lfloat_Mfloat_Mfloat_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// VerseStruct VerseColors.tuple_Lint_Mcolor_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lint_Mcolor_R final
{
public:
	int64                                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColors_color                          __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lint_Mcolor_R) == 0x000008, "Wrong alignment on Ftuple_Lint_Mcolor_R");
static_assert(sizeof(Ftuple_Lint_Mcolor_R) == 0x000020, "Wrong size on Ftuple_Lint_Mcolor_R");
static_assert(offsetof(Ftuple_Lint_Mcolor_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lint_Mcolor_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lint_Mcolor_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lint_Mcolor_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// VerseStruct VerseColors.tuple_Lint_Mint_Mint_R
// 0x0018 (0x0018 - 0x0000)
struct VerseColors::Ftuple_Lint_Mint_Mint_R final
{
public:
	int64                                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x932BF92E_Elem2;                          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VerseColors::Ftuple_Lint_Mint_Mint_R) == 0x000008, "Wrong alignment on VerseColors::Ftuple_Lint_Mint_Mint_R");
static_assert(sizeof(VerseColors::Ftuple_Lint_Mint_Mint_R) == 0x000018, "Wrong size on VerseColors::Ftuple_Lint_Mint_Mint_R");
static_assert(offsetof(VerseColors::Ftuple_Lint_Mint_Mint_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseColors::Ftuple_Lint_Mint_Mint_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseColors::Ftuple_Lint_Mint_Mint_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'VerseColors::Ftuple_Lint_Mint_Mint_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(VerseColors::Ftuple_Lint_Mint_Mint_R, __verse_0x932BF92E_Elem2) == 0x000010, "Member 'VerseColors::Ftuple_Lint_Mint_Mint_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

}

