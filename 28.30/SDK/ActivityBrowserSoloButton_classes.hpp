#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActivityBrowserSoloButton

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ActivityBrowserSoloButton.ActivityBrowserSoloButton_C
// 0x00C0 (0x1690 - 0x15D0)
class UActivityBrowserSoloButton_C final : public UFortActivityBrowserSoloButton
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x15D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Pressed;                                           // 0x15D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover;                                             // 0x15E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                ButtonMaterialBorder;                              // 0x15E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                DynamicPaddingBorder;                              // 0x15F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               MinSizesSB;                                        // 0x15F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        TextShearX;                                        // 0x1600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TextShearY;                                        // 0x1608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                TextPadding;                                       // 0x1610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDisabled;                                        // 0x1620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1621[0x7];                                     // 0x1621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ButtonMaterial;                                    // 0x1628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ButtonSharpnessX;                                  // 0x1630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ButtonSharpnessY;                                  // 0x1638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UseBoxScalingX;                                    // 0x1640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UseBoxScalingY;                                    // 0x1648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ButtonBoxScaleSizeX;                               // 0x1650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ButtonBoxScaleSizeY;                               // 0x1658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DisabledParamName;                                 // 0x1660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SharpnessVParamName;                               // 0x1664(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SharpnessUParamName;                               // 0x1668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseBoxScaleUParamName;                             // 0x166C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseBoxScaleVParamName;                             // 0x1670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideButtonBackingOnGamepad;                        // 0x1674(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlayReversed;                                // 0x1675(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1676[0x2];                                     // 0x1676(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HoverAnimateVar;                                   // 0x1678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        PressedAnimateVar;                                 // 0x1680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnClicked();
	void BP_OnDeselected();
	void BP_OnDisabled();
	void BP_OnEnabled();
	void BP_OnHovered();
	void BP_OnSelected();
	void BP_OnUnhovered();
	void Construct();
	void Destruct();
	void EventOnInputMethodChanged(ECommonInputType bNewInputType);
	void ExecuteUbergraph_ActivityBrowserSoloButton(int32 EntryPoint);
	void Finished_3B04A1D04A2128E7C8B3D5BC22792871();
	void MakeButtonBrush(class UObject* ResourceObject, struct FSlateBrush* SlateBrush);
	void OnVisibilityChange(ESlateVisibility InVisibility);
	void PreConstruct(bool IsDesignTime);
	void ResetFontMaterial();
	void ResetMaterials();
	void SetButtonMaterial();
	void SetHoverAnimateVar(double NewValue);
	void SetPressedAnimateVar(double NewValue);
	void SetText(const class FText& Text);
	void SetTextStyle();
	void Toggle_Mobile_Overrides(bool bApplyMobileOverrides);
	void UpdateStylingOnInputType(ECommonInputType Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ActivityBrowserSoloButton_C">();
	}
	static class UActivityBrowserSoloButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivityBrowserSoloButton_C>();
	}
};
static_assert(alignof(UActivityBrowserSoloButton_C) == 0x000010, "Wrong alignment on UActivityBrowserSoloButton_C");
static_assert(sizeof(UActivityBrowserSoloButton_C) == 0x001690, "Wrong size on UActivityBrowserSoloButton_C");
static_assert(offsetof(UActivityBrowserSoloButton_C, UberGraphFrame) == 0x0015D0, "Member 'UActivityBrowserSoloButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, Pressed) == 0x0015D8, "Member 'UActivityBrowserSoloButton_C::Pressed' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, Hover) == 0x0015E0, "Member 'UActivityBrowserSoloButton_C::Hover' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonMaterialBorder) == 0x0015E8, "Member 'UActivityBrowserSoloButton_C::ButtonMaterialBorder' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, DynamicPaddingBorder) == 0x0015F0, "Member 'UActivityBrowserSoloButton_C::DynamicPaddingBorder' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, MinSizesSB) == 0x0015F8, "Member 'UActivityBrowserSoloButton_C::MinSizesSB' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, TextShearX) == 0x001600, "Member 'UActivityBrowserSoloButton_C::TextShearX' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, TextShearY) == 0x001608, "Member 'UActivityBrowserSoloButton_C::TextShearY' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, TextPadding) == 0x001610, "Member 'UActivityBrowserSoloButton_C::TextPadding' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, IsDisabled) == 0x001620, "Member 'UActivityBrowserSoloButton_C::IsDisabled' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonMaterial) == 0x001628, "Member 'UActivityBrowserSoloButton_C::ButtonMaterial' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonSharpnessX) == 0x001630, "Member 'UActivityBrowserSoloButton_C::ButtonSharpnessX' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonSharpnessY) == 0x001638, "Member 'UActivityBrowserSoloButton_C::ButtonSharpnessY' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, UseBoxScalingX) == 0x001640, "Member 'UActivityBrowserSoloButton_C::UseBoxScalingX' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, UseBoxScalingY) == 0x001648, "Member 'UActivityBrowserSoloButton_C::UseBoxScalingY' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonBoxScaleSizeX) == 0x001650, "Member 'UActivityBrowserSoloButton_C::ButtonBoxScaleSizeX' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonBoxScaleSizeY) == 0x001658, "Member 'UActivityBrowserSoloButton_C::ButtonBoxScaleSizeY' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, DisabledParamName) == 0x001660, "Member 'UActivityBrowserSoloButton_C::DisabledParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, SharpnessVParamName) == 0x001664, "Member 'UActivityBrowserSoloButton_C::SharpnessVParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, SharpnessUParamName) == 0x001668, "Member 'UActivityBrowserSoloButton_C::SharpnessUParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, UseBoxScaleUParamName) == 0x00166C, "Member 'UActivityBrowserSoloButton_C::UseBoxScaleUParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, UseBoxScaleVParamName) == 0x001670, "Member 'UActivityBrowserSoloButton_C::UseBoxScaleVParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, HideButtonBackingOnGamepad) == 0x001674, "Member 'UActivityBrowserSoloButton_C::HideButtonBackingOnGamepad' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ShouldPlayReversed) == 0x001675, "Member 'UActivityBrowserSoloButton_C::ShouldPlayReversed' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, HoverAnimateVar) == 0x001678, "Member 'UActivityBrowserSoloButton_C::HoverAnimateVar' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, PressedAnimateVar) == 0x001680, "Member 'UActivityBrowserSoloButton_C::PressedAnimateVar' has a wrong offset!");

}

