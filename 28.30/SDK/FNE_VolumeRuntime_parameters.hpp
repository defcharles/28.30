#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FNE_VolumeRuntime

#include "Basic.hpp"

#include "FNE_VolumeRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function FNE_VolumeRuntime.FNE_VolumeComponent.BindToOnOtherActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_BindToOnOtherActorBeginOverlap final
{
public:
	TDelegate<void(class AActor* OtherActor)>     InEvent;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeComponent_BindToOnOtherActorBeginOverlap) == 0x000004, "Wrong alignment on FNE_VolumeComponent_BindToOnOtherActorBeginOverlap");
static_assert(sizeof(FNE_VolumeComponent_BindToOnOtherActorBeginOverlap) == 0x000010, "Wrong size on FNE_VolumeComponent_BindToOnOtherActorBeginOverlap");
static_assert(offsetof(FNE_VolumeComponent_BindToOnOtherActorBeginOverlap, InEvent) == 0x000000, "Member 'FNE_VolumeComponent_BindToOnOtherActorBeginOverlap::InEvent' has a wrong offset!");
static_assert(offsetof(FNE_VolumeComponent_BindToOnOtherActorBeginOverlap, ReturnValue) == 0x00000C, "Member 'FNE_VolumeComponent_BindToOnOtherActorBeginOverlap::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.BindToOnOtherActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_BindToOnOtherActorEndOverlap final
{
public:
	TDelegate<void(class AActor* OtherActor)>     InEvent;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeComponent_BindToOnOtherActorEndOverlap) == 0x000004, "Wrong alignment on FNE_VolumeComponent_BindToOnOtherActorEndOverlap");
static_assert(sizeof(FNE_VolumeComponent_BindToOnOtherActorEndOverlap) == 0x000010, "Wrong size on FNE_VolumeComponent_BindToOnOtherActorEndOverlap");
static_assert(offsetof(FNE_VolumeComponent_BindToOnOtherActorEndOverlap, InEvent) == 0x000000, "Member 'FNE_VolumeComponent_BindToOnOtherActorEndOverlap::InEvent' has a wrong offset!");
static_assert(offsetof(FNE_VolumeComponent_BindToOnOtherActorEndOverlap, ReturnValue) == 0x00000C, "Member 'FNE_VolumeComponent_BindToOnOtherActorEndOverlap::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetSpawnedVolumeBoundsComponent
// 0x0008 (0x0008 - 0x0000)
struct FNE_VolumeComponent_GetSpawnedVolumeBoundsComponent final
{
public:
	class UOverlapComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_GetSpawnedVolumeBoundsComponent) == 0x000008, "Wrong alignment on FNE_VolumeComponent_GetSpawnedVolumeBoundsComponent");
static_assert(sizeof(FNE_VolumeComponent_GetSpawnedVolumeBoundsComponent) == 0x000008, "Wrong size on FNE_VolumeComponent_GetSpawnedVolumeBoundsComponent");
static_assert(offsetof(FNE_VolumeComponent_GetSpawnedVolumeBoundsComponent, ReturnValue) == 0x000000, "Member 'FNE_VolumeComponent_GetSpawnedVolumeBoundsComponent::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.HandleNotifyActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_HandleNotifyActorBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_HandleNotifyActorBeginOverlap) == 0x000008, "Wrong alignment on FNE_VolumeComponent_HandleNotifyActorBeginOverlap");
static_assert(sizeof(FNE_VolumeComponent_HandleNotifyActorBeginOverlap) == 0x000010, "Wrong size on FNE_VolumeComponent_HandleNotifyActorBeginOverlap");
static_assert(offsetof(FNE_VolumeComponent_HandleNotifyActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'FNE_VolumeComponent_HandleNotifyActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(FNE_VolumeComponent_HandleNotifyActorBeginOverlap, OtherActor) == 0x000008, "Member 'FNE_VolumeComponent_HandleNotifyActorBeginOverlap::OtherActor' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.HandleNotifyActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_HandleNotifyActorEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_HandleNotifyActorEndOverlap) == 0x000008, "Wrong alignment on FNE_VolumeComponent_HandleNotifyActorEndOverlap");
static_assert(sizeof(FNE_VolumeComponent_HandleNotifyActorEndOverlap) == 0x000010, "Wrong size on FNE_VolumeComponent_HandleNotifyActorEndOverlap");
static_assert(offsetof(FNE_VolumeComponent_HandleNotifyActorEndOverlap, OverlappedActor) == 0x000000, "Member 'FNE_VolumeComponent_HandleNotifyActorEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(FNE_VolumeComponent_HandleNotifyActorEndOverlap, OtherActor) == 0x000008, "Member 'FNE_VolumeComponent_HandleNotifyActorEndOverlap::OtherActor' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.HandleNotifyPlayerStateBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap final
{
public:
	class APlayerState*                           TouchingPlayerState;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayVolume*                        Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap) == 0x000008, "Wrong alignment on FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap");
static_assert(sizeof(FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap) == 0x000010, "Wrong size on FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap");
static_assert(offsetof(FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap, TouchingPlayerState) == 0x000000, "Member 'FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap::TouchingPlayerState' has a wrong offset!");
static_assert(offsetof(FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap, Volume) == 0x000008, "Member 'FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap::Volume' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.HandleNotifyPlayerStateEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap final
{
public:
	class APlayerState*                           TouchingPlayerState;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayVolume*                        Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap) == 0x000008, "Wrong alignment on FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap");
static_assert(sizeof(FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap) == 0x000010, "Wrong size on FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap");
static_assert(offsetof(FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap, TouchingPlayerState) == 0x000000, "Member 'FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap::TouchingPlayerState' has a wrong offset!");
static_assert(offsetof(FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap, Volume) == 0x000008, "Member 'FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap::Volume' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.SetEnableOverlap
// 0x0001 (0x0001 - 0x0000)
struct FNE_VolumeComponent_SetEnableOverlap final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_SetEnableOverlap) == 0x000001, "Wrong alignment on FNE_VolumeComponent_SetEnableOverlap");
static_assert(sizeof(FNE_VolumeComponent_SetEnableOverlap) == 0x000001, "Wrong size on FNE_VolumeComponent_SetEnableOverlap");
static_assert(offsetof(FNE_VolumeComponent_SetEnableOverlap, bEnable) == 0x000000, "Member 'FNE_VolumeComponent_SetEnableOverlap::bEnable' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.SetRelativeScale3DForBoundsComponent
// 0x0018 (0x0018 - 0x0000)
struct FNE_VolumeComponent_SetRelativeScale3DForBoundsComponent final
{
public:
	struct FVector                                Scale3D;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_SetRelativeScale3DForBoundsComponent) == 0x000008, "Wrong alignment on FNE_VolumeComponent_SetRelativeScale3DForBoundsComponent");
static_assert(sizeof(FNE_VolumeComponent_SetRelativeScale3DForBoundsComponent) == 0x000018, "Wrong size on FNE_VolumeComponent_SetRelativeScale3DForBoundsComponent");
static_assert(offsetof(FNE_VolumeComponent_SetRelativeScale3DForBoundsComponent, Scale3D) == 0x000000, "Member 'FNE_VolumeComponent_SetRelativeScale3DForBoundsComponent::Scale3D' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.SetStaticMeshForBoundsComponent
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_SetStaticMeshForBoundsComponent final
{
public:
	class UStaticMesh*                            NewMesh;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeComponent_SetStaticMeshForBoundsComponent) == 0x000008, "Wrong alignment on FNE_VolumeComponent_SetStaticMeshForBoundsComponent");
static_assert(sizeof(FNE_VolumeComponent_SetStaticMeshForBoundsComponent) == 0x000010, "Wrong size on FNE_VolumeComponent_SetStaticMeshForBoundsComponent");
static_assert(offsetof(FNE_VolumeComponent_SetStaticMeshForBoundsComponent, NewMesh) == 0x000000, "Member 'FNE_VolumeComponent_SetStaticMeshForBoundsComponent::NewMesh' has a wrong offset!");
static_assert(offsetof(FNE_VolumeComponent_SetStaticMeshForBoundsComponent, ReturnValue) == 0x000008, "Member 'FNE_VolumeComponent_SetStaticMeshForBoundsComponent::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.UnBindFromOnOtherActorBeginOverlap
// 0x000C (0x000C - 0x0000)
struct FNE_VolumeComponent_UnBindFromOnOtherActorBeginOverlap final
{
public:
	TDelegate<void(class AActor* OtherActor)>     InEvent;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_UnBindFromOnOtherActorBeginOverlap) == 0x000004, "Wrong alignment on FNE_VolumeComponent_UnBindFromOnOtherActorBeginOverlap");
static_assert(sizeof(FNE_VolumeComponent_UnBindFromOnOtherActorBeginOverlap) == 0x00000C, "Wrong size on FNE_VolumeComponent_UnBindFromOnOtherActorBeginOverlap");
static_assert(offsetof(FNE_VolumeComponent_UnBindFromOnOtherActorBeginOverlap, InEvent) == 0x000000, "Member 'FNE_VolumeComponent_UnBindFromOnOtherActorBeginOverlap::InEvent' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.UnBindFromOnOtherActorEndOverlap
// 0x000C (0x000C - 0x0000)
struct FNE_VolumeComponent_UnBindFromOnOtherActorEndOverlap final
{
public:
	TDelegate<void(class AActor* OtherActor)>     InEvent;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_UnBindFromOnOtherActorEndOverlap) == 0x000004, "Wrong alignment on FNE_VolumeComponent_UnBindFromOnOtherActorEndOverlap");
static_assert(sizeof(FNE_VolumeComponent_UnBindFromOnOtherActorEndOverlap) == 0x00000C, "Wrong size on FNE_VolumeComponent_UnBindFromOnOtherActorEndOverlap");
static_assert(offsetof(FNE_VolumeComponent_UnBindFromOnOtherActorEndOverlap, InEvent) == 0x000000, "Member 'FNE_VolumeComponent_UnBindFromOnOtherActorEndOverlap::InEvent' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.UpdateOverLapShape
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_UpdateOverLapShape final
{
public:
	EFNEVolumeShapeTypeEnum                       EShape;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomShape;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CustomShape;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_UpdateOverLapShape) == 0x000008, "Wrong alignment on FNE_VolumeComponent_UpdateOverLapShape");
static_assert(sizeof(FNE_VolumeComponent_UpdateOverLapShape) == 0x000010, "Wrong size on FNE_VolumeComponent_UpdateOverLapShape");
static_assert(offsetof(FNE_VolumeComponent_UpdateOverLapShape, EShape) == 0x000000, "Member 'FNE_VolumeComponent_UpdateOverLapShape::EShape' has a wrong offset!");
static_assert(offsetof(FNE_VolumeComponent_UpdateOverLapShape, bUseCustomShape) == 0x000001, "Member 'FNE_VolumeComponent_UpdateOverLapShape::bUseCustomShape' has a wrong offset!");
static_assert(offsetof(FNE_VolumeComponent_UpdateOverLapShape, CustomShape) == 0x000008, "Member 'FNE_VolumeComponent_UpdateOverLapShape::CustomShape' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetAllPlayerPawns
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_GetAllPlayerPawns final
{
public:
	TArray<class APawn*>                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_GetAllPlayerPawns) == 0x000008, "Wrong alignment on FNE_VolumeComponent_GetAllPlayerPawns");
static_assert(sizeof(FNE_VolumeComponent_GetAllPlayerPawns) == 0x000010, "Wrong size on FNE_VolumeComponent_GetAllPlayerPawns");
static_assert(offsetof(FNE_VolumeComponent_GetAllPlayerPawns, ReturnValue) == 0x000000, "Member 'FNE_VolumeComponent_GetAllPlayerPawns::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetAllPlayerStates
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_GetAllPlayerStates final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_GetAllPlayerStates) == 0x000008, "Wrong alignment on FNE_VolumeComponent_GetAllPlayerStates");
static_assert(sizeof(FNE_VolumeComponent_GetAllPlayerStates) == 0x000010, "Wrong size on FNE_VolumeComponent_GetAllPlayerStates");
static_assert(offsetof(FNE_VolumeComponent_GetAllPlayerStates, ReturnValue) == 0x000000, "Member 'FNE_VolumeComponent_GetAllPlayerStates::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetAllTrackedActors
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeComponent_GetAllTrackedActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_GetAllTrackedActors) == 0x000008, "Wrong alignment on FNE_VolumeComponent_GetAllTrackedActors");
static_assert(sizeof(FNE_VolumeComponent_GetAllTrackedActors) == 0x000010, "Wrong size on FNE_VolumeComponent_GetAllTrackedActors");
static_assert(offsetof(FNE_VolumeComponent_GetAllTrackedActors, ReturnValue) == 0x000000, "Member 'FNE_VolumeComponent_GetAllTrackedActors::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetEnableOverlap
// 0x0001 (0x0001 - 0x0000)
struct FNE_VolumeComponent_GetEnableOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_GetEnableOverlap) == 0x000001, "Wrong alignment on FNE_VolumeComponent_GetEnableOverlap");
static_assert(sizeof(FNE_VolumeComponent_GetEnableOverlap) == 0x000001, "Wrong size on FNE_VolumeComponent_GetEnableOverlap");
static_assert(offsetof(FNE_VolumeComponent_GetEnableOverlap, ReturnValue) == 0x000000, "Member 'FNE_VolumeComponent_GetEnableOverlap::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetSpawnedVolume
// 0x0008 (0x0008 - 0x0000)
struct FNE_VolumeComponent_GetSpawnedVolume final
{
public:
	class AFNE_Volume*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeComponent_GetSpawnedVolume) == 0x000008, "Wrong alignment on FNE_VolumeComponent_GetSpawnedVolume");
static_assert(sizeof(FNE_VolumeComponent_GetSpawnedVolume) == 0x000008, "Wrong size on FNE_VolumeComponent_GetSpawnedVolume");
static_assert(offsetof(FNE_VolumeComponent_GetSpawnedVolume, ReturnValue) == 0x000000, "Member 'FNE_VolumeComponent_GetSpawnedVolume::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.ActorEnteredVolume
// 0x0008 (0x0008 - 0x0000)
struct FNE_VolumeOverlapComponent_ActorEnteredVolume final
{
public:
	class AActor*                                 EnteringActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_ActorEnteredVolume) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_ActorEnteredVolume");
static_assert(sizeof(FNE_VolumeOverlapComponent_ActorEnteredVolume) == 0x000008, "Wrong size on FNE_VolumeOverlapComponent_ActorEnteredVolume");
static_assert(offsetof(FNE_VolumeOverlapComponent_ActorEnteredVolume, EnteringActor) == 0x000000, "Member 'FNE_VolumeOverlapComponent_ActorEnteredVolume::EnteringActor' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.ActorExitVolume
// 0x0008 (0x0008 - 0x0000)
struct FNE_VolumeOverlapComponent_ActorExitVolume final
{
public:
	class AActor*                                 LeavingActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_ActorExitVolume) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_ActorExitVolume");
static_assert(sizeof(FNE_VolumeOverlapComponent_ActorExitVolume) == 0x000008, "Wrong size on FNE_VolumeOverlapComponent_ActorExitVolume");
static_assert(offsetof(FNE_VolumeOverlapComponent_ActorExitVolume, LeavingActor) == 0x000000, "Member 'FNE_VolumeOverlapComponent_ActorExitVolume::LeavingActor' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.BindToOnOtherActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap final
{
public:
	TDelegate<void(class AActor* OtherActor)>     InEvent;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap) == 0x000004, "Wrong alignment on FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap");
static_assert(sizeof(FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap");
static_assert(offsetof(FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap, InEvent) == 0x000000, "Member 'FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap::InEvent' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap, ReturnValue) == 0x00000C, "Member 'FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.BindToOnOtherActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap final
{
public:
	TDelegate<void(class AActor* OtherActor)>     InEvent;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap) == 0x000004, "Wrong alignment on FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap");
static_assert(sizeof(FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap");
static_assert(offsetof(FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap, InEvent) == 0x000000, "Member 'FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap::InEvent' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap, ReturnValue) == 0x00000C, "Member 'FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.HandleTrackedActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay");
static_assert(sizeof(FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay");
static_assert(offsetof(FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay, Actor) == 0x000000, "Member 'FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay, EndPlayReason) == 0x000008, "Member 'FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay::EndPlayReason' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.OnBeginActorOverlap
// 0x0108 (0x0108 - 0x0000)
struct FNE_VolumeOverlapComponent_OnBeginActorOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_OnBeginActorOverlap) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_OnBeginActorOverlap");
static_assert(sizeof(FNE_VolumeOverlapComponent_OnBeginActorOverlap) == 0x000108, "Wrong size on FNE_VolumeOverlapComponent_OnBeginActorOverlap");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnBeginActorOverlap, OverlappedComponent) == 0x000000, "Member 'FNE_VolumeOverlapComponent_OnBeginActorOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnBeginActorOverlap, OtherActor) == 0x000008, "Member 'FNE_VolumeOverlapComponent_OnBeginActorOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnBeginActorOverlap, OtherComp) == 0x000010, "Member 'FNE_VolumeOverlapComponent_OnBeginActorOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnBeginActorOverlap, OtherBodyIndex) == 0x000018, "Member 'FNE_VolumeOverlapComponent_OnBeginActorOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnBeginActorOverlap, bFromSweep) == 0x00001C, "Member 'FNE_VolumeOverlapComponent_OnBeginActorOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnBeginActorOverlap, SweepResult) == 0x000020, "Member 'FNE_VolumeOverlapComponent_OnBeginActorOverlap::SweepResult' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.OnEndActorOverlap
// 0x0020 (0x0020 - 0x0000)
struct FNE_VolumeOverlapComponent_OnEndActorOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeOverlapComponent_OnEndActorOverlap) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_OnEndActorOverlap");
static_assert(sizeof(FNE_VolumeOverlapComponent_OnEndActorOverlap) == 0x000020, "Wrong size on FNE_VolumeOverlapComponent_OnEndActorOverlap");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnEndActorOverlap, OverlappedComponent) == 0x000000, "Member 'FNE_VolumeOverlapComponent_OnEndActorOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnEndActorOverlap, OtherActor) == 0x000008, "Member 'FNE_VolumeOverlapComponent_OnEndActorOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnEndActorOverlap, OtherComp) == 0x000010, "Member 'FNE_VolumeOverlapComponent_OnEndActorOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnEndActorOverlap, OtherBodyIndex) == 0x000018, "Member 'FNE_VolumeOverlapComponent_OnEndActorOverlap::OtherBodyIndex' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.OnMinigameRoundEnded
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_OnMinigameRoundEnded final
{
public:
	class AFortPlayerController*                  Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMinigameEnd                              EndMethod;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMinigameState                            NextState;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeOverlapComponent_OnMinigameRoundEnded) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_OnMinigameRoundEnded");
static_assert(sizeof(FNE_VolumeOverlapComponent_OnMinigameRoundEnded) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_OnMinigameRoundEnded");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnMinigameRoundEnded, Instigator) == 0x000000, "Member 'FNE_VolumeOverlapComponent_OnMinigameRoundEnded::Instigator' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnMinigameRoundEnded, EndMethod) == 0x000008, "Member 'FNE_VolumeOverlapComponent_OnMinigameRoundEnded::EndMethod' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_OnMinigameRoundEnded, NextState) == 0x000009, "Member 'FNE_VolumeOverlapComponent_OnMinigameRoundEnded::NextState' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.SetEnableOverlap
// 0x0001 (0x0001 - 0x0000)
struct FNE_VolumeOverlapComponent_SetEnableOverlap final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_SetEnableOverlap) == 0x000001, "Wrong alignment on FNE_VolumeOverlapComponent_SetEnableOverlap");
static_assert(sizeof(FNE_VolumeOverlapComponent_SetEnableOverlap) == 0x000001, "Wrong size on FNE_VolumeOverlapComponent_SetEnableOverlap");
static_assert(offsetof(FNE_VolumeOverlapComponent_SetEnableOverlap, bEnable) == 0x000000, "Member 'FNE_VolumeOverlapComponent_SetEnableOverlap::bEnable' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.SetRelativeScale3DForBoundsComponent
// 0x0018 (0x0018 - 0x0000)
struct FNE_VolumeOverlapComponent_SetRelativeScale3DForBoundsComponent final
{
public:
	struct FVector                                Scale3D;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_SetRelativeScale3DForBoundsComponent) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_SetRelativeScale3DForBoundsComponent");
static_assert(sizeof(FNE_VolumeOverlapComponent_SetRelativeScale3DForBoundsComponent) == 0x000018, "Wrong size on FNE_VolumeOverlapComponent_SetRelativeScale3DForBoundsComponent");
static_assert(offsetof(FNE_VolumeOverlapComponent_SetRelativeScale3DForBoundsComponent, Scale3D) == 0x000000, "Member 'FNE_VolumeOverlapComponent_SetRelativeScale3DForBoundsComponent::Scale3D' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.SetStaticMeshForBoundsComponent
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent final
{
public:
	class UStaticMesh*                            NewMesh;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent");
static_assert(sizeof(FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent");
static_assert(offsetof(FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent, NewMesh) == 0x000000, "Member 'FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent::NewMesh' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent, ReturnValue) == 0x000008, "Member 'FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.SetVolumeMaterial
// 0x0028 (0x0028 - 0x0000)
struct FNE_VolumeOverlapComponent_SetVolumeMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      MaterialToLoad;                                    // 0x0000(0x0020)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementIndex;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeOverlapComponent_SetVolumeMaterial) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_SetVolumeMaterial");
static_assert(sizeof(FNE_VolumeOverlapComponent_SetVolumeMaterial) == 0x000028, "Wrong size on FNE_VolumeOverlapComponent_SetVolumeMaterial");
static_assert(offsetof(FNE_VolumeOverlapComponent_SetVolumeMaterial, MaterialToLoad) == 0x000000, "Member 'FNE_VolumeOverlapComponent_SetVolumeMaterial::MaterialToLoad' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_SetVolumeMaterial, ElementIndex) == 0x000020, "Member 'FNE_VolumeOverlapComponent_SetVolumeMaterial::ElementIndex' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.ShouldAllowOverlapEventToFire
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire final
{
public:
	class AActor*                                 OverlapActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire");
static_assert(sizeof(FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire");
static_assert(offsetof(FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire, OverlapActor) == 0x000000, "Member 'FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire::OverlapActor' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire, ReturnValue) == 0x000008, "Member 'FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.UnBindFromOnOtherActorBeginOverlap
// 0x000C (0x000C - 0x0000)
struct FNE_VolumeOverlapComponent_UnBindFromOnOtherActorBeginOverlap final
{
public:
	TDelegate<void(class AActor* OtherActor)>     InEvent;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_UnBindFromOnOtherActorBeginOverlap) == 0x000004, "Wrong alignment on FNE_VolumeOverlapComponent_UnBindFromOnOtherActorBeginOverlap");
static_assert(sizeof(FNE_VolumeOverlapComponent_UnBindFromOnOtherActorBeginOverlap) == 0x00000C, "Wrong size on FNE_VolumeOverlapComponent_UnBindFromOnOtherActorBeginOverlap");
static_assert(offsetof(FNE_VolumeOverlapComponent_UnBindFromOnOtherActorBeginOverlap, InEvent) == 0x000000, "Member 'FNE_VolumeOverlapComponent_UnBindFromOnOtherActorBeginOverlap::InEvent' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.UnBindFromOnOtherActorEndOverlap
// 0x000C (0x000C - 0x0000)
struct FNE_VolumeOverlapComponent_UnBindFromOnOtherActorEndOverlap final
{
public:
	TDelegate<void(class AActor* OtherActor)>     InEvent;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_UnBindFromOnOtherActorEndOverlap) == 0x000004, "Wrong alignment on FNE_VolumeOverlapComponent_UnBindFromOnOtherActorEndOverlap");
static_assert(sizeof(FNE_VolumeOverlapComponent_UnBindFromOnOtherActorEndOverlap) == 0x00000C, "Wrong size on FNE_VolumeOverlapComponent_UnBindFromOnOtherActorEndOverlap");
static_assert(offsetof(FNE_VolumeOverlapComponent_UnBindFromOnOtherActorEndOverlap, InEvent) == 0x000000, "Member 'FNE_VolumeOverlapComponent_UnBindFromOnOtherActorEndOverlap::InEvent' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.UpdateOverLapShape
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_UpdateOverLapShape final
{
public:
	EFNEVolumeShapeTypeEnum                       EShape;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomShape;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CustomShape;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_UpdateOverLapShape) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_UpdateOverLapShape");
static_assert(sizeof(FNE_VolumeOverlapComponent_UpdateOverLapShape) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_UpdateOverLapShape");
static_assert(offsetof(FNE_VolumeOverlapComponent_UpdateOverLapShape, EShape) == 0x000000, "Member 'FNE_VolumeOverlapComponent_UpdateOverLapShape::EShape' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_UpdateOverLapShape, bUseCustomShape) == 0x000001, "Member 'FNE_VolumeOverlapComponent_UpdateOverLapShape::bUseCustomShape' has a wrong offset!");
static_assert(offsetof(FNE_VolumeOverlapComponent_UpdateOverLapShape, CustomShape) == 0x000008, "Member 'FNE_VolumeOverlapComponent_UpdateOverLapShape::CustomShape' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.GetAllPlayerPawns
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_GetAllPlayerPawns final
{
public:
	TArray<class APawn*>                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_GetAllPlayerPawns) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_GetAllPlayerPawns");
static_assert(sizeof(FNE_VolumeOverlapComponent_GetAllPlayerPawns) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_GetAllPlayerPawns");
static_assert(offsetof(FNE_VolumeOverlapComponent_GetAllPlayerPawns, ReturnValue) == 0x000000, "Member 'FNE_VolumeOverlapComponent_GetAllPlayerPawns::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.GetAllPlayerStates
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_GetAllPlayerStates final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_GetAllPlayerStates) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_GetAllPlayerStates");
static_assert(sizeof(FNE_VolumeOverlapComponent_GetAllPlayerStates) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_GetAllPlayerStates");
static_assert(offsetof(FNE_VolumeOverlapComponent_GetAllPlayerStates, ReturnValue) == 0x000000, "Member 'FNE_VolumeOverlapComponent_GetAllPlayerStates::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.GetAllTrackedActors
// 0x0010 (0x0010 - 0x0000)
struct FNE_VolumeOverlapComponent_GetAllTrackedActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_GetAllTrackedActors) == 0x000008, "Wrong alignment on FNE_VolumeOverlapComponent_GetAllTrackedActors");
static_assert(sizeof(FNE_VolumeOverlapComponent_GetAllTrackedActors) == 0x000010, "Wrong size on FNE_VolumeOverlapComponent_GetAllTrackedActors");
static_assert(offsetof(FNE_VolumeOverlapComponent_GetAllTrackedActors, ReturnValue) == 0x000000, "Member 'FNE_VolumeOverlapComponent_GetAllTrackedActors::ReturnValue' has a wrong offset!");

// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.GetEnableOverlap
// 0x0001 (0x0001 - 0x0000)
struct FNE_VolumeOverlapComponent_GetEnableOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNE_VolumeOverlapComponent_GetEnableOverlap) == 0x000001, "Wrong alignment on FNE_VolumeOverlapComponent_GetEnableOverlap");
static_assert(sizeof(FNE_VolumeOverlapComponent_GetEnableOverlap) == 0x000001, "Wrong size on FNE_VolumeOverlapComponent_GetEnableOverlap");
static_assert(offsetof(FNE_VolumeOverlapComponent_GetEnableOverlap, ReturnValue) == 0x000000, "Member 'FNE_VolumeOverlapComponent_GetEnableOverlap::ReturnValue' has a wrong offset!");

}

