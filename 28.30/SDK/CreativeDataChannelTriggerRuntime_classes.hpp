#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativeDataChannelTriggerRuntime

#include "Basic.hpp"

#include "ElectraDataChannelRuntime_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "CreativeDataChannelTriggerRuntime_structs.hpp"


namespace SDK
{

// Class CreativeDataChannelTriggerRuntime.CreativeDataChannelAnalytics
// 0x0000 (0x0028 - 0x0028)
class UCreativeDataChannelAnalytics final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeDataChannelAnalytics">();
	}
	static class UCreativeDataChannelAnalytics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreativeDataChannelAnalytics>();
	}
};
static_assert(alignof(UCreativeDataChannelAnalytics) == 0x000008, "Wrong alignment on UCreativeDataChannelAnalytics");
static_assert(sizeof(UCreativeDataChannelAnalytics) == 0x000028, "Wrong size on UCreativeDataChannelAnalytics");

// Class CreativeDataChannelTriggerRuntime.CreativeDataChannelTarget
// 0x0050 (0x0358 - 0x0308)
class ACreativeDataChannelTarget final : public AElectraDataChannelTarget
{
public:
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int8                                          VersionByte;                                       // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCreativeDataChannelEvents             Events;                                            // 0x0318(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCreativeDataChannelEvents& Events)> OnEventsRep;                                       // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FCreativeDataChannelEvents             EventsCache;                                       // 0x0338(0x0010)(NativeAccessSpecifierPublic)
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FireEvent(class FName EventName);
	void OnRep_Events();
	void TestCreativeDataChannelTarget(const struct FCreativeDataChannelEvents& TestEvents);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeDataChannelTarget">();
	}
	static class ACreativeDataChannelTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACreativeDataChannelTarget>();
	}
};
static_assert(alignof(ACreativeDataChannelTarget) == 0x000008, "Wrong alignment on ACreativeDataChannelTarget");
static_assert(sizeof(ACreativeDataChannelTarget) == 0x000358, "Wrong size on ACreativeDataChannelTarget");
static_assert(offsetof(ACreativeDataChannelTarget, VersionByte) == 0x000310, "Member 'ACreativeDataChannelTarget::VersionByte' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTarget, Events) == 0x000318, "Member 'ACreativeDataChannelTarget::Events' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTarget, OnEventsRep) == 0x000328, "Member 'ACreativeDataChannelTarget::OnEventsRep' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTarget, EventsCache) == 0x000338, "Member 'ACreativeDataChannelTarget::EventsCache' has a wrong offset!");

// Class CreativeDataChannelTriggerRuntime.CreativeDataChannelTargetFN
// 0x02B8 (0x05C0 - 0x0308)
class ACreativeDataChannelTargetFN final : public AElectraDataChannelTarget
{
public:
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VersionByte;                                       // 0x0310(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCInt                                VersionByteTracker;                                // 0x0314(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCInt& EventNumber)> VersionByteEvent;                                  // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 LeaderBoard;                                       // 0x0328(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         StormCircleSize;                                   // 0x0338(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCLargeInt                           StormCircleSizeTracker;                            // 0x0340(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCLargeInt& EventNumber)> StormCircleSizeEvent;                              // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<float>                                 StormCircleLocation;                               // 0x0358(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCDCFloatArray                         StormCircleLocationTracker;                        // 0x0368(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCFloatArray& EventMap)> StormCircleLocationEvent;                          // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 PlayerLocation;                                    // 0x0388(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringFloatArrayMap                PlayerLocationTracker;                             // 0x0398(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringFloatArrayMap& EventMap)> PlayerLocationEvent;                               // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 ArenaPointLeaderBoard;                             // 0x03F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringStringMap                    ArenaPointLeaderBoardTracker;                      // 0x0408(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringStringMap& EventMap)> ArenaPointLeaderBoardEvent;                        // 0x04A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 CashCupDataAllTimeEarners;                         // 0x04B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringFloatMap                     CashCupDataAllTimeEanersTracker;                   // 0x04C8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringFloatMap& EventMap)> CashCupDataAllTimeEarnersEvent;                    // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 MythicBossEliminatedPlayer;                        // 0x0528(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCString                             MythicBossEliminatedPlayerTracker;                 // 0x0538(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCString& EventString)> MythicBossEliminatedPlayerEvent;                   // 0x0548(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 MythicWeaponPlayer;                                // 0x0558(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCString                             MythicWeaponPlayerTracker;                         // 0x0568(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCString& EventString)> MythicWeaponPlayerEvent;                           // 0x0578(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 PlayerInfo;                                        // 0x0588(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringArray                        PlayerInfoTracker;                                 // 0x0598(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringArray& EventStringArray)> PlayerInfoEvent;                                   // 0x05B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeDataChannelTargetFN">();
	}
	static class ACreativeDataChannelTargetFN* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACreativeDataChannelTargetFN>();
	}
};
static_assert(alignof(ACreativeDataChannelTargetFN) == 0x000008, "Wrong alignment on ACreativeDataChannelTargetFN");
static_assert(sizeof(ACreativeDataChannelTargetFN) == 0x0005C0, "Wrong size on ACreativeDataChannelTargetFN");
static_assert(offsetof(ACreativeDataChannelTargetFN, VersionByte) == 0x000310, "Member 'ACreativeDataChannelTargetFN::VersionByte' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, VersionByteTracker) == 0x000314, "Member 'ACreativeDataChannelTargetFN::VersionByteTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, VersionByteEvent) == 0x000318, "Member 'ACreativeDataChannelTargetFN::VersionByteEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, LeaderBoard) == 0x000328, "Member 'ACreativeDataChannelTargetFN::LeaderBoard' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, StormCircleSize) == 0x000338, "Member 'ACreativeDataChannelTargetFN::StormCircleSize' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, StormCircleSizeTracker) == 0x000340, "Member 'ACreativeDataChannelTargetFN::StormCircleSizeTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, StormCircleSizeEvent) == 0x000348, "Member 'ACreativeDataChannelTargetFN::StormCircleSizeEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, StormCircleLocation) == 0x000358, "Member 'ACreativeDataChannelTargetFN::StormCircleLocation' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, StormCircleLocationTracker) == 0x000368, "Member 'ACreativeDataChannelTargetFN::StormCircleLocationTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, StormCircleLocationEvent) == 0x000378, "Member 'ACreativeDataChannelTargetFN::StormCircleLocationEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, PlayerLocation) == 0x000388, "Member 'ACreativeDataChannelTargetFN::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, PlayerLocationTracker) == 0x000398, "Member 'ACreativeDataChannelTargetFN::PlayerLocationTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, PlayerLocationEvent) == 0x0003E8, "Member 'ACreativeDataChannelTargetFN::PlayerLocationEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, ArenaPointLeaderBoard) == 0x0003F8, "Member 'ACreativeDataChannelTargetFN::ArenaPointLeaderBoard' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, ArenaPointLeaderBoardTracker) == 0x000408, "Member 'ACreativeDataChannelTargetFN::ArenaPointLeaderBoardTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, ArenaPointLeaderBoardEvent) == 0x0004A8, "Member 'ACreativeDataChannelTargetFN::ArenaPointLeaderBoardEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, CashCupDataAllTimeEarners) == 0x0004B8, "Member 'ACreativeDataChannelTargetFN::CashCupDataAllTimeEarners' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, CashCupDataAllTimeEanersTracker) == 0x0004C8, "Member 'ACreativeDataChannelTargetFN::CashCupDataAllTimeEanersTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, CashCupDataAllTimeEarnersEvent) == 0x000518, "Member 'ACreativeDataChannelTargetFN::CashCupDataAllTimeEarnersEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, MythicBossEliminatedPlayer) == 0x000528, "Member 'ACreativeDataChannelTargetFN::MythicBossEliminatedPlayer' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, MythicBossEliminatedPlayerTracker) == 0x000538, "Member 'ACreativeDataChannelTargetFN::MythicBossEliminatedPlayerTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, MythicBossEliminatedPlayerEvent) == 0x000548, "Member 'ACreativeDataChannelTargetFN::MythicBossEliminatedPlayerEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, MythicWeaponPlayer) == 0x000558, "Member 'ACreativeDataChannelTargetFN::MythicWeaponPlayer' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, MythicWeaponPlayerTracker) == 0x000568, "Member 'ACreativeDataChannelTargetFN::MythicWeaponPlayerTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, MythicWeaponPlayerEvent) == 0x000578, "Member 'ACreativeDataChannelTargetFN::MythicWeaponPlayerEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, PlayerInfo) == 0x000588, "Member 'ACreativeDataChannelTargetFN::PlayerInfo' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, PlayerInfoTracker) == 0x000598, "Member 'ACreativeDataChannelTargetFN::PlayerInfoTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetFN, PlayerInfoEvent) == 0x0005B0, "Member 'ACreativeDataChannelTargetFN::PlayerInfoEvent' has a wrong offset!");

// Class CreativeDataChannelTriggerRuntime.CreativeDataChannelTargetRL
// 0x04C0 (0x07C8 - 0x0308)
class ACreativeDataChannelTargetRL final : public AElectraDataChannelTarget
{
public:
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VersionByte;                                       // 0x0310(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCInt                                VersionByteTracker;                                // 0x0314(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCInt& EventNumber)> VersionByteEvent;                                  // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         ScoreTeam;                                         // 0x0328(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCDCString                             ScoreTeamTracker;                                  // 0x0330(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCString& EventString)> ScoreTeamEvent;                                    // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 ScoreTotal;                                        // 0x0350(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringIntMap                       ScoreTotalTracker;                                 // 0x0360(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringIntMap& EventMap)> ScoreTotalEvent;                                   // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int64                                         ScoreboardTimeLeft;                                // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCLargeInt                           ScoreboardTimeLeftTracker;                         // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCLargeInt& EventNumber)> ScoreboardTimeLeftEvent;                           // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 ScoreboardBestOf;                                  // 0x03E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringIntMap                       ScoreboardBestOfTracker;                           // 0x03F0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringIntMap& EventMap)> ScoreboardBestOfEvent;                             // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         OverTime;                                          // 0x0450(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCInt                                OvertimeTracker;                                   // 0x0454(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCInt& EventNumber)> OvertimeEvent;                                     // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 TeamNames;                                         // 0x0468(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringArray                        TeamNamesTracker;                                  // 0x0478(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringArray& EventStringArray)> TeamNamesEvent;                                    // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 PlayerNames;                                       // 0x04A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringArray                        PlayerNamesTracker;                                // 0x04B0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringArray& EventStringArray)> PlayerNamesEvent;                                  // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 PlayerBoost;                                       // 0x04D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringIntMap                       PlayerBoostTracker;                                // 0x04E8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringIntMap& EventMap)> PlayerBoostEvent;                                  // 0x0538(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 PlayerBoostCollected;                              // 0x0548(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringStringMap                    PlayerBoostCollectedTracker;                       // 0x0558(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringStringMap& EventMap)> PlayerBoostCollectedEvent;                         // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 PlayerCoords;                                      // 0x0608(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringFloatArrayMap                PlayerCoordsTracker;                               // 0x0618(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringFloatArrayMap& EventMap)> PlayerCoordsEvent;                                 // 0x0668(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 BallCoords;                                        // 0x0678(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCFloatArray                         BallCoordsTracker;                                 // 0x0688(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCFloatArray& EventMap)> BallCoordsEvent;                                   // 0x0698(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 MediaStart;                                        // 0x06A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCStringStringMap                    MediaStartTracker;                                 // 0x06B8(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCStringStringMap& EventMap)> MediaStartEvent;                                   // 0x0758(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         MediaStop;                                         // 0x0768(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCInt                                MediaStopTracker;                                  // 0x076C(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCInt& EventNumber)> MediaStopEvent;                                    // 0x0770(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         SeriesState;                                       // 0x0780(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCInt                                SeriesStateTracker;                                // 0x0784(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCInt& EventNumber)> SeriesStateEvent;                                  // 0x0788(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         MatchState;                                        // 0x0798(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCInt                                MatchStateTracker;                                 // 0x079C(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCInt& EventNumber)> MatchStateEvent;                                   // 0x07A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         FinaleState;                                       // 0x07B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCDCInt                                FinaleStateTracker;                                // 0x07B4(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCDCInt& EventNumber)> FinaleStateEvent;                                  // 0x07B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void OnRep_BallCoords();
	void OnRep_FinaleState();
	void OnRep_MatchState();
	void OnRep_MediaStart();
	void OnRep_MediaStop();
	void OnRep_Overtime();
	void OnRep_PlayerBoost();
	void OnRep_PlayerBoostCollected();
	void OnRep_PlayerCoords();
	void OnRep_PlayerNames();
	void OnRep_ScoreboardBestOf();
	void OnRep_ScoreboardTimeLeft();
	void OnRep_ScoreTeam();
	void OnRep_ScoreTotal();
	void OnRep_SeriesState();
	void OnRep_TeamNames();
	void OnRep_VersionByte();
	void ReportServerStateStreamError(const class FString& Error, const class FString& UID, const class FString& URL);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreativeDataChannelTargetRL">();
	}
	static class ACreativeDataChannelTargetRL* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACreativeDataChannelTargetRL>();
	}
};
static_assert(alignof(ACreativeDataChannelTargetRL) == 0x000008, "Wrong alignment on ACreativeDataChannelTargetRL");
static_assert(sizeof(ACreativeDataChannelTargetRL) == 0x0007C8, "Wrong size on ACreativeDataChannelTargetRL");
static_assert(offsetof(ACreativeDataChannelTargetRL, VersionByte) == 0x000310, "Member 'ACreativeDataChannelTargetRL::VersionByte' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, VersionByteTracker) == 0x000314, "Member 'ACreativeDataChannelTargetRL::VersionByteTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, VersionByteEvent) == 0x000318, "Member 'ACreativeDataChannelTargetRL::VersionByteEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreTeam) == 0x000328, "Member 'ACreativeDataChannelTargetRL::ScoreTeam' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreTeamTracker) == 0x000330, "Member 'ACreativeDataChannelTargetRL::ScoreTeamTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreTeamEvent) == 0x000340, "Member 'ACreativeDataChannelTargetRL::ScoreTeamEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreTotal) == 0x000350, "Member 'ACreativeDataChannelTargetRL::ScoreTotal' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreTotalTracker) == 0x000360, "Member 'ACreativeDataChannelTargetRL::ScoreTotalTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreTotalEvent) == 0x0003B0, "Member 'ACreativeDataChannelTargetRL::ScoreTotalEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreboardTimeLeft) == 0x0003C0, "Member 'ACreativeDataChannelTargetRL::ScoreboardTimeLeft' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreboardTimeLeftTracker) == 0x0003C8, "Member 'ACreativeDataChannelTargetRL::ScoreboardTimeLeftTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreboardTimeLeftEvent) == 0x0003D0, "Member 'ACreativeDataChannelTargetRL::ScoreboardTimeLeftEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreboardBestOf) == 0x0003E0, "Member 'ACreativeDataChannelTargetRL::ScoreboardBestOf' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreboardBestOfTracker) == 0x0003F0, "Member 'ACreativeDataChannelTargetRL::ScoreboardBestOfTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, ScoreboardBestOfEvent) == 0x000440, "Member 'ACreativeDataChannelTargetRL::ScoreboardBestOfEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, OverTime) == 0x000450, "Member 'ACreativeDataChannelTargetRL::OverTime' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, OvertimeTracker) == 0x000454, "Member 'ACreativeDataChannelTargetRL::OvertimeTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, OvertimeEvent) == 0x000458, "Member 'ACreativeDataChannelTargetRL::OvertimeEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, TeamNames) == 0x000468, "Member 'ACreativeDataChannelTargetRL::TeamNames' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, TeamNamesTracker) == 0x000478, "Member 'ACreativeDataChannelTargetRL::TeamNamesTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, TeamNamesEvent) == 0x000490, "Member 'ACreativeDataChannelTargetRL::TeamNamesEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerNames) == 0x0004A0, "Member 'ACreativeDataChannelTargetRL::PlayerNames' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerNamesTracker) == 0x0004B0, "Member 'ACreativeDataChannelTargetRL::PlayerNamesTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerNamesEvent) == 0x0004C8, "Member 'ACreativeDataChannelTargetRL::PlayerNamesEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerBoost) == 0x0004D8, "Member 'ACreativeDataChannelTargetRL::PlayerBoost' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerBoostTracker) == 0x0004E8, "Member 'ACreativeDataChannelTargetRL::PlayerBoostTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerBoostEvent) == 0x000538, "Member 'ACreativeDataChannelTargetRL::PlayerBoostEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerBoostCollected) == 0x000548, "Member 'ACreativeDataChannelTargetRL::PlayerBoostCollected' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerBoostCollectedTracker) == 0x000558, "Member 'ACreativeDataChannelTargetRL::PlayerBoostCollectedTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerBoostCollectedEvent) == 0x0005F8, "Member 'ACreativeDataChannelTargetRL::PlayerBoostCollectedEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerCoords) == 0x000608, "Member 'ACreativeDataChannelTargetRL::PlayerCoords' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerCoordsTracker) == 0x000618, "Member 'ACreativeDataChannelTargetRL::PlayerCoordsTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, PlayerCoordsEvent) == 0x000668, "Member 'ACreativeDataChannelTargetRL::PlayerCoordsEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, BallCoords) == 0x000678, "Member 'ACreativeDataChannelTargetRL::BallCoords' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, BallCoordsTracker) == 0x000688, "Member 'ACreativeDataChannelTargetRL::BallCoordsTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, BallCoordsEvent) == 0x000698, "Member 'ACreativeDataChannelTargetRL::BallCoordsEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, MediaStart) == 0x0006A8, "Member 'ACreativeDataChannelTargetRL::MediaStart' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, MediaStartTracker) == 0x0006B8, "Member 'ACreativeDataChannelTargetRL::MediaStartTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, MediaStartEvent) == 0x000758, "Member 'ACreativeDataChannelTargetRL::MediaStartEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, MediaStop) == 0x000768, "Member 'ACreativeDataChannelTargetRL::MediaStop' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, MediaStopTracker) == 0x00076C, "Member 'ACreativeDataChannelTargetRL::MediaStopTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, MediaStopEvent) == 0x000770, "Member 'ACreativeDataChannelTargetRL::MediaStopEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, SeriesState) == 0x000780, "Member 'ACreativeDataChannelTargetRL::SeriesState' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, SeriesStateTracker) == 0x000784, "Member 'ACreativeDataChannelTargetRL::SeriesStateTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, SeriesStateEvent) == 0x000788, "Member 'ACreativeDataChannelTargetRL::SeriesStateEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, MatchState) == 0x000798, "Member 'ACreativeDataChannelTargetRL::MatchState' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, MatchStateTracker) == 0x00079C, "Member 'ACreativeDataChannelTargetRL::MatchStateTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, MatchStateEvent) == 0x0007A0, "Member 'ACreativeDataChannelTargetRL::MatchStateEvent' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, FinaleState) == 0x0007B0, "Member 'ACreativeDataChannelTargetRL::FinaleState' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, FinaleStateTracker) == 0x0007B4, "Member 'ACreativeDataChannelTargetRL::FinaleStateTracker' has a wrong offset!");
static_assert(offsetof(ACreativeDataChannelTargetRL, FinaleStateEvent) == 0x0007B8, "Member 'ACreativeDataChannelTargetRL::FinaleStateEvent' has a wrong offset!");

}

