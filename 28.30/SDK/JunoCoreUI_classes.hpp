#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JunoCoreUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "FortniteUI_classes.hpp"
#include "CommonUI_classes.hpp"
#include "JunoCoreUI_structs.hpp"
#include "JunoWorldManagement_structs.hpp"
#include "Engine_structs.hpp"
#include "ModelViewViewModel_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Class JunoCoreUI.JunoPlayerAvatarContainer
// 0x0008 (0x0330 - 0x0328)
class UJunoPlayerAvatarContainer final : public UFortHUDElementWidget
{
public:
	class UFortPlayerAvatarViewModel*             PlayerAvatarViewModel;                             // 0x0328(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void RepresentLocalPlayer(class UFortPlayerAvatarViewModel* InPlayerAvatarViewModel);
	void RepresentRemotePlayer(const struct FUniqueNetIdRepl& UniqueID, class UFortPlayerAvatarViewModel* InPlayerAvatarViewModel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JunoPlayerAvatarContainer">();
	}
	static class UJunoPlayerAvatarContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJunoPlayerAvatarContainer>();
	}
};
static_assert(alignof(UJunoPlayerAvatarContainer) == 0x000008, "Wrong alignment on UJunoPlayerAvatarContainer");
static_assert(sizeof(UJunoPlayerAvatarContainer) == 0x000330, "Wrong size on UJunoPlayerAvatarContainer");
static_assert(offsetof(UJunoPlayerAvatarContainer, PlayerAvatarViewModel) == 0x000328, "Member 'UJunoPlayerAvatarContainer::PlayerAvatarViewModel' has a wrong offset!");

// Class JunoCoreUI.JunoPlayerCardViewModel
// 0x00A8 (0x0110 - 0x0068)
class UJunoPlayerCardViewModel final : public UMVVMViewModelBase
{
public:
	class FText                                   PlayerName;                                        // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	EJunoWorldOccupantKind                        PlayerRole;                                        // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EJunoPlayerCardStatus                         PlayerStatus;                                      // 0x0081(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInParty;                                         // 0x0082(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsViewOnly;                                        // 0x0083(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFriendsWithWorldOwner;                           // 0x0084(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumKeysLeft;                                       // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0090(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortPlayerControllerAthena*            OwningPlayerController;                            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USocialActionMenu>          OpenProfileActionMenuClass;                        // 0x00C8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D0[0x20];                                      // 0x00D0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnWorldKeyGranted;                                 // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnWorldKeyRevoked;                                 // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void GrantWorldKey();
	void KickWorldUser();
	void OpenSidebarUserProfile(class UCommonActivatableWidget* CurrentStateWidget, class ULocalPlayer* LocalPlayer);
	void RevokeWorldKey();
	void ShowNotificationToast(const class AFortPlayerController* FortPlayerController, const class FText& Title, const class FText& Description, EFortNotificationType NotificationType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JunoPlayerCardViewModel">();
	}
	static class UJunoPlayerCardViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJunoPlayerCardViewModel>();
	}
};
static_assert(alignof(UJunoPlayerCardViewModel) == 0x000008, "Wrong alignment on UJunoPlayerCardViewModel");
static_assert(sizeof(UJunoPlayerCardViewModel) == 0x000110, "Wrong size on UJunoPlayerCardViewModel");
static_assert(offsetof(UJunoPlayerCardViewModel, PlayerName) == 0x000068, "Member 'UJunoPlayerCardViewModel::PlayerName' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, PlayerRole) == 0x000080, "Member 'UJunoPlayerCardViewModel::PlayerRole' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, PlayerStatus) == 0x000081, "Member 'UJunoPlayerCardViewModel::PlayerStatus' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, IsInParty) == 0x000082, "Member 'UJunoPlayerCardViewModel::IsInParty' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, IsViewOnly) == 0x000083, "Member 'UJunoPlayerCardViewModel::IsViewOnly' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, IsFriendsWithWorldOwner) == 0x000084, "Member 'UJunoPlayerCardViewModel::IsFriendsWithWorldOwner' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, NumKeysLeft) == 0x000088, "Member 'UJunoPlayerCardViewModel::NumKeysLeft' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, UniqueNetId) == 0x000090, "Member 'UJunoPlayerCardViewModel::UniqueNetId' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, OwningPlayerController) == 0x0000C0, "Member 'UJunoPlayerCardViewModel::OwningPlayerController' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, OpenProfileActionMenuClass) == 0x0000C8, "Member 'UJunoPlayerCardViewModel::OpenProfileActionMenuClass' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, OnWorldKeyGranted) == 0x0000F0, "Member 'UJunoPlayerCardViewModel::OnWorldKeyGranted' has a wrong offset!");
static_assert(offsetof(UJunoPlayerCardViewModel, OnWorldKeyRevoked) == 0x000100, "Member 'UJunoPlayerCardViewModel::OnWorldKeyRevoked' has a wrong offset!");

// Class JunoCoreUI.JunoPlayerManagementViewModel
// 0x0088 (0x00F0 - 0x0068)
class UJunoPlayerManagementViewModel final : public UMVVMViewModelBase
{
public:
	TArray<class UJunoPlayerCardViewModel*>       NeedsInvitePlayerCards;                            // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UJunoPlayerCardViewModel*>       InWorldPlayerCards;                                // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UJunoPlayerCardViewModel*>       NotInWorldPlayerCards;                             // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UJunoPlayerCardViewModel*               SelectedPlayerCard;                                // 0x0098(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EJunoWorldSanctionType                        WorldSanctionType;                                 // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumKeysLeft;                                       // 0x00A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumSpotsLeft;                                      // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WorldName;                                         // 0x00B0(0x0018)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   OwnerName;                                         // 0x00C8(0x0018)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          IsWorldOwner;                                      // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsViewOnly;                                        // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumOfPlayers;                                   // 0x00E4(0x0004)(ZeroConstructor, Transient, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumOfKeys;                                      // 0x00E8(0x0004)(ZeroConstructor, Transient, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupDummyData();
	void UpdateFromData(class APlayerController* WidgetOwner, const class UJunoWorld* JunoWorld);

	bool IsInGame() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JunoPlayerManagementViewModel">();
	}
	static class UJunoPlayerManagementViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJunoPlayerManagementViewModel>();
	}
};
static_assert(alignof(UJunoPlayerManagementViewModel) == 0x000008, "Wrong alignment on UJunoPlayerManagementViewModel");
static_assert(sizeof(UJunoPlayerManagementViewModel) == 0x0000F0, "Wrong size on UJunoPlayerManagementViewModel");
static_assert(offsetof(UJunoPlayerManagementViewModel, NeedsInvitePlayerCards) == 0x000068, "Member 'UJunoPlayerManagementViewModel::NeedsInvitePlayerCards' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, InWorldPlayerCards) == 0x000078, "Member 'UJunoPlayerManagementViewModel::InWorldPlayerCards' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, NotInWorldPlayerCards) == 0x000088, "Member 'UJunoPlayerManagementViewModel::NotInWorldPlayerCards' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, SelectedPlayerCard) == 0x000098, "Member 'UJunoPlayerManagementViewModel::SelectedPlayerCard' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, WorldSanctionType) == 0x0000A0, "Member 'UJunoPlayerManagementViewModel::WorldSanctionType' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, NumKeysLeft) == 0x0000A4, "Member 'UJunoPlayerManagementViewModel::NumKeysLeft' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, NumSpotsLeft) == 0x0000A8, "Member 'UJunoPlayerManagementViewModel::NumSpotsLeft' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, WorldName) == 0x0000B0, "Member 'UJunoPlayerManagementViewModel::WorldName' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, OwnerName) == 0x0000C8, "Member 'UJunoPlayerManagementViewModel::OwnerName' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, IsWorldOwner) == 0x0000E0, "Member 'UJunoPlayerManagementViewModel::IsWorldOwner' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, IsViewOnly) == 0x0000E1, "Member 'UJunoPlayerManagementViewModel::IsViewOnly' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, MaxNumOfPlayers) == 0x0000E4, "Member 'UJunoPlayerManagementViewModel::MaxNumOfPlayers' has a wrong offset!");
static_assert(offsetof(UJunoPlayerManagementViewModel, MaxNumOfKeys) == 0x0000E8, "Member 'UJunoPlayerManagementViewModel::MaxNumOfKeys' has a wrong offset!");

// Class JunoCoreUI.JunoWorldDataViewModel
// 0x0138 (0x01A0 - 0x0068)
class UJunoWorldDataViewModel final : public UMVVMViewModelBase
{
public:
	class FText                                   WorldName;                                         // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                         WorldSlotNumber;                                   // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WorldOwner;                                        // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FUniqueNetIdRepl                       WorldOwnerId;                                      // 0x00A0(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              CreationDate;                                      // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              LastPlayed;                                        // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TimePlayed;                                        // 0x00E0(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsCreateFlow;                                     // 0x00F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEmptyWorldSlot;                                 // 0x00F9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsNewInvitation;                                  // 0x00FA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJunoWorldImageObject*                  WorldImageObj;                                     // 0x0100(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ActivePlayers;                                     // 0x0108(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GrantedKeys;                                       // 0x010C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UJunoWorldSettingViewModel*             ModeVM;                                            // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UJunoWorldSettingViewModel*             ImageVM;                                           // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UJunoWorldSettingViewModel*             SeedVM;                                            // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSettingsLocked;                                   // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSettingsChangedAfterGeneration;                   // 0x0129(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayersInWorld;                                 // 0x012C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchmakingErrorType                         MatchmakingError;                                  // 0x0130(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESanctionType                                 SanctionType;                                      // 0x0131(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSharedWorld;                                    // 0x0132(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCustom;                                         // 0x0133(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJunoWorldSettingViewModel*>     AdvancedSettingsList;                              // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UJunoWorldImageObject*>          WorldImageList;                                    // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bRequestResult;                                    // 0x0158(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RequestMessage;                                    // 0x0160(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WorldId;                                           // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UJunoUserWorldView*                     OriginalData;                                      // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPlayerController*                  WidgetOwnerPC;                                     // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CancelChanges();
	bool CheckWorldMatchmakingAvailability();
	void DeleteWorld();
	void HandlePlayClicked();
	void RemoveSharedWorld();
	void SaveChanges();

	class FText GetCreationDateFormatted() const;
	class FText GetLastPlayedFormatted() const;
	int32 GetSelectedWorldImageIndex() const;
	TArray<class FText> GetTagNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JunoWorldDataViewModel">();
	}
	static class UJunoWorldDataViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJunoWorldDataViewModel>();
	}
};
static_assert(alignof(UJunoWorldDataViewModel) == 0x000008, "Wrong alignment on UJunoWorldDataViewModel");
static_assert(sizeof(UJunoWorldDataViewModel) == 0x0001A0, "Wrong size on UJunoWorldDataViewModel");
static_assert(offsetof(UJunoWorldDataViewModel, WorldName) == 0x000068, "Member 'UJunoWorldDataViewModel::WorldName' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, WorldSlotNumber) == 0x000080, "Member 'UJunoWorldDataViewModel::WorldSlotNumber' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, WorldOwner) == 0x000088, "Member 'UJunoWorldDataViewModel::WorldOwner' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, WorldOwnerId) == 0x0000A0, "Member 'UJunoWorldDataViewModel::WorldOwnerId' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, CreationDate) == 0x0000D0, "Member 'UJunoWorldDataViewModel::CreationDate' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, LastPlayed) == 0x0000D8, "Member 'UJunoWorldDataViewModel::LastPlayed' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, TimePlayed) == 0x0000E0, "Member 'UJunoWorldDataViewModel::TimePlayed' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, bIsCreateFlow) == 0x0000F8, "Member 'UJunoWorldDataViewModel::bIsCreateFlow' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, bIsEmptyWorldSlot) == 0x0000F9, "Member 'UJunoWorldDataViewModel::bIsEmptyWorldSlot' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, bIsNewInvitation) == 0x0000FA, "Member 'UJunoWorldDataViewModel::bIsNewInvitation' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, WorldImageObj) == 0x000100, "Member 'UJunoWorldDataViewModel::WorldImageObj' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, ActivePlayers) == 0x000108, "Member 'UJunoWorldDataViewModel::ActivePlayers' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, GrantedKeys) == 0x00010C, "Member 'UJunoWorldDataViewModel::GrantedKeys' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, ModeVM) == 0x000110, "Member 'UJunoWorldDataViewModel::ModeVM' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, ImageVM) == 0x000118, "Member 'UJunoWorldDataViewModel::ImageVM' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, SeedVM) == 0x000120, "Member 'UJunoWorldDataViewModel::SeedVM' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, bSettingsLocked) == 0x000128, "Member 'UJunoWorldDataViewModel::bSettingsLocked' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, bSettingsChangedAfterGeneration) == 0x000129, "Member 'UJunoWorldDataViewModel::bSettingsChangedAfterGeneration' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, MaxPlayersInWorld) == 0x00012C, "Member 'UJunoWorldDataViewModel::MaxPlayersInWorld' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, MatchmakingError) == 0x000130, "Member 'UJunoWorldDataViewModel::MatchmakingError' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, SanctionType) == 0x000131, "Member 'UJunoWorldDataViewModel::SanctionType' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, bIsSharedWorld) == 0x000132, "Member 'UJunoWorldDataViewModel::bIsSharedWorld' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, bIsCustom) == 0x000133, "Member 'UJunoWorldDataViewModel::bIsCustom' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, AdvancedSettingsList) == 0x000138, "Member 'UJunoWorldDataViewModel::AdvancedSettingsList' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, WorldImageList) == 0x000148, "Member 'UJunoWorldDataViewModel::WorldImageList' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, bRequestResult) == 0x000158, "Member 'UJunoWorldDataViewModel::bRequestResult' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, RequestMessage) == 0x000160, "Member 'UJunoWorldDataViewModel::RequestMessage' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, WorldId) == 0x000180, "Member 'UJunoWorldDataViewModel::WorldId' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, OriginalData) == 0x000190, "Member 'UJunoWorldDataViewModel::OriginalData' has a wrong offset!");
static_assert(offsetof(UJunoWorldDataViewModel, WidgetOwnerPC) == 0x000198, "Member 'UJunoWorldDataViewModel::WidgetOwnerPC' has a wrong offset!");

// Class JunoCoreUI.JunoWorldImageObject
// 0x0020 (0x0048 - 0x0028)
class UJunoWorldImageObject final : public UObject
{
public:
	TMulticastInlineDelegate<void(TSoftObjectPtr<class UTexture2D> NewTexture)> OnTextureUpdated;                                  // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    RowHandle;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void UpdateImageReference(const class FName& NewRowName);

	const class FName GetImageReferenceName() const;
	TSoftObjectPtr<class UTexture2D> GetTexture() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JunoWorldImageObject">();
	}
	static class UJunoWorldImageObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJunoWorldImageObject>();
	}
};
static_assert(alignof(UJunoWorldImageObject) == 0x000008, "Wrong alignment on UJunoWorldImageObject");
static_assert(sizeof(UJunoWorldImageObject) == 0x000048, "Wrong size on UJunoWorldImageObject");
static_assert(offsetof(UJunoWorldImageObject, OnTextureUpdated) == 0x000028, "Member 'UJunoWorldImageObject::OnTextureUpdated' has a wrong offset!");
static_assert(offsetof(UJunoWorldImageObject, RowHandle) == 0x000038, "Member 'UJunoWorldImageObject::RowHandle' has a wrong offset!");

// Class JunoCoreUI.JunoWorldSettingViewModel
// 0x0098 (0x0100 - 0x0068)
class UJunoWorldSettingViewModel final : public UMVVMViewModelBase
{
public:
	class FString                                 SettingId;                                         // 0x0068(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   SettingName;                                       // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	EJunoWorldSettingCategory                     SettingCategory;                                   // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedOption;                                    // 0x0094(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectedModeIndex;                                 // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DefaultOptionPerMode;                              // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         NumericValue;                                      // 0x00B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoSettingOptionRow>          OptionList;                                        // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              SettingImage;                                      // 0x00C8(0x0020)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowDefaultTag;                                   // 0x00E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCustom;                                         // 0x00E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLocked;                                         // 0x00EA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBeLocked;                                      // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC[0x14];                                      // 0x00EC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrentDefaultIndex() const;
	const class FText GetOptionDescription() const;
	const class FText GetOptionName() const;
	bool IsDefaultOptionSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JunoWorldSettingViewModel">();
	}
	static class UJunoWorldSettingViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJunoWorldSettingViewModel>();
	}
};
static_assert(alignof(UJunoWorldSettingViewModel) == 0x000008, "Wrong alignment on UJunoWorldSettingViewModel");
static_assert(sizeof(UJunoWorldSettingViewModel) == 0x000100, "Wrong size on UJunoWorldSettingViewModel");
static_assert(offsetof(UJunoWorldSettingViewModel, SettingId) == 0x000068, "Member 'UJunoWorldSettingViewModel::SettingId' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, SettingName) == 0x000078, "Member 'UJunoWorldSettingViewModel::SettingName' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, SettingCategory) == 0x000090, "Member 'UJunoWorldSettingViewModel::SettingCategory' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, SelectedOption) == 0x000094, "Member 'UJunoWorldSettingViewModel::SelectedOption' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, SelectedModeIndex) == 0x000098, "Member 'UJunoWorldSettingViewModel::SelectedModeIndex' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, DefaultOptionPerMode) == 0x0000A0, "Member 'UJunoWorldSettingViewModel::DefaultOptionPerMode' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, NumericValue) == 0x0000B0, "Member 'UJunoWorldSettingViewModel::NumericValue' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, OptionList) == 0x0000B8, "Member 'UJunoWorldSettingViewModel::OptionList' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, SettingImage) == 0x0000C8, "Member 'UJunoWorldSettingViewModel::SettingImage' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, bShowDefaultTag) == 0x0000E8, "Member 'UJunoWorldSettingViewModel::bShowDefaultTag' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, bIsCustom) == 0x0000E9, "Member 'UJunoWorldSettingViewModel::bIsCustom' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, bIsLocked) == 0x0000EA, "Member 'UJunoWorldSettingViewModel::bIsLocked' has a wrong offset!");
static_assert(offsetof(UJunoWorldSettingViewModel, bCanBeLocked) == 0x0000EB, "Member 'UJunoWorldSettingViewModel::bCanBeLocked' has a wrong offset!");

// Class JunoCoreUI.JunoDropSplitModal
// 0x0028 (0x0428 - 0x0400)
class UJunoDropSplitModal final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x20];                                     // 0x0400(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_Confirm;                                    // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleConfirmOperation(EJunoContextMenuAction InActionType, int32 InDesiredCount);
	void HandleQuantityChanged(EJunoContextMenuAction InActionType, int32 InUpdatedCount);
	void OnOperationSet(EJunoContextMenuAction ActionType, const class FText& ActionText, int32 StackCount, int32 QuantityDisplayMultiplier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JunoDropSplitModal">();
	}
	static class UJunoDropSplitModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJunoDropSplitModal>();
	}
};
static_assert(alignof(UJunoDropSplitModal) == 0x000008, "Wrong alignment on UJunoDropSplitModal");
static_assert(sizeof(UJunoDropSplitModal) == 0x000428, "Wrong size on UJunoDropSplitModal");
static_assert(offsetof(UJunoDropSplitModal, Button_Confirm) == 0x000420, "Member 'UJunoDropSplitModal::Button_Confirm' has a wrong offset!");

// Class JunoCoreUI.JunoContextMenu
// 0x00A0 (0x04A0 - 0x0400)
class UJunoContextMenu final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x38];                                     // 0x0400(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EJunoContextMenuAction, class FText>     MenuActionToDisplayText;                           // 0x0438(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UJunoDropSplitModal*                    Widget_QuantitySelector;                           // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDataTableRowHandle                    BackAction;                                        // 0x0490(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)

public:
	TSet<EJunoContextMenuAction> GetAllAvailableActions();
	void HandleContextEntrySelected(EJunoContextMenuAction MenuAction);
	void OnAddMenuEntry(EJunoContextMenuAction MenuAction, bool bDisabled);
	void OnShowQuantitySelectorState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JunoContextMenu">();
	}
	static class UJunoContextMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJunoContextMenu>();
	}
};
static_assert(alignof(UJunoContextMenu) == 0x000008, "Wrong alignment on UJunoContextMenu");
static_assert(sizeof(UJunoContextMenu) == 0x0004A0, "Wrong size on UJunoContextMenu");
static_assert(offsetof(UJunoContextMenu, MenuActionToDisplayText) == 0x000438, "Member 'UJunoContextMenu::MenuActionToDisplayText' has a wrong offset!");
static_assert(offsetof(UJunoContextMenu, Widget_QuantitySelector) == 0x000488, "Member 'UJunoContextMenu::Widget_QuantitySelector' has a wrong offset!");
static_assert(offsetof(UJunoContextMenu, BackAction) == 0x000490, "Member 'UJunoContextMenu::BackAction' has a wrong offset!");

}

