#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PilgrimCoreRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayAbilities_classes.hpp"
#include "PilgrimCoreRuntime_structs.hpp"
#include "EpicMediaBasePlayer_structs.hpp"
#include "SparksCosmeticsRuntime_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayEventRouter_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "SparksCoreRuntime_structs.hpp"
#include "SparksDanceEmotesRuntime_classes.hpp"
#include "Harmonix_structs.hpp"
#include "CommonInput_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "SparksMidiParser_structs.hpp"
#include "SparksMidiParser_classes.hpp"
#include "SparksMusicPlayspaceRuntime_classes.hpp"
#include "SparksCMS_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FMCoreRuntime_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// Class PilgrimCoreRuntime.NetworkedMusicClockManager
// 0x0268 (0x0308 - 0x00A0)
class UNetworkedMusicClockManager final : public UGameFrameworkComponent
{
public:
	uint8                                         Pad_A0[0x88];                                      // 0x00A0(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnStartSongSyncCountdown;                          // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 BeatNumber, int32 BeatInBar)> OnBeatEvent;                                       // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 BarNumber)> OnBarEvent;                                        // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMusicClockComponent*                   OwnedMusicClockComponent;                          // 0x0158(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UAudioComponent>         WeakMetasoundPlayer;                               // 0x0160(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UAudioComponent>         WeakMetasoundMixer;                                // 0x0168(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ServerStartTime;                                   // 0x0170(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSongTimestampData                     CurrentSongServerTimestamp;                        // 0x0178(0x0048)(Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TimeToStartSyncedClock;                            // 0x01C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           ClientLatencyCatchupTimerHandle;                   // 0x01E8(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           ServerTimestampRecordingTimerHandle;               // 0x01F0(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ServerTimestampRecordingFrequency;                 // 0x01F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinDeltaForSeek;                                   // 0x0220(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinDeltaForSpeedAdjust;                            // 0x0248(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         EndCorrectionDelta;                                // 0x0270(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SpeedAdjustmentFactor;                             // 0x0298(0x0028)(Edit, NativeAccessSpecifierPrivate)
	float                                         CurrentSpeed;                                      // 0x02C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MetasoundSpeedParamName;                           // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MetasoundSeekParamName;                            // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MetasoundTriggerName;                              // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MetasoundOuputPinName;                             // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMetasoundGeneratorHandle*              MetasoundPlayerGeneratorHandle;                    // 0x02D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMetasoundParameterPack*                MetasoundPlayerSeekParamPack;                      // 0x02E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPilgrimSongPlayMethod                        PlayMethod;                                        // 0x02E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventListenerHandle           SongLoadedGameplayEventHandle;                     // 0x02EC(0x001C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnBar(int32 BarNumber);
	void OnBeat(int32 BeatNumber, int32 BeatInBar);
	void OnRep_CurrentSongServerTimestamp();
	void OnRep_ServerStartTime();
	void PlayServerAuthoritativeSong(class UPilgrimSongMetadata* SongToPlay);
	void SetClientAudioComponentsToUse(class UAudioComponent* InMetasoundPlayer, class UAudioComponent* InMetasoundMixer);

	class UMusicClockComponent* GetOwnedMusicClock() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetworkedMusicClockManager">();
	}
	static class UNetworkedMusicClockManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetworkedMusicClockManager>();
	}
};
static_assert(alignof(UNetworkedMusicClockManager) == 0x000008, "Wrong alignment on UNetworkedMusicClockManager");
static_assert(sizeof(UNetworkedMusicClockManager) == 0x000308, "Wrong size on UNetworkedMusicClockManager");
static_assert(offsetof(UNetworkedMusicClockManager, OnStartSongSyncCountdown) == 0x000128, "Member 'UNetworkedMusicClockManager::OnStartSongSyncCountdown' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, OnBeatEvent) == 0x000138, "Member 'UNetworkedMusicClockManager::OnBeatEvent' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, OnBarEvent) == 0x000148, "Member 'UNetworkedMusicClockManager::OnBarEvent' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, OwnedMusicClockComponent) == 0x000158, "Member 'UNetworkedMusicClockManager::OwnedMusicClockComponent' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, WeakMetasoundPlayer) == 0x000160, "Member 'UNetworkedMusicClockManager::WeakMetasoundPlayer' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, WeakMetasoundMixer) == 0x000168, "Member 'UNetworkedMusicClockManager::WeakMetasoundMixer' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, ServerStartTime) == 0x000170, "Member 'UNetworkedMusicClockManager::ServerStartTime' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, CurrentSongServerTimestamp) == 0x000178, "Member 'UNetworkedMusicClockManager::CurrentSongServerTimestamp' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, TimeToStartSyncedClock) == 0x0001C0, "Member 'UNetworkedMusicClockManager::TimeToStartSyncedClock' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, ClientLatencyCatchupTimerHandle) == 0x0001E8, "Member 'UNetworkedMusicClockManager::ClientLatencyCatchupTimerHandle' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, ServerTimestampRecordingTimerHandle) == 0x0001F0, "Member 'UNetworkedMusicClockManager::ServerTimestampRecordingTimerHandle' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, ServerTimestampRecordingFrequency) == 0x0001F8, "Member 'UNetworkedMusicClockManager::ServerTimestampRecordingFrequency' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, MinDeltaForSeek) == 0x000220, "Member 'UNetworkedMusicClockManager::MinDeltaForSeek' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, MinDeltaForSpeedAdjust) == 0x000248, "Member 'UNetworkedMusicClockManager::MinDeltaForSpeedAdjust' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, EndCorrectionDelta) == 0x000270, "Member 'UNetworkedMusicClockManager::EndCorrectionDelta' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, SpeedAdjustmentFactor) == 0x000298, "Member 'UNetworkedMusicClockManager::SpeedAdjustmentFactor' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, CurrentSpeed) == 0x0002C0, "Member 'UNetworkedMusicClockManager::CurrentSpeed' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, MetasoundSpeedParamName) == 0x0002C4, "Member 'UNetworkedMusicClockManager::MetasoundSpeedParamName' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, MetasoundSeekParamName) == 0x0002C8, "Member 'UNetworkedMusicClockManager::MetasoundSeekParamName' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, MetasoundTriggerName) == 0x0002CC, "Member 'UNetworkedMusicClockManager::MetasoundTriggerName' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, MetasoundOuputPinName) == 0x0002D0, "Member 'UNetworkedMusicClockManager::MetasoundOuputPinName' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, MetasoundPlayerGeneratorHandle) == 0x0002D8, "Member 'UNetworkedMusicClockManager::MetasoundPlayerGeneratorHandle' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, MetasoundPlayerSeekParamPack) == 0x0002E0, "Member 'UNetworkedMusicClockManager::MetasoundPlayerSeekParamPack' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, PlayMethod) == 0x0002E8, "Member 'UNetworkedMusicClockManager::PlayMethod' has a wrong offset!");
static_assert(offsetof(UNetworkedMusicClockManager, SongLoadedGameplayEventHandle) == 0x0002EC, "Member 'UNetworkedMusicClockManager::SongLoadedGameplayEventHandle' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimAbilityTask_WaitForBars
// 0x0020 (0x0098 - 0x0078)
class UPilgrimAbilityTask_WaitForBars final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnBarHit;                                          // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         BarCount;                                          // 0x0088(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TargetBar;                                         // 0x008C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EndAfterHits;                                      // 0x0090(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentIteration;                                  // 0x0094(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UPilgrimAbilityTask_WaitForBars* WaitForBars(class UGameplayAbility* OwningAbility, int32 BarsToWaitFor, int32 LoopFor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimAbilityTask_WaitForBars">();
	}
	static class UPilgrimAbilityTask_WaitForBars* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimAbilityTask_WaitForBars>();
	}
};
static_assert(alignof(UPilgrimAbilityTask_WaitForBars) == 0x000008, "Wrong alignment on UPilgrimAbilityTask_WaitForBars");
static_assert(sizeof(UPilgrimAbilityTask_WaitForBars) == 0x000098, "Wrong size on UPilgrimAbilityTask_WaitForBars");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBars, OnBarHit) == 0x000078, "Member 'UPilgrimAbilityTask_WaitForBars::OnBarHit' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBars, BarCount) == 0x000088, "Member 'UPilgrimAbilityTask_WaitForBars::BarCount' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBars, TargetBar) == 0x00008C, "Member 'UPilgrimAbilityTask_WaitForBars::TargetBar' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBars, EndAfterHits) == 0x000090, "Member 'UPilgrimAbilityTask_WaitForBars::EndAfterHits' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBars, CurrentIteration) == 0x000094, "Member 'UPilgrimAbilityTask_WaitForBars::CurrentIteration' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimAbilityTask_WaitForBeats
// 0x0020 (0x0098 - 0x0078)
class UPilgrimAbilityTask_WaitForBeats final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnBeatHit;                                         // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         BeatCount;                                         // 0x0088(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TargetBeat;                                        // 0x008C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         EndAfterHits;                                      // 0x0090(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentIteration;                                  // 0x0094(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UPilgrimAbilityTask_WaitForBeats* WaitForBeats(class UGameplayAbility* OwningAbility, int32 BeatsToWaitFor, int32 LoopFor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimAbilityTask_WaitForBeats">();
	}
	static class UPilgrimAbilityTask_WaitForBeats* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimAbilityTask_WaitForBeats>();
	}
};
static_assert(alignof(UPilgrimAbilityTask_WaitForBeats) == 0x000008, "Wrong alignment on UPilgrimAbilityTask_WaitForBeats");
static_assert(sizeof(UPilgrimAbilityTask_WaitForBeats) == 0x000098, "Wrong size on UPilgrimAbilityTask_WaitForBeats");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBeats, OnBeatHit) == 0x000078, "Member 'UPilgrimAbilityTask_WaitForBeats::OnBeatHit' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBeats, BeatCount) == 0x000088, "Member 'UPilgrimAbilityTask_WaitForBeats::BeatCount' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBeats, TargetBeat) == 0x00008C, "Member 'UPilgrimAbilityTask_WaitForBeats::TargetBeat' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBeats, EndAfterHits) == 0x000090, "Member 'UPilgrimAbilityTask_WaitForBeats::EndAfterHits' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForBeats, CurrentIteration) == 0x000094, "Member 'UPilgrimAbilityTask_WaitForBeats::CurrentIteration' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimAbilityTask_WaitForSection
// 0x0028 (0x00A0 - 0x0078)
class UPilgrimAbilityTask_WaitForSection final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnSectionStarted;                                  // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 TargetSectionName;                                 // 0x0088(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bWaitForNextSection;                               // 0x0098(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPilgrimAbilityTask_WaitForSection* WaitForSection(class UGameplayAbility* OwningAbility, bool bShouldWaitForNextSection, const class FString& SectionName);

	void OnSectionEvent(const class FString& SectionName, float SectionStartMs, float SectionLengthMs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimAbilityTask_WaitForSection">();
	}
	static class UPilgrimAbilityTask_WaitForSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimAbilityTask_WaitForSection>();
	}
};
static_assert(alignof(UPilgrimAbilityTask_WaitForSection) == 0x000008, "Wrong alignment on UPilgrimAbilityTask_WaitForSection");
static_assert(sizeof(UPilgrimAbilityTask_WaitForSection) == 0x0000A0, "Wrong size on UPilgrimAbilityTask_WaitForSection");
static_assert(offsetof(UPilgrimAbilityTask_WaitForSection, OnSectionStarted) == 0x000078, "Member 'UPilgrimAbilityTask_WaitForSection::OnSectionStarted' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForSection, TargetSectionName) == 0x000088, "Member 'UPilgrimAbilityTask_WaitForSection::TargetSectionName' has a wrong offset!");
static_assert(offsetof(UPilgrimAbilityTask_WaitForSection, bWaitForNextSection) == 0x000098, "Member 'UPilgrimAbilityTask_WaitForSection::bWaitForNextSection' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimActorPool
// 0x00B0 (0x00D8 - 0x0028)
class UPilgrimActorPool final : public UObject
{
public:
	struct FPilgrimActorPoolParams                ActorPoolParams;                                   // 0x0028(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           AvailableActors;                                   // 0x0038(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           InUseActors;                                       // 0x0088(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	void InitPool(const struct FPilgrimActorPoolParams& PilgrimActorPoolParams);
	void ReturnAllWidgets();
	bool TryReturnItem(class AActor* ActorToPutBack);

	int32 GetNumAvailableItems() const;
	int32 GetNumInUseItems() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimActorPool">();
	}
	static class UPilgrimActorPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimActorPool>();
	}
};
static_assert(alignof(UPilgrimActorPool) == 0x000008, "Wrong alignment on UPilgrimActorPool");
static_assert(sizeof(UPilgrimActorPool) == 0x0000D8, "Wrong size on UPilgrimActorPool");
static_assert(offsetof(UPilgrimActorPool, ActorPoolParams) == 0x000028, "Member 'UPilgrimActorPool::ActorPoolParams' has a wrong offset!");
static_assert(offsetof(UPilgrimActorPool, AvailableActors) == 0x000038, "Member 'UPilgrimActorPool::AvailableActors' has a wrong offset!");
static_assert(offsetof(UPilgrimActorPool, InUseActors) == 0x000088, "Member 'UPilgrimActorPool::InUseActors' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimAnalytics
// 0x00A8 (0x0148 - 0x00A0)
class UPilgrimAnalytics final : public UPlayspaceComponent
{
public:
	struct FMusicClockCatchUpData                 CurrentCatchUpSession;                             // 0x00A0(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x90];                                      // 0x00B8(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimAnalytics">();
	}
	static class UPilgrimAnalytics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimAnalytics>();
	}
};
static_assert(alignof(UPilgrimAnalytics) == 0x000008, "Wrong alignment on UPilgrimAnalytics");
static_assert(sizeof(UPilgrimAnalytics) == 0x000148, "Wrong size on UPilgrimAnalytics");
static_assert(offsetof(UPilgrimAnalytics, CurrentCatchUpSession) == 0x0000A0, "Member 'UPilgrimAnalytics::CurrentCatchUpSession' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimAsyncAction_RequestLeaderboard
// 0x00E8 (0x0118 - 0x0030)
class UPilgrimAsyncAction_RequestLeaderboard final : public UCancellableAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FPilgrimLeaderboardPage& ResultPage, const struct FPilgrimLeaderboardRequestParams& RequestParams)> OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Error, const struct FPilgrimLeaderboardRequestParams& RequestParams)> OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0xC8];                                      // 0x0050(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPilgrimAsyncAction_RequestLeaderboard* PilgrimRequestLeaderboard(class UObject* WorldContextObject, const class FName SongShortName, const class FString& SpotlightGroup, EPilgrimLeaderboardType LeaderboardType, class AFortPlayerController* RequestingPlayer, bool bFriendsOnly, bool bCenteredOnRequestingPlayer, int32 Page, bool bIsSpotlightCompetition, bool bUseCache);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimAsyncAction_RequestLeaderboard">();
	}
	static class UPilgrimAsyncAction_RequestLeaderboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimAsyncAction_RequestLeaderboard>();
	}
};
static_assert(alignof(UPilgrimAsyncAction_RequestLeaderboard) == 0x000008, "Wrong alignment on UPilgrimAsyncAction_RequestLeaderboard");
static_assert(sizeof(UPilgrimAsyncAction_RequestLeaderboard) == 0x000118, "Wrong size on UPilgrimAsyncAction_RequestLeaderboard");
static_assert(offsetof(UPilgrimAsyncAction_RequestLeaderboard, OnSuccess) == 0x000030, "Member 'UPilgrimAsyncAction_RequestLeaderboard::OnSuccess' has a wrong offset!");
static_assert(offsetof(UPilgrimAsyncAction_RequestLeaderboard, OnFailure) == 0x000040, "Member 'UPilgrimAsyncAction_RequestLeaderboard::OnFailure' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimAsyncAction_RequestPersonalBest
// 0x0258 (0x0288 - 0x0030)
class UPilgrimAsyncAction_RequestPersonalBest final : public UCancellableAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FPilgrimPersonalBestResult& PersonalBestResult, const struct FPilgrimPersonalBestParams& RequestParams)> OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Error, const struct FPilgrimPersonalBestParams& RequestParams)> OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x238];                                     // 0x0050(0x0238)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPilgrimAsyncAction_RequestPersonalBest* PilgrimRequestPersonalBest(class UObject* WorldContextObject, class AFortPlayerController* RequestingPlayer, const struct FUniqueNetIdRepl& PlayerAccountId, const class FName SongShortName, EPilgrimTrackType InstrumentType, int32 BandSize, int32 SetlistIndex, bool bUseCache);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimAsyncAction_RequestPersonalBest">();
	}
	static class UPilgrimAsyncAction_RequestPersonalBest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimAsyncAction_RequestPersonalBest>();
	}
};
static_assert(alignof(UPilgrimAsyncAction_RequestPersonalBest) == 0x000008, "Wrong alignment on UPilgrimAsyncAction_RequestPersonalBest");
static_assert(sizeof(UPilgrimAsyncAction_RequestPersonalBest) == 0x000288, "Wrong size on UPilgrimAsyncAction_RequestPersonalBest");
static_assert(offsetof(UPilgrimAsyncAction_RequestPersonalBest, OnSuccess) == 0x000030, "Member 'UPilgrimAsyncAction_RequestPersonalBest::OnSuccess' has a wrong offset!");
static_assert(offsetof(UPilgrimAsyncAction_RequestPersonalBest, OnFailure) == 0x000040, "Member 'UPilgrimAsyncAction_RequestPersonalBest::OnFailure' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimAsyncAction_RequestPlayerFeed
// 0x00D0 (0x0100 - 0x0030)
class UPilgrimAsyncAction_RequestPlayerFeed final : public UCancellableAsyncAction
{
public:
	TMulticastInlineDelegate<void(const struct FPilgrimPlayerFeedResult& FeedResult, const struct FPilgrimPlayerFeedParams& RequestParams)> OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FText Error, const struct FPilgrimPlayerFeedParams& RequestParams)> OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0xB0];                                      // 0x0050(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPilgrimAsyncAction_RequestPlayerFeed* PilgrimRequestPlayerFeed(class UObject* WorldContextObject, class AFortPlayerController* RequestingPlayer, const struct FGameplayTagQuery& SongQuery, const struct FSongShortNameMatcher& SongShortNameMatcher, const TArray<EPilgrimLeaderboardType>& Leaderboards, const TArray<struct FUniqueNetIdRepl>& FriendIds, EPilgrimPlayerFeedSortType SortType, bool bAllScores, bool bRequirePlayerScore);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimAsyncAction_RequestPlayerFeed">();
	}
	static class UPilgrimAsyncAction_RequestPlayerFeed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimAsyncAction_RequestPlayerFeed>();
	}
};
static_assert(alignof(UPilgrimAsyncAction_RequestPlayerFeed) == 0x000008, "Wrong alignment on UPilgrimAsyncAction_RequestPlayerFeed");
static_assert(sizeof(UPilgrimAsyncAction_RequestPlayerFeed) == 0x000100, "Wrong size on UPilgrimAsyncAction_RequestPlayerFeed");
static_assert(offsetof(UPilgrimAsyncAction_RequestPlayerFeed, OnSuccess) == 0x000030, "Member 'UPilgrimAsyncAction_RequestPlayerFeed::OnSuccess' has a wrong offset!");
static_assert(offsetof(UPilgrimAsyncAction_RequestPlayerFeed, OnFailure) == 0x000040, "Member 'UPilgrimAsyncAction_RequestPlayerFeed::OnFailure' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimBeatMarker
// 0x0060 (0x02F0 - 0x0290)
class APilgrimBeatMarker final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class APilgrimNowBar>          ParentNowBarPtr;                                   // 0x0298(0x0020)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B8[0x38];                                     // 0x02B8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBeatMarkerPassedNowBar();
	void OnPlacedOnTrack();
	void SetupNumLanes(int32 NumLanes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimBeatMarker">();
	}
	static class APilgrimBeatMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<APilgrimBeatMarker>();
	}
};
static_assert(alignof(APilgrimBeatMarker) == 0x000008, "Wrong alignment on APilgrimBeatMarker");
static_assert(sizeof(APilgrimBeatMarker) == 0x0002F0, "Wrong size on APilgrimBeatMarker");
static_assert(offsetof(APilgrimBeatMarker, ParentNowBarPtr) == 0x000298, "Member 'APilgrimBeatMarker::ParentNowBarPtr' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimTrackItemMgr
// 0x0038 (0x00D8 - 0x00A0)
class UPilgrimTrackItemMgr : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x4];                                       // 0x00A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class APilgrimTrack>           Track;                                             // 0x00A4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimActorPool*                      ItemPool;                                          // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPilgrimGame>            PilgrimGame;                                       // 0x00B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C0[0x18];                                      // 0x00C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimTrackItemMgr">();
	}
	static class UPilgrimTrackItemMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimTrackItemMgr>();
	}
};
static_assert(alignof(UPilgrimTrackItemMgr) == 0x000008, "Wrong alignment on UPilgrimTrackItemMgr");
static_assert(sizeof(UPilgrimTrackItemMgr) == 0x0000D8, "Wrong size on UPilgrimTrackItemMgr");
static_assert(offsetof(UPilgrimTrackItemMgr, Track) == 0x0000A4, "Member 'UPilgrimTrackItemMgr::Track' has a wrong offset!");
static_assert(offsetof(UPilgrimTrackItemMgr, ItemPool) == 0x0000B0, "Member 'UPilgrimTrackItemMgr::ItemPool' has a wrong offset!");
static_assert(offsetof(UPilgrimTrackItemMgr, PilgrimGame) == 0x0000B8, "Member 'UPilgrimTrackItemMgr::PilgrimGame' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimBeatMarkerTrackItemMgr
// 0x0018 (0x00F0 - 0x00D8)
class UPilgrimBeatMarkerTrackItemMgr final : public UPilgrimTrackItemMgr
{
public:
	TArray<class APilgrimBeatMarker*>             ActiveBeatMarkers;                                 // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimBeatMarkerTrackItemMgr">();
	}
	static class UPilgrimBeatMarkerTrackItemMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimBeatMarkerTrackItemMgr>();
	}
};
static_assert(alignof(UPilgrimBeatMarkerTrackItemMgr) == 0x000008, "Wrong alignment on UPilgrimBeatMarkerTrackItemMgr");
static_assert(sizeof(UPilgrimBeatMarkerTrackItemMgr) == 0x0000F0, "Wrong size on UPilgrimBeatMarkerTrackItemMgr");
static_assert(offsetof(UPilgrimBeatMarkerTrackItemMgr, ActiveBeatMarkers) == 0x0000D8, "Member 'UPilgrimBeatMarkerTrackItemMgr::ActiveBeatMarkers' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimBeatValidatedAbility
// 0x0088 (0x0BE8 - 0x0B60)
class UPilgrimBeatValidatedAbility final : public UFortGameplayAbility
{
public:
	struct FScalableFloat                         MaxTimeDelta;                                      // 0x0B60(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinClosenessToBeatMsForBonus;                      // 0x0B88(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinServerClosenessToBeatMsForBonus;                // 0x0BB0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGameplayAbility>           AbilityToRunForOnBeat;                             // 0x0BD8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UGameplayAbility>           AbilityToRunForOffBeat;                            // 0x0BE0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnBeatAbilityActivated(bool bOnBeat);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimBeatValidatedAbility">();
	}
	static class UPilgrimBeatValidatedAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimBeatValidatedAbility>();
	}
};
static_assert(alignof(UPilgrimBeatValidatedAbility) == 0x000008, "Wrong alignment on UPilgrimBeatValidatedAbility");
static_assert(sizeof(UPilgrimBeatValidatedAbility) == 0x000BE8, "Wrong size on UPilgrimBeatValidatedAbility");
static_assert(offsetof(UPilgrimBeatValidatedAbility, MaxTimeDelta) == 0x000B60, "Member 'UPilgrimBeatValidatedAbility::MaxTimeDelta' has a wrong offset!");
static_assert(offsetof(UPilgrimBeatValidatedAbility, MinClosenessToBeatMsForBonus) == 0x000B88, "Member 'UPilgrimBeatValidatedAbility::MinClosenessToBeatMsForBonus' has a wrong offset!");
static_assert(offsetof(UPilgrimBeatValidatedAbility, MinServerClosenessToBeatMsForBonus) == 0x000BB0, "Member 'UPilgrimBeatValidatedAbility::MinServerClosenessToBeatMsForBonus' has a wrong offset!");
static_assert(offsetof(UPilgrimBeatValidatedAbility, AbilityToRunForOnBeat) == 0x000BD8, "Member 'UPilgrimBeatValidatedAbility::AbilityToRunForOnBeat' has a wrong offset!");
static_assert(offsetof(UPilgrimBeatValidatedAbility, AbilityToRunForOffBeat) == 0x000BE0, "Member 'UPilgrimBeatValidatedAbility::AbilityToRunForOffBeat' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimClientSettingRecordPartition
// 0x00E0 (0x0108 - 0x0028)
class UPilgrimClientSettingRecordPartition final : public UFortClientSettingRecordPartition
{
public:
	float                                         TrackSpeedMultiplier;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackBackgroundOpacity;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAlternative5LaneTouchLayout;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x27];                                      // 0x0031(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint8, int32>                            SelectedControllerPresetIndices;                   // 0x0058(0x0050)(NativeAccessSpecifierPublic)
	TMap<uint8, int32>                            SelectedKeyboardAndMousePresetIndices;             // 0x00A8(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 SelectedGeneralControllerPreset;                   // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetSelectedGeneralControllerPreset(const class FString& NewSelectedGeneralControllerPreset);
	void SetTrackBackgroundOpacity(float NewOpacity);
	void SetTrackSpeedMultiplier(float NewMultiplier);
	void SetUseAlternative5LaneTouchLayout(bool NewUseAlternative5LaneTouchLayout);

	class FString GetSelectedGeneralControllerPreset() const;
	float GetTrackBackgroundOpacity() const;
	float GetTrackSpeedMultiplier() const;
	bool GetUseAlternative5LaneTouchLayout() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimClientSettingRecordPartition">();
	}
	static class UPilgrimClientSettingRecordPartition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimClientSettingRecordPartition>();
	}
};
static_assert(alignof(UPilgrimClientSettingRecordPartition) == 0x000008, "Wrong alignment on UPilgrimClientSettingRecordPartition");
static_assert(sizeof(UPilgrimClientSettingRecordPartition) == 0x000108, "Wrong size on UPilgrimClientSettingRecordPartition");
static_assert(offsetof(UPilgrimClientSettingRecordPartition, TrackSpeedMultiplier) == 0x000028, "Member 'UPilgrimClientSettingRecordPartition::TrackSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UPilgrimClientSettingRecordPartition, TrackBackgroundOpacity) == 0x00002C, "Member 'UPilgrimClientSettingRecordPartition::TrackBackgroundOpacity' has a wrong offset!");
static_assert(offsetof(UPilgrimClientSettingRecordPartition, UseAlternative5LaneTouchLayout) == 0x000030, "Member 'UPilgrimClientSettingRecordPartition::UseAlternative5LaneTouchLayout' has a wrong offset!");
static_assert(offsetof(UPilgrimClientSettingRecordPartition, SelectedControllerPresetIndices) == 0x000058, "Member 'UPilgrimClientSettingRecordPartition::SelectedControllerPresetIndices' has a wrong offset!");
static_assert(offsetof(UPilgrimClientSettingRecordPartition, SelectedKeyboardAndMousePresetIndices) == 0x0000A8, "Member 'UPilgrimClientSettingRecordPartition::SelectedKeyboardAndMousePresetIndices' has a wrong offset!");
static_assert(offsetof(UPilgrimClientSettingRecordPartition, SelectedGeneralControllerPreset) == 0x0000F8, "Member 'UPilgrimClientSettingRecordPartition::SelectedGeneralControllerPreset' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimCoreBandStateComponent
// 0x0010 (0x00B0 - 0x00A0)
class UPilgrimCoreBandStateComponent : public UPlayspaceComponent
{
public:
	TArray<class FName>                           OwnedSongs;                                        // 0x00A0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)

public:
	void OnRep_OwnedSongs();

	class UPilgrimSongMetadata* GetCurrentSong() const;
	class UPilgrimSongMetadata* GetNextSong() const;
	class UPilgrimSongMetadata* GetSongAtIndex(int32 Index_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimCoreBandStateComponent">();
	}
	static class UPilgrimCoreBandStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimCoreBandStateComponent>();
	}
};
static_assert(alignof(UPilgrimCoreBandStateComponent) == 0x000008, "Wrong alignment on UPilgrimCoreBandStateComponent");
static_assert(sizeof(UPilgrimCoreBandStateComponent) == 0x0000B0, "Wrong size on UPilgrimCoreBandStateComponent");
static_assert(offsetof(UPilgrimCoreBandStateComponent, OwnedSongs) == 0x0000A0, "Member 'UPilgrimCoreBandStateComponent::OwnedSongs' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimCorePlayerStateComponent
// 0x0008 (0x00B0 - 0x00A8)
class UPilgrimCorePlayerStateComponent : public USparksPlayerStateComponent
{
public:
	EPilgrimSongDifficulty                        SongDifficulty;                                    // 0x00A8(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPilgrimTrackType                             InstrumentChoice;                                  // 0x00A9(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsReady;                                          // 0x00AA(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsUsingPlastic;                                   // 0x00AB(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPregameChoicesLocked;                             // 0x00AC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPilgrimCorePlayerStateComponent* GetPilgrimCorePlayerStateComponent(const class APlayerState* PlayerState);

	void OnRep_InstrumentChoice(EPilgrimTrackType PrevInstrument);
	void OnRep_IsReady(bool bPrevIsReady);
	void OnRep_SongDifficulty(EPilgrimSongDifficulty PrevDifficulty);
	void ServerSetIsReady(bool bInIsReady);
	void ServerSetIsUsingPlasticInstruments(bool bIsPlasticAvailable);
	void SetInstrumentChoice(EPilgrimTrackType Instrument);
	void SetSongDifficulty(EPilgrimSongDifficulty Difficulty);

	EPilgrimTrackType GetInstrumentChoice() const;
	bool GetIsPlasticInstrumentAvailable() const;
	bool GetIsReady() const;
	EPilgrimSongDifficulty GetSongDifficulty() const;
	EPilgrimTrackType GetTrackTypeForGameplay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimCorePlayerStateComponent">();
	}
	static class UPilgrimCorePlayerStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimCorePlayerStateComponent>();
	}
};
static_assert(alignof(UPilgrimCorePlayerStateComponent) == 0x000008, "Wrong alignment on UPilgrimCorePlayerStateComponent");
static_assert(sizeof(UPilgrimCorePlayerStateComponent) == 0x0000B0, "Wrong size on UPilgrimCorePlayerStateComponent");
static_assert(offsetof(UPilgrimCorePlayerStateComponent, SongDifficulty) == 0x0000A8, "Member 'UPilgrimCorePlayerStateComponent::SongDifficulty' has a wrong offset!");
static_assert(offsetof(UPilgrimCorePlayerStateComponent, InstrumentChoice) == 0x0000A9, "Member 'UPilgrimCorePlayerStateComponent::InstrumentChoice' has a wrong offset!");
static_assert(offsetof(UPilgrimCorePlayerStateComponent, bIsReady) == 0x0000AA, "Member 'UPilgrimCorePlayerStateComponent::bIsReady' has a wrong offset!");
static_assert(offsetof(UPilgrimCorePlayerStateComponent, bIsUsingPlastic) == 0x0000AB, "Member 'UPilgrimCorePlayerStateComponent::bIsUsingPlastic' has a wrong offset!");
static_assert(offsetof(UPilgrimCorePlayerStateComponent, bPregameChoicesLocked) == 0x0000AC, "Member 'UPilgrimCorePlayerStateComponent::bPregameChoicesLocked' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimCore_BPFL
// 0x0000 (0x0028 - 0x0028)
class UPilgrimCore_BPFL final : public UBlueprintFunctionLibrary
{
public:
	static float GetPlatformTimeSeconds();
	static bool InstrumentTypesAreEqual(ESparksInstrumentType SparksType, EPilgrimTrackType PilgrimType);
	static EPilgrimTrackType MidiTrackNameToPilgrimTrackType(const class FString& MidiTrackName);
	static class FString PilgrimTrackTypeToMidiTrackName(EPilgrimTrackType PilgrimType);
	static ESparksInstrumentType PilgrimTrackTypeToSparksInstrument(EPilgrimTrackType PilgrimType);
	static bool ShouldUseTouchUIForLocalPlayer(const class UObject* WorldContextObject);
	static EPilgrimTrackType SparksInstrumentToPilgrimTrackType(ESparksInstrumentType SparksType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimCore_BPFL">();
	}
	static class UPilgrimCore_BPFL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimCore_BPFL>();
	}
};
static_assert(alignof(UPilgrimCore_BPFL) == 0x000008, "Wrong alignment on UPilgrimCore_BPFL");
static_assert(sizeof(UPilgrimCore_BPFL) == 0x000028, "Wrong size on UPilgrimCore_BPFL");

// Class PilgrimCoreRuntime.PilgrimCustomSetlist
// 0x0048 (0x00E8 - 0x00A0)
class UPilgrimCustomSetlist final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UPilgrimCustomSetlist* Setlist, bool bIsLocked)> OnLockedStateChanged;                              // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimCustomSetlistEntry>     SetlistEntries;                                    // 0x00D0(0x0010)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxSongsPerPlayer;                                 // 0x00E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSetlistLocked;                                  // 0x00E4(0x0001)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_MaxSongsPerPlayer(int32 PrevMax);
	void OnRep_SetlistEntries();
	void ServerAddSongForPlayer(class FName SongShortName, class APlayerState* Player);
	void ServerRemoveAllSongs();
	void ServerRemoveAllSongsForPlayer(class APlayerState* Player);
	void ServerRemoveSongAtIndex(int32 Index_0, class FName SongShortName, class APlayerState* Player);
	void ServerRemoveSongForPlayer(class FName SongShortName, class APlayerState* Player, bool bRemoveAll);
	void ServerSetIsSetlistLocked(bool bInIsLocked);
	void ServerSetMaxSongsPerPlayer(int32 NewMax);

	bool CanAddSongForPlayer(class FName SongShortName, class APlayerState* Player, EPilgrimCantAddSongReason* OutReason, class APlayerState** OutAddedByPlayer) const;
	void FindEntriesForPlayer(class APlayerState* Player, TArray<int32>* OutMatchingEntryIndicies) const;
	void FindEntriesForSong(class FName SongShortName, TArray<int32>* OutMatchingEntryIndicies) const;
	void FindEntriesForSongAndPlayer(class FName SongShortName, class APlayerState* Player, TArray<int32>* OutMatchingEntryIndicies) const;
	bool GetIsSetlistLocked() const;
	int32 GetMaxSongsPerPlayer() const;
	void GetSetlistEntryAtIndex(int32 Index_0, class FName* OutSongShortName, class APlayerState** OutAddedByPlayer) const;
	TArray<class FName> GetSongsAddedByPlayer(class APlayerState* Player) const;
	bool HasAnyoneAddedSong(class FName SongShortName, class APlayerState** OutAddedByPlayer) const;
	bool HasPlayerAddedSong(class FName SongShortName, class APlayerState* Player) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimCustomSetlist">();
	}
	static class UPilgrimCustomSetlist* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimCustomSetlist>();
	}
};
static_assert(alignof(UPilgrimCustomSetlist) == 0x000008, "Wrong alignment on UPilgrimCustomSetlist");
static_assert(sizeof(UPilgrimCustomSetlist) == 0x0000E8, "Wrong size on UPilgrimCustomSetlist");
static_assert(offsetof(UPilgrimCustomSetlist, OnLockedStateChanged) == 0x0000C0, "Member 'UPilgrimCustomSetlist::OnLockedStateChanged' has a wrong offset!");
static_assert(offsetof(UPilgrimCustomSetlist, SetlistEntries) == 0x0000D0, "Member 'UPilgrimCustomSetlist::SetlistEntries' has a wrong offset!");
static_assert(offsetof(UPilgrimCustomSetlist, MaxSongsPerPlayer) == 0x0000E0, "Member 'UPilgrimCustomSetlist::MaxSongsPerPlayer' has a wrong offset!");
static_assert(offsetof(UPilgrimCustomSetlist, bIsSetlistLocked) == 0x0000E4, "Member 'UPilgrimCustomSetlist::bIsSetlistLocked' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimDanceSynchronizerComponent
// 0x0000 (0x00F8 - 0x00F8)
class UPilgrimDanceSynchronizerComponent final : public USparksDanceSynchronizerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimDanceSynchronizerComponent">();
	}
	static class UPilgrimDanceSynchronizerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimDanceSynchronizerComponent>();
	}
};
static_assert(alignof(UPilgrimDanceSynchronizerComponent) == 0x000008, "Wrong alignment on UPilgrimDanceSynchronizerComponent");
static_assert(sizeof(UPilgrimDanceSynchronizerComponent) == 0x0000F8, "Wrong size on UPilgrimDanceSynchronizerComponent");

// Class PilgrimCoreRuntime.PilgrimDelayUntilTimeBeforeMidiTick
// 0x0030 (0x0060 - 0x0030)
class UPilgrimDelayUntilTimeBeforeMidiTick final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(class UObject* PassthroughObject)> OnFinished;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimGame*                           PilgrimGame;                                       // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                Passthrough;                                       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UPilgrimDelayUntilTimeBeforeMidiTick* PilgrimDelayUntilTimeBeforeMidiTick(class UObject* PassthroughObject, class UPilgrimGame* PilgrimGameContext, int32 MidiTick, float SecondsBeforeTick, ECalibratedMusicTimebase Timebase);

	void TimerTick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimDelayUntilTimeBeforeMidiTick">();
	}
	static class UPilgrimDelayUntilTimeBeforeMidiTick* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimDelayUntilTimeBeforeMidiTick>();
	}
};
static_assert(alignof(UPilgrimDelayUntilTimeBeforeMidiTick) == 0x000008, "Wrong alignment on UPilgrimDelayUntilTimeBeforeMidiTick");
static_assert(sizeof(UPilgrimDelayUntilTimeBeforeMidiTick) == 0x000060, "Wrong size on UPilgrimDelayUntilTimeBeforeMidiTick");
static_assert(offsetof(UPilgrimDelayUntilTimeBeforeMidiTick, OnFinished) == 0x000030, "Member 'UPilgrimDelayUntilTimeBeforeMidiTick::OnFinished' has a wrong offset!");
static_assert(offsetof(UPilgrimDelayUntilTimeBeforeMidiTick, PilgrimGame) == 0x000050, "Member 'UPilgrimDelayUntilTimeBeforeMidiTick::PilgrimGame' has a wrong offset!");
static_assert(offsetof(UPilgrimDelayUntilTimeBeforeMidiTick, Passthrough) == 0x000058, "Member 'UPilgrimDelayUntilTimeBeforeMidiTick::Passthrough' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimEventRouterLibrary
// 0x0000 (0x0028 - 0x0028)
class UPilgrimEventRouterLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UGameplayEventRouterComponent* GetGameplayEventRouter(class AActor* ContextActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimEventRouterLibrary">();
	}
	static class UPilgrimEventRouterLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimEventRouterLibrary>();
	}
};
static_assert(alignof(UPilgrimEventRouterLibrary) == 0x000008, "Wrong alignment on UPilgrimEventRouterLibrary");
static_assert(sizeof(UPilgrimEventRouterLibrary) == 0x000028, "Wrong size on UPilgrimEventRouterLibrary");

// Class PilgrimCoreRuntime.PilgrimGame
// 0x0598 (0x0638 - 0x00A0)
class UPilgrimGame final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FPilgrimGameProgress& Score)> OnGameScoreUpdated;                                // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSongEnded;                                       // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Enabled)>  OnAutoplayUpdated;                                 // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Enabled)>  OnDisableMissUpdated;                              // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         CurrentSeekMs;                                     // 0x0100(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpMarkerStart;                                   // 0x0104(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpMarkerEnd;                                     // 0x0108(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimScoringModel*                   ScoringModel;                                      // 0x0110(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimGameConfig*                     PilgrimGameConfig;                                 // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x10];                                     // 0x0120(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimPlayerControllerComponent*      OwnerControllerComponent;                          // 0x0130(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        MetasoundPlayer;                                   // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        MetasoundMixer;                                    // 0x0140(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMusicClockComponent*                   MusicClock;                                        // 0x0148(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMetasoundGeneratorHandle*              MetasoundPlayerGeneratorHandle;                    // 0x0150(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMetasoundParameterPack*                MetasoundPlayerSeekParamPack;                      // 0x0158(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimMediaStreamer*                  PilgrimMediaStreamer;                              // 0x0160(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APilgrimTrack*                          MainTrack;                                         // 0x0168(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundBase*                             MissSound;                                         // 0x0170(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimGameEvaluator*                  PilgrimGameEvaluator;                              // 0x0178(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EPilgrimTrackLane, struct FPilgrimGameInProgressSustain> InProgressSustains;                                // 0x0180(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D0[0x390];                                    // 0x01D0(0x0390)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimSongData*                       SongData;                                          // 0x0560(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_568[0x18];                                     // 0x0568(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimMidiEventRouter*                MidiEventRouter;                                   // 0x0580(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_588[0xB0];                                     // 0x0588(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTrack(class APilgrimTrack* Track);
	void ApplySettingsFromConfig(const class UPilgrimGameConfig* GameConfig);
	void CheatEndSong();
	void CheatSetJumpMarkers(const class FString& FromTime, const class FString& ToTime);
	void CheatSetPerformanceData(const struct FPilgrimCheatPerformanceArgument& PerformanceArgument);
	void EndGame(bool bFadeOut, float FadeOutDurationSeconds);
	const struct FPilgrimGameConfigSettings GetGameConfigSettings();
	int32 GetNumLanes();
	void OnControlMappingsRebuilt();
	void OnEndedByServer();
	void OnInputMethodChanged(ECommonInputType CurrentInputType);
	void OnMusicReachedEndOfPlayback();
	void OnMusicResumed();
	void PlaySong(class UAudioComponent* InMetasoundPlayer, class UAudioComponent* InMetasoundMixer, class UMusicClockComponent* InMusicClock, class UPilgrimSongMetadata* InSong);
	void PlaySongStreamed(class UAudioComponent* InMetasoundPlayer, class UAudioComponent* InMetasoundMixer, class UMusicClockComponent* InMusicClock, class UPilgrimMediaStreamer* InStreamer);
	void ProcessSwing(EPilgrimTrackLane Lane, bool bIsPress);
	void SeekToTime(int32 Milliseconds);
	void SetDifficultyAndTrackType(EPilgrimSongDifficulty Difficulty, EPilgrimTrackType TrackType);
	void SetJumpMarkers(const int32 FromMillisecnods, const int32 ToMilliseconds);
	void SetLocalPlayer(class APlayerController* OwnerPC);
	void StopSong();

	struct FPilgrimSongMeasurePosition GetCurrentMeasureBeatTick() const;
	float GetCurrentODValue() const;
	float GetCurrentSongMs(ECalibratedMusicTimebase InTimebase) const;
	float GetCurrentSongTick(ECalibratedMusicTimebase InTimebase) const;
	bool GetGemBreakForTrackDifficulty(EPilgrimTrackType Track, EPilgrimSongDifficulty Difficulty, struct FPilgrimGemBreak* FoundBreak, float* BarsLeftInBreak, struct FPilgrimGemBreak* NextBreak, float* BarsTillNextBreak) const;
	float GetHitOffsetAverage() const;
	class FName GetInputNameForLane(EPilgrimTrackLane Lane) const;
	struct FKey GetKeyBoundToLane(EPilgrimTrackLane Lane) const;
	class APlayerController* GetLocalPlayerController() const;
	class APilgrimTrack* GetMainTrack() const;
	class UMusicClockComponent* GetMusicClock() const;
	EPilgrimSongDifficulty GetSelectedDifficulty() const;
	EPilgrimTrackType GetSelectedTrackType() const;
	float GetSongLengthMs() const;
	float GetTotalSecondsSinceGameEnd() const;
	bool IsAutoplayEnabled() const;
	bool IsDisableMissEnabled() const;
	bool IsGameEnded() const;
	bool IsInputSpecificGemShapesEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGame">();
	}
	static class UPilgrimGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimGame>();
	}
};
static_assert(alignof(UPilgrimGame) == 0x000008, "Wrong alignment on UPilgrimGame");
static_assert(sizeof(UPilgrimGame) == 0x000638, "Wrong size on UPilgrimGame");
static_assert(offsetof(UPilgrimGame, OnGameScoreUpdated) == 0x0000B0, "Member 'UPilgrimGame::OnGameScoreUpdated' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, OnSongEnded) == 0x0000C0, "Member 'UPilgrimGame::OnSongEnded' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, OnAutoplayUpdated) == 0x0000E0, "Member 'UPilgrimGame::OnAutoplayUpdated' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, OnDisableMissUpdated) == 0x0000F0, "Member 'UPilgrimGame::OnDisableMissUpdated' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, CurrentSeekMs) == 0x000100, "Member 'UPilgrimGame::CurrentSeekMs' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, JumpMarkerStart) == 0x000104, "Member 'UPilgrimGame::JumpMarkerStart' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, JumpMarkerEnd) == 0x000108, "Member 'UPilgrimGame::JumpMarkerEnd' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, ScoringModel) == 0x000110, "Member 'UPilgrimGame::ScoringModel' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, PilgrimGameConfig) == 0x000118, "Member 'UPilgrimGame::PilgrimGameConfig' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, OwnerControllerComponent) == 0x000130, "Member 'UPilgrimGame::OwnerControllerComponent' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, MetasoundPlayer) == 0x000138, "Member 'UPilgrimGame::MetasoundPlayer' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, MetasoundMixer) == 0x000140, "Member 'UPilgrimGame::MetasoundMixer' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, MusicClock) == 0x000148, "Member 'UPilgrimGame::MusicClock' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, MetasoundPlayerGeneratorHandle) == 0x000150, "Member 'UPilgrimGame::MetasoundPlayerGeneratorHandle' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, MetasoundPlayerSeekParamPack) == 0x000158, "Member 'UPilgrimGame::MetasoundPlayerSeekParamPack' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, PilgrimMediaStreamer) == 0x000160, "Member 'UPilgrimGame::PilgrimMediaStreamer' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, MainTrack) == 0x000168, "Member 'UPilgrimGame::MainTrack' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, MissSound) == 0x000170, "Member 'UPilgrimGame::MissSound' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, PilgrimGameEvaluator) == 0x000178, "Member 'UPilgrimGame::PilgrimGameEvaluator' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, InProgressSustains) == 0x000180, "Member 'UPilgrimGame::InProgressSustains' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, SongData) == 0x000560, "Member 'UPilgrimGame::SongData' has a wrong offset!");
static_assert(offsetof(UPilgrimGame, MidiEventRouter) == 0x000580, "Member 'UPilgrimGame::MidiEventRouter' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimGameConfig
// 0x0390 (0x03C0 - 0x0030)
class UPilgrimGameConfig final : public UPrimaryDataAsset
{
public:
	struct FPilgrimSongSettings                   SongSettings;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPilgrimGameConfigSettings             ConfigSettings;                                    // 0x0040(0x02F0)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	class USoundBase*                             MissSound;                                         // 0x0330(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHp;                                             // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamagePerHit;                                      // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EFortRarity, float>                      WeaponRarityToNoteDamage;                          // 0x0340(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FPilgrimStreakInfo>             StreakDefinitions;                                 // 0x0390(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimBoneCompressionSettings*>   SideloadLipsyncAnim_BoneCompressionSettings;       // 0x03A0(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UAnimCurveCompressionSettings*>  SideloadLipsyncAnim_CurveCompressionSettings;      // 0x03B0(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGameConfig">();
	}
	static class UPilgrimGameConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimGameConfig>();
	}
};
static_assert(alignof(UPilgrimGameConfig) == 0x000008, "Wrong alignment on UPilgrimGameConfig");
static_assert(sizeof(UPilgrimGameConfig) == 0x0003C0, "Wrong size on UPilgrimGameConfig");
static_assert(offsetof(UPilgrimGameConfig, SongSettings) == 0x000030, "Member 'UPilgrimGameConfig::SongSettings' has a wrong offset!");
static_assert(offsetof(UPilgrimGameConfig, ConfigSettings) == 0x000040, "Member 'UPilgrimGameConfig::ConfigSettings' has a wrong offset!");
static_assert(offsetof(UPilgrimGameConfig, MissSound) == 0x000330, "Member 'UPilgrimGameConfig::MissSound' has a wrong offset!");
static_assert(offsetof(UPilgrimGameConfig, MaxHp) == 0x000338, "Member 'UPilgrimGameConfig::MaxHp' has a wrong offset!");
static_assert(offsetof(UPilgrimGameConfig, DamagePerHit) == 0x00033C, "Member 'UPilgrimGameConfig::DamagePerHit' has a wrong offset!");
static_assert(offsetof(UPilgrimGameConfig, WeaponRarityToNoteDamage) == 0x000340, "Member 'UPilgrimGameConfig::WeaponRarityToNoteDamage' has a wrong offset!");
static_assert(offsetof(UPilgrimGameConfig, StreakDefinitions) == 0x000390, "Member 'UPilgrimGameConfig::StreakDefinitions' has a wrong offset!");
static_assert(offsetof(UPilgrimGameConfig, SideloadLipsyncAnim_BoneCompressionSettings) == 0x0003A0, "Member 'UPilgrimGameConfig::SideloadLipsyncAnim_BoneCompressionSettings' has a wrong offset!");
static_assert(offsetof(UPilgrimGameConfig, SideloadLipsyncAnim_CurveCompressionSettings) == 0x0003B0, "Member 'UPilgrimGameConfig::SideloadLipsyncAnim_CurveCompressionSettings' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimInstrumentConfig
// 0x00B8 (0x00E8 - 0x0030)
class UPilgrimInstrumentConfig final : public UPrimaryDataAsset
{
public:
	TArray<struct FPilgrimScoreMultiplierInfo>    ScoreMultiplierDefinitions;                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TOptional<int32>                              SustainScorePerBeat;                               // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPilgrimSongDifficulty, struct FStarPercentageThresholds> IndividualStarPercentageThresholds;                // 0x0048(0x0050)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	TMap<EPilgrimSongDifficulty, float>           BaseGemScoreValue;                                 // 0x0098(0x0050)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimInstrumentConfig">();
	}
	static class UPilgrimInstrumentConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimInstrumentConfig>();
	}
};
static_assert(alignof(UPilgrimInstrumentConfig) == 0x000008, "Wrong alignment on UPilgrimInstrumentConfig");
static_assert(sizeof(UPilgrimInstrumentConfig) == 0x0000E8, "Wrong size on UPilgrimInstrumentConfig");
static_assert(offsetof(UPilgrimInstrumentConfig, ScoreMultiplierDefinitions) == 0x000030, "Member 'UPilgrimInstrumentConfig::ScoreMultiplierDefinitions' has a wrong offset!");
static_assert(offsetof(UPilgrimInstrumentConfig, SustainScorePerBeat) == 0x000040, "Member 'UPilgrimInstrumentConfig::SustainScorePerBeat' has a wrong offset!");
static_assert(offsetof(UPilgrimInstrumentConfig, IndividualStarPercentageThresholds) == 0x000048, "Member 'UPilgrimInstrumentConfig::IndividualStarPercentageThresholds' has a wrong offset!");
static_assert(offsetof(UPilgrimInstrumentConfig, BaseGemScoreValue) == 0x000098, "Member 'UPilgrimInstrumentConfig::BaseGemScoreValue' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimGameDeveloperSettings
// 0x0018 (0x0048 - 0x0030)
class UPilgrimGameDeveloperSettings final : public UDeveloperSettings
{
public:
	struct FPilgrimSongSettings                   SongOverrides;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnforceSongEntitlements;                          // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGameDeveloperSettings">();
	}
	static class UPilgrimGameDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimGameDeveloperSettings>();
	}
};
static_assert(alignof(UPilgrimGameDeveloperSettings) == 0x000008, "Wrong alignment on UPilgrimGameDeveloperSettings");
static_assert(sizeof(UPilgrimGameDeveloperSettings) == 0x000048, "Wrong size on UPilgrimGameDeveloperSettings");
static_assert(offsetof(UPilgrimGameDeveloperSettings, SongOverrides) == 0x000030, "Member 'UPilgrimGameDeveloperSettings::SongOverrides' has a wrong offset!");
static_assert(offsetof(UPilgrimGameDeveloperSettings, bEnforceSongEntitlements) == 0x000040, "Member 'UPilgrimGameDeveloperSettings::bEnforceSongEntitlements' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimGameEvaluator
// 0x0218 (0x0240 - 0x0028)
class UPilgrimGameEvaluator final : public UObject
{
public:
	class UPilgrimSongData*                       CurrentSongData;                                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimSongMetadata*                   SongMetadata;                                      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimScoreDebugPrinter*              DebugScoreListener;                                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  ContextActor;                                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimGameConfig*                     PilgrimGameConfig;                                 // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimScoringModel*                   ScoringModel;                                      // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x1E8];                                     // 0x0058(0x01E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGameEvaluator">();
	}
	static class UPilgrimGameEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimGameEvaluator>();
	}
};
static_assert(alignof(UPilgrimGameEvaluator) == 0x000008, "Wrong alignment on UPilgrimGameEvaluator");
static_assert(sizeof(UPilgrimGameEvaluator) == 0x000240, "Wrong size on UPilgrimGameEvaluator");
static_assert(offsetof(UPilgrimGameEvaluator, CurrentSongData) == 0x000028, "Member 'UPilgrimGameEvaluator::CurrentSongData' has a wrong offset!");
static_assert(offsetof(UPilgrimGameEvaluator, SongMetadata) == 0x000030, "Member 'UPilgrimGameEvaluator::SongMetadata' has a wrong offset!");
static_assert(offsetof(UPilgrimGameEvaluator, DebugScoreListener) == 0x000038, "Member 'UPilgrimGameEvaluator::DebugScoreListener' has a wrong offset!");
static_assert(offsetof(UPilgrimGameEvaluator, ContextActor) == 0x000040, "Member 'UPilgrimGameEvaluator::ContextActor' has a wrong offset!");
static_assert(offsetof(UPilgrimGameEvaluator, PilgrimGameConfig) == 0x000048, "Member 'UPilgrimGameEvaluator::PilgrimGameConfig' has a wrong offset!");
static_assert(offsetof(UPilgrimGameEvaluator, ScoringModel) == 0x000050, "Member 'UPilgrimGameEvaluator::ScoringModel' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimGameUserSettings
// 0x0008 (0x0030 - 0x0028)
class UPilgrimGameUserSettings final : public UObject
{
public:
	EPilgrimSongDifficulty                        SongDifficulty;                                    // 0x0028(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             SelectedInstrument;                                // 0x0029(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSelectedInstrument(EPilgrimTrackType NewInstrument);
	void SetSongDifficulty(EPilgrimSongDifficulty NewDifficulty);

	EPilgrimTrackType GetSelectedInstrument() const;
	EPilgrimSongDifficulty GetSongDifficulty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGameUserSettings">();
	}
	static class UPilgrimGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimGameUserSettings>();
	}
};
static_assert(alignof(UPilgrimGameUserSettings) == 0x000008, "Wrong alignment on UPilgrimGameUserSettings");
static_assert(sizeof(UPilgrimGameUserSettings) == 0x000030, "Wrong size on UPilgrimGameUserSettings");
static_assert(offsetof(UPilgrimGameUserSettings, SongDifficulty) == 0x000028, "Member 'UPilgrimGameUserSettings::SongDifficulty' has a wrong offset!");
static_assert(offsetof(UPilgrimGameUserSettings, SelectedInstrument) == 0x000029, "Member 'UPilgrimGameUserSettings::SelectedInstrument' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimGem
// 0x0088 (0x0318 - 0x0290)
class APilgrimGem final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APilgrimGem* Gem)> OnGemSmashFinished;                                // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APilgrimGem* Gem)> OnGemEnteredSlopWindow;                            // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APilgrimGem* Gem)> OnGemExitedSlopWindow;                             // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APilgrimGemSmasher>      ParentSmasherPtr;                                  // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPilgrimGame>            ParentGamePtr;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APilgrimTrackSustain*                   RelatedSustain;                                    // 0x02D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x38];                                     // 0x02E0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AllowHitByInput(bool bIsPressInput, EPilgrimTrackLane Lane);
	void FinishGemSmash();
	void OnGemInputUpdated(const struct FKey& BoundKey);
	void OnGemPassed();
	void OnGemSmashed();
	void OnLaneSet(const struct FTrackItemInfo& Gem);
	void UpdateGemInput();

	EPilgrimTrackLane GetLane() const;
	bool IsOverdriveGem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGem">();
	}
	static class APilgrimGem* GetDefaultObj()
	{
		return GetDefaultObjImpl<APilgrimGem>();
	}
};
static_assert(alignof(APilgrimGem) == 0x000008, "Wrong alignment on APilgrimGem");
static_assert(sizeof(APilgrimGem) == 0x000318, "Wrong size on APilgrimGem");
static_assert(offsetof(APilgrimGem, OnGemSmashFinished) == 0x000298, "Member 'APilgrimGem::OnGemSmashFinished' has a wrong offset!");
static_assert(offsetof(APilgrimGem, OnGemEnteredSlopWindow) == 0x0002A8, "Member 'APilgrimGem::OnGemEnteredSlopWindow' has a wrong offset!");
static_assert(offsetof(APilgrimGem, OnGemExitedSlopWindow) == 0x0002B8, "Member 'APilgrimGem::OnGemExitedSlopWindow' has a wrong offset!");
static_assert(offsetof(APilgrimGem, ParentSmasherPtr) == 0x0002C8, "Member 'APilgrimGem::ParentSmasherPtr' has a wrong offset!");
static_assert(offsetof(APilgrimGem, ParentGamePtr) == 0x0002D0, "Member 'APilgrimGem::ParentGamePtr' has a wrong offset!");
static_assert(offsetof(APilgrimGem, RelatedSustain) == 0x0002D8, "Member 'APilgrimGem::RelatedSustain' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimGemAnalyzer
// 0x0138 (0x01D8 - 0x00A0)
class UPilgrimGemAnalyzer final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FParsedMidiTextEvent& EventData)> OnGameplayEventStarted;                            // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FPilgrimDifficultyTrackTypePair, struct FPilgrimGemDensityDataArray> SongSectionGemDensityDataMap;                      // 0x00C0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<struct FPilgrimDifficultyTrackTypePair, struct FPilgrimGemDensityDataArray> GameplaySectionGemDensityDataMap;                  // 0x0110(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x50];                                     // 0x0160(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MinimumEmptyBarsForBreak;                          // 0x01B0(0x0028)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UPilgrimGemAnalyzer* GetPilgrimGemAnalyzer(class UObject* WorldContextObject);
	static const class UPilgrimSongData* GetPilgrimSongData(class UObject* WorldContextObject);

	void GetGemBreaks(EPilgrimTrackType TrackType, EPilgrimSongDifficulty Difficulty, TArray<struct FPilgrimGemBreak>* OutGemBreaks);
	void GetGemDensityDataForAllGameplaySections(EPilgrimSongDifficulty Difficulty, EPilgrimTrackType TrackType, TArray<struct FPilgrimGemDensityData>* OutGemDensityData);
	void GetGemDensityDataForAllSongSections(EPilgrimSongDifficulty Difficulty, EPilgrimTrackType TrackType, TArray<struct FPilgrimGemDensityData>* OutGemDensityData);
	const struct FPilgrimGemDensityData GetGemDensityDataForGameplaySection(EPilgrimSongDifficulty Difficulty, EPilgrimTrackType TrackType, int32 SectionIndexToFind);
	const struct FPilgrimGemDensityData GetGemDensityDataForSongSection(EPilgrimSongDifficulty Difficulty, EPilgrimTrackType TrackType, int32 SectionIndexToFind);

	bool GetGemBreakForTrackDifficultyMs(EPilgrimTrackType Track, EPilgrimSongDifficulty Difficulty, float SongMs, struct FPilgrimGemBreak* FoundBreak, struct FPilgrimGemBreak* NextBreak) const;
	const class UPilgrimSongData* GetSongData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGemAnalyzer">();
	}
	static class UPilgrimGemAnalyzer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimGemAnalyzer>();
	}
};
static_assert(alignof(UPilgrimGemAnalyzer) == 0x000008, "Wrong alignment on UPilgrimGemAnalyzer");
static_assert(sizeof(UPilgrimGemAnalyzer) == 0x0001D8, "Wrong size on UPilgrimGemAnalyzer");
static_assert(offsetof(UPilgrimGemAnalyzer, OnGameplayEventStarted) == 0x0000A8, "Member 'UPilgrimGemAnalyzer::OnGameplayEventStarted' has a wrong offset!");
static_assert(offsetof(UPilgrimGemAnalyzer, SongSectionGemDensityDataMap) == 0x0000C0, "Member 'UPilgrimGemAnalyzer::SongSectionGemDensityDataMap' has a wrong offset!");
static_assert(offsetof(UPilgrimGemAnalyzer, GameplaySectionGemDensityDataMap) == 0x000110, "Member 'UPilgrimGemAnalyzer::GameplaySectionGemDensityDataMap' has a wrong offset!");
static_assert(offsetof(UPilgrimGemAnalyzer, MinimumEmptyBarsForBreak) == 0x0001B0, "Member 'UPilgrimGemAnalyzer::MinimumEmptyBarsForBreak' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimGemBreakListener
// 0x0098 (0x00C0 - 0x0028)
class UPilgrimGemBreakListener final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ForActor;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimSongDifficulty                        Difficulty;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPilgrimTrackType                             TrackType;                                         // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimGemBreak                       InBreak;                                           // 0x0044(0x0024)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimGemBreak                       LastPendingGemBreak;                               // 0x006C(0x0024)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         LastProcessedSongMs;                               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPilgrimSongData>        SongDataWeak;                                      // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInitalized;                                       // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9D[0x23];                                      // 0x009D(0x0023)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGemBreakListener">();
	}
	static class UPilgrimGemBreakListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimGemBreakListener>();
	}
};
static_assert(alignof(UPilgrimGemBreakListener) == 0x000008, "Wrong alignment on UPilgrimGemBreakListener");
static_assert(sizeof(UPilgrimGemBreakListener) == 0x0000C0, "Wrong size on UPilgrimGemBreakListener");
static_assert(offsetof(UPilgrimGemBreakListener, ForActor) == 0x000038, "Member 'UPilgrimGemBreakListener::ForActor' has a wrong offset!");
static_assert(offsetof(UPilgrimGemBreakListener, Difficulty) == 0x000040, "Member 'UPilgrimGemBreakListener::Difficulty' has a wrong offset!");
static_assert(offsetof(UPilgrimGemBreakListener, TrackType) == 0x000041, "Member 'UPilgrimGemBreakListener::TrackType' has a wrong offset!");
static_assert(offsetof(UPilgrimGemBreakListener, InBreak) == 0x000044, "Member 'UPilgrimGemBreakListener::InBreak' has a wrong offset!");
static_assert(offsetof(UPilgrimGemBreakListener, bIsLocalPlayer) == 0x000068, "Member 'UPilgrimGemBreakListener::bIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(UPilgrimGemBreakListener, LastPendingGemBreak) == 0x00006C, "Member 'UPilgrimGemBreakListener::LastPendingGemBreak' has a wrong offset!");
static_assert(offsetof(UPilgrimGemBreakListener, LastProcessedSongMs) == 0x000090, "Member 'UPilgrimGemBreakListener::LastProcessedSongMs' has a wrong offset!");
static_assert(offsetof(UPilgrimGemBreakListener, SongDataWeak) == 0x000094, "Member 'UPilgrimGemBreakListener::SongDataWeak' has a wrong offset!");
static_assert(offsetof(UPilgrimGemBreakListener, bInitalized) == 0x00009C, "Member 'UPilgrimGemBreakListener::bInitalized' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimGemSmasher
// 0x0018 (0x02A8 - 0x0290)
class APilgrimGemSmasher final : public AActor
{
public:
	class USplineComponent*                       GemSplinePath;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineStartInputKey;                               // 0x0298(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineOriginInputKey;                              // 0x029C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineEndInputKey;                                 // 0x02A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginSustainHoldEffect(bool bIsOverdrive);
	void EndSustainHoldEffect();
	void OnInputPressed();
	void OnInputReleased();
	void OnInputUpdated(const struct FKey& BoundKey);
	void OverdriveFailedDuringSustainHold();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGemSmasher">();
	}
	static class APilgrimGemSmasher* GetDefaultObj()
	{
		return GetDefaultObjImpl<APilgrimGemSmasher>();
	}
};
static_assert(alignof(APilgrimGemSmasher) == 0x000008, "Wrong alignment on APilgrimGemSmasher");
static_assert(sizeof(APilgrimGemSmasher) == 0x0002A8, "Wrong size on APilgrimGemSmasher");
static_assert(offsetof(APilgrimGemSmasher, GemSplinePath) == 0x000290, "Member 'APilgrimGemSmasher::GemSplinePath' has a wrong offset!");
static_assert(offsetof(APilgrimGemSmasher, SplineStartInputKey) == 0x000298, "Member 'APilgrimGemSmasher::SplineStartInputKey' has a wrong offset!");
static_assert(offsetof(APilgrimGemSmasher, SplineOriginInputKey) == 0x00029C, "Member 'APilgrimGemSmasher::SplineOriginInputKey' has a wrong offset!");
static_assert(offsetof(APilgrimGemSmasher, SplineEndInputKey) == 0x0002A0, "Member 'APilgrimGemSmasher::SplineEndInputKey' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimGemTrackItemMgr
// 0x00B8 (0x0190 - 0x00D8)
class UPilgrimGemTrackItemMgr final : public UPilgrimTrackItemMgr
{
public:
	TMap<struct FPilgrimTrackItemKey, class APilgrimGem*> ActiveGemsMap;                                     // 0x00D8(0x0050)(NativeAccessSpecifierPrivate)
	TArray<class APilgrimGem*>                    ActiveGems;                                        // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TSet<class APilgrimGem*>                      GemsInSlopWindow;                                  // 0x0138(0x0050)(NativeAccessSpecifierPrivate)
	class UPilgrimSustainTrackItemMgr*            SustainTrackItemMgr;                               // 0x0188(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnGemSmashFinished(class APilgrimGem* Gem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGemTrackItemMgr">();
	}
	static class UPilgrimGemTrackItemMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimGemTrackItemMgr>();
	}
};
static_assert(alignof(UPilgrimGemTrackItemMgr) == 0x000008, "Wrong alignment on UPilgrimGemTrackItemMgr");
static_assert(sizeof(UPilgrimGemTrackItemMgr) == 0x000190, "Wrong size on UPilgrimGemTrackItemMgr");
static_assert(offsetof(UPilgrimGemTrackItemMgr, ActiveGemsMap) == 0x0000D8, "Member 'UPilgrimGemTrackItemMgr::ActiveGemsMap' has a wrong offset!");
static_assert(offsetof(UPilgrimGemTrackItemMgr, ActiveGems) == 0x000128, "Member 'UPilgrimGemTrackItemMgr::ActiveGems' has a wrong offset!");
static_assert(offsetof(UPilgrimGemTrackItemMgr, GemsInSlopWindow) == 0x000138, "Member 'UPilgrimGemTrackItemMgr::GemsInSlopWindow' has a wrong offset!");
static_assert(offsetof(UPilgrimGemTrackItemMgr, SustainTrackItemMgr) == 0x000188, "Member 'UPilgrimGemTrackItemMgr::SustainTrackItemMgr' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimInputConfig
// 0x00B0 (0x00E0 - 0x0030)
class UPilgrimInputConfig final : public UPrimaryDataAsset
{
public:
	TMap<class UInputAction*, EPilgrimTrackLane>  InputActionToPilgrimLanePress;                     // 0x0030(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class UInputAction*, EPilgrimTrackLane>  InputActionToPilgrimLaneRelease;                   // 0x0080(0x0050)(Edit, NativeAccessSpecifierPublic)
	class UInputAction*                           OverdriveInputAction;                              // 0x00D0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           Overdrive5LaneInputAction;                         // 0x00D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimInputConfig">();
	}
	static class UPilgrimInputConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimInputConfig>();
	}
};
static_assert(alignof(UPilgrimInputConfig) == 0x000008, "Wrong alignment on UPilgrimInputConfig");
static_assert(sizeof(UPilgrimInputConfig) == 0x0000E0, "Wrong size on UPilgrimInputConfig");
static_assert(offsetof(UPilgrimInputConfig, InputActionToPilgrimLanePress) == 0x000030, "Member 'UPilgrimInputConfig::InputActionToPilgrimLanePress' has a wrong offset!");
static_assert(offsetof(UPilgrimInputConfig, InputActionToPilgrimLaneRelease) == 0x000080, "Member 'UPilgrimInputConfig::InputActionToPilgrimLaneRelease' has a wrong offset!");
static_assert(offsetof(UPilgrimInputConfig, OverdriveInputAction) == 0x0000D0, "Member 'UPilgrimInputConfig::OverdriveInputAction' has a wrong offset!");
static_assert(offsetof(UPilgrimInputConfig, Overdrive5LaneInputAction) == 0x0000D8, "Member 'UPilgrimInputConfig::Overdrive5LaneInputAction' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimLeaderboardLibrary
// 0x0000 (0x0028 - 0x0028)
class UPilgrimLeaderboardLibrary final : public UBlueprintFunctionLibrary
{
public:
	static EPilgrimLeaderboardType BandLeaderboardTypeFromSize(int32 Size);
	static int32 BandSizeFromLeaderboardType(EPilgrimLeaderboardType LeaderboardType);
	static struct FGameplayTag GetGameplayTagFromInstrument(EPilgrimTrackType Instrument);
	static EPilgrimTrackType GetInstrumentFromGameplayTag(const struct FGameplayTag& InstrumentGametag);
	static EPilgrimTrackType InstrumentFromSoloLeaderboardType(EPilgrimLeaderboardType LeaderboardType);
	static bool IsBandLeaderboard(EPilgrimLeaderboardType LeaderboardType);
	static bool IsSoloLeaderboard(EPilgrimLeaderboardType LeaderboardType);
	static EPilgrimLeaderboardType LeaderboardTypeFromString(const class FString& LeaderboardString);
	static class FString LeaderboardTypeToString(EPilgrimLeaderboardType LeaderboardType);
	static EPilgrimLeaderboardType SoloLeaderboardTypeFromInstrument(EPilgrimTrackType Instrument);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimLeaderboardLibrary">();
	}
	static class UPilgrimLeaderboardLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimLeaderboardLibrary>();
	}
};
static_assert(alignof(UPilgrimLeaderboardLibrary) == 0x000008, "Wrong alignment on UPilgrimLeaderboardLibrary");
static_assert(sizeof(UPilgrimLeaderboardLibrary) == 0x000028, "Wrong size on UPilgrimLeaderboardLibrary");

// Class PilgrimCoreRuntime.PilgrimLeaderboardManager
// 0x0458 (0x04F8 - 0x00A0)
class UPilgrimLeaderboardManager final : public UGameStateComponent
{
public:
	uint8                                         Pad_A0[0x60];                                      // 0x00A0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint32, class UPilgrimRequestFriendScoreWrapper*> RequestCacheWrapperMap;                            // 0x0100(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x3A8];                                    // 0x0150(0x03A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimLeaderboardManager">();
	}
	static class UPilgrimLeaderboardManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimLeaderboardManager>();
	}
};
static_assert(alignof(UPilgrimLeaderboardManager) == 0x000008, "Wrong alignment on UPilgrimLeaderboardManager");
static_assert(sizeof(UPilgrimLeaderboardManager) == 0x0004F8, "Wrong size on UPilgrimLeaderboardManager");
static_assert(offsetof(UPilgrimLeaderboardManager, RequestCacheWrapperMap) == 0x000100, "Member 'UPilgrimLeaderboardManager::RequestCacheWrapperMap' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimLeaderboardPlayerComponent
// 0x0120 (0x01C0 - 0x00A0)
class UPilgrimLeaderboardPlayerComponent final : public UControllerComponent
{
public:
	TMulticastInlineDelegate<void(const struct FPilgrimPlayerFeedResultEntry& HighestFriendEntry, int32 TotalFriendsSurpassed)> OnFriendsSurpassed;                                // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bOptionEnabled)> OnBandFriendLeaderboardOptionChanged;              // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bEnableBandFriendLeaderboardOption : 1;            // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_C1[0xE7];                                      // 0x00C1(0x00E7)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FriendPopupTimeSeconds;                            // 0x01A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AC[0x14];                                     // 0x01AC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckPlayerScoreForFriendSurpasser(int32 CurrentScore);
	void ClientCachePlayerFriendsHistoryComplete(const struct FPilgrimPlayerHistoryParams& HistoryParams, const TArray<struct FPilgrimPlayerHistoryResult>& Results, int32 RequestID);
	void ClientRequestSpotlightCompetitionsComplete(const struct FPilgrimSpotlightCompetitionParams& Params_0, const TArray<struct FPilgrimSpotlightCompetition>& SpotlightCompetitions, int32 RequestID);
	void GetPostMatchFriendRankAndDelta(const int32 FinalScore, int32* OutRank, int32* OutDelta);
	void OnRep_ChangedBandFriendLeaderboardOption();
	void ServerCachePlayerFriendsHistory(const struct FPilgrimPlayerHistoryParams& HistoryParams, const TArray<struct FUniqueNetIdRepl>& FriendAccountIds, int32 RequestID);
	void ServerRequestSpotlightCompetitions(const struct FPilgrimSpotlightCompetitionParams& Params_0, int32 RequestID);
	void SetCurrentSetlistInfo(class FName SongShortName, EPilgrimTrackType Instrument);
	void SetFriendFeedCache(const struct FPilgrimPlayerFeedResult& FeedResult);

	void GetSpotlightCompetitions(const struct FPilgrimGetSpotlightParams& SpotlightParams, TArray<struct FPilgrimSpotlightCompetition>* OutCompetitions) const;
	bool IsBandFriendLeaderboardEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimLeaderboardPlayerComponent">();
	}
	static class UPilgrimLeaderboardPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimLeaderboardPlayerComponent>();
	}
};
static_assert(alignof(UPilgrimLeaderboardPlayerComponent) == 0x000008, "Wrong alignment on UPilgrimLeaderboardPlayerComponent");
static_assert(sizeof(UPilgrimLeaderboardPlayerComponent) == 0x0001C0, "Wrong size on UPilgrimLeaderboardPlayerComponent");
static_assert(offsetof(UPilgrimLeaderboardPlayerComponent, OnFriendsSurpassed) == 0x0000A0, "Member 'UPilgrimLeaderboardPlayerComponent::OnFriendsSurpassed' has a wrong offset!");
static_assert(offsetof(UPilgrimLeaderboardPlayerComponent, OnBandFriendLeaderboardOptionChanged) == 0x0000B0, "Member 'UPilgrimLeaderboardPlayerComponent::OnBandFriendLeaderboardOptionChanged' has a wrong offset!");
static_assert(offsetof(UPilgrimLeaderboardPlayerComponent, FriendPopupTimeSeconds) == 0x0001A8, "Member 'UPilgrimLeaderboardPlayerComponent::FriendPopupTimeSeconds' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimMediaStreamer
// 0x0048 (0x00E8 - 0x00A0)
class UPilgrimMediaStreamer final : public UActorComponent
{
public:
	class UStemConfiguration*                     BusStemConfiguration;                              // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimSongMetadata*                   Song;                                              // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBaseStreamingVideo*                FortBaseStreaming;                                 // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStemmedMediaStreamAsset*               StemmedMediaStreamAsset;                           // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMidiFile*                              MidiFile;                                          // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStreamerPrepared;                                // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EPilgrimStreamerStatus                        StreamingStatus;                                   // 0x00D8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              LipSyncSkeleton;                                   // 0x00E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnSongDataDownloaded(class UCatalogData* CatalogData, bool bSuccess);
	void OnVideoError(EBaseMediaTerminalErrorReason Reason);
	void OnVideoOpened(const class FString& OpenedUrl);
	void OnVideoOpenFailed(const class FString& FailedUrl);
	void OnVideoOpenTimeout();
	void OnVideoSuccess();
	void PlaySong();
	void PrepareSong(class UPilgrimSongMetadata* InSong);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimMediaStreamer">();
	}
	static class UPilgrimMediaStreamer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimMediaStreamer>();
	}
};
static_assert(alignof(UPilgrimMediaStreamer) == 0x000008, "Wrong alignment on UPilgrimMediaStreamer");
static_assert(sizeof(UPilgrimMediaStreamer) == 0x0000E8, "Wrong size on UPilgrimMediaStreamer");
static_assert(offsetof(UPilgrimMediaStreamer, BusStemConfiguration) == 0x0000A0, "Member 'UPilgrimMediaStreamer::BusStemConfiguration' has a wrong offset!");
static_assert(offsetof(UPilgrimMediaStreamer, Song) == 0x0000A8, "Member 'UPilgrimMediaStreamer::Song' has a wrong offset!");
static_assert(offsetof(UPilgrimMediaStreamer, FortBaseStreaming) == 0x0000B0, "Member 'UPilgrimMediaStreamer::FortBaseStreaming' has a wrong offset!");
static_assert(offsetof(UPilgrimMediaStreamer, StemmedMediaStreamAsset) == 0x0000B8, "Member 'UPilgrimMediaStreamer::StemmedMediaStreamAsset' has a wrong offset!");
static_assert(offsetof(UPilgrimMediaStreamer, MidiFile) == 0x0000C0, "Member 'UPilgrimMediaStreamer::MidiFile' has a wrong offset!");
static_assert(offsetof(UPilgrimMediaStreamer, OnStreamerPrepared) == 0x0000C8, "Member 'UPilgrimMediaStreamer::OnStreamerPrepared' has a wrong offset!");
static_assert(offsetof(UPilgrimMediaStreamer, StreamingStatus) == 0x0000D8, "Member 'UPilgrimMediaStreamer::StreamingStatus' has a wrong offset!");
static_assert(offsetof(UPilgrimMediaStreamer, LipSyncSkeleton) == 0x0000E0, "Member 'UPilgrimMediaStreamer::LipSyncSkeleton' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimMidiEventRouter
// 0x03E0 (0x0408 - 0x0028)
class UPilgrimMidiEventRouter final : public UObject
{
public:
	uint8                                         Pad_28[0x3E0];                                     // 0x0028(0x03E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimMidiEventRouter">();
	}
	static class UPilgrimMidiEventRouter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimMidiEventRouter>();
	}
};
static_assert(alignof(UPilgrimMidiEventRouter) == 0x000008, "Wrong alignment on UPilgrimMidiEventRouter");
static_assert(sizeof(UPilgrimMidiEventRouter) == 0x000408, "Wrong size on UPilgrimMidiEventRouter");

// Class PilgrimCoreRuntime.PilgrimMusicBattleInstance
// 0x0550 (0x07E0 - 0x0290)
class APilgrimMusicBattleInstance final : public AActor
{
public:
	TMulticastInlineDelegate<void(EMusicBattleEndReason EndReason)> OnMusicBattleFinished;                             // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x02A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimMusicBattleData                MusicBattleData;                                   // 0x02A8(0x0048)(BlueprintVisible, Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	class FName                                   SongToPlayShortName;                               // 0x02F0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimSongMetadata*                   SongToPlay;                                        // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPilgrimSongDifficulty                        SongDifficultyToPlay;                              // 0x0300(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClientHasReceivedSongToPlay;                      // 0x0301(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimSinglePlayerBattleData         SinglePlayerBattleData;                            // 0x0308(0x0010)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                         LocalPlayerIndex;                                  // 0x0318(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerStateAthena*>         MusicBattlePlayers;                                // 0x0320(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	struct FMusicBattleSinglePlayerOptions        SinglePlayerBattleOptions;                         // 0x0330(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UPilgrimGameConfig*                     PilgrimGameConfig;                                 // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMusicBattleType                              MusicBattleType;                                   // 0x0340(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        LocalMetasoundPlayer;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        LocalMetasoundMixer;                               // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         DisableScoreCeilingForSongs;                       // 0x0358(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	int32                                         SrvFIThrMs;                                        // 0x0368(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36C[0x6C];                                     // 0x036C(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixAudioAnalyzerResultsProvider*  FFTAnalyzerResultsProvider;                        // 0x03D8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UPilgrimPlayerControllerComponent*, int32> CurrentPlayerToIndexMap;                           // 0x03E0(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UPilgrimSongData*                       SongData;                                          // 0x0430(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_438[0x50];                                     // 0x0438(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AFortPlayerStateAthena*, class UServerPilgrimGame*> ServerPilgrimGameMap;                              // 0x0488(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D8[0x1A8];                                    // 0x04D8(0x01A8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPilgrimGemBreakListener*>       GemBreakListeners;                                 // 0x0680(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_690[0xF8];                                     // 0x0690(0x00F8)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UPilgrimPlayerControllerComponent*> PlayersWhoOwnCurrentSong;                          // 0x0788(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D8[0x8];                                      // 0x07D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMusicBattlePlayers(const TArray<class AFortPlayerStateAthena*>& NewPlayers);
	void AddToBandScore(float Score);
	void BroadcastMBIEventFinished();
	void BroadcastMBIEventStarted();
	void Client_DoMultiplayerBeamClash();
	void Client_DoMultiplayerDamageEffect(int32 DamagingPlayerId, int32 DamagedPlayerId);
	void ConnectFFTAnalysis(class UAudioComponent* AudioComponentWithAnalyzer);
	void DoEndGameCheat(bool bIsWin);
	void DoMultiplayerDamage(int32 DamagingPlayerId, int32 DamagedPlayerId, const struct FPilgrimGameProgress& GameUpdateThatDidDamage);
	void FireLocalPlayerBeam(EMusicBattleProjectileType ProjectileType);
	class UGameplayEventRouterComponent* GetEventRouter();
	float GetScoreDensityForPlayer(class APlayerState* PlayerState);
	uint8 GetTeam();
	void NetMulticast_CheatEndSong();
	void NetMulticast_CheatSeekToTime(int32 Milliseconds);
	void NetMulticast_CheatSetPerformanceData(const class FString& PerformanceArgument);
	void NetMulticast_DoBeamClash();
	void NetMulticast_DoMultiplayerDamageEffect(int32 DamagingPlayerId, int32 DamagedPlayerId);
	void OnClientReceivedSongToPlay(class UPilgrimSongMetadata* Song);
	void OnPlayerReachedZeroHp(int32 PlayerId);
	void OnRep_MusicBattleData(const struct FPilgrimMusicBattleData& PreviousMusicBattleData);
	void OnRep_SongToPlay();
	void OnSongLoaded();
	void OnStartedPlayingSong(class UPilgrimSongMetadata* Song);
	void OnTrackHiddenChanged(bool bHideTrack);
	void PlayerDisconnected(const class UPilgrimPlayerControllerComponent* ControllerComponent);
	void ServerAllPlayersHaveFinishedSong();
	void ServerFinishDisconnect();
	void ServerOnClientUpdateReceived(class UPilgrimPlayerControllerComponent* PlayerControllerComponent, EMusicBattleClientUpdate ClientUpdate);
	void ServerOnSongMidiFinishedLoading();
	void ServerOnTeamQuickplayScoreChanged(class UPilgrimPlayerControllerComponent* PlayerControllerComponent, struct FPilgrimGameProgress* NextScoreForCurrentPlayer, const float LastInputTimeMs);
	void ServerOnTimedInputReceived(class UPilgrimPlayerControllerComponent* PlayerControllerComponent, const struct FPilgrimTimedInput& TimedInput);
	void ServerUserFinishedDisconnecting();
	void SetMusicBattleType(const EMusicBattleType NewMusicBattleType);
	void SetupSinglePlayerBattle();
	void SubtractFromBandScore(float Score);
	void UpdateLocalPlayerScore(const struct FPilgrimGameProgress& LocalPlayerGameProgress);
	void UpdateScore();
	void UpdateVisibilityOfUI();

	bool Debug_IsTrackHidden() const;
	const class UPilgrimGameConfig* GetConfig() const;
	class AFortPlayerStateAthena* GetCurrentLocalPlayer() const;
	void GetDifficultyAndTrackType(EPilgrimSongDifficulty* OutSongDifficulty, EPilgrimTrackType* OutSongTrackType) const;
	class UPilgrimGame* GetLocalPilgrimGame() const;
	const struct FPilgrimMusicBattleData GetMusicBattleData() const;
	class UMusicClockComponent* GetMusicClock() const;
	class UPilgrimSongMetadata* GetNextSongToPlay() const;
	TSet<EPilgrimTrackType> GetPlayedTrackTypesInCurrentSong() const;
	class AFortPlayerStateAthena* GetPlayerFromIndex(const int32 PlayerIndex) const;
	EPilgrimSongDifficulty GetSongDifficultyForPlayer(const class AFortPlayerStateAthena* Player) const;
	EPilgrimSongPlayMethod GetSongPlayMethod() const;
	ESparksInstrumentType GetStartingInstrumentForTrackInCurrentSong(EPilgrimTrackType TrackType) const;
	float GetStreakMultiplier(const struct FPilgrimGameProgress& LocalPlayerGameProgress) const;
	EPilgrimTrackType GetTrackTypeForPlayer(const class AFortPlayerStateAthena* Player) const;
	TSet<EPilgrimTrackType> GetUnplayedTrackTypesInCurrentSong() const;
	void HandleNewFFTResults(class FName OutputName, const struct FMetaSoundOutput& Output) const;
	bool IsHardStopAllowed() const;
	bool IsHardStopped() const;
	bool IsLocalPlayerInBattleParticipants() const;
	bool IsLocalPlayerRoaming() const;
	bool IsPlayerInBattleParticipants(class AFortPlayerStateAthena* PlayerState) const;
	bool IsRestartAllowed() const;
	bool IsSinglePlayerBattleAgainstPrimitiveAI() const;
	bool IsTwoPlayerBattleWithBeams() const;
	bool ShouldUseTouchUIForLocalPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimMusicBattleInstance">();
	}
	static class APilgrimMusicBattleInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<APilgrimMusicBattleInstance>();
	}
};
static_assert(alignof(APilgrimMusicBattleInstance) == 0x000008, "Wrong alignment on APilgrimMusicBattleInstance");
static_assert(sizeof(APilgrimMusicBattleInstance) == 0x0007E0, "Wrong size on APilgrimMusicBattleInstance");
static_assert(offsetof(APilgrimMusicBattleInstance, OnMusicBattleFinished) == 0x000290, "Member 'APilgrimMusicBattleInstance::OnMusicBattleFinished' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, Team) == 0x0002A0, "Member 'APilgrimMusicBattleInstance::Team' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, MusicBattleData) == 0x0002A8, "Member 'APilgrimMusicBattleInstance::MusicBattleData' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, SongToPlayShortName) == 0x0002F0, "Member 'APilgrimMusicBattleInstance::SongToPlayShortName' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, SongToPlay) == 0x0002F8, "Member 'APilgrimMusicBattleInstance::SongToPlay' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, SongDifficultyToPlay) == 0x000300, "Member 'APilgrimMusicBattleInstance::SongDifficultyToPlay' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, bClientHasReceivedSongToPlay) == 0x000301, "Member 'APilgrimMusicBattleInstance::bClientHasReceivedSongToPlay' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, SinglePlayerBattleData) == 0x000308, "Member 'APilgrimMusicBattleInstance::SinglePlayerBattleData' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, LocalPlayerIndex) == 0x000318, "Member 'APilgrimMusicBattleInstance::LocalPlayerIndex' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, MusicBattlePlayers) == 0x000320, "Member 'APilgrimMusicBattleInstance::MusicBattlePlayers' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, SinglePlayerBattleOptions) == 0x000330, "Member 'APilgrimMusicBattleInstance::SinglePlayerBattleOptions' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, PilgrimGameConfig) == 0x000338, "Member 'APilgrimMusicBattleInstance::PilgrimGameConfig' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, MusicBattleType) == 0x000340, "Member 'APilgrimMusicBattleInstance::MusicBattleType' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, LocalMetasoundPlayer) == 0x000348, "Member 'APilgrimMusicBattleInstance::LocalMetasoundPlayer' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, LocalMetasoundMixer) == 0x000350, "Member 'APilgrimMusicBattleInstance::LocalMetasoundMixer' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, DisableScoreCeilingForSongs) == 0x000358, "Member 'APilgrimMusicBattleInstance::DisableScoreCeilingForSongs' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, SrvFIThrMs) == 0x000368, "Member 'APilgrimMusicBattleInstance::SrvFIThrMs' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, FFTAnalyzerResultsProvider) == 0x0003D8, "Member 'APilgrimMusicBattleInstance::FFTAnalyzerResultsProvider' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, CurrentPlayerToIndexMap) == 0x0003E0, "Member 'APilgrimMusicBattleInstance::CurrentPlayerToIndexMap' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, SongData) == 0x000430, "Member 'APilgrimMusicBattleInstance::SongData' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, ServerPilgrimGameMap) == 0x000488, "Member 'APilgrimMusicBattleInstance::ServerPilgrimGameMap' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, GemBreakListeners) == 0x000680, "Member 'APilgrimMusicBattleInstance::GemBreakListeners' has a wrong offset!");
static_assert(offsetof(APilgrimMusicBattleInstance, PlayersWhoOwnCurrentSong) == 0x000788, "Member 'APilgrimMusicBattleInstance::PlayersWhoOwnCurrentSong' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimNowBar
// 0x0058 (0x02E8 - 0x0290)
class APilgrimNowBar final : public AActor
{
public:
	class USplineComponent*                       BeatMarkerSplinePath;                              // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EPilgrimTrackLane, class AActor*>        LaneToSmasherMap;                                  // 0x0298(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	void SetGemSmasher(EPilgrimTrackLane Lane, class UChildActorComponent* Smasher);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimNowBar">();
	}
	static class APilgrimNowBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<APilgrimNowBar>();
	}
};
static_assert(alignof(APilgrimNowBar) == 0x000008, "Wrong alignment on APilgrimNowBar");
static_assert(sizeof(APilgrimNowBar) == 0x0002E8, "Wrong size on APilgrimNowBar");
static_assert(offsetof(APilgrimNowBar, BeatMarkerSplinePath) == 0x000290, "Member 'APilgrimNowBar::BeatMarkerSplinePath' has a wrong offset!");
static_assert(offsetof(APilgrimNowBar, LaneToSmasherMap) == 0x000298, "Member 'APilgrimNowBar::LaneToSmasherMap' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimObjectiveProcessorBase
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimObjectiveProcessorBase : public UFortObjectiveProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimObjectiveProcessorBase">();
	}
	static class UPilgrimObjectiveProcessorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimObjectiveProcessorBase>();
	}
};
static_assert(alignof(UPilgrimObjectiveProcessorBase) == 0x000008, "Wrong alignment on UPilgrimObjectiveProcessorBase");
static_assert(sizeof(UPilgrimObjectiveProcessorBase) == 0x0000A0, "Wrong size on UPilgrimObjectiveProcessorBase");

// Class PilgrimCoreRuntime.PilgrimObjectiveProcessor_AccumulateStars
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimObjectiveProcessor_AccumulateStars final : public UPilgrimObjectiveProcessorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimObjectiveProcessor_AccumulateStars">();
	}
	static class UPilgrimObjectiveProcessor_AccumulateStars* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimObjectiveProcessor_AccumulateStars>();
	}
};
static_assert(alignof(UPilgrimObjectiveProcessor_AccumulateStars) == 0x000008, "Wrong alignment on UPilgrimObjectiveProcessor_AccumulateStars");
static_assert(sizeof(UPilgrimObjectiveProcessor_AccumulateStars) == 0x0000A0, "Wrong size on UPilgrimObjectiveProcessor_AccumulateStars");

// Class PilgrimCoreRuntime.PilgrimObjectiveProcessor_Note
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimObjectiveProcessor_Note final : public UPilgrimObjectiveProcessorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimObjectiveProcessor_Note">();
	}
	static class UPilgrimObjectiveProcessor_Note* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimObjectiveProcessor_Note>();
	}
};
static_assert(alignof(UPilgrimObjectiveProcessor_Note) == 0x000008, "Wrong alignment on UPilgrimObjectiveProcessor_Note");
static_assert(sizeof(UPilgrimObjectiveProcessor_Note) == 0x0000A0, "Wrong size on UPilgrimObjectiveProcessor_Note");

// Class PilgrimCoreRuntime.PilgrimObjectiveProcessor_ScoreEvent
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimObjectiveProcessor_ScoreEvent final : public UPilgrimObjectiveProcessorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimObjectiveProcessor_ScoreEvent">();
	}
	static class UPilgrimObjectiveProcessor_ScoreEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimObjectiveProcessor_ScoreEvent>();
	}
};
static_assert(alignof(UPilgrimObjectiveProcessor_ScoreEvent) == 0x000008, "Wrong alignment on UPilgrimObjectiveProcessor_ScoreEvent");
static_assert(sizeof(UPilgrimObjectiveProcessor_ScoreEvent) == 0x0000A0, "Wrong size on UPilgrimObjectiveProcessor_ScoreEvent");

// Class PilgrimCoreRuntime.PilgrimObjectiveProcessor_SetlistComplete
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimObjectiveProcessor_SetlistComplete final : public UPilgrimObjectiveProcessorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimObjectiveProcessor_SetlistComplete">();
	}
	static class UPilgrimObjectiveProcessor_SetlistComplete* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimObjectiveProcessor_SetlistComplete>();
	}
};
static_assert(alignof(UPilgrimObjectiveProcessor_SetlistComplete) == 0x000008, "Wrong alignment on UPilgrimObjectiveProcessor_SetlistComplete");
static_assert(sizeof(UPilgrimObjectiveProcessor_SetlistComplete) == 0x0000A0, "Wrong size on UPilgrimObjectiveProcessor_SetlistComplete");

// Class PilgrimCoreRuntime.PilgrimObjectiveProcessor_SongCompleted
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimObjectiveProcessor_SongCompleted final : public UPilgrimObjectiveProcessorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimObjectiveProcessor_SongCompleted">();
	}
	static class UPilgrimObjectiveProcessor_SongCompleted* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimObjectiveProcessor_SongCompleted>();
	}
};
static_assert(alignof(UPilgrimObjectiveProcessor_SongCompleted) == 0x000008, "Wrong alignment on UPilgrimObjectiveProcessor_SongCompleted");
static_assert(sizeof(UPilgrimObjectiveProcessor_SongCompleted) == 0x0000A0, "Wrong size on UPilgrimObjectiveProcessor_SongCompleted");

// Class PilgrimCoreRuntime.PilgrimObjectiveProcessor_SongStarted
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimObjectiveProcessor_SongStarted final : public UPilgrimObjectiveProcessorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimObjectiveProcessor_SongStarted">();
	}
	static class UPilgrimObjectiveProcessor_SongStarted* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimObjectiveProcessor_SongStarted>();
	}
};
static_assert(alignof(UPilgrimObjectiveProcessor_SongStarted) == 0x000008, "Wrong alignment on UPilgrimObjectiveProcessor_SongStarted");
static_assert(sizeof(UPilgrimObjectiveProcessor_SongStarted) == 0x0000A0, "Wrong size on UPilgrimObjectiveProcessor_SongStarted");

// Class PilgrimCoreRuntime.PilgrimPartitionInitializer
// 0x0040 (0x00B0 - 0x0070)
class UPilgrimPartitionInitializer final : public UFortClientSettingRecordPartitionInitializer
{
public:
	TSoftClassPtr<class UClass>                   PilgrimPresetSelectorClass;                        // 0x0070(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPilgrimPresetConfiguration> PilgrimPresetConfiguration;                        // 0x0090(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPartitionInitializer">();
	}
	static class UPilgrimPartitionInitializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPartitionInitializer>();
	}
};
static_assert(alignof(UPilgrimPartitionInitializer) == 0x000008, "Wrong alignment on UPilgrimPartitionInitializer");
static_assert(sizeof(UPilgrimPartitionInitializer) == 0x0000B0, "Wrong size on UPilgrimPartitionInitializer");
static_assert(offsetof(UPilgrimPartitionInitializer, PilgrimPresetSelectorClass) == 0x000070, "Member 'UPilgrimPartitionInitializer::PilgrimPresetSelectorClass' has a wrong offset!");
static_assert(offsetof(UPilgrimPartitionInitializer, PilgrimPresetConfiguration) == 0x000090, "Member 'UPilgrimPartitionInitializer::PilgrimPresetConfiguration' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimPerformanceTrackerComponent
// 0x00A0 (0x0140 - 0x00A0)
class UPilgrimPerformanceTrackerComponent final : public UControllerComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPilgrimTrackLane, struct FPilgrimPerformanceTrackerData> SongPerformanceData;                               // 0x00A8(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UPilgrimSongMetadata*                   SongMetadata;                                      // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APilgrimTrack*                          MainTrack;                                         // 0x0100(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPilgrimGame*                           PilgrimGame;                                       // 0x0108(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayEventListenerHandle           OverdriveActiveEventHandle;                        // 0x0110(0x001C)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxStreak;                                         // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentStreak;                                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeInOverdriveMs;                                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          InOverdrive;                                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnSongEnded();
	void HandleOverdriveActiveChangedEvent(const struct FPilgrimEvent_Scoring_OverdriveActiveChanged& Payload);

	float GetAverage(ECalibratedMusicTimebase Timebase) const;
	TArray<float> GetLaneOffsets(EPilgrimTrackLane Lane, ECalibratedMusicTimebase Timebase) const;
	struct FPilgrimEvent_Scoring_PerformanceDataResult GetResultData(ECalibratedMusicTimebase Timebase) const;
	float GetSampleAverage(const TArray<float>& Samples) const;
	float GetSampleDeviation(const TArray<float>& Samples, bool IsPopulation) const;
	float GetTotalDeviation(ECalibratedMusicTimebase Timebase) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPerformanceTrackerComponent">();
	}
	static class UPilgrimPerformanceTrackerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPerformanceTrackerComponent>();
	}
};
static_assert(alignof(UPilgrimPerformanceTrackerComponent) == 0x000008, "Wrong alignment on UPilgrimPerformanceTrackerComponent");
static_assert(sizeof(UPilgrimPerformanceTrackerComponent) == 0x000140, "Wrong size on UPilgrimPerformanceTrackerComponent");
static_assert(offsetof(UPilgrimPerformanceTrackerComponent, SongPerformanceData) == 0x0000A8, "Member 'UPilgrimPerformanceTrackerComponent::SongPerformanceData' has a wrong offset!");
static_assert(offsetof(UPilgrimPerformanceTrackerComponent, SongMetadata) == 0x0000F8, "Member 'UPilgrimPerformanceTrackerComponent::SongMetadata' has a wrong offset!");
static_assert(offsetof(UPilgrimPerformanceTrackerComponent, MainTrack) == 0x000100, "Member 'UPilgrimPerformanceTrackerComponent::MainTrack' has a wrong offset!");
static_assert(offsetof(UPilgrimPerformanceTrackerComponent, PilgrimGame) == 0x000108, "Member 'UPilgrimPerformanceTrackerComponent::PilgrimGame' has a wrong offset!");
static_assert(offsetof(UPilgrimPerformanceTrackerComponent, OverdriveActiveEventHandle) == 0x000110, "Member 'UPilgrimPerformanceTrackerComponent::OverdriveActiveEventHandle' has a wrong offset!");
static_assert(offsetof(UPilgrimPerformanceTrackerComponent, MaxStreak) == 0x00012C, "Member 'UPilgrimPerformanceTrackerComponent::MaxStreak' has a wrong offset!");
static_assert(offsetof(UPilgrimPerformanceTrackerComponent, CurrentStreak) == 0x000130, "Member 'UPilgrimPerformanceTrackerComponent::CurrentStreak' has a wrong offset!");
static_assert(offsetof(UPilgrimPerformanceTrackerComponent, TimeInOverdriveMs) == 0x000134, "Member 'UPilgrimPerformanceTrackerComponent::TimeInOverdriveMs' has a wrong offset!");
static_assert(offsetof(UPilgrimPerformanceTrackerComponent, InOverdrive) == 0x000138, "Member 'UPilgrimPerformanceTrackerComponent::InOverdrive' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimPerformanceTrackerSaveData
// 0x0050 (0x0078 - 0x0028)
class UPilgrimPerformanceTrackerSaveData final : public USaveGame
{
public:
	TMap<EPilgrimTrackLane, struct FPilgrimPerformanceTrackerData> SongPerformanceData;                               // 0x0028(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPerformanceTrackerSaveData">();
	}
	static class UPilgrimPerformanceTrackerSaveData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPerformanceTrackerSaveData>();
	}
};
static_assert(alignof(UPilgrimPerformanceTrackerSaveData) == 0x000008, "Wrong alignment on UPilgrimPerformanceTrackerSaveData");
static_assert(sizeof(UPilgrimPerformanceTrackerSaveData) == 0x000078, "Wrong size on UPilgrimPerformanceTrackerSaveData");
static_assert(offsetof(UPilgrimPerformanceTrackerSaveData, SongPerformanceData) == 0x000028, "Member 'UPilgrimPerformanceTrackerSaveData::SongPerformanceData' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimPlayerControllerComponent
// 0x0178 (0x0218 - 0x00A0)
class UPilgrimPlayerControllerComponent final : public UControllerComponent
{
public:
	TMulticastInlineDelegate<void(class UPilgrimPlayerControllerComponent* PlayerControllerComponent, struct FPilgrimTimedInput& TimedInput)> OnServerTimedInputReceived;                        // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UPilgrimPlayerControllerComponent* PlayerControllerComponent)> OnServerSyncHeartbeatMessageReceived;              // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortPlayerController* FortPlayerController, class UFortInputMappingContext* InputMappingContext)> OnActivateInputPreset;                             // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortPlayerController* FortPlayerController, class UFortInputMappingContext* InputMappingContext)> OnDesiredInputPresetChanged;                       // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInputSettingsChanged;                            // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UPilgrimPlayerControllerComponent* PlayerControllerComponent, EMusicBattleClientUpdate MusicBattleUpdate)> OnMusicBattleClientUpdateReceived;                 // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UPilgrimPlayerControllerComponent* PlayerControllerComponent, EPilgrimStateMachineMessage StateMachineMessage)> OnStateMachineMessageReceived;                     // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UDataTable*                             DefaultUnbindsDataTable;                           // 0x0110(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           CycleInputsInputAction;                            // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           CycleLanesInputAction;                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           EmotePickerInputAction;                            // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<uint8, struct FPilgrimLaneInputMappingConfig> LaneInputMappingConfigs;                           // 0x0140(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FPilgrimTouchBrushesMappingConfig      TouchBrushesConfig;                                // 0x0190(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         SelectedNumInputLanes;                             // 0x01A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInputMappingContext*               SelectedPCBeatmatchIMC;                            // 0x01A8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortInputMappingContext*               SelectedConsoleBeatmatchIMC;                       // 0x01B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x50];                                     // 0x01B8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimGameUserSettings*               PilgrimGameUserSettings;                           // 0x0208(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimPresetConfiguration*            PilgrimPresetConfiguration;                        // 0x0210(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ActivateSelectedInputMappingContexts();
	void CycleSelectedNumInputLanes();
	void CycleSelectedPreset();
	void DeactivateInputPreset();
	float GetHoldSecondsToSwitchNumLanes();
	class UPilgrimGameUserSettings* GetPilgrimGameUserSettings();
	void LoadInputConfigurationFromPartition();
	void Multiplayer_SendRequestToLeaveStage();
	void OnEmotePicker();
	void OnPilgrimGameEnd(class UPilgrimGame* PilgrimGame);
	void OnPilgrimGameStart(class UPilgrimGame* PilgrimGame);
	void SendRequestToRestartSong();
	void SendRequestToStopAndSkipPostGame();
	void SendUpdateToMusicBattle(EMusicBattleClientUpdate MusicBattleUpdate);
	void ServerHandleStateMachineRequest(EPilgrimStateMachineMessage StateMachineMessage);
	void ServerHandleUpdateMusicBattle(EMusicBattleClientUpdate MusicBattleUpdate);
	void ServerSendSyncHeartbeatMessage();
	void ServerSendTimedInput(const struct FPilgrimTimedInput& TimedInput);
	void ServerSetPlasticInstrumentsPluggedIn(bool bIsPlasticPluggedIn);
	void SetDesiredInputMappingContext(class UFortInputMappingContext* NewContext, EHardwareDevicePrimaryType DeviceType, bool bShouldUpdateSettings);
	void SetNumInputLanes(uint8 NumLanes);
	void Solo_SendRequestToLeaveStage();
	void Solo_SendRequestToPlayNextSong();
	void Solo_SendRequestToReplayPreviousSong();

	bool AreSelectedInputMappingContextsActive() const;
	class UFortInputMappingContext* FindFirstPresetMatchingCurrentKeybinds() const;
	int32 GetCurrentPresetIndex() const;
	class UFortInputMappingContext* GetLastSelectedPreset() const;
	int32 GetNumRelevantInputPresets() const;
	class UPilgrimClientSettingRecordPartition* GetPilgrimClientSettingRecordPartition() const;
	class UFortInputMappingContext* GetSelectedConsoleBeamatchInputMappingContext() const;
	class UFortInputMappingContext* GetSelectedPCBeamatchInputMappingContext() const;
	class UFortInputMappingContext* GetSelectedPreset() const;
	bool GetTouchBrushForInputAction(struct FSlateBrush* OutBrush, class UInputAction* InputAction) const;
	bool IsLocallyControlled() const;
	bool IsUsingGamepad() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPlayerControllerComponent">();
	}
	static class UPilgrimPlayerControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPlayerControllerComponent>();
	}
};
static_assert(alignof(UPilgrimPlayerControllerComponent) == 0x000008, "Wrong alignment on UPilgrimPlayerControllerComponent");
static_assert(sizeof(UPilgrimPlayerControllerComponent) == 0x000218, "Wrong size on UPilgrimPlayerControllerComponent");
static_assert(offsetof(UPilgrimPlayerControllerComponent, OnServerTimedInputReceived) == 0x0000A0, "Member 'UPilgrimPlayerControllerComponent::OnServerTimedInputReceived' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, OnServerSyncHeartbeatMessageReceived) == 0x0000B0, "Member 'UPilgrimPlayerControllerComponent::OnServerSyncHeartbeatMessageReceived' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, OnActivateInputPreset) == 0x0000C0, "Member 'UPilgrimPlayerControllerComponent::OnActivateInputPreset' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, OnDesiredInputPresetChanged) == 0x0000D0, "Member 'UPilgrimPlayerControllerComponent::OnDesiredInputPresetChanged' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, OnInputSettingsChanged) == 0x0000E0, "Member 'UPilgrimPlayerControllerComponent::OnInputSettingsChanged' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, OnMusicBattleClientUpdateReceived) == 0x0000F0, "Member 'UPilgrimPlayerControllerComponent::OnMusicBattleClientUpdateReceived' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, OnStateMachineMessageReceived) == 0x000100, "Member 'UPilgrimPlayerControllerComponent::OnStateMachineMessageReceived' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, DefaultUnbindsDataTable) == 0x000110, "Member 'UPilgrimPlayerControllerComponent::DefaultUnbindsDataTable' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, CycleInputsInputAction) == 0x000118, "Member 'UPilgrimPlayerControllerComponent::CycleInputsInputAction' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, CycleLanesInputAction) == 0x000128, "Member 'UPilgrimPlayerControllerComponent::CycleLanesInputAction' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, EmotePickerInputAction) == 0x000138, "Member 'UPilgrimPlayerControllerComponent::EmotePickerInputAction' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, LaneInputMappingConfigs) == 0x000140, "Member 'UPilgrimPlayerControllerComponent::LaneInputMappingConfigs' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, TouchBrushesConfig) == 0x000190, "Member 'UPilgrimPlayerControllerComponent::TouchBrushesConfig' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, SelectedNumInputLanes) == 0x0001A0, "Member 'UPilgrimPlayerControllerComponent::SelectedNumInputLanes' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, SelectedPCBeatmatchIMC) == 0x0001A8, "Member 'UPilgrimPlayerControllerComponent::SelectedPCBeatmatchIMC' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, SelectedConsoleBeatmatchIMC) == 0x0001B0, "Member 'UPilgrimPlayerControllerComponent::SelectedConsoleBeatmatchIMC' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, PilgrimGameUserSettings) == 0x000208, "Member 'UPilgrimPlayerControllerComponent::PilgrimGameUserSettings' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayerControllerComponent, PilgrimPresetConfiguration) == 0x000210, "Member 'UPilgrimPlayerControllerComponent::PilgrimPresetConfiguration' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimPlayspace
// 0x0040 (0x07D0 - 0x0790)
class APilgrimPlayspace : public ASparksMusicPlayspace
{
public:
	TArray<class APilgrimMusicBattleInstance*>    PilgrimMusicBattleInstances;                       // 0x0790(0x0010)(Net, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UNetworkedMusicClockManager*            MusicClockManager;                                 // 0x07A0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPilgrimPlayspaceComponent_SongPreloader* SongPreloader;                                     // 0x07A8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPilgrimMediaStreamer*                  MediaStreamer;                                     // 0x07B0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPilgrimGemAnalyzer*                    GemAnalyzer;                                       // 0x07B8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPilgrimPlayspaceComponent_LipSyncAssetManager* LipSyncManager;                                    // 0x07C0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPilgrimGameConfig*                     PilgrimGameConfig;                                 // 0x07C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UMusicClockComponent* GetMusicClock(class UObject* WorldContextObject);
	static class UNetworkedMusicClockManager* GetNetworkedMusicClockManager(class UObject* WorldContextObject);

	void AddMusicBattleInstance(class APilgrimMusicBattleInstance* MusicBattleInstance);
	void ClearMusicBattleInstances();

	void BroadcastCameraDirectorDynamicEvent(const struct FGameplayTagContainer& TagsToSend, class AActor* Target, float ShotTimeLength, bool bWaitForTransition) const;
	void BroadcastCameraDirectorIntermissionEvent(const struct FGameplayTagContainer& TagsToSend) const;
	const TArray<class APilgrimMusicBattleInstance*> GetAllMusicBattleInstances() const;
	const class UPilgrimGameConfig* GetConfig() const;
	class APilgrimMusicBattleInstance* GetMusicBattleInstanceForPlayer(class AController* Controller) const;
	class APilgrimMusicBattleInstance* GetMusicBattleInstanceForTeam(int32 Team) const;
	class UPilgrimGame* GetPilgrimGameForTeam(int32 TeamIndex) const;
	TArray<class AFortPlayerPawnAthena*> GetStandinPlayerPawns() const;
	TArray<class AFortPlayerStateAthena*> GetStandinPlayerStates() const;
	bool HasAnotherSongToPlay() const;
	class APilgrimMusicBattleInstance* TryGetMusicBattleInstanceForTeam(int32 Team) const;
	class UPilgrimGame* TryGetPilgrimGameForPlayer(class AController* Controller) const;
	class UPilgrimGame* TryGetPilgrimGameForTeam(int32 TeamIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPlayspace">();
	}
	static class APilgrimPlayspace* GetDefaultObj()
	{
		return GetDefaultObjImpl<APilgrimPlayspace>();
	}
};
static_assert(alignof(APilgrimPlayspace) == 0x000008, "Wrong alignment on APilgrimPlayspace");
static_assert(sizeof(APilgrimPlayspace) == 0x0007D0, "Wrong size on APilgrimPlayspace");
static_assert(offsetof(APilgrimPlayspace, PilgrimMusicBattleInstances) == 0x000790, "Member 'APilgrimPlayspace::PilgrimMusicBattleInstances' has a wrong offset!");
static_assert(offsetof(APilgrimPlayspace, MusicClockManager) == 0x0007A0, "Member 'APilgrimPlayspace::MusicClockManager' has a wrong offset!");
static_assert(offsetof(APilgrimPlayspace, SongPreloader) == 0x0007A8, "Member 'APilgrimPlayspace::SongPreloader' has a wrong offset!");
static_assert(offsetof(APilgrimPlayspace, MediaStreamer) == 0x0007B0, "Member 'APilgrimPlayspace::MediaStreamer' has a wrong offset!");
static_assert(offsetof(APilgrimPlayspace, GemAnalyzer) == 0x0007B8, "Member 'APilgrimPlayspace::GemAnalyzer' has a wrong offset!");
static_assert(offsetof(APilgrimPlayspace, LipSyncManager) == 0x0007C0, "Member 'APilgrimPlayspace::LipSyncManager' has a wrong offset!");
static_assert(offsetof(APilgrimPlayspace, PilgrimGameConfig) == 0x0007C8, "Member 'APilgrimPlayspace::PilgrimGameConfig' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimPlayspaceComponent_LipSyncAssetManager
// 0x0008 (0x00B8 - 0x00B0)
class UPilgrimPlayspaceComponent_LipSyncAssetManager final : public UPlayspaceComponent_LipSyncAssetManager
{
public:
	class UAnimSequence*                          CachedLipsyncAnimSequence;                         // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPlayspaceComponent_LipSyncAssetManager">();
	}
	static class UPilgrimPlayspaceComponent_LipSyncAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPlayspaceComponent_LipSyncAssetManager>();
	}
};
static_assert(alignof(UPilgrimPlayspaceComponent_LipSyncAssetManager) == 0x000008, "Wrong alignment on UPilgrimPlayspaceComponent_LipSyncAssetManager");
static_assert(sizeof(UPilgrimPlayspaceComponent_LipSyncAssetManager) == 0x0000B8, "Wrong size on UPilgrimPlayspaceComponent_LipSyncAssetManager");
static_assert(offsetof(UPilgrimPlayspaceComponent_LipSyncAssetManager, CachedLipsyncAnimSequence) == 0x0000B0, "Member 'UPilgrimPlayspaceComponent_LipSyncAssetManager::CachedLipsyncAnimSequence' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimPremadeSetlist
// 0x0090 (0x00C0 - 0x0030)
class UPilgrimPremadeSetlist final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SetlistTitle;                                      // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           SongShortNameList;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SetlistTag;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalTags;                                    // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SetlistArt;                                        // 0x00A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPremadeSetlist">();
	}
	static class UPilgrimPremadeSetlist* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPremadeSetlist>();
	}
};
static_assert(alignof(UPilgrimPremadeSetlist) == 0x000008, "Wrong alignment on UPilgrimPremadeSetlist");
static_assert(sizeof(UPilgrimPremadeSetlist) == 0x0000C0, "Wrong size on UPilgrimPremadeSetlist");
static_assert(offsetof(UPilgrimPremadeSetlist, SetlistTitle) == 0x000038, "Member 'UPilgrimPremadeSetlist::SetlistTitle' has a wrong offset!");
static_assert(offsetof(UPilgrimPremadeSetlist, Description) == 0x000050, "Member 'UPilgrimPremadeSetlist::Description' has a wrong offset!");
static_assert(offsetof(UPilgrimPremadeSetlist, SongShortNameList) == 0x000068, "Member 'UPilgrimPremadeSetlist::SongShortNameList' has a wrong offset!");
static_assert(offsetof(UPilgrimPremadeSetlist, SetlistTag) == 0x000078, "Member 'UPilgrimPremadeSetlist::SetlistTag' has a wrong offset!");
static_assert(offsetof(UPilgrimPremadeSetlist, AdditionalTags) == 0x000080, "Member 'UPilgrimPremadeSetlist::AdditionalTags' has a wrong offset!");
static_assert(offsetof(UPilgrimPremadeSetlist, SetlistArt) == 0x0000A0, "Member 'UPilgrimPremadeSetlist::SetlistArt' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimPresetConfiguration
// 0x0070 (0x00A0 - 0x0030)
class UPilgrimPresetConfiguration final : public UDataAsset
{
public:
	class UFortInputMappingContext*               GlobalInputMappingContext;                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortInputMappingContext*               CheatInputMappingContext;                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortInputMappingContext*               GreenRoomInputMappingContext;                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortInputMappingContext*               GreenRoomAltInputMappingContext;                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint8, struct FPilgrimLaneInputMappingConfig> LaneInputMappingConfigs;                           // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	TArray<class UFortInputMappingContext*> GetDeviceInputMappingContexts(int32 NumLanes, EHardwareDevicePrimaryType DeviceType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPresetConfiguration">();
	}
	static class UPilgrimPresetConfiguration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPresetConfiguration>();
	}
};
static_assert(alignof(UPilgrimPresetConfiguration) == 0x000008, "Wrong alignment on UPilgrimPresetConfiguration");
static_assert(sizeof(UPilgrimPresetConfiguration) == 0x0000A0, "Wrong size on UPilgrimPresetConfiguration");
static_assert(offsetof(UPilgrimPresetConfiguration, GlobalInputMappingContext) == 0x000030, "Member 'UPilgrimPresetConfiguration::GlobalInputMappingContext' has a wrong offset!");
static_assert(offsetof(UPilgrimPresetConfiguration, CheatInputMappingContext) == 0x000038, "Member 'UPilgrimPresetConfiguration::CheatInputMappingContext' has a wrong offset!");
static_assert(offsetof(UPilgrimPresetConfiguration, GreenRoomInputMappingContext) == 0x000040, "Member 'UPilgrimPresetConfiguration::GreenRoomInputMappingContext' has a wrong offset!");
static_assert(offsetof(UPilgrimPresetConfiguration, GreenRoomAltInputMappingContext) == 0x000048, "Member 'UPilgrimPresetConfiguration::GreenRoomAltInputMappingContext' has a wrong offset!");
static_assert(offsetof(UPilgrimPresetConfiguration, LaneInputMappingConfigs) == 0x000050, "Member 'UPilgrimPresetConfiguration::LaneInputMappingConfigs' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimPresetSelectorBase
// 0x0000 (0x0028 - 0x0028)
class UPilgrimPresetSelectorBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPresetSelectorBase">();
	}
	static class UPilgrimPresetSelectorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPresetSelectorBase>();
	}
};
static_assert(alignof(UPilgrimPresetSelectorBase) == 0x000008, "Wrong alignment on UPilgrimPresetSelectorBase");
static_assert(sizeof(UPilgrimPresetSelectorBase) == 0x000028, "Wrong size on UPilgrimPresetSelectorBase");

// Class PilgrimCoreRuntime.PilgrimQuestDefinitionComponent_TextFormat
// 0x0000 (0x0078 - 0x0078)
class UPilgrimQuestDefinitionComponent_TextFormat final : public UFortQuestDefinitionComponent_TextFormat
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuestDefinitionComponent_TextFormat">();
	}
	static class UPilgrimQuestDefinitionComponent_TextFormat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuestDefinitionComponent_TextFormat>();
	}
};
static_assert(alignof(UPilgrimQuestDefinitionComponent_TextFormat) == 0x000008, "Wrong alignment on UPilgrimQuestDefinitionComponent_TextFormat");
static_assert(sizeof(UPilgrimQuestDefinitionComponent_TextFormat) == 0x000078, "Wrong size on UPilgrimQuestDefinitionComponent_TextFormat");

// Class PilgrimCoreRuntime.PilgrimQuestLibrary
// 0x0000 (0x0028 - 0x0028)
class UPilgrimQuestLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetFilteredQuests(TArray<TScriptInterface<class IQuestInstanceInterface>>* OutQuests, const class APlayerState* Player, const struct FPilgrimQuestFilter& Filter);
	static struct FPilgrimQuestDisplayInfo GetQuestDisplayInfo(const class UObject* WorldContextObject, TScriptInterface<class IQuestInstanceInterface> Quest);
	static bool QuestPassesFilter(const TScriptInterface<class IQuestInstanceInterface> QuestInterface, const struct FPilgrimQuestFilter& QuestFilter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimQuestLibrary">();
	}
	static class UPilgrimQuestLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimQuestLibrary>();
	}
};
static_assert(alignof(UPilgrimQuestLibrary) == 0x000008, "Wrong alignment on UPilgrimQuestLibrary");
static_assert(sizeof(UPilgrimQuestLibrary) == 0x000028, "Wrong size on UPilgrimQuestLibrary");

// Class PilgrimCoreRuntime.PilgrimRandomSetlist
// 0x0068 (0x0108 - 0x00A0)
class UPilgrimRandomSetlist final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSongsToPopulate;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      SongFilterQuery;                                   // 0x00B0(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class UPilgrimSongMetadata*>           SongList;                                          // 0x00F8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void PopulateRandomSongs(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimRandomSetlist">();
	}
	static class UPilgrimRandomSetlist* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimRandomSetlist>();
	}
};
static_assert(alignof(UPilgrimRandomSetlist) == 0x000008, "Wrong alignment on UPilgrimRandomSetlist");
static_assert(sizeof(UPilgrimRandomSetlist) == 0x000108, "Wrong size on UPilgrimRandomSetlist");
static_assert(offsetof(UPilgrimRandomSetlist, NumSongsToPopulate) == 0x0000A8, "Member 'UPilgrimRandomSetlist::NumSongsToPopulate' has a wrong offset!");
static_assert(offsetof(UPilgrimRandomSetlist, SongFilterQuery) == 0x0000B0, "Member 'UPilgrimRandomSetlist::SongFilterQuery' has a wrong offset!");
static_assert(offsetof(UPilgrimRandomSetlist, SongList) == 0x0000F8, "Member 'UPilgrimRandomSetlist::SongList' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimRenderTargetComponent
// 0x0020 (0x00C0 - 0x00A0)
class alignas(0x10) UPilgrimRenderTargetComponent final : public UControllerComponent
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FMatrix CropTargetAndGetProjectionMatrix(const struct FVector4f& InLeftTopRightBottom, float FOV);
	class UTextureRenderTarget2D* GetRenderTarget();

	const struct FVector4f GetLeftTopRightBottom() const;
	struct FVector4f GetUVScaleOffset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimRenderTargetComponent">();
	}
	static class UPilgrimRenderTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimRenderTargetComponent>();
	}
};
static_assert(alignof(UPilgrimRenderTargetComponent) == 0x000010, "Wrong alignment on UPilgrimRenderTargetComponent");
static_assert(sizeof(UPilgrimRenderTargetComponent) == 0x0000C0, "Wrong size on UPilgrimRenderTargetComponent");
static_assert(offsetof(UPilgrimRenderTargetComponent, RenderTarget) == 0x0000A0, "Member 'UPilgrimRenderTargetComponent::RenderTarget' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimRequestFriendScoreWrapper
// 0x00F0 (0x0118 - 0x0028)
class UPilgrimRequestFriendScoreWrapper final : public UObject
{
public:
	uint8                                         Pad_28[0xF0];                                      // 0x0028(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimRequestFriendScoreWrapper">();
	}
	static class UPilgrimRequestFriendScoreWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimRequestFriendScoreWrapper>();
	}
};
static_assert(alignof(UPilgrimRequestFriendScoreWrapper) == 0x000008, "Wrong alignment on UPilgrimRequestFriendScoreWrapper");
static_assert(sizeof(UPilgrimRequestFriendScoreWrapper) == 0x000118, "Wrong size on UPilgrimRequestFriendScoreWrapper");

// Class PilgrimCoreRuntime.PilgrimScoreDebugPrinter
// 0x0008 (0x0030 - 0x0028)
class UPilgrimScoreDebugPrinter final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimScoreDebugPrinter">();
	}
	static class UPilgrimScoreDebugPrinter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimScoreDebugPrinter>();
	}
};
static_assert(alignof(UPilgrimScoreDebugPrinter) == 0x000008, "Wrong alignment on UPilgrimScoreDebugPrinter");
static_assert(sizeof(UPilgrimScoreDebugPrinter) == 0x000030, "Wrong size on UPilgrimScoreDebugPrinter");

// Class PilgrimCoreRuntime.PilgrimScoringModel
// 0x0430 (0x0458 - 0x0028)
class UPilgrimScoringModel final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimGameProgress                   GameProgress;                                      // 0x0030(0x006C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPilgrimGameConfigSettings             GameConfigSettings;                                // 0x00A0(0x02F0)(NativeAccessSpecifierPublic)
	uint8                                         Pad_390[0x18];                                     // 0x0390(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  ContextActor;                                      // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B0[0xA8];                                     // 0x03B0(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float ComputeMaxScore(const TArray<struct FTrackItemInfo>& Gems, const class UPilgrimSongData* SongData);

	float ComputeAccuracyMultiplier(EPilgrimScoringMode ScoringMode, const struct FPilgrimGemHitAccuracy& Accuracy) const;
	float ComputeGemBaseScoreValue(EPilgrimScoringMode ScoringMode) const;
	float ComputeOverdriveMultiplier(EPilgrimScoringMode ScoringMode) const;
	float ComputeStreakMultiplier(EPilgrimScoringMode ScoringMode) const;
	float ComputeSustainScorePerBeat(EPilgrimScoringMode ScoringMode) const;
	int32 GetScoreRequiredForStar(int32 Stars) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimScoringModel">();
	}
	static class UPilgrimScoringModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimScoringModel>();
	}
};
static_assert(alignof(UPilgrimScoringModel) == 0x000008, "Wrong alignment on UPilgrimScoringModel");
static_assert(sizeof(UPilgrimScoringModel) == 0x000458, "Wrong size on UPilgrimScoringModel");
static_assert(offsetof(UPilgrimScoringModel, GameProgress) == 0x000030, "Member 'UPilgrimScoringModel::GameProgress' has a wrong offset!");
static_assert(offsetof(UPilgrimScoringModel, GameConfigSettings) == 0x0000A0, "Member 'UPilgrimScoringModel::GameConfigSettings' has a wrong offset!");
static_assert(offsetof(UPilgrimScoringModel, ContextActor) == 0x0003A8, "Member 'UPilgrimScoringModel::ContextActor' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimScoringModifier
// 0x0000 (0x0030 - 0x0030)
class UPilgrimScoringModifier final : public UPrimaryDataAsset
{
public:
	float Apply(float InputValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimScoringModifier">();
	}
	static class UPilgrimScoringModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimScoringModifier>();
	}
};
static_assert(alignof(UPilgrimScoringModifier) == 0x000008, "Wrong alignment on UPilgrimScoringModifier");
static_assert(sizeof(UPilgrimScoringModifier) == 0x000030, "Wrong size on UPilgrimScoringModifier");

// Class PilgrimCoreRuntime.PilgrimSetlistInterface
// 0x0000 (0x0028 - 0x0028)
class IPilgrimSetlistInterface final : public IInterface
{
public:
	void RemoveUnavailableSongs(const class UObject* WorldContextObject, const struct FPlayspaceUser& ExcludedUser);

	int32 GetNumSongs(const class UObject* WorldContextObject) const;
	struct FTimespan GetSetlistDuration(const class UObject* WorldContextObject) const;
	class UPilgrimSongMetadata* GetSongAtIndex(const class UObject* WorldContextObject, int32 Index_0) const;
	TArray<class UPilgrimSongMetadata*> GetSongList(const class UObject* WorldContextObject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimSetlistInterface">();
	}
	static class IPilgrimSetlistInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPilgrimSetlistInterface>();
	}
};
static_assert(alignof(IPilgrimSetlistInterface) == 0x000008, "Wrong alignment on IPilgrimSetlistInterface");
static_assert(sizeof(IPilgrimSetlistInterface) == 0x000028, "Wrong size on IPilgrimSetlistInterface");

// Class PilgrimCoreRuntime.PilgrimSettings
// 0x0008 (0x0038 - 0x0030)
class UPilgrimSettings final : public UDeveloperSettings
{
public:
	int32                                         NumGemPoolItems;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBeatMarkerPoolItems;                            // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimSettings">();
	}
	static class UPilgrimSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimSettings>();
	}
};
static_assert(alignof(UPilgrimSettings) == 0x000008, "Wrong alignment on UPilgrimSettings");
static_assert(sizeof(UPilgrimSettings) == 0x000038, "Wrong size on UPilgrimSettings");
static_assert(offsetof(UPilgrimSettings, NumGemPoolItems) == 0x000030, "Member 'UPilgrimSettings::NumGemPoolItems' has a wrong offset!");
static_assert(offsetof(UPilgrimSettings, NumBeatMarkerPoolItems) == 0x000034, "Member 'UPilgrimSettings::NumBeatMarkerPoolItems' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimSongCatalog
// 0x00B0 (0x0150 - 0x00A0)
class UPilgrimSongCatalog final : public UGameStateComponent
{
public:
	TMap<class FName, class UPilgrimSongMetadata*> SongsByShortName;                                  // 0x00A0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FString, class UPilgrimSongMetadata*> SongsByShortMcpTemplateId;                         // 0x00F0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPilgrimSongCatalog* GetPilgrimSongCatalog(const class UObject* WorldContextObject);
	static bool PlayerHasSongEntitlement(const class AFortPlayerController* Player, const class UPilgrimSongMetadata* Song);

	void OnCMSCatalogRetrieved(bool bSuccess);

	TArray<class UPilgrimSongMetadata*> GetRandomSongList(int32 NumSongs, const struct FGameplayTagQuery& TagQuery) const;
	class UPilgrimSongMetadata* GetSongByMcpTemplateId(const class FString& McpTemplateId) const;
	class UPilgrimSongMetadata* GetSongByShortName(class FName ShortName) const;
	TArray<class UPilgrimSongMetadata*> GetSortedSongList(EPilgrimSongSortMethod SortMethod, EPilgrimSongSortDirection SortDirection, const struct FGameplayTagQuery& TagQuery) const;
	bool IsSongShared(class AFortPlayerController* Player, class FName SongShortName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimSongCatalog">();
	}
	static class UPilgrimSongCatalog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimSongCatalog>();
	}
};
static_assert(alignof(UPilgrimSongCatalog) == 0x000008, "Wrong alignment on UPilgrimSongCatalog");
static_assert(sizeof(UPilgrimSongCatalog) == 0x000150, "Wrong size on UPilgrimSongCatalog");
static_assert(offsetof(UPilgrimSongCatalog, SongsByShortName) == 0x0000A0, "Member 'UPilgrimSongCatalog::SongsByShortName' has a wrong offset!");
static_assert(offsetof(UPilgrimSongCatalog, SongsByShortMcpTemplateId) == 0x0000F0, "Member 'UPilgrimSongCatalog::SongsByShortMcpTemplateId' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimSongData
// 0x00B8 (0x0188 - 0x00D0)
class UPilgrimSongData final : public UParsedMidiEventData
{
public:
	uint8                                         Pad_D0[0x50];                                      // 0x00D0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPilgrimSongDifficulty, struct FRBTrackInfo> TracksPerDifficulty;                               // 0x0120(0x0050)(NativeAccessSpecifierPrivate)
	TArray<struct FTrackItemInfo>                 BeatMarkers;                                       // 0x0170(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x8];                                      // 0x0180(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimSongData">();
	}
	static class UPilgrimSongData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimSongData>();
	}
};
static_assert(alignof(UPilgrimSongData) == 0x000008, "Wrong alignment on UPilgrimSongData");
static_assert(sizeof(UPilgrimSongData) == 0x000188, "Wrong size on UPilgrimSongData");
static_assert(offsetof(UPilgrimSongData, TracksPerDifficulty) == 0x000120, "Member 'UPilgrimSongData::TracksPerDifficulty' has a wrong offset!");
static_assert(offsetof(UPilgrimSongData, BeatMarkers) == 0x000170, "Member 'UPilgrimSongData::BeatMarkers' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimSongMetadata
// 0x01A0 (0x01D0 - 0x0030)
class UPilgrimSongMetadata final : public UPrimaryDataAsset
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ShortName;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   Artist;                                            // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  AdditionalTags;                                    // 0x0088(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<ESparksGenre>                          Genre;                                             // 0x00A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         Year;                                              // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPilgrimTrackType, int32>                IntensityPerInstrument;                            // 0x00C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              AlbumArt;                                          // 0x0110(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMusicKey                                     Key;                                               // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMusicKeyMode                                 Mode;                                              // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StreamingVUID;                                     // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PreviewVUID;                                       // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimespan                              duration;                                          // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESparksInstrumentType                         DrumStartingIntrument;                             // 0x0160(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESparksInstrumentType                         BassStartingIntrument;                             // 0x0161(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESparksInstrumentType                         GuitarStartingIntrument;                           // 0x0162(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESparksInstrumentType                         VocalsStartingIntrument;                           // 0x0163(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCatalogData*                           SparksCatalogData;                                 // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UStemmedMusicAsset>      StemmedMusicAsset;                                 // 0x0170(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UAnimSequence>           LipSyncAnimAsset;                                  // 0x0190(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UStemmedMusicAsset>      StemmedMusicAssetRuntime;                          // 0x01B0(0x0020)(Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const struct FGameplayTagContainer GetAdditionalTags() const;
	TSoftObjectPtr<class UTexture2D> GetAlbumArt() const;
	class FString GetAlbumArtUrl() const;
	class FText GetArtist() const;
	struct FTimespan GetDuration() const;
	const TMap<EPilgrimTrackType, int32> GetIntensityPerInstrument() const;
	const TSoftObjectPtr<class UAnimSequence> GetLipSyncAnimAsset() const;
	int32 GetMappedIntensity(EPilgrimTrackType Instrument, int32 Min, int32 Max) const;
	EMusicKey GetMusicKey() const;
	EMusicKeyMode GetMusicMode() const;
	class FString GetPreviewVUID() const;
	int32 GetRawIntensity(EPilgrimTrackType Instrument) const;
	class FName GetShortName() const;
	class UCatalogData* GetSparksCatalogData(const class UObject* WorldContext) const;
	ESparksInstrumentType GetStartingInstrumentType(EPilgrimTrackType TrackType) const;
	const TSoftObjectPtr<class UStemmedMusicAsset> GetStemmedMusicAsset() const;
	class FString GetStreamingVUID() const;
	class FText GetTitle() const;
	int32 GetYear() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimSongMetadata">();
	}
	static class UPilgrimSongMetadata* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimSongMetadata>();
	}
};
static_assert(alignof(UPilgrimSongMetadata) == 0x000008, "Wrong alignment on UPilgrimSongMetadata");
static_assert(sizeof(UPilgrimSongMetadata) == 0x0001D0, "Wrong size on UPilgrimSongMetadata");
static_assert(offsetof(UPilgrimSongMetadata, ShortName) == 0x000050, "Member 'UPilgrimSongMetadata::ShortName' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, Title) == 0x000058, "Member 'UPilgrimSongMetadata::Title' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, Artist) == 0x000070, "Member 'UPilgrimSongMetadata::Artist' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, AdditionalTags) == 0x000088, "Member 'UPilgrimSongMetadata::AdditionalTags' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, Genre) == 0x0000A8, "Member 'UPilgrimSongMetadata::Genre' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, Year) == 0x0000B8, "Member 'UPilgrimSongMetadata::Year' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, IntensityPerInstrument) == 0x0000C0, "Member 'UPilgrimSongMetadata::IntensityPerInstrument' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, AlbumArt) == 0x000110, "Member 'UPilgrimSongMetadata::AlbumArt' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, Key) == 0x000130, "Member 'UPilgrimSongMetadata::Key' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, Mode) == 0x000131, "Member 'UPilgrimSongMetadata::Mode' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, StreamingVUID) == 0x000138, "Member 'UPilgrimSongMetadata::StreamingVUID' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, PreviewVUID) == 0x000148, "Member 'UPilgrimSongMetadata::PreviewVUID' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, duration) == 0x000158, "Member 'UPilgrimSongMetadata::duration' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, DrumStartingIntrument) == 0x000160, "Member 'UPilgrimSongMetadata::DrumStartingIntrument' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, BassStartingIntrument) == 0x000161, "Member 'UPilgrimSongMetadata::BassStartingIntrument' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, GuitarStartingIntrument) == 0x000162, "Member 'UPilgrimSongMetadata::GuitarStartingIntrument' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, VocalsStartingIntrument) == 0x000163, "Member 'UPilgrimSongMetadata::VocalsStartingIntrument' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, SparksCatalogData) == 0x000168, "Member 'UPilgrimSongMetadata::SparksCatalogData' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, StemmedMusicAsset) == 0x000170, "Member 'UPilgrimSongMetadata::StemmedMusicAsset' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, LipSyncAnimAsset) == 0x000190, "Member 'UPilgrimSongMetadata::LipSyncAnimAsset' has a wrong offset!");
static_assert(offsetof(UPilgrimSongMetadata, StemmedMusicAssetRuntime) == 0x0001B0, "Member 'UPilgrimSongMetadata::StemmedMusicAssetRuntime' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimPlayspaceComponent_SongPreloader
// 0x0098 (0x0138 - 0x00A0)
class UPilgrimPlayspaceComponent_SongPreloader final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SongToLoad;                                        // 0x00B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPilgrimSongMetadata*                   SongMetadata;                                      // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FUniqueNetIdRepl, bool>           PlayersFinishedLoading;                            // 0x00C8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	bool                                          bServerFinishedLoading;                            // 0x0118(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bBroadcastedLoadingFinished;                       // 0x0119(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11A[0x16];                                     // 0x011A(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LoadTimeoutTimerHandle;                            // 0x0130(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void NetMulticast_HandleAllLoadingFinished();
	void NetMulticast_LoadSong(class FName Song);
	void OnStreamerPrepared();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimPlayspaceComponent_SongPreloader">();
	}
	static class UPilgrimPlayspaceComponent_SongPreloader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimPlayspaceComponent_SongPreloader>();
	}
};
static_assert(alignof(UPilgrimPlayspaceComponent_SongPreloader) == 0x000008, "Wrong alignment on UPilgrimPlayspaceComponent_SongPreloader");
static_assert(sizeof(UPilgrimPlayspaceComponent_SongPreloader) == 0x000138, "Wrong size on UPilgrimPlayspaceComponent_SongPreloader");
static_assert(offsetof(UPilgrimPlayspaceComponent_SongPreloader, SongToLoad) == 0x0000B8, "Member 'UPilgrimPlayspaceComponent_SongPreloader::SongToLoad' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayspaceComponent_SongPreloader, SongMetadata) == 0x0000C0, "Member 'UPilgrimPlayspaceComponent_SongPreloader::SongMetadata' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayspaceComponent_SongPreloader, PlayersFinishedLoading) == 0x0000C8, "Member 'UPilgrimPlayspaceComponent_SongPreloader::PlayersFinishedLoading' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayspaceComponent_SongPreloader, bServerFinishedLoading) == 0x000118, "Member 'UPilgrimPlayspaceComponent_SongPreloader::bServerFinishedLoading' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayspaceComponent_SongPreloader, bBroadcastedLoadingFinished) == 0x000119, "Member 'UPilgrimPlayspaceComponent_SongPreloader::bBroadcastedLoadingFinished' has a wrong offset!");
static_assert(offsetof(UPilgrimPlayspaceComponent_SongPreloader, LoadTimeoutTimerHandle) == 0x000130, "Member 'UPilgrimPlayspaceComponent_SongPreloader::LoadTimeoutTimerHandle' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimControllerComponent_SongPreloader
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimControllerComponent_SongPreloader final : public UControllerComponent
{
public:
	void ServerFinishedLoadingSong(class FName Song);
	void ServerKickPlayerForNetworkIssues(const class FText& Reason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimControllerComponent_SongPreloader">();
	}
	static class UPilgrimControllerComponent_SongPreloader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimControllerComponent_SongPreloader>();
	}
};
static_assert(alignof(UPilgrimControllerComponent_SongPreloader) == 0x000008, "Wrong alignment on UPilgrimControllerComponent_SongPreloader");
static_assert(sizeof(UPilgrimControllerComponent_SongPreloader) == 0x0000A0, "Wrong size on UPilgrimControllerComponent_SongPreloader");

// Class PilgrimCoreRuntime.PilgrimSustainTrackItemMgr
// 0x0060 (0x0138 - 0x00D8)
class UPilgrimSustainTrackItemMgr final : public UPilgrimTrackItemMgr
{
public:
	TArray<class APilgrimTrackSustain*>           ActiveSustains;                                    // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<struct FPilgrimTrackItemKey, class APilgrimTrackSustain*> ActiveSustainsMap;                                 // 0x00E8(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimSustainTrackItemMgr">();
	}
	static class UPilgrimSustainTrackItemMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimSustainTrackItemMgr>();
	}
};
static_assert(alignof(UPilgrimSustainTrackItemMgr) == 0x000008, "Wrong alignment on UPilgrimSustainTrackItemMgr");
static_assert(sizeof(UPilgrimSustainTrackItemMgr) == 0x000138, "Wrong size on UPilgrimSustainTrackItemMgr");
static_assert(offsetof(UPilgrimSustainTrackItemMgr, ActiveSustains) == 0x0000D8, "Member 'UPilgrimSustainTrackItemMgr::ActiveSustains' has a wrong offset!");
static_assert(offsetof(UPilgrimSustainTrackItemMgr, ActiveSustainsMap) == 0x0000E8, "Member 'UPilgrimSustainTrackItemMgr::ActiveSustainsMap' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimTouchButtonBase
// 0x0040 (0x0328 - 0x02E8)
class UPilgrimTouchButtonBase final : public UCommonUserWidget
{
public:
	class UInputAction*                           PressAction;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWidgetTouchKbmControllerTransitionType       WidgetTransitionType;                              // 0x02F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DeactivateInputActionIfDragOutsideHitbox;          // 0x02F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           PressedColor;                                      // 0x02F4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           ReleasedColor;                                     // 0x0304(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Image_Icon;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleInputMethodChanged(ECommonInputType CurrentInputType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimTouchButtonBase">();
	}
	static class UPilgrimTouchButtonBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimTouchButtonBase>();
	}
};
static_assert(alignof(UPilgrimTouchButtonBase) == 0x000008, "Wrong alignment on UPilgrimTouchButtonBase");
static_assert(sizeof(UPilgrimTouchButtonBase) == 0x000328, "Wrong size on UPilgrimTouchButtonBase");
static_assert(offsetof(UPilgrimTouchButtonBase, PressAction) == 0x0002E8, "Member 'UPilgrimTouchButtonBase::PressAction' has a wrong offset!");
static_assert(offsetof(UPilgrimTouchButtonBase, WidgetTransitionType) == 0x0002F0, "Member 'UPilgrimTouchButtonBase::WidgetTransitionType' has a wrong offset!");
static_assert(offsetof(UPilgrimTouchButtonBase, DeactivateInputActionIfDragOutsideHitbox) == 0x0002F1, "Member 'UPilgrimTouchButtonBase::DeactivateInputActionIfDragOutsideHitbox' has a wrong offset!");
static_assert(offsetof(UPilgrimTouchButtonBase, PressedColor) == 0x0002F4, "Member 'UPilgrimTouchButtonBase::PressedColor' has a wrong offset!");
static_assert(offsetof(UPilgrimTouchButtonBase, ReleasedColor) == 0x000304, "Member 'UPilgrimTouchButtonBase::ReleasedColor' has a wrong offset!");
static_assert(offsetof(UPilgrimTouchButtonBase, Image_Icon) == 0x000318, "Member 'UPilgrimTouchButtonBase::Image_Icon' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimTrack
// 0x0120 (0x03B0 - 0x0290)
class APilgrimTrack final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   NowBarChildActor;                                  // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TopOfTrack;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APilgrimGem>                PilgrimGemClass;                                   // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APilgrimBeatMarker>         BeatMarkerClass;                                   // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APilgrimTrackSustain>       SustainClass;                                      // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SceneRoot;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPilgrimTrackCaptureComponent*          TrackCaptureComponent2D;                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PilgrimTrackAlphaMaterial;                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           PilgrimTrackMaterialParameterCollection;           // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollectionInstance*   PilgrimTrackMaterialParameterCollectionInstance;   // 0x02E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPilgrimGame>            ParentGame;                                        // 0x02E8(0x0020)(BlueprintVisible, ExportObject, InstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineComponent*                       BeatMarkerSpline;                                  // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class APilgrimNowBar>          CachedNowBar;                                      // 0x0310(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimGemTrackItemMgr*                GemMgr;                                            // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimSustainTrackItemMgr*            SustainMgr;                                        // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimBeatMarkerTrackItemMgr*         BeatMarkerMgr;                                     // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EPilgrimTrackLane, TWeakObjectPtr<class APilgrimGemSmasher>> SmasherMap;                                        // 0x0330(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_380[0x30];                                     // 0x0380(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddActorItemToScene(class AActor* Item);
	void HideAllItems();
	void OnGameEnded();
	void OnGemSmashed(EPilgrimTrackLane Lane, const struct FPilgrimGemHitAccuracy& Accuracy, bool bIsOverdrive);
	void UpdateBeatmarkerVisibility(bool bNewIsVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimTrack">();
	}
	static class APilgrimTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<APilgrimTrack>();
	}
};
static_assert(alignof(APilgrimTrack) == 0x000008, "Wrong alignment on APilgrimTrack");
static_assert(sizeof(APilgrimTrack) == 0x0003B0, "Wrong size on APilgrimTrack");
static_assert(offsetof(APilgrimTrack, NowBarChildActor) == 0x000298, "Member 'APilgrimTrack::NowBarChildActor' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, TopOfTrack) == 0x0002A0, "Member 'APilgrimTrack::TopOfTrack' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, PilgrimGemClass) == 0x0002A8, "Member 'APilgrimTrack::PilgrimGemClass' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, BeatMarkerClass) == 0x0002B0, "Member 'APilgrimTrack::BeatMarkerClass' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, SustainClass) == 0x0002B8, "Member 'APilgrimTrack::SustainClass' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, SceneRoot) == 0x0002C0, "Member 'APilgrimTrack::SceneRoot' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, TrackCaptureComponent2D) == 0x0002C8, "Member 'APilgrimTrack::TrackCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, PilgrimTrackAlphaMaterial) == 0x0002D0, "Member 'APilgrimTrack::PilgrimTrackAlphaMaterial' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, PilgrimTrackMaterialParameterCollection) == 0x0002D8, "Member 'APilgrimTrack::PilgrimTrackMaterialParameterCollection' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, PilgrimTrackMaterialParameterCollectionInstance) == 0x0002E0, "Member 'APilgrimTrack::PilgrimTrackMaterialParameterCollectionInstance' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, ParentGame) == 0x0002E8, "Member 'APilgrimTrack::ParentGame' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, BeatMarkerSpline) == 0x000308, "Member 'APilgrimTrack::BeatMarkerSpline' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, CachedNowBar) == 0x000310, "Member 'APilgrimTrack::CachedNowBar' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, GemMgr) == 0x000318, "Member 'APilgrimTrack::GemMgr' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, SustainMgr) == 0x000320, "Member 'APilgrimTrack::SustainMgr' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, BeatMarkerMgr) == 0x000328, "Member 'APilgrimTrack::BeatMarkerMgr' has a wrong offset!");
static_assert(offsetof(APilgrimTrack, SmasherMap) == 0x000330, "Member 'APilgrimTrack::SmasherMap' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimTrackCaptureComponent
// 0x0010 (0x0AE0 - 0x0AD0)
class UPilgrimTrackCaptureComponent final : public USceneCaptureComponent2D
{
public:
	class AActor*                                 ViewOwner;                                         // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AD8[0x8];                                      // 0x0AD8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void IncludeActor(class AActor* TrackActor, bool bIncludeFromChildActors);
	void SetViewOwnerActor(class AActor* InViewOwner);

	class AActor* GetViewOwnerActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimTrackCaptureComponent">();
	}
	static class UPilgrimTrackCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimTrackCaptureComponent>();
	}
};
static_assert(alignof(UPilgrimTrackCaptureComponent) == 0x000010, "Wrong alignment on UPilgrimTrackCaptureComponent");
static_assert(sizeof(UPilgrimTrackCaptureComponent) == 0x000AE0, "Wrong size on UPilgrimTrackCaptureComponent");
static_assert(offsetof(UPilgrimTrackCaptureComponent, ViewOwner) == 0x000AD0, "Member 'UPilgrimTrackCaptureComponent::ViewOwner' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimTrackItemInterface
// 0x0000 (0x0028 - 0x0028)
class IPilgrimTrackItemInterface final : public IInterface
{
public:
	void OnGameEnded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimTrackItemInterface">();
	}
	static class IPilgrimTrackItemInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPilgrimTrackItemInterface>();
	}
};
static_assert(alignof(IPilgrimTrackItemInterface) == 0x000008, "Wrong alignment on IPilgrimTrackItemInterface");
static_assert(sizeof(IPilgrimTrackItemInterface) == 0x000028, "Wrong size on IPilgrimTrackItemInterface");

// Class PilgrimCoreRuntime.PilgrimTrackSustain
// 0x0058 (0x02E8 - 0x0290)
class APilgrimTrackSustain final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputKeyStartOfSustain;                            // 0x0298(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InputKeyEndOfSustain;                              // 0x029C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPilgrimGame>            ParentGamePtr;                                     // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class APilgrimGemSmasher>      ParentSmasherPtr;                                  // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B0[0x38];                                     // 0x02B0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttachToSmasher(class APilgrimGemSmasher* Smasher);
	void OnIsOverdriveChanged();
	void OnSustainFail();
	void OnSustainInit();
	void OnSustainKeyDownSuccess();
	void OnSustainKeyRelease();
	void PlaceSustainAlongSpline();
	void UpdateSplineInputKeys(float NewKeyStart, float NewKeyEnd);

	class USplineComponent* GetSplinePathIfRelevant() const;
	const struct FTrackItemInfo GetTrackItemInfo() const;
	bool IsInActiveOverdriveSection() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimTrackSustain">();
	}
	static class APilgrimTrackSustain* GetDefaultObj()
	{
		return GetDefaultObjImpl<APilgrimTrackSustain>();
	}
};
static_assert(alignof(APilgrimTrackSustain) == 0x000008, "Wrong alignment on APilgrimTrackSustain");
static_assert(sizeof(APilgrimTrackSustain) == 0x0002E8, "Wrong size on APilgrimTrackSustain");
static_assert(offsetof(APilgrimTrackSustain, InputKeyStartOfSustain) == 0x000298, "Member 'APilgrimTrackSustain::InputKeyStartOfSustain' has a wrong offset!");
static_assert(offsetof(APilgrimTrackSustain, InputKeyEndOfSustain) == 0x00029C, "Member 'APilgrimTrackSustain::InputKeyEndOfSustain' has a wrong offset!");
static_assert(offsetof(APilgrimTrackSustain, ParentGamePtr) == 0x0002A0, "Member 'APilgrimTrackSustain::ParentGamePtr' has a wrong offset!");
static_assert(offsetof(APilgrimTrackSustain, ParentSmasherPtr) == 0x0002A8, "Member 'APilgrimTrackSustain::ParentSmasherPtr' has a wrong offset!");

// Class PilgrimCoreRuntime.PilgrimVerbProcessor_DeployOverdrive
// 0x0000 (0x00A0 - 0x00A0)
class UPilgrimVerbProcessor_DeployOverdrive final : public UPilgrimObjectiveProcessorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimVerbProcessor_DeployOverdrive">();
	}
	static class UPilgrimVerbProcessor_DeployOverdrive* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimVerbProcessor_DeployOverdrive>();
	}
};
static_assert(alignof(UPilgrimVerbProcessor_DeployOverdrive) == 0x000008, "Wrong alignment on UPilgrimVerbProcessor_DeployOverdrive");
static_assert(sizeof(UPilgrimVerbProcessor_DeployOverdrive) == 0x0000A0, "Wrong size on UPilgrimVerbProcessor_DeployOverdrive");

// Class PilgrimCoreRuntime.PilgrimWaitForEventRouterAction
// 0x0020 (0x0050 - 0x0030)
class UPilgrimWaitForEventRouterAction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(class UGameplayEventRouterComponent* EventRouter)> OnEventRouterAvailable;                            // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPilgrimWaitForEventRouterAction* PilgrimWaitForEventRouter(class AActor* ContextActor);

	void HandleContextActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimWaitForEventRouterAction">();
	}
	static class UPilgrimWaitForEventRouterAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPilgrimWaitForEventRouterAction>();
	}
};
static_assert(alignof(UPilgrimWaitForEventRouterAction) == 0x000008, "Wrong alignment on UPilgrimWaitForEventRouterAction");
static_assert(sizeof(UPilgrimWaitForEventRouterAction) == 0x000050, "Wrong size on UPilgrimWaitForEventRouterAction");
static_assert(offsetof(UPilgrimWaitForEventRouterAction, OnEventRouterAvailable) == 0x000030, "Member 'UPilgrimWaitForEventRouterAction::OnEventRouterAvailable' has a wrong offset!");

// Class PilgrimCoreRuntime.ServerPilgrimGame
// 0x0038 (0x0060 - 0x0028)
class UServerPilgrimGame final : public UObject
{
public:
	class UPilgrimGameEvaluator*                  GameEvaluator;                                     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimScoringModel*                   ScoringModel;                                      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimSongData*                       SongData;                                          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimSongMetadata*                   SongBeingPlayed;                                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  ContextActor;                                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPilgrimGameConfig*                     PilgrimGameConfig;                                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetScoringDensity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ServerPilgrimGame">();
	}
	static class UServerPilgrimGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UServerPilgrimGame>();
	}
};
static_assert(alignof(UServerPilgrimGame) == 0x000008, "Wrong alignment on UServerPilgrimGame");
static_assert(sizeof(UServerPilgrimGame) == 0x000060, "Wrong size on UServerPilgrimGame");
static_assert(offsetof(UServerPilgrimGame, GameEvaluator) == 0x000028, "Member 'UServerPilgrimGame::GameEvaluator' has a wrong offset!");
static_assert(offsetof(UServerPilgrimGame, ScoringModel) == 0x000030, "Member 'UServerPilgrimGame::ScoringModel' has a wrong offset!");
static_assert(offsetof(UServerPilgrimGame, SongData) == 0x000038, "Member 'UServerPilgrimGame::SongData' has a wrong offset!");
static_assert(offsetof(UServerPilgrimGame, SongBeingPlayed) == 0x000040, "Member 'UServerPilgrimGame::SongBeingPlayed' has a wrong offset!");
static_assert(offsetof(UServerPilgrimGame, ContextActor) == 0x000048, "Member 'UServerPilgrimGame::ContextActor' has a wrong offset!");
static_assert(offsetof(UServerPilgrimGame, PilgrimGameConfig) == 0x000050, "Member 'UServerPilgrimGame::PilgrimGameConfig' has a wrong offset!");

// Class PilgrimCoreRuntime.FortClientPilot_QuickSmokeSparks
// 0x0010 (0x0320 - 0x0310)
class UFortClientPilot_QuickSmokeSparks final : public UFortClientPilot_GameplayBase
{
public:
	uint8                                         Pad_310[0x10];                                     // 0x0310(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortClientPilot_QuickSmokeSparks">();
	}
	static class UFortClientPilot_QuickSmokeSparks* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortClientPilot_QuickSmokeSparks>();
	}
};
static_assert(alignof(UFortClientPilot_QuickSmokeSparks) == 0x000010, "Wrong alignment on UFortClientPilot_QuickSmokeSparks");
static_assert(sizeof(UFortClientPilot_QuickSmokeSparks) == 0x000320, "Wrong size on UFortClientPilot_QuickSmokeSparks");

// Class PilgrimCoreRuntime.PilgrimGameScoreInterface
// 0x0000 (0x0028 - 0x0028)
class IPilgrimGameScoreInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PilgrimGameScoreInterface">();
	}
	static class IPilgrimGameScoreInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPilgrimGameScoreInterface>();
	}
};
static_assert(alignof(IPilgrimGameScoreInterface) == 0x000008, "Wrong alignment on IPilgrimGameScoreInterface");
static_assert(sizeof(IPilgrimGameScoreInterface) == 0x000028, "Wrong size on IPilgrimGameScoreInterface");

}

