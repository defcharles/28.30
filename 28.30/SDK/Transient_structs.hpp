#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Transient

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "RigVM_structs.hpp"
#include "AnimationCore_structs.hpp"


namespace SDK
{

// PropertyBag Transient.PropertyBag_0
// 0x0000 (0x0000 - 0x0000)
struct FPropertyBag_0 final
{
};
static_assert(alignof(FPropertyBag_0) == 0x000001, "Wrong alignment on FPropertyBag_0");
static_assert(sizeof(FPropertyBag_0) == 0x000001, "Wrong size on FPropertyBag_0");

// PropertyBag Transient.PropertyBag_9a3077bed58c50d7
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_9a3077bed58c50d7 final
{
public:
	class FName                                   TypefaceFontName;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_9a3077bed58c50d7) == 0x000004, "Wrong alignment on FPropertyBag_9a3077bed58c50d7");
static_assert(sizeof(FPropertyBag_9a3077bed58c50d7) == 0x000008, "Wrong size on FPropertyBag_9a3077bed58c50d7");
static_assert(offsetof(FPropertyBag_9a3077bed58c50d7, TypefaceFontName) == 0x000000, "Member 'FPropertyBag_9a3077bed58c50d7::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FPropertyBag_9a3077bed58c50d7, LetterSpacing) == 0x000004, "Member 'FPropertyBag_9a3077bed58c50d7::LetterSpacing' has a wrong offset!");

// ScriptStruct Transient.ChaosDestructionEvent_SWC
// 0x0044 (0x0044 - 0x0000)
struct FChaosDestructionEvent_SWC final
{
public:
	struct FVector3f                              Position;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector3f                              Normal;                                            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector3f                              Velocity;                                          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector3f                              AngularVelocity;                                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtentMin;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtentMax;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleID;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosDestructionEvent_SWC) == 0x000004, "Wrong alignment on FChaosDestructionEvent_SWC");
static_assert(sizeof(FChaosDestructionEvent_SWC) == 0x000044, "Wrong size on FChaosDestructionEvent_SWC");
static_assert(offsetof(FChaosDestructionEvent_SWC, Position) == 0x000000, "Member 'FChaosDestructionEvent_SWC::Position' has a wrong offset!");
static_assert(offsetof(FChaosDestructionEvent_SWC, Normal) == 0x00000C, "Member 'FChaosDestructionEvent_SWC::Normal' has a wrong offset!");
static_assert(offsetof(FChaosDestructionEvent_SWC, Velocity) == 0x000018, "Member 'FChaosDestructionEvent_SWC::Velocity' has a wrong offset!");
static_assert(offsetof(FChaosDestructionEvent_SWC, AngularVelocity) == 0x000024, "Member 'FChaosDestructionEvent_SWC::AngularVelocity' has a wrong offset!");
static_assert(offsetof(FChaosDestructionEvent_SWC, ExtentMin) == 0x000030, "Member 'FChaosDestructionEvent_SWC::ExtentMin' has a wrong offset!");
static_assert(offsetof(FChaosDestructionEvent_SWC, ExtentMax) == 0x000034, "Member 'FChaosDestructionEvent_SWC::ExtentMax' has a wrong offset!");
static_assert(offsetof(FChaosDestructionEvent_SWC, ParticleID) == 0x000038, "Member 'FChaosDestructionEvent_SWC::ParticleID' has a wrong offset!");
static_assert(offsetof(FChaosDestructionEvent_SWC, Time) == 0x00003C, "Member 'FChaosDestructionEvent_SWC::Time' has a wrong offset!");
static_assert(offsetof(FChaosDestructionEvent_SWC, Type) == 0x000040, "Member 'FChaosDestructionEvent_SWC::Type' has a wrong offset!");

// PropertyBag Transient.PropertyBag_d27b822bb1e121be
// 0x0004 (0x0004 - 0x0000)
struct FPropertyBag_d27b822bb1e121be final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_d27b822bb1e121be) == 0x000004, "Wrong alignment on FPropertyBag_d27b822bb1e121be");
static_assert(sizeof(FPropertyBag_d27b822bb1e121be) == 0x000004, "Wrong size on FPropertyBag_d27b822bb1e121be");
static_assert(offsetof(FPropertyBag_d27b822bb1e121be, Size) == 0x000000, "Member 'FPropertyBag_d27b822bb1e121be::Size' has a wrong offset!");

// PropertyBag Transient.PropertyBag_73c83f300aa939fa
// 0x0004 (0x0004 - 0x0000)
struct FPropertyBag_73c83f300aa939fa final
{
public:
	float                                         LineHeightPercentage;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_73c83f300aa939fa) == 0x000004, "Wrong alignment on FPropertyBag_73c83f300aa939fa");
static_assert(sizeof(FPropertyBag_73c83f300aa939fa) == 0x000004, "Wrong size on FPropertyBag_73c83f300aa939fa");
static_assert(offsetof(FPropertyBag_73c83f300aa939fa, LineHeightPercentage) == 0x000000, "Member 'FPropertyBag_73c83f300aa939fa::LineHeightPercentage' has a wrong offset!");

// PropertyBag Transient.PropertyBag_df3be13ff54eac3d
// 0x0018 (0x0018 - 0x0000)
struct FPropertyBag_df3be13ff54eac3d final
{
public:
	class USoundBase*                             ContextButtonHoverSound;                           // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ContextButtonClickedSound;                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BlockOutlineHoverSound;                            // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_df3be13ff54eac3d) == 0x000008, "Wrong alignment on FPropertyBag_df3be13ff54eac3d");
static_assert(sizeof(FPropertyBag_df3be13ff54eac3d) == 0x000018, "Wrong size on FPropertyBag_df3be13ff54eac3d");
static_assert(offsetof(FPropertyBag_df3be13ff54eac3d, ContextButtonHoverSound) == 0x000000, "Member 'FPropertyBag_df3be13ff54eac3d::ContextButtonHoverSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_df3be13ff54eac3d, ContextButtonClickedSound) == 0x000008, "Member 'FPropertyBag_df3be13ff54eac3d::ContextButtonClickedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_df3be13ff54eac3d, BlockOutlineHoverSound) == 0x000010, "Member 'FPropertyBag_df3be13ff54eac3d::BlockOutlineHoverSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_82941c245cb8b6b9
// 0x0004 (0x0004 - 0x0000)
struct FPropertyBag_82941c245cb8b6b9 final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_82941c245cb8b6b9) == 0x000004, "Wrong alignment on FPropertyBag_82941c245cb8b6b9");
static_assert(sizeof(FPropertyBag_82941c245cb8b6b9) == 0x000004, "Wrong size on FPropertyBag_82941c245cb8b6b9");
static_assert(offsetof(FPropertyBag_82941c245cb8b6b9, Size) == 0x000000, "Member 'FPropertyBag_82941c245cb8b6b9::Size' has a wrong offset!");

// PropertyBag Transient.PropertyBag_7198b5701caae119
// 0x0004 (0x0004 - 0x0000)
struct FPropertyBag_7198b5701caae119 final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_7198b5701caae119) == 0x000004, "Wrong alignment on FPropertyBag_7198b5701caae119");
static_assert(sizeof(FPropertyBag_7198b5701caae119) == 0x000004, "Wrong size on FPropertyBag_7198b5701caae119");
static_assert(offsetof(FPropertyBag_7198b5701caae119, Size) == 0x000000, "Member 'FPropertyBag_7198b5701caae119::Size' has a wrong offset!");

// PropertyBag Transient.PropertyBag_862508c04c749853
// 0x0010 (0x0010 - 0x0000)
struct FPropertyBag_862508c04c749853 final
{
public:
	struct FMargin                                Margin;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FPropertyBag_862508c04c749853) == 0x000004, "Wrong alignment on FPropertyBag_862508c04c749853");
static_assert(sizeof(FPropertyBag_862508c04c749853) == 0x000010, "Wrong size on FPropertyBag_862508c04c749853");
static_assert(offsetof(FPropertyBag_862508c04c749853, Margin) == 0x000000, "Member 'FPropertyBag_862508c04c749853::Margin' has a wrong offset!");

// PropertyBag Transient.PropertyBag_746e68cbce607110
// 0x0018 (0x0018 - 0x0000)
struct FPropertyBag_746e68cbce607110 final
{
public:
	class UObject*                                FontObject;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_746e68cbce607110) == 0x000008, "Wrong alignment on FPropertyBag_746e68cbce607110");
static_assert(sizeof(FPropertyBag_746e68cbce607110) == 0x000018, "Wrong size on FPropertyBag_746e68cbce607110");
static_assert(offsetof(FPropertyBag_746e68cbce607110, FontObject) == 0x000000, "Member 'FPropertyBag_746e68cbce607110::FontObject' has a wrong offset!");
static_assert(offsetof(FPropertyBag_746e68cbce607110, TypefaceFontName) == 0x000008, "Member 'FPropertyBag_746e68cbce607110::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FPropertyBag_746e68cbce607110, Size) == 0x00000C, "Member 'FPropertyBag_746e68cbce607110::Size' has a wrong offset!");
static_assert(offsetof(FPropertyBag_746e68cbce607110, SkewAmount) == 0x000010, "Member 'FPropertyBag_746e68cbce607110::SkewAmount' has a wrong offset!");

// PropertyBag Transient.PropertyBag_2dd059e58ac3862f
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_2dd059e58ac3862f final
{
public:
	float                                         LineHeightPercentage;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_2dd059e58ac3862f) == 0x000004, "Wrong alignment on FPropertyBag_2dd059e58ac3862f");
static_assert(sizeof(FPropertyBag_2dd059e58ac3862f) == 0x000008, "Wrong size on FPropertyBag_2dd059e58ac3862f");
static_assert(offsetof(FPropertyBag_2dd059e58ac3862f, LineHeightPercentage) == 0x000000, "Member 'FPropertyBag_2dd059e58ac3862f::LineHeightPercentage' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2dd059e58ac3862f, Size) == 0x000004, "Member 'FPropertyBag_2dd059e58ac3862f::Size' has a wrong offset!");

// PropertyBag Transient.PropertyBag_4a60d7bde02e1891
// 0x0010 (0x0010 - 0x0000)
struct FPropertyBag_4a60d7bde02e1891 final
{
public:
	class USoundBase*                             ShopIntroWhooshSound;                              // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ContentWhoosh_RetractSound;                        // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_4a60d7bde02e1891) == 0x000008, "Wrong alignment on FPropertyBag_4a60d7bde02e1891");
static_assert(sizeof(FPropertyBag_4a60d7bde02e1891) == 0x000010, "Wrong size on FPropertyBag_4a60d7bde02e1891");
static_assert(offsetof(FPropertyBag_4a60d7bde02e1891, ShopIntroWhooshSound) == 0x000000, "Member 'FPropertyBag_4a60d7bde02e1891::ShopIntroWhooshSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_4a60d7bde02e1891, ContentWhoosh_RetractSound) == 0x000008, "Member 'FPropertyBag_4a60d7bde02e1891::ContentWhoosh_RetractSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_16760b1878cd5980
// 0x0014 (0x0014 - 0x0000)
struct FPropertyBag_16760b1878cd5980 final
{
public:
	struct FMargin                                Margin;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         LineHeightPercentage;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_16760b1878cd5980) == 0x000004, "Wrong alignment on FPropertyBag_16760b1878cd5980");
static_assert(sizeof(FPropertyBag_16760b1878cd5980) == 0x000014, "Wrong size on FPropertyBag_16760b1878cd5980");
static_assert(offsetof(FPropertyBag_16760b1878cd5980, Margin) == 0x000000, "Member 'FPropertyBag_16760b1878cd5980::Margin' has a wrong offset!");
static_assert(offsetof(FPropertyBag_16760b1878cd5980, LineHeightPercentage) == 0x000010, "Member 'FPropertyBag_16760b1878cd5980::LineHeightPercentage' has a wrong offset!");

// PropertyBag Transient.PropertyBag_7fe066d3b12155d3
// 0x0018 (0x0018 - 0x0000)
struct FPropertyBag_7fe066d3b12155d3 final
{
public:
	class UObject*                                FontObject;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_7fe066d3b12155d3) == 0x000008, "Wrong alignment on FPropertyBag_7fe066d3b12155d3");
static_assert(sizeof(FPropertyBag_7fe066d3b12155d3) == 0x000018, "Wrong size on FPropertyBag_7fe066d3b12155d3");
static_assert(offsetof(FPropertyBag_7fe066d3b12155d3, FontObject) == 0x000000, "Member 'FPropertyBag_7fe066d3b12155d3::FontObject' has a wrong offset!");
static_assert(offsetof(FPropertyBag_7fe066d3b12155d3, TypefaceFontName) == 0x000008, "Member 'FPropertyBag_7fe066d3b12155d3::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FPropertyBag_7fe066d3b12155d3, Size) == 0x00000C, "Member 'FPropertyBag_7fe066d3b12155d3::Size' has a wrong offset!");
static_assert(offsetof(FPropertyBag_7fe066d3b12155d3, LetterSpacing) == 0x000010, "Member 'FPropertyBag_7fe066d3b12155d3::LetterSpacing' has a wrong offset!");
static_assert(offsetof(FPropertyBag_7fe066d3b12155d3, SkewAmount) == 0x000014, "Member 'FPropertyBag_7fe066d3b12155d3::SkewAmount' has a wrong offset!");

// PropertyBag Transient.PropertyBag_e3f5bd2a776e30ca
// 0x0020 (0x0020 - 0x0000)
struct FPropertyBag_e3f5bd2a776e30ca final
{
public:
	class USoundBase*                             BannerAppearSound;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BannerAwaySound;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             IntroSound;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OutroSound;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_e3f5bd2a776e30ca) == 0x000008, "Wrong alignment on FPropertyBag_e3f5bd2a776e30ca");
static_assert(sizeof(FPropertyBag_e3f5bd2a776e30ca) == 0x000020, "Wrong size on FPropertyBag_e3f5bd2a776e30ca");
static_assert(offsetof(FPropertyBag_e3f5bd2a776e30ca, BannerAppearSound) == 0x000000, "Member 'FPropertyBag_e3f5bd2a776e30ca::BannerAppearSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_e3f5bd2a776e30ca, BannerAwaySound) == 0x000008, "Member 'FPropertyBag_e3f5bd2a776e30ca::BannerAwaySound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_e3f5bd2a776e30ca, IntroSound) == 0x000010, "Member 'FPropertyBag_e3f5bd2a776e30ca::IntroSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_e3f5bd2a776e30ca, OutroSound) == 0x000018, "Member 'FPropertyBag_e3f5bd2a776e30ca::OutroSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_82c781121f843240
// 0x0010 (0x0010 - 0x0000)
struct FPropertyBag_82c781121f843240 final
{
public:
	struct FMargin                                Margin;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FPropertyBag_82c781121f843240) == 0x000004, "Wrong alignment on FPropertyBag_82c781121f843240");
static_assert(sizeof(FPropertyBag_82c781121f843240) == 0x000010, "Wrong size on FPropertyBag_82c781121f843240");
static_assert(offsetof(FPropertyBag_82c781121f843240, Margin) == 0x000000, "Member 'FPropertyBag_82c781121f843240::Margin' has a wrong offset!");

// PropertyBag Transient.PropertyBag_bf97b191b5dead55
// 0x0004 (0x0004 - 0x0000)
struct FPropertyBag_bf97b191b5dead55 final
{
public:
	class FName                                   TypefaceFontName;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_bf97b191b5dead55) == 0x000004, "Wrong alignment on FPropertyBag_bf97b191b5dead55");
static_assert(sizeof(FPropertyBag_bf97b191b5dead55) == 0x000004, "Wrong size on FPropertyBag_bf97b191b5dead55");
static_assert(offsetof(FPropertyBag_bf97b191b5dead55, TypefaceFontName) == 0x000000, "Member 'FPropertyBag_bf97b191b5dead55::TypefaceFontName' has a wrong offset!");

// PropertyBag Transient.PropertyBag_fe43566a4c91acb5
// 0x0038 (0x0038 - 0x0000)
struct FPropertyBag_fe43566a4c91acb5 final
{
public:
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x0000(0x0018)(Edit, NoDestructor)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x0018(0x0018)(Edit, NoDestructor)
	class USoundBase*                             ClickedSound;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_fe43566a4c91acb5) == 0x000008, "Wrong alignment on FPropertyBag_fe43566a4c91acb5");
static_assert(sizeof(FPropertyBag_fe43566a4c91acb5) == 0x000038, "Wrong size on FPropertyBag_fe43566a4c91acb5");
static_assert(offsetof(FPropertyBag_fe43566a4c91acb5, PressedSlateSoundOverride) == 0x000000, "Member 'FPropertyBag_fe43566a4c91acb5::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(FPropertyBag_fe43566a4c91acb5, HoveredSlateSoundOverride) == 0x000018, "Member 'FPropertyBag_fe43566a4c91acb5::HoveredSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(FPropertyBag_fe43566a4c91acb5, ClickedSound) == 0x000030, "Member 'FPropertyBag_fe43566a4c91acb5::ClickedSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_65847001baf50db9
// 0x0020 (0x0020 - 0x0000)
struct FPropertyBag_65847001baf50db9 final
{
public:
	class UObject*                                FontObject;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextTransformPolicy                          TextTransformPolicy;                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineHeightPercentage;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_65847001baf50db9) == 0x000008, "Wrong alignment on FPropertyBag_65847001baf50db9");
static_assert(sizeof(FPropertyBag_65847001baf50db9) == 0x000020, "Wrong size on FPropertyBag_65847001baf50db9");
static_assert(offsetof(FPropertyBag_65847001baf50db9, FontObject) == 0x000000, "Member 'FPropertyBag_65847001baf50db9::FontObject' has a wrong offset!");
static_assert(offsetof(FPropertyBag_65847001baf50db9, TypefaceFontName) == 0x000008, "Member 'FPropertyBag_65847001baf50db9::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FPropertyBag_65847001baf50db9, LetterSpacing) == 0x00000C, "Member 'FPropertyBag_65847001baf50db9::LetterSpacing' has a wrong offset!");
static_assert(offsetof(FPropertyBag_65847001baf50db9, TextTransformPolicy) == 0x000010, "Member 'FPropertyBag_65847001baf50db9::TextTransformPolicy' has a wrong offset!");
static_assert(offsetof(FPropertyBag_65847001baf50db9, LineHeightPercentage) == 0x000014, "Member 'FPropertyBag_65847001baf50db9::LineHeightPercentage' has a wrong offset!");
static_assert(offsetof(FPropertyBag_65847001baf50db9, SkewAmount) == 0x000018, "Member 'FPropertyBag_65847001baf50db9::SkewAmount' has a wrong offset!");

// PropertyBag Transient.PropertyBag_e9dd7bd344292acf
// 0x0048 (0x0048 - 0x0000)
struct FPropertyBag_e9dd7bd344292acf final
{
public:
	class USoundBase*                             PressedSound;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoveredSound;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x0010(0x0018)(Edit, NoDestructor)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x0028(0x0018)(Edit, NoDestructor)
	class USoundBase*                             ActivityBrowserTileHoverSound;                     // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_e9dd7bd344292acf) == 0x000008, "Wrong alignment on FPropertyBag_e9dd7bd344292acf");
static_assert(sizeof(FPropertyBag_e9dd7bd344292acf) == 0x000048, "Wrong size on FPropertyBag_e9dd7bd344292acf");
static_assert(offsetof(FPropertyBag_e9dd7bd344292acf, PressedSound) == 0x000000, "Member 'FPropertyBag_e9dd7bd344292acf::PressedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_e9dd7bd344292acf, HoveredSound) == 0x000008, "Member 'FPropertyBag_e9dd7bd344292acf::HoveredSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_e9dd7bd344292acf, PressedSlateSoundOverride) == 0x000010, "Member 'FPropertyBag_e9dd7bd344292acf::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(FPropertyBag_e9dd7bd344292acf, HoveredSlateSoundOverride) == 0x000028, "Member 'FPropertyBag_e9dd7bd344292acf::HoveredSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(FPropertyBag_e9dd7bd344292acf, ActivityBrowserTileHoverSound) == 0x000040, "Member 'FPropertyBag_e9dd7bd344292acf::ActivityBrowserTileHoverSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_f13f46d6750b876a
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_f13f46d6750b876a final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_f13f46d6750b876a) == 0x000004, "Wrong alignment on FPropertyBag_f13f46d6750b876a");
static_assert(sizeof(FPropertyBag_f13f46d6750b876a) == 0x000008, "Wrong size on FPropertyBag_f13f46d6750b876a");
static_assert(offsetof(FPropertyBag_f13f46d6750b876a, Size) == 0x000000, "Member 'FPropertyBag_f13f46d6750b876a::Size' has a wrong offset!");
static_assert(offsetof(FPropertyBag_f13f46d6750b876a, LetterSpacing) == 0x000004, "Member 'FPropertyBag_f13f46d6750b876a::LetterSpacing' has a wrong offset!");

// PropertyBag Transient.PropertyBag_f4fc2953163446cf
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_f4fc2953163446cf final
{
public:
	class USoundBase*                             PressedSound;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_f4fc2953163446cf) == 0x000008, "Wrong alignment on FPropertyBag_f4fc2953163446cf");
static_assert(sizeof(FPropertyBag_f4fc2953163446cf) == 0x000008, "Wrong size on FPropertyBag_f4fc2953163446cf");
static_assert(offsetof(FPropertyBag_f4fc2953163446cf, PressedSound) == 0x000000, "Member 'FPropertyBag_f4fc2953163446cf::PressedSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_bf290bbea3c07373
// 0x000C (0x000C - 0x0000)
struct FPropertyBag_bf290bbea3c07373 final
{
public:
	class FName                                   TypefaceFontName;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_bf290bbea3c07373) == 0x000004, "Wrong alignment on FPropertyBag_bf290bbea3c07373");
static_assert(sizeof(FPropertyBag_bf290bbea3c07373) == 0x00000C, "Wrong size on FPropertyBag_bf290bbea3c07373");
static_assert(offsetof(FPropertyBag_bf290bbea3c07373, TypefaceFontName) == 0x000000, "Member 'FPropertyBag_bf290bbea3c07373::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FPropertyBag_bf290bbea3c07373, Size) == 0x000004, "Member 'FPropertyBag_bf290bbea3c07373::Size' has a wrong offset!");
static_assert(offsetof(FPropertyBag_bf290bbea3c07373, LetterSpacing) == 0x000008, "Member 'FPropertyBag_bf290bbea3c07373::LetterSpacing' has a wrong offset!");

// PropertyBag Transient.PropertyBag_2727e00570b775d1
// 0x000C (0x000C - 0x0000)
struct FPropertyBag_2727e00570b775d1 final
{
public:
	class FName                                   TypefaceFontName;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextTransformPolicy                          TextTransformPolicy;                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_2727e00570b775d1) == 0x000004, "Wrong alignment on FPropertyBag_2727e00570b775d1");
static_assert(sizeof(FPropertyBag_2727e00570b775d1) == 0x00000C, "Wrong size on FPropertyBag_2727e00570b775d1");
static_assert(offsetof(FPropertyBag_2727e00570b775d1, TypefaceFontName) == 0x000000, "Member 'FPropertyBag_2727e00570b775d1::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2727e00570b775d1, LetterSpacing) == 0x000004, "Member 'FPropertyBag_2727e00570b775d1::LetterSpacing' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2727e00570b775d1, TextTransformPolicy) == 0x000008, "Member 'FPropertyBag_2727e00570b775d1::TextTransformPolicy' has a wrong offset!");

// PropertyBag Transient.PropertyBag_8fd6e04e6d9dedac
// 0x0030 (0x0030 - 0x0000)
struct FPropertyBag_8fd6e04e6d9dedac final
{
public:
	class UObject*                                FontObject;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontObject_0;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName_0;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size_0;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing_0;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount_0;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_8fd6e04e6d9dedac) == 0x000008, "Wrong alignment on FPropertyBag_8fd6e04e6d9dedac");
static_assert(sizeof(FPropertyBag_8fd6e04e6d9dedac) == 0x000030, "Wrong size on FPropertyBag_8fd6e04e6d9dedac");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, FontObject) == 0x000000, "Member 'FPropertyBag_8fd6e04e6d9dedac::FontObject' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, TypefaceFontName) == 0x000008, "Member 'FPropertyBag_8fd6e04e6d9dedac::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, Size) == 0x00000C, "Member 'FPropertyBag_8fd6e04e6d9dedac::Size' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, LetterSpacing) == 0x000010, "Member 'FPropertyBag_8fd6e04e6d9dedac::LetterSpacing' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, SkewAmount) == 0x000014, "Member 'FPropertyBag_8fd6e04e6d9dedac::SkewAmount' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, FontObject_0) == 0x000018, "Member 'FPropertyBag_8fd6e04e6d9dedac::FontObject_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, TypefaceFontName_0) == 0x000020, "Member 'FPropertyBag_8fd6e04e6d9dedac::TypefaceFontName_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, Size_0) == 0x000024, "Member 'FPropertyBag_8fd6e04e6d9dedac::Size_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, LetterSpacing_0) == 0x000028, "Member 'FPropertyBag_8fd6e04e6d9dedac::LetterSpacing_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8fd6e04e6d9dedac, SkewAmount_0) == 0x00002C, "Member 'FPropertyBag_8fd6e04e6d9dedac::SkewAmount_0' has a wrong offset!");

// PropertyBag Transient.PropertyBag_5cbad95f10780359
// 0x0004 (0x0004 - 0x0000)
struct FPropertyBag_5cbad95f10780359 final
{
public:
	class FName                                   TypefaceFontName;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_5cbad95f10780359) == 0x000004, "Wrong alignment on FPropertyBag_5cbad95f10780359");
static_assert(sizeof(FPropertyBag_5cbad95f10780359) == 0x000004, "Wrong size on FPropertyBag_5cbad95f10780359");
static_assert(offsetof(FPropertyBag_5cbad95f10780359, TypefaceFontName) == 0x000000, "Member 'FPropertyBag_5cbad95f10780359::TypefaceFontName' has a wrong offset!");

// PropertyBag Transient.PropertyBag_8336c9ada11e7a36
// 0x0010 (0x0010 - 0x0000)
struct FPropertyBag_8336c9ada11e7a36 final
{
public:
	class USoundBase*                             ErrorWindowAppearSound;                            // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ErrorWindowAwaySound;                              // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_8336c9ada11e7a36) == 0x000008, "Wrong alignment on FPropertyBag_8336c9ada11e7a36");
static_assert(sizeof(FPropertyBag_8336c9ada11e7a36) == 0x000010, "Wrong size on FPropertyBag_8336c9ada11e7a36");
static_assert(offsetof(FPropertyBag_8336c9ada11e7a36, ErrorWindowAppearSound) == 0x000000, "Member 'FPropertyBag_8336c9ada11e7a36::ErrorWindowAppearSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8336c9ada11e7a36, ErrorWindowAwaySound) == 0x000008, "Member 'FPropertyBag_8336c9ada11e7a36::ErrorWindowAwaySound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_aefb1b100520114d
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_aefb1b100520114d final
{
public:
	class UObject*                                FontMaterial;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_aefb1b100520114d) == 0x000008, "Wrong alignment on FPropertyBag_aefb1b100520114d");
static_assert(sizeof(FPropertyBag_aefb1b100520114d) == 0x000008, "Wrong size on FPropertyBag_aefb1b100520114d");
static_assert(offsetof(FPropertyBag_aefb1b100520114d, FontMaterial) == 0x000000, "Member 'FPropertyBag_aefb1b100520114d::FontMaterial' has a wrong offset!");

// PropertyBag Transient.PropertyBag_123a2d84ad4bbb57
// 0x0090 (0x0090 - 0x0000)
struct FPropertyBag_123a2d84ad4bbb57 final
{
public:
	class UObject*                                FontObject;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontObject_0;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName_0;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size_0;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing_0;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount_0;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontObject_1;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName_1;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size_1;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing_1;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount_1;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontObject_2;                                      // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName_2;                                // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size_2;                                            // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing_2;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount_2;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontObject_3;                                      // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName_3;                                // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size_3;                                            // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing_3;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount_3;                                      // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontObject_4;                                      // 0x0078(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName_4;                                // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size_4;                                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing_4;                                   // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount_4;                                      // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_123a2d84ad4bbb57) == 0x000008, "Wrong alignment on FPropertyBag_123a2d84ad4bbb57");
static_assert(sizeof(FPropertyBag_123a2d84ad4bbb57) == 0x000090, "Wrong size on FPropertyBag_123a2d84ad4bbb57");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, FontObject) == 0x000000, "Member 'FPropertyBag_123a2d84ad4bbb57::FontObject' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, TypefaceFontName) == 0x000008, "Member 'FPropertyBag_123a2d84ad4bbb57::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, Size) == 0x00000C, "Member 'FPropertyBag_123a2d84ad4bbb57::Size' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, LetterSpacing) == 0x000010, "Member 'FPropertyBag_123a2d84ad4bbb57::LetterSpacing' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, SkewAmount) == 0x000014, "Member 'FPropertyBag_123a2d84ad4bbb57::SkewAmount' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, FontObject_0) == 0x000018, "Member 'FPropertyBag_123a2d84ad4bbb57::FontObject_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, TypefaceFontName_0) == 0x000020, "Member 'FPropertyBag_123a2d84ad4bbb57::TypefaceFontName_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, Size_0) == 0x000024, "Member 'FPropertyBag_123a2d84ad4bbb57::Size_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, LetterSpacing_0) == 0x000028, "Member 'FPropertyBag_123a2d84ad4bbb57::LetterSpacing_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, SkewAmount_0) == 0x00002C, "Member 'FPropertyBag_123a2d84ad4bbb57::SkewAmount_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, FontObject_1) == 0x000030, "Member 'FPropertyBag_123a2d84ad4bbb57::FontObject_1' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, TypefaceFontName_1) == 0x000038, "Member 'FPropertyBag_123a2d84ad4bbb57::TypefaceFontName_1' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, Size_1) == 0x00003C, "Member 'FPropertyBag_123a2d84ad4bbb57::Size_1' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, LetterSpacing_1) == 0x000040, "Member 'FPropertyBag_123a2d84ad4bbb57::LetterSpacing_1' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, SkewAmount_1) == 0x000044, "Member 'FPropertyBag_123a2d84ad4bbb57::SkewAmount_1' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, FontObject_2) == 0x000048, "Member 'FPropertyBag_123a2d84ad4bbb57::FontObject_2' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, TypefaceFontName_2) == 0x000050, "Member 'FPropertyBag_123a2d84ad4bbb57::TypefaceFontName_2' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, Size_2) == 0x000054, "Member 'FPropertyBag_123a2d84ad4bbb57::Size_2' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, LetterSpacing_2) == 0x000058, "Member 'FPropertyBag_123a2d84ad4bbb57::LetterSpacing_2' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, SkewAmount_2) == 0x00005C, "Member 'FPropertyBag_123a2d84ad4bbb57::SkewAmount_2' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, FontObject_3) == 0x000060, "Member 'FPropertyBag_123a2d84ad4bbb57::FontObject_3' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, TypefaceFontName_3) == 0x000068, "Member 'FPropertyBag_123a2d84ad4bbb57::TypefaceFontName_3' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, Size_3) == 0x00006C, "Member 'FPropertyBag_123a2d84ad4bbb57::Size_3' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, LetterSpacing_3) == 0x000070, "Member 'FPropertyBag_123a2d84ad4bbb57::LetterSpacing_3' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, SkewAmount_3) == 0x000074, "Member 'FPropertyBag_123a2d84ad4bbb57::SkewAmount_3' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, FontObject_4) == 0x000078, "Member 'FPropertyBag_123a2d84ad4bbb57::FontObject_4' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, TypefaceFontName_4) == 0x000080, "Member 'FPropertyBag_123a2d84ad4bbb57::TypefaceFontName_4' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, Size_4) == 0x000084, "Member 'FPropertyBag_123a2d84ad4bbb57::Size_4' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, LetterSpacing_4) == 0x000088, "Member 'FPropertyBag_123a2d84ad4bbb57::LetterSpacing_4' has a wrong offset!");
static_assert(offsetof(FPropertyBag_123a2d84ad4bbb57, SkewAmount_4) == 0x00008C, "Member 'FPropertyBag_123a2d84ad4bbb57::SkewAmount_4' has a wrong offset!");

// PropertyBag Transient.PropertyBag_b8cb8248896bf14e
// 0x0064 (0x0064 - 0x0000)
struct FPropertyBag_b8cb8248896bf14e final
{
public:
	struct FSlateColor                            Color_Idle;                                        // 0x0000(0x0014)(Edit)
	struct FSlateColor                            Color_Hovered;                                     // 0x0014(0x0014)(Edit)
	struct FSlateColor                            Color_Focused;                                     // 0x0028(0x0014)(Edit)
	struct FSlateColor                            Color_Pressed;                                     // 0x003C(0x0014)(Edit)
	struct FSlateColor                            Color_Disabled;                                    // 0x0050(0x0014)(Edit)
};
static_assert(alignof(FPropertyBag_b8cb8248896bf14e) == 0x000004, "Wrong alignment on FPropertyBag_b8cb8248896bf14e");
static_assert(sizeof(FPropertyBag_b8cb8248896bf14e) == 0x000064, "Wrong size on FPropertyBag_b8cb8248896bf14e");
static_assert(offsetof(FPropertyBag_b8cb8248896bf14e, Color_Idle) == 0x000000, "Member 'FPropertyBag_b8cb8248896bf14e::Color_Idle' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b8cb8248896bf14e, Color_Hovered) == 0x000014, "Member 'FPropertyBag_b8cb8248896bf14e::Color_Hovered' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b8cb8248896bf14e, Color_Focused) == 0x000028, "Member 'FPropertyBag_b8cb8248896bf14e::Color_Focused' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b8cb8248896bf14e, Color_Pressed) == 0x00003C, "Member 'FPropertyBag_b8cb8248896bf14e::Color_Pressed' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b8cb8248896bf14e, Color_Disabled) == 0x000050, "Member 'FPropertyBag_b8cb8248896bf14e::Color_Disabled' has a wrong offset!");

// PropertyBag Transient.PropertyBag_85a12673a5b1e8de
// 0x0028 (0x0028 - 0x0000)
struct FPropertyBag_85a12673a5b1e8de final
{
public:
	class USoundBase*                             HoveredSound;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldPressedSound;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldSound;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldReleasedSound;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldCompletedSound;                                // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_85a12673a5b1e8de) == 0x000008, "Wrong alignment on FPropertyBag_85a12673a5b1e8de");
static_assert(sizeof(FPropertyBag_85a12673a5b1e8de) == 0x000028, "Wrong size on FPropertyBag_85a12673a5b1e8de");
static_assert(offsetof(FPropertyBag_85a12673a5b1e8de, HoveredSound) == 0x000000, "Member 'FPropertyBag_85a12673a5b1e8de::HoveredSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_85a12673a5b1e8de, HoldPressedSound) == 0x000008, "Member 'FPropertyBag_85a12673a5b1e8de::HoldPressedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_85a12673a5b1e8de, HoldSound) == 0x000010, "Member 'FPropertyBag_85a12673a5b1e8de::HoldSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_85a12673a5b1e8de, HoldReleasedSound) == 0x000018, "Member 'FPropertyBag_85a12673a5b1e8de::HoldReleasedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_85a12673a5b1e8de, HoldCompletedSound) == 0x000020, "Member 'FPropertyBag_85a12673a5b1e8de::HoldCompletedSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_6919764150bc1872
// 0x0058 (0x0058 - 0x0000)
struct FPropertyBag_6919764150bc1872 final
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(Edit, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_6919764150bc1872) == 0x000008, "Wrong alignment on FPropertyBag_6919764150bc1872");
static_assert(sizeof(FPropertyBag_6919764150bc1872) == 0x000058, "Wrong size on FPropertyBag_6919764150bc1872");
static_assert(offsetof(FPropertyBag_6919764150bc1872, Font) == 0x000000, "Member 'FPropertyBag_6919764150bc1872::Font' has a wrong offset!");

// PropertyBag Transient.PropertyBag_b209ce74c3c77a75
// 0x02B0 (0x02B0 - 0x0000)
struct FPropertyBag_b209ce74c3c77a75 final
{
public:
	struct FSlateFontInfo                         LargePrimaryFont;                                  // 0x0000(0x0058)(Edit, HasGetValueTypeHash)
	struct FSlateFontInfo                         LargeSecondaryFont;                                // 0x0058(0x0058)(Edit, HasGetValueTypeHash)
	struct FSlateFontInfo                         MediumPrimaryFont;                                 // 0x00B0(0x0058)(Edit, HasGetValueTypeHash)
	struct FSlateFontInfo                         MeduimSecondaryFont;                               // 0x0108(0x0058)(Edit, HasGetValueTypeHash)
	struct FSlateFontInfo                         SmallPrimaryFont;                                  // 0x0160(0x0058)(Edit, HasGetValueTypeHash)
	struct FSlateFontInfo                         SmallSecondaryFont;                                // 0x01B8(0x0058)(Edit, HasGetValueTypeHash)
	struct FMargin                                SingleTextLargePadding;                            // 0x0210(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                SingleTextMediumPadding;                           // 0x0220(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                SingleTextSmallPadding;                            // 0x0230(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                DoubleTextLargePadding;                            // 0x0240(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                DoubleTextMediumPadding;                           // 0x0250(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                DoubleTextSmallPadding;                            // 0x0260(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                DoubleTextSecondaryLargePadding;                   // 0x0270(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                DoubleTextSecondaryMediumPadding;                  // 0x0280(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                DoubleTextSecondarySmallPadding;                   // 0x0290(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         LargeHeight;                                       // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MediumHeight;                                      // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmallHeight;                                       // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_b209ce74c3c77a75) == 0x000008, "Wrong alignment on FPropertyBag_b209ce74c3c77a75");
static_assert(sizeof(FPropertyBag_b209ce74c3c77a75) == 0x0002B0, "Wrong size on FPropertyBag_b209ce74c3c77a75");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, LargePrimaryFont) == 0x000000, "Member 'FPropertyBag_b209ce74c3c77a75::LargePrimaryFont' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, LargeSecondaryFont) == 0x000058, "Member 'FPropertyBag_b209ce74c3c77a75::LargeSecondaryFont' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, MediumPrimaryFont) == 0x0000B0, "Member 'FPropertyBag_b209ce74c3c77a75::MediumPrimaryFont' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, MeduimSecondaryFont) == 0x000108, "Member 'FPropertyBag_b209ce74c3c77a75::MeduimSecondaryFont' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, SmallPrimaryFont) == 0x000160, "Member 'FPropertyBag_b209ce74c3c77a75::SmallPrimaryFont' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, SmallSecondaryFont) == 0x0001B8, "Member 'FPropertyBag_b209ce74c3c77a75::SmallSecondaryFont' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, SingleTextLargePadding) == 0x000210, "Member 'FPropertyBag_b209ce74c3c77a75::SingleTextLargePadding' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, SingleTextMediumPadding) == 0x000220, "Member 'FPropertyBag_b209ce74c3c77a75::SingleTextMediumPadding' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, SingleTextSmallPadding) == 0x000230, "Member 'FPropertyBag_b209ce74c3c77a75::SingleTextSmallPadding' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, DoubleTextLargePadding) == 0x000240, "Member 'FPropertyBag_b209ce74c3c77a75::DoubleTextLargePadding' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, DoubleTextMediumPadding) == 0x000250, "Member 'FPropertyBag_b209ce74c3c77a75::DoubleTextMediumPadding' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, DoubleTextSmallPadding) == 0x000260, "Member 'FPropertyBag_b209ce74c3c77a75::DoubleTextSmallPadding' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, DoubleTextSecondaryLargePadding) == 0x000270, "Member 'FPropertyBag_b209ce74c3c77a75::DoubleTextSecondaryLargePadding' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, DoubleTextSecondaryMediumPadding) == 0x000280, "Member 'FPropertyBag_b209ce74c3c77a75::DoubleTextSecondaryMediumPadding' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, DoubleTextSecondarySmallPadding) == 0x000290, "Member 'FPropertyBag_b209ce74c3c77a75::DoubleTextSecondarySmallPadding' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, LargeHeight) == 0x0002A0, "Member 'FPropertyBag_b209ce74c3c77a75::LargeHeight' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, MediumHeight) == 0x0002A4, "Member 'FPropertyBag_b209ce74c3c77a75::MediumHeight' has a wrong offset!");
static_assert(offsetof(FPropertyBag_b209ce74c3c77a75, SmallHeight) == 0x0002A8, "Member 'FPropertyBag_b209ce74c3c77a75::SmallHeight' has a wrong offset!");

// PropertyBag Transient.PropertyBag_9c9a8cb6fd123e1e
// 0x0058 (0x0058 - 0x0000)
struct FPropertyBag_9c9a8cb6fd123e1e final
{
public:
	struct FSlateFontInfo                         GamepadPromptFont;                                 // 0x0000(0x0058)(Edit, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_9c9a8cb6fd123e1e) == 0x000008, "Wrong alignment on FPropertyBag_9c9a8cb6fd123e1e");
static_assert(sizeof(FPropertyBag_9c9a8cb6fd123e1e) == 0x000058, "Wrong size on FPropertyBag_9c9a8cb6fd123e1e");
static_assert(offsetof(FPropertyBag_9c9a8cb6fd123e1e, GamepadPromptFont) == 0x000000, "Member 'FPropertyBag_9c9a8cb6fd123e1e::GamepadPromptFont' has a wrong offset!");

// PropertyBag Transient.PropertyBag_2119c516983c4640
// 0x0040 (0x0040 - 0x0000)
struct FPropertyBag_2119c516983c4640 final
{
public:
	class UObject*                                FontMaterial;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontMaterial_0;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontMaterial_1;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontMaterial_2;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontMaterial_3;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontMaterial_4;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      BackgroundMaterial;                                // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      BorderMaterial;                                    // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_2119c516983c4640) == 0x000008, "Wrong alignment on FPropertyBag_2119c516983c4640");
static_assert(sizeof(FPropertyBag_2119c516983c4640) == 0x000040, "Wrong size on FPropertyBag_2119c516983c4640");
static_assert(offsetof(FPropertyBag_2119c516983c4640, FontMaterial) == 0x000000, "Member 'FPropertyBag_2119c516983c4640::FontMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2119c516983c4640, FontMaterial_0) == 0x000008, "Member 'FPropertyBag_2119c516983c4640::FontMaterial_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2119c516983c4640, FontMaterial_1) == 0x000010, "Member 'FPropertyBag_2119c516983c4640::FontMaterial_1' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2119c516983c4640, FontMaterial_2) == 0x000018, "Member 'FPropertyBag_2119c516983c4640::FontMaterial_2' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2119c516983c4640, FontMaterial_3) == 0x000020, "Member 'FPropertyBag_2119c516983c4640::FontMaterial_3' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2119c516983c4640, FontMaterial_4) == 0x000028, "Member 'FPropertyBag_2119c516983c4640::FontMaterial_4' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2119c516983c4640, BackgroundMaterial) == 0x000030, "Member 'FPropertyBag_2119c516983c4640::BackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2119c516983c4640, BorderMaterial) == 0x000038, "Member 'FPropertyBag_2119c516983c4640::BorderMaterial' has a wrong offset!");

// PropertyBag Transient.PropertyBag_7c4ad204ae157a7c
// 0x0018 (0x0018 - 0x0000)
struct FPropertyBag_7c4ad204ae157a7c final
{
public:
	class UObject*                                FontObject;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   TypefaceFontName;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LetterSpacing;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkewAmount;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_7c4ad204ae157a7c) == 0x000008, "Wrong alignment on FPropertyBag_7c4ad204ae157a7c");
static_assert(sizeof(FPropertyBag_7c4ad204ae157a7c) == 0x000018, "Wrong size on FPropertyBag_7c4ad204ae157a7c");
static_assert(offsetof(FPropertyBag_7c4ad204ae157a7c, FontObject) == 0x000000, "Member 'FPropertyBag_7c4ad204ae157a7c::FontObject' has a wrong offset!");
static_assert(offsetof(FPropertyBag_7c4ad204ae157a7c, TypefaceFontName) == 0x000008, "Member 'FPropertyBag_7c4ad204ae157a7c::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FPropertyBag_7c4ad204ae157a7c, Size) == 0x00000C, "Member 'FPropertyBag_7c4ad204ae157a7c::Size' has a wrong offset!");
static_assert(offsetof(FPropertyBag_7c4ad204ae157a7c, LetterSpacing) == 0x000010, "Member 'FPropertyBag_7c4ad204ae157a7c::LetterSpacing' has a wrong offset!");
static_assert(offsetof(FPropertyBag_7c4ad204ae157a7c, SkewAmount) == 0x000014, "Member 'FPropertyBag_7c4ad204ae157a7c::SkewAmount' has a wrong offset!");

// PropertyBag Transient.PropertyBag_aa3559b84bc493de
// 0x0040 (0x0040 - 0x0000)
struct FPropertyBag_aa3559b84bc493de final
{
public:
	class UMaterialInstance*                      RegularFontMaterial;                               // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      RegularSecondaryFontMaterial;                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      RegularBackgroundMaterial;                         // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      RegularOutlineMaterial;                            // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      QuietFontMaterial;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      QuietSecondaryFontMaterial;                        // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      QuietBackgroundMaterial;                           // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      QuietOutlineMaterial;                              // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_aa3559b84bc493de) == 0x000008, "Wrong alignment on FPropertyBag_aa3559b84bc493de");
static_assert(sizeof(FPropertyBag_aa3559b84bc493de) == 0x000040, "Wrong size on FPropertyBag_aa3559b84bc493de");
static_assert(offsetof(FPropertyBag_aa3559b84bc493de, RegularFontMaterial) == 0x000000, "Member 'FPropertyBag_aa3559b84bc493de::RegularFontMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_aa3559b84bc493de, RegularSecondaryFontMaterial) == 0x000008, "Member 'FPropertyBag_aa3559b84bc493de::RegularSecondaryFontMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_aa3559b84bc493de, RegularBackgroundMaterial) == 0x000010, "Member 'FPropertyBag_aa3559b84bc493de::RegularBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_aa3559b84bc493de, RegularOutlineMaterial) == 0x000018, "Member 'FPropertyBag_aa3559b84bc493de::RegularOutlineMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_aa3559b84bc493de, QuietFontMaterial) == 0x000020, "Member 'FPropertyBag_aa3559b84bc493de::QuietFontMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_aa3559b84bc493de, QuietSecondaryFontMaterial) == 0x000028, "Member 'FPropertyBag_aa3559b84bc493de::QuietSecondaryFontMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_aa3559b84bc493de, QuietBackgroundMaterial) == 0x000030, "Member 'FPropertyBag_aa3559b84bc493de::QuietBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_aa3559b84bc493de, QuietOutlineMaterial) == 0x000038, "Member 'FPropertyBag_aa3559b84bc493de::QuietOutlineMaterial' has a wrong offset!");

// PropertyBag Transient.PropertyBag_db75ba5f1dee7ad0
// 0x0078 (0x0078 - 0x0000)
struct FPropertyBag_db75ba5f1dee7ad0 final
{
public:
	class UObject*                                FontMaterial;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FontMaterial_0;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      BackgroundMaterial;                                // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      BorderMaterial;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         GamepadPromptFont;                                 // 0x0020(0x0058)(Edit, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_db75ba5f1dee7ad0) == 0x000008, "Wrong alignment on FPropertyBag_db75ba5f1dee7ad0");
static_assert(sizeof(FPropertyBag_db75ba5f1dee7ad0) == 0x000078, "Wrong size on FPropertyBag_db75ba5f1dee7ad0");
static_assert(offsetof(FPropertyBag_db75ba5f1dee7ad0, FontMaterial) == 0x000000, "Member 'FPropertyBag_db75ba5f1dee7ad0::FontMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_db75ba5f1dee7ad0, FontMaterial_0) == 0x000008, "Member 'FPropertyBag_db75ba5f1dee7ad0::FontMaterial_0' has a wrong offset!");
static_assert(offsetof(FPropertyBag_db75ba5f1dee7ad0, BackgroundMaterial) == 0x000010, "Member 'FPropertyBag_db75ba5f1dee7ad0::BackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_db75ba5f1dee7ad0, BorderMaterial) == 0x000018, "Member 'FPropertyBag_db75ba5f1dee7ad0::BorderMaterial' has a wrong offset!");
static_assert(offsetof(FPropertyBag_db75ba5f1dee7ad0, GamepadPromptFont) == 0x000020, "Member 'FPropertyBag_db75ba5f1dee7ad0::GamepadPromptFont' has a wrong offset!");

// PropertyBag Transient.PropertyBag_761e09dc1024c61
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_761e09dc1024c61 final
{
public:
	class USoundBase*                             MatchMakingSucceededSound;                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_761e09dc1024c61) == 0x000008, "Wrong alignment on FPropertyBag_761e09dc1024c61");
static_assert(sizeof(FPropertyBag_761e09dc1024c61) == 0x000008, "Wrong size on FPropertyBag_761e09dc1024c61");
static_assert(offsetof(FPropertyBag_761e09dc1024c61, MatchMakingSucceededSound) == 0x000000, "Member 'FPropertyBag_761e09dc1024c61::MatchMakingSucceededSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_17edc7d4c0d9e4bc
// 0x0010 (0x0010 - 0x0000)
struct FPropertyBag_17edc7d4c0d9e4bc final
{
public:
	float                                         SecondsPriorToTransSound;                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             TransitionSound;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_17edc7d4c0d9e4bc) == 0x000008, "Wrong alignment on FPropertyBag_17edc7d4c0d9e4bc");
static_assert(sizeof(FPropertyBag_17edc7d4c0d9e4bc) == 0x000010, "Wrong size on FPropertyBag_17edc7d4c0d9e4bc");
static_assert(offsetof(FPropertyBag_17edc7d4c0d9e4bc, SecondsPriorToTransSound) == 0x000000, "Member 'FPropertyBag_17edc7d4c0d9e4bc::SecondsPriorToTransSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_17edc7d4c0d9e4bc, TransitionSound) == 0x000008, "Member 'FPropertyBag_17edc7d4c0d9e4bc::TransitionSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_8f95e7e8f9a09118
// 0x0010 (0x0010 - 0x0000)
struct FPropertyBag_8f95e7e8f9a09118 final
{
public:
	class USoundBase*                             MTXOfferTileIntroWhoosh;                           // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ShopRowWhooshIn;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_8f95e7e8f9a09118) == 0x000008, "Wrong alignment on FPropertyBag_8f95e7e8f9a09118");
static_assert(sizeof(FPropertyBag_8f95e7e8f9a09118) == 0x000010, "Wrong size on FPropertyBag_8f95e7e8f9a09118");
static_assert(offsetof(FPropertyBag_8f95e7e8f9a09118, MTXOfferTileIntroWhoosh) == 0x000000, "Member 'FPropertyBag_8f95e7e8f9a09118::MTXOfferTileIntroWhoosh' has a wrong offset!");
static_assert(offsetof(FPropertyBag_8f95e7e8f9a09118, ShopRowWhooshIn) == 0x000008, "Member 'FPropertyBag_8f95e7e8f9a09118::ShopRowWhooshIn' has a wrong offset!");

// PropertyBag Transient.PropertyBag_2f740a1eec58958a
// 0x0030 (0x0030 - 0x0000)
struct FPropertyBag_2f740a1eec58958a final
{
public:
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x0000(0x0018)(Edit, NoDestructor)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x0018(0x0018)(Edit, NoDestructor)
};
static_assert(alignof(FPropertyBag_2f740a1eec58958a) == 0x000008, "Wrong alignment on FPropertyBag_2f740a1eec58958a");
static_assert(sizeof(FPropertyBag_2f740a1eec58958a) == 0x000030, "Wrong size on FPropertyBag_2f740a1eec58958a");
static_assert(offsetof(FPropertyBag_2f740a1eec58958a, PressedSlateSoundOverride) == 0x000000, "Member 'FPropertyBag_2f740a1eec58958a::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(FPropertyBag_2f740a1eec58958a, HoveredSlateSoundOverride) == 0x000018, "Member 'FPropertyBag_2f740a1eec58958a::HoveredSlateSoundOverride' has a wrong offset!");

// PropertyBag Transient.PropertyBag_5474d66a76e38177
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_5474d66a76e38177 final
{
public:
	class USoundBase*                             ShopRowWhooshIn;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_5474d66a76e38177) == 0x000008, "Wrong alignment on FPropertyBag_5474d66a76e38177");
static_assert(sizeof(FPropertyBag_5474d66a76e38177) == 0x000008, "Wrong size on FPropertyBag_5474d66a76e38177");
static_assert(offsetof(FPropertyBag_5474d66a76e38177, ShopRowWhooshIn) == 0x000000, "Member 'FPropertyBag_5474d66a76e38177::ShopRowWhooshIn' has a wrong offset!");

// PropertyBag Transient.PropertyBag_a0d9aaca285c4e56
// 0x0030 (0x0030 - 0x0000)
struct FPropertyBag_a0d9aaca285c4e56 final
{
public:
	class USoundBase*                             HoveredSound;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PressedSound;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldPressedSound;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldSound;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldReleasedSound;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldCompletedSound;                                // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_a0d9aaca285c4e56) == 0x000008, "Wrong alignment on FPropertyBag_a0d9aaca285c4e56");
static_assert(sizeof(FPropertyBag_a0d9aaca285c4e56) == 0x000030, "Wrong size on FPropertyBag_a0d9aaca285c4e56");
static_assert(offsetof(FPropertyBag_a0d9aaca285c4e56, HoveredSound) == 0x000000, "Member 'FPropertyBag_a0d9aaca285c4e56::HoveredSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_a0d9aaca285c4e56, PressedSound) == 0x000008, "Member 'FPropertyBag_a0d9aaca285c4e56::PressedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_a0d9aaca285c4e56, HoldPressedSound) == 0x000010, "Member 'FPropertyBag_a0d9aaca285c4e56::HoldPressedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_a0d9aaca285c4e56, HoldSound) == 0x000018, "Member 'FPropertyBag_a0d9aaca285c4e56::HoldSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_a0d9aaca285c4e56, HoldReleasedSound) == 0x000020, "Member 'FPropertyBag_a0d9aaca285c4e56::HoldReleasedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_a0d9aaca285c4e56, HoldCompletedSound) == 0x000028, "Member 'FPropertyBag_a0d9aaca285c4e56::HoldCompletedSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_e8c8e08dfb51224f
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_e8c8e08dfb51224f final
{
public:
	class USoundBase*                             LockerCategoryWhooshSound;                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_e8c8e08dfb51224f) == 0x000008, "Wrong alignment on FPropertyBag_e8c8e08dfb51224f");
static_assert(sizeof(FPropertyBag_e8c8e08dfb51224f) == 0x000008, "Wrong size on FPropertyBag_e8c8e08dfb51224f");
static_assert(offsetof(FPropertyBag_e8c8e08dfb51224f, LockerCategoryWhooshSound) == 0x000000, "Member 'FPropertyBag_e8c8e08dfb51224f::LockerCategoryWhooshSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_a08cf0475f7e17a3
// 0x0030 (0x0030 - 0x0000)
struct FPropertyBag_a08cf0475f7e17a3 final
{
public:
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x0000(0x0018)(Edit, NoDestructor)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x0018(0x0018)(Edit, NoDestructor)
};
static_assert(alignof(FPropertyBag_a08cf0475f7e17a3) == 0x000008, "Wrong alignment on FPropertyBag_a08cf0475f7e17a3");
static_assert(sizeof(FPropertyBag_a08cf0475f7e17a3) == 0x000030, "Wrong size on FPropertyBag_a08cf0475f7e17a3");
static_assert(offsetof(FPropertyBag_a08cf0475f7e17a3, PressedSlateSoundOverride) == 0x000000, "Member 'FPropertyBag_a08cf0475f7e17a3::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(FPropertyBag_a08cf0475f7e17a3, HoveredSlateSoundOverride) == 0x000018, "Member 'FPropertyBag_a08cf0475f7e17a3::HoveredSlateSoundOverride' has a wrong offset!");

// PropertyBag Transient.PropertyBag_30ea71a419490e5e
// 0x1980 (0x1980 - 0x0000)
struct FPropertyBag_30ea71a419490e5e final
{
public:
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_Result;       // 0x0000(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_Result;           // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_2_4_Result;   // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_2_4_Transform; // 0x0050(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_2_4_CachedBone; // 0x00B0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_2_4_Value;    // 0x00C0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_BoneToModify__IO; // 0x00E0(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_Result;                // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathQuaternionToEuler_Result;         // 0x00F8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetRelativeBoneTransform_Transform; // 0x0110(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_CachedBone; // 0x0170(0x0010)(Edit)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_CachedSpace; // 0x0180(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_Value;          // 0x0190(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_Value;                 // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_WorkData;        // 0x01B8(0x0010)(Edit)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_Result;     // 0x01D0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_1_Result;         // 0x01F0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_2_4_1_Result; // 0x0208(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_Transform; // 0x0220(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_CachedBone; // 0x0280(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_2_4_1_Value;  // 0x0290(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_BoneToModify__IO; // 0x02B0(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_WorkData;      // 0x02C0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_2_Result;     // 0x02D0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_2_Result;         // 0x02F0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_2_BoneToModify__IO; // 0x0308(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_1_Result;              // 0x0318(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_1_Value;               // 0x031C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_2_WorkData;      // 0x0320(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_1_Result;   // 0x0330(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_1_1_Result;       // 0x0350(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_1_BoneToModify__IO; // 0x0368(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_1_WorkData;    // 0x0378(0x0010)(Edit)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_5_Result;     // 0x0390(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_3_Result;         // 0x03B0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_2_4_2_Result; // 0x03C8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_2_4_2_Transform; // 0x03E0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_2_4_2_CachedBone; // 0x0440(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_2_4_2_Value;  // 0x0450(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_4_BoneToModify__IO; // 0x0470(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_3_Result;              // 0x0480(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathQuaternionToEuler_2_Result;       // 0x0488(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetRelativeBoneTransform_2_Transform; // 0x04A0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_2_CachedBone; // 0x0500(0x0010)(Edit)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_2_CachedSpace; // 0x0510(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_2_Value;        // 0x0520(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_3_Value;               // 0x0540(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_4_WorkData;      // 0x0548(0x0010)(Edit)
	uint8                                         Pad_558[0x8];                                      // 0x0558(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_3_Result;   // 0x0560(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_1_2_Result;       // 0x0580(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_2_4_1_1_Result; // 0x0598(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_1_Transform; // 0x05B0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_1_CachedBone; // 0x0610(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_2_4_1_1_Value; // 0x0620(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_3_BoneToModify__IO; // 0x0640(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_3_WorkData;    // 0x0650(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_2_3_Result;   // 0x0660(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_2_1_Result;       // 0x0680(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_2_2_BoneToModify__IO; // 0x0698(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_1_2_Result;            // 0x06A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_1_2_Value;             // 0x06AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_2_2_WorkData;    // 0x06B0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_1_2_Result; // 0x06C0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_1_1_1_Result;     // 0x06E0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_1_2_BoneToModify__IO; // 0x06F8(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_1_2_WorkData;  // 0x0708(0x0010)(Edit)
	uint8                                         Pad_718[0x8];                                      // 0x0718(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_3_Result;     // 0x0720(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_3_Result;           // 0x0740(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_2_Result;     // 0x0758(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_2_Transform; // 0x0770(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_2_CachedBone; // 0x07D0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_2_Value;      // 0x07E0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_3_BoneToModify__IO; // 0x0800(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_2_Result;              // 0x0810(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_814[0x4];                                      // 0x0814(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathQuaternionToEuler_1_Result;       // 0x0818(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetRelativeBoneTransform_1_Transform; // 0x0830(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_1_CachedBone; // 0x0890(0x0010)(Edit)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_1_CachedSpace; // 0x08A0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_1_Value;        // 0x08B0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_2_Value;               // 0x08D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D4[0x4];                                      // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_3_WorkData;      // 0x08D8(0x0010)(Edit)
	uint8                                         Pad_8E8[0x8];                                      // 0x08E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_2_Result;   // 0x08F0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_Result;             // 0x0910(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_2_1_Result;   // 0x0928(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_2_1_Transform; // 0x0940(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_2_1_CachedBone; // 0x09A0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_2_1_Value;    // 0x09B0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_2_BoneToModify__IO; // 0x09D0(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_2_WorkData;    // 0x09E0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_2_2_Result;   // 0x09F0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_1_Result;           // 0x0A10(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_2_1_BoneToModify__IO; // 0x0A28(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_1_1_Result;            // 0x0A38(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_1_1_Value;             // 0x0A3C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_2_1_WorkData;    // 0x0A40(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_1_1_Result; // 0x0A50(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_1_1_Result;         // 0x0A70(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_1_1_BoneToModify__IO; // 0x0A88(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_1_1_WorkData;  // 0x0A98(0x0010)(Edit)
	uint8                                         Pad_AA8[0x8];                                      // 0x0AA8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_3_1_Result;   // 0x0AB0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_3_Result;             // 0x0AD0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_2_3_Result;   // 0x0AE8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_2_3_Transform; // 0x0B00(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_2_3_CachedBone; // 0x0B60(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_2_3_Value;    // 0x0B70(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_3_1_BoneToModify__IO; // 0x0B90(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_2_1_Result;            // 0x0BA0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA4[0x4];                                      // 0x0BA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathQuaternionToEuler_1_2_Result;     // 0x0BA8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_Transform; // 0x0BC0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_CachedBone; // 0x0C20(0x0010)(Edit)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_CachedSpace; // 0x0C30(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_1_2_Value;      // 0x0C40(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_2_1_Value;             // 0x0C60(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C64[0x4];                                      // 0x0C64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_3_1_WorkData;    // 0x0C68(0x0010)(Edit)
	uint8                                         Pad_C78[0x8];                                      // 0x0C78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_2_1_Result; // 0x0C80(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_2_Result;             // 0x0CA0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_2_2_Result;   // 0x0CB8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_2_2_Transform; // 0x0CD0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_2_2_CachedBone; // 0x0D30(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_2_2_Value;    // 0x0D40(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_2_1_BoneToModify__IO; // 0x0D60(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_2_1_WorkData;  // 0x0D70(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_2_2_1_Result; // 0x0D80(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_1_Result;             // 0x0DA0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_2_1_1_BoneToModify__IO; // 0x0DB8(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_1_1_1_Result;          // 0x0DC8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_1_1_1_Value;           // 0x0DCC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_2_1_1_WorkData;  // 0x0DD0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_1_1_1_Result; // 0x0DE0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_2_Result;               // 0x0E00(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_1_1_1_BoneToModify__IO; // 0x0E18(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_1_1_1_WorkData; // 0x0E28(0x0010)(Edit)
	uint8                                         Pad_E38[0x8];                                      // 0x0E38(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_4_1_Result;   // 0x0E40(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_3_Result;               // 0x0E60(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_3_Result;     // 0x0E78(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_3_Transform; // 0x0E90(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_3_CachedBone; // 0x0EF0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_3_Value;      // 0x0F00(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_5_1_BoneToModify__IO; // 0x0F20(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_4_1_Result;            // 0x0F30(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatAbs_Result;                  // 0x0F34(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_3_1_Result;     // 0x0F38(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_Transform; // 0x0F50(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_CachedBone; // 0x0FB0(0x0010)(Edit)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_CachedSpace; // 0x0FC0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_3_1_Value;      // 0x0FD0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatAbs_Value;                   // 0x0FF0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF4[0x4];                                      // 0x0FF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_5_1_WorkData;    // 0x0FF8(0x0010)(Edit)
	uint8                                         Pad_1008[0x8];                                     // 0x1008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_4_1_1_Result; // 0x1010(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_1_1_Result;             // 0x1030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_1_1_Result;   // 0x1048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_1_1_Transform; // 0x1060(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_1_1_CachedBone; // 0x10C0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_1_1_Value;    // 0x10D0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_4_1_BoneToModify__IO; // 0x10F0(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_4_1_WorkData;  // 0x1100(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_4_Result;     // 0x1110(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_Result;                 // 0x1130(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_Result;       // 0x1148(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_Transform; // 0x1160(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_CachedBone; // 0x11C0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_Value;        // 0x11D0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_5_BoneToModify__IO; // 0x11F0(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_4_Result;              // 0x1200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatAbs_1_Result;                // 0x1204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_3_Result;       // 0x1208(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetRelativeBoneTransform_3_Transform; // 0x1220(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_3_CachedBone; // 0x1280(0x0010)(Edit)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_3_CachedSpace; // 0x1290(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_3_Value;        // 0x12A0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatAbs_1_Value;                 // 0x12C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C4[0x4];                                     // 0x12C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_5_WorkData;      // 0x12C8(0x0010)(Edit)
	uint8                                         Pad_12D8[0x8];                                     // 0x12D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_4_1_Result; // 0x12E0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_1_Result;               // 0x1300(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_1_Result;     // 0x1318(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_1_Transform; // 0x1330(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_1_CachedBone; // 0x1390(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_1_Value;      // 0x13A0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_4_BoneToModify__IO; // 0x13C0(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_4_WorkData;    // 0x13D0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_4_1_1_Result; // 0x13E0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_3_1_Result;             // 0x1400(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_3_1_Result;   // 0x1418(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_3_1_Transform; // 0x1430(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_3_1_CachedBone; // 0x1490(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_3_1_Value;    // 0x14A0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_5_1_1_BoneToModify__IO; // 0x14C0(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_4_1_1_Result;          // 0x14D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatAbs_2_Result;                // 0x14D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_3_1_1_Result;   // 0x14D8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_Transform; // 0x14F0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_CachedBone; // 0x1550(0x0010)(Edit)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_CachedSpace; // 0x1560(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_3_1_1_Value;    // 0x1570(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatAbs_2_Value;                 // 0x1590(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1594[0x4];                                     // 0x1594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_5_1_1_WorkData;  // 0x1598(0x0010)(Edit)
	uint8                                         Pad_15A8[0x8];                                     // 0x15A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_4_1_1_1_Result; // 0x15B0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_1_1_1_Result;           // 0x15D0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_1_1_1_Result; // 0x15E8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_Transform; // 0x1600(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_CachedBone; // 0x1660(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_1_1_1_Value;  // 0x1670(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_4_1_1_BoneToModify__IO; // 0x1690(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_4_1_1_WorkData; // 0x16A0(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_4_1_1_1_Result; // 0x16B0(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_3_1_1_Result;           // 0x16D0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_3_1_1_Result; // 0x16E8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_3_1_1_Transform; // 0x1700(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_3_1_1_CachedBone; // 0x1760(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_3_1_1_Value;  // 0x1770(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_5_1_1_1_BoneToModify__IO; // 0x1790(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_4_1_1_1_Result;        // 0x17A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatAbs_2_1_Result;              // 0x17A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_3_1_1_1_Result; // 0x17A8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_1_Transform; // 0x17C0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_1_CachedBone; // 0x1820(0x0010)(Edit)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_1_CachedSpace; // 0x1830(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_3_1_1_1_Value;  // 0x1840(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatAbs_2_1_Value;               // 0x1860(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1864[0x4];                                     // 0x1864(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_5_1_1_1_WorkData; // 0x1868(0x0010)(Edit)
	uint8                                         Pad_1878[0x8];                                     // 0x1878(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RigVMModel___MathQuaternionFromEuler_1_4_1_1_1_1_Result; // 0x1880(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathVectorAdd_1_1_1_1_Result;         // 0x18A0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___MathQuaternionToEuler_4_1_1_1_1_Result; // 0x18B8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_1_Transform; // 0x18D0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_1_CachedBone; // 0x1930(0x0010)(Edit)
	struct FQuat                                  RigVMModel___MathQuaternionToEuler_4_1_1_1_1_Value; // 0x1940(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_4_1_1_1_BoneToModify__IO; // 0x1960(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_WorkData> RigVMModel___ModifyBoneTransforms_1_4_1_1_1_WorkData; // 0x1970(0x0010)(Edit)
};
static_assert(alignof(FPropertyBag_30ea71a419490e5e) == 0x000010, "Wrong alignment on FPropertyBag_30ea71a419490e5e");
static_assert(sizeof(FPropertyBag_30ea71a419490e5e) == 0x001980, "Wrong size on FPropertyBag_30ea71a419490e5e");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_Result) == 0x000000, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_2_Result) == 0x000020, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_4_Result) == 0x000038, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_4_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_Transform) == 0x000050, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_CachedBone) == 0x0000B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_4_Value) == 0x0000C0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_4_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_BoneToModify__IO) == 0x0000E0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_Result) == 0x0000F0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_Result) == 0x0000F8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_Transform) == 0x000110, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_CachedBone) == 0x000170, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_CachedSpace) == 0x000180, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_CachedSpace' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_Value) == 0x000190, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_Value) == 0x0001B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_WorkData) == 0x0001B8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_Result) == 0x0001D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_2_1_Result) == 0x0001F0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_2_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_4_1_Result) == 0x000208, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_4_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_Transform) == 0x000220, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_CachedBone) == 0x000280, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_4_1_Value) == 0x000290, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_4_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_BoneToModify__IO) == 0x0002B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_WorkData) == 0x0002C0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_2_Result) == 0x0002D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_2_2_Result) == 0x0002F0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_2_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_2_BoneToModify__IO) == 0x000308, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_2_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_1_Result) == 0x000318, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_1_Value) == 0x00031C, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_2_WorkData) == 0x000320, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_2_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_1_Result) == 0x000330, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_2_1_1_Result) == 0x000350, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_2_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_1_BoneToModify__IO) == 0x000368, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_1_WorkData) == 0x000378, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_5_Result) == 0x000390, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_5_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_2_3_Result) == 0x0003B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_2_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_4_2_Result) == 0x0003C8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_4_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_2_Transform) == 0x0003E0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_2_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_2_CachedBone) == 0x000440, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_2_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_4_2_Value) == 0x000450, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_4_2_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_4_BoneToModify__IO) == 0x000470, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_4_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_3_Result) == 0x000480, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_2_Result) == 0x000488, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_2_Transform) == 0x0004A0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_2_CachedBone) == 0x000500, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_2_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_2_CachedSpace) == 0x000510, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_2_CachedSpace' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_2_Value) == 0x000520, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_2_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_3_Value) == 0x000540, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_3_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_4_WorkData) == 0x000548, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_4_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_3_Result) == 0x000560, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_2_1_2_Result) == 0x000580, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_2_1_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_4_1_1_Result) == 0x000598, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_4_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_1_Transform) == 0x0005B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_1_CachedBone) == 0x000610, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_4_1_1_Value) == 0x000620, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_4_1_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_3_BoneToModify__IO) == 0x000640, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_3_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_3_WorkData) == 0x000650, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_3_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_2_3_Result) == 0x000660, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_2_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_2_2_1_Result) == 0x000680, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_2_2_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_2_2_BoneToModify__IO) == 0x000698, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_2_2_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_1_2_Result) == 0x0006A8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_1_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_1_2_Value) == 0x0006AC, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_1_2_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_2_2_WorkData) == 0x0006B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_2_2_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_1_2_Result) == 0x0006C0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_1_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_2_1_1_1_Result) == 0x0006E0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_2_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_1_2_BoneToModify__IO) == 0x0006F8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_1_2_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_1_2_WorkData) == 0x000708, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_1_2_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_3_Result) == 0x000720, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_3_Result) == 0x000740, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_Result) == 0x000758, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_Transform) == 0x000770, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_CachedBone) == 0x0007D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_Value) == 0x0007E0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_3_BoneToModify__IO) == 0x000800, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_3_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_2_Result) == 0x000810, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_1_Result) == 0x000818, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_1_Transform) == 0x000830, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_1_CachedBone) == 0x000890, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_1_CachedSpace) == 0x0008A0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_1_CachedSpace' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_1_Value) == 0x0008B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_2_Value) == 0x0008D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_2_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_3_WorkData) == 0x0008D8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_3_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_2_Result) == 0x0008F0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_Result) == 0x000910, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_1_Result) == 0x000928, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_1_Transform) == 0x000940, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_1_CachedBone) == 0x0009A0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_1_Value) == 0x0009B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_2_BoneToModify__IO) == 0x0009D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_2_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_2_WorkData) == 0x0009E0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_2_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_2_2_Result) == 0x0009F0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_2_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_1_Result) == 0x000A10, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_2_1_BoneToModify__IO) == 0x000A28, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_2_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_1_1_Result) == 0x000A38, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_1_1_Value) == 0x000A3C, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_1_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_2_1_WorkData) == 0x000A40, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_2_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_1_1_Result) == 0x000A50, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_4_1_1_Result) == 0x000A70, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_4_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_1_1_BoneToModify__IO) == 0x000A88, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_1_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_1_1_WorkData) == 0x000A98, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_1_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_3_1_Result) == 0x000AB0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_3_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_3_Result) == 0x000AD0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_3_Result) == 0x000AE8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_3_Transform) == 0x000B00, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_3_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_3_CachedBone) == 0x000B60, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_3_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_3_Value) == 0x000B70, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_3_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_3_1_BoneToModify__IO) == 0x000B90, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_3_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_2_1_Result) == 0x000BA0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_2_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_1_2_Result) == 0x000BA8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_1_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_Transform) == 0x000BC0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_CachedBone) == 0x000C20, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_CachedSpace) == 0x000C30, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_CachedSpace' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_1_2_Value) == 0x000C40, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_1_2_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_2_1_Value) == 0x000C60, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_2_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_3_1_WorkData) == 0x000C68, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_3_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_2_1_Result) == 0x000C80, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_2_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_2_Result) == 0x000CA0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_2_Result) == 0x000CB8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_2_Transform) == 0x000CD0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_2_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_2_2_CachedBone) == 0x000D30, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_2_2_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_2_2_Value) == 0x000D40, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_2_2_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_2_1_BoneToModify__IO) == 0x000D60, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_2_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_2_1_WorkData) == 0x000D70, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_2_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_2_2_1_Result) == 0x000D80, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_2_2_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_1_Result) == 0x000DA0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_2_1_1_BoneToModify__IO) == 0x000DB8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_2_1_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_1_1_1_Result) == 0x000DC8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_1_1_1_Value) == 0x000DCC, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_1_1_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_2_1_1_WorkData) == 0x000DD0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_2_1_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_1_1_1_Result) == 0x000DE0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_2_Result) == 0x000E00, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_1_1_1_BoneToModify__IO) == 0x000E18, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_1_1_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_1_1_1_WorkData) == 0x000E28, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_1_1_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_4_1_Result) == 0x000E40, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_4_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_3_Result) == 0x000E60, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_3_Result) == 0x000E78, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_3_Transform) == 0x000E90, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_3_CachedBone) == 0x000EF0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_3_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_3_Value) == 0x000F00, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_3_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_5_1_BoneToModify__IO) == 0x000F20, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_5_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_4_1_Result) == 0x000F30, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_4_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatAbs_Result) == 0x000F34, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatAbs_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_3_1_Result) == 0x000F38, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_3_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_Transform) == 0x000F50, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_CachedBone) == 0x000FB0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_CachedSpace) == 0x000FC0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_CachedSpace' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_3_1_Value) == 0x000FD0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_3_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatAbs_Value) == 0x000FF0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatAbs_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_5_1_WorkData) == 0x000FF8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_5_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_4_1_1_Result) == 0x001010, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_4_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_1_1_Result) == 0x001030, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_1_1_Result) == 0x001048, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_1_1_Transform) == 0x001060, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_1_1_CachedBone) == 0x0010C0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_1_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_1_1_Value) == 0x0010D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_1_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_4_1_BoneToModify__IO) == 0x0010F0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_4_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_4_1_WorkData) == 0x001100, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_4_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_4_Result) == 0x001110, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_4_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_Result) == 0x001130, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_Result) == 0x001148, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_Transform) == 0x001160, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_CachedBone) == 0x0011C0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_Value) == 0x0011D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_5_BoneToModify__IO) == 0x0011F0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_5_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_4_Result) == 0x001200, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_4_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatAbs_1_Result) == 0x001204, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatAbs_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_3_Result) == 0x001208, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_3_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_Transform) == 0x001220, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_CachedBone) == 0x001280, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_CachedSpace) == 0x001290, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_CachedSpace' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_3_Value) == 0x0012A0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_3_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatAbs_1_Value) == 0x0012C0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatAbs_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_5_WorkData) == 0x0012C8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_5_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_4_1_Result) == 0x0012E0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_4_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_1_Result) == 0x001300, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_1_Result) == 0x001318, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_1_Transform) == 0x001330, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_1_CachedBone) == 0x001390, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_1_Value) == 0x0013A0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_4_BoneToModify__IO) == 0x0013C0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_4_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_4_WorkData) == 0x0013D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_4_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_4_1_1_Result) == 0x0013E0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_4_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_3_1_Result) == 0x001400, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_3_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_3_1_Result) == 0x001418, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_3_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_3_1_Transform) == 0x001430, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_3_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_3_1_CachedBone) == 0x001490, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_3_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_3_1_Value) == 0x0014A0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_3_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_5_1_1_BoneToModify__IO) == 0x0014C0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_5_1_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_4_1_1_Result) == 0x0014D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_4_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatAbs_2_Result) == 0x0014D4, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatAbs_2_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_3_1_1_Result) == 0x0014D8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_3_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_Transform) == 0x0014F0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_CachedBone) == 0x001550, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_CachedSpace) == 0x001560, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_CachedSpace' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_3_1_1_Value) == 0x001570, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_3_1_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatAbs_2_Value) == 0x001590, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatAbs_2_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_5_1_1_WorkData) == 0x001598, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_5_1_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_4_1_1_1_Result) == 0x0015B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_4_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_1_1_1_Result) == 0x0015D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_1_1_1_Result) == 0x0015E8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_Transform) == 0x001600, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_CachedBone) == 0x001660, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_1_1_1_Value) == 0x001670, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_1_1_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_4_1_1_BoneToModify__IO) == 0x001690, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_4_1_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_4_1_1_WorkData) == 0x0016A0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_4_1_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_4_1_1_1_Result) == 0x0016B0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_4_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_3_1_1_Result) == 0x0016D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_3_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_3_1_1_Result) == 0x0016E8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_3_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_3_1_1_Transform) == 0x001700, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_3_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_3_1_1_CachedBone) == 0x001760, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_3_1_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_3_1_1_Value) == 0x001770, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_3_1_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_5_1_1_1_BoneToModify__IO) == 0x001790, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_5_1_1_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatRemap_4_1_1_1_Result) == 0x0017A0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatRemap_4_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatAbs_2_1_Result) == 0x0017A4, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatAbs_2_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_3_1_1_1_Result) == 0x0017A8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_3_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_1_Transform) == 0x0017C0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_1_CachedBone) == 0x001820, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_1_CachedSpace) == 0x001830, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_1_CachedSpace' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_3_1_1_1_Value) == 0x001840, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_3_1_1_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathFloatAbs_2_1_Value) == 0x001860, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathFloatAbs_2_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_5_1_1_1_WorkData) == 0x001868, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_5_1_1_1_WorkData' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionFromEuler_1_4_1_1_1_1_Result) == 0x001880, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionFromEuler_1_4_1_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathVectorAdd_1_1_1_1_Result) == 0x0018A0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathVectorAdd_1_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_1_1_1_1_Result) == 0x0018B8, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_1_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_1_Transform) == 0x0018D0, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_1_CachedBone) == 0x001930, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_1_CachedBone' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___MathQuaternionToEuler_4_1_1_1_1_Value) == 0x001940, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___MathQuaternionToEuler_4_1_1_1_1_Value' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_4_1_1_1_BoneToModify__IO) == 0x001960, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_4_1_1_1_BoneToModify__IO' has a wrong offset!");
static_assert(offsetof(FPropertyBag_30ea71a419490e5e, RigVMModel___ModifyBoneTransforms_1_4_1_1_1_WorkData) == 0x001970, "Member 'FPropertyBag_30ea71a419490e5e::RigVMModel___ModifyBoneTransforms_1_4_1_1_1_WorkData' has a wrong offset!");

// PropertyBag Transient.PropertyBag_14174528399cda1
// 0x0020 (0x0020 - 0x0000)
struct FPropertyBag_14174528399cda1 final
{
public:
	class USoundBase*                             HoldPressedSound;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldSound;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldReleasedSound;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldCompletedSound;                                // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_14174528399cda1) == 0x000008, "Wrong alignment on FPropertyBag_14174528399cda1");
static_assert(sizeof(FPropertyBag_14174528399cda1) == 0x000020, "Wrong size on FPropertyBag_14174528399cda1");
static_assert(offsetof(FPropertyBag_14174528399cda1, HoldPressedSound) == 0x000000, "Member 'FPropertyBag_14174528399cda1::HoldPressedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_14174528399cda1, HoldSound) == 0x000008, "Member 'FPropertyBag_14174528399cda1::HoldSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_14174528399cda1, HoldReleasedSound) == 0x000010, "Member 'FPropertyBag_14174528399cda1::HoldReleasedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_14174528399cda1, HoldCompletedSound) == 0x000018, "Member 'FPropertyBag_14174528399cda1::HoldCompletedSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_5122256834cb8e0b
// 0x0010 (0x0010 - 0x0000)
struct FPropertyBag_5122256834cb8e0b final
{
public:
	class USoundBase*                             PressedSound;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoveredSound;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_5122256834cb8e0b) == 0x000008, "Wrong alignment on FPropertyBag_5122256834cb8e0b");
static_assert(sizeof(FPropertyBag_5122256834cb8e0b) == 0x000010, "Wrong size on FPropertyBag_5122256834cb8e0b");
static_assert(offsetof(FPropertyBag_5122256834cb8e0b, PressedSound) == 0x000000, "Member 'FPropertyBag_5122256834cb8e0b::PressedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_5122256834cb8e0b, HoveredSound) == 0x000008, "Member 'FPropertyBag_5122256834cb8e0b::HoveredSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_929813788426c2eb
// 0x0030 (0x0030 - 0x0000)
struct FPropertyBag_929813788426c2eb final
{
public:
	class USoundBase*                             HoveredSound;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PressedSound;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldPressedSound;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldSound;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldReleasedSound;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldCompletedSound;                                // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_929813788426c2eb) == 0x000008, "Wrong alignment on FPropertyBag_929813788426c2eb");
static_assert(sizeof(FPropertyBag_929813788426c2eb) == 0x000030, "Wrong size on FPropertyBag_929813788426c2eb");
static_assert(offsetof(FPropertyBag_929813788426c2eb, HoveredSound) == 0x000000, "Member 'FPropertyBag_929813788426c2eb::HoveredSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_929813788426c2eb, PressedSound) == 0x000008, "Member 'FPropertyBag_929813788426c2eb::PressedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_929813788426c2eb, HoldPressedSound) == 0x000010, "Member 'FPropertyBag_929813788426c2eb::HoldPressedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_929813788426c2eb, HoldSound) == 0x000018, "Member 'FPropertyBag_929813788426c2eb::HoldSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_929813788426c2eb, HoldReleasedSound) == 0x000020, "Member 'FPropertyBag_929813788426c2eb::HoldReleasedSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_929813788426c2eb, HoldCompletedSound) == 0x000028, "Member 'FPropertyBag_929813788426c2eb::HoldCompletedSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_4ba180350858ba03
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_4ba180350858ba03 final
{
public:
	class USoundBase*                             ListEntryHoveredSound;                             // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_4ba180350858ba03) == 0x000008, "Wrong alignment on FPropertyBag_4ba180350858ba03");
static_assert(sizeof(FPropertyBag_4ba180350858ba03) == 0x000008, "Wrong size on FPropertyBag_4ba180350858ba03");
static_assert(offsetof(FPropertyBag_4ba180350858ba03, ListEntryHoveredSound) == 0x000000, "Member 'FPropertyBag_4ba180350858ba03::ListEntryHoveredSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_f48b911d855a0d13
// 0x0030 (0x0030 - 0x0000)
struct FPropertyBag_f48b911d855a0d13 final
{
public:
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x0000(0x0018)(Edit, NoDestructor)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x0018(0x0018)(Edit, NoDestructor)
};
static_assert(alignof(FPropertyBag_f48b911d855a0d13) == 0x000008, "Wrong alignment on FPropertyBag_f48b911d855a0d13");
static_assert(sizeof(FPropertyBag_f48b911d855a0d13) == 0x000030, "Wrong size on FPropertyBag_f48b911d855a0d13");
static_assert(offsetof(FPropertyBag_f48b911d855a0d13, PressedSlateSoundOverride) == 0x000000, "Member 'FPropertyBag_f48b911d855a0d13::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(FPropertyBag_f48b911d855a0d13, HoveredSlateSoundOverride) == 0x000018, "Member 'FPropertyBag_f48b911d855a0d13::HoveredSlateSoundOverride' has a wrong offset!");

// PropertyBag Transient.PropertyBag_23958818a1067ba1
// 0x0020 (0x0020 - 0x0000)
struct FPropertyBag_23958818a1067ba1 final
{
public:
	class USoundBase*                             Press_Sound;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldSound;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ReleaseSound;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CompleteSound;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_23958818a1067ba1) == 0x000008, "Wrong alignment on FPropertyBag_23958818a1067ba1");
static_assert(sizeof(FPropertyBag_23958818a1067ba1) == 0x000020, "Wrong size on FPropertyBag_23958818a1067ba1");
static_assert(offsetof(FPropertyBag_23958818a1067ba1, Press_Sound) == 0x000000, "Member 'FPropertyBag_23958818a1067ba1::Press_Sound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_23958818a1067ba1, HoldSound) == 0x000008, "Member 'FPropertyBag_23958818a1067ba1::HoldSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_23958818a1067ba1, ReleaseSound) == 0x000010, "Member 'FPropertyBag_23958818a1067ba1::ReleaseSound' has a wrong offset!");
static_assert(offsetof(FPropertyBag_23958818a1067ba1, CompleteSound) == 0x000018, "Member 'FPropertyBag_23958818a1067ba1::CompleteSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_69be88ec0836c8a2
// 0x0008 (0x0008 - 0x0000)
struct FPropertyBag_69be88ec0836c8a2 final
{
public:
	class USoundBase*                             BattlePassIntroWhooshSound;                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_69be88ec0836c8a2) == 0x000008, "Wrong alignment on FPropertyBag_69be88ec0836c8a2");
static_assert(sizeof(FPropertyBag_69be88ec0836c8a2) == 0x000008, "Wrong size on FPropertyBag_69be88ec0836c8a2");
static_assert(offsetof(FPropertyBag_69be88ec0836c8a2, BattlePassIntroWhooshSound) == 0x000000, "Member 'FPropertyBag_69be88ec0836c8a2::BattlePassIntroWhooshSound' has a wrong offset!");

// PropertyBag Transient.PropertyBag_9d0d00916576946b
// 0x0030 (0x0030 - 0x0000)
struct FPropertyBag_9d0d00916576946b final
{
public:
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x0000(0x0018)(Edit, NoDestructor)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x0018(0x0018)(Edit, NoDestructor)
};
static_assert(alignof(FPropertyBag_9d0d00916576946b) == 0x000008, "Wrong alignment on FPropertyBag_9d0d00916576946b");
static_assert(sizeof(FPropertyBag_9d0d00916576946b) == 0x000030, "Wrong size on FPropertyBag_9d0d00916576946b");
static_assert(offsetof(FPropertyBag_9d0d00916576946b, PressedSlateSoundOverride) == 0x000000, "Member 'FPropertyBag_9d0d00916576946b::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(FPropertyBag_9d0d00916576946b, HoveredSlateSoundOverride) == 0x000018, "Member 'FPropertyBag_9d0d00916576946b::HoveredSlateSoundOverride' has a wrong offset!");

// PropertyBag Transient.PropertyBag_64d6d0c93b00f98b
// 0x03E0 (0x03E0 - 0x0000)
struct FPropertyBag_64d6d0c93b00f98b final
{
public:
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_BoneToModify__Const; // 0x0000(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_2_4_Bone__Const; // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___RigUnit_GetInitialBoneTransform_2_4_Space__Const; // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEulerRotationOrder                           RigVMModel___MathQuaternionToEuler_4_2_4_RotationOrder__Const; // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_B__Const;         // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_Bone__Const; // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_Space__Const; // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_SourceMinimum__Const;  // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_SourceMaximum__Const;  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_TargetMinimum__Const;  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_TargetMaximum__Const;  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___MathFloatRemap_bClamp__Const;         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EControlRigModifyBoneMode                     RigVMModel___ModifyBoneTransforms_Mode__Const;     // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_BoneToModify__Const; // 0x0050(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_Bone__Const; // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_1_B__Const;       // 0x0068(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_2_BoneToModify__Const; // 0x0080(0x0010)(Edit)
	float                                         RigVMModel___MathFloatRemap_1_SourceMinimum__Const; // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_1_SourceMaximum__Const; // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_1_BoneToModify__Const; // 0x0098(0x0010)(Edit)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_2_1_1_B__Const;     // 0x00A8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_4_BoneToModify__Const; // 0x00C0(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_2_4_2_Bone__Const; // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_2_Bone__Const; // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_2_Space__Const; // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_3_BoneToModify__Const; // 0x00E0(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_1_Bone__Const; // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_2_2_BoneToModify__Const; // 0x00F8(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_1_2_BoneToModify__Const; // 0x0108(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_3_BoneToModify__Const; // 0x0118(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_2_Bone__Const; // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathVectorAdd_2_4_3_B__Const;         // 0x0130(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_1_Bone__Const; // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_1_Space__Const; // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_2_SourceMinimum__Const; // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_2_SourceMaximum__Const; // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_2_BoneToModify__Const; // 0x0158(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_2_1_Bone__Const; // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_2_1_BoneToModify__Const; // 0x0170(0x0010)(Edit)
	struct FVector                                RigVMModel___MathVectorAdd_2_4_1_B__Const;         // 0x0180(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_1_1_SourceMinimum__Const; // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_1_1_SourceMaximum__Const; // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_1_1_BoneToModify__Const; // 0x01A0(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_3_1_BoneToModify__Const; // 0x01B0(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_2_3_Bone__Const; // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_Bone__Const; // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_Space__Const; // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_2_1_BoneToModify__Const; // 0x01D0(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_2_2_Bone__Const; // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_2_1_1_BoneToModify__Const; // 0x01E8(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_1_1_1_BoneToModify__Const; // 0x01F8(0x0010)(Edit)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_5_1_BoneToModify__Const; // 0x0208(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_3_Bone__Const; // 0x0218(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_Space__Const; // 0x021C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_4_1_SourceMinimum__Const; // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_4_1_SourceMaximum__Const; // 0x0224(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_4_1_BoneToModify__Const; // 0x0228(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_1_1_Bone__Const; // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_5_BoneToModify__Const; // 0x0240(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_Bone__Const; // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathVectorAdd_B__Const;               // 0x0258(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_4_SourceMinimum__Const; // 0x0270(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_4_SourceMaximum__Const; // 0x0274(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_4_BoneToModify__Const; // 0x0278(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_1_Bone__Const; // 0x0288(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathVectorAdd_1_B__Const;             // 0x0290(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_5_1_1_BoneToModify__Const; // 0x02A8(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_3_1_Bone__Const; // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathVectorAdd_3_1_B__Const;           // 0x02C0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_Space__Const; // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_4_1_1_SourceMinimum__Const; // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_4_1_1_SourceMaximum__Const; // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_4_1_1_BoneToModify__Const; // 0x02E8(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_Bone__Const; // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathVectorAdd_1_1_1_B__Const;         // 0x0300(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_5_1_1_1_BoneToModify__Const; // 0x0318(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_3_1_1_Bone__Const; // 0x0328(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_4_1_1_1_SourceMinimum__Const; // 0x032C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___MathFloatRemap_4_1_1_1_SourceMaximum__Const; // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> RigVMModel___ModifyBoneTransforms_1_4_1_1_1_BoneToModify__Const; // 0x0338(0x0010)(Edit)
	class FName                                   RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_1_Bone__Const; // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___MathVectorAdd_1_1_1_1_B__Const;       // 0x0350(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DebugHierarchy_1_Scale__Const;        // 0x0368(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RigVMModel___DebugHierarchy_1_Color__Const;        // 0x036C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DebugHierarchy_1_Thickness__Const;    // 0x037C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___DebugHierarchy_1_WorldOffset__Const;  // 0x0380(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FPropertyBag_64d6d0c93b00f98b) == 0x000010, "Wrong alignment on FPropertyBag_64d6d0c93b00f98b");
static_assert(sizeof(FPropertyBag_64d6d0c93b00f98b) == 0x0003E0, "Wrong size on FPropertyBag_64d6d0c93b00f98b");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_BoneToModify__Const) == 0x000000, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_Bone__Const) == 0x000010, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_Space__Const) == 0x000014, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_Space__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathQuaternionToEuler_4_2_4_RotationOrder__Const) == 0x000015, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathQuaternionToEuler_4_2_4_RotationOrder__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_2_4_2_B__Const) == 0x000018, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_2_4_2_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_Bone__Const) == 0x000030, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_Space__Const) == 0x000034, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_SourceMinimum__Const) == 0x000038, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_SourceMaximum__Const) == 0x00003C, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_TargetMinimum__Const) == 0x000040, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_TargetMinimum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_TargetMaximum__Const) == 0x000044, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_TargetMaximum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_bClamp__Const) == 0x000048, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_bClamp__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_Mode__Const) == 0x000049, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_Mode__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_BoneToModify__Const) == 0x000050, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_Bone__Const) == 0x000060, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_2_4_2_1_B__Const) == 0x000068, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_2_4_2_1_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_2_BoneToModify__Const) == 0x000080, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_2_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_1_SourceMinimum__Const) == 0x000090, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_1_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_1_SourceMaximum__Const) == 0x000094, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_1_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_1_BoneToModify__Const) == 0x000098, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_2_4_2_1_1_B__Const) == 0x0000A8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_2_4_2_1_1_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_4_BoneToModify__Const) == 0x0000C0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_4_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_2_Bone__Const) == 0x0000D0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_2_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_2_Bone__Const) == 0x0000D4, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_2_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_2_Space__Const) == 0x0000D8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_2_Space__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_3_BoneToModify__Const) == 0x0000E0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_3_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_1_Bone__Const) == 0x0000F0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_2_4_1_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_2_2_BoneToModify__Const) == 0x0000F8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_2_2_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_1_2_BoneToModify__Const) == 0x000108, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_1_2_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_3_BoneToModify__Const) == 0x000118, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_3_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_2_Bone__Const) == 0x000128, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_2_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_2_4_3_B__Const) == 0x000130, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_2_4_3_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_1_Bone__Const) == 0x000148, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_1_Space__Const) == 0x00014C, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_1_Space__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_2_SourceMinimum__Const) == 0x000150, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_2_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_2_SourceMaximum__Const) == 0x000154, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_2_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_2_BoneToModify__Const) == 0x000158, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_2_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_2_1_Bone__Const) == 0x000168, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_2_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_2_1_BoneToModify__Const) == 0x000170, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_2_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_2_4_1_B__Const) == 0x000180, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_2_4_1_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_1_1_SourceMinimum__Const) == 0x000198, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_1_1_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_1_1_SourceMaximum__Const) == 0x00019C, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_1_1_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_1_1_BoneToModify__Const) == 0x0001A0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_1_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_3_1_BoneToModify__Const) == 0x0001B0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_3_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_2_3_Bone__Const) == 0x0001C0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_2_3_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_Bone__Const) == 0x0001C4, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_Space__Const) == 0x0001C8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_1_1_Space__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_2_1_BoneToModify__Const) == 0x0001D0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_2_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_2_2_Bone__Const) == 0x0001E0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_2_2_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_2_1_1_BoneToModify__Const) == 0x0001E8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_2_1_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_1_1_1_BoneToModify__Const) == 0x0001F8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_1_1_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_5_1_BoneToModify__Const) == 0x000208, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_5_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_3_Bone__Const) == 0x000218, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_3_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_Space__Const) == 0x00021C, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_Space__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_4_1_SourceMinimum__Const) == 0x000220, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_4_1_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_4_1_SourceMaximum__Const) == 0x000224, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_4_1_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_4_1_BoneToModify__Const) == 0x000228, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_4_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_1_1_Bone__Const) == 0x000238, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_1_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_5_BoneToModify__Const) == 0x000240, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_5_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_Bone__Const) == 0x000250, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_B__Const) == 0x000258, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_4_SourceMinimum__Const) == 0x000270, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_4_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_4_SourceMaximum__Const) == 0x000274, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_4_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_4_BoneToModify__Const) == 0x000278, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_4_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_1_Bone__Const) == 0x000288, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_1_B__Const) == 0x000290, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_1_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_5_1_1_BoneToModify__Const) == 0x0002A8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_5_1_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_3_1_Bone__Const) == 0x0002B8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_3_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_3_1_B__Const) == 0x0002C0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_3_1_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_Space__Const) == 0x0002D8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetRelativeBoneTransform_3_1_1_Space__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_4_1_1_SourceMinimum__Const) == 0x0002DC, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_4_1_1_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_4_1_1_SourceMaximum__Const) == 0x0002E0, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_4_1_1_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_4_1_1_BoneToModify__Const) == 0x0002E8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_4_1_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_Bone__Const) == 0x0002F8, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_1_1_1_B__Const) == 0x000300, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_1_1_1_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_5_1_1_1_BoneToModify__Const) == 0x000318, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_5_1_1_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_3_1_1_Bone__Const) == 0x000328, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_3_1_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_4_1_1_1_SourceMinimum__Const) == 0x00032C, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_4_1_1_1_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathFloatRemap_4_1_1_1_SourceMaximum__Const) == 0x000330, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathFloatRemap_4_1_1_1_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___ModifyBoneTransforms_1_4_1_1_1_BoneToModify__Const) == 0x000338, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___ModifyBoneTransforms_1_4_1_1_1_BoneToModify__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_1_Bone__Const) == 0x000348, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___RigUnit_GetInitialBoneTransform_1_1_1_1_Bone__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___MathVectorAdd_1_1_1_1_B__Const) == 0x000350, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___MathVectorAdd_1_1_1_1_B__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___DebugHierarchy_1_Scale__Const) == 0x000368, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___DebugHierarchy_1_Scale__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___DebugHierarchy_1_Color__Const) == 0x00036C, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___DebugHierarchy_1_Color__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___DebugHierarchy_1_Thickness__Const) == 0x00037C, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___DebugHierarchy_1_Thickness__Const' has a wrong offset!");
static_assert(offsetof(FPropertyBag_64d6d0c93b00f98b, RigVMModel___DebugHierarchy_1_WorldOffset__Const) == 0x000380, "Member 'FPropertyBag_64d6d0c93b00f98b::RigVMModel___DebugHierarchy_1_WorldOffset__Const' has a wrong offset!");

}

