#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CentralPicnicNativeRuntime

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct CentralPicnicNativeRuntime.CentralPicnicMeshNetworkMetadata
// 0x0018 (0x0018 - 0x0000)
struct FCentralPicnicMeshNetworkMetadata final
{
public:
	int64                                         CurrentHealth;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DefaultHealth;                                     // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageModifier;                                    // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasInitialized;                                   // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCompleted;                                     // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCentralPicnicMeshNetworkMetadata) == 0x000008, "Wrong alignment on FCentralPicnicMeshNetworkMetadata");
static_assert(sizeof(FCentralPicnicMeshNetworkMetadata) == 0x000018, "Wrong size on FCentralPicnicMeshNetworkMetadata");
static_assert(offsetof(FCentralPicnicMeshNetworkMetadata, CurrentHealth) == 0x000000, "Member 'FCentralPicnicMeshNetworkMetadata::CurrentHealth' has a wrong offset!");
static_assert(offsetof(FCentralPicnicMeshNetworkMetadata, DefaultHealth) == 0x000008, "Member 'FCentralPicnicMeshNetworkMetadata::DefaultHealth' has a wrong offset!");
static_assert(offsetof(FCentralPicnicMeshNetworkMetadata, DamageModifier) == 0x000010, "Member 'FCentralPicnicMeshNetworkMetadata::DamageModifier' has a wrong offset!");
static_assert(offsetof(FCentralPicnicMeshNetworkMetadata, bHasInitialized) == 0x000014, "Member 'FCentralPicnicMeshNetworkMetadata::bHasInitialized' has a wrong offset!");
static_assert(offsetof(FCentralPicnicMeshNetworkMetadata, bHasCompleted) == 0x000015, "Member 'FCentralPicnicMeshNetworkMetadata::bHasCompleted' has a wrong offset!");

// ScriptStruct CentralPicnicNativeRuntime.CentralPicnicEvent_HealthUpdated
// 0x0008 (0x0008 - 0x0000)
struct FCentralPicnicEvent_HealthUpdated final
{
public:
	int64                                         CurrentHealth;                                     // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCentralPicnicEvent_HealthUpdated) == 0x000008, "Wrong alignment on FCentralPicnicEvent_HealthUpdated");
static_assert(sizeof(FCentralPicnicEvent_HealthUpdated) == 0x000008, "Wrong size on FCentralPicnicEvent_HealthUpdated");
static_assert(offsetof(FCentralPicnicEvent_HealthUpdated, CurrentHealth) == 0x000000, "Member 'FCentralPicnicEvent_HealthUpdated::CurrentHealth' has a wrong offset!");

// ScriptStruct CentralPicnicNativeRuntime.CentralPicnicEvent_DefaultHealthUpdated
// 0x0008 (0x0008 - 0x0000)
struct FCentralPicnicEvent_DefaultHealthUpdated final
{
public:
	int64                                         CurrentDefaultHealth;                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCentralPicnicEvent_DefaultHealthUpdated) == 0x000008, "Wrong alignment on FCentralPicnicEvent_DefaultHealthUpdated");
static_assert(sizeof(FCentralPicnicEvent_DefaultHealthUpdated) == 0x000008, "Wrong size on FCentralPicnicEvent_DefaultHealthUpdated");
static_assert(offsetof(FCentralPicnicEvent_DefaultHealthUpdated, CurrentDefaultHealth) == 0x000000, "Member 'FCentralPicnicEvent_DefaultHealthUpdated::CurrentDefaultHealth' has a wrong offset!");

// ScriptStruct CentralPicnicNativeRuntime.CentralPicnicEvent_DamageModifierUpdated
// 0x0004 (0x0004 - 0x0000)
struct FCentralPicnicEvent_DamageModifierUpdated final
{
public:
	float                                         CurrentDamageModifier;                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCentralPicnicEvent_DamageModifierUpdated) == 0x000004, "Wrong alignment on FCentralPicnicEvent_DamageModifierUpdated");
static_assert(sizeof(FCentralPicnicEvent_DamageModifierUpdated) == 0x000004, "Wrong size on FCentralPicnicEvent_DamageModifierUpdated");
static_assert(offsetof(FCentralPicnicEvent_DamageModifierUpdated, CurrentDamageModifier) == 0x000000, "Member 'FCentralPicnicEvent_DamageModifierUpdated::CurrentDamageModifier' has a wrong offset!");

// ScriptStruct CentralPicnicNativeRuntime.CentralPicnicEvent_ChainsDamaged
// 0x0008 (0x0008 - 0x0000)
struct FCentralPicnicEvent_ChainsDamaged final
{
public:
	int64                                         DamageDealt;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCentralPicnicEvent_ChainsDamaged) == 0x000008, "Wrong alignment on FCentralPicnicEvent_ChainsDamaged");
static_assert(sizeof(FCentralPicnicEvent_ChainsDamaged) == 0x000008, "Wrong size on FCentralPicnicEvent_ChainsDamaged");
static_assert(offsetof(FCentralPicnicEvent_ChainsDamaged, DamageDealt) == 0x000000, "Member 'FCentralPicnicEvent_ChainsDamaged::DamageDealt' has a wrong offset!");

}

