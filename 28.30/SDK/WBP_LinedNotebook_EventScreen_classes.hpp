#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LinedNotebook_EventScreen

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EventScreenBase_structs.hpp"
#include "EventScreenBase_classes.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_LinedNotebook_EventScreen.WBP_LinedNotebook_EventScreen_C
// 0x02A0 (0x0DF8 - 0x0B58)
class UWBP_LinedNotebook_EventScreen_C final : public UFortEventScreenBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B58(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortItemVM*                            DisplayItemVM;                                     // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, Transient, DuplicateTransient, RepSkip, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_BGBuy;                                        // 0x0B68(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_BGRewardPreview;                              // 0x0B70(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_MiniEventAurora;                              // 0x0B78(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_LegalIn;                                      // 0x0B80(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_MainToPurchaseRewards;                        // 0x0B88(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_PurchaseRewardsToMain;                        // 0x0B90(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_MainIn;                                       // 0x0B98(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_MainOut;                                      // 0x0BA0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_LoadError;                                    // 0x0BA8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_RewardPreview;                                // 0x0BB0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Reveal;                                       // 0x0BB8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBonusInfoMiniTag_C*                    BonusInfoMiniTag;                                  // 0x0BC0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BorderMobile_ButtonNext;                           // 0x0BC8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BorderMobile_ButtonPrevious;                       // 0x0BD0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_UIKit_Button_Loud_C*               Button_ShowInItemShop_Old;                         // 0x0BD8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CaptureForPostBufferUpdate_C*      CaptureForPostBufferUpdate;                        // 0x0BE0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Layout_LandingScreen;                              // 0x0BE8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Layout_RewardPreview;                              // 0x0BF0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             NamedSlot_ItemDetails_Collection;                  // 0x0BF8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             NamedSlot_RequiredCurrency;                        // 0x0C00(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OV_Mobile_ButtonPanel;                             // 0x0C08(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Camera;                                    // 0x0C10(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Panel_LandingScreen;                               // 0x0C18(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Panel_RewardPreview;                               // 0x0C20(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Panel_Shared;                                      // 0x0C28(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_LinedNotebook_RequiredCurrency_Preview_C* RequiredCurrency;                                  // 0x0C30(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonRichTextBlock*                   RichText_Large;                                    // 0x0C38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonRichTextBlock*                   RichText_VariantCyclingIndicator;                  // 0x0C40(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USafeZone*                              SafeZone_All;                                      // 0x0C48(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_0;                                        // 0x0C50(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_BottomRight;                                  // 0x0C58(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_BottomSpan;                                   // 0x0C60(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_Center;                                       // 0x0C68(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_InspectItem;                                  // 0x0C70(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_MiddleLeft;                                   // 0x0C78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_MiddleLeft_1;                                 // 0x0C80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_PremiumUpsell;                                // 0x0C88(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_RewardDetails;                                // 0x0C90(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_TopLeft;                                      // 0x0C98(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_TopLeft_1;                                    // 0x0CA0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             Slot_TopRight;                                     // 0x0CA8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer_AspectRatio_2;                              // 0x0CB0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_Legal;                                        // 0x0CB8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_Glider;                                         // 0x0CC0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_LinedNotebook_Collection_C*        WBP_Collection;                                    // 0x0CC8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_EventDetails_C*                    WBP_EventDetails;                                  // 0x0CD0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_LinedNotebook_Rewards_C*           WBP_EventRewards;                                  // 0x0CD8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_LinedNotebook_Frame_C*             WBP_Frame;                                         // 0x0CE0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_LinedNotebook_Collection_RewardPreview_C* WBP_PlotTwist_Collection_RewardPreview;            // 0x0CE8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_LinedNotebook_KeyArt_C*            WBP_PlotTwist_KeyArt;                              // 0x0CF0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_UIKit_ItemDescription_MPL_C*       WBP_UIKit_ItemDescription_MPL;                     // 0x0CF8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_UpsellFrame_C*                     WBP_UpsellFrame;                                   // 0x0D00(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_LinedNotebook_RewardDetails_C*     WBP_Vaultbreakers_RewardDetails;                   // 0x0D08(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_EventDetails;                       // 0x0D10(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsOnJumpsuitUpsell;                                // 0x0D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D19[0x7];                                      // 0x0D19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             GliderAppearSound;                                 // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   VariantCounterFormat;                              // 0x0D28(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsCurrentRewardPreviewFree;                        // 0x0D40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPreviewingTrackRewards;                          // 0x0D41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEventScreenView                              CurrentScreenView_Previous;                        // 0x0D42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEventScreenView                              CurrentScreenView_New;                             // 0x0D43(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEventScreenRewardPreviewType                 PreviousRewardPreviewType;                         // 0x0D44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D45[0x3];                                      // 0x0D45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             UpgradeToMainAppearSound;                          // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             UpgradeToRewardAppearSound;                        // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MainToPurchaseLevelsSound;                         // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             UpgradeToUpgradeRewardSound;                       // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RewardCloseSound;                                  // 0x0D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPaidTrack;                                       // 0x0D70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugActivateMiniEvent;                            // 0x0D71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AuroraColorOn;                                     // 0x0D72(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D73[0x1];                                      // 0x0D73(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                VBGliderPaddingDefault;                            // 0x0D74(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMargin                                VBGliderPaddingMobile;                             // 0x0D84(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMargin                                BorderButtonNextPaddingDefault;                    // 0x0D94(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMargin                                BorderButtonNextPaddingMobile;                     // 0x0DA4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMargin                                BorderButtonPreviousPaddingDefault;                // 0x0DB4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FMargin                                BorderButtonPreviousPaddingMobile;                 // 0x0DC4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD4[0x4];                                      // 0x0DD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MobileViewportRatio;                               // 0x0DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LerpBGBuy;                                         // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        LerpBGRewardPreview;                               // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        LerpBGVaultColor;                                  // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void Adjust_Camera_Framing(class UFortAccountItemDefinition* Item);
	void BindButtonPresses();
	void BP_OnActivated();
	void ClickedPreviewUpsell(class UCommonButtonBase* Button);
	void DebugSwitchEvent();
	void EnterLandingScreen();
	void EventLerpBuy(double Lerp);
	void EventLerpRewardPreview();
	void ExecuteUbergraph_WBP_LinedNotebook_EventScreen(int32 EntryPoint);
	void GrowUpsellConnectionLine();
	void HandleAuroraColor(EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
	void HandleBGBuy(EUMGSequencePlayMode PlayMode);
	void HandleBGRewardPreview(EUMGSequencePlayMode PlayMode);
	void HandleColors(bool ToPaidColor);
	void HandleErrorLoad();
	void HandleLegalAnim(EUMGSequencePlayMode PlayMode);
	void HandleMainAnim(EUMGSequencePlayMode PlayMode);
	void HandleMainToSecondaryColor(EUMGSequencePlayMode PlayMode);
	void HandleRewardPreview(EUMGSequencePlayMode PlayMode);
	void HandleSafeZonePadding();
	void HandleVariantCyclingUpdate(int32 Current_Index, int32 Num_Variants);
	void HideRewardTrack(bool Hide);
	void InitializeEventScreenData();
	bool IsMiniEventLive();
	void LerpEventVaultColor();
	void MainToChaseReward(EUMGSequencePlayMode PlayMode);
	void MainToMoreInfo(EUMGSequencePlayMode PlayMode);
	void MainToPreviewReward(EUMGSequencePlayMode PlayMode);
	void MainToPurchaseLevels(EUMGSequencePlayMode PlayMode);
	void MainToUpgrade(EUMGSequencePlayMode PlayMode);
	void MainToUpgradeReward(EUMGSequencePlayMode PlayMode);
	void OnCalendarEventEnded(const class FString& EventName);
	void OnCalendarEventStarted(const class FString& EventName);
	void OnInitialized();
	void OnPreviewActionButtonUpdated(const class FText& RowDisplayName, class UCommonButtonBase* Button);
	void OnRewardPreviewItemChanged(const class UFortAccountItemDefinition* Item, const bool bFreeTrack);
	void OnRewardTrackReady();
	void OnScreenViewChanged(const EEventScreenView PrevScreenView, const EEventScreenView NewScreenView);
	void OnSetBonusInfo(const struct FBonusInfoMiniTagData& BonusInfo);
	void PreConstruct(bool IsDesignTime);
	void RegisterLayoutSlots();
	void ResetConnectionLine();
	void ReverseAnimMode(EUMGSequencePlayMode PlayMode, EUMGSequencePlayMode* OutPlayMode);
	void SequenceEvent__ENTRYPOINTWBP_LinedNotebook_EventScreen();
	void SequenceEvent__ENTRYPOINTWBP_LinedNotebook_EventScreen_0();
	void SequenceEvent__ENTRYPOINTWBP_LinedNotebook_EventScreen_1();
	void SequenceEvent__ENTRYPOINTWBP_LinedNotebook_EventScreen_2();
	void SequenceEvent__ENTRYPOINTWBP_LinedNotebook_EventScreen_3();
	void SequenceEvent__ENTRYPOINTWBP_LinedNotebook_EventScreen_4();
	void SetDisplayItemVM(class UFortItemVM* ViewModel);
	void SetRewardTrackLegal(const class FText& LegalText);
	void Setup_Layout_Slots();
	void SetupEventIsLive();
	void ShrinkUpsellConnectionLine();
	void UpdatePreviewActionButton(const class FText& InText, class UCommonButtonBase* ButtonInstance);
	void UpdateTextPositions();
	void UpdateVariantCounter(int32 CurrentVariantIndex, int32 TotalNumVariants);
	void UpgradeToUpgradeReward(EUMGSequencePlayMode PlayMode);
	void ViewQuestsFocusChanged(bool HasFocus);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_LinedNotebook_EventScreen_C">();
	}
	static class UWBP_LinedNotebook_EventScreen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_LinedNotebook_EventScreen_C>();
	}
};
static_assert(alignof(UWBP_LinedNotebook_EventScreen_C) == 0x000008, "Wrong alignment on UWBP_LinedNotebook_EventScreen_C");
static_assert(sizeof(UWBP_LinedNotebook_EventScreen_C) == 0x000DF8, "Wrong size on UWBP_LinedNotebook_EventScreen_C");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, UberGraphFrame) == 0x000B58, "Member 'UWBP_LinedNotebook_EventScreen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, DisplayItemVM) == 0x000B60, "Member 'UWBP_LinedNotebook_EventScreen_C::DisplayItemVM' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_BGBuy) == 0x000B68, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_BGBuy' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_BGRewardPreview) == 0x000B70, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_BGRewardPreview' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_MiniEventAurora) == 0x000B78, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_MiniEventAurora' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_LegalIn) == 0x000B80, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_LegalIn' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_MainToPurchaseRewards) == 0x000B88, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_MainToPurchaseRewards' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_PurchaseRewardsToMain) == 0x000B90, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_PurchaseRewardsToMain' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_MainIn) == 0x000B98, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_MainIn' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_MainOut) == 0x000BA0, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_MainOut' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_LoadError) == 0x000BA8, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_LoadError' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_RewardPreview) == 0x000BB0, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_RewardPreview' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Anim_Reveal) == 0x000BB8, "Member 'UWBP_LinedNotebook_EventScreen_C::Anim_Reveal' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, BonusInfoMiniTag) == 0x000BC0, "Member 'UWBP_LinedNotebook_EventScreen_C::BonusInfoMiniTag' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, BorderMobile_ButtonNext) == 0x000BC8, "Member 'UWBP_LinedNotebook_EventScreen_C::BorderMobile_ButtonNext' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, BorderMobile_ButtonPrevious) == 0x000BD0, "Member 'UWBP_LinedNotebook_EventScreen_C::BorderMobile_ButtonPrevious' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Button_ShowInItemShop_Old) == 0x000BD8, "Member 'UWBP_LinedNotebook_EventScreen_C::Button_ShowInItemShop_Old' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, CaptureForPostBufferUpdate) == 0x000BE0, "Member 'UWBP_LinedNotebook_EventScreen_C::CaptureForPostBufferUpdate' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Layout_LandingScreen) == 0x000BE8, "Member 'UWBP_LinedNotebook_EventScreen_C::Layout_LandingScreen' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Layout_RewardPreview) == 0x000BF0, "Member 'UWBP_LinedNotebook_EventScreen_C::Layout_RewardPreview' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, NamedSlot_ItemDetails_Collection) == 0x000BF8, "Member 'UWBP_LinedNotebook_EventScreen_C::NamedSlot_ItemDetails_Collection' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, NamedSlot_RequiredCurrency) == 0x000C00, "Member 'UWBP_LinedNotebook_EventScreen_C::NamedSlot_RequiredCurrency' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, OV_Mobile_ButtonPanel) == 0x000C08, "Member 'UWBP_LinedNotebook_EventScreen_C::OV_Mobile_ButtonPanel' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Overlay_Camera) == 0x000C10, "Member 'UWBP_LinedNotebook_EventScreen_C::Overlay_Camera' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Panel_LandingScreen) == 0x000C18, "Member 'UWBP_LinedNotebook_EventScreen_C::Panel_LandingScreen' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Panel_RewardPreview) == 0x000C20, "Member 'UWBP_LinedNotebook_EventScreen_C::Panel_RewardPreview' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Panel_Shared) == 0x000C28, "Member 'UWBP_LinedNotebook_EventScreen_C::Panel_Shared' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, RequiredCurrency) == 0x000C30, "Member 'UWBP_LinedNotebook_EventScreen_C::RequiredCurrency' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, RichText_Large) == 0x000C38, "Member 'UWBP_LinedNotebook_EventScreen_C::RichText_Large' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, RichText_VariantCyclingIndicator) == 0x000C40, "Member 'UWBP_LinedNotebook_EventScreen_C::RichText_VariantCyclingIndicator' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, SafeZone_All) == 0x000C48, "Member 'UWBP_LinedNotebook_EventScreen_C::SafeZone_All' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, ScaleBox_0) == 0x000C50, "Member 'UWBP_LinedNotebook_EventScreen_C::ScaleBox_0' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_BottomRight) == 0x000C58, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_BottomRight' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_BottomSpan) == 0x000C60, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_BottomSpan' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_Center) == 0x000C68, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_Center' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_InspectItem) == 0x000C70, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_InspectItem' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_MiddleLeft) == 0x000C78, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_MiddleLeft' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_MiddleLeft_1) == 0x000C80, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_MiddleLeft_1' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_PremiumUpsell) == 0x000C88, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_PremiumUpsell' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_RewardDetails) == 0x000C90, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_RewardDetails' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_TopLeft) == 0x000C98, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_TopLeft' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_TopLeft_1) == 0x000CA0, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_TopLeft_1' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Slot_TopRight) == 0x000CA8, "Member 'UWBP_LinedNotebook_EventScreen_C::Slot_TopRight' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Spacer_AspectRatio_2) == 0x000CB0, "Member 'UWBP_LinedNotebook_EventScreen_C::Spacer_AspectRatio_2' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, Text_Legal) == 0x000CB8, "Member 'UWBP_LinedNotebook_EventScreen_C::Text_Legal' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, VB_Glider) == 0x000CC0, "Member 'UWBP_LinedNotebook_EventScreen_C::VB_Glider' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WBP_Collection) == 0x000CC8, "Member 'UWBP_LinedNotebook_EventScreen_C::WBP_Collection' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WBP_EventDetails) == 0x000CD0, "Member 'UWBP_LinedNotebook_EventScreen_C::WBP_EventDetails' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WBP_EventRewards) == 0x000CD8, "Member 'UWBP_LinedNotebook_EventScreen_C::WBP_EventRewards' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WBP_Frame) == 0x000CE0, "Member 'UWBP_LinedNotebook_EventScreen_C::WBP_Frame' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WBP_PlotTwist_Collection_RewardPreview) == 0x000CE8, "Member 'UWBP_LinedNotebook_EventScreen_C::WBP_PlotTwist_Collection_RewardPreview' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WBP_PlotTwist_KeyArt) == 0x000CF0, "Member 'UWBP_LinedNotebook_EventScreen_C::WBP_PlotTwist_KeyArt' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WBP_UIKit_ItemDescription_MPL) == 0x000CF8, "Member 'UWBP_LinedNotebook_EventScreen_C::WBP_UIKit_ItemDescription_MPL' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WBP_UpsellFrame) == 0x000D00, "Member 'UWBP_LinedNotebook_EventScreen_C::WBP_UpsellFrame' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WBP_Vaultbreakers_RewardDetails) == 0x000D08, "Member 'UWBP_LinedNotebook_EventScreen_C::WBP_Vaultbreakers_RewardDetails' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, WidgetSwitcher_EventDetails) == 0x000D10, "Member 'UWBP_LinedNotebook_EventScreen_C::WidgetSwitcher_EventDetails' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, IsOnJumpsuitUpsell) == 0x000D18, "Member 'UWBP_LinedNotebook_EventScreen_C::IsOnJumpsuitUpsell' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, GliderAppearSound) == 0x000D20, "Member 'UWBP_LinedNotebook_EventScreen_C::GliderAppearSound' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, VariantCounterFormat) == 0x000D28, "Member 'UWBP_LinedNotebook_EventScreen_C::VariantCounterFormat' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, IsCurrentRewardPreviewFree) == 0x000D40, "Member 'UWBP_LinedNotebook_EventScreen_C::IsCurrentRewardPreviewFree' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, IsPreviewingTrackRewards) == 0x000D41, "Member 'UWBP_LinedNotebook_EventScreen_C::IsPreviewingTrackRewards' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, CurrentScreenView_Previous) == 0x000D42, "Member 'UWBP_LinedNotebook_EventScreen_C::CurrentScreenView_Previous' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, CurrentScreenView_New) == 0x000D43, "Member 'UWBP_LinedNotebook_EventScreen_C::CurrentScreenView_New' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, PreviousRewardPreviewType) == 0x000D44, "Member 'UWBP_LinedNotebook_EventScreen_C::PreviousRewardPreviewType' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, UpgradeToMainAppearSound) == 0x000D48, "Member 'UWBP_LinedNotebook_EventScreen_C::UpgradeToMainAppearSound' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, UpgradeToRewardAppearSound) == 0x000D50, "Member 'UWBP_LinedNotebook_EventScreen_C::UpgradeToRewardAppearSound' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, MainToPurchaseLevelsSound) == 0x000D58, "Member 'UWBP_LinedNotebook_EventScreen_C::MainToPurchaseLevelsSound' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, UpgradeToUpgradeRewardSound) == 0x000D60, "Member 'UWBP_LinedNotebook_EventScreen_C::UpgradeToUpgradeRewardSound' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, RewardCloseSound) == 0x000D68, "Member 'UWBP_LinedNotebook_EventScreen_C::RewardCloseSound' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, IsPaidTrack) == 0x000D70, "Member 'UWBP_LinedNotebook_EventScreen_C::IsPaidTrack' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, DebugActivateMiniEvent) == 0x000D71, "Member 'UWBP_LinedNotebook_EventScreen_C::DebugActivateMiniEvent' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, AuroraColorOn) == 0x000D72, "Member 'UWBP_LinedNotebook_EventScreen_C::AuroraColorOn' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, VBGliderPaddingDefault) == 0x000D74, "Member 'UWBP_LinedNotebook_EventScreen_C::VBGliderPaddingDefault' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, VBGliderPaddingMobile) == 0x000D84, "Member 'UWBP_LinedNotebook_EventScreen_C::VBGliderPaddingMobile' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, BorderButtonNextPaddingDefault) == 0x000D94, "Member 'UWBP_LinedNotebook_EventScreen_C::BorderButtonNextPaddingDefault' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, BorderButtonNextPaddingMobile) == 0x000DA4, "Member 'UWBP_LinedNotebook_EventScreen_C::BorderButtonNextPaddingMobile' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, BorderButtonPreviousPaddingDefault) == 0x000DB4, "Member 'UWBP_LinedNotebook_EventScreen_C::BorderButtonPreviousPaddingDefault' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, BorderButtonPreviousPaddingMobile) == 0x000DC4, "Member 'UWBP_LinedNotebook_EventScreen_C::BorderButtonPreviousPaddingMobile' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, MobileViewportRatio) == 0x000DD8, "Member 'UWBP_LinedNotebook_EventScreen_C::MobileViewportRatio' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, LerpBGBuy) == 0x000DE0, "Member 'UWBP_LinedNotebook_EventScreen_C::LerpBGBuy' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, LerpBGRewardPreview) == 0x000DE8, "Member 'UWBP_LinedNotebook_EventScreen_C::LerpBGRewardPreview' has a wrong offset!");
static_assert(offsetof(UWBP_LinedNotebook_EventScreen_C, LerpBGVaultColor) == 0x000DF0, "Member 'UWBP_LinedNotebook_EventScreen_C::LerpBGVaultColor' has a wrong offset!");

}

