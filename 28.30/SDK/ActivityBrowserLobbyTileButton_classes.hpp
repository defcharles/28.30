#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActivityBrowserLobbyTileButton

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DiscoveryBrowserUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ActivityBrowserLobbyTileButton.ActivityBrowserLobbyTileButton_C
// 0x00B0 (0x1610 - 0x1560)
class UActivityBrowserLobbyTileButton_C final : public UFortActivityLobbyTile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1560(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_SelectedMatchmaking;                          // 0x1568(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Unhovered;                                    // 0x1570(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Hovered;                                      // 0x1578(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Backing;                                           // 0x1580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Tile_FocusOutline_C*               FocusOutline;                                      // 0x1588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_KeyArt;                                      // 0x1590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Panel_ChangeMode;                                  // 0x1598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_1;                                        // 0x15A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_ChangeModeLabel;                              // 0x15A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TileSize;                                          // 0x15B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsDisabled;                                        // 0x15B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15B9[0x3];                                     // 0x15B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyArtParameter;                                   // 0x15BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MissingArtParameter;                               // 0x15C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C4[0x4];                                     // 0x15C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnActivityChanged;                                 // 0x15C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class FText DisplayName)> OnShowChildModeChangedNotification;                // 0x15D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnShowChildModeFirstTimeNotification;              // 0x15E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnHideChildModeFirstTimeNotification;              // 0x15F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BP_OnHovered();
	void BP_OnUnhovered();
	void ExecuteUbergraph_ActivityBrowserLobbyTileButton(int32 EntryPoint);
	void Finished_839C1612477AFCFDCF8BB89840A6FFE3();
	void OnDetailsUpdated();
	void OnHideChildActivityFirstTimeNotification();
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);
	void OnSelectedMatchmaking();
	void OnShowChildActivityChangedNotification(const class FText& DisplayName);
	void OnShowChildActivityFirstTimeNotification();
	void OnUnSelectedMatchmakingCanceled();
	void PreConstruct(bool IsDesignTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ActivityBrowserLobbyTileButton_C">();
	}
	static class UActivityBrowserLobbyTileButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivityBrowserLobbyTileButton_C>();
	}
};
static_assert(alignof(UActivityBrowserLobbyTileButton_C) == 0x000010, "Wrong alignment on UActivityBrowserLobbyTileButton_C");
static_assert(sizeof(UActivityBrowserLobbyTileButton_C) == 0x001610, "Wrong size on UActivityBrowserLobbyTileButton_C");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, UberGraphFrame) == 0x001560, "Member 'UActivityBrowserLobbyTileButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, Anim_SelectedMatchmaking) == 0x001568, "Member 'UActivityBrowserLobbyTileButton_C::Anim_SelectedMatchmaking' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, Anim_Unhovered) == 0x001570, "Member 'UActivityBrowserLobbyTileButton_C::Anim_Unhovered' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, Anim_Hovered) == 0x001578, "Member 'UActivityBrowserLobbyTileButton_C::Anim_Hovered' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, Backing) == 0x001580, "Member 'UActivityBrowserLobbyTileButton_C::Backing' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, FocusOutline) == 0x001588, "Member 'UActivityBrowserLobbyTileButton_C::FocusOutline' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, Image_KeyArt) == 0x001590, "Member 'UActivityBrowserLobbyTileButton_C::Image_KeyArt' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, Panel_ChangeMode) == 0x001598, "Member 'UActivityBrowserLobbyTileButton_C::Panel_ChangeMode' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, ScaleBox_1) == 0x0015A0, "Member 'UActivityBrowserLobbyTileButton_C::ScaleBox_1' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, Text_ChangeModeLabel) == 0x0015A8, "Member 'UActivityBrowserLobbyTileButton_C::Text_ChangeModeLabel' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, TileSize) == 0x0015B0, "Member 'UActivityBrowserLobbyTileButton_C::TileSize' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, IsDisabled) == 0x0015B8, "Member 'UActivityBrowserLobbyTileButton_C::IsDisabled' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, KeyArtParameter) == 0x0015BC, "Member 'UActivityBrowserLobbyTileButton_C::KeyArtParameter' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, MissingArtParameter) == 0x0015C0, "Member 'UActivityBrowserLobbyTileButton_C::MissingArtParameter' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, OnActivityChanged) == 0x0015C8, "Member 'UActivityBrowserLobbyTileButton_C::OnActivityChanged' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, OnShowChildModeChangedNotification) == 0x0015D8, "Member 'UActivityBrowserLobbyTileButton_C::OnShowChildModeChangedNotification' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, OnShowChildModeFirstTimeNotification) == 0x0015E8, "Member 'UActivityBrowserLobbyTileButton_C::OnShowChildModeFirstTimeNotification' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, OnHideChildModeFirstTimeNotification) == 0x0015F8, "Member 'UActivityBrowserLobbyTileButton_C::OnHideChildModeFirstTimeNotification' has a wrong offset!");

}

