#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationRuntime

#include "Basic.hpp"

#include "ItemizationRuntime_classes.hpp"
#include "ItemizationRuntime_parameters.hpp"


namespace SDK
{

// Function ItemizationRuntime.InventoryDebugMenu.ServerClose
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void AInventoryDebugMenu::ServerClose()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemizationRuntime.InventoryDebugMenu.ServerSetMonitoredActor
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class AActor*                           ActorToMonitor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryDebugMenu::ServerSetMonitoredActor(class AActor* ActorToMonitor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ServerSetMonitoredActor");

	Params::InventoryDebugMenu_ServerSetMonitoredActor Parms{};

	Parms.ActorToMonitor = ActorToMonitor;

	UObject::ProcessEvent(Func, &Parms);
}

}

