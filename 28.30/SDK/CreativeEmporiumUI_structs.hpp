#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativeEmporiumUI

#include "Basic.hpp"


namespace SDK
{

// Enum CreativeEmporiumUI.EFortEmporiumItemSortMode
// NumValues: 0x0007
enum class EFortEmporiumItemSortMode : uint8
{
	MCP                                      = 0,
	AtoZ                                     = 1,
	ZtoA                                     = 2,
	PriceLowToHigh                           = 3,
	PriceHighToLow                           = 4,
	SizeLowToHigh                            = 5,
	SizeHighToLow                            = 6,
};

// Enum CreativeEmporiumUI.EFortEmporiumItemFilterMode
// NumValues: 0x0002
enum class EFortEmporiumItemFilterMode : uint8
{
	Price                                    = 0,
	License                                  = 1,
};

// Enum CreativeEmporiumUI.EFortEmporiumItemPriceFilter
// NumValues: 0x0004
enum class EFortEmporiumItemPriceFilter : uint8
{
	Invalid                                  = 0,
	Free                                     = 1,
	Premium                                  = 2,
	All                                      = 255,
};

// Enum CreativeEmporiumUI.EFortEmporiumItemLicense
// NumValues: 0x000A
enum class EFortEmporiumItemLicense : uint8
{
	Invalid                                  = 0,
	CC0                                      = 1,
	CC_BY                                    = 2,
	CC_BY_SA                                 = 4,
	CC_BY_NC                                 = 8,
	CC_BY_NC_SA                              = 16,
	CC_BY_ND                                 = 32,
	CC_BY_NC_ND                              = 64,
	Standard                                 = 128,
	All                                      = 255,
};

// ScriptStruct CreativeEmporiumUI.FortEmporiumItemData
// 0x00E8 (0x00E8 - 0x0000)
struct FFortEmporiumItemData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameSpace;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntityType;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailURL;                                      // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Price;                                             // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BaseCurrency;                                      // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SketchfabUID;                                      // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TagList;                                           // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EFortEmporiumItemLicense                      LicenseType;                                       // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresEntitlement;                              // 0x0089(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VersePath;                                         // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetIds;                                          // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         FileSize;                                          // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Seller;                                            // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialCount;                                     // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolygonCount;                                      // 0x00DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         vertexcount;                                       // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChildAssetCount;                                   // 0x00E4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEmporiumItemData) == 0x000008, "Wrong alignment on FFortEmporiumItemData");
static_assert(sizeof(FFortEmporiumItemData) == 0x0000E8, "Wrong size on FFortEmporiumItemData");
static_assert(offsetof(FFortEmporiumItemData, ID) == 0x000000, "Member 'FFortEmporiumItemData::ID' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, Title) == 0x000010, "Member 'FFortEmporiumItemData::Title' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, NameSpace) == 0x000020, "Member 'FFortEmporiumItemData::NameSpace' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, EntityType) == 0x000030, "Member 'FFortEmporiumItemData::EntityType' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, ThumbnailURL) == 0x000040, "Member 'FFortEmporiumItemData::ThumbnailURL' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, Price) == 0x000050, "Member 'FFortEmporiumItemData::Price' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, BaseCurrency) == 0x000058, "Member 'FFortEmporiumItemData::BaseCurrency' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, SketchfabUID) == 0x000068, "Member 'FFortEmporiumItemData::SketchfabUID' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, TagList) == 0x000078, "Member 'FFortEmporiumItemData::TagList' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, LicenseType) == 0x000088, "Member 'FFortEmporiumItemData::LicenseType' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, bRequiresEntitlement) == 0x000089, "Member 'FFortEmporiumItemData::bRequiresEntitlement' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, VersePath) == 0x000090, "Member 'FFortEmporiumItemData::VersePath' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, AssetIds) == 0x0000A0, "Member 'FFortEmporiumItemData::AssetIds' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, FileSize) == 0x0000B0, "Member 'FFortEmporiumItemData::FileSize' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, Description) == 0x0000B8, "Member 'FFortEmporiumItemData::Description' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, Seller) == 0x0000C8, "Member 'FFortEmporiumItemData::Seller' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, MaterialCount) == 0x0000D8, "Member 'FFortEmporiumItemData::MaterialCount' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, PolygonCount) == 0x0000DC, "Member 'FFortEmporiumItemData::PolygonCount' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, vertexcount) == 0x0000E0, "Member 'FFortEmporiumItemData::vertexcount' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemData, ChildAssetCount) == 0x0000E4, "Member 'FFortEmporiumItemData::ChildAssetCount' has a wrong offset!");

// ScriptStruct CreativeEmporiumUI.FortEmporiumItemLicenseData
// 0x0048 (0x0048 - 0x0000)
struct FFortEmporiumItemLicenseData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keyword;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortEmporiumItemLicense                      License;                                           // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEmporiumItemLicenseData) == 0x000008, "Wrong alignment on FFortEmporiumItemLicenseData");
static_assert(sizeof(FFortEmporiumItemLicenseData) == 0x000048, "Wrong size on FFortEmporiumItemLicenseData");
static_assert(offsetof(FFortEmporiumItemLicenseData, ID) == 0x000000, "Member 'FFortEmporiumItemLicenseData::ID' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemLicenseData, Keyword) == 0x000008, "Member 'FFortEmporiumItemLicenseData::Keyword' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemLicenseData, Name) == 0x000018, "Member 'FFortEmporiumItemLicenseData::Name' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemLicenseData, License) == 0x000030, "Member 'FFortEmporiumItemLicenseData::License' has a wrong offset!");
static_assert(offsetof(FFortEmporiumItemLicenseData, URL) == 0x000038, "Member 'FFortEmporiumItemLicenseData::URL' has a wrong offset!");

// ScriptStruct CreativeEmporiumUI.FortEmporiumSortEntry
// 0x0020 (0x0020 - 0x0000)
struct FFortEmporiumSortEntry final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortEmporiumItemSortMode                     Mode;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortEmporiumSortEntry) == 0x000008, "Wrong alignment on FFortEmporiumSortEntry");
static_assert(sizeof(FFortEmporiumSortEntry) == 0x000020, "Wrong size on FFortEmporiumSortEntry");
static_assert(offsetof(FFortEmporiumSortEntry, Text) == 0x000000, "Member 'FFortEmporiumSortEntry::Text' has a wrong offset!");
static_assert(offsetof(FFortEmporiumSortEntry, Mode) == 0x000018, "Member 'FFortEmporiumSortEntry::Mode' has a wrong offset!");

// ScriptStruct CreativeEmporiumUI.FortEmporiumPriceFilterEntry
// 0x0028 (0x0028 - 0x0000)
struct FFortEmporiumPriceFilterEntry final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortEmporiumItemPriceFilter                  Filter;                                            // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortEmporiumPriceFilterEntry) == 0x000008, "Wrong alignment on FFortEmporiumPriceFilterEntry");
static_assert(sizeof(FFortEmporiumPriceFilterEntry) == 0x000028, "Wrong size on FFortEmporiumPriceFilterEntry");
static_assert(offsetof(FFortEmporiumPriceFilterEntry, ID) == 0x000000, "Member 'FFortEmporiumPriceFilterEntry::ID' has a wrong offset!");
static_assert(offsetof(FFortEmporiumPriceFilterEntry, Text) == 0x000008, "Member 'FFortEmporiumPriceFilterEntry::Text' has a wrong offset!");
static_assert(offsetof(FFortEmporiumPriceFilterEntry, Filter) == 0x000020, "Member 'FFortEmporiumPriceFilterEntry::Filter' has a wrong offset!");

// ScriptStruct CreativeEmporiumUI.FortEmporiumFilterEntry
// 0x0028 (0x0028 - 0x0000)
struct FFortEmporiumFilterEntry final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextRoot;                                          // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortEmporiumItemFilterMode                   Mode;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortEmporiumFilterEntry) == 0x000008, "Wrong alignment on FFortEmporiumFilterEntry");
static_assert(sizeof(FFortEmporiumFilterEntry) == 0x000028, "Wrong size on FFortEmporiumFilterEntry");
static_assert(offsetof(FFortEmporiumFilterEntry, ID) == 0x000000, "Member 'FFortEmporiumFilterEntry::ID' has a wrong offset!");
static_assert(offsetof(FFortEmporiumFilterEntry, TextRoot) == 0x000008, "Member 'FFortEmporiumFilterEntry::TextRoot' has a wrong offset!");
static_assert(offsetof(FFortEmporiumFilterEntry, Mode) == 0x000020, "Member 'FFortEmporiumFilterEntry::Mode' has a wrong offset!");

// ScriptStruct CreativeEmporiumUI.FortEmporiumFilterCategory
// 0x0020 (0x0020 - 0x0000)
struct FFortEmporiumFilterCategory final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentID;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTab;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCategoryModal;                                // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SubcategoryIDList;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEmporiumFilterCategory) == 0x000008, "Wrong alignment on FFortEmporiumFilterCategory");
static_assert(sizeof(FFortEmporiumFilterCategory) == 0x000020, "Wrong size on FFortEmporiumFilterCategory");
static_assert(offsetof(FFortEmporiumFilterCategory, ID) == 0x000000, "Member 'FFortEmporiumFilterCategory::ID' has a wrong offset!");
static_assert(offsetof(FFortEmporiumFilterCategory, ParentID) == 0x000004, "Member 'FFortEmporiumFilterCategory::ParentID' has a wrong offset!");
static_assert(offsetof(FFortEmporiumFilterCategory, bIsTab) == 0x000008, "Member 'FFortEmporiumFilterCategory::bIsTab' has a wrong offset!");
static_assert(offsetof(FFortEmporiumFilterCategory, bShowCategoryModal) == 0x000009, "Member 'FFortEmporiumFilterCategory::bShowCategoryModal' has a wrong offset!");
static_assert(offsetof(FFortEmporiumFilterCategory, SubcategoryIDList) == 0x000010, "Member 'FFortEmporiumFilterCategory::SubcategoryIDList' has a wrong offset!");

}

