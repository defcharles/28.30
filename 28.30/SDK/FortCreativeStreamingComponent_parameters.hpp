#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortCreativeStreamingComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "EpicMediaBasePlayer_structs.hpp"
#include "FortCreativeStreamingComponent_structs.hpp"


namespace SDK::Params
{

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.CMSEventEnded
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeStreamingComponent_CMSEventEnded final
{
public:
	const class UMediaCMSEvent*                   Event;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_CMSEventEnded) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_CMSEventEnded");
static_assert(sizeof(FortCreativeStreamingComponent_CMSEventEnded) == 0x000008, "Wrong size on FortCreativeStreamingComponent_CMSEventEnded");
static_assert(offsetof(FortCreativeStreamingComponent_CMSEventEnded, Event) == 0x000000, "Member 'FortCreativeStreamingComponent_CMSEventEnded::Event' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.CMSEventStarted
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeStreamingComponent_CMSEventStarted final
{
public:
	const class UMediaCMSEvent*                   Event;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_CMSEventStarted) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_CMSEventStarted");
static_assert(sizeof(FortCreativeStreamingComponent_CMSEventStarted) == 0x000008, "Wrong size on FortCreativeStreamingComponent_CMSEventStarted");
static_assert(offsetof(FortCreativeStreamingComponent_CMSEventStarted, Event) == 0x000000, "Member 'FortCreativeStreamingComponent_CMSEventStarted::Event' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.DisableScreenAndAudio
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeStreamingComponent_DisableScreenAndAudio final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_DisableScreenAndAudio) == 0x000001, "Wrong alignment on FortCreativeStreamingComponent_DisableScreenAndAudio");
static_assert(sizeof(FortCreativeStreamingComponent_DisableScreenAndAudio) == 0x000001, "Wrong size on FortCreativeStreamingComponent_DisableScreenAndAudio");
static_assert(offsetof(FortCreativeStreamingComponent_DisableScreenAndAudio, bDisabled) == 0x000000, "Member 'FortCreativeStreamingComponent_DisableScreenAndAudio::bDisabled' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.HandleCMSEvents
// 0x0040 (0x0040 - 0x0000)
struct FortCreativeStreamingComponent_HandleCMSEvents final
{
public:
	struct FVideoPlayerDeviceCMSEventData         EventData;                                         // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeStreamingComponent_HandleCMSEvents) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_HandleCMSEvents");
static_assert(sizeof(FortCreativeStreamingComponent_HandleCMSEvents) == 0x000040, "Wrong size on FortCreativeStreamingComponent_HandleCMSEvents");
static_assert(offsetof(FortCreativeStreamingComponent_HandleCMSEvents, EventData) == 0x000000, "Member 'FortCreativeStreamingComponent_HandleCMSEvents::EventData' has a wrong offset!");
static_assert(offsetof(FortCreativeStreamingComponent_HandleCMSEvents, bEnable) == 0x000038, "Member 'FortCreativeStreamingComponent_HandleCMSEvents::bEnable' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.HandleVideoStreamingTerminalError
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeStreamingComponent_HandleVideoStreamingTerminalError final
{
public:
	EBaseMediaTerminalErrorReason                 ErrorReason;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_HandleVideoStreamingTerminalError) == 0x000001, "Wrong alignment on FortCreativeStreamingComponent_HandleVideoStreamingTerminalError");
static_assert(sizeof(FortCreativeStreamingComponent_HandleVideoStreamingTerminalError) == 0x000001, "Wrong size on FortCreativeStreamingComponent_HandleVideoStreamingTerminalError");
static_assert(offsetof(FortCreativeStreamingComponent_HandleVideoStreamingTerminalError, ErrorReason) == 0x000000, "Member 'FortCreativeStreamingComponent_HandleVideoStreamingTerminalError::ErrorReason' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.Init
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeStreamingComponent_Init final
{
public:
	bool                                          InUsesAudio;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InUsesVideo;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   ScreenMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_Init) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_Init");
static_assert(sizeof(FortCreativeStreamingComponent_Init) == 0x000010, "Wrong size on FortCreativeStreamingComponent_Init");
static_assert(offsetof(FortCreativeStreamingComponent_Init, InUsesAudio) == 0x000000, "Member 'FortCreativeStreamingComponent_Init::InUsesAudio' has a wrong offset!");
static_assert(offsetof(FortCreativeStreamingComponent_Init, InUsesVideo) == 0x000001, "Member 'FortCreativeStreamingComponent_Init::InUsesVideo' has a wrong offset!");
static_assert(offsetof(FortCreativeStreamingComponent_Init, ScreenMesh) == 0x000008, "Member 'FortCreativeStreamingComponent_Init::ScreenMesh' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.OnAudioAnalysisSpectrumUpdated
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeStreamingComponent_OnAudioAnalysisSpectrumUpdated final
{
public:
	TArray<float>                                 MagnitudeArray;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_OnAudioAnalysisSpectrumUpdated) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_OnAudioAnalysisSpectrumUpdated");
static_assert(sizeof(FortCreativeStreamingComponent_OnAudioAnalysisSpectrumUpdated) == 0x000010, "Wrong size on FortCreativeStreamingComponent_OnAudioAnalysisSpectrumUpdated");
static_assert(offsetof(FortCreativeStreamingComponent_OnAudioAnalysisSpectrumUpdated, MagnitudeArray) == 0x000000, "Member 'FortCreativeStreamingComponent_OnAudioAnalysisSpectrumUpdated::MagnitudeArray' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.OnMediaSoundComponentActivated
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeStreamingComponent_OnMediaSoundComponentActivated final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeStreamingComponent_OnMediaSoundComponentActivated) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_OnMediaSoundComponentActivated");
static_assert(sizeof(FortCreativeStreamingComponent_OnMediaSoundComponentActivated) == 0x000010, "Wrong size on FortCreativeStreamingComponent_OnMediaSoundComponentActivated");
static_assert(offsetof(FortCreativeStreamingComponent_OnMediaSoundComponentActivated, Component) == 0x000000, "Member 'FortCreativeStreamingComponent_OnMediaSoundComponentActivated::Component' has a wrong offset!");
static_assert(offsetof(FortCreativeStreamingComponent_OnMediaSoundComponentActivated, bReset) == 0x000008, "Member 'FortCreativeStreamingComponent_OnMediaSoundComponentActivated::bReset' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.Seek
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeStreamingComponent_Seek final
{
public:
	struct FTimespan                              SeekTime;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_Seek) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_Seek");
static_assert(sizeof(FortCreativeStreamingComponent_Seek) == 0x000008, "Wrong size on FortCreativeStreamingComponent_Seek");
static_assert(offsetof(FortCreativeStreamingComponent_Seek, SeekTime) == 0x000000, "Member 'FortCreativeStreamingComponent_Seek::SeekTime' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.SetFullScreenComponents
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeStreamingComponent_SetFullScreenComponents final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_SetFullScreenComponents) == 0x000001, "Wrong alignment on FortCreativeStreamingComponent_SetFullScreenComponents");
static_assert(sizeof(FortCreativeStreamingComponent_SetFullScreenComponents) == 0x000001, "Wrong size on FortCreativeStreamingComponent_SetFullScreenComponents");
static_assert(offsetof(FortCreativeStreamingComponent_SetFullScreenComponents, bEnable) == 0x000000, "Member 'FortCreativeStreamingComponent_SetFullScreenComponents::bEnable' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.SetRestartStreamWhenPlaying
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeStreamingComponent_SetRestartStreamWhenPlaying final
{
public:
	bool                                          bNewRestartStreamWhenPlaying;                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_SetRestartStreamWhenPlaying) == 0x000001, "Wrong alignment on FortCreativeStreamingComponent_SetRestartStreamWhenPlaying");
static_assert(sizeof(FortCreativeStreamingComponent_SetRestartStreamWhenPlaying) == 0x000001, "Wrong size on FortCreativeStreamingComponent_SetRestartStreamWhenPlaying");
static_assert(offsetof(FortCreativeStreamingComponent_SetRestartStreamWhenPlaying, bNewRestartStreamWhenPlaying) == 0x000000, "Member 'FortCreativeStreamingComponent_SetRestartStreamWhenPlaying::bNewRestartStreamWhenPlaying' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.UpdateStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeStreamingComponent_UpdateStaticMesh final
{
public:
	class UStaticMeshComponent*                   ScreenMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_UpdateStaticMesh) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_UpdateStaticMesh");
static_assert(sizeof(FortCreativeStreamingComponent_UpdateStaticMesh) == 0x000008, "Wrong size on FortCreativeStreamingComponent_UpdateStaticMesh");
static_assert(offsetof(FortCreativeStreamingComponent_UpdateStaticMesh, ScreenMesh) == 0x000000, "Member 'FortCreativeStreamingComponent_UpdateStaticMesh::ScreenMesh' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.UseMirrorMode
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeStreamingComponent_UseMirrorMode final
{
public:
	class AActor*                                 NewMirrorDevice;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_UseMirrorMode) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_UseMirrorMode");
static_assert(sizeof(FortCreativeStreamingComponent_UseMirrorMode) == 0x000008, "Wrong size on FortCreativeStreamingComponent_UseMirrorMode");
static_assert(offsetof(FortCreativeStreamingComponent_UseMirrorMode, NewMirrorDevice) == 0x000000, "Member 'FortCreativeStreamingComponent_UseMirrorMode::NewMirrorDevice' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.UseMirrorModeByName
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeStreamingComponent_UseMirrorModeByName final
{
public:
	class FString                                 DeviceName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_UseMirrorModeByName) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_UseMirrorModeByName");
static_assert(sizeof(FortCreativeStreamingComponent_UseMirrorModeByName) == 0x000010, "Wrong size on FortCreativeStreamingComponent_UseMirrorModeByName");
static_assert(offsetof(FortCreativeStreamingComponent_UseMirrorModeByName, DeviceName) == 0x000000, "Member 'FortCreativeStreamingComponent_UseMirrorModeByName::DeviceName' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.GetDeviceComponents
// 0x0030 (0x0030 - 0x0000)
struct FortCreativeStreamingComponent_GetDeviceComponents final
{
public:
	struct FVideoPlayerDeviceComponents           ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_GetDeviceComponents) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_GetDeviceComponents");
static_assert(sizeof(FortCreativeStreamingComponent_GetDeviceComponents) == 0x000030, "Wrong size on FortCreativeStreamingComponent_GetDeviceComponents");
static_assert(offsetof(FortCreativeStreamingComponent_GetDeviceComponents, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_GetDeviceComponents::ReturnValue' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.GetDeviceState
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeStreamingComponent_GetDeviceState final
{
public:
	EFortStreamingVideoDeviceState                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_GetDeviceState) == 0x000001, "Wrong alignment on FortCreativeStreamingComponent_GetDeviceState");
static_assert(sizeof(FortCreativeStreamingComponent_GetDeviceState) == 0x000001, "Wrong size on FortCreativeStreamingComponent_GetDeviceState");
static_assert(offsetof(FortCreativeStreamingComponent_GetDeviceState, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_GetDeviceState::ReturnValue' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.GetFortBaseStreamingVideo
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeStreamingComponent_GetFortBaseStreamingVideo final
{
public:
	class UFortBaseStreamingVideo*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_GetFortBaseStreamingVideo) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_GetFortBaseStreamingVideo");
static_assert(sizeof(FortCreativeStreamingComponent_GetFortBaseStreamingVideo) == 0x000008, "Wrong size on FortCreativeStreamingComponent_GetFortBaseStreamingVideo");
static_assert(offsetof(FortCreativeStreamingComponent_GetFortBaseStreamingVideo, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_GetFortBaseStreamingVideo::ReturnValue' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.GetStreamingComponents
// 0x0030 (0x0030 - 0x0000)
struct FortCreativeStreamingComponent_GetStreamingComponents final
{
public:
	struct FVideoPlayerDeviceComponents           ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_GetStreamingComponents) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_GetStreamingComponents");
static_assert(sizeof(FortCreativeStreamingComponent_GetStreamingComponents) == 0x000030, "Wrong size on FortCreativeStreamingComponent_GetStreamingComponents");
static_assert(offsetof(FortCreativeStreamingComponent_GetStreamingComponents, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_GetStreamingComponents::ReturnValue' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.GetStreamingController
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeStreamingComponent_GetStreamingController final
{
public:
	class AFortCreativeStreamingController*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_GetStreamingController) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_GetStreamingController");
static_assert(sizeof(FortCreativeStreamingComponent_GetStreamingController) == 0x000008, "Wrong size on FortCreativeStreamingComponent_GetStreamingController");
static_assert(offsetof(FortCreativeStreamingComponent_GetStreamingController, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_GetStreamingController::ReturnValue' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.GetStreamingDevice
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeStreamingComponent_GetStreamingDevice final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_GetStreamingDevice) == 0x000008, "Wrong alignment on FortCreativeStreamingComponent_GetStreamingDevice");
static_assert(sizeof(FortCreativeStreamingComponent_GetStreamingDevice) == 0x000008, "Wrong size on FortCreativeStreamingComponent_GetStreamingDevice");
static_assert(offsetof(FortCreativeStreamingComponent_GetStreamingDevice, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_GetStreamingDevice::ReturnValue' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.GetStreamingVideoSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeStreamingComponent_GetStreamingVideoSelectionMode final
{
public:
	EFortStreamingVideoSelectionMode              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_GetStreamingVideoSelectionMode) == 0x000001, "Wrong alignment on FortCreativeStreamingComponent_GetStreamingVideoSelectionMode");
static_assert(sizeof(FortCreativeStreamingComponent_GetStreamingVideoSelectionMode) == 0x000001, "Wrong size on FortCreativeStreamingComponent_GetStreamingVideoSelectionMode");
static_assert(offsetof(FortCreativeStreamingComponent_GetStreamingVideoSelectionMode, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_GetStreamingVideoSelectionMode::ReturnValue' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.IsComponentInitialized
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeStreamingComponent_IsComponentInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_IsComponentInitialized) == 0x000001, "Wrong alignment on FortCreativeStreamingComponent_IsComponentInitialized");
static_assert(sizeof(FortCreativeStreamingComponent_IsComponentInitialized) == 0x000001, "Wrong size on FortCreativeStreamingComponent_IsComponentInitialized");
static_assert(offsetof(FortCreativeStreamingComponent_IsComponentInitialized, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_IsComponentInitialized::ReturnValue' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.IsDevicePlaying
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeStreamingComponent_IsDevicePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_IsDevicePlaying) == 0x000001, "Wrong alignment on FortCreativeStreamingComponent_IsDevicePlaying");
static_assert(sizeof(FortCreativeStreamingComponent_IsDevicePlaying) == 0x000001, "Wrong size on FortCreativeStreamingComponent_IsDevicePlaying");
static_assert(offsetof(FortCreativeStreamingComponent_IsDevicePlaying, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_IsDevicePlaying::ReturnValue' has a wrong offset!");

// Function FortCreativeStreamingComponent.FortCreativeStreamingComponent.IsRestartStreamWhenPlaying
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeStreamingComponent_IsRestartStreamWhenPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeStreamingComponent_IsRestartStreamWhenPlaying) == 0x000001, "Wrong alignment on FortCreativeStreamingComponent_IsRestartStreamWhenPlaying");
static_assert(sizeof(FortCreativeStreamingComponent_IsRestartStreamWhenPlaying) == 0x000001, "Wrong size on FortCreativeStreamingComponent_IsRestartStreamWhenPlaying");
static_assert(offsetof(FortCreativeStreamingComponent_IsRestartStreamWhenPlaying, ReturnValue) == 0x000000, "Member 'FortCreativeStreamingComponent_IsRestartStreamWhenPlaying::ReturnValue' has a wrong offset!");

}

