#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarAudio

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DelMarAudio_structs.hpp"
#include "DelMarCore_structs.hpp"


namespace SDK::Params
{

// Function DelMarAudio.DelMarAudioCheatManager.DelMarSetMusicTrigger
// 0x0004 (0x0004 - 0x0000)
struct DelMarAudioCheatManager_DelMarSetMusicTrigger final
{
public:
	class FName                                   TriggerName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioCheatManager_DelMarSetMusicTrigger) == 0x000004, "Wrong alignment on DelMarAudioCheatManager_DelMarSetMusicTrigger");
static_assert(sizeof(DelMarAudioCheatManager_DelMarSetMusicTrigger) == 0x000004, "Wrong size on DelMarAudioCheatManager_DelMarSetMusicTrigger");
static_assert(offsetof(DelMarAudioCheatManager_DelMarSetMusicTrigger, TriggerName) == 0x000000, "Member 'DelMarAudioCheatManager_DelMarSetMusicTrigger::TriggerName' has a wrong offset!");

// Function DelMarAudio.DelMarAudioProximityComponentBase.BP_Update
// 0x0010 (0x0010 - 0x0000)
struct DelMarAudioProximityComponentBase_BP_Update final
{
public:
	const class APlayerCameraManager*             Camera;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADelMarVehicle*                   Vehicle;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioProximityComponentBase_BP_Update) == 0x000008, "Wrong alignment on DelMarAudioProximityComponentBase_BP_Update");
static_assert(sizeof(DelMarAudioProximityComponentBase_BP_Update) == 0x000010, "Wrong size on DelMarAudioProximityComponentBase_BP_Update");
static_assert(offsetof(DelMarAudioProximityComponentBase_BP_Update, Camera) == 0x000000, "Member 'DelMarAudioProximityComponentBase_BP_Update::Camera' has a wrong offset!");
static_assert(offsetof(DelMarAudioProximityComponentBase_BP_Update, Vehicle) == 0x000008, "Member 'DelMarAudioProximityComponentBase_BP_Update::Vehicle' has a wrong offset!");

// Function DelMarAudio.DelMarAudioProximityComponentBase.CreateSoundAttached
// 0x0028 (0x0028 - 0x0000)
struct DelMarAudioProximityComponentBase_CreateSoundAttached final
{
public:
	class USoundBase*                             sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioProximityComponentBase_CreateSoundAttached) == 0x000008, "Wrong alignment on DelMarAudioProximityComponentBase_CreateSoundAttached");
static_assert(sizeof(DelMarAudioProximityComponentBase_CreateSoundAttached) == 0x000028, "Wrong size on DelMarAudioProximityComponentBase_CreateSoundAttached");
static_assert(offsetof(DelMarAudioProximityComponentBase_CreateSoundAttached, sound) == 0x000000, "Member 'DelMarAudioProximityComponentBase_CreateSoundAttached::sound' has a wrong offset!");
static_assert(offsetof(DelMarAudioProximityComponentBase_CreateSoundAttached, AttachComponent) == 0x000008, "Member 'DelMarAudioProximityComponentBase_CreateSoundAttached::AttachComponent' has a wrong offset!");
static_assert(offsetof(DelMarAudioProximityComponentBase_CreateSoundAttached, AttachPointName) == 0x000010, "Member 'DelMarAudioProximityComponentBase_CreateSoundAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(DelMarAudioProximityComponentBase_CreateSoundAttached, VolumeMultiplier) == 0x000014, "Member 'DelMarAudioProximityComponentBase_CreateSoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(DelMarAudioProximityComponentBase_CreateSoundAttached, PitchMultiplier) == 0x000018, "Member 'DelMarAudioProximityComponentBase_CreateSoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(DelMarAudioProximityComponentBase_CreateSoundAttached, bStopWhenAttachedToDestroyed) == 0x00001C, "Member 'DelMarAudioProximityComponentBase_CreateSoundAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(DelMarAudioProximityComponentBase_CreateSoundAttached, bAutoDestroy) == 0x00001D, "Member 'DelMarAudioProximityComponentBase_CreateSoundAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(DelMarAudioProximityComponentBase_CreateSoundAttached, ReturnValue) == 0x000020, "Member 'DelMarAudioProximityComponentBase_CreateSoundAttached::ReturnValue' has a wrong offset!");

// Function DelMarAudio.DelMarAudioProximityComponent.GetObjectScale
// 0x0004 (0x0004 - 0x0000)
struct DelMarAudioProximityComponent_GetObjectScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioProximityComponent_GetObjectScale) == 0x000004, "Wrong alignment on DelMarAudioProximityComponent_GetObjectScale");
static_assert(sizeof(DelMarAudioProximityComponent_GetObjectScale) == 0x000004, "Wrong size on DelMarAudioProximityComponent_GetObjectScale");
static_assert(offsetof(DelMarAudioProximityComponent_GetObjectScale, ReturnValue) == 0x000000, "Member 'DelMarAudioProximityComponent_GetObjectScale::ReturnValue' has a wrong offset!");

// Function DelMarAudio.DelMarAudioPassbyComponent.BP_StartPassby
// 0x0010 (0x0010 - 0x0000)
struct DelMarAudioPassbyComponent_BP_StartPassby final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassbySpeed;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarAudioPassbyComponent_BP_StartPassby) == 0x000008, "Wrong alignment on DelMarAudioPassbyComponent_BP_StartPassby");
static_assert(sizeof(DelMarAudioPassbyComponent_BP_StartPassby) == 0x000010, "Wrong size on DelMarAudioPassbyComponent_BP_StartPassby");
static_assert(offsetof(DelMarAudioPassbyComponent_BP_StartPassby, Instigator) == 0x000000, "Member 'DelMarAudioPassbyComponent_BP_StartPassby::Instigator' has a wrong offset!");
static_assert(offsetof(DelMarAudioPassbyComponent_BP_StartPassby, PassbySpeed) == 0x000008, "Member 'DelMarAudioPassbyComponent_BP_StartPassby::PassbySpeed' has a wrong offset!");

// Function DelMarAudio.DelMarAudioPassbyComponent.IsPlayingPassby
// 0x0001 (0x0001 - 0x0000)
struct DelMarAudioPassbyComponent_IsPlayingPassby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioPassbyComponent_IsPlayingPassby) == 0x000001, "Wrong alignment on DelMarAudioPassbyComponent_IsPlayingPassby");
static_assert(sizeof(DelMarAudioPassbyComponent_IsPlayingPassby) == 0x000001, "Wrong size on DelMarAudioPassbyComponent_IsPlayingPassby");
static_assert(offsetof(DelMarAudioPassbyComponent_IsPlayingPassby, ReturnValue) == 0x000000, "Member 'DelMarAudioPassbyComponent_IsPlayingPassby::ReturnValue' has a wrong offset!");

// Function DelMarAudio.DelMarAudioStateMixerSubsystem.AddMixes
// 0x0018 (0x0018 - 0x0000)
struct DelMarAudioStateMixerSubsystem_AddMixes final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarStateMix>                Mixes;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioStateMixerSubsystem_AddMixes) == 0x000008, "Wrong alignment on DelMarAudioStateMixerSubsystem_AddMixes");
static_assert(sizeof(DelMarAudioStateMixerSubsystem_AddMixes) == 0x000018, "Wrong size on DelMarAudioStateMixerSubsystem_AddMixes");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_AddMixes, GroupName) == 0x000000, "Member 'DelMarAudioStateMixerSubsystem_AddMixes::GroupName' has a wrong offset!");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_AddMixes, Mixes) == 0x000008, "Member 'DelMarAudioStateMixerSubsystem_AddMixes::Mixes' has a wrong offset!");

// Function DelMarAudio.DelMarAudioStateMixerSubsystem.ClearMixState
// 0x0008 (0x0008 - 0x0000)
struct DelMarAudioStateMixerSubsystem_ClearMixState final
{
public:
	struct FGameplayTag                           MixState;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateChildren;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarAudioStateMixerSubsystem_ClearMixState) == 0x000004, "Wrong alignment on DelMarAudioStateMixerSubsystem_ClearMixState");
static_assert(sizeof(DelMarAudioStateMixerSubsystem_ClearMixState) == 0x000008, "Wrong size on DelMarAudioStateMixerSubsystem_ClearMixState");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_ClearMixState, MixState) == 0x000000, "Member 'DelMarAudioStateMixerSubsystem_ClearMixState::MixState' has a wrong offset!");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_ClearMixState, bDeactivateChildren) == 0x000004, "Member 'DelMarAudioStateMixerSubsystem_ClearMixState::bDeactivateChildren' has a wrong offset!");

// Function DelMarAudio.DelMarAudioStateMixerSubsystem.RemoveMixes
// 0x0004 (0x0004 - 0x0000)
struct DelMarAudioStateMixerSubsystem_RemoveMixes final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioStateMixerSubsystem_RemoveMixes) == 0x000004, "Wrong alignment on DelMarAudioStateMixerSubsystem_RemoveMixes");
static_assert(sizeof(DelMarAudioStateMixerSubsystem_RemoveMixes) == 0x000004, "Wrong size on DelMarAudioStateMixerSubsystem_RemoveMixes");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_RemoveMixes, GroupName) == 0x000000, "Member 'DelMarAudioStateMixerSubsystem_RemoveMixes::GroupName' has a wrong offset!");

// Function DelMarAudio.DelMarAudioStateMixerSubsystem.SetMixState
// 0x0008 (0x0008 - 0x0000)
struct DelMarAudioStateMixerSubsystem_SetMixState final
{
public:
	struct FGameplayTag                           MixState;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFallBackToNearestParent;                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateChildren;                               // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarAudioStateMixerSubsystem_SetMixState) == 0x000004, "Wrong alignment on DelMarAudioStateMixerSubsystem_SetMixState");
static_assert(sizeof(DelMarAudioStateMixerSubsystem_SetMixState) == 0x000008, "Wrong size on DelMarAudioStateMixerSubsystem_SetMixState");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_SetMixState, MixState) == 0x000000, "Member 'DelMarAudioStateMixerSubsystem_SetMixState::MixState' has a wrong offset!");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_SetMixState, bFallBackToNearestParent) == 0x000004, "Member 'DelMarAudioStateMixerSubsystem_SetMixState::bFallBackToNearestParent' has a wrong offset!");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_SetMixState, bDeactivateChildren) == 0x000005, "Member 'DelMarAudioStateMixerSubsystem_SetMixState::bDeactivateChildren' has a wrong offset!");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_SetMixState, ReturnValue) == 0x000006, "Member 'DelMarAudioStateMixerSubsystem_SetMixState::ReturnValue' has a wrong offset!");

// Function DelMarAudio.DelMarAudioStateMixerSubsystem.GetActiveMixes
// 0x0050 (0x0050 - 0x0000)
struct DelMarAudioStateMixerSubsystem_GetActiveMixes final
{
public:
	TMap<struct FGameplayTag, struct FDelMarStateMix> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioStateMixerSubsystem_GetActiveMixes) == 0x000008, "Wrong alignment on DelMarAudioStateMixerSubsystem_GetActiveMixes");
static_assert(sizeof(DelMarAudioStateMixerSubsystem_GetActiveMixes) == 0x000050, "Wrong size on DelMarAudioStateMixerSubsystem_GetActiveMixes");
static_assert(offsetof(DelMarAudioStateMixerSubsystem_GetActiveMixes, ReturnValue) == 0x000000, "Member 'DelMarAudioStateMixerSubsystem_GetActiveMixes::ReturnValue' has a wrong offset!");

// Function DelMarAudio.DelMarAudioStatePlayspaceComponent.HandleVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarAudioStatePlayspaceComponent_HandleVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioStatePlayspaceComponent_HandleVehicleDemolished) == 0x000004, "Wrong alignment on DelMarAudioStatePlayspaceComponent_HandleVehicleDemolished");
static_assert(sizeof(DelMarAudioStatePlayspaceComponent_HandleVehicleDemolished) == 0x000004, "Wrong size on DelMarAudioStatePlayspaceComponent_HandleVehicleDemolished");
static_assert(offsetof(DelMarAudioStatePlayspaceComponent_HandleVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarAudioStatePlayspaceComponent_HandleVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarAudio.DelMarCrowdAudioManager.BP_OnGameplayStateChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarCrowdAudioManager_BP_OnGameplayStateChanged final
{
public:
	struct FGameplayTag                           NewStateTag;                                       // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCrowdAudioManager_BP_OnGameplayStateChanged) == 0x000004, "Wrong alignment on DelMarCrowdAudioManager_BP_OnGameplayStateChanged");
static_assert(sizeof(DelMarCrowdAudioManager_BP_OnGameplayStateChanged) == 0x000004, "Wrong size on DelMarCrowdAudioManager_BP_OnGameplayStateChanged");
static_assert(offsetof(DelMarCrowdAudioManager_BP_OnGameplayStateChanged, NewStateTag) == 0x000000, "Member 'DelMarCrowdAudioManager_BP_OnGameplayStateChanged::NewStateTag' has a wrong offset!");

// Function DelMarAudio.DelMarCrowdAudioManager.BP_OnRaceModeChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarCrowdAudioManager_BP_OnRaceModeChanged final
{
public:
	struct FGameplayTag                           NewRaceModeTag;                                    // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCrowdAudioManager_BP_OnRaceModeChanged) == 0x000004, "Wrong alignment on DelMarCrowdAudioManager_BP_OnRaceModeChanged");
static_assert(sizeof(DelMarCrowdAudioManager_BP_OnRaceModeChanged) == 0x000004, "Wrong size on DelMarCrowdAudioManager_BP_OnRaceModeChanged");
static_assert(offsetof(DelMarCrowdAudioManager_BP_OnRaceModeChanged, NewRaceModeTag) == 0x000000, "Member 'DelMarCrowdAudioManager_BP_OnRaceModeChanged::NewRaceModeTag' has a wrong offset!");

// Function DelMarAudio.DelMarCrowdAudioManager.BP_OnRacerStateChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarCrowdAudioManager_BP_OnRacerStateChanged final
{
public:
	struct FGameplayTag                           NewStateTag;                                       // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCrowdAudioManager_BP_OnRacerStateChanged) == 0x000004, "Wrong alignment on DelMarCrowdAudioManager_BP_OnRacerStateChanged");
static_assert(sizeof(DelMarCrowdAudioManager_BP_OnRacerStateChanged) == 0x000004, "Wrong size on DelMarCrowdAudioManager_BP_OnRacerStateChanged");
static_assert(offsetof(DelMarCrowdAudioManager_BP_OnRacerStateChanged, NewStateTag) == 0x000000, "Member 'DelMarCrowdAudioManager_BP_OnRacerStateChanged::NewStateTag' has a wrong offset!");

// Function DelMarAudio.DelMarRaceMusicManager.BP_OnCountdownTimeSet
// 0x0004 (0x0004 - 0x0000)
struct DelMarRaceMusicManager_BP_OnCountdownTimeSet final
{
public:
	float                                         TimeUntilRunStart;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceMusicManager_BP_OnCountdownTimeSet) == 0x000004, "Wrong alignment on DelMarRaceMusicManager_BP_OnCountdownTimeSet");
static_assert(sizeof(DelMarRaceMusicManager_BP_OnCountdownTimeSet) == 0x000004, "Wrong size on DelMarRaceMusicManager_BP_OnCountdownTimeSet");
static_assert(offsetof(DelMarRaceMusicManager_BP_OnCountdownTimeSet, TimeUntilRunStart) == 0x000000, "Member 'DelMarRaceMusicManager_BP_OnCountdownTimeSet::TimeUntilRunStart' has a wrong offset!");

// Function DelMarAudio.DelMarRaceMusicManager.BP_OnGameplayStateChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarRaceMusicManager_BP_OnGameplayStateChanged final
{
public:
	struct FGameplayTag                           NewStateTag;                                       // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceMusicManager_BP_OnGameplayStateChanged) == 0x000004, "Wrong alignment on DelMarRaceMusicManager_BP_OnGameplayStateChanged");
static_assert(sizeof(DelMarRaceMusicManager_BP_OnGameplayStateChanged) == 0x000004, "Wrong size on DelMarRaceMusicManager_BP_OnGameplayStateChanged");
static_assert(offsetof(DelMarRaceMusicManager_BP_OnGameplayStateChanged, NewStateTag) == 0x000000, "Member 'DelMarRaceMusicManager_BP_OnGameplayStateChanged::NewStateTag' has a wrong offset!");

// Function DelMarAudio.DelMarRaceMusicManager.BP_OnRaceModeChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarRaceMusicManager_BP_OnRaceModeChanged final
{
public:
	struct FGameplayTag                           NewModeTag;                                        // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceMusicManager_BP_OnRaceModeChanged) == 0x000004, "Wrong alignment on DelMarRaceMusicManager_BP_OnRaceModeChanged");
static_assert(sizeof(DelMarRaceMusicManager_BP_OnRaceModeChanged) == 0x000004, "Wrong size on DelMarRaceMusicManager_BP_OnRaceModeChanged");
static_assert(offsetof(DelMarRaceMusicManager_BP_OnRaceModeChanged, NewModeTag) == 0x000000, "Member 'DelMarRaceMusicManager_BP_OnRaceModeChanged::NewModeTag' has a wrong offset!");

// Function DelMarAudio.DelMarRaceMusicManager.BP_OnRacerStateChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarRaceMusicManager_BP_OnRacerStateChanged final
{
public:
	struct FGameplayTag                           NewStateTag;                                       // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceMusicManager_BP_OnRacerStateChanged) == 0x000004, "Wrong alignment on DelMarRaceMusicManager_BP_OnRacerStateChanged");
static_assert(sizeof(DelMarRaceMusicManager_BP_OnRacerStateChanged) == 0x000004, "Wrong size on DelMarRaceMusicManager_BP_OnRacerStateChanged");
static_assert(offsetof(DelMarRaceMusicManager_BP_OnRacerStateChanged, NewStateTag) == 0x000000, "Member 'DelMarRaceMusicManager_BP_OnRacerStateChanged::NewStateTag' has a wrong offset!");

// Function DelMarAudio.DelMarRaceMusicManager.HandleSpectatorViewTargetChange
// 0x0018 (0x0018 - 0x0000)
struct DelMarRaceMusicManager_HandleSpectatorViewTargetChange final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceMusicManager_HandleSpectatorViewTargetChange) == 0x000008, "Wrong alignment on DelMarRaceMusicManager_HandleSpectatorViewTargetChange");
static_assert(sizeof(DelMarRaceMusicManager_HandleSpectatorViewTargetChange) == 0x000018, "Wrong size on DelMarRaceMusicManager_HandleSpectatorViewTargetChange");
static_assert(offsetof(DelMarRaceMusicManager_HandleSpectatorViewTargetChange, PlayerController) == 0x000000, "Member 'DelMarRaceMusicManager_HandleSpectatorViewTargetChange::PlayerController' has a wrong offset!");
static_assert(offsetof(DelMarRaceMusicManager_HandleSpectatorViewTargetChange, OldViewTarget) == 0x000008, "Member 'DelMarRaceMusicManager_HandleSpectatorViewTargetChange::OldViewTarget' has a wrong offset!");
static_assert(offsetof(DelMarRaceMusicManager_HandleSpectatorViewTargetChange, NewViewTarget) == 0x000010, "Member 'DelMarRaceMusicManager_HandleSpectatorViewTargetChange::NewViewTarget' has a wrong offset!");

// Function DelMarAudio.DelMarRaceMusicManager.SetAudioTrigger
// 0x0004 (0x0004 - 0x0000)
struct DelMarRaceMusicManager_SetAudioTrigger final
{
public:
	class FName                                   InTrigger;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceMusicManager_SetAudioTrigger) == 0x000004, "Wrong alignment on DelMarRaceMusicManager_SetAudioTrigger");
static_assert(sizeof(DelMarRaceMusicManager_SetAudioTrigger) == 0x000004, "Wrong size on DelMarRaceMusicManager_SetAudioTrigger");
static_assert(offsetof(DelMarRaceMusicManager_SetAudioTrigger, InTrigger) == 0x000000, "Member 'DelMarRaceMusicManager_SetAudioTrigger::InTrigger' has a wrong offset!");

// Function DelMarAudio.DelMarRaceMusicManager.SetPlaylist
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceMusicManager_SetPlaylist final
{
public:
	class UDelMarRaceMusicPlaylist*               InPlaylist;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceMusicManager_SetPlaylist) == 0x000008, "Wrong alignment on DelMarRaceMusicManager_SetPlaylist");
static_assert(sizeof(DelMarRaceMusicManager_SetPlaylist) == 0x000008, "Wrong size on DelMarRaceMusicManager_SetPlaylist");
static_assert(offsetof(DelMarRaceMusicManager_SetPlaylist, InPlaylist) == 0x000000, "Member 'DelMarRaceMusicManager_SetPlaylist::InPlaylist' has a wrong offset!");

// Function DelMarAudio.DelMarRaceMusicManager.StartStartLineMusic
// 0x0004 (0x0004 - 0x0000)
struct DelMarRaceMusicManager_StartStartLineMusic final
{
public:
	float                                         CountdownLength;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceMusicManager_StartStartLineMusic) == 0x000004, "Wrong alignment on DelMarRaceMusicManager_StartStartLineMusic");
static_assert(sizeof(DelMarRaceMusicManager_StartStartLineMusic) == 0x000004, "Wrong size on DelMarRaceMusicManager_StartStartLineMusic");
static_assert(offsetof(DelMarRaceMusicManager_StartStartLineMusic, CountdownLength) == 0x000000, "Member 'DelMarRaceMusicManager_StartStartLineMusic::CountdownLength' has a wrong offset!");

// Function DelMarAudio.DelMarAudioVirtualizationSubsystem.HandleRaceModeChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarAudioVirtualizationSubsystem_HandleRaceModeChanged final
{
public:
	struct FDelMarEvent_RaceModeSet               Event;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioVirtualizationSubsystem_HandleRaceModeChanged) == 0x000004, "Wrong alignment on DelMarAudioVirtualizationSubsystem_HandleRaceModeChanged");
static_assert(sizeof(DelMarAudioVirtualizationSubsystem_HandleRaceModeChanged) == 0x000004, "Wrong size on DelMarAudioVirtualizationSubsystem_HandleRaceModeChanged");
static_assert(offsetof(DelMarAudioVirtualizationSubsystem_HandleRaceModeChanged, Event) == 0x000000, "Member 'DelMarAudioVirtualizationSubsystem_HandleRaceModeChanged::Event' has a wrong offset!");

}

