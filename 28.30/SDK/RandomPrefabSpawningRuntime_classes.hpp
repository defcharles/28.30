#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RandomPrefabSpawningRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"
#include "RandomPrefabSpawningRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// Class RandomPrefabSpawningRuntime.FortPrefabSpawner
// 0x0030 (0x02C0 - 0x0290)
class AFortPrefabSpawner final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiredProperties;                                // 0x0298(0x0020)(Edit, NativeAccessSpecifierPrivate)
	bool                                          bWorldReadyCalled;                                 // 0x02B8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPrefabSpawner">();
	}
	static class AFortPrefabSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortPrefabSpawner>();
	}
};
static_assert(alignof(AFortPrefabSpawner) == 0x000008, "Wrong alignment on AFortPrefabSpawner");
static_assert(sizeof(AFortPrefabSpawner) == 0x0002C0, "Wrong size on AFortPrefabSpawner");
static_assert(offsetof(AFortPrefabSpawner, RequiredProperties) == 0x000298, "Member 'AFortPrefabSpawner::RequiredProperties' has a wrong offset!");
static_assert(offsetof(AFortPrefabSpawner, bWorldReadyCalled) == 0x0002B8, "Member 'AFortPrefabSpawner::bWorldReadyCalled' has a wrong offset!");

// Class RandomPrefabSpawningRuntime.FortRandomPrefabSpawnHelper
// 0x0060 (0x0100 - 0x00A0)
class UFortRandomPrefabSpawnHelper final : public UGameStateComponent
{
public:
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortRandomPrefabData>          AllPrefabs;                                        // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FFortRandomPrefabData>          PrefabPool;                                        // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         bAcceptDuplicatesWhenOutOfUniquePrefabs;           // 0x00D8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortRandomPrefabSpawnHelper">();
	}
	static class UFortRandomPrefabSpawnHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortRandomPrefabSpawnHelper>();
	}
};
static_assert(alignof(UFortRandomPrefabSpawnHelper) == 0x000008, "Wrong alignment on UFortRandomPrefabSpawnHelper");
static_assert(sizeof(UFortRandomPrefabSpawnHelper) == 0x000100, "Wrong size on UFortRandomPrefabSpawnHelper");
static_assert(offsetof(UFortRandomPrefabSpawnHelper, AllPrefabs) == 0x0000B0, "Member 'UFortRandomPrefabSpawnHelper::AllPrefabs' has a wrong offset!");
static_assert(offsetof(UFortRandomPrefabSpawnHelper, PrefabPool) == 0x0000C0, "Member 'UFortRandomPrefabSpawnHelper::PrefabPool' has a wrong offset!");
static_assert(offsetof(UFortRandomPrefabSpawnHelper, bAcceptDuplicatesWhenOutOfUniquePrefabs) == 0x0000D8, "Member 'UFortRandomPrefabSpawnHelper::bAcceptDuplicatesWhenOutOfUniquePrefabs' has a wrong offset!");

}

