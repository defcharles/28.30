#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationCoreUI

#include "Basic.hpp"

#include "ModelViewViewModel_classes.hpp"
#include "ItemizationCoreRuntime_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class ItemizationCoreUI.InventoryCollectionViewModel
// 0x0058 (0x00C0 - 0x0068)
class UInventoryCollectionViewModel final : public UMVVMViewModelBase
{
public:
	TArray<class UInventoryViewModel*>            InventoryViewModels;                               // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UInventoryItemEntryViewModel*           SelectedInventoryItemEntryViewModel;               // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInventoryItemEntryViewModel*           LastAmountChangedInventoryItemEntryViewModel;      // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x38];                                      // 0x0088(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeViewModel(class UObject* InitializingObject);
	void UnbindInventoryCollection(const bool bUnusedParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InventoryCollectionViewModel">();
	}
	static class UInventoryCollectionViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventoryCollectionViewModel>();
	}
};
static_assert(alignof(UInventoryCollectionViewModel) == 0x000008, "Wrong alignment on UInventoryCollectionViewModel");
static_assert(sizeof(UInventoryCollectionViewModel) == 0x0000C0, "Wrong size on UInventoryCollectionViewModel");
static_assert(offsetof(UInventoryCollectionViewModel, InventoryViewModels) == 0x000068, "Member 'UInventoryCollectionViewModel::InventoryViewModels' has a wrong offset!");
static_assert(offsetof(UInventoryCollectionViewModel, SelectedInventoryItemEntryViewModel) == 0x000078, "Member 'UInventoryCollectionViewModel::SelectedInventoryItemEntryViewModel' has a wrong offset!");
static_assert(offsetof(UInventoryCollectionViewModel, LastAmountChangedInventoryItemEntryViewModel) == 0x000080, "Member 'UInventoryCollectionViewModel::LastAmountChangedInventoryItemEntryViewModel' has a wrong offset!");

// Class ItemizationCoreUI.InventoryItemEntryViewModel
// 0x0140 (0x01A8 - 0x0068)
class UInventoryItemEntryViewModel final : public UMVVMViewModelBase
{
public:
	bool                                          bItemSelected;                                     // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bItemBeingSwapped;                                 // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCanDrop;                                          // 0x006A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCanSwap;                                          // 0x006B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsCooldownActive;                                 // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CooldownTimeLeft;                                  // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CooldownProgress;                                  // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int64                                         ItemAmountChanged;                                 // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture2D*                             CachedItemIcon;                                    // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture2D*                             CachedSmallItemIcon;                               // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0x118];                                     // 0x0090(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DropAll(const bool bUnused);
	void DropAmount(const int64 Amount);
	void DropHalf(const bool bUnused);
	void SetEquippableItemActive(const bool bActive);
	void SetItemSlotNumber(const int32 SlotNumber);
	void ToggleEquippableItemActive(const bool bUnused);
	void UpdateCanSwap(const class UInventoryItemEntryViewModel* SwapInventoryItemEntryViewModel);
	void UseItem(const bool bUnused);

	bool CanItemBeMadeActive() const;
	bool CanItemBeMadeInactive() const;
	class UInputAction* GetEquipSlotInputAction() const;
	const struct FGuid GetInventoryID() const;
	int64 GetItemAmount() const;
	const class UItemDefinitionBase* GetItemDefinition() const;
	class FText GetItemDescription() const;
	const struct FGuid GetItemEntryID() const;
	class UTexture2D* GetItemIcon() const;
	EItemIconDisplayTextType GetItemIconDisplayTextType() const;
	class FText GetItemName() const;
	int64 GetItemPrimaryAmmoCount() const;
	const class UItemRarity* GetItemRarity() const;
	int32 GetItemSlotNumber() const;
	const class UItemType* GetItemType() const;
	class UTexture2D* GetSmallItemIcon() const;
	TSoftObjectPtr<class UTexture2D> GetSoftItemIcon() const;
	TSoftObjectPtr<class UTexture2D> GetSoftSmallItemIcon() const;
	bool IsEquipSlotInputBindingVisible() const;
	bool IsItemActive() const;
	bool IsItemEntryIDValid() const;
	bool IsItemIconLoading() const;
	bool IsSmallItemIconLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InventoryItemEntryViewModel">();
	}
	static class UInventoryItemEntryViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventoryItemEntryViewModel>();
	}
};
static_assert(alignof(UInventoryItemEntryViewModel) == 0x000008, "Wrong alignment on UInventoryItemEntryViewModel");
static_assert(sizeof(UInventoryItemEntryViewModel) == 0x0001A8, "Wrong size on UInventoryItemEntryViewModel");
static_assert(offsetof(UInventoryItemEntryViewModel, bItemSelected) == 0x000068, "Member 'UInventoryItemEntryViewModel::bItemSelected' has a wrong offset!");
static_assert(offsetof(UInventoryItemEntryViewModel, bItemBeingSwapped) == 0x000069, "Member 'UInventoryItemEntryViewModel::bItemBeingSwapped' has a wrong offset!");
static_assert(offsetof(UInventoryItemEntryViewModel, bCanDrop) == 0x00006A, "Member 'UInventoryItemEntryViewModel::bCanDrop' has a wrong offset!");
static_assert(offsetof(UInventoryItemEntryViewModel, bCanSwap) == 0x00006B, "Member 'UInventoryItemEntryViewModel::bCanSwap' has a wrong offset!");
static_assert(offsetof(UInventoryItemEntryViewModel, bIsCooldownActive) == 0x00006C, "Member 'UInventoryItemEntryViewModel::bIsCooldownActive' has a wrong offset!");
static_assert(offsetof(UInventoryItemEntryViewModel, CooldownTimeLeft) == 0x000070, "Member 'UInventoryItemEntryViewModel::CooldownTimeLeft' has a wrong offset!");
static_assert(offsetof(UInventoryItemEntryViewModel, CooldownProgress) == 0x000074, "Member 'UInventoryItemEntryViewModel::CooldownProgress' has a wrong offset!");
static_assert(offsetof(UInventoryItemEntryViewModel, ItemAmountChanged) == 0x000078, "Member 'UInventoryItemEntryViewModel::ItemAmountChanged' has a wrong offset!");
static_assert(offsetof(UInventoryItemEntryViewModel, CachedItemIcon) == 0x000080, "Member 'UInventoryItemEntryViewModel::CachedItemIcon' has a wrong offset!");
static_assert(offsetof(UInventoryItemEntryViewModel, CachedSmallItemIcon) == 0x000088, "Member 'UInventoryItemEntryViewModel::CachedSmallItemIcon' has a wrong offset!");

// Class ItemizationCoreUI.InventoryViewModel
// 0x0068 (0x00D0 - 0x0068)
class UInventoryViewModel final : public UMVVMViewModelBase
{
public:
	TArray<class UInventoryItemEntryViewModel*>   InventoryItemEntryViewModels;                      // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UInventoryItemEntryViewModel*           ActiveItemEntryViewModel;                          // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInventoryItemEntryViewModel*           InventoryItemEntryViewModelBeingSwapped;           // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x48];                                      // 0x0088(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const class UInventoryDefinition* GetInventoryDefinition() const;
	const class FText GetInventoryDescription() const;
	const class FText GetInventoryName() const;
	int32 GetTotalSlots() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InventoryViewModel">();
	}
	static class UInventoryViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventoryViewModel>();
	}
};
static_assert(alignof(UInventoryViewModel) == 0x000008, "Wrong alignment on UInventoryViewModel");
static_assert(sizeof(UInventoryViewModel) == 0x0000D0, "Wrong size on UInventoryViewModel");
static_assert(offsetof(UInventoryViewModel, InventoryItemEntryViewModels) == 0x000068, "Member 'UInventoryViewModel::InventoryItemEntryViewModels' has a wrong offset!");
static_assert(offsetof(UInventoryViewModel, ActiveItemEntryViewModel) == 0x000078, "Member 'UInventoryViewModel::ActiveItemEntryViewModel' has a wrong offset!");
static_assert(offsetof(UInventoryViewModel, InventoryItemEntryViewModelBeingSwapped) == 0x000080, "Member 'UInventoryViewModel::InventoryItemEntryViewModelBeingSwapped' has a wrong offset!");

// Class ItemizationCoreUI.InventoryViewModelAllowedConversionFunctions
// 0x0000 (0x0028 - 0x0028)
class UInventoryViewModelAllowedConversionFunctions : public UBlueprintFunctionLibrary
{
public:
	static class UInventoryViewModel* FindInventoryViewModel(const class UInventoryDefinition* InventoryDefinition, const TArray<class UInventoryViewModel*>& InventoryViewModels);
	static TArray<class UInventoryItemEntryViewModel*> GetInventoryItemEntryViewModels(const TArray<class UInventoryItemEntryViewModel*>& InventoryItemEntryViewModels, const bool bIncludeEmptySlots);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InventoryViewModelAllowedConversionFunctions">();
	}
	static class UInventoryViewModelAllowedConversionFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventoryViewModelAllowedConversionFunctions>();
	}
};
static_assert(alignof(UInventoryViewModelAllowedConversionFunctions) == 0x000008, "Wrong alignment on UInventoryViewModelAllowedConversionFunctions");
static_assert(sizeof(UInventoryViewModelAllowedConversionFunctions) == 0x000028, "Wrong size on UInventoryViewModelAllowedConversionFunctions");

// Class ItemizationCoreUI.InventoryViewModelConversionFunctions
// 0x0000 (0x0028 - 0x0028)
class UInventoryViewModelConversionFunctions final : public UInventoryViewModelAllowedConversionFunctions
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InventoryViewModelConversionFunctions">();
	}
	static class UInventoryViewModelConversionFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInventoryViewModelConversionFunctions>();
	}
};
static_assert(alignof(UInventoryViewModelConversionFunctions) == 0x000008, "Wrong alignment on UInventoryViewModelConversionFunctions");
static_assert(sizeof(UInventoryViewModelConversionFunctions) == 0x000028, "Wrong size on UInventoryViewModelConversionFunctions");

// Class ItemizationCoreUI.UniformGridEntryPanel
// 0x00C8 (0x0280 - 0x01B8)
class UUniformGridEntryPanel final : public UUniformGridPanel
{
public:
	TMulticastInlineDelegate<void()>              OnGridItemsSet;                                    // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UWidget* GridEntry)> OnGridEntryAdded;                                  // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UWidget* GridEntry)> OnGridEntryRemoved;                                // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                EntryWidgetClass;                                  // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumColumns;                                        // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EHorizontalAlignment                          SlotHorizontalAlignment;                           // 0x01F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EVerticalAlignment                            SlotVerticalAlignment;                             // 0x01F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F6[0x2];                                      // 0x01F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserWidgetPool                        EntryWidgetPool;                                   // 0x01F8(0x0088)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void SetGridItems(const TArray<class UObject*>& GridItems);
	void SetSlotAlignment(const EHorizontalAlignment InSlotHorizontalAlignment, const EVerticalAlignment InSlotVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UniformGridEntryPanel">();
	}
	static class UUniformGridEntryPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUniformGridEntryPanel>();
	}
};
static_assert(alignof(UUniformGridEntryPanel) == 0x000008, "Wrong alignment on UUniformGridEntryPanel");
static_assert(sizeof(UUniformGridEntryPanel) == 0x000280, "Wrong size on UUniformGridEntryPanel");
static_assert(offsetof(UUniformGridEntryPanel, OnGridItemsSet) == 0x0001B8, "Member 'UUniformGridEntryPanel::OnGridItemsSet' has a wrong offset!");
static_assert(offsetof(UUniformGridEntryPanel, OnGridEntryAdded) == 0x0001C8, "Member 'UUniformGridEntryPanel::OnGridEntryAdded' has a wrong offset!");
static_assert(offsetof(UUniformGridEntryPanel, OnGridEntryRemoved) == 0x0001D8, "Member 'UUniformGridEntryPanel::OnGridEntryRemoved' has a wrong offset!");
static_assert(offsetof(UUniformGridEntryPanel, EntryWidgetClass) == 0x0001E8, "Member 'UUniformGridEntryPanel::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UUniformGridEntryPanel, NumColumns) == 0x0001F0, "Member 'UUniformGridEntryPanel::NumColumns' has a wrong offset!");
static_assert(offsetof(UUniformGridEntryPanel, SlotHorizontalAlignment) == 0x0001F4, "Member 'UUniformGridEntryPanel::SlotHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UUniformGridEntryPanel, SlotVerticalAlignment) == 0x0001F5, "Member 'UUniformGridEntryPanel::SlotVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UUniformGridEntryPanel, EntryWidgetPool) == 0x0001F8, "Member 'UUniformGridEntryPanel::EntryWidgetPool' has a wrong offset!");

}

