#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AscenderCodeRuntime

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class AscenderCodeRuntime.FortCheatManager_AscenderZipline
// 0x0000 (0x0028 - 0x0028)
class UFortCheatManager_AscenderZipline final : public UChildCheatManager
{
public:
	void RemoveAscenders(const bool bRemoveAscendersOn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_AscenderZipline">();
	}
	static class UFortCheatManager_AscenderZipline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_AscenderZipline>();
	}
};
static_assert(alignof(UFortCheatManager_AscenderZipline) == 0x000008, "Wrong alignment on UFortCheatManager_AscenderZipline");
static_assert(sizeof(UFortCheatManager_AscenderZipline) == 0x000028, "Wrong size on UFortCheatManager_AscenderZipline");

// Class AscenderCodeRuntime.FortAscenderZipline
// 0x0358 (0x0FF0 - 0x0C98)
class AFortAscenderZipline : public AFortAthenaSplineZipline
{
public:
	TMulticastInlineDelegate<void()>              OnAscenderSetupComplete;                           // 0x0C98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                   SplineTopAttachPointName;                          // 0x0CA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoFindSplineEndLocation;                        // 0x0CAC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CAD[0x3];                                      // 0x0CAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplineOffsetFromGround;                            // 0x0CB0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CableOffsetFromSplineEnd;                          // 0x0CB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SplineLength;                                      // 0x0CB8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CBC[0x4];                                      // 0x0CBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            SplineStaticMesh;                                  // 0x0CC0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESplineMeshAxis                               MeshForwardAxis;                                   // 0x0CC8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHandleReturning;                                  // 0x0CC9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CCA[0x2];                                      // 0x0CCA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HandleReturnSpeed;                                 // 0x0CCC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCableDropping;                                    // 0x0CD0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CD1[0x3];                                      // 0x0CD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CableDropSpeed;                                    // 0x0CD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawRotationOffsetWhileUsingHandle;                 // 0x0CD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawRotationOffsetWhileSlidingDown;                 // 0x0CDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseComplexSplineCollision;                        // 0x0CE0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CE1[0x3];                                      // 0x0CE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SimpleSplineCollisionRadius;                       // 0x0CE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SimpleSplineCollisionHeightExtension;              // 0x0CE8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CEC[0x4];                                      // 0x0CEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         DescendMinDistanceFromBottom;                      // 0x0CF0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AscendReachedEndHorizontalLaunchSpeed;             // 0x0D18(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AscendReachedEndVerticalLaunchSpeed;               // 0x0D40(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AscendJumpedOffHorizontalLaunchSpeed;              // 0x0D68(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AscendJumpedOffVerticalLaunchSpeed;                // 0x0D90(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DescendReachedEndHorizontalLaunchSpeed;            // 0x0DB8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DescendReachedEndVerticalLaunchSpeed;              // 0x0DE0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DescendJumpedOffHorizontalLaunchSpeed;             // 0x0E08(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DescendJumpedOffVerticalLaunchSpeed;               // 0x0E30(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HandleActorHitPlayerHorizontalLaunchSpeed;         // 0x0E58(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HandleActorHitPlayerVerticalLaunchSpeed;           // 0x0E80(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector                                HandleDestroyBuildingsOverlapExtents;              // 0x0EA8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlayerDestroyBuildingsOverlapExtents;              // 0x0EC0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                InitialSplineEndLocation;                          // 0x0ED8(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentSplineEndLocation;                          // 0x0EF0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetSplineEndLocation;                           // 0x0F08(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentHandleLocation;                             // 0x0F20(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPrimitiveComponent>     CurrentInteractComponent;                          // 0x0F38(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerPawn>         PawnUsingHandle;                                   // 0x0F40(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerPawn>         PreviousPawnUsingHandle;                           // 0x0F48(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0F50(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      SimpleSplineMeshCollision;                         // 0x0F58(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ABuildingActor>          FloorActor;                                        // 0x0F60(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AFortPlayerPawn>> RotationLockedPawns;                               // 0x0F68(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_F78[0x68];                                     // 0x0F78(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLinkToActorComponent*              LinkToActorComponent;                              // 0x0FE0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortZiplineLinkComponent*              ZiplineLinkComponent;                              // 0x0FE8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_HandlePlayerStartedUsingHandle(class AFortPlayerPawn* Player);
	void BP_HandlePlayerStoppedUsingHandle(class AFortPlayerPawn* Player);
	void BP_HandleStartedLoweringCable();
	void BP_HandleStartedLoweringHandle();
	void BP_HandleStoppedLoweringCable();
	void BP_HandleStoppedLoweringHandle();
	void BP_HandleUpdatedLoweringCable();
	void BP_HandleUpdatedLoweringHandle();
	void HandleFloorActorDestroyed(class AActor* Actor);
	void HandleFloorActorHealthChanged();
	void HandlePawnUsingHandleDied(class AFortPawn* DeadPawn);
	void OnRep_InitialSplineEndLocation();
	void OnRep_PawnUsingHandle();
	void OnRep_TargetSplineEndLocation();
	void SetupAscender(const bool bFromConstruction, const bool bFromReplication);

	void ApplyStructureDamage(class ABuildingSMActor* BuildingActor, class AActor* DamageSource) const;
	class UPrimitiveComponent* GetHandleComponent() const;
	class UPrimitiveComponent* GetInteractComponentOverride(class AFortPlayerPawn* InteractingPawn, class UPrimitiveComponent* InteractComponent) const;
	class AFortPlayerPawn* GetPawnUsingHandle() const;
	class UPrimitiveComponent* GetTopComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAscenderZipline">();
	}
	static class AFortAscenderZipline* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAscenderZipline>();
	}
};
static_assert(alignof(AFortAscenderZipline) == 0x000008, "Wrong alignment on AFortAscenderZipline");
static_assert(sizeof(AFortAscenderZipline) == 0x000FF0, "Wrong size on AFortAscenderZipline");
static_assert(offsetof(AFortAscenderZipline, OnAscenderSetupComplete) == 0x000C98, "Member 'AFortAscenderZipline::OnAscenderSetupComplete' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SplineTopAttachPointName) == 0x000CA8, "Member 'AFortAscenderZipline::SplineTopAttachPointName' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, bAutoFindSplineEndLocation) == 0x000CAC, "Member 'AFortAscenderZipline::bAutoFindSplineEndLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SplineOffsetFromGround) == 0x000CB0, "Member 'AFortAscenderZipline::SplineOffsetFromGround' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CableOffsetFromSplineEnd) == 0x000CB4, "Member 'AFortAscenderZipline::CableOffsetFromSplineEnd' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SplineLength) == 0x000CB8, "Member 'AFortAscenderZipline::SplineLength' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SplineStaticMesh) == 0x000CC0, "Member 'AFortAscenderZipline::SplineStaticMesh' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, MeshForwardAxis) == 0x000CC8, "Member 'AFortAscenderZipline::MeshForwardAxis' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, bHandleReturning) == 0x000CC9, "Member 'AFortAscenderZipline::bHandleReturning' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, HandleReturnSpeed) == 0x000CCC, "Member 'AFortAscenderZipline::HandleReturnSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, bCableDropping) == 0x000CD0, "Member 'AFortAscenderZipline::bCableDropping' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CableDropSpeed) == 0x000CD4, "Member 'AFortAscenderZipline::CableDropSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, YawRotationOffsetWhileUsingHandle) == 0x000CD8, "Member 'AFortAscenderZipline::YawRotationOffsetWhileUsingHandle' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, YawRotationOffsetWhileSlidingDown) == 0x000CDC, "Member 'AFortAscenderZipline::YawRotationOffsetWhileSlidingDown' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, bUseComplexSplineCollision) == 0x000CE0, "Member 'AFortAscenderZipline::bUseComplexSplineCollision' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SimpleSplineCollisionRadius) == 0x000CE4, "Member 'AFortAscenderZipline::SimpleSplineCollisionRadius' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SimpleSplineCollisionHeightExtension) == 0x000CE8, "Member 'AFortAscenderZipline::SimpleSplineCollisionHeightExtension' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendMinDistanceFromBottom) == 0x000CF0, "Member 'AFortAscenderZipline::DescendMinDistanceFromBottom' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, AscendReachedEndHorizontalLaunchSpeed) == 0x000D18, "Member 'AFortAscenderZipline::AscendReachedEndHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, AscendReachedEndVerticalLaunchSpeed) == 0x000D40, "Member 'AFortAscenderZipline::AscendReachedEndVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, AscendJumpedOffHorizontalLaunchSpeed) == 0x000D68, "Member 'AFortAscenderZipline::AscendJumpedOffHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, AscendJumpedOffVerticalLaunchSpeed) == 0x000D90, "Member 'AFortAscenderZipline::AscendJumpedOffVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendReachedEndHorizontalLaunchSpeed) == 0x000DB8, "Member 'AFortAscenderZipline::DescendReachedEndHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendReachedEndVerticalLaunchSpeed) == 0x000DE0, "Member 'AFortAscenderZipline::DescendReachedEndVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendJumpedOffHorizontalLaunchSpeed) == 0x000E08, "Member 'AFortAscenderZipline::DescendJumpedOffHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendJumpedOffVerticalLaunchSpeed) == 0x000E30, "Member 'AFortAscenderZipline::DescendJumpedOffVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, HandleActorHitPlayerHorizontalLaunchSpeed) == 0x000E58, "Member 'AFortAscenderZipline::HandleActorHitPlayerHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, HandleActorHitPlayerVerticalLaunchSpeed) == 0x000E80, "Member 'AFortAscenderZipline::HandleActorHitPlayerVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, HandleDestroyBuildingsOverlapExtents) == 0x000EA8, "Member 'AFortAscenderZipline::HandleDestroyBuildingsOverlapExtents' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, PlayerDestroyBuildingsOverlapExtents) == 0x000EC0, "Member 'AFortAscenderZipline::PlayerDestroyBuildingsOverlapExtents' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, InitialSplineEndLocation) == 0x000ED8, "Member 'AFortAscenderZipline::InitialSplineEndLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CurrentSplineEndLocation) == 0x000EF0, "Member 'AFortAscenderZipline::CurrentSplineEndLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, TargetSplineEndLocation) == 0x000F08, "Member 'AFortAscenderZipline::TargetSplineEndLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CurrentHandleLocation) == 0x000F20, "Member 'AFortAscenderZipline::CurrentHandleLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CurrentInteractComponent) == 0x000F38, "Member 'AFortAscenderZipline::CurrentInteractComponent' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, PawnUsingHandle) == 0x000F40, "Member 'AFortAscenderZipline::PawnUsingHandle' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, PreviousPawnUsingHandle) == 0x000F48, "Member 'AFortAscenderZipline::PreviousPawnUsingHandle' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SplineMesh) == 0x000F50, "Member 'AFortAscenderZipline::SplineMesh' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SimpleSplineMeshCollision) == 0x000F58, "Member 'AFortAscenderZipline::SimpleSplineMeshCollision' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, FloorActor) == 0x000F60, "Member 'AFortAscenderZipline::FloorActor' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, RotationLockedPawns) == 0x000F68, "Member 'AFortAscenderZipline::RotationLockedPawns' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, LinkToActorComponent) == 0x000FE0, "Member 'AFortAscenderZipline::LinkToActorComponent' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, ZiplineLinkComponent) == 0x000FE8, "Member 'AFortAscenderZipline::ZiplineLinkComponent' has a wrong offset!");

}

