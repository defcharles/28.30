#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayGraph

#include "Basic.hpp"

#include "GameplayGraph_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class GameplayGraph.GraphElement
// 0x0020 (0x0048 - 0x0028)
class UGraphElement : public UObject
{
public:
	EGraphElementType                             ElementType;                                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGraphUniqueIndex                      UniqueIndex;                                       // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UGraph>                  ParentGraph;                                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GraphElement">();
	}
	static class UGraphElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGraphElement>();
	}
};
static_assert(alignof(UGraphElement) == 0x000008, "Wrong alignment on UGraphElement");
static_assert(sizeof(UGraphElement) == 0x000048, "Wrong size on UGraphElement");
static_assert(offsetof(UGraphElement, ElementType) == 0x000028, "Member 'UGraphElement::ElementType' has a wrong offset!");
static_assert(offsetof(UGraphElement, UniqueIndex) == 0x00002C, "Member 'UGraphElement::UniqueIndex' has a wrong offset!");
static_assert(offsetof(UGraphElement, ParentGraph) == 0x000040, "Member 'UGraphElement::ParentGraph' has a wrong offset!");

// Class GameplayGraph.Graph
// 0x0190 (0x01B8 - 0x0028)
class UGraph : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGraphVertexHandle, class UGraphVertex*> Vertices;                                          // 0x0070(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C0[0x50];                                      // 0x00C0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGraphEdgeHandle, class UGraphEdge*> Edges;                                             // 0x0110(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<struct FGraphIslandHandle, class UGraphIsland*> Islands;                                           // 0x0160(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x8];                                      // 0x01B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Graph">();
	}
	static class UGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGraph>();
	}
};
static_assert(alignof(UGraph) == 0x000008, "Wrong alignment on UGraph");
static_assert(sizeof(UGraph) == 0x0001B8, "Wrong size on UGraph");
static_assert(offsetof(UGraph, Vertices) == 0x000070, "Member 'UGraph::Vertices' has a wrong offset!");
static_assert(offsetof(UGraph, Edges) == 0x000110, "Member 'UGraph::Edges' has a wrong offset!");
static_assert(offsetof(UGraph, Islands) == 0x000160, "Member 'UGraph::Islands' has a wrong offset!");

// Class GameplayGraph.GraphEdge
// 0x0038 (0x0080 - 0x0048)
class UGraphEdge final : public UGraphElement
{
public:
	struct FGraphVertexHandle                     A;                                                 // 0x0048(0x001C)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGraphVertexHandle                     B;                                                 // 0x0064(0x001C)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GraphEdge">();
	}
	static class UGraphEdge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGraphEdge>();
	}
};
static_assert(alignof(UGraphEdge) == 0x000008, "Wrong alignment on UGraphEdge");
static_assert(sizeof(UGraphEdge) == 0x000080, "Wrong size on UGraphEdge");
static_assert(offsetof(UGraphEdge, A) == 0x000048, "Member 'UGraphEdge::A' has a wrong offset!");
static_assert(offsetof(UGraphEdge, B) == 0x000064, "Member 'UGraphEdge::B' has a wrong offset!");

// Class GameplayGraph.GraphIsland
// 0x00B8 (0x0100 - 0x0048)
class UGraphIsland : public UGraphElement
{
public:
	uint8                                         Pad_48[0x60];                                      // 0x0048(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FGraphVertexHandle>               Vertices;                                          // 0x00A8(0x0050)(SaveGame, NativeAccessSpecifierPrivate)
	bool                                          bPendingDestroy;                                   // 0x00F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EGraphIslandOperations                        AllowedOperations;                                 // 0x00FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GraphIsland">();
	}
	static class UGraphIsland* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGraphIsland>();
	}
};
static_assert(alignof(UGraphIsland) == 0x000008, "Wrong alignment on UGraphIsland");
static_assert(sizeof(UGraphIsland) == 0x000100, "Wrong size on UGraphIsland");
static_assert(offsetof(UGraphIsland, Vertices) == 0x0000A8, "Member 'UGraphIsland::Vertices' has a wrong offset!");
static_assert(offsetof(UGraphIsland, bPendingDestroy) == 0x0000F8, "Member 'UGraphIsland::bPendingDestroy' has a wrong offset!");
static_assert(offsetof(UGraphIsland, AllowedOperations) == 0x0000FC, "Member 'UGraphIsland::AllowedOperations' has a wrong offset!");

// Class GameplayGraph.GraphVertex
// 0x00A0 (0x00E8 - 0x0048)
class UGraphVertex : public UGraphElement
{
public:
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGraphVertexHandle, struct FGraphEdgeHandle> Edges;                                             // 0x0078(0x0050)(NativeAccessSpecifierPrivate)
	struct FGraphIslandHandle                     ParentIsland;                                      // 0x00C8(0x001C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GraphVertex">();
	}
	static class UGraphVertex* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGraphVertex>();
	}
};
static_assert(alignof(UGraphVertex) == 0x000008, "Wrong alignment on UGraphVertex");
static_assert(sizeof(UGraphVertex) == 0x0000E8, "Wrong size on UGraphVertex");
static_assert(offsetof(UGraphVertex, Edges) == 0x000078, "Member 'UGraphVertex::Edges' has a wrong offset!");
static_assert(offsetof(UGraphVertex, ParentIsland) == 0x0000C8, "Member 'UGraphVertex::ParentIsland' has a wrong offset!");

}

