#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamCatalogRuntime

#include "Basic.hpp"

#include "FMJamCatalogRuntime_classes.hpp"
#include "FMJamCatalogRuntime_parameters.hpp"


namespace SDK
{

// Function FMJamCatalogRuntime.FMJamLoop.GetKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKey                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicKey UFMJamLoop::GetKey() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetKey");

	Params::FMJamLoop_GetKey Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamLoop.GetLoopType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFMJamLoopType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFMJamLoopType UFMJamLoop::GetLoopType() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLoopType");

	Params::FMJamLoop_GetLoopType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamLoop.GetMajorMidi
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UMidiFile>         OutMetasoundMidi                                       (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UFusionPatch>      OutMetasoundFusion                                     (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMJamLoop::GetMajorMidi(TSoftObjectPtr<class UMidiFile>* OutMetasoundMidi, TSoftObjectPtr<class UFusionPatch>* OutMetasoundFusion) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMajorMidi");

	Params::FMJamLoop_GetMajorMidi Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutMetasoundMidi != nullptr)
		*OutMetasoundMidi = Parms.OutMetasoundMidi;

	if (OutMetasoundFusion != nullptr)
		*OutMetasoundFusion = Parms.OutMetasoundFusion;
}


// Function FMJamCatalogRuntime.FMJamLoop.GetMidi
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKeyMode                           Mode                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMidiFile>         OutMetasoundMidi                                       (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UFusionPatch>      OutMetasoundFusion                                     (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMJamLoop::GetMidi(const EMusicKeyMode Mode, TSoftObjectPtr<class UMidiFile>* OutMetasoundMidi, TSoftObjectPtr<class UFusionPatch>* OutMetasoundFusion) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMidi");

	Params::FMJamLoop_GetMidi Parms{};

	Parms.Mode = Mode;

	UObject::ProcessEvent(Func, &Parms);

	if (OutMetasoundMidi != nullptr)
		*OutMetasoundMidi = Parms.OutMetasoundMidi;

	if (OutMetasoundFusion != nullptr)
		*OutMetasoundFusion = Parms.OutMetasoundFusion;
}


// Function FMJamCatalogRuntime.FMJamLoop.GetMinorMidi
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UMidiFile>         OutMetasoundMidi                                       (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UFusionPatch>      OutMetasoundFusion                                     (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMJamLoop::GetMinorMidi(TSoftObjectPtr<class UMidiFile>* OutMetasoundMidi, TSoftObjectPtr<class UFusionPatch>* OutMetasoundFusion) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMinorMidi");

	Params::FMJamLoop_GetMinorMidi Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutMetasoundMidi != nullptr)
		*OutMetasoundMidi = Parms.OutMetasoundMidi;

	if (OutMetasoundFusion != nullptr)
		*OutMetasoundFusion = Parms.OutMetasoundFusion;
}


// Function FMJamCatalogRuntime.FMJamLoop.GetSemitoneTranspose
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKey                               ToKey                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFMJamLoop::GetSemitoneTranspose(const EMusicKey ToKey) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSemitoneTranspose");

	Params::FMJamLoop_GetSemitoneTranspose Parms{};

	Parms.ToKey = ToKey;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamLoop.GetSong
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFMJamSong*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMJamSong* UFMJamLoop::GetSong() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSong");

	Params::FMJamLoop_GetSong Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamLoop.HasPitch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMJamLoop::HasPitch() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HasPitch");

	Params::FMJamLoop_HasPitch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetAdditionalTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer UFMJamSong::GetAdditionalTags() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetAdditionalTags");

	Params::FMJamSong_GetAdditionalTags Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetArtist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMJamSong::GetArtist() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetArtist");

	Params::FMJamSong_GetArtist Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKey                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicKey UFMJamSong::GetKey() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetKey");

	Params::FMJamSong_GetKey Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetLipSyncAnimAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UAnimSequence>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UAnimSequence> UFMJamSong::GetLipSyncAnimAsset() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLipSyncAnimAsset");

	Params::FMJamSong_GetLipSyncAnimAsset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFMJamLoopType                          LoopType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFMJamLoop*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMJamLoop* UFMJamSong::GetLoop(const EFMJamLoopType LoopType) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLoop");

	Params::FMJamSong_GetLoop Parms{};

	Parms.LoopType = LoopType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetLoopTypeForLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFMJamLoop*                       Loop                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFMJamLoopType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFMJamLoopType UFMJamSong::GetLoopTypeForLoop(const class UFMJamLoop* Loop) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLoopTypeForLoop");

	Params::FMJamSong_GetLoopTypeForLoop Parms{};

	Parms.Loop = Loop;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKeyMode                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicKeyMode UFMJamSong::GetMode() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMode");

	Params::FMJamSong_GetMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetSongShortName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UFMJamSong::GetSongShortName() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSongShortName");

	Params::FMJamSong_GetSongShortName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetTempo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFMJamSong::GetTempo() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTempo");

	Params::FMJamSong_GetTempo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetTitle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFMJamSong::GetTitle() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetTitle");

	Params::FMJamSong_GetTitle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSong.GetYear
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFMJamSong::GetYear() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetYear");

	Params::FMJamSong_GetYear Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.GetFMJamSongCatalog
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFMJamSongCatalog*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMJamSongCatalog* UFMJamSongCatalog::GetFMJamSongCatalog(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetFMJamSongCatalog");

	Params::FMJamSongCatalog_GetFMJamSongCatalog Parms{};

	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.GetLoopTypeByTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     LoopTag                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFMJamLoopType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFMJamLoopType UFMJamSongCatalog::GetLoopTypeByTag(const struct FGameplayTag& LoopTag)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetLoopTypeByTag");

	Params::FMJamSongCatalog_GetLoopTypeByTag Parms{};

	Parms.LoopTag = std::move(LoopTag);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.GetLoopTypeText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EFMJamLoopType                          LoopType                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFMJamSongCatalog::GetLoopTypeText(const EFMJamLoopType& LoopType)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("GetLoopTypeText");

	Params::FMJamSongCatalog_GetLoopTypeText Parms{};

	Parms.LoopType = LoopType;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.TryGetFMJamSongCatalog
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFMJamSongCatalog*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMJamSongCatalog* UFMJamSongCatalog::TryGetFMJamSongCatalog(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("TryGetFMJamSongCatalog");

	Params::FMJamSongCatalog_TryGetFMJamSongCatalog Parms{};

	Parms.WorldContextObject = WorldContextObject;

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.OnSongCatalogRetrieved
// (Final, Native, Private)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMJamSongCatalog::OnSongCatalogRetrieved(bool bSuccess)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSongCatalogRetrieved");

	Params::FMJamSongCatalog_OnSongCatalogRetrieved Parms{};

	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.GetRandomSongList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   NumSongs                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagQuery                TagQuery                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UFMJamSong*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UFMJamSong*> UFMJamSongCatalog::GetRandomSongList(const int32 NumSongs, const struct FGameplayTagQuery& TagQuery) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRandomSongList");

	Params::FMJamSongCatalog_GetRandomSongList Parms{};

	Parms.NumSongs = NumSongs;
	Parms.TagQuery = std::move(TagQuery);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.GetSongByShortName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ShortName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFMJamSong*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFMJamSong* UFMJamSongCatalog::GetSongByShortName(const class FName ShortName) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSongByShortName");

	Params::FMJamSongCatalog_GetSongByShortName Parms{};

	Parms.ShortName = ShortName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.GetSongCatalogEntryByShortName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ShortName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCatalogData*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCatalogData* UFMJamSongCatalog::GetSongCatalogEntryByShortName(const class FName ShortName) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSongCatalogEntryByShortName");

	Params::FMJamSongCatalog_GetSongCatalogEntryByShortName Parms{};

	Parms.ShortName = ShortName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.GetSortedSongList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFMJamSongCatalogSortMethod             SortMethod                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFMJamSongCatalogSortDirection          SortDirection                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagQuery                TagQuery                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UFMJamSong*>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UFMJamSong*> UFMJamSongCatalog::GetSortedSongList(const EFMJamSongCatalogSortMethod SortMethod, const EFMJamSongCatalogSortDirection SortDirection, const struct FGameplayTagQuery& TagQuery) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetSortedSongList");

	Params::FMJamSongCatalog_GetSortedSongList Parms{};

	Parms.SortMethod = SortMethod;
	Parms.SortDirection = SortDirection;
	Parms.TagQuery = std::move(TagQuery);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FMJamSongCatalog.HaveCMSSongCatalog
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMJamSongCatalog::HaveCMSSongCatalog() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HaveCMSSongCatalog");

	Params::FMJamSongCatalog_HaveCMSSongCatalog Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FortJamEmoteItemDefinition.GetJamSongShortNameForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AFortPlayerState*                 PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UFortJamEmoteItemDefinition::GetJamSongShortNameForPlayer(const class AFortPlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetJamSongShortNameForPlayer");

	Params::FortJamEmoteItemDefinition_GetJamSongShortNameForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FMJamCatalogRuntime.FortJamEmoteItemDefinition.IsJamLoopEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AFortPlayerController*            PlayerController                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortJamEmoteItemDefinition::IsJamLoopEnabled(const class AFortPlayerController* PlayerController) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsJamLoopEnabled");

	Params::FortJamEmoteItemDefinition_IsJamLoopEnabled Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

