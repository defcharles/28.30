#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BeatSyncedAnimRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class BeatSyncedAnimRuntime.BeatSyncedAnimLibrary
// 0x0000 (0x0028 - 0x0028)
class UBeatSyncedAnimLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FFMontageBeatSyncInfo CalculateMontageBeatSyncInfo(const class UMusicClockComponent* MusicClock, const class UAnimMontage* Montage, float LengthInBeats, float MsOffset);
	static float CalculateMontagePlayRate(const class UMusicClockComponent* MusicClock, const class UAnimMontage* Montage, float MontageBeatLength);
	static class UFortItemDefinition* GetLastEmoteExecuted(const class AController* Controller);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BeatSyncedAnimLibrary">();
	}
	static class UBeatSyncedAnimLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBeatSyncedAnimLibrary>();
	}
};
static_assert(alignof(UBeatSyncedAnimLibrary) == 0x000008, "Wrong alignment on UBeatSyncedAnimLibrary");
static_assert(sizeof(UBeatSyncedAnimLibrary) == 0x000028, "Wrong size on UBeatSyncedAnimLibrary");

// Class BeatSyncedAnimRuntime.FMBeatTimingUtils
// 0x0000 (0x0028 - 0x0028)
class UFMBeatTimingUtils final : public UBlueprintFunctionLibrary
{
public:
	static float GetBeatsPerMeasure();
	static float GetCurrentBeat(const class UMusicClockComponent* InMusicClock, bool bRounded);
	static float GetCurrentBeat_Unsafe(const class UMusicClockComponent* InMusicClock, bool bRounded);
	static struct FBeatAndTime GetCurrentBeatAndTime(const class UMusicClockComponent* MusicClock, const class UObject* WorldContext, bool bAlwaysAllowPreviewBPM, float PreviewBPM, bool bForceUnsafe);
	static float GetCurrentBeatForBPM(float InBPM, const class UObject* WorldContextObject);
	static float GetCurrentSongTime(const class UMusicClockComponent* InMusicClock, bool bRounded);
	static float GetCurrentSongTime_Unsafe(const class UMusicClockComponent* InMusicClock, bool bRounded);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMBeatTimingUtils">();
	}
	static class UFMBeatTimingUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMBeatTimingUtils>();
	}
};
static_assert(alignof(UFMBeatTimingUtils) == 0x000008, "Wrong alignment on UFMBeatTimingUtils");
static_assert(sizeof(UFMBeatTimingUtils) == 0x000028, "Wrong size on UFMBeatTimingUtils");

// Class BeatSyncedAnimRuntime.MontageBeatSyncComponent
// 0x0058 (0x00F8 - 0x00A0)
class UMontageBeatSyncComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x4];                                       // 0x00A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxPlayRateBeforeHalf;                             // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinPlayRateBeforeDouble;                           // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultToAnimationBPM;                             // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceBeatSyncAllMontages;                         // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MontageLengthInBeats;                              // 0x00B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MontageOffsetMs;                                   // 0x00B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UMusicClockComponent>    WeakMusicClockPtr;                                 // 0x00BC(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMusicPlaying;                                   // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHaveTimingInfo;                                   // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastKnownMontageInstanceId;                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        OwnerPlayerPawn;                                   // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 OwnerMeshComponent;                                // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UMontageBeatSyncComponent>> YoungerSiblings;                                   // 0x00E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UPreciseBeatSyncedAnimMetaData*         ActiveTimingInfo;                                  // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BeganPlayingMusic();
	void EndedPlayingMusic();
	class AFortPlayerPawn* GetOwnerFortPlayerPawn();
	class USkeletalMeshComponent* GetOwnerSkeletalMeshComponent();
	bool IsMusicPlaying();
	const class UPreciseBeatSyncedAnimMetaData* LookupMontageTimingInfo_BP(class UAnimMontage* Montage, const class AFortPlayerPawn* PlayerPawn);
	void SetMusicClockReference(class UMusicClockComponent* MusicClock);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MontageBeatSyncComponent">();
	}
	static class UMontageBeatSyncComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMontageBeatSyncComponent>();
	}
};
static_assert(alignof(UMontageBeatSyncComponent) == 0x000008, "Wrong alignment on UMontageBeatSyncComponent");
static_assert(sizeof(UMontageBeatSyncComponent) == 0x0000F8, "Wrong size on UMontageBeatSyncComponent");
static_assert(offsetof(UMontageBeatSyncComponent, MaxPlayRateBeforeHalf) == 0x0000A4, "Member 'UMontageBeatSyncComponent::MaxPlayRateBeforeHalf' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, MinPlayRateBeforeDouble) == 0x0000A8, "Member 'UMontageBeatSyncComponent::MinPlayRateBeforeDouble' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, DefaultToAnimationBPM) == 0x0000AC, "Member 'UMontageBeatSyncComponent::DefaultToAnimationBPM' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, bForceBeatSyncAllMontages) == 0x0000B0, "Member 'UMontageBeatSyncComponent::bForceBeatSyncAllMontages' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, MontageLengthInBeats) == 0x0000B4, "Member 'UMontageBeatSyncComponent::MontageLengthInBeats' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, MontageOffsetMs) == 0x0000B8, "Member 'UMontageBeatSyncComponent::MontageOffsetMs' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, WeakMusicClockPtr) == 0x0000BC, "Member 'UMontageBeatSyncComponent::WeakMusicClockPtr' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, bIsMusicPlaying) == 0x0000C4, "Member 'UMontageBeatSyncComponent::bIsMusicPlaying' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, bHaveTimingInfo) == 0x0000C5, "Member 'UMontageBeatSyncComponent::bHaveTimingInfo' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, LastKnownMontageInstanceId) == 0x0000C8, "Member 'UMontageBeatSyncComponent::LastKnownMontageInstanceId' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, OwnerPlayerPawn) == 0x0000D0, "Member 'UMontageBeatSyncComponent::OwnerPlayerPawn' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, OwnerMeshComponent) == 0x0000D8, "Member 'UMontageBeatSyncComponent::OwnerMeshComponent' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, YoungerSiblings) == 0x0000E0, "Member 'UMontageBeatSyncComponent::YoungerSiblings' has a wrong offset!");
static_assert(offsetof(UMontageBeatSyncComponent, ActiveTimingInfo) == 0x0000F0, "Member 'UMontageBeatSyncComponent::ActiveTimingInfo' has a wrong offset!");

// Class BeatSyncedAnimRuntime.SparksAnimLoggingComponent
// 0x0018 (0x00B8 - 0x00A0)
class USparksAnimLoggingComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetCurrentFullBodyAnimName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksAnimLoggingComponent">();
	}
	static class USparksAnimLoggingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksAnimLoggingComponent>();
	}
};
static_assert(alignof(USparksAnimLoggingComponent) == 0x000008, "Wrong alignment on USparksAnimLoggingComponent");
static_assert(sizeof(USparksAnimLoggingComponent) == 0x0000B8, "Wrong size on USparksAnimLoggingComponent");

// Class BeatSyncedAnimRuntime.AnimNotify_BeatMarker
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_BeatMarker final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_BeatMarker">();
	}
	static class UAnimNotify_BeatMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_BeatMarker>();
	}
};
static_assert(alignof(UAnimNotify_BeatMarker) == 0x000008, "Wrong alignment on UAnimNotify_BeatMarker");
static_assert(sizeof(UAnimNotify_BeatMarker) == 0x000038, "Wrong size on UAnimNotify_BeatMarker");

}

