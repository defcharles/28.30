#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationCoreRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ItemizationCoreRuntime_structs.hpp"


namespace SDK::Params
{

// Function ItemizationCoreRuntime.ItemizationWorldSubsystem.OnInventoryComponentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct ItemizationWorldSubsystem_OnInventoryComponentDestroyed final
{
public:
	const class UInventoryComponent*              InventoryComponent;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationWorldSubsystem_OnInventoryComponentDestroyed) == 0x000008, "Wrong alignment on ItemizationWorldSubsystem_OnInventoryComponentDestroyed");
static_assert(sizeof(ItemizationWorldSubsystem_OnInventoryComponentDestroyed) == 0x000008, "Wrong size on ItemizationWorldSubsystem_OnInventoryComponentDestroyed");
static_assert(offsetof(ItemizationWorldSubsystem_OnInventoryComponentDestroyed, InventoryComponent) == 0x000000, "Member 'ItemizationWorldSubsystem_OnInventoryComponentDestroyed::InventoryComponent' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.ClientOnItemAbilityCooldownUpdated
// 0x0028 (0x0028 - 0x0000)
struct InventoryCollection_ClientOnItemAbilityCooldownUpdated final
{
public:
	class UInventory*                             Inventory;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemEntryID;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemAbilityCooldownState              CooldownState;                                     // 0x0018(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryCollection_ClientOnItemAbilityCooldownUpdated) == 0x000008, "Wrong alignment on InventoryCollection_ClientOnItemAbilityCooldownUpdated");
static_assert(sizeof(InventoryCollection_ClientOnItemAbilityCooldownUpdated) == 0x000028, "Wrong size on InventoryCollection_ClientOnItemAbilityCooldownUpdated");
static_assert(offsetof(InventoryCollection_ClientOnItemAbilityCooldownUpdated, Inventory) == 0x000000, "Member 'InventoryCollection_ClientOnItemAbilityCooldownUpdated::Inventory' has a wrong offset!");
static_assert(offsetof(InventoryCollection_ClientOnItemAbilityCooldownUpdated, ItemEntryID) == 0x000008, "Member 'InventoryCollection_ClientOnItemAbilityCooldownUpdated::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_ClientOnItemAbilityCooldownUpdated, CooldownState) == 0x000018, "Member 'InventoryCollection_ClientOnItemAbilityCooldownUpdated::CooldownState' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.DropItem
// 0x0018 (0x0018 - 0x0000)
struct InventoryCollection_DropItem final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AmountToDrop;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_DropItem) == 0x000008, "Wrong alignment on InventoryCollection_DropItem");
static_assert(sizeof(InventoryCollection_DropItem) == 0x000018, "Wrong size on InventoryCollection_DropItem");
static_assert(offsetof(InventoryCollection_DropItem, ItemEntryID) == 0x000000, "Member 'InventoryCollection_DropItem::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_DropItem, AmountToDrop) == 0x000010, "Member 'InventoryCollection_DropItem::AmountToDrop' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.Server_DropItem
// 0x0018 (0x0018 - 0x0000)
struct InventoryCollection_Server_DropItem final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AmountToDrop;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_Server_DropItem) == 0x000008, "Wrong alignment on InventoryCollection_Server_DropItem");
static_assert(sizeof(InventoryCollection_Server_DropItem) == 0x000018, "Wrong size on InventoryCollection_Server_DropItem");
static_assert(offsetof(InventoryCollection_Server_DropItem, ItemEntryID) == 0x000000, "Member 'InventoryCollection_Server_DropItem::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_Server_DropItem, AmountToDrop) == 0x000010, "Member 'InventoryCollection_Server_DropItem::AmountToDrop' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.Server_SetEquippableItemActive
// 0x0010 (0x0010 - 0x0000)
struct InventoryCollection_Server_SetEquippableItemActive final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_Server_SetEquippableItemActive) == 0x000004, "Wrong alignment on InventoryCollection_Server_SetEquippableItemActive");
static_assert(sizeof(InventoryCollection_Server_SetEquippableItemActive) == 0x000010, "Wrong size on InventoryCollection_Server_SetEquippableItemActive");
static_assert(offsetof(InventoryCollection_Server_SetEquippableItemActive, ItemEntryID) == 0x000000, "Member 'InventoryCollection_Server_SetEquippableItemActive::ItemEntryID' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.Server_SetEquippableItemInactive
// 0x0010 (0x0010 - 0x0000)
struct InventoryCollection_Server_SetEquippableItemInactive final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_Server_SetEquippableItemInactive) == 0x000004, "Wrong alignment on InventoryCollection_Server_SetEquippableItemInactive");
static_assert(sizeof(InventoryCollection_Server_SetEquippableItemInactive) == 0x000010, "Wrong size on InventoryCollection_Server_SetEquippableItemInactive");
static_assert(offsetof(InventoryCollection_Server_SetEquippableItemInactive, ItemEntryID) == 0x000000, "Member 'InventoryCollection_Server_SetEquippableItemInactive::ItemEntryID' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.Server_SetItemSlot
// 0x0024 (0x0024 - 0x0000)
struct InventoryCollection_Server_SetItemSlot final
{
public:
	struct FGuid                                  OwningInventoryID;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemEntryID;                                       // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SlotNumber;                                        // 0x0020(0x0002)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVkInventoryMoveBehaviour                     MoveBehaviour;                                     // 0x0022(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryCollection_Server_SetItemSlot) == 0x000004, "Wrong alignment on InventoryCollection_Server_SetItemSlot");
static_assert(sizeof(InventoryCollection_Server_SetItemSlot) == 0x000024, "Wrong size on InventoryCollection_Server_SetItemSlot");
static_assert(offsetof(InventoryCollection_Server_SetItemSlot, OwningInventoryID) == 0x000000, "Member 'InventoryCollection_Server_SetItemSlot::OwningInventoryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_Server_SetItemSlot, ItemEntryID) == 0x000010, "Member 'InventoryCollection_Server_SetItemSlot::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_Server_SetItemSlot, SlotNumber) == 0x000020, "Member 'InventoryCollection_Server_SetItemSlot::SlotNumber' has a wrong offset!");
static_assert(offsetof(InventoryCollection_Server_SetItemSlot, MoveBehaviour) == 0x000022, "Member 'InventoryCollection_Server_SetItemSlot::MoveBehaviour' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.Server_UseItem
// 0x0020 (0x0020 - 0x0000)
struct InventoryCollection_Server_UseItem final
{
public:
	struct FGuid                                  ItemId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  AdditionalItemID;                                  // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_Server_UseItem) == 0x000004, "Wrong alignment on InventoryCollection_Server_UseItem");
static_assert(sizeof(InventoryCollection_Server_UseItem) == 0x000020, "Wrong size on InventoryCollection_Server_UseItem");
static_assert(offsetof(InventoryCollection_Server_UseItem, ItemId) == 0x000000, "Member 'InventoryCollection_Server_UseItem::ItemId' has a wrong offset!");
static_assert(offsetof(InventoryCollection_Server_UseItem, AdditionalItemID) == 0x000010, "Member 'InventoryCollection_Server_UseItem::AdditionalItemID' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.SetEquippableItemActive
// 0x0010 (0x0010 - 0x0000)
struct InventoryCollection_SetEquippableItemActive final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_SetEquippableItemActive) == 0x000004, "Wrong alignment on InventoryCollection_SetEquippableItemActive");
static_assert(sizeof(InventoryCollection_SetEquippableItemActive) == 0x000010, "Wrong size on InventoryCollection_SetEquippableItemActive");
static_assert(offsetof(InventoryCollection_SetEquippableItemActive, ItemEntryID) == 0x000000, "Member 'InventoryCollection_SetEquippableItemActive::ItemEntryID' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.SetEquippableItemInactive
// 0x0010 (0x0010 - 0x0000)
struct InventoryCollection_SetEquippableItemInactive final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_SetEquippableItemInactive) == 0x000004, "Wrong alignment on InventoryCollection_SetEquippableItemInactive");
static_assert(sizeof(InventoryCollection_SetEquippableItemInactive) == 0x000010, "Wrong size on InventoryCollection_SetEquippableItemInactive");
static_assert(offsetof(InventoryCollection_SetEquippableItemInactive, ItemEntryID) == 0x000000, "Member 'InventoryCollection_SetEquippableItemInactive::ItemEntryID' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.UseItem
// 0x0020 (0x0020 - 0x0000)
struct InventoryCollection_UseItem final
{
public:
	struct FGuid                                  ItemId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  AdditionalItemID;                                  // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_UseItem) == 0x000004, "Wrong alignment on InventoryCollection_UseItem");
static_assert(sizeof(InventoryCollection_UseItem) == 0x000020, "Wrong size on InventoryCollection_UseItem");
static_assert(offsetof(InventoryCollection_UseItem, ItemId) == 0x000000, "Member 'InventoryCollection_UseItem::ItemId' has a wrong offset!");
static_assert(offsetof(InventoryCollection_UseItem, AdditionalItemID) == 0x000010, "Member 'InventoryCollection_UseItem::AdditionalItemID' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetAllInventoriesInCollection
// 0x0018 (0x0018 - 0x0000)
struct InventoryCollection_GetAllInventoriesInCollection final
{
public:
	TArray<struct FGuid>                          OutInventoryIDList;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryCollection_GetAllInventoriesInCollection) == 0x000008, "Wrong alignment on InventoryCollection_GetAllInventoriesInCollection");
static_assert(sizeof(InventoryCollection_GetAllInventoriesInCollection) == 0x000018, "Wrong size on InventoryCollection_GetAllInventoriesInCollection");
static_assert(offsetof(InventoryCollection_GetAllInventoriesInCollection, OutInventoryIDList) == 0x000000, "Member 'InventoryCollection_GetAllInventoriesInCollection::OutInventoryIDList' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetAllInventoriesInCollection, ReturnValue) == 0x000010, "Member 'InventoryCollection_GetAllInventoriesInCollection::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetAllItemsInInventory
// 0x0028 (0x0028 - 0x0000)
struct InventoryCollection_GetAllItemsInInventory final
{
public:
	struct FGuid                                  TargetInventoryID;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          OutItemEntryIDList;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryCollection_GetAllItemsInInventory) == 0x000008, "Wrong alignment on InventoryCollection_GetAllItemsInInventory");
static_assert(sizeof(InventoryCollection_GetAllItemsInInventory) == 0x000028, "Wrong size on InventoryCollection_GetAllItemsInInventory");
static_assert(offsetof(InventoryCollection_GetAllItemsInInventory, TargetInventoryID) == 0x000000, "Member 'InventoryCollection_GetAllItemsInInventory::TargetInventoryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetAllItemsInInventory, OutItemEntryIDList) == 0x000010, "Member 'InventoryCollection_GetAllItemsInInventory::OutItemEntryIDList' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetAllItemsInInventory, ReturnValue) == 0x000020, "Member 'InventoryCollection_GetAllItemsInInventory::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetInventoriesWithInventoryDefinition
// 0x0018 (0x0018 - 0x0000)
struct InventoryCollection_GetInventoriesWithInventoryDefinition final
{
public:
	const class UInventoryDefinition*             InventoryDefinition;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetInventoriesWithInventoryDefinition) == 0x000008, "Wrong alignment on InventoryCollection_GetInventoriesWithInventoryDefinition");
static_assert(sizeof(InventoryCollection_GetInventoriesWithInventoryDefinition) == 0x000018, "Wrong size on InventoryCollection_GetInventoriesWithInventoryDefinition");
static_assert(offsetof(InventoryCollection_GetInventoriesWithInventoryDefinition, InventoryDefinition) == 0x000000, "Member 'InventoryCollection_GetInventoriesWithInventoryDefinition::InventoryDefinition' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetInventoriesWithInventoryDefinition, ReturnValue) == 0x000008, "Member 'InventoryCollection_GetInventoriesWithInventoryDefinition::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryDefinition
// 0x0018 (0x0018 - 0x0000)
struct InventoryCollection_GetInventoryDefinition final
{
public:
	struct FGuid                                  TargetInventoryID;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInventoryDefinition*             ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetInventoryDefinition) == 0x000008, "Wrong alignment on InventoryCollection_GetInventoryDefinition");
static_assert(sizeof(InventoryCollection_GetInventoryDefinition) == 0x000018, "Wrong size on InventoryCollection_GetInventoryDefinition");
static_assert(offsetof(InventoryCollection_GetInventoryDefinition, TargetInventoryID) == 0x000000, "Member 'InventoryCollection_GetInventoryDefinition::TargetInventoryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetInventoryDefinition, ReturnValue) == 0x000010, "Member 'InventoryCollection_GetInventoryDefinition::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryListInPickupPriorityForItemDefinition
// 0x0018 (0x0018 - 0x0000)
struct InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition final
{
public:
	const class UItemDefinitionBase*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition) == 0x000008, "Wrong alignment on InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition");
static_assert(sizeof(InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition) == 0x000018, "Wrong size on InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition");
static_assert(offsetof(InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition, ItemDefinition) == 0x000000, "Member 'InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition::ItemDefinition' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition, ReturnValue) == 0x000008, "Member 'InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryName
// 0x0028 (0x0028 - 0x0000)
struct InventoryCollection_GetInventoryName final
{
public:
	struct FGuid                                  TargetInventoryID;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetInventoryName) == 0x000008, "Wrong alignment on InventoryCollection_GetInventoryName");
static_assert(sizeof(InventoryCollection_GetInventoryName) == 0x000028, "Wrong size on InventoryCollection_GetInventoryName");
static_assert(offsetof(InventoryCollection_GetInventoryName, TargetInventoryID) == 0x000000, "Member 'InventoryCollection_GetInventoryName::TargetInventoryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetInventoryName, ReturnValue) == 0x000010, "Member 'InventoryCollection_GetInventoryName::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetItemAmount
// 0x0010 (0x0010 - 0x0000)
struct InventoryCollection_GetItemAmount final
{
public:
	const class UItemDefinitionBase*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetItemAmount) == 0x000008, "Wrong alignment on InventoryCollection_GetItemAmount");
static_assert(sizeof(InventoryCollection_GetItemAmount) == 0x000010, "Wrong size on InventoryCollection_GetItemAmount");
static_assert(offsetof(InventoryCollection_GetItemAmount, ItemDefinition) == 0x000000, "Member 'InventoryCollection_GetItemAmount::ItemDefinition' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemAmount, ReturnValue) == 0x000008, "Member 'InventoryCollection_GetItemAmount::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetItemAmountFromEntry
// 0x0028 (0x0028 - 0x0000)
struct InventoryCollection_GetItemAmountFromEntry final
{
public:
	struct FGuid                                  TargetInventoryID;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemEntryID;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetItemAmountFromEntry) == 0x000008, "Wrong alignment on InventoryCollection_GetItemAmountFromEntry");
static_assert(sizeof(InventoryCollection_GetItemAmountFromEntry) == 0x000028, "Wrong size on InventoryCollection_GetItemAmountFromEntry");
static_assert(offsetof(InventoryCollection_GetItemAmountFromEntry, TargetInventoryID) == 0x000000, "Member 'InventoryCollection_GetItemAmountFromEntry::TargetInventoryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemAmountFromEntry, ItemEntryID) == 0x000010, "Member 'InventoryCollection_GetItemAmountFromEntry::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemAmountFromEntry, ReturnValue) == 0x000020, "Member 'InventoryCollection_GetItemAmountFromEntry::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetItemAmountFromInventory
// 0x0020 (0x0020 - 0x0000)
struct InventoryCollection_GetItemAmountFromInventory final
{
public:
	const class UItemDefinitionBase*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  TargetInventoryID;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetItemAmountFromInventory) == 0x000008, "Wrong alignment on InventoryCollection_GetItemAmountFromInventory");
static_assert(sizeof(InventoryCollection_GetItemAmountFromInventory) == 0x000020, "Wrong size on InventoryCollection_GetItemAmountFromInventory");
static_assert(offsetof(InventoryCollection_GetItemAmountFromInventory, ItemDefinition) == 0x000000, "Member 'InventoryCollection_GetItemAmountFromInventory::ItemDefinition' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemAmountFromInventory, TargetInventoryID) == 0x000008, "Member 'InventoryCollection_GetItemAmountFromInventory::TargetInventoryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemAmountFromInventory, ReturnValue) == 0x000018, "Member 'InventoryCollection_GetItemAmountFromInventory::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetItemDefinition
// 0x0028 (0x0028 - 0x0000)
struct InventoryCollection_GetItemDefinition final
{
public:
	struct FGuid                                  TargetInventoryID;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemEntryID;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemDefinitionBase*              ReturnValue;                                       // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetItemDefinition) == 0x000008, "Wrong alignment on InventoryCollection_GetItemDefinition");
static_assert(sizeof(InventoryCollection_GetItemDefinition) == 0x000028, "Wrong size on InventoryCollection_GetItemDefinition");
static_assert(offsetof(InventoryCollection_GetItemDefinition, TargetInventoryID) == 0x000000, "Member 'InventoryCollection_GetItemDefinition::TargetInventoryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemDefinition, ItemEntryID) == 0x000010, "Member 'InventoryCollection_GetItemDefinition::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemDefinition, ReturnValue) == 0x000020, "Member 'InventoryCollection_GetItemDefinition::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetItemIntAttribute
// 0x0030 (0x0030 - 0x0000)
struct InventoryCollection_GetItemIntAttribute final
{
public:
	struct FGuid                                  TargetInventoryID;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemEntryID;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItemAttribute_Int>         Attribute;                                         // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetItemIntAttribute) == 0x000008, "Wrong alignment on InventoryCollection_GetItemIntAttribute");
static_assert(sizeof(InventoryCollection_GetItemIntAttribute) == 0x000030, "Wrong size on InventoryCollection_GetItemIntAttribute");
static_assert(offsetof(InventoryCollection_GetItemIntAttribute, TargetInventoryID) == 0x000000, "Member 'InventoryCollection_GetItemIntAttribute::TargetInventoryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemIntAttribute, ItemEntryID) == 0x000010, "Member 'InventoryCollection_GetItemIntAttribute::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemIntAttribute, Attribute) == 0x000020, "Member 'InventoryCollection_GetItemIntAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemIntAttribute, ReturnValue) == 0x000028, "Member 'InventoryCollection_GetItemIntAttribute::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.GetItemSlotNumber
// 0x0024 (0x0024 - 0x0000)
struct InventoryCollection_GetItemSlotNumber final
{
public:
	struct FGuid                                  TargetInventoryID;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemEntryID;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCollection_GetItemSlotNumber) == 0x000004, "Wrong alignment on InventoryCollection_GetItemSlotNumber");
static_assert(sizeof(InventoryCollection_GetItemSlotNumber) == 0x000024, "Wrong size on InventoryCollection_GetItemSlotNumber");
static_assert(offsetof(InventoryCollection_GetItemSlotNumber, TargetInventoryID) == 0x000000, "Member 'InventoryCollection_GetItemSlotNumber::TargetInventoryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemSlotNumber, ItemEntryID) == 0x000010, "Member 'InventoryCollection_GetItemSlotNumber::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_GetItemSlotNumber, ReturnValue) == 0x000020, "Member 'InventoryCollection_GetItemSlotNumber::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCollection.IsItemEquipped
// 0x0014 (0x0014 - 0x0000)
struct InventoryCollection_IsItemEquipped final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryCollection_IsItemEquipped) == 0x000004, "Wrong alignment on InventoryCollection_IsItemEquipped");
static_assert(sizeof(InventoryCollection_IsItemEquipped) == 0x000014, "Wrong size on InventoryCollection_IsItemEquipped");
static_assert(offsetof(InventoryCollection_IsItemEquipped, ItemEntryID) == 0x000000, "Member 'InventoryCollection_IsItemEquipped::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryCollection_IsItemEquipped, ReturnValue) == 0x000010, "Member 'InventoryCollection_IsItemEquipped::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryAddToItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryCheatManager_InventoryAddToItem final
{
public:
	int32                                         InventoryIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AmountToAdd;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCheatManager_InventoryAddToItem) == 0x000008, "Wrong alignment on InventoryCheatManager_InventoryAddToItem");
static_assert(sizeof(InventoryCheatManager_InventoryAddToItem) == 0x000010, "Wrong size on InventoryCheatManager_InventoryAddToItem");
static_assert(offsetof(InventoryCheatManager_InventoryAddToItem, InventoryIndex) == 0x000000, "Member 'InventoryCheatManager_InventoryAddToItem::InventoryIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryAddToItem, ItemIndex) == 0x000004, "Member 'InventoryCheatManager_InventoryAddToItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryAddToItem, AmountToAdd) == 0x000008, "Member 'InventoryCheatManager_InventoryAddToItem::AmountToAdd' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryDropItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryCheatManager_InventoryDropItem final
{
public:
	int32                                         InventoryIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AmountToDrop;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCheatManager_InventoryDropItem) == 0x000008, "Wrong alignment on InventoryCheatManager_InventoryDropItem");
static_assert(sizeof(InventoryCheatManager_InventoryDropItem) == 0x000010, "Wrong size on InventoryCheatManager_InventoryDropItem");
static_assert(offsetof(InventoryCheatManager_InventoryDropItem, InventoryIndex) == 0x000000, "Member 'InventoryCheatManager_InventoryDropItem::InventoryIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryDropItem, ItemIndex) == 0x000004, "Member 'InventoryCheatManager_InventoryDropItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryDropItem, AmountToDrop) == 0x000008, "Member 'InventoryCheatManager_InventoryDropItem::AmountToDrop' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryMoveAmountOfItem
// 0x0018 (0x0018 - 0x0000)
struct InventoryCheatManager_InventoryMoveAmountOfItem final
{
public:
	int32                                         SourceInventoryIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetInventoryIndex;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         AmountToMove;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCheatManager_InventoryMoveAmountOfItem) == 0x000008, "Wrong alignment on InventoryCheatManager_InventoryMoveAmountOfItem");
static_assert(sizeof(InventoryCheatManager_InventoryMoveAmountOfItem) == 0x000018, "Wrong size on InventoryCheatManager_InventoryMoveAmountOfItem");
static_assert(offsetof(InventoryCheatManager_InventoryMoveAmountOfItem, SourceInventoryIndex) == 0x000000, "Member 'InventoryCheatManager_InventoryMoveAmountOfItem::SourceInventoryIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryMoveAmountOfItem, ItemIndex) == 0x000004, "Member 'InventoryCheatManager_InventoryMoveAmountOfItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryMoveAmountOfItem, TargetInventoryIndex) == 0x000008, "Member 'InventoryCheatManager_InventoryMoveAmountOfItem::TargetInventoryIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryMoveAmountOfItem, AmountToMove) == 0x000010, "Member 'InventoryCheatManager_InventoryMoveAmountOfItem::AmountToMove' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryMoveItem
// 0x000C (0x000C - 0x0000)
struct InventoryCheatManager_InventoryMoveItem final
{
public:
	int32                                         SourceInventoryIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetInventoryIndex;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCheatManager_InventoryMoveItem) == 0x000004, "Wrong alignment on InventoryCheatManager_InventoryMoveItem");
static_assert(sizeof(InventoryCheatManager_InventoryMoveItem) == 0x00000C, "Wrong size on InventoryCheatManager_InventoryMoveItem");
static_assert(offsetof(InventoryCheatManager_InventoryMoveItem, SourceInventoryIndex) == 0x000000, "Member 'InventoryCheatManager_InventoryMoveItem::SourceInventoryIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryMoveItem, ItemIndex) == 0x000004, "Member 'InventoryCheatManager_InventoryMoveItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryMoveItem, TargetInventoryIndex) == 0x000008, "Member 'InventoryCheatManager_InventoryMoveItem::TargetInventoryIndex' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryRemoveFromItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryCheatManager_InventoryRemoveFromItem final
{
public:
	int32                                         InventoryIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AmountToRemove;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCheatManager_InventoryRemoveFromItem) == 0x000008, "Wrong alignment on InventoryCheatManager_InventoryRemoveFromItem");
static_assert(sizeof(InventoryCheatManager_InventoryRemoveFromItem) == 0x000010, "Wrong size on InventoryCheatManager_InventoryRemoveFromItem");
static_assert(offsetof(InventoryCheatManager_InventoryRemoveFromItem, InventoryIndex) == 0x000000, "Member 'InventoryCheatManager_InventoryRemoveFromItem::InventoryIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryRemoveFromItem, ItemIndex) == 0x000004, "Member 'InventoryCheatManager_InventoryRemoveFromItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryRemoveFromItem, AmountToRemove) == 0x000008, "Member 'InventoryCheatManager_InventoryRemoveFromItem::AmountToRemove' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCheatManager.InventorySetEquippedItemActive
// 0x000C (0x000C - 0x0000)
struct InventoryCheatManager_InventorySetEquippedItemActive final
{
public:
	int32                                         InventoryIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryCheatManager_InventorySetEquippedItemActive) == 0x000004, "Wrong alignment on InventoryCheatManager_InventorySetEquippedItemActive");
static_assert(sizeof(InventoryCheatManager_InventorySetEquippedItemActive) == 0x00000C, "Wrong size on InventoryCheatManager_InventorySetEquippedItemActive");
static_assert(offsetof(InventoryCheatManager_InventorySetEquippedItemActive, InventoryIndex) == 0x000000, "Member 'InventoryCheatManager_InventorySetEquippedItemActive::InventoryIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventorySetEquippedItemActive, ItemIndex) == 0x000004, "Member 'InventoryCheatManager_InventorySetEquippedItemActive::ItemIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventorySetEquippedItemActive, bActive) == 0x000008, "Member 'InventoryCheatManager_InventorySetEquippedItemActive::bActive' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCheatManager.InventorySetItemSlot
// 0x000C (0x000C - 0x0000)
struct InventoryCheatManager_InventorySetItemSlot final
{
public:
	int32                                         InventoryIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        NewSlotIndex;                                      // 0x0008(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryCheatManager_InventorySetItemSlot) == 0x000004, "Wrong alignment on InventoryCheatManager_InventorySetItemSlot");
static_assert(sizeof(InventoryCheatManager_InventorySetItemSlot) == 0x00000C, "Wrong size on InventoryCheatManager_InventorySetItemSlot");
static_assert(offsetof(InventoryCheatManager_InventorySetItemSlot, InventoryIndex) == 0x000000, "Member 'InventoryCheatManager_InventorySetItemSlot::InventoryIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventorySetItemSlot, ItemIndex) == 0x000004, "Member 'InventoryCheatManager_InventorySetItemSlot::ItemIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventorySetItemSlot, NewSlotIndex) == 0x000008, "Member 'InventoryCheatManager_InventorySetItemSlot::NewSlotIndex' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryUseItem
// 0x0008 (0x0008 - 0x0000)
struct InventoryCheatManager_InventoryUseItem final
{
public:
	int32                                         InventoryIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCheatManager_InventoryUseItem) == 0x000004, "Wrong alignment on InventoryCheatManager_InventoryUseItem");
static_assert(sizeof(InventoryCheatManager_InventoryUseItem) == 0x000008, "Wrong size on InventoryCheatManager_InventoryUseItem");
static_assert(offsetof(InventoryCheatManager_InventoryUseItem, InventoryIndex) == 0x000000, "Member 'InventoryCheatManager_InventoryUseItem::InventoryIndex' has a wrong offset!");
static_assert(offsetof(InventoryCheatManager_InventoryUseItem, ItemIndex) == 0x000004, "Member 'InventoryCheatManager_InventoryUseItem::ItemIndex' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemDefinitionBase.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct ItemDefinitionBase_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDefinitionBase_GetDisplayName) == 0x000008, "Wrong alignment on ItemDefinitionBase_GetDisplayName");
static_assert(sizeof(ItemDefinitionBase_GetDisplayName) == 0x000018, "Wrong size on ItemDefinitionBase_GetDisplayName");
static_assert(offsetof(ItemDefinitionBase_GetDisplayName, ReturnValue) == 0x000000, "Member 'ItemDefinitionBase_GetDisplayName::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemDefinitionBase.GetItemComponentByClass
// 0x0010 (0x0010 - 0x0000)
struct ItemDefinitionBase_GetItemComponentByClass final
{
public:
	TSubclassOf<class UItemComponentBase>         ItemComponentClass;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemComponentBase*               ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDefinitionBase_GetItemComponentByClass) == 0x000008, "Wrong alignment on ItemDefinitionBase_GetItemComponentByClass");
static_assert(sizeof(ItemDefinitionBase_GetItemComponentByClass) == 0x000010, "Wrong size on ItemDefinitionBase_GetItemComponentByClass");
static_assert(offsetof(ItemDefinitionBase_GetItemComponentByClass, ItemComponentClass) == 0x000000, "Member 'ItemDefinitionBase_GetItemComponentByClass::ItemComponentClass' has a wrong offset!");
static_assert(offsetof(ItemDefinitionBase_GetItemComponentByClass, ReturnValue) == 0x000008, "Member 'ItemDefinitionBase_GetItemComponentByClass::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemDefinitionBase.GetItemDescription
// 0x0018 (0x0018 - 0x0000)
struct ItemDefinitionBase_GetItemDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDefinitionBase_GetItemDescription) == 0x000008, "Wrong alignment on ItemDefinitionBase_GetItemDescription");
static_assert(sizeof(ItemDefinitionBase_GetItemDescription) == 0x000018, "Wrong size on ItemDefinitionBase_GetItemDescription");
static_assert(offsetof(ItemDefinitionBase_GetItemDescription, ReturnValue) == 0x000000, "Member 'ItemDefinitionBase_GetItemDescription::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemDefinitionBase.GetItemShortDescription
// 0x0018 (0x0018 - 0x0000)
struct ItemDefinitionBase_GetItemShortDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDefinitionBase_GetItemShortDescription) == 0x000008, "Wrong alignment on ItemDefinitionBase_GetItemShortDescription");
static_assert(sizeof(ItemDefinitionBase_GetItemShortDescription) == 0x000018, "Wrong size on ItemDefinitionBase_GetItemShortDescription");
static_assert(offsetof(ItemDefinitionBase_GetItemShortDescription, ReturnValue) == 0x000000, "Member 'ItemDefinitionBase_GetItemShortDescription::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemAbilityConfigurationAsset.Construct
// 0x0008 (0x0008 - 0x0000)
struct ItemAbilityConfigurationAsset_Construct final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAbilityConfigurationAsset_Construct) == 0x000008, "Wrong alignment on ItemAbilityConfigurationAsset_Construct");
static_assert(sizeof(ItemAbilityConfigurationAsset_Construct) == 0x000008, "Wrong size on ItemAbilityConfigurationAsset_Construct");
static_assert(offsetof(ItemAbilityConfigurationAsset_Construct, Ability) == 0x000000, "Member 'ItemAbilityConfigurationAsset_Construct::Ability' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.DescribeInventoryID
// 0x0020 (0x0020 - 0x0000)
struct ItemizationFunctionLibrary_DescribeInventoryID final
{
public:
	struct FGuid                                  InventoryID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationFunctionLibrary_DescribeInventoryID) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_DescribeInventoryID");
static_assert(sizeof(ItemizationFunctionLibrary_DescribeInventoryID) == 0x000020, "Wrong size on ItemizationFunctionLibrary_DescribeInventoryID");
static_assert(offsetof(ItemizationFunctionLibrary_DescribeInventoryID, InventoryID) == 0x000000, "Member 'ItemizationFunctionLibrary_DescribeInventoryID::InventoryID' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_DescribeInventoryID, ReturnValue) == 0x000010, "Member 'ItemizationFunctionLibrary_DescribeInventoryID::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.DescribeItemEntryID
// 0x0020 (0x0020 - 0x0000)
struct ItemizationFunctionLibrary_DescribeItemEntryID final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationFunctionLibrary_DescribeItemEntryID) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_DescribeItemEntryID");
static_assert(sizeof(ItemizationFunctionLibrary_DescribeItemEntryID) == 0x000020, "Wrong size on ItemizationFunctionLibrary_DescribeItemEntryID");
static_assert(offsetof(ItemizationFunctionLibrary_DescribeItemEntryID, ItemEntryID) == 0x000000, "Member 'ItemizationFunctionLibrary_DescribeItemEntryID::ItemEntryID' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_DescribeItemEntryID, ReturnValue) == 0x000010, "Member 'ItemizationFunctionLibrary_DescribeItemEntryID::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataAttributeList
// 0x0080 (0x0080 - 0x0000)
struct ItemizationFunctionLibrary_GetItemDataAttributeList final
{
public:
	struct FItemAggregatedData                    ItemData;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UItemAttribute>>     ReturnValue;                                       // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationFunctionLibrary_GetItemDataAttributeList) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_GetItemDataAttributeList");
static_assert(sizeof(ItemizationFunctionLibrary_GetItemDataAttributeList) == 0x000080, "Wrong size on ItemizationFunctionLibrary_GetItemDataAttributeList");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataAttributeList, ItemData) == 0x000000, "Member 'ItemizationFunctionLibrary_GetItemDataAttributeList::ItemData' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataAttributeList, ReturnValue) == 0x000070, "Member 'ItemizationFunctionLibrary_GetItemDataAttributeList::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataBoolAttributeValue
// 0x0080 (0x0080 - 0x0000)
struct ItemizationFunctionLibrary_GetItemDataBoolAttributeValue final
{
public:
	struct FItemAggregatedData                    ItemData;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItemAttribute_Bool>        AttributeClass;                                    // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemizationFunctionLibrary_GetItemDataBoolAttributeValue) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_GetItemDataBoolAttributeValue");
static_assert(sizeof(ItemizationFunctionLibrary_GetItemDataBoolAttributeValue) == 0x000080, "Wrong size on ItemizationFunctionLibrary_GetItemDataBoolAttributeValue");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataBoolAttributeValue, ItemData) == 0x000000, "Member 'ItemizationFunctionLibrary_GetItemDataBoolAttributeValue::ItemData' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataBoolAttributeValue, AttributeClass) == 0x000070, "Member 'ItemizationFunctionLibrary_GetItemDataBoolAttributeValue::AttributeClass' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataBoolAttributeValue, ReturnValue) == 0x000078, "Member 'ItemizationFunctionLibrary_GetItemDataBoolAttributeValue::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataDecimalAttributeValue
// 0x0080 (0x0080 - 0x0000)
struct ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue final
{
public:
	struct FItemAggregatedData                    ItemData;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItemAttribute_Decimal>     AttributeClass;                                    // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue");
static_assert(sizeof(ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue) == 0x000080, "Wrong size on ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue, ItemData) == 0x000000, "Member 'ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue::ItemData' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue, AttributeClass) == 0x000070, "Member 'ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue::AttributeClass' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue, ReturnValue) == 0x000078, "Member 'ItemizationFunctionLibrary_GetItemDataDecimalAttributeValue::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataDefinition
// 0x0078 (0x0078 - 0x0000)
struct ItemizationFunctionLibrary_GetItemDataDefinition final
{
public:
	struct FItemAggregatedData                    ItemData;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemDefinitionBase*              ReturnValue;                                       // 0x0070(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationFunctionLibrary_GetItemDataDefinition) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_GetItemDataDefinition");
static_assert(sizeof(ItemizationFunctionLibrary_GetItemDataDefinition) == 0x000078, "Wrong size on ItemizationFunctionLibrary_GetItemDataDefinition");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataDefinition, ItemData) == 0x000000, "Member 'ItemizationFunctionLibrary_GetItemDataDefinition::ItemData' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataDefinition, ReturnValue) == 0x000070, "Member 'ItemizationFunctionLibrary_GetItemDataDefinition::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataIntAttributeValue
// 0x0080 (0x0080 - 0x0000)
struct ItemizationFunctionLibrary_GetItemDataIntAttributeValue final
{
public:
	struct FItemAggregatedData                    ItemData;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItemAttribute_Int>         AttributeClass;                                    // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationFunctionLibrary_GetItemDataIntAttributeValue) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_GetItemDataIntAttributeValue");
static_assert(sizeof(ItemizationFunctionLibrary_GetItemDataIntAttributeValue) == 0x000080, "Wrong size on ItemizationFunctionLibrary_GetItemDataIntAttributeValue");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataIntAttributeValue, ItemData) == 0x000000, "Member 'ItemizationFunctionLibrary_GetItemDataIntAttributeValue::ItemData' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataIntAttributeValue, AttributeClass) == 0x000070, "Member 'ItemizationFunctionLibrary_GetItemDataIntAttributeValue::AttributeClass' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataIntAttributeValue, ReturnValue) == 0x000078, "Member 'ItemizationFunctionLibrary_GetItemDataIntAttributeValue::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataItemEntryID
// 0x0080 (0x0080 - 0x0000)
struct ItemizationFunctionLibrary_GetItemDataItemEntryID final
{
public:
	struct FItemAggregatedData                    ItemData;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ReturnValue;                                       // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationFunctionLibrary_GetItemDataItemEntryID) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_GetItemDataItemEntryID");
static_assert(sizeof(ItemizationFunctionLibrary_GetItemDataItemEntryID) == 0x000080, "Wrong size on ItemizationFunctionLibrary_GetItemDataItemEntryID");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataItemEntryID, ItemData) == 0x000000, "Member 'ItemizationFunctionLibrary_GetItemDataItemEntryID::ItemData' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataItemEntryID, ReturnValue) == 0x000070, "Member 'ItemizationFunctionLibrary_GetItemDataItemEntryID::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataSlot
// 0x0078 (0x0078 - 0x0000)
struct ItemizationFunctionLibrary_GetItemDataSlot final
{
public:
	struct FItemAggregatedData                    ItemData;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemizationFunctionLibrary_GetItemDataSlot) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_GetItemDataSlot");
static_assert(sizeof(ItemizationFunctionLibrary_GetItemDataSlot) == 0x000078, "Wrong size on ItemizationFunctionLibrary_GetItemDataSlot");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataSlot, ItemData) == 0x000000, "Member 'ItemizationFunctionLibrary_GetItemDataSlot::ItemData' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataSlot, ReturnValue) == 0x000070, "Member 'ItemizationFunctionLibrary_GetItemDataSlot::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataStringAttributeValue
// 0x0088 (0x0088 - 0x0000)
struct ItemizationFunctionLibrary_GetItemDataStringAttributeValue final
{
public:
	struct FItemAggregatedData                    ItemData;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UItemAttribute_String>      AttributeClass;                                    // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationFunctionLibrary_GetItemDataStringAttributeValue) == 0x000008, "Wrong alignment on ItemizationFunctionLibrary_GetItemDataStringAttributeValue");
static_assert(sizeof(ItemizationFunctionLibrary_GetItemDataStringAttributeValue) == 0x000088, "Wrong size on ItemizationFunctionLibrary_GetItemDataStringAttributeValue");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataStringAttributeValue, ItemData) == 0x000000, "Member 'ItemizationFunctionLibrary_GetItemDataStringAttributeValue::ItemData' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataStringAttributeValue, AttributeClass) == 0x000070, "Member 'ItemizationFunctionLibrary_GetItemDataStringAttributeValue::AttributeClass' has a wrong offset!");
static_assert(offsetof(ItemizationFunctionLibrary_GetItemDataStringAttributeValue, ReturnValue) == 0x000078, "Member 'ItemizationFunctionLibrary_GetItemDataStringAttributeValue::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemAttribute.GetAttributeDescription
// 0x0018 (0x0018 - 0x0000)
struct ItemAttribute_GetAttributeDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAttribute_GetAttributeDescription) == 0x000008, "Wrong alignment on ItemAttribute_GetAttributeDescription");
static_assert(sizeof(ItemAttribute_GetAttributeDescription) == 0x000018, "Wrong size on ItemAttribute_GetAttributeDescription");
static_assert(offsetof(ItemAttribute_GetAttributeDescription, ReturnValue) == 0x000000, "Member 'ItemAttribute_GetAttributeDescription::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemAttribute.GetAttributeName
// 0x0018 (0x0018 - 0x0000)
struct ItemAttribute_GetAttributeName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAttribute_GetAttributeName) == 0x000008, "Wrong alignment on ItemAttribute_GetAttributeName");
static_assert(sizeof(ItemAttribute_GetAttributeName) == 0x000018, "Wrong size on ItemAttribute_GetAttributeName");
static_assert(offsetof(ItemAttribute_GetAttributeName, ReturnValue) == 0x000000, "Member 'ItemAttribute_GetAttributeName::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemComponentStorage_Attach.OnOwnerTransformUpdated
// 0x0038 (0x0038 - 0x0000)
struct ItemComponentStorage_Attach_OnOwnerTransformUpdated final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OldLocation;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemComponentStorage_Attach_OnOwnerTransformUpdated) == 0x000008, "Wrong alignment on ItemComponentStorage_Attach_OnOwnerTransformUpdated");
static_assert(sizeof(ItemComponentStorage_Attach_OnOwnerTransformUpdated) == 0x000038, "Wrong size on ItemComponentStorage_Attach_OnOwnerTransformUpdated");
static_assert(offsetof(ItemComponentStorage_Attach_OnOwnerTransformUpdated, DeltaSeconds) == 0x000000, "Member 'ItemComponentStorage_Attach_OnOwnerTransformUpdated::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ItemComponentStorage_Attach_OnOwnerTransformUpdated, OldLocation) == 0x000008, "Member 'ItemComponentStorage_Attach_OnOwnerTransformUpdated::OldLocation' has a wrong offset!");
static_assert(offsetof(ItemComponentStorage_Attach_OnOwnerTransformUpdated, OldVelocity) == 0x000020, "Member 'ItemComponentStorage_Attach_OnOwnerTransformUpdated::OldVelocity' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemComponent_Core.GetItemRarity
// 0x0008 (0x0008 - 0x0000)
struct ItemComponent_Core_GetItemRarity final
{
public:
	class UItemRarity*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemComponent_Core_GetItemRarity) == 0x000008, "Wrong alignment on ItemComponent_Core_GetItemRarity");
static_assert(sizeof(ItemComponent_Core_GetItemRarity) == 0x000008, "Wrong size on ItemComponent_Core_GetItemRarity");
static_assert(offsetof(ItemComponent_Core_GetItemRarity, ReturnValue) == 0x000000, "Member 'ItemComponent_Core_GetItemRarity::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemComponent_Core.GetItemType
// 0x0008 (0x0008 - 0x0000)
struct ItemComponent_Core_GetItemType final
{
public:
	class UItemType*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemComponent_Core_GetItemType) == 0x000008, "Wrong alignment on ItemComponent_Core_GetItemType");
static_assert(sizeof(ItemComponent_Core_GetItemType) == 0x000008, "Wrong size on ItemComponent_Core_GetItemType");
static_assert(offsetof(ItemComponent_Core_GetItemType, ReturnValue) == 0x000000, "Member 'ItemComponent_Core_GetItemType::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetItemIcon
// 0x0020 (0x0020 - 0x0000)
struct ItemComponent_DisplayUI_GetItemIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemComponent_DisplayUI_GetItemIcon) == 0x000008, "Wrong alignment on ItemComponent_DisplayUI_GetItemIcon");
static_assert(sizeof(ItemComponent_DisplayUI_GetItemIcon) == 0x000020, "Wrong size on ItemComponent_DisplayUI_GetItemIcon");
static_assert(offsetof(ItemComponent_DisplayUI_GetItemIcon, ReturnValue) == 0x000000, "Member 'ItemComponent_DisplayUI_GetItemIcon::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetItemIconDisplayTextType
// 0x0001 (0x0001 - 0x0000)
struct ItemComponent_DisplayUI_GetItemIconDisplayTextType final
{
public:
	EItemIconDisplayTextType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemComponent_DisplayUI_GetItemIconDisplayTextType) == 0x000001, "Wrong alignment on ItemComponent_DisplayUI_GetItemIconDisplayTextType");
static_assert(sizeof(ItemComponent_DisplayUI_GetItemIconDisplayTextType) == 0x000001, "Wrong size on ItemComponent_DisplayUI_GetItemIconDisplayTextType");
static_assert(offsetof(ItemComponent_DisplayUI_GetItemIconDisplayTextType, ReturnValue) == 0x000000, "Member 'ItemComponent_DisplayUI_GetItemIconDisplayTextType::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetItemMaterial
// 0x0020 (0x0020 - 0x0000)
struct ItemComponent_DisplayUI_GetItemMaterial final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemComponent_DisplayUI_GetItemMaterial) == 0x000008, "Wrong alignment on ItemComponent_DisplayUI_GetItemMaterial");
static_assert(sizeof(ItemComponent_DisplayUI_GetItemMaterial) == 0x000020, "Wrong size on ItemComponent_DisplayUI_GetItemMaterial");
static_assert(offsetof(ItemComponent_DisplayUI_GetItemMaterial, ReturnValue) == 0x000000, "Member 'ItemComponent_DisplayUI_GetItemMaterial::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetMaterialTextureParameter
// 0x0004 (0x0004 - 0x0000)
struct ItemComponent_DisplayUI_GetMaterialTextureParameter final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemComponent_DisplayUI_GetMaterialTextureParameter) == 0x000004, "Wrong alignment on ItemComponent_DisplayUI_GetMaterialTextureParameter");
static_assert(sizeof(ItemComponent_DisplayUI_GetMaterialTextureParameter) == 0x000004, "Wrong size on ItemComponent_DisplayUI_GetMaterialTextureParameter");
static_assert(offsetof(ItemComponent_DisplayUI_GetMaterialTextureParameter, ReturnValue) == 0x000000, "Member 'ItemComponent_DisplayUI_GetMaterialTextureParameter::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemComponent_DisplayUI.GetSmallItemIcon
// 0x0020 (0x0020 - 0x0000)
struct ItemComponent_DisplayUI_GetSmallItemIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemComponent_DisplayUI_GetSmallItemIcon) == 0x000008, "Wrong alignment on ItemComponent_DisplayUI_GetSmallItemIcon");
static_assert(sizeof(ItemComponent_DisplayUI_GetSmallItemIcon) == 0x000020, "Wrong size on ItemComponent_DisplayUI_GetSmallItemIcon");
static_assert(offsetof(ItemComponent_DisplayUI_GetSmallItemIcon, ReturnValue) == 0x000000, "Member 'ItemComponent_DisplayUI_GetSmallItemIcon::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationPickupFunctionLibrary.DropItemFromInventoryAsPickup
// 0x0038 (0x0038 - 0x0000)
struct ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup final
{
public:
	class AInventoryCollection*                   Collection;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InventoryID;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemEntryID;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AmountToDrop;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItemPickup*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup) == 0x000008, "Wrong alignment on ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup");
static_assert(sizeof(ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup) == 0x000038, "Wrong size on ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup");
static_assert(offsetof(ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup, Collection) == 0x000000, "Member 'ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup::Collection' has a wrong offset!");
static_assert(offsetof(ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup, InventoryID) == 0x000008, "Member 'ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup::InventoryID' has a wrong offset!");
static_assert(offsetof(ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup, ItemEntryID) == 0x000018, "Member 'ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup::ItemEntryID' has a wrong offset!");
static_assert(offsetof(ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup, AmountToDrop) == 0x000028, "Member 'ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup::AmountToDrop' has a wrong offset!");
static_assert(offsetof(ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup, ReturnValue) == 0x000030, "Member 'ItemizationPickupFunctionLibrary_DropItemFromInventoryAsPickup::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationPickupFunctionLibrary.SetDefaultItemPickupClass
// 0x0008 (0x0008 - 0x0000)
struct ItemizationPickupFunctionLibrary_SetDefaultItemPickupClass final
{
public:
	TSubclassOf<class AItemPickup>                ItemPickupClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationPickupFunctionLibrary_SetDefaultItemPickupClass) == 0x000008, "Wrong alignment on ItemizationPickupFunctionLibrary_SetDefaultItemPickupClass");
static_assert(sizeof(ItemizationPickupFunctionLibrary_SetDefaultItemPickupClass) == 0x000008, "Wrong size on ItemizationPickupFunctionLibrary_SetDefaultItemPickupClass");
static_assert(offsetof(ItemizationPickupFunctionLibrary_SetDefaultItemPickupClass, ItemPickupClass) == 0x000000, "Member 'ItemizationPickupFunctionLibrary_SetDefaultItemPickupClass::ItemPickupClass' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationPickupFunctionLibrary.SetDefaultItemPickupMesh
// 0x0008 (0x0008 - 0x0000)
struct ItemizationPickupFunctionLibrary_SetDefaultItemPickupMesh final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationPickupFunctionLibrary_SetDefaultItemPickupMesh) == 0x000008, "Wrong alignment on ItemizationPickupFunctionLibrary_SetDefaultItemPickupMesh");
static_assert(sizeof(ItemizationPickupFunctionLibrary_SetDefaultItemPickupMesh) == 0x000008, "Wrong size on ItemizationPickupFunctionLibrary_SetDefaultItemPickupMesh");
static_assert(offsetof(ItemizationPickupFunctionLibrary_SetDefaultItemPickupMesh, Mesh) == 0x000000, "Member 'ItemizationPickupFunctionLibrary_SetDefaultItemPickupMesh::Mesh' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemizationPickupFunctionLibrary.SpawnItemPickupInWorld
// 0x0038 (0x0038 - 0x0000)
struct ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemDefinitionBase*              ItemDefinition;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPosition;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Amount;                                            // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItemPickup*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld) == 0x000008, "Wrong alignment on ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld");
static_assert(sizeof(ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld) == 0x000038, "Wrong size on ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld");
static_assert(offsetof(ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld, WorldContextObject) == 0x000000, "Member 'ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld, ItemDefinition) == 0x000008, "Member 'ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld, InPosition) == 0x000010, "Member 'ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld::InPosition' has a wrong offset!");
static_assert(offsetof(ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld, Amount) == 0x000028, "Member 'ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld::Amount' has a wrong offset!");
static_assert(offsetof(ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld, ReturnValue) == 0x000030, "Member 'ItemizationPickupFunctionLibrary_SpawnItemPickupInWorld::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemRarity.GetColor
// 0x0010 (0x0010 - 0x0000)
struct ItemRarity_GetColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemRarity_GetColor) == 0x000004, "Wrong alignment on ItemRarity_GetColor");
static_assert(sizeof(ItemRarity_GetColor) == 0x000010, "Wrong size on ItemRarity_GetColor");
static_assert(offsetof(ItemRarity_GetColor, ReturnValue) == 0x000000, "Member 'ItemRarity_GetColor::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemRarity.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct ItemRarity_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemRarity_GetDescription) == 0x000008, "Wrong alignment on ItemRarity_GetDescription");
static_assert(sizeof(ItemRarity_GetDescription) == 0x000018, "Wrong size on ItemRarity_GetDescription");
static_assert(offsetof(ItemRarity_GetDescription, ReturnValue) == 0x000000, "Member 'ItemRarity_GetDescription::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemRarity.GetName
// 0x0018 (0x0018 - 0x0000)
struct ItemRarity_GetName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemRarity_GetName) == 0x000008, "Wrong alignment on ItemRarity_GetName");
static_assert(sizeof(ItemRarity_GetName) == 0x000018, "Wrong size on ItemRarity_GetName");
static_assert(offsetof(ItemRarity_GetName, ReturnValue) == 0x000000, "Member 'ItemRarity_GetName::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemRarity.GetTier
// 0x0004 (0x0004 - 0x0000)
struct ItemRarity_GetTier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemRarity_GetTier) == 0x000004, "Wrong alignment on ItemRarity_GetTier");
static_assert(sizeof(ItemRarity_GetTier) == 0x000004, "Wrong size on ItemRarity_GetTier");
static_assert(offsetof(ItemRarity_GetTier, ReturnValue) == 0x000000, "Member 'ItemRarity_GetTier::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemType.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct ItemType_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemType_GetDescription) == 0x000008, "Wrong alignment on ItemType_GetDescription");
static_assert(sizeof(ItemType_GetDescription) == 0x000018, "Wrong size on ItemType_GetDescription");
static_assert(offsetof(ItemType_GetDescription, ReturnValue) == 0x000000, "Member 'ItemType_GetDescription::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemType.GetName
// 0x0018 (0x0018 - 0x0000)
struct ItemType_GetName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemType_GetName) == 0x000008, "Wrong alignment on ItemType_GetName");
static_assert(sizeof(ItemType_GetName) == 0x000018, "Wrong size on ItemType_GetName");
static_assert(offsetof(ItemType_GetName, ReturnValue) == 0x000000, "Member 'ItemType_GetName::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.ItemType.GetParentType
// 0x0008 (0x0008 - 0x0000)
struct ItemType_GetParentType final
{
public:
	const class UItemType*                        ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemType_GetParentType) == 0x000008, "Wrong alignment on ItemType_GetParentType");
static_assert(sizeof(ItemType_GetParentType) == 0x000008, "Wrong size on ItemType_GetParentType");
static_assert(offsetof(ItemType_GetParentType, ReturnValue) == 0x000000, "Member 'ItemType_GetParentType::ReturnValue' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryComponent.AddItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_AddItem final
{
public:
	class UItemDefinitionBase*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Amount;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_AddItem) == 0x000008, "Wrong alignment on InventoryComponent_AddItem");
static_assert(sizeof(InventoryComponent_AddItem) == 0x000010, "Wrong size on InventoryComponent_AddItem");
static_assert(offsetof(InventoryComponent_AddItem, ItemDefinition) == 0x000000, "Member 'InventoryComponent_AddItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(InventoryComponent_AddItem, Amount) == 0x000008, "Member 'InventoryComponent_AddItem::Amount' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryComponent.AddOrResetInventory
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_AddOrResetInventory final
{
public:
	class UInventoryDefinition*                   NewInventoryDefinition;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_AddOrResetInventory) == 0x000008, "Wrong alignment on InventoryComponent_AddOrResetInventory");
static_assert(sizeof(InventoryComponent_AddOrResetInventory) == 0x000008, "Wrong size on InventoryComponent_AddOrResetInventory");
static_assert(offsetof(InventoryComponent_AddOrResetInventory, NewInventoryDefinition) == 0x000000, "Member 'InventoryComponent_AddOrResetInventory::NewInventoryDefinition' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryComponent.DropItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_DropItem final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_DropItem) == 0x000004, "Wrong alignment on InventoryComponent_DropItem");
static_assert(sizeof(InventoryComponent_DropItem) == 0x000010, "Wrong size on InventoryComponent_DropItem");
static_assert(offsetof(InventoryComponent_DropItem, ItemEntryID) == 0x000000, "Member 'InventoryComponent_DropItem::ItemEntryID' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryComponent.SetEquippableItemActive
// 0x0014 (0x0014 - 0x0000)
struct InventoryComponent_SetEquippableItemActive final
{
public:
	struct FGuid                                  ItemEntryID;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_SetEquippableItemActive) == 0x000004, "Wrong alignment on InventoryComponent_SetEquippableItemActive");
static_assert(sizeof(InventoryComponent_SetEquippableItemActive) == 0x000014, "Wrong size on InventoryComponent_SetEquippableItemActive");
static_assert(offsetof(InventoryComponent_SetEquippableItemActive, ItemEntryID) == 0x000000, "Member 'InventoryComponent_SetEquippableItemActive::ItemEntryID' has a wrong offset!");
static_assert(offsetof(InventoryComponent_SetEquippableItemActive, bActive) == 0x000010, "Member 'InventoryComponent_SetEquippableItemActive::bActive' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryComponent.UseItem
// 0x0020 (0x0020 - 0x0000)
struct InventoryComponent_UseItem final
{
public:
	struct FGuid                                  ItemId;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  AdditionalItemID;                                  // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_UseItem) == 0x000004, "Wrong alignment on InventoryComponent_UseItem");
static_assert(sizeof(InventoryComponent_UseItem) == 0x000020, "Wrong size on InventoryComponent_UseItem");
static_assert(offsetof(InventoryComponent_UseItem, ItemId) == 0x000000, "Member 'InventoryComponent_UseItem::ItemId' has a wrong offset!");
static_assert(offsetof(InventoryComponent_UseItem, AdditionalItemID) == 0x000010, "Member 'InventoryComponent_UseItem::AdditionalItemID' has a wrong offset!");

// Function ItemizationCoreRuntime.InventoryComponent.GetInventoryCollection
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetInventoryCollection final
{
public:
	class AInventoryCollection*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetInventoryCollection) == 0x000008, "Wrong alignment on InventoryComponent_GetInventoryCollection");
static_assert(sizeof(InventoryComponent_GetInventoryCollection) == 0x000008, "Wrong size on InventoryComponent_GetInventoryCollection");
static_assert(offsetof(InventoryComponent_GetInventoryCollection, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetInventoryCollection::ReturnValue' has a wrong offset!");

}

