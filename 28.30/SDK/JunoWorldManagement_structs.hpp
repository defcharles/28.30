#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JunoWorldManagement

#include "Basic.hpp"

#include "JsonUtilities_structs.hpp"


namespace SDK
{

// Enum JunoWorldManagement.EJunoWorldOccupantKind
// NumValues: 0x0004
enum class EJunoWorldOccupantKind : uint8
{
	Owner                                    = 0,
	Keyholder                                = 1,
	Guest                                    = 2,
	Count                                    = 3,
};

// Enum JunoWorldManagement.EJunoWorldMetadataVersion
// NumValues: 0x0004
enum class EJunoWorldMetadataVersion : uint8
{
	Initial                                  = 0,
	GameplayPropertiesConvertedToArray       = 1,
	LastPlusOne                              = 2,
	Current                                  = 1,
};

// Enum JunoWorldManagement.EJunoWorldSettingOptions_BuildMode
// NumValues: 0x0002
enum class EJunoWorldSettingOptions_BuildMode : uint8
{
	Survival                                 = 0,
	Sandbox                                  = 1,
};

// Enum JunoWorldManagement.EJunoWorldSettingOptions_CreatureActivation
// NumValues: 0x0002
enum class EJunoWorldSettingOptions_CreatureActivation : uint8
{
	On                                       = 0,
	Off                                      = 1,
};

// Enum JunoWorldManagement.EJunoWorldSettingOptions_WorldSwitch
// NumValues: 0x0002
enum class EJunoWorldSettingOptions_WorldSwitch : uint8
{
	On                                       = 0,
	Off                                      = 1,
};

// ScriptStruct JunoWorldManagement.JunoWorldSysMetadata
// 0x0018 (0x0018 - 0x0000)
struct FJunoWorldSysMetadata final
{
public:
	class FString                                 McpBackend;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltasRevisionIndex;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldSysMetadata) == 0x000008, "Wrong alignment on FJunoWorldSysMetadata");
static_assert(sizeof(FJunoWorldSysMetadata) == 0x000018, "Wrong size on FJunoWorldSysMetadata");
static_assert(offsetof(FJunoWorldSysMetadata, McpBackend) == 0x000000, "Member 'FJunoWorldSysMetadata::McpBackend' has a wrong offset!");
static_assert(offsetof(FJunoWorldSysMetadata, DeltasRevisionIndex) == 0x000010, "Member 'FJunoWorldSysMetadata::DeltasRevisionIndex' has a wrong offset!");

// ScriptStruct JunoWorldManagement.JunoWorldGameplayProperty
// 0x0018 (0x0018 - 0x0000)
struct FJunoWorldGameplayProperty final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldGameplayProperty) == 0x000008, "Wrong alignment on FJunoWorldGameplayProperty");
static_assert(sizeof(FJunoWorldGameplayProperty) == 0x000018, "Wrong size on FJunoWorldGameplayProperty");
static_assert(offsetof(FJunoWorldGameplayProperty, ID) == 0x000000, "Member 'FJunoWorldGameplayProperty::ID' has a wrong offset!");
static_assert(offsetof(FJunoWorldGameplayProperty, Value) == 0x000010, "Member 'FJunoWorldGameplayProperty::Value' has a wrong offset!");

// ScriptStruct JunoWorldManagement.JunoWorldGameMetadata
// 0x0058 (0x0058 - 0x0000)
struct FJunoWorldGameMetadata final
{
public:
	int32                                         PersistenceVersion;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdventureSeed;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoWorldGameplayProperty>     GameplayProperties;                                // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     DevProperties;                                     // 0x0038(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldGameMetadata) == 0x000008, "Wrong alignment on FJunoWorldGameMetadata");
static_assert(sizeof(FJunoWorldGameMetadata) == 0x000058, "Wrong size on FJunoWorldGameMetadata");
static_assert(offsetof(FJunoWorldGameMetadata, PersistenceVersion) == 0x000000, "Member 'FJunoWorldGameMetadata::PersistenceVersion' has a wrong offset!");
static_assert(offsetof(FJunoWorldGameMetadata, AdventureSeed) == 0x000004, "Member 'FJunoWorldGameMetadata::AdventureSeed' has a wrong offset!");
static_assert(offsetof(FJunoWorldGameMetadata, Title) == 0x000008, "Member 'FJunoWorldGameMetadata::Title' has a wrong offset!");
static_assert(offsetof(FJunoWorldGameMetadata, MapName) == 0x000018, "Member 'FJunoWorldGameMetadata::MapName' has a wrong offset!");
static_assert(offsetof(FJunoWorldGameMetadata, GameplayProperties) == 0x000028, "Member 'FJunoWorldGameMetadata::GameplayProperties' has a wrong offset!");
static_assert(offsetof(FJunoWorldGameMetadata, DevProperties) == 0x000038, "Member 'FJunoWorldGameMetadata::DevProperties' has a wrong offset!");

// ScriptStruct JunoWorldManagement.JunoWorldMetadata
// 0x0088 (0x0088 - 0x0000)
struct FJunoWorldMetadata final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoWorldSysMetadata                  Sys;                                               // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	struct FJunoWorldGameMetadata                 Game;                                              // 0x0028(0x0058)(NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldMetadata) == 0x000008, "Wrong alignment on FJunoWorldMetadata");
static_assert(sizeof(FJunoWorldMetadata) == 0x000088, "Wrong size on FJunoWorldMetadata");
static_assert(offsetof(FJunoWorldMetadata, ID) == 0x000000, "Member 'FJunoWorldMetadata::ID' has a wrong offset!");
static_assert(offsetof(FJunoWorldMetadata, Sys) == 0x000010, "Member 'FJunoWorldMetadata::Sys' has a wrong offset!");
static_assert(offsetof(FJunoWorldMetadata, Game) == 0x000028, "Member 'FJunoWorldMetadata::Game' has a wrong offset!");

// ScriptStruct JunoWorldManagement.JunoWorldGameMetadata_v0_Initial
// 0x0050 (0x0050 - 0x0000)
struct FJunoWorldGameMetadata_v0_Initial final
{
public:
	TMap<class FString, class FName>              GameplayProperties;                                // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldGameMetadata_v0_Initial) == 0x000008, "Wrong alignment on FJunoWorldGameMetadata_v0_Initial");
static_assert(sizeof(FJunoWorldGameMetadata_v0_Initial) == 0x000050, "Wrong size on FJunoWorldGameMetadata_v0_Initial");
static_assert(offsetof(FJunoWorldGameMetadata_v0_Initial, GameplayProperties) == 0x000000, "Member 'FJunoWorldGameMetadata_v0_Initial::GameplayProperties' has a wrong offset!");

// ScriptStruct JunoWorldManagement.JunoWorldQuery
// 0x0090 (0x0090 - 0x0000)
struct FJunoWorldQuery final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoWorldMetadata                     MetaData;                                          // 0x0008(0x0088)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldQuery) == 0x000008, "Wrong alignment on FJunoWorldQuery");
static_assert(sizeof(FJunoWorldQuery) == 0x000090, "Wrong size on FJunoWorldQuery");
static_assert(offsetof(FJunoWorldQuery, MetaData) == 0x000008, "Member 'FJunoWorldQuery::MetaData' has a wrong offset!");

// ScriptStruct JunoWorldManagement.JunoWorldQueryResult
// 0x0008 (0x0008 - 0x0000)
struct FJunoWorldQueryResult final
{
public:
	class UJunoUserWorldView*                     UserWorldView;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldQueryResult) == 0x000008, "Wrong alignment on FJunoWorldQueryResult");
static_assert(sizeof(FJunoWorldQueryResult) == 0x000008, "Wrong size on FJunoWorldQueryResult");
static_assert(offsetof(FJunoWorldQueryResult, UserWorldView) == 0x000000, "Member 'FJunoWorldQueryResult::UserWorldView' has a wrong offset!");

// ScriptStruct JunoWorldManagement.JunoWorldMCPProto_CreateWorldResult
// 0x0010 (0x0010 - 0x0000)
struct FJunoWorldMCPProto_CreateWorldResult final
{
public:
	class FString                                 WorldId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldMCPProto_CreateWorldResult) == 0x000008, "Wrong alignment on FJunoWorldMCPProto_CreateWorldResult");
static_assert(sizeof(FJunoWorldMCPProto_CreateWorldResult) == 0x000010, "Wrong size on FJunoWorldMCPProto_CreateWorldResult");
static_assert(offsetof(FJunoWorldMCPProto_CreateWorldResult, WorldId) == 0x000000, "Member 'FJunoWorldMCPProto_CreateWorldResult::WorldId' has a wrong offset!");

}

