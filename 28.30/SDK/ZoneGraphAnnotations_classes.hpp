#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ZoneGraphAnnotations

#include "Basic.hpp"

#include "StructUtils_structs.hpp"
#include "Engine_classes.hpp"
#include "ZoneGraphAnnotations_structs.hpp"
#include "ZoneGraph_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class ZoneGraphAnnotations.ZoneGraphAnnotationComponent
// 0x0020 (0x0570 - 0x0550)
class UZoneGraphAnnotationComponent : public UDebugDrawComponent
{
public:
	uint8                                         Pad_550[0x18];                                     // 0x0550(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableDebugDrawing;                               // 0x0568(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphAnnotationComponent">();
	}
	static class UZoneGraphAnnotationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphAnnotationComponent>();
	}
};
static_assert(alignof(UZoneGraphAnnotationComponent) == 0x000010, "Wrong alignment on UZoneGraphAnnotationComponent");
static_assert(sizeof(UZoneGraphAnnotationComponent) == 0x000570, "Wrong size on UZoneGraphAnnotationComponent");
static_assert(offsetof(UZoneGraphAnnotationComponent, bEnableDebugDrawing) == 0x000568, "Member 'UZoneGraphAnnotationComponent::bEnableDebugDrawing' has a wrong offset!");

// Class ZoneGraphAnnotations.ZoneGraphAnnotationSubsystem
// 0x0070 (0x00B0 - 0x0040)
class UZoneGraphAnnotationSubsystem final : public UTickableWorldSubsystem
{
public:
	TArray<struct FRegisteredZoneGraphAnnotation> RegisteredComponents;                              // 0x0040(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FInstancedStructContainer              Events[0x2];                                       // 0x0050(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UZoneGraphAnnotationComponent*>  TagToAnnotationLookup;                             // 0x0078(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x28];                                      // 0x0088(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphAnnotationSubsystem">();
	}
	static class UZoneGraphAnnotationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphAnnotationSubsystem>();
	}
};
static_assert(alignof(UZoneGraphAnnotationSubsystem) == 0x000008, "Wrong alignment on UZoneGraphAnnotationSubsystem");
static_assert(sizeof(UZoneGraphAnnotationSubsystem) == 0x0000B0, "Wrong size on UZoneGraphAnnotationSubsystem");
static_assert(offsetof(UZoneGraphAnnotationSubsystem, RegisteredComponents) == 0x000040, "Member 'UZoneGraphAnnotationSubsystem::RegisteredComponents' has a wrong offset!");
static_assert(offsetof(UZoneGraphAnnotationSubsystem, Events) == 0x000050, "Member 'UZoneGraphAnnotationSubsystem::Events' has a wrong offset!");
static_assert(offsetof(UZoneGraphAnnotationSubsystem, TagToAnnotationLookup) == 0x000078, "Member 'UZoneGraphAnnotationSubsystem::TagToAnnotationLookup' has a wrong offset!");

// Class ZoneGraphAnnotations.ZoneGraphAnnotationTest
// 0x0008 (0x0030 - 0x0028)
class UZoneGraphAnnotationTest : public UObject
{
public:
	class UZoneGraphAnnotationTestingComponent*   OwnerComponent;                                    // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphAnnotationTest">();
	}
	static class UZoneGraphAnnotationTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphAnnotationTest>();
	}
};
static_assert(alignof(UZoneGraphAnnotationTest) == 0x000008, "Wrong alignment on UZoneGraphAnnotationTest");
static_assert(sizeof(UZoneGraphAnnotationTest) == 0x000030, "Wrong size on UZoneGraphAnnotationTest");
static_assert(offsetof(UZoneGraphAnnotationTest, OwnerComponent) == 0x000028, "Member 'UZoneGraphAnnotationTest::OwnerComponent' has a wrong offset!");

// Class ZoneGraphAnnotations.ZoneGraphAnnotationTestingComponent
// 0x0010 (0x0560 - 0x0550)
class UZoneGraphAnnotationTestingComponent final : public UDebugDrawComponent
{
public:
	TArray<class UZoneGraphAnnotationTest*>       Tests;                                             // 0x0550(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphAnnotationTestingComponent">();
	}
	static class UZoneGraphAnnotationTestingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphAnnotationTestingComponent>();
	}
};
static_assert(alignof(UZoneGraphAnnotationTestingComponent) == 0x000010, "Wrong alignment on UZoneGraphAnnotationTestingComponent");
static_assert(sizeof(UZoneGraphAnnotationTestingComponent) == 0x000560, "Wrong size on UZoneGraphAnnotationTestingComponent");
static_assert(offsetof(UZoneGraphAnnotationTestingComponent, Tests) == 0x000550, "Member 'UZoneGraphAnnotationTestingComponent::Tests' has a wrong offset!");

// Class ZoneGraphAnnotations.ZoneGraphAnnotationTestingActor
// 0x0008 (0x0298 - 0x0290)
class AZoneGraphAnnotationTestingActor final : public AActor
{
public:
	class UZoneGraphAnnotationTestingComponent*   TestingComp;                                       // 0x0290(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Trigger();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphAnnotationTestingActor">();
	}
	static class AZoneGraphAnnotationTestingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZoneGraphAnnotationTestingActor>();
	}
};
static_assert(alignof(AZoneGraphAnnotationTestingActor) == 0x000008, "Wrong alignment on AZoneGraphAnnotationTestingActor");
static_assert(sizeof(AZoneGraphAnnotationTestingActor) == 0x000298, "Wrong size on AZoneGraphAnnotationTestingActor");
static_assert(offsetof(AZoneGraphAnnotationTestingActor, TestingComp) == 0x000290, "Member 'AZoneGraphAnnotationTestingActor::TestingComp' has a wrong offset!");

// Class ZoneGraphAnnotations.ZoneGraphDisturbanceAnnotation
// 0x0070 (0x05E0 - 0x0570)
class UZoneGraphDisturbanceAnnotation final : public UZoneGraphAnnotationComponent
{
public:
	struct FZoneGraphTag                          DangerAnnotationTag;                               // 0x0570(0x0001)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FZoneGraphTag                          ObstacleAnnotationTag;                             // 0x0571(0x0001)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_572[0x2];                                      // 0x0572(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZoneGraphTagFilter                    AffectedLaneTags;                                  // 0x0574(0x000C)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FZoneGraphTagFilter                    EscapeLaneTags;                                    // 0x0580(0x000C)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         IdealSpanLength;                                   // 0x058C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_590[0x40];                                     // 0x0590(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneGraphSubsystem*                    ZoneGraphSubsystem;                                // 0x05D0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D8[0x8];                                      // 0x05D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphDisturbanceAnnotation">();
	}
	static class UZoneGraphDisturbanceAnnotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphDisturbanceAnnotation>();
	}
};
static_assert(alignof(UZoneGraphDisturbanceAnnotation) == 0x000010, "Wrong alignment on UZoneGraphDisturbanceAnnotation");
static_assert(sizeof(UZoneGraphDisturbanceAnnotation) == 0x0005E0, "Wrong size on UZoneGraphDisturbanceAnnotation");
static_assert(offsetof(UZoneGraphDisturbanceAnnotation, DangerAnnotationTag) == 0x000570, "Member 'UZoneGraphDisturbanceAnnotation::DangerAnnotationTag' has a wrong offset!");
static_assert(offsetof(UZoneGraphDisturbanceAnnotation, ObstacleAnnotationTag) == 0x000571, "Member 'UZoneGraphDisturbanceAnnotation::ObstacleAnnotationTag' has a wrong offset!");
static_assert(offsetof(UZoneGraphDisturbanceAnnotation, AffectedLaneTags) == 0x000574, "Member 'UZoneGraphDisturbanceAnnotation::AffectedLaneTags' has a wrong offset!");
static_assert(offsetof(UZoneGraphDisturbanceAnnotation, EscapeLaneTags) == 0x000580, "Member 'UZoneGraphDisturbanceAnnotation::EscapeLaneTags' has a wrong offset!");
static_assert(offsetof(UZoneGraphDisturbanceAnnotation, IdealSpanLength) == 0x00058C, "Member 'UZoneGraphDisturbanceAnnotation::IdealSpanLength' has a wrong offset!");
static_assert(offsetof(UZoneGraphDisturbanceAnnotation, ZoneGraphSubsystem) == 0x0005D0, "Member 'UZoneGraphDisturbanceAnnotation::ZoneGraphSubsystem' has a wrong offset!");

// Class ZoneGraphAnnotations.ZoneGraphDisturbanceAnnotationTest
// 0x0020 (0x0050 - 0x0030)
class UZoneGraphDisturbanceAnnotationTest final : public UZoneGraphAnnotationTest
{
public:
	struct FVector                                Offset;                                            // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         duration;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DangerRadius;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphDisturbanceAnnotationTest">();
	}
	static class UZoneGraphDisturbanceAnnotationTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphDisturbanceAnnotationTest>();
	}
};
static_assert(alignof(UZoneGraphDisturbanceAnnotationTest) == 0x000008, "Wrong alignment on UZoneGraphDisturbanceAnnotationTest");
static_assert(sizeof(UZoneGraphDisturbanceAnnotationTest) == 0x000050, "Wrong size on UZoneGraphDisturbanceAnnotationTest");
static_assert(offsetof(UZoneGraphDisturbanceAnnotationTest, Offset) == 0x000030, "Member 'UZoneGraphDisturbanceAnnotationTest::Offset' has a wrong offset!");
static_assert(offsetof(UZoneGraphDisturbanceAnnotationTest, duration) == 0x000048, "Member 'UZoneGraphDisturbanceAnnotationTest::duration' has a wrong offset!");
static_assert(offsetof(UZoneGraphDisturbanceAnnotationTest, DangerRadius) == 0x00004C, "Member 'UZoneGraphDisturbanceAnnotationTest::DangerRadius' has a wrong offset!");

// Class ZoneGraphAnnotations.ZoneGraphDisturbanceAnnotationBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UZoneGraphDisturbanceAnnotationBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void TriggerDanger(class UObject* WorldContextObject, const class AActor* Instigator, const struct FVector& Position, const float Radius, const float duration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphDisturbanceAnnotationBPLibrary">();
	}
	static class UZoneGraphDisturbanceAnnotationBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphDisturbanceAnnotationBPLibrary>();
	}
};
static_assert(alignof(UZoneGraphDisturbanceAnnotationBPLibrary) == 0x000008, "Wrong alignment on UZoneGraphDisturbanceAnnotationBPLibrary");
static_assert(sizeof(UZoneGraphDisturbanceAnnotationBPLibrary) == 0x000028, "Wrong size on UZoneGraphDisturbanceAnnotationBPLibrary");

}

