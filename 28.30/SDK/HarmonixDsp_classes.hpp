#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HarmonixDsp

#include "Basic.hpp"

#include "Harmonix_classes.hpp"
#include "HarmonixDsp_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class HarmonixDsp.FusionPatch
// 0x0048 (0x0070 - 0x0028)
class UFusionPatch final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFusionPatchData                       FusionPatchData;                                   // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FusionPatch">();
	}
	static class UFusionPatch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFusionPatch>();
	}
};
static_assert(alignof(UFusionPatch) == 0x000008, "Wrong alignment on UFusionPatch");
static_assert(sizeof(UFusionPatch) == 0x000070, "Wrong size on UFusionPatch");
static_assert(offsetof(UFusionPatch, FusionPatchData) == 0x000030, "Member 'UFusionPatch::FusionPatchData' has a wrong offset!");

// Class HarmonixDsp.StretcherAndPitchShifterConfig
// 0x0000 (0x0028 - 0x0028)
class UStretcherAndPitchShifterConfig : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StretcherAndPitchShifterConfig">();
	}
	static class UStretcherAndPitchShifterConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStretcherAndPitchShifterConfig>();
	}
};
static_assert(alignof(UStretcherAndPitchShifterConfig) == 0x000008, "Wrong alignment on UStretcherAndPitchShifterConfig");
static_assert(sizeof(UStretcherAndPitchShifterConfig) == 0x000028, "Wrong size on UStretcherAndPitchShifterConfig");

// Class HarmonixDsp.SmbPitchShifterConfig
// 0x0020 (0x0048 - 0x0028)
class USmbPitchShifterConfig final : public UStretcherAndPitchShifterConfig
{
public:
	uint32                                        DefaultAllocatedStretchers;                        // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SwitchAllocatedStretchers;                         // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PS4AllocatedStretchers;                            // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PS5AllocatedStretchers;                            // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        XboxOneAllocatedStretchers;                        // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        XSXAllocatedStretchers;                            // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AndroidAllocatedStretchers;                        // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmbPitchShifterConfig">();
	}
	static class USmbPitchShifterConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmbPitchShifterConfig>();
	}
};
static_assert(alignof(USmbPitchShifterConfig) == 0x000008, "Wrong alignment on USmbPitchShifterConfig");
static_assert(sizeof(USmbPitchShifterConfig) == 0x000048, "Wrong size on USmbPitchShifterConfig");
static_assert(offsetof(USmbPitchShifterConfig, DefaultAllocatedStretchers) == 0x000028, "Member 'USmbPitchShifterConfig::DefaultAllocatedStretchers' has a wrong offset!");
static_assert(offsetof(USmbPitchShifterConfig, SwitchAllocatedStretchers) == 0x00002C, "Member 'USmbPitchShifterConfig::SwitchAllocatedStretchers' has a wrong offset!");
static_assert(offsetof(USmbPitchShifterConfig, PS4AllocatedStretchers) == 0x000030, "Member 'USmbPitchShifterConfig::PS4AllocatedStretchers' has a wrong offset!");
static_assert(offsetof(USmbPitchShifterConfig, PS5AllocatedStretchers) == 0x000034, "Member 'USmbPitchShifterConfig::PS5AllocatedStretchers' has a wrong offset!");
static_assert(offsetof(USmbPitchShifterConfig, XboxOneAllocatedStretchers) == 0x000038, "Member 'USmbPitchShifterConfig::XboxOneAllocatedStretchers' has a wrong offset!");
static_assert(offsetof(USmbPitchShifterConfig, XSXAllocatedStretchers) == 0x00003C, "Member 'USmbPitchShifterConfig::XSXAllocatedStretchers' has a wrong offset!");
static_assert(offsetof(USmbPitchShifterConfig, AndroidAllocatedStretchers) == 0x000040, "Member 'USmbPitchShifterConfig::AndroidAllocatedStretchers' has a wrong offset!");

// Class HarmonixDsp.StretcherAndPitchShifterFactoryConfig
// 0x0028 (0x0050 - 0x0028)
class UStretcherAndPitchShifterFactoryConfig final : public UHarmonixDeveloperSettings
{
public:
	TArray<class FName>                           FactoryPriority;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPitchShifterName                      DefaultFactory;                                    // 0x0038(0x0004)(Edit, Config, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPitchShifterNameRedirect>      FactoryNameRedirects;                              // 0x0040(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StretcherAndPitchShifterFactoryConfig">();
	}
	static class UStretcherAndPitchShifterFactoryConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStretcherAndPitchShifterFactoryConfig>();
	}
};
static_assert(alignof(UStretcherAndPitchShifterFactoryConfig) == 0x000008, "Wrong alignment on UStretcherAndPitchShifterFactoryConfig");
static_assert(sizeof(UStretcherAndPitchShifterFactoryConfig) == 0x000050, "Wrong size on UStretcherAndPitchShifterFactoryConfig");
static_assert(offsetof(UStretcherAndPitchShifterFactoryConfig, FactoryPriority) == 0x000028, "Member 'UStretcherAndPitchShifterFactoryConfig::FactoryPriority' has a wrong offset!");
static_assert(offsetof(UStretcherAndPitchShifterFactoryConfig, DefaultFactory) == 0x000038, "Member 'UStretcherAndPitchShifterFactoryConfig::DefaultFactory' has a wrong offset!");
static_assert(offsetof(UStretcherAndPitchShifterFactoryConfig, FactoryNameRedirects) == 0x000040, "Member 'UStretcherAndPitchShifterFactoryConfig::FactoryNameRedirects' has a wrong offset!");

}

