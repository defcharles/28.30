#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MilkshakeRuntime

#include "Basic.hpp"

#include "MilkshakeRuntime_structs.hpp"
#include "GameplayCameras_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FieldSystemEngine_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class MilkshakeRuntime.MilkshakeControllerComponent
// 0x02C0 (0x0368 - 0x00A8)
class UMilkshakeControllerComponent final : public UFortControllerComponent
{
public:
	struct FScalableFloat                         NearbyBuildingActorsUpdateScanRadius;              // 0x00A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         NearbyBuildingActorsUpdateScanRadiusReplicated;    // 0x00D0(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CameraShakeScale;                                  // 0x00D8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         CameraShakeScaleReplicated;                        // 0x0100(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         NearbyBuildingActorsUpdateInterval;                // 0x0108(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         NearbyBuildingActorsUpdateIntervalReplicated;      // 0x0130(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         bForceFeedbackEnabled;                             // 0x0138(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bForceFeedbackEnabledReplicated;                   // 0x0160(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ForceFeedbackTag;                                  // 0x0164(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            PawnInAirBasedCameraShakeMultiplierLookUpCurve;    // 0x0168(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PawnInAirBasedCameraShakeMultiplierInterpSpeed;    // 0x0170(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           CameraShakeClass;                                  // 0x0178(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FROscillator                           CameraShakeRotOscillationBaseValues;               // 0x0180(0x0024)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         CameraShakeRotOscillationPitchFrequencyMin;        // 0x01A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeRotOscillationPitchFrequencyMax;        // 0x01A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeRotOscillationRollFrequencyMin;         // 0x01AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeRotOscillationRollFrequencyMax;         // 0x01B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             CameraShakeSoundCue;                               // 0x01B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeAudioFadeOutDuration;                   // 0x01C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAudioFaderCurve                              CameraShakeAudioFadeCurveType;                     // 0x01C4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraShakeAudioParam;                             // 0x01C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MinTimeBetweenBuildingDamageFX;                    // 0x01D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         MinTimeBetweenBuildingDamageFXReplicated;          // 0x01F8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxTimeBetweenBuildingDamageFX;                    // 0x0200(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         MaxTimeBetweenBuildingDamageFXReplicated;          // 0x0228(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         BuildingDamageFXTemplate;                          // 0x0230(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingDamageFXCooldown;                          // 0x0238(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BuildingDamageFXMagnitudeParamName;                // 0x023C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class ABuildingActor*, float>            RecentDamageFXBuildings;                           // 0x0240(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TMap<EFortResourceType, class USoundBase*>    BuildingDamageSoundCueByResourceType;              // 0x0290(0x0050)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	float                                         PlayForceFeedbackInterval;                         // 0x02E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UForceFeedbackEffect*>           ForceFeedbackEffects;                              // 0x02E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x10];                                     // 0x02F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMilkshakeEarthquakeActor*>      RegisteredEarthquakes;                             // 0x0308(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class AMilkshakeEarthquakeActor*              CurrentEarthquake;                                 // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0x18];                                     // 0x0320(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CurrentCameraShakeAudioComponent;                  // 0x0338(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ABuildingActor*>                 NearbyBuildingActors;                              // 0x0340(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x18];                                     // 0x0350(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayForceFeedback();
	void RegisterEarthquake(class AMilkshakeEarthquakeActor* Earthquake);
	void SpawnBuildingDamageFX();
	void UnregisterEarthquake(class AMilkshakeEarthquakeActor* Earthquake);
	void UpdateNearbyBuildingActors();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MilkshakeControllerComponent">();
	}
	static class UMilkshakeControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMilkshakeControllerComponent>();
	}
};
static_assert(alignof(UMilkshakeControllerComponent) == 0x000008, "Wrong alignment on UMilkshakeControllerComponent");
static_assert(sizeof(UMilkshakeControllerComponent) == 0x000368, "Wrong size on UMilkshakeControllerComponent");
static_assert(offsetof(UMilkshakeControllerComponent, NearbyBuildingActorsUpdateScanRadius) == 0x0000A8, "Member 'UMilkshakeControllerComponent::NearbyBuildingActorsUpdateScanRadius' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, NearbyBuildingActorsUpdateScanRadiusReplicated) == 0x0000D0, "Member 'UMilkshakeControllerComponent::NearbyBuildingActorsUpdateScanRadiusReplicated' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeScale) == 0x0000D8, "Member 'UMilkshakeControllerComponent::CameraShakeScale' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeScaleReplicated) == 0x000100, "Member 'UMilkshakeControllerComponent::CameraShakeScaleReplicated' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, NearbyBuildingActorsUpdateInterval) == 0x000108, "Member 'UMilkshakeControllerComponent::NearbyBuildingActorsUpdateInterval' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, NearbyBuildingActorsUpdateIntervalReplicated) == 0x000130, "Member 'UMilkshakeControllerComponent::NearbyBuildingActorsUpdateIntervalReplicated' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, bForceFeedbackEnabled) == 0x000138, "Member 'UMilkshakeControllerComponent::bForceFeedbackEnabled' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, bForceFeedbackEnabledReplicated) == 0x000160, "Member 'UMilkshakeControllerComponent::bForceFeedbackEnabledReplicated' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, ForceFeedbackTag) == 0x000164, "Member 'UMilkshakeControllerComponent::ForceFeedbackTag' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, PawnInAirBasedCameraShakeMultiplierLookUpCurve) == 0x000168, "Member 'UMilkshakeControllerComponent::PawnInAirBasedCameraShakeMultiplierLookUpCurve' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, PawnInAirBasedCameraShakeMultiplierInterpSpeed) == 0x000170, "Member 'UMilkshakeControllerComponent::PawnInAirBasedCameraShakeMultiplierInterpSpeed' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeClass) == 0x000178, "Member 'UMilkshakeControllerComponent::CameraShakeClass' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeRotOscillationBaseValues) == 0x000180, "Member 'UMilkshakeControllerComponent::CameraShakeRotOscillationBaseValues' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeRotOscillationPitchFrequencyMin) == 0x0001A4, "Member 'UMilkshakeControllerComponent::CameraShakeRotOscillationPitchFrequencyMin' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeRotOscillationPitchFrequencyMax) == 0x0001A8, "Member 'UMilkshakeControllerComponent::CameraShakeRotOscillationPitchFrequencyMax' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeRotOscillationRollFrequencyMin) == 0x0001AC, "Member 'UMilkshakeControllerComponent::CameraShakeRotOscillationRollFrequencyMin' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeRotOscillationRollFrequencyMax) == 0x0001B0, "Member 'UMilkshakeControllerComponent::CameraShakeRotOscillationRollFrequencyMax' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeSoundCue) == 0x0001B8, "Member 'UMilkshakeControllerComponent::CameraShakeSoundCue' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeAudioFadeOutDuration) == 0x0001C0, "Member 'UMilkshakeControllerComponent::CameraShakeAudioFadeOutDuration' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeAudioFadeCurveType) == 0x0001C4, "Member 'UMilkshakeControllerComponent::CameraShakeAudioFadeCurveType' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CameraShakeAudioParam) == 0x0001C8, "Member 'UMilkshakeControllerComponent::CameraShakeAudioParam' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, MinTimeBetweenBuildingDamageFX) == 0x0001D0, "Member 'UMilkshakeControllerComponent::MinTimeBetweenBuildingDamageFX' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, MinTimeBetweenBuildingDamageFXReplicated) == 0x0001F8, "Member 'UMilkshakeControllerComponent::MinTimeBetweenBuildingDamageFXReplicated' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, MaxTimeBetweenBuildingDamageFX) == 0x000200, "Member 'UMilkshakeControllerComponent::MaxTimeBetweenBuildingDamageFX' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, MaxTimeBetweenBuildingDamageFXReplicated) == 0x000228, "Member 'UMilkshakeControllerComponent::MaxTimeBetweenBuildingDamageFXReplicated' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, BuildingDamageFXTemplate) == 0x000230, "Member 'UMilkshakeControllerComponent::BuildingDamageFXTemplate' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, BuildingDamageFXCooldown) == 0x000238, "Member 'UMilkshakeControllerComponent::BuildingDamageFXCooldown' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, BuildingDamageFXMagnitudeParamName) == 0x00023C, "Member 'UMilkshakeControllerComponent::BuildingDamageFXMagnitudeParamName' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, RecentDamageFXBuildings) == 0x000240, "Member 'UMilkshakeControllerComponent::RecentDamageFXBuildings' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, BuildingDamageSoundCueByResourceType) == 0x000290, "Member 'UMilkshakeControllerComponent::BuildingDamageSoundCueByResourceType' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, PlayForceFeedbackInterval) == 0x0002E0, "Member 'UMilkshakeControllerComponent::PlayForceFeedbackInterval' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, ForceFeedbackEffects) == 0x0002E8, "Member 'UMilkshakeControllerComponent::ForceFeedbackEffects' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, RegisteredEarthquakes) == 0x000308, "Member 'UMilkshakeControllerComponent::RegisteredEarthquakes' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CurrentEarthquake) == 0x000318, "Member 'UMilkshakeControllerComponent::CurrentEarthquake' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, CurrentCameraShakeAudioComponent) == 0x000338, "Member 'UMilkshakeControllerComponent::CurrentCameraShakeAudioComponent' has a wrong offset!");
static_assert(offsetof(UMilkshakeControllerComponent, NearbyBuildingActors) == 0x000340, "Member 'UMilkshakeControllerComponent::NearbyBuildingActors' has a wrong offset!");

// Class MilkshakeRuntime.MilkshakeEarthquakeActor
// 0x00B0 (0x0340 - 0x0290)
class AMilkshakeEarthquakeActor final : public AActor
{
public:
	int32                                         AsyncOverlappedActorsPreallocateCount;             // 0x0290(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AsyncOverlappedActors;                             // 0x0298(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FMilkshakeEarthquakePhysicsActorInfo> OverlappedPhysicsActorInfos;                       // 0x02A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxNumOfPhysicActorSimulation;                     // 0x02B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                         MinTimeBeforeNextForceDirectionUpdate;             // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxTimeBeforeNextForceDirectionUpdate;             // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinPhysicsImpulseMagnitude;                        // 0x02E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxPhysicsImpulseMagnitude;                        // 0x02EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EFortPhysicsSimSize, float>              SimSizeToImpulseScalarMap;                         // 0x02F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	float GetNormalizedMagnitudeAtLocation(const struct FVector& Location);
	void OnActorRemovedFromAsyncOverlappedActors(class AActor* RemovedActor);
	void RemoveAsyncOverlappedActorsOutsideRadius();
	void RemoveNullsFromAsyncOverlappedActors();
	void TickEarthquakePhysicsActorForces(const float DeltaSeconds);

	float GetRadius() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MilkshakeEarthquakeActor">();
	}
	static class AMilkshakeEarthquakeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMilkshakeEarthquakeActor>();
	}
};
static_assert(alignof(AMilkshakeEarthquakeActor) == 0x000008, "Wrong alignment on AMilkshakeEarthquakeActor");
static_assert(sizeof(AMilkshakeEarthquakeActor) == 0x000340, "Wrong size on AMilkshakeEarthquakeActor");
static_assert(offsetof(AMilkshakeEarthquakeActor, AsyncOverlappedActorsPreallocateCount) == 0x000290, "Member 'AMilkshakeEarthquakeActor::AsyncOverlappedActorsPreallocateCount' has a wrong offset!");
static_assert(offsetof(AMilkshakeEarthquakeActor, AsyncOverlappedActors) == 0x000298, "Member 'AMilkshakeEarthquakeActor::AsyncOverlappedActors' has a wrong offset!");
static_assert(offsetof(AMilkshakeEarthquakeActor, OverlappedPhysicsActorInfos) == 0x0002A8, "Member 'AMilkshakeEarthquakeActor::OverlappedPhysicsActorInfos' has a wrong offset!");
static_assert(offsetof(AMilkshakeEarthquakeActor, MaxNumOfPhysicActorSimulation) == 0x0002B8, "Member 'AMilkshakeEarthquakeActor::MaxNumOfPhysicActorSimulation' has a wrong offset!");
static_assert(offsetof(AMilkshakeEarthquakeActor, MinTimeBeforeNextForceDirectionUpdate) == 0x0002E0, "Member 'AMilkshakeEarthquakeActor::MinTimeBeforeNextForceDirectionUpdate' has a wrong offset!");
static_assert(offsetof(AMilkshakeEarthquakeActor, MaxTimeBeforeNextForceDirectionUpdate) == 0x0002E4, "Member 'AMilkshakeEarthquakeActor::MaxTimeBeforeNextForceDirectionUpdate' has a wrong offset!");
static_assert(offsetof(AMilkshakeEarthquakeActor, MinPhysicsImpulseMagnitude) == 0x0002E8, "Member 'AMilkshakeEarthquakeActor::MinPhysicsImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(AMilkshakeEarthquakeActor, MaxPhysicsImpulseMagnitude) == 0x0002EC, "Member 'AMilkshakeEarthquakeActor::MaxPhysicsImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(AMilkshakeEarthquakeActor, SimSizeToImpulseScalarMap) == 0x0002F0, "Member 'AMilkshakeEarthquakeActor::SimSizeToImpulseScalarMap' has a wrong offset!");

// Class MilkshakeRuntime.MilkshakeFieldSystemActor
// 0x0030 (0x02C8 - 0x0298)
class AMilkshakeFieldSystemActor final : public AFieldSystemActor
{
public:
	class UOperatorField*                         OperatorFieldMultiplyComponent;                    // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URadialFalloff*                         RadialFallOffComponent;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URadialVector*                          RadialVectorComponent;                             // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StopGameTime;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IncomingDuration;                                  // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OutgoingDuration;                                  // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Strength;                                          // 0x02C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetStrength(const float InStrength);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MilkshakeFieldSystemActor">();
	}
	static class AMilkshakeFieldSystemActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMilkshakeFieldSystemActor>();
	}
};
static_assert(alignof(AMilkshakeFieldSystemActor) == 0x000008, "Wrong alignment on AMilkshakeFieldSystemActor");
static_assert(sizeof(AMilkshakeFieldSystemActor) == 0x0002C8, "Wrong size on AMilkshakeFieldSystemActor");
static_assert(offsetof(AMilkshakeFieldSystemActor, OperatorFieldMultiplyComponent) == 0x000298, "Member 'AMilkshakeFieldSystemActor::OperatorFieldMultiplyComponent' has a wrong offset!");
static_assert(offsetof(AMilkshakeFieldSystemActor, RadialFallOffComponent) == 0x0002A0, "Member 'AMilkshakeFieldSystemActor::RadialFallOffComponent' has a wrong offset!");
static_assert(offsetof(AMilkshakeFieldSystemActor, RadialVectorComponent) == 0x0002A8, "Member 'AMilkshakeFieldSystemActor::RadialVectorComponent' has a wrong offset!");
static_assert(offsetof(AMilkshakeFieldSystemActor, Radius) == 0x0002B0, "Member 'AMilkshakeFieldSystemActor::Radius' has a wrong offset!");
static_assert(offsetof(AMilkshakeFieldSystemActor, StopGameTime) == 0x0002B4, "Member 'AMilkshakeFieldSystemActor::StopGameTime' has a wrong offset!");
static_assert(offsetof(AMilkshakeFieldSystemActor, IncomingDuration) == 0x0002B8, "Member 'AMilkshakeFieldSystemActor::IncomingDuration' has a wrong offset!");
static_assert(offsetof(AMilkshakeFieldSystemActor, OutgoingDuration) == 0x0002BC, "Member 'AMilkshakeFieldSystemActor::OutgoingDuration' has a wrong offset!");
static_assert(offsetof(AMilkshakeFieldSystemActor, Strength) == 0x0002C0, "Member 'AMilkshakeFieldSystemActor::Strength' has a wrong offset!");

}

