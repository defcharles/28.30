#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryCollectionEngine

#include "Basic.hpp"

#include "GeometryCollectionEngine_classes.hpp"
#include "GeometryCollectionEngine_parameters.hpp"


namespace SDK
{

// Function GeometryCollectionEngine.GeometryCollectionISMPoolSubSystem.OnActorEndPlay
// (Final, Native, Protected)
// Parameters:
// class AActor*                           InSource                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionISMPoolSubSystem::OnActorEndPlay(class AActor* InSource, EEndPlayReason Reason)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnActorEndPlay");

	Params::GeometryCollectionISMPoolSubSystem_OnActorEndPlay Parms{};

	Parms.InSource = InSource;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.AddChaosSolverActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AChaosSolverActor*                ChaosSolverActor                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::AddChaosSolverActor(class AChaosSolverActor* ChaosSolverActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddChaosSolverActor");

	Params::ChaosDestructionListener_AddChaosSolverActor Parms{};

	Parms.ChaosSolverActor = ChaosSolverActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.AddGeometryCollectionActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AGeometryCollectionActor*         GeometryCollectionActor                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::AddGeometryCollectionActor(class AGeometryCollectionActor* GeometryCollectionActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddGeometryCollectionActor");

	Params::ChaosDestructionListener_AddGeometryCollectionActor Parms{};

	Parms.GeometryCollectionActor = GeometryCollectionActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.RemoveChaosSolverActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AChaosSolverActor*                ChaosSolverActor                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::RemoveChaosSolverActor(class AChaosSolverActor* ChaosSolverActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveChaosSolverActor");

	Params::ChaosDestructionListener_RemoveChaosSolverActor Parms{};

	Parms.ChaosSolverActor = ChaosSolverActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.RemoveGeometryCollectionActor
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AGeometryCollectionActor*         GeometryCollectionActor                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::RemoveGeometryCollectionActor(class AGeometryCollectionActor* GeometryCollectionActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveGeometryCollectionActor");

	Params::ChaosDestructionListener_RemoveGeometryCollectionActor Parms{};

	Parms.GeometryCollectionActor = GeometryCollectionActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SetBreakingEventEnabled
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SetBreakingEventEnabled(bool bIsEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBreakingEventEnabled");

	Params::ChaosDestructionListener_SetBreakingEventEnabled Parms{};

	Parms.bIsEnabled = bIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SetBreakingEventRequestSettings
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FChaosBreakingEventRequestSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SetBreakingEventRequestSettings(const struct FChaosBreakingEventRequestSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetBreakingEventRequestSettings");

	Params::ChaosDestructionListener_SetBreakingEventRequestSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SetCollisionEventEnabled
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SetCollisionEventEnabled(bool bIsEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCollisionEventEnabled");

	Params::ChaosDestructionListener_SetCollisionEventEnabled Parms{};

	Parms.bIsEnabled = bIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SetCollisionEventRequestSettings
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FChaosCollisionEventRequestSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SetCollisionEventRequestSettings(const struct FChaosCollisionEventRequestSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetCollisionEventRequestSettings");

	Params::ChaosDestructionListener_SetCollisionEventRequestSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SetRemovalEventEnabled
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SetRemovalEventEnabled(bool bIsEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRemovalEventEnabled");

	Params::ChaosDestructionListener_SetRemovalEventEnabled Parms{};

	Parms.bIsEnabled = bIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SetRemovalEventRequestSettings
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FChaosRemovalEventRequestSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SetRemovalEventRequestSettings(const struct FChaosRemovalEventRequestSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRemovalEventRequestSettings");

	Params::ChaosDestructionListener_SetRemovalEventRequestSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SetTrailingEventEnabled
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SetTrailingEventEnabled(bool bIsEnabled)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTrailingEventEnabled");

	Params::ChaosDestructionListener_SetTrailingEventEnabled Parms{};

	Parms.bIsEnabled = bIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SetTrailingEventRequestSettings
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FChaosTrailingEventRequestSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SetTrailingEventRequestSettings(const struct FChaosTrailingEventRequestSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetTrailingEventRequestSettings");

	Params::ChaosDestructionListener_SetTrailingEventRequestSettings Parms{};

	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SortBreakingEvents
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FChaosBreakingEventData>  BreakingEvents                                         (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EChaosBreakingSortMethod                SortMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SortBreakingEvents(TArray<struct FChaosBreakingEventData>& BreakingEvents, EChaosBreakingSortMethod SortMethod)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SortBreakingEvents");

	Params::ChaosDestructionListener_SortBreakingEvents Parms{};

	Parms.BreakingEvents = std::move(BreakingEvents);
	Parms.SortMethod = SortMethod;

	UObject::ProcessEvent(Func, &Parms);

	BreakingEvents = std::move(Parms.BreakingEvents);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SortCollisionEvents
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FChaosCollisionEventData> CollisionEvents                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EChaosCollisionSortMethod               SortMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SortCollisionEvents(TArray<struct FChaosCollisionEventData>& CollisionEvents, EChaosCollisionSortMethod SortMethod)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SortCollisionEvents");

	Params::ChaosDestructionListener_SortCollisionEvents Parms{};

	Parms.CollisionEvents = std::move(CollisionEvents);
	Parms.SortMethod = SortMethod;

	UObject::ProcessEvent(Func, &Parms);

	CollisionEvents = std::move(Parms.CollisionEvents);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SortRemovalEvents
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FChaosRemovalEventData>   RemovalEvents                                          (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EChaosRemovalSortMethod                 SortMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SortRemovalEvents(TArray<struct FChaosRemovalEventData>& RemovalEvents, EChaosRemovalSortMethod SortMethod)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SortRemovalEvents");

	Params::ChaosDestructionListener_SortRemovalEvents Parms{};

	Parms.RemovalEvents = std::move(RemovalEvents);
	Parms.SortMethod = SortMethod;

	UObject::ProcessEvent(Func, &Parms);

	RemovalEvents = std::move(Parms.RemovalEvents);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.SortTrailingEvents
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FChaosTrailingEventData>  TrailingEvents                                         (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EChaosTrailingSortMethod                SortMethod                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosDestructionListener::SortTrailingEvents(TArray<struct FChaosTrailingEventData>& TrailingEvents, EChaosTrailingSortMethod SortMethod)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SortTrailingEvents");

	Params::ChaosDestructionListener_SortTrailingEvents Parms{};

	Parms.TrailingEvents = std::move(TrailingEvents);
	Parms.SortMethod = SortMethod;

	UObject::ProcessEvent(Func, &Parms);

	TrailingEvents = std::move(Parms.TrailingEvents);
}


// Function GeometryCollectionEngine.ChaosDestructionListener.IsEventListening
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UChaosDestructionListener::IsEventListening() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsEventListening");

	Params::ChaosDestructionListener_IsEventListening Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionActor.RaycastSingle
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGeometryCollectionActor::RaycastSingle(const struct FVector& Start, const struct FVector& End, struct FHitResult* OutHit) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RaycastSingle");

	Params::GeometryCollectionActor_RaycastSingle Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyAngularVelocity
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AngularVelocity                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::ApplyAngularVelocity(int32 ItemIndex, const struct FVector& AngularVelocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyAngularVelocity");

	Params::GeometryCollectionComponent_ApplyAngularVelocity Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.AngularVelocity = std::move(AngularVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyAssetDefaults
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UGeometryCollectionComponent::ApplyAssetDefaults()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyAssetDefaults");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyBreakingAngularVelocity
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AngularVelocity                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::ApplyBreakingAngularVelocity(int32 ItemIndex, const struct FVector& AngularVelocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyBreakingAngularVelocity");

	Params::GeometryCollectionComponent_ApplyBreakingAngularVelocity Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.AngularVelocity = std::move(AngularVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyBreakingLinearVelocity
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LinearVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::ApplyBreakingLinearVelocity(int32 ItemIndex, const struct FVector& LinearVelocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyBreakingLinearVelocity");

	Params::GeometryCollectionComponent_ApplyBreakingLinearVelocity Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.LinearVelocity = std::move(LinearVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyExternalStrain
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PropagationDepth                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PropagationFactor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strain                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::ApplyExternalStrain(int32 ItemIndex, const struct FVector& Location, float Radius, int32 PropagationDepth, float PropagationFactor, float Strain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyExternalStrain");

	Params::GeometryCollectionComponent_ApplyExternalStrain Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.PropagationDepth = PropagationDepth;
	Parms.PropagationFactor = PropagationFactor;
	Parms.Strain = Strain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyInternalStrain
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PropagationDepth                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PropagationFactor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strain                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::ApplyInternalStrain(int32 ItemIndex, const struct FVector& Location, float Radius, int32 PropagationDepth, float PropagationFactor, float Strain)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyInternalStrain");

	Params::GeometryCollectionComponent_ApplyInternalStrain Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.Location = std::move(Location);
	Parms.Radius = Radius;
	Parms.PropagationDepth = PropagationDepth;
	Parms.PropagationFactor = PropagationFactor;
	Parms.Strain = Strain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyKinematicField
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::ApplyKinematicField(float Radius, const struct FVector& Position)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyKinematicField");

	Params::GeometryCollectionComponent_ApplyKinematicField Parms{};

	Parms.Radius = Radius;
	Parms.Position = std::move(Position);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyLinearVelocity
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LinearVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::ApplyLinearVelocity(int32 ItemIndex, const struct FVector& LinearVelocity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyLinearVelocity");

	Params::GeometryCollectionComponent_ApplyLinearVelocity Parms{};

	Parms.ItemIndex = ItemIndex;
	Parms.LinearVelocity = std::move(LinearVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ApplyPhysicsField
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGeometryCollectionPhysicsTypeEnum      Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFieldSystemMetaData*             MetaData                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFieldNodeBase*                   Field                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::ApplyPhysicsField(bool Enabled, EGeometryCollectionPhysicsTypeEnum Target, class UFieldSystemMetaData* MetaData, class UFieldNodeBase* Field)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ApplyPhysicsField");

	Params::GeometryCollectionComponent_ApplyPhysicsField Parms{};

	Parms.Enabled = Enabled;
	Parms.Target = Target;
	Parms.MetaData = MetaData;
	Parms.Field = Field;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.CrumbleActiveClusters
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UGeometryCollectionComponent::CrumbleActiveClusters()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CrumbleActiveClusters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.CrumbleCluster
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::CrumbleCluster(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CrumbleCluster");

	Params::GeometryCollectionComponent_CrumbleCluster Parms{};

	Parms.ItemIndex = ItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.EnableRootProxyForCustomRenderer
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::EnableRootProxyForCustomRenderer(bool bEnable)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnableRootProxyForCustomRenderer");

	Params::GeometryCollectionComponent_EnableRootProxyForCustomRenderer Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetDebugInfo
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGeometryCollectionComponent::GetDebugInfo()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDebugInfo");

	Params::GeometryCollectionComponent_GetDebugInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetInitialLevel
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGeometryCollectionComponent::GetInitialLevel(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInitialLevel");

	Params::GeometryCollectionComponent_GetInitialLevel Parms{};

	Parms.ItemIndex = ItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetMassAndExtents
// (Final, RequiredAPI, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutMass                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             OutExtents                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::GetMassAndExtents(int32 ItemIndex, float* OutMass, struct FBox* OutExtents)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetMassAndExtents");

	Params::GeometryCollectionComponent_GetMassAndExtents Parms{};

	Parms.ItemIndex = ItemIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (OutMass != nullptr)
		*OutMass = Parms.OutMass;

	if (OutExtents != nullptr)
		*OutExtents = std::move(Parms.OutExtents);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.OnRep_RepData
// (Final, RequiredAPI, Native, Protected)

void UGeometryCollectionComponent::OnRep_RepData()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_RepData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.OnRep_RepDynamicData
// (Final, RequiredAPI, Native, Protected)

void UGeometryCollectionComponent::OnRep_RepDynamicData()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_RepDynamicData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.OnRep_RepStateData
// (Final, RequiredAPI, Native, Protected)

void UGeometryCollectionComponent::OnRep_RepStateData()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRep_RepStateData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.ReceivePhysicsCollision
// (RequiredAPI, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FChaosPhysicsCollisionInfo       CollisionInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::ReceivePhysicsCollision(const struct FChaosPhysicsCollisionInfo& CollisionInfo)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ReceivePhysicsCollision");

	Params::GeometryCollectionComponent_ReceivePhysicsCollision Parms{};

	Parms.CollisionInfo = std::move(CollisionInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.RemoveAllAnchors
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UGeometryCollectionComponent::RemoveAllAnchors()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveAllAnchors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetAbandonedParticleCollisionProfileName
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             CollisionProfile                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetAbandonedParticleCollisionProfileName(class FName CollisionProfile)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAbandonedParticleCollisionProfileName");

	Params::GeometryCollectionComponent_SetAbandonedParticleCollisionProfileName Parms{};

	Parms.CollisionProfile = CollisionProfile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetAnchoredByBox
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             WorldSpaceBox                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bAnchored                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetAnchoredByBox(const struct FBox& WorldSpaceBox, bool bAnchored, int32 MaxLevel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAnchoredByBox");

	Params::GeometryCollectionComponent_SetAnchoredByBox Parms{};

	Parms.WorldSpaceBox = std::move(WorldSpaceBox);
	Parms.bAnchored = bAnchored;
	Parms.MaxLevel = MaxLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetAnchoredByIndex
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnchored                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetAnchoredByIndex(int32 Index_0, bool bAnchored)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAnchoredByIndex");

	Params::GeometryCollectionComponent_SetAnchoredByIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.bAnchored = bAnchored;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetAnchoredByTransformedBox
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             Box                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnchored                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetAnchoredByTransformedBox(const struct FBox& Box, const struct FTransform& Transform, bool bAnchored, int32 MaxLevel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetAnchoredByTransformedBox");

	Params::GeometryCollectionComponent_SetAnchoredByTransformedBox Parms{};

	Parms.Box = std::move(Box);
	Parms.Transform = std::move(Transform);
	Parms.bAnchored = bAnchored;
	Parms.MaxLevel = MaxLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetDamageModel
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// EDamageModelTypeEnum                    InDamageModel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetDamageModel(EDamageModelTypeEnum InDamageModel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDamageModel");

	Params::GeometryCollectionComponent_SetDamageModel Parms{};

	Parms.InDamageModel = InDamageModel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetDamagePropagationData
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeometryCollectionDamagePropagationDataInDamagePropagationData                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetDamagePropagationData(const struct FGeometryCollectionDamagePropagationData& InDamagePropagationData)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDamagePropagationData");

	Params::GeometryCollectionComponent_SetDamagePropagationData Parms{};

	Parms.InDamagePropagationData = std::move(InDamagePropagationData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetDamageThreshold
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           InDamageThreshold                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetDamageThreshold(const TArray<float>& InDamageThreshold)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDamageThreshold");

	Params::GeometryCollectionComponent_SetDamageThreshold Parms{};

	Parms.InDamageThreshold = std::move(InDamageThreshold);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetDensityFromPhysicsMaterial
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInDensityFromPhysicsMaterial                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetDensityFromPhysicsMaterial(bool bInDensityFromPhysicsMaterial)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetDensityFromPhysicsMaterial");

	Params::GeometryCollectionComponent_SetDensityFromPhysicsMaterial Parms{};

	Parms.bInDensityFromPhysicsMaterial = bInDensityFromPhysicsMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetEnableDamageFromCollision
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetEnableDamageFromCollision(bool bValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnableDamageFromCollision");

	Params::GeometryCollectionComponent_SetEnableDamageFromCollision Parms{};

	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetGravityGroupIndex
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InGravityGroupIndex                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetGravityGroupIndex(int32 InGravityGroupIndex)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetGravityGroupIndex");

	Params::GeometryCollectionComponent_SetGravityGroupIndex Parms{};

	Parms.InGravityGroupIndex = InGravityGroupIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetLocalRestTransforms
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FTransform>               Transforms                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bOnlyLeaves                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetLocalRestTransforms(const TArray<struct FTransform>& Transforms, bool bOnlyLeaves)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetLocalRestTransforms");

	Params::GeometryCollectionComponent_SetLocalRestTransforms Parms{};

	Parms.Transforms = std::move(Transforms);
	Parms.bOnlyLeaves = bOnlyLeaves;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyBreaks
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewNotifyBreaks                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetNotifyBreaks(bool bNewNotifyBreaks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNotifyBreaks");

	Params::GeometryCollectionComponent_SetNotifyBreaks Parms{};

	Parms.bNewNotifyBreaks = bNewNotifyBreaks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyCrumblings
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewNotifyCrumblings                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewCrumblingEventIncludesChildren                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetNotifyCrumblings(bool bNewNotifyCrumblings, bool bNewCrumblingEventIncludesChildren)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNotifyCrumblings");

	Params::GeometryCollectionComponent_SetNotifyCrumblings Parms{};

	Parms.bNewNotifyCrumblings = bNewNotifyCrumblings;
	Parms.bNewCrumblingEventIncludesChildren = bNewCrumblingEventIncludesChildren;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyGlobalBreaks
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewNotifyGlobalBreaks                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetNotifyGlobalBreaks(bool bNewNotifyGlobalBreaks)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNotifyGlobalBreaks");

	Params::GeometryCollectionComponent_SetNotifyGlobalBreaks Parms{};

	Parms.bNewNotifyGlobalBreaks = bNewNotifyGlobalBreaks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyGlobalCollision
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewNotifyGlobalCollisions                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetNotifyGlobalCollision(bool bNewNotifyGlobalCollisions)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNotifyGlobalCollision");

	Params::GeometryCollectionComponent_SetNotifyGlobalCollision Parms{};

	Parms.bNewNotifyGlobalCollisions = bNewNotifyGlobalCollisions;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyGlobalCrumblings
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewNotifyGlobalCrumblings                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGlobalNewCrumblingEventIncludesChildren               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetNotifyGlobalCrumblings(bool bNewNotifyGlobalCrumblings, bool bGlobalNewCrumblingEventIncludesChildren)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNotifyGlobalCrumblings");

	Params::GeometryCollectionComponent_SetNotifyGlobalCrumblings Parms{};

	Parms.bNewNotifyGlobalCrumblings = bNewNotifyGlobalCrumblings;
	Parms.bGlobalNewCrumblingEventIncludesChildren = bGlobalNewCrumblingEventIncludesChildren;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyGlobalRemovals
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewNotifyGlobalRemovals                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetNotifyGlobalRemovals(bool bNewNotifyGlobalRemovals)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNotifyGlobalRemovals");

	Params::GeometryCollectionComponent_SetNotifyGlobalRemovals Parms{};

	Parms.bNewNotifyGlobalRemovals = bNewNotifyGlobalRemovals;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyRemovals
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewNotifyRemovals                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetNotifyRemovals(bool bNewNotifyRemovals)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetNotifyRemovals");

	Params::GeometryCollectionComponent_SetNotifyRemovals Parms{};

	Parms.bNewNotifyRemovals = bNewNotifyRemovals;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetOneWayInteractionLevel
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InOneWayInteractionLevel                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetOneWayInteractionLevel(int32 InOneWayInteractionLevel)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetOneWayInteractionLevel");

	Params::GeometryCollectionComponent_SetOneWayInteractionLevel Parms{};

	Parms.InOneWayInteractionLevel = InOneWayInteractionLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetPerLevelCollisionProfileNames
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     ProfileNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetPerLevelCollisionProfileNames(const TArray<class FName>& ProfileNames)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPerLevelCollisionProfileNames");

	Params::GeometryCollectionComponent_SetPerLevelCollisionProfileNames Parms{};

	Parms.ProfileNames = std::move(ProfileNames);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetPerParticleCollisionProfileName
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           BoneIds                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ProfileName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetPerParticleCollisionProfileName(const TArray<int32>& BoneIds, class FName ProfileName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPerParticleCollisionProfileName");

	Params::GeometryCollectionComponent_SetPerParticleCollisionProfileName Parms{};

	Parms.BoneIds = std::move(BoneIds);
	Parms.ProfileName = ProfileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetRestCollection
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UGeometryCollection*              RestCollectionIn                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyAssetDefaults                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetRestCollection(const class UGeometryCollection* RestCollectionIn, bool bApplyAssetDefaults)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetRestCollection");

	Params::GeometryCollectionComponent_SetRestCollection Parms{};

	Parms.RestCollectionIn = RestCollectionIn;
	Parms.bApplyAssetDefaults = bApplyAssetDefaults;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetUseMaterialDamageModifiers
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInUseMaterialDamageModifiers                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetUseMaterialDamageModifiers(bool bInUseMaterialDamageModifiers)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetUseMaterialDamageModifiers");

	Params::GeometryCollectionComponent_SetUseMaterialDamageModifiers Parms{};

	Parms.bInUseMaterialDamageModifiers = bInUseMaterialDamageModifiers;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.SetUseStaticMeshCollisionForTraces
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInUseStaticMeshCollisionForTraces                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionComponent::SetUseStaticMeshCollisionForTraces(bool bInUseStaticMeshCollisionForTraces)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetUseStaticMeshCollisionForTraces");

	Params::GeometryCollectionComponent_SetUseStaticMeshCollisionForTraces Parms{};

	Parms.bInUseStaticMeshCollisionForTraces = bInUseStaticMeshCollisionForTraces;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetDamageThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UGeometryCollectionComponent::GetDamageThreshold() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetDamageThreshold");

	Params::GeometryCollectionComponent_GetDamageThreshold Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetInitialLocalRestTransforms
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FTransform>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FTransform> UGeometryCollectionComponent::GetInitialLocalRestTransforms() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetInitialLocalRestTransforms");

	Params::GeometryCollectionComponent_GetInitialLocalRestTransforms Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetLocalBounds
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBox                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBox UGeometryCollectionComponent::GetLocalBounds() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetLocalBounds");

	Params::GeometryCollectionComponent_GetLocalBounds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetRootCurrentTransform
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UGeometryCollectionComponent::GetRootCurrentTransform() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRootCurrentTransform");

	Params::GeometryCollectionComponent_GetRootCurrentTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetRootIndex
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGeometryCollectionComponent::GetRootIndex() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRootIndex");

	Params::GeometryCollectionComponent_GetRootIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetRootInitialTransform
// (Final, RequiredAPI, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UGeometryCollectionComponent::GetRootInitialTransform() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetRootInitialTransform");

	Params::GeometryCollectionComponent_GetRootInitialTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.GetUseStaticMeshCollisionForTraces
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGeometryCollectionComponent::GetUseStaticMeshCollisionForTraces() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetUseStaticMeshCollisionForTraces");

	Params::GeometryCollectionComponent_GetUseStaticMeshCollisionForTraces Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollectionComponent.IsRootBroken
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGeometryCollectionComponent::IsRootBroken() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsRootBroken");

	Params::GeometryCollectionComponent_IsRootBroken Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GeometryCollectionEngine.GeometryCollection.SetConvertVertexColorsToSRGB
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollection::SetConvertVertexColorsToSRGB(bool bValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetConvertVertexColorsToSRGB");

	Params::GeometryCollection_SetConvertVertexColorsToSRGB Parms{};

	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GeometryCollectionEngine.GeometryCollection.SetEnableNanite
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollection::SetEnableNanite(bool bValue)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetEnableNanite");

	Params::GeometryCollection_SetEnableNanite Parms{};

	Parms.bValue = bValue;

	UObject::ProcessEvent(Func, &Parms);
}

}

