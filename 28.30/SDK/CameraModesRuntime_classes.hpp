#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraModesRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class CameraModesRuntime.CameraModes_FirstPersonCameraController
// 0x0028 (0x03E8 - 0x03C0)
class ACameraModes_FirstPersonCameraController final : public AFortFirstPersonCameraController
{
public:
	struct FGameplayTag                           PreventWeaponHolsterTag;                           // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadMotionScalar;                                  // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AFortWeapon>>        AllowedWeaponClassList;                            // 0x03C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 FirstPersonSkeletalMeshComp;                       // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E0[0x8];                                      // 0x03E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearFovOverride(float TransitionTime);
	void HandleWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnLocalPlayerVisibilityChanged(const bool bShouldBeVisible);
	void SetFovOverride(float FOV, float TransitionTime);
	void UpdateFirstPersonFOV(const float FOV);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModes_FirstPersonCameraController">();
	}
	static class ACameraModes_FirstPersonCameraController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraModes_FirstPersonCameraController>();
	}
};
static_assert(alignof(ACameraModes_FirstPersonCameraController) == 0x000008, "Wrong alignment on ACameraModes_FirstPersonCameraController");
static_assert(sizeof(ACameraModes_FirstPersonCameraController) == 0x0003E8, "Wrong size on ACameraModes_FirstPersonCameraController");
static_assert(offsetof(ACameraModes_FirstPersonCameraController, PreventWeaponHolsterTag) == 0x0003C0, "Member 'ACameraModes_FirstPersonCameraController::PreventWeaponHolsterTag' has a wrong offset!");
static_assert(offsetof(ACameraModes_FirstPersonCameraController, HeadMotionScalar) == 0x0003C4, "Member 'ACameraModes_FirstPersonCameraController::HeadMotionScalar' has a wrong offset!");
static_assert(offsetof(ACameraModes_FirstPersonCameraController, AllowedWeaponClassList) == 0x0003C8, "Member 'ACameraModes_FirstPersonCameraController::AllowedWeaponClassList' has a wrong offset!");
static_assert(offsetof(ACameraModes_FirstPersonCameraController, FirstPersonSkeletalMeshComp) == 0x0003D8, "Member 'ACameraModes_FirstPersonCameraController::FirstPersonSkeletalMeshComp' has a wrong offset!");

}

