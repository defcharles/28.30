#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksCameraDirectorRuntime

#include "Basic.hpp"

#include "SparksCameraDirectorRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK::Params
{

// Function SparksCameraDirectorRuntime.SparksCameraDebugWidget.LogToScreen
// 0x0018 (0x0018 - 0x0000)
struct SparksCameraDebugWidget_LogToScreen final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksCameraLogType                          Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDebugWidget_LogToScreen) == 0x000008, "Wrong alignment on SparksCameraDebugWidget_LogToScreen");
static_assert(sizeof(SparksCameraDebugWidget_LogToScreen) == 0x000018, "Wrong size on SparksCameraDebugWidget_LogToScreen");
static_assert(offsetof(SparksCameraDebugWidget_LogToScreen, Data) == 0x000000, "Member 'SparksCameraDebugWidget_LogToScreen::Data' has a wrong offset!");
static_assert(offsetof(SparksCameraDebugWidget_LogToScreen, Type) == 0x000010, "Member 'SparksCameraDebugWidget_LogToScreen::Type' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDebugWidget.SetEventRouter
// 0x0008 (0x0008 - 0x0000)
struct SparksCameraDebugWidget_SetEventRouter final
{
public:
	class UGameplayEventRouterComponent*          EventRouter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDebugWidget_SetEventRouter) == 0x000008, "Wrong alignment on SparksCameraDebugWidget_SetEventRouter");
static_assert(sizeof(SparksCameraDebugWidget_SetEventRouter) == 0x000008, "Wrong size on SparksCameraDebugWidget_SetEventRouter");
static_assert(offsetof(SparksCameraDebugWidget_SetEventRouter, EventRouter) == 0x000000, "Member 'SparksCameraDebugWidget_SetEventRouter::EventRouter' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.ActivateCameraControl
// 0x0001 (0x0001 - 0x0000)
struct SparksCameraDirectorComponent_ActivateCameraControl final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_ActivateCameraControl) == 0x000001, "Wrong alignment on SparksCameraDirectorComponent_ActivateCameraControl");
static_assert(sizeof(SparksCameraDirectorComponent_ActivateCameraControl) == 0x000001, "Wrong size on SparksCameraDirectorComponent_ActivateCameraControl");
static_assert(offsetof(SparksCameraDirectorComponent_ActivateCameraControl, bActive) == 0x000000, "Member 'SparksCameraDirectorComponent_ActivateCameraControl::bActive' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.DebugLockSpecificCameraShot
// 0x0058 (0x0058 - 0x0000)
struct SparksCameraDirectorComponent_DebugLockSpecificCameraShot final
{
public:
	struct FSparksCameraShot                      Shot;                                              // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bLockToFirstFrame;                                 // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_DebugLockSpecificCameraShot) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_DebugLockSpecificCameraShot");
static_assert(sizeof(SparksCameraDirectorComponent_DebugLockSpecificCameraShot) == 0x000058, "Wrong size on SparksCameraDirectorComponent_DebugLockSpecificCameraShot");
static_assert(offsetof(SparksCameraDirectorComponent_DebugLockSpecificCameraShot, Shot) == 0x000000, "Member 'SparksCameraDirectorComponent_DebugLockSpecificCameraShot::Shot' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_DebugLockSpecificCameraShot, bLockToFirstFrame) == 0x000048, "Member 'SparksCameraDirectorComponent_DebugLockSpecificCameraShot::bLockToFirstFrame' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_DebugLockSpecificCameraShot, Target) == 0x000050, "Member 'SparksCameraDirectorComponent_DebugLockSpecificCameraShot::Target' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.FindCurrentShot
// 0x000C (0x000C - 0x0000)
struct SparksCameraDirectorComponent_FindCurrentShot final
{
public:
	int32                                         SequenceIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryIndex;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorComponent_FindCurrentShot) == 0x000004, "Wrong alignment on SparksCameraDirectorComponent_FindCurrentShot");
static_assert(sizeof(SparksCameraDirectorComponent_FindCurrentShot) == 0x00000C, "Wrong size on SparksCameraDirectorComponent_FindCurrentShot");
static_assert(offsetof(SparksCameraDirectorComponent_FindCurrentShot, SequenceIndex) == 0x000000, "Member 'SparksCameraDirectorComponent_FindCurrentShot::SequenceIndex' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_FindCurrentShot, EntryIndex) == 0x000004, "Member 'SparksCameraDirectorComponent_FindCurrentShot::EntryIndex' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_FindCurrentShot, ReturnValue) == 0x000008, "Member 'SparksCameraDirectorComponent_FindCurrentShot::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.HandleDirectorDynamicEvent
// 0x0038 (0x0038 - 0x0000)
struct SparksCameraDirectorComponent_HandleDirectorDynamicEvent final
{
public:
	struct FSparksCommonDynamicCameraDirectorEvent Payload;                                           // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_HandleDirectorDynamicEvent) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_HandleDirectorDynamicEvent");
static_assert(sizeof(SparksCameraDirectorComponent_HandleDirectorDynamicEvent) == 0x000038, "Wrong size on SparksCameraDirectorComponent_HandleDirectorDynamicEvent");
static_assert(offsetof(SparksCameraDirectorComponent_HandleDirectorDynamicEvent, Payload) == 0x000000, "Member 'SparksCameraDirectorComponent_HandleDirectorDynamicEvent::Payload' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.HandleForceIntermissionEvent
// 0x0020 (0x0020 - 0x0000)
struct SparksCameraDirectorComponent_HandleForceIntermissionEvent final
{
public:
	struct FSparksCommonForceIntermissionCameraDirectorEvent Payload;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_HandleForceIntermissionEvent) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_HandleForceIntermissionEvent");
static_assert(sizeof(SparksCameraDirectorComponent_HandleForceIntermissionEvent) == 0x000020, "Wrong size on SparksCameraDirectorComponent_HandleForceIntermissionEvent");
static_assert(offsetof(SparksCameraDirectorComponent_HandleForceIntermissionEvent, Payload) == 0x000000, "Member 'SparksCameraDirectorComponent_HandleForceIntermissionEvent::Payload' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.HandleIntermissionTagsEvent
// 0x0020 (0x0020 - 0x0000)
struct SparksCameraDirectorComponent_HandleIntermissionTagsEvent final
{
public:
	struct FSparksCommonIntermissionCameraDirectorEvent Payload;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_HandleIntermissionTagsEvent) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_HandleIntermissionTagsEvent");
static_assert(sizeof(SparksCameraDirectorComponent_HandleIntermissionTagsEvent) == 0x000020, "Wrong size on SparksCameraDirectorComponent_HandleIntermissionTagsEvent");
static_assert(offsetof(SparksCameraDirectorComponent_HandleIntermissionTagsEvent, Payload) == 0x000000, "Member 'SparksCameraDirectorComponent_HandleIntermissionTagsEvent::Payload' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.InsertPerformanceMap
// 0x0008 (0x0008 - 0x0000)
struct SparksCameraDirectorComponent_InsertPerformanceMap final
{
public:
	class USparksPerformanceMap*                  Map;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_InsertPerformanceMap) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_InsertPerformanceMap");
static_assert(sizeof(SparksCameraDirectorComponent_InsertPerformanceMap) == 0x000008, "Wrong size on SparksCameraDirectorComponent_InsertPerformanceMap");
static_assert(offsetof(SparksCameraDirectorComponent_InsertPerformanceMap, Map) == 0x000000, "Member 'SparksCameraDirectorComponent_InsertPerformanceMap::Map' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.InsertSequence
// 0x0028 (0x0028 - 0x0000)
struct SparksCameraDirectorComponent_InsertSequence final
{
public:
	struct FSparksCameraDirectorSequence          Sequence;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_InsertSequence) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_InsertSequence");
static_assert(sizeof(SparksCameraDirectorComponent_InsertSequence) == 0x000028, "Wrong size on SparksCameraDirectorComponent_InsertSequence");
static_assert(offsetof(SparksCameraDirectorComponent_InsertSequence, Sequence) == 0x000000, "Member 'SparksCameraDirectorComponent_InsertSequence::Sequence' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.LogToScreen
// 0x0018 (0x0018 - 0x0000)
struct SparksCameraDirectorComponent_LogToScreen final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksCameraLogType                          Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeSeconds;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_LogToScreen) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_LogToScreen");
static_assert(sizeof(SparksCameraDirectorComponent_LogToScreen) == 0x000018, "Wrong size on SparksCameraDirectorComponent_LogToScreen");
static_assert(offsetof(SparksCameraDirectorComponent_LogToScreen, Data) == 0x000000, "Member 'SparksCameraDirectorComponent_LogToScreen::Data' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_LogToScreen, Type) == 0x000010, "Member 'SparksCameraDirectorComponent_LogToScreen::Type' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_LogToScreen, TimeSeconds) == 0x000014, "Member 'SparksCameraDirectorComponent_LogToScreen::TimeSeconds' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.PlaySequenceEntry
// 0x0090 (0x0090 - 0x0000)
struct SparksCameraDirectorComponent_PlaySequenceEntry final
{
public:
	struct FSparksCameraDirectorSequenceEntry     Entry;                                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         MsOffset;                                          // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntermission;                                     // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ForceTarget;                                       // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_PlaySequenceEntry) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_PlaySequenceEntry");
static_assert(sizeof(SparksCameraDirectorComponent_PlaySequenceEntry) == 0x000090, "Wrong size on SparksCameraDirectorComponent_PlaySequenceEntry");
static_assert(offsetof(SparksCameraDirectorComponent_PlaySequenceEntry, Entry) == 0x000000, "Member 'SparksCameraDirectorComponent_PlaySequenceEntry::Entry' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_PlaySequenceEntry, MsOffset) == 0x000080, "Member 'SparksCameraDirectorComponent_PlaySequenceEntry::MsOffset' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_PlaySequenceEntry, bIntermission) == 0x000084, "Member 'SparksCameraDirectorComponent_PlaySequenceEntry::bIntermission' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_PlaySequenceEntry, ForceTarget) == 0x000088, "Member 'SparksCameraDirectorComponent_PlaySequenceEntry::ForceTarget' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.PlayShot
// 0x0088 (0x0088 - 0x0000)
struct SparksCameraDirectorComponent_PlayShot final
{
public:
	struct FSparksCameraDirectorSequenceEntry     Entry;                                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorComponent_PlayShot) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_PlayShot");
static_assert(sizeof(SparksCameraDirectorComponent_PlayShot) == 0x000088, "Wrong size on SparksCameraDirectorComponent_PlayShot");
static_assert(offsetof(SparksCameraDirectorComponent_PlayShot, Entry) == 0x000000, "Member 'SparksCameraDirectorComponent_PlayShot::Entry' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_PlayShot, ReturnValue) == 0x000080, "Member 'SparksCameraDirectorComponent_PlayShot::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.ReplaceWithNonCloseupShot
// 0x0080 (0x0080 - 0x0000)
struct SparksCameraDirectorComponent_ReplaceWithNonCloseupShot final
{
public:
	struct FSparksCameraDirectorSequenceEntry     OldEntry;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_ReplaceWithNonCloseupShot) == 0x000008, "Wrong alignment on SparksCameraDirectorComponent_ReplaceWithNonCloseupShot");
static_assert(sizeof(SparksCameraDirectorComponent_ReplaceWithNonCloseupShot) == 0x000080, "Wrong size on SparksCameraDirectorComponent_ReplaceWithNonCloseupShot");
static_assert(offsetof(SparksCameraDirectorComponent_ReplaceWithNonCloseupShot, OldEntry) == 0x000000, "Member 'SparksCameraDirectorComponent_ReplaceWithNonCloseupShot::OldEntry' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.Reset
// 0x0001 (0x0001 - 0x0000)
struct SparksCameraDirectorComponent_Reset final
{
public:
	bool                                          bForceShotChange;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_Reset) == 0x000001, "Wrong alignment on SparksCameraDirectorComponent_Reset");
static_assert(sizeof(SparksCameraDirectorComponent_Reset) == 0x000001, "Wrong size on SparksCameraDirectorComponent_Reset");
static_assert(offsetof(SparksCameraDirectorComponent_Reset, bForceShotChange) == 0x000000, "Member 'SparksCameraDirectorComponent_Reset::bForceShotChange' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.StartIntermissionCameras
// 0x0008 (0x0008 - 0x0000)
struct SparksCameraDirectorComponent_StartIntermissionCameras final
{
public:
	float                                         ForceLengthMS;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReloadNewSequence;                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceShotChange;                                  // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorComponent_StartIntermissionCameras) == 0x000004, "Wrong alignment on SparksCameraDirectorComponent_StartIntermissionCameras");
static_assert(sizeof(SparksCameraDirectorComponent_StartIntermissionCameras) == 0x000008, "Wrong size on SparksCameraDirectorComponent_StartIntermissionCameras");
static_assert(offsetof(SparksCameraDirectorComponent_StartIntermissionCameras, ForceLengthMS) == 0x000000, "Member 'SparksCameraDirectorComponent_StartIntermissionCameras::ForceLengthMS' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_StartIntermissionCameras, bForceReloadNewSequence) == 0x000004, "Member 'SparksCameraDirectorComponent_StartIntermissionCameras::bForceReloadNewSequence' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorComponent_StartIntermissionCameras, bForceShotChange) == 0x000005, "Member 'SparksCameraDirectorComponent_StartIntermissionCameras::bForceShotChange' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorComponent.GetCameraActive
// 0x0001 (0x0001 - 0x0000)
struct SparksCameraDirectorComponent_GetCameraActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorComponent_GetCameraActive) == 0x000001, "Wrong alignment on SparksCameraDirectorComponent_GetCameraActive");
static_assert(sizeof(SparksCameraDirectorComponent_GetCameraActive) == 0x000001, "Wrong size on SparksCameraDirectorComponent_GetCameraActive");
static_assert(offsetof(SparksCameraDirectorComponent_GetCameraActive, ReturnValue) == 0x000000, "Member 'SparksCameraDirectorComponent_GetCameraActive::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorConfig.FindBestGenerator
// 0x0098 (0x0098 - 0x0000)
struct SparksCameraDirectorConfig_FindBestGenerator final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USparksCameraDirectorSequenceGenerator* ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorConfig_FindBestGenerator) == 0x000008, "Wrong alignment on SparksCameraDirectorConfig_FindBestGenerator");
static_assert(sizeof(SparksCameraDirectorConfig_FindBestGenerator) == 0x000098, "Wrong size on SparksCameraDirectorConfig_FindBestGenerator");
static_assert(offsetof(SparksCameraDirectorConfig_FindBestGenerator, Section) == 0x000000, "Member 'SparksCameraDirectorConfig_FindBestGenerator::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorConfig_FindBestGenerator, ReturnValue) == 0x000090, "Member 'SparksCameraDirectorConfig_FindBestGenerator::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorConfig.GenerateEntry
// 0x0118 (0x0118 - 0x0000)
struct SparksCameraDirectorConfig_GenerateEntry final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequenceEntry     OutEntry;                                          // 0x0090(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorConfig_GenerateEntry) == 0x000008, "Wrong alignment on SparksCameraDirectorConfig_GenerateEntry");
static_assert(sizeof(SparksCameraDirectorConfig_GenerateEntry) == 0x000118, "Wrong size on SparksCameraDirectorConfig_GenerateEntry");
static_assert(offsetof(SparksCameraDirectorConfig_GenerateEntry, Section) == 0x000000, "Member 'SparksCameraDirectorConfig_GenerateEntry::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorConfig_GenerateEntry, OutEntry) == 0x000090, "Member 'SparksCameraDirectorConfig_GenerateEntry::OutEntry' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorConfig_GenerateEntry, ReturnValue) == 0x000110, "Member 'SparksCameraDirectorConfig_GenerateEntry::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorConfig.GenerateSequence
// 0x00C0 (0x00C0 - 0x0000)
struct SparksCameraDirectorConfig_GenerateSequence final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequence          OutSequence;                                       // 0x0090(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorConfig_GenerateSequence) == 0x000008, "Wrong alignment on SparksCameraDirectorConfig_GenerateSequence");
static_assert(sizeof(SparksCameraDirectorConfig_GenerateSequence) == 0x0000C0, "Wrong size on SparksCameraDirectorConfig_GenerateSequence");
static_assert(offsetof(SparksCameraDirectorConfig_GenerateSequence, Section) == 0x000000, "Member 'SparksCameraDirectorConfig_GenerateSequence::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorConfig_GenerateSequence, OutSequence) == 0x000090, "Member 'SparksCameraDirectorConfig_GenerateSequence::OutSequence' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorConfig_GenerateSequence, ReturnValue) == 0x0000B8, "Member 'SparksCameraDirectorConfig_GenerateSequence::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorConfig.MarkShotTime
// 0x0010 (0x0010 - 0x0000)
struct SparksCameraDirectorConfig_MarkShotTime final
{
public:
	class ULevelSequence*                         Shot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtTimestamp;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorConfig_MarkShotTime) == 0x000008, "Wrong alignment on SparksCameraDirectorConfig_MarkShotTime");
static_assert(sizeof(SparksCameraDirectorConfig_MarkShotTime) == 0x000010, "Wrong size on SparksCameraDirectorConfig_MarkShotTime");
static_assert(offsetof(SparksCameraDirectorConfig_MarkShotTime, Shot) == 0x000000, "Member 'SparksCameraDirectorConfig_MarkShotTime::Shot' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorConfig_MarkShotTime, AtTimestamp) == 0x000008, "Member 'SparksCameraDirectorConfig_MarkShotTime::AtTimestamp' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorConfig.ShouldUseShot
// 0x0010 (0x0010 - 0x0000)
struct SparksCameraDirectorConfig_ShouldUseShot final
{
public:
	class ULevelSequence*                         Shot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtTimestamp;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorConfig_ShouldUseShot) == 0x000008, "Wrong alignment on SparksCameraDirectorConfig_ShouldUseShot");
static_assert(sizeof(SparksCameraDirectorConfig_ShouldUseShot) == 0x000010, "Wrong size on SparksCameraDirectorConfig_ShouldUseShot");
static_assert(offsetof(SparksCameraDirectorConfig_ShouldUseShot, Shot) == 0x000000, "Member 'SparksCameraDirectorConfig_ShouldUseShot::Shot' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorConfig_ShouldUseShot, AtTimestamp) == 0x000008, "Member 'SparksCameraDirectorConfig_ShouldUseShot::AtTimestamp' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorConfig_ShouldUseShot, ReturnValue) == 0x00000C, "Member 'SparksCameraDirectorConfig_ShouldUseShot::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPluginDataProvider.GetAllTargets
// 0x0010 (0x0010 - 0x0000)
struct SparksCameraPluginDataProvider_GetAllTargets final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraPluginDataProvider_GetAllTargets) == 0x000008, "Wrong alignment on SparksCameraPluginDataProvider_GetAllTargets");
static_assert(sizeof(SparksCameraPluginDataProvider_GetAllTargets) == 0x000010, "Wrong size on SparksCameraPluginDataProvider_GetAllTargets");
static_assert(offsetof(SparksCameraPluginDataProvider_GetAllTargets, ReturnValue) == 0x000000, "Member 'SparksCameraPluginDataProvider_GetAllTargets::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPluginDataProvider.GetCurrentMSTimeInCameraEvent
// 0x0004 (0x0004 - 0x0000)
struct SparksCameraPluginDataProvider_GetCurrentMSTimeInCameraEvent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraPluginDataProvider_GetCurrentMSTimeInCameraEvent) == 0x000004, "Wrong alignment on SparksCameraPluginDataProvider_GetCurrentMSTimeInCameraEvent");
static_assert(sizeof(SparksCameraPluginDataProvider_GetCurrentMSTimeInCameraEvent) == 0x000004, "Wrong size on SparksCameraPluginDataProvider_GetCurrentMSTimeInCameraEvent");
static_assert(offsetof(SparksCameraPluginDataProvider_GetCurrentMSTimeInCameraEvent, ReturnValue) == 0x000000, "Member 'SparksCameraPluginDataProvider_GetCurrentMSTimeInCameraEvent::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPluginDataProvider.GetMatchingCameraTarget
// 0x0030 (0x0030 - 0x0000)
struct SparksCameraPluginDataProvider_GetMatchingCameraTarget final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ShotTimeMS;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreferLocal;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraPluginDataProvider_GetMatchingCameraTarget) == 0x000008, "Wrong alignment on SparksCameraPluginDataProvider_GetMatchingCameraTarget");
static_assert(sizeof(SparksCameraPluginDataProvider_GetMatchingCameraTarget) == 0x000030, "Wrong size on SparksCameraPluginDataProvider_GetMatchingCameraTarget");
static_assert(offsetof(SparksCameraPluginDataProvider_GetMatchingCameraTarget, Tags) == 0x000000, "Member 'SparksCameraPluginDataProvider_GetMatchingCameraTarget::Tags' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetMatchingCameraTarget, ShotTimeMS) == 0x000020, "Member 'SparksCameraPluginDataProvider_GetMatchingCameraTarget::ShotTimeMS' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetMatchingCameraTarget, bPreferLocal) == 0x000024, "Member 'SparksCameraPluginDataProvider_GetMatchingCameraTarget::bPreferLocal' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetMatchingCameraTarget, ReturnValue) == 0x000028, "Member 'SparksCameraPluginDataProvider_GetMatchingCameraTarget::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPluginDataProvider.GetTargetForCloseup
// 0x0038 (0x0038 - 0x0000)
struct SparksCameraPluginDataProvider_GetTargetForCloseup final
{
public:
	float                                         ShotTimeMS;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TagsOut;                                           // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bPreferLocal;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraPluginDataProvider_GetTargetForCloseup) == 0x000008, "Wrong alignment on SparksCameraPluginDataProvider_GetTargetForCloseup");
static_assert(sizeof(SparksCameraPluginDataProvider_GetTargetForCloseup) == 0x000038, "Wrong size on SparksCameraPluginDataProvider_GetTargetForCloseup");
static_assert(offsetof(SparksCameraPluginDataProvider_GetTargetForCloseup, ShotTimeMS) == 0x000000, "Member 'SparksCameraPluginDataProvider_GetTargetForCloseup::ShotTimeMS' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetTargetForCloseup, TagsOut) == 0x000008, "Member 'SparksCameraPluginDataProvider_GetTargetForCloseup::TagsOut' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetTargetForCloseup, bPreferLocal) == 0x000028, "Member 'SparksCameraPluginDataProvider_GetTargetForCloseup::bPreferLocal' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetTargetForCloseup, ReturnValue) == 0x000030, "Member 'SparksCameraPluginDataProvider_GetTargetForCloseup::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPluginDataProvider.GetTargetRelevantTags
// 0x0070 (0x0070 - 0x0000)
struct SparksCameraPluginDataProvider_GetTargetRelevantTags final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSparksCameraFilter                    TagsOut;                                           // 0x0008(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraPluginDataProvider_GetTargetRelevantTags) == 0x000008, "Wrong alignment on SparksCameraPluginDataProvider_GetTargetRelevantTags");
static_assert(sizeof(SparksCameraPluginDataProvider_GetTargetRelevantTags) == 0x000070, "Wrong size on SparksCameraPluginDataProvider_GetTargetRelevantTags");
static_assert(offsetof(SparksCameraPluginDataProvider_GetTargetRelevantTags, Target) == 0x000000, "Member 'SparksCameraPluginDataProvider_GetTargetRelevantTags::Target' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetTargetRelevantTags, TagsOut) == 0x000008, "Member 'SparksCameraPluginDataProvider_GetTargetRelevantTags::TagsOut' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetTargetRelevantTags, ReturnValue) == 0x000068, "Member 'SparksCameraPluginDataProvider_GetTargetRelevantTags::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPluginDataProvider.GetValidTimestamp
// 0x0010 (0x0010 - 0x0000)
struct SparksCameraPluginDataProvider_GetValidTimestamp final
{
public:
	float                                         DesiredTimestampMS;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTimestampMSHigh;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTimestampMSLow;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraPluginDataProvider_GetValidTimestamp) == 0x000004, "Wrong alignment on SparksCameraPluginDataProvider_GetValidTimestamp");
static_assert(sizeof(SparksCameraPluginDataProvider_GetValidTimestamp) == 0x000010, "Wrong size on SparksCameraPluginDataProvider_GetValidTimestamp");
static_assert(offsetof(SparksCameraPluginDataProvider_GetValidTimestamp, DesiredTimestampMS) == 0x000000, "Member 'SparksCameraPluginDataProvider_GetValidTimestamp::DesiredTimestampMS' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetValidTimestamp, OutTimestampMSHigh) == 0x000004, "Member 'SparksCameraPluginDataProvider_GetValidTimestamp::OutTimestampMSHigh' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetValidTimestamp, OutTimestampMSLow) == 0x000008, "Member 'SparksCameraPluginDataProvider_GetValidTimestamp::OutTimestampMSLow' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetValidTimestamp, ReturnValue) == 0x00000C, "Member 'SparksCameraPluginDataProvider_GetValidTimestamp::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPluginDataProvider.GetStaticShot
// 0x0058 (0x0058 - 0x0000)
struct SparksCameraPluginDataProvider_GetStaticShot final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSparksCameraShot                      OutShot;                                           // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraPluginDataProvider_GetStaticShot) == 0x000008, "Wrong alignment on SparksCameraPluginDataProvider_GetStaticShot");
static_assert(sizeof(SparksCameraPluginDataProvider_GetStaticShot) == 0x000058, "Wrong size on SparksCameraPluginDataProvider_GetStaticShot");
static_assert(offsetof(SparksCameraPluginDataProvider_GetStaticShot, Index_0) == 0x000000, "Member 'SparksCameraPluginDataProvider_GetStaticShot::Index_0' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetStaticShot, OutShot) == 0x000008, "Member 'SparksCameraPluginDataProvider_GetStaticShot::OutShot' has a wrong offset!");
static_assert(offsetof(SparksCameraPluginDataProvider_GetStaticShot, ReturnValue) == 0x000050, "Member 'SparksCameraPluginDataProvider_GetStaticShot::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPluginDataProvider.GetStaticShotCount
// 0x0004 (0x0004 - 0x0000)
struct SparksCameraPluginDataProvider_GetStaticShotCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraPluginDataProvider_GetStaticShotCount) == 0x000004, "Wrong alignment on SparksCameraPluginDataProvider_GetStaticShotCount");
static_assert(sizeof(SparksCameraPluginDataProvider_GetStaticShotCount) == 0x000004, "Wrong size on SparksCameraPluginDataProvider_GetStaticShotCount");
static_assert(offsetof(SparksCameraPluginDataProvider_GetStaticShotCount, ReturnValue) == 0x000000, "Member 'SparksCameraPluginDataProvider_GetStaticShotCount::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraShotSelectRuleBase.ChooseShot
// 0x0118 (0x0118 - 0x0000)
struct SparksCameraShotSelectRuleBase_ChooseShot final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequenceEntry     OutShot;                                           // 0x0090(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraShotSelectRuleBase_ChooseShot) == 0x000008, "Wrong alignment on SparksCameraShotSelectRuleBase_ChooseShot");
static_assert(sizeof(SparksCameraShotSelectRuleBase_ChooseShot) == 0x000118, "Wrong size on SparksCameraShotSelectRuleBase_ChooseShot");
static_assert(offsetof(SparksCameraShotSelectRuleBase_ChooseShot, Section) == 0x000000, "Member 'SparksCameraShotSelectRuleBase_ChooseShot::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraShotSelectRuleBase_ChooseShot, OutShot) == 0x000090, "Member 'SparksCameraShotSelectRuleBase_ChooseShot::OutShot' has a wrong offset!");
static_assert(offsetof(SparksCameraShotSelectRuleBase_ChooseShot, ReturnValue) == 0x000110, "Member 'SparksCameraShotSelectRuleBase_ChooseShot::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraShotSelectRuleBase.Init
// 0x0010 (0x0010 - 0x0000)
struct SparksCameraShotSelectRuleBase_Init final
{
public:
	class USparksCameraShotPool*                  InPool;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraShotSelectRuleBase_Init) == 0x000008, "Wrong alignment on SparksCameraShotSelectRuleBase_Init");
static_assert(sizeof(SparksCameraShotSelectRuleBase_Init) == 0x000010, "Wrong size on SparksCameraShotSelectRuleBase_Init");
static_assert(offsetof(SparksCameraShotSelectRuleBase_Init, InPool) == 0x000000, "Member 'SparksCameraShotSelectRuleBase_Init::InPool' has a wrong offset!");
static_assert(offsetof(SparksCameraShotSelectRuleBase_Init, ReturnValue) == 0x000008, "Member 'SparksCameraShotSelectRuleBase_Init::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraShotSelectRuleBase.Reset
// 0x0001 (0x0001 - 0x0000)
struct SparksCameraShotSelectRuleBase_Reset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraShotSelectRuleBase_Reset) == 0x000001, "Wrong alignment on SparksCameraShotSelectRuleBase_Reset");
static_assert(sizeof(SparksCameraShotSelectRuleBase_Reset) == 0x000001, "Wrong size on SparksCameraShotSelectRuleBase_Reset");
static_assert(offsetof(SparksCameraShotSelectRuleBase_Reset, ReturnValue) == 0x000000, "Member 'SparksCameraShotSelectRuleBase_Reset::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraShotSelectRuleBase.GetShotCount
// 0x0004 (0x0004 - 0x0000)
struct SparksCameraShotSelectRuleBase_GetShotCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraShotSelectRuleBase_GetShotCount) == 0x000004, "Wrong alignment on SparksCameraShotSelectRuleBase_GetShotCount");
static_assert(sizeof(SparksCameraShotSelectRuleBase_GetShotCount) == 0x000004, "Wrong size on SparksCameraShotSelectRuleBase_GetShotCount");
static_assert(offsetof(SparksCameraShotSelectRuleBase_GetShotCount, ReturnValue) == 0x000000, "Member 'SparksCameraShotSelectRuleBase_GetShotCount::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPoolSelectRuleBase.ChooseExitShot
// 0x0118 (0x0118 - 0x0000)
struct SparksCameraPoolSelectRuleBase_ChooseExitShot final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequenceEntry     OutShot;                                           // 0x0090(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraPoolSelectRuleBase_ChooseExitShot) == 0x000008, "Wrong alignment on SparksCameraPoolSelectRuleBase_ChooseExitShot");
static_assert(sizeof(SparksCameraPoolSelectRuleBase_ChooseExitShot) == 0x000118, "Wrong size on SparksCameraPoolSelectRuleBase_ChooseExitShot");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_ChooseExitShot, Section) == 0x000000, "Member 'SparksCameraPoolSelectRuleBase_ChooseExitShot::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_ChooseExitShot, OutShot) == 0x000090, "Member 'SparksCameraPoolSelectRuleBase_ChooseExitShot::OutShot' has a wrong offset!");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_ChooseExitShot, ReturnValue) == 0x000110, "Member 'SparksCameraPoolSelectRuleBase_ChooseExitShot::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPoolSelectRuleBase.ChooseIntroShot
// 0x0118 (0x0118 - 0x0000)
struct SparksCameraPoolSelectRuleBase_ChooseIntroShot final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequenceEntry     OutShot;                                           // 0x0090(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraPoolSelectRuleBase_ChooseIntroShot) == 0x000008, "Wrong alignment on SparksCameraPoolSelectRuleBase_ChooseIntroShot");
static_assert(sizeof(SparksCameraPoolSelectRuleBase_ChooseIntroShot) == 0x000118, "Wrong size on SparksCameraPoolSelectRuleBase_ChooseIntroShot");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_ChooseIntroShot, Section) == 0x000000, "Member 'SparksCameraPoolSelectRuleBase_ChooseIntroShot::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_ChooseIntroShot, OutShot) == 0x000090, "Member 'SparksCameraPoolSelectRuleBase_ChooseIntroShot::OutShot' has a wrong offset!");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_ChooseIntroShot, ReturnValue) == 0x000110, "Member 'SparksCameraPoolSelectRuleBase_ChooseIntroShot::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPoolSelectRuleBase.ChooseShot
// 0x0118 (0x0118 - 0x0000)
struct SparksCameraPoolSelectRuleBase_ChooseShot final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequenceEntry     OutShot;                                           // 0x0090(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraPoolSelectRuleBase_ChooseShot) == 0x000008, "Wrong alignment on SparksCameraPoolSelectRuleBase_ChooseShot");
static_assert(sizeof(SparksCameraPoolSelectRuleBase_ChooseShot) == 0x000118, "Wrong size on SparksCameraPoolSelectRuleBase_ChooseShot");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_ChooseShot, Section) == 0x000000, "Member 'SparksCameraPoolSelectRuleBase_ChooseShot::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_ChooseShot, OutShot) == 0x000090, "Member 'SparksCameraPoolSelectRuleBase_ChooseShot::OutShot' has a wrong offset!");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_ChooseShot, ReturnValue) == 0x000110, "Member 'SparksCameraPoolSelectRuleBase_ChooseShot::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPoolSelectRuleBase.Init
// 0x00B0 (0x00B0 - 0x0000)
struct SparksCameraPoolSelectRuleBase_Init final
{
public:
	struct FSparksCameraSectionWrapper            Section;                                           // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraPoolSelectRuleBase_Init) == 0x000008, "Wrong alignment on SparksCameraPoolSelectRuleBase_Init");
static_assert(sizeof(SparksCameraPoolSelectRuleBase_Init) == 0x0000B0, "Wrong size on SparksCameraPoolSelectRuleBase_Init");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_Init, Section) == 0x000000, "Member 'SparksCameraPoolSelectRuleBase_Init::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_Init, ReturnValue) == 0x0000A8, "Member 'SparksCameraPoolSelectRuleBase_Init::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPoolSelectRuleBase.Reset
// 0x0001 (0x0001 - 0x0000)
struct SparksCameraPoolSelectRuleBase_Reset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraPoolSelectRuleBase_Reset) == 0x000001, "Wrong alignment on SparksCameraPoolSelectRuleBase_Reset");
static_assert(sizeof(SparksCameraPoolSelectRuleBase_Reset) == 0x000001, "Wrong size on SparksCameraPoolSelectRuleBase_Reset");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_Reset, ReturnValue) == 0x000000, "Member 'SparksCameraPoolSelectRuleBase_Reset::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPoolSelectRuleBase.GetPoolCount
// 0x0004 (0x0004 - 0x0000)
struct SparksCameraPoolSelectRuleBase_GetPoolCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraPoolSelectRuleBase_GetPoolCount) == 0x000004, "Wrong alignment on SparksCameraPoolSelectRuleBase_GetPoolCount");
static_assert(sizeof(SparksCameraPoolSelectRuleBase_GetPoolCount) == 0x000004, "Wrong size on SparksCameraPoolSelectRuleBase_GetPoolCount");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_GetPoolCount, ReturnValue) == 0x000000, "Member 'SparksCameraPoolSelectRuleBase_GetPoolCount::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraPoolSelectRuleBase.GetShotCount
// 0x0004 (0x0004 - 0x0000)
struct SparksCameraPoolSelectRuleBase_GetShotCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraPoolSelectRuleBase_GetShotCount) == 0x000004, "Wrong alignment on SparksCameraPoolSelectRuleBase_GetShotCount");
static_assert(sizeof(SparksCameraPoolSelectRuleBase_GetShotCount) == 0x000004, "Wrong size on SparksCameraPoolSelectRuleBase_GetShotCount");
static_assert(offsetof(SparksCameraPoolSelectRuleBase_GetShotCount, ReturnValue) == 0x000000, "Member 'SparksCameraPoolSelectRuleBase_GetShotCount::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorSequenceGenerator.GenerateEntry
// 0x0120 (0x0120 - 0x0000)
struct SparksCameraDirectorSequenceGenerator_GenerateEntry final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USparksCameraPluginDataProvider*        DataProvider;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequenceEntry     OutEntry;                                          // 0x0098(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	ESparksSectionGeneratorResult                 ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorSequenceGenerator_GenerateEntry) == 0x000008, "Wrong alignment on SparksCameraDirectorSequenceGenerator_GenerateEntry");
static_assert(sizeof(SparksCameraDirectorSequenceGenerator_GenerateEntry) == 0x000120, "Wrong size on SparksCameraDirectorSequenceGenerator_GenerateEntry");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateEntry, Section) == 0x000000, "Member 'SparksCameraDirectorSequenceGenerator_GenerateEntry::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateEntry, DataProvider) == 0x000090, "Member 'SparksCameraDirectorSequenceGenerator_GenerateEntry::DataProvider' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateEntry, OutEntry) == 0x000098, "Member 'SparksCameraDirectorSequenceGenerator_GenerateEntry::OutEntry' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateEntry, ReturnValue) == 0x000118, "Member 'SparksCameraDirectorSequenceGenerator_GenerateEntry::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorSequenceGenerator.GenerateExitEntry
// 0x0120 (0x0120 - 0x0000)
struct SparksCameraDirectorSequenceGenerator_GenerateExitEntry final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USparksCameraPluginDataProvider*        DataProvider;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequenceEntry     OutEntry;                                          // 0x0098(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	ESparksSectionGeneratorResult                 ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorSequenceGenerator_GenerateExitEntry) == 0x000008, "Wrong alignment on SparksCameraDirectorSequenceGenerator_GenerateExitEntry");
static_assert(sizeof(SparksCameraDirectorSequenceGenerator_GenerateExitEntry) == 0x000120, "Wrong size on SparksCameraDirectorSequenceGenerator_GenerateExitEntry");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateExitEntry, Section) == 0x000000, "Member 'SparksCameraDirectorSequenceGenerator_GenerateExitEntry::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateExitEntry, DataProvider) == 0x000090, "Member 'SparksCameraDirectorSequenceGenerator_GenerateExitEntry::DataProvider' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateExitEntry, OutEntry) == 0x000098, "Member 'SparksCameraDirectorSequenceGenerator_GenerateExitEntry::OutEntry' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateExitEntry, ReturnValue) == 0x000118, "Member 'SparksCameraDirectorSequenceGenerator_GenerateExitEntry::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorSequenceGenerator.GenerateIntroEntry
// 0x0120 (0x0120 - 0x0000)
struct SparksCameraDirectorSequenceGenerator_GenerateIntroEntry final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USparksCameraPluginDataProvider*        DataProvider;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequenceEntry     OutEntry;                                          // 0x0098(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	ESparksSectionGeneratorResult                 ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorSequenceGenerator_GenerateIntroEntry) == 0x000008, "Wrong alignment on SparksCameraDirectorSequenceGenerator_GenerateIntroEntry");
static_assert(sizeof(SparksCameraDirectorSequenceGenerator_GenerateIntroEntry) == 0x000120, "Wrong size on SparksCameraDirectorSequenceGenerator_GenerateIntroEntry");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateIntroEntry, Section) == 0x000000, "Member 'SparksCameraDirectorSequenceGenerator_GenerateIntroEntry::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateIntroEntry, DataProvider) == 0x000090, "Member 'SparksCameraDirectorSequenceGenerator_GenerateIntroEntry::DataProvider' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateIntroEntry, OutEntry) == 0x000098, "Member 'SparksCameraDirectorSequenceGenerator_GenerateIntroEntry::OutEntry' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateIntroEntry, ReturnValue) == 0x000118, "Member 'SparksCameraDirectorSequenceGenerator_GenerateIntroEntry::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorSequenceGenerator.GenerateSequence
// 0x00C8 (0x00C8 - 0x0000)
struct SparksCameraDirectorSequenceGenerator_GenerateSequence final
{
public:
	struct FSparksPerformanceMapSection           Section;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USparksCameraPluginDataProvider*        DataProvider;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSparksCameraDirectorSequence          OutSequence;                                       // 0x0098(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	ESparksSectionGeneratorResult                 ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorSequenceGenerator_GenerateSequence) == 0x000008, "Wrong alignment on SparksCameraDirectorSequenceGenerator_GenerateSequence");
static_assert(sizeof(SparksCameraDirectorSequenceGenerator_GenerateSequence) == 0x0000C8, "Wrong size on SparksCameraDirectorSequenceGenerator_GenerateSequence");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateSequence, Section) == 0x000000, "Member 'SparksCameraDirectorSequenceGenerator_GenerateSequence::Section' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateSequence, DataProvider) == 0x000090, "Member 'SparksCameraDirectorSequenceGenerator_GenerateSequence::DataProvider' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateSequence, OutSequence) == 0x000098, "Member 'SparksCameraDirectorSequenceGenerator_GenerateSequence::OutSequence' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GenerateSequence, ReturnValue) == 0x0000C0, "Member 'SparksCameraDirectorSequenceGenerator_GenerateSequence::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorSequenceGenerator.GetFilter
// 0x0060 (0x0060 - 0x0000)
struct SparksCameraDirectorSequenceGenerator_GetFilter final
{
public:
	struct FSparksCameraFilter                    ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorSequenceGenerator_GetFilter) == 0x000008, "Wrong alignment on SparksCameraDirectorSequenceGenerator_GetFilter");
static_assert(sizeof(SparksCameraDirectorSequenceGenerator_GetFilter) == 0x000060, "Wrong size on SparksCameraDirectorSequenceGenerator_GetFilter");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_GetFilter, ReturnValue) == 0x000000, "Member 'SparksCameraDirectorSequenceGenerator_GetFilter::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorSequenceGenerator.Init
// 0x00B8 (0x00B8 - 0x0000)
struct SparksCameraDirectorSequenceGenerator_Init final
{
public:
	struct FSparksCameraSectionWrapper            InPool;                                            // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USparksCameraDirectorConfig*            Config;                                            // 0x00A8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCameraDirectorSequenceGenerator_Init) == 0x000008, "Wrong alignment on SparksCameraDirectorSequenceGenerator_Init");
static_assert(sizeof(SparksCameraDirectorSequenceGenerator_Init) == 0x0000B8, "Wrong size on SparksCameraDirectorSequenceGenerator_Init");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_Init, InPool) == 0x000000, "Member 'SparksCameraDirectorSequenceGenerator_Init::InPool' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_Init, Config) == 0x0000A8, "Member 'SparksCameraDirectorSequenceGenerator_Init::Config' has a wrong offset!");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_Init, ReturnValue) == 0x0000B0, "Member 'SparksCameraDirectorSequenceGenerator_Init::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCameraDirectorSequenceGenerator.Reset
// 0x0001 (0x0001 - 0x0000)
struct SparksCameraDirectorSequenceGenerator_Reset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCameraDirectorSequenceGenerator_Reset) == 0x000001, "Wrong alignment on SparksCameraDirectorSequenceGenerator_Reset");
static_assert(sizeof(SparksCameraDirectorSequenceGenerator_Reset) == 0x000001, "Wrong size on SparksCameraDirectorSequenceGenerator_Reset");
static_assert(offsetof(SparksCameraDirectorSequenceGenerator_Reset, ReturnValue) == 0x000000, "Member 'SparksCameraDirectorSequenceGenerator_Reset::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCamera_BPFL.GetSubTagForMidiEventName
// 0x0018 (0x0018 - 0x0000)
struct SparksCamera_BPFL_GetSubTagForMidiEventName final
{
public:
	class FString                                 EventString;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCamera_BPFL_GetSubTagForMidiEventName) == 0x000008, "Wrong alignment on SparksCamera_BPFL_GetSubTagForMidiEventName");
static_assert(sizeof(SparksCamera_BPFL_GetSubTagForMidiEventName) == 0x000018, "Wrong size on SparksCamera_BPFL_GetSubTagForMidiEventName");
static_assert(offsetof(SparksCamera_BPFL_GetSubTagForMidiEventName, EventString) == 0x000000, "Member 'SparksCamera_BPFL_GetSubTagForMidiEventName::EventString' has a wrong offset!");
static_assert(offsetof(SparksCamera_BPFL_GetSubTagForMidiEventName, ReturnValue) == 0x000010, "Member 'SparksCamera_BPFL_GetSubTagForMidiEventName::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCamera_BPFL.GetTagForMidiEventName
// 0x0018 (0x0018 - 0x0000)
struct SparksCamera_BPFL_GetTagForMidiEventName final
{
public:
	class FString                                 EventString;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCamera_BPFL_GetTagForMidiEventName) == 0x000008, "Wrong alignment on SparksCamera_BPFL_GetTagForMidiEventName");
static_assert(sizeof(SparksCamera_BPFL_GetTagForMidiEventName) == 0x000018, "Wrong size on SparksCamera_BPFL_GetTagForMidiEventName");
static_assert(offsetof(SparksCamera_BPFL_GetTagForMidiEventName, EventString) == 0x000000, "Member 'SparksCamera_BPFL_GetTagForMidiEventName::EventString' has a wrong offset!");
static_assert(offsetof(SparksCamera_BPFL_GetTagForMidiEventName, ReturnValue) == 0x000010, "Member 'SparksCamera_BPFL_GetTagForMidiEventName::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCamera_BPFL.ScoreTagContainers
// 0x0048 (0x0048 - 0x0000)
struct SparksCamera_BPFL_ScoreTagContainers final
{
public:
	struct FGameplayTagContainer                  Tags1;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags2;                                             // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCamera_BPFL_ScoreTagContainers) == 0x000008, "Wrong alignment on SparksCamera_BPFL_ScoreTagContainers");
static_assert(sizeof(SparksCamera_BPFL_ScoreTagContainers) == 0x000048, "Wrong size on SparksCamera_BPFL_ScoreTagContainers");
static_assert(offsetof(SparksCamera_BPFL_ScoreTagContainers, Tags1) == 0x000000, "Member 'SparksCamera_BPFL_ScoreTagContainers::Tags1' has a wrong offset!");
static_assert(offsetof(SparksCamera_BPFL_ScoreTagContainers, Tags2) == 0x000020, "Member 'SparksCamera_BPFL_ScoreTagContainers::Tags2' has a wrong offset!");
static_assert(offsetof(SparksCamera_BPFL_ScoreTagContainers, ReturnValue) == 0x000040, "Member 'SparksCamera_BPFL_ScoreTagContainers::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksCamera_BPFL.ScoreTagsAgainstFilter
// 0x0088 (0x0088 - 0x0000)
struct SparksCamera_BPFL_ScoreTagsAgainstFilter final
{
public:
	struct FSparksCameraFilter                    Filter;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToMatch;                                       // 0x0060(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         OutScore;                                          // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksFilterResult                           ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCamera_BPFL_ScoreTagsAgainstFilter) == 0x000008, "Wrong alignment on SparksCamera_BPFL_ScoreTagsAgainstFilter");
static_assert(sizeof(SparksCamera_BPFL_ScoreTagsAgainstFilter) == 0x000088, "Wrong size on SparksCamera_BPFL_ScoreTagsAgainstFilter");
static_assert(offsetof(SparksCamera_BPFL_ScoreTagsAgainstFilter, Filter) == 0x000000, "Member 'SparksCamera_BPFL_ScoreTagsAgainstFilter::Filter' has a wrong offset!");
static_assert(offsetof(SparksCamera_BPFL_ScoreTagsAgainstFilter, TagsToMatch) == 0x000060, "Member 'SparksCamera_BPFL_ScoreTagsAgainstFilter::TagsToMatch' has a wrong offset!");
static_assert(offsetof(SparksCamera_BPFL_ScoreTagsAgainstFilter, OutScore) == 0x000080, "Member 'SparksCamera_BPFL_ScoreTagsAgainstFilter::OutScore' has a wrong offset!");
static_assert(offsetof(SparksCamera_BPFL_ScoreTagsAgainstFilter, ReturnValue) == 0x000084, "Member 'SparksCamera_BPFL_ScoreTagsAgainstFilter::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksLevelSequencePlayer.SparksCreateLevelSequencePlayer
// 0x0098 (0x0098 - 0x0000)
struct SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequencePlaybackSettings    Settings;                                          // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class ASparksLevelSequenceActor*              OutActor;                                          // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 TargetActor;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSparksCameraShot                      Shot;                                              // 0x0048(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USparksLevelSequencePlayer*             ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer) == 0x000008, "Wrong alignment on SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer");
static_assert(sizeof(SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer) == 0x000098, "Wrong size on SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer");
static_assert(offsetof(SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer, WorldContextObject) == 0x000000, "Member 'SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer, LevelSequence) == 0x000008, "Member 'SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer::LevelSequence' has a wrong offset!");
static_assert(offsetof(SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer, Settings) == 0x000010, "Member 'SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer::Settings' has a wrong offset!");
static_assert(offsetof(SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer, OutActor) == 0x000038, "Member 'SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer::OutActor' has a wrong offset!");
static_assert(offsetof(SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer, TargetActor) == 0x000040, "Member 'SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer::TargetActor' has a wrong offset!");
static_assert(offsetof(SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer, Shot) == 0x000048, "Member 'SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer::Shot' has a wrong offset!");
static_assert(offsetof(SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer, ReturnValue) == 0x000090, "Member 'SparksLevelSequencePlayer_SparksCreateLevelSequencePlayer::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksPerformanceMap.AddSection
// 0x0028 (0x0028 - 0x0000)
struct SparksPerformanceMap_AddSection final
{
public:
	float                                         StartMS;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PrimaryTag;                                        // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SecondaryTags;                                     // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksPerformanceMap_AddSection) == 0x000008, "Wrong alignment on SparksPerformanceMap_AddSection");
static_assert(sizeof(SparksPerformanceMap_AddSection) == 0x000028, "Wrong size on SparksPerformanceMap_AddSection");
static_assert(offsetof(SparksPerformanceMap_AddSection, StartMS) == 0x000000, "Member 'SparksPerformanceMap_AddSection::StartMS' has a wrong offset!");
static_assert(offsetof(SparksPerformanceMap_AddSection, PrimaryTag) == 0x000004, "Member 'SparksPerformanceMap_AddSection::PrimaryTag' has a wrong offset!");
static_assert(offsetof(SparksPerformanceMap_AddSection, SecondaryTags) == 0x000008, "Member 'SparksPerformanceMap_AddSection::SecondaryTags' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksPerformanceMap.InsertTimeline
// 0x0018 (0x0018 - 0x0000)
struct SparksPerformanceMap_InsertTimeline final
{
public:
	class USparksPerformanceMap*                  Map;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutFirstIndex;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLastIndex;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwrite;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksPerformanceMap_InsertTimeline) == 0x000008, "Wrong alignment on SparksPerformanceMap_InsertTimeline");
static_assert(sizeof(SparksPerformanceMap_InsertTimeline) == 0x000018, "Wrong size on SparksPerformanceMap_InsertTimeline");
static_assert(offsetof(SparksPerformanceMap_InsertTimeline, Map) == 0x000000, "Member 'SparksPerformanceMap_InsertTimeline::Map' has a wrong offset!");
static_assert(offsetof(SparksPerformanceMap_InsertTimeline, OutFirstIndex) == 0x000008, "Member 'SparksPerformanceMap_InsertTimeline::OutFirstIndex' has a wrong offset!");
static_assert(offsetof(SparksPerformanceMap_InsertTimeline, OutLastIndex) == 0x00000C, "Member 'SparksPerformanceMap_InsertTimeline::OutLastIndex' has a wrong offset!");
static_assert(offsetof(SparksPerformanceMap_InsertTimeline, bOverwrite) == 0x000010, "Member 'SparksPerformanceMap_InsertTimeline::bOverwrite' has a wrong offset!");
static_assert(offsetof(SparksPerformanceMap_InsertTimeline, ReturnValue) == 0x000014, "Member 'SparksPerformanceMap_InsertTimeline::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksPerformanceMap.GetNextSectionIndexAtTime
// 0x0008 (0x0008 - 0x0000)
struct SparksPerformanceMap_GetNextSectionIndexAtTime final
{
public:
	float                                         TimeMS;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksPerformanceMap_GetNextSectionIndexAtTime) == 0x000004, "Wrong alignment on SparksPerformanceMap_GetNextSectionIndexAtTime");
static_assert(sizeof(SparksPerformanceMap_GetNextSectionIndexAtTime) == 0x000008, "Wrong size on SparksPerformanceMap_GetNextSectionIndexAtTime");
static_assert(offsetof(SparksPerformanceMap_GetNextSectionIndexAtTime, TimeMS) == 0x000000, "Member 'SparksPerformanceMap_GetNextSectionIndexAtTime::TimeMS' has a wrong offset!");
static_assert(offsetof(SparksPerformanceMap_GetNextSectionIndexAtTime, ReturnValue) == 0x000004, "Member 'SparksPerformanceMap_GetNextSectionIndexAtTime::ReturnValue' has a wrong offset!");

// Function SparksCameraDirectorRuntime.SparksPerformanceMap.GetSectionIndexAtTime
// 0x0008 (0x0008 - 0x0000)
struct SparksPerformanceMap_GetSectionIndexAtTime final
{
public:
	float                                         TimeMS;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksPerformanceMap_GetSectionIndexAtTime) == 0x000004, "Wrong alignment on SparksPerformanceMap_GetSectionIndexAtTime");
static_assert(sizeof(SparksPerformanceMap_GetSectionIndexAtTime) == 0x000008, "Wrong size on SparksPerformanceMap_GetSectionIndexAtTime");
static_assert(offsetof(SparksPerformanceMap_GetSectionIndexAtTime, TimeMS) == 0x000000, "Member 'SparksPerformanceMap_GetSectionIndexAtTime::TimeMS' has a wrong offset!");
static_assert(offsetof(SparksPerformanceMap_GetSectionIndexAtTime, ReturnValue) == 0x000004, "Member 'SparksPerformanceMap_GetSectionIndexAtTime::ReturnValue' has a wrong offset!");

}

