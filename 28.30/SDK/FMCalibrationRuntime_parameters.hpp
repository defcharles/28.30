#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMCalibrationRuntime

#include "Basic.hpp"

#include "FMCalibrationRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function FMCalibrationRuntime.BeatmatchCalibrationHelper.CalcCalibrationResult
// 0x0020 (0x0020 - 0x0000)
struct BeatmatchCalibrationHelper_CalcCalibrationResult final
{
public:
	TArray<float>                                 Samples;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         BPS;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECalibrationState                             ResultingState;                                    // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResultMs;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeatmatchCalibrationHelper_CalcCalibrationResult) == 0x000008, "Wrong alignment on BeatmatchCalibrationHelper_CalcCalibrationResult");
static_assert(sizeof(BeatmatchCalibrationHelper_CalcCalibrationResult) == 0x000020, "Wrong size on BeatmatchCalibrationHelper_CalcCalibrationResult");
static_assert(offsetof(BeatmatchCalibrationHelper_CalcCalibrationResult, Samples) == 0x000000, "Member 'BeatmatchCalibrationHelper_CalcCalibrationResult::Samples' has a wrong offset!");
static_assert(offsetof(BeatmatchCalibrationHelper_CalcCalibrationResult, BPS) == 0x000010, "Member 'BeatmatchCalibrationHelper_CalcCalibrationResult::BPS' has a wrong offset!");
static_assert(offsetof(BeatmatchCalibrationHelper_CalcCalibrationResult, ResultingState) == 0x000014, "Member 'BeatmatchCalibrationHelper_CalcCalibrationResult::ResultingState' has a wrong offset!");
static_assert(offsetof(BeatmatchCalibrationHelper_CalcCalibrationResult, ResultMs) == 0x000018, "Member 'BeatmatchCalibrationHelper_CalcCalibrationResult::ResultMs' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.SendToggleModalMessage
// 0x0010 (0x0010 - 0x0000)
struct FMCalibrationControllerComponent_SendToggleModalMessage final
{
public:
	class AActor*                                 ContextActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePreamble;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoLaunch;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMCalibrationControllerComponent_SendToggleModalMessage) == 0x000008, "Wrong alignment on FMCalibrationControllerComponent_SendToggleModalMessage");
static_assert(sizeof(FMCalibrationControllerComponent_SendToggleModalMessage) == 0x000010, "Wrong size on FMCalibrationControllerComponent_SendToggleModalMessage");
static_assert(offsetof(FMCalibrationControllerComponent_SendToggleModalMessage, ContextActor) == 0x000000, "Member 'FMCalibrationControllerComponent_SendToggleModalMessage::ContextActor' has a wrong offset!");
static_assert(offsetof(FMCalibrationControllerComponent_SendToggleModalMessage, UsePreamble) == 0x000008, "Member 'FMCalibrationControllerComponent_SendToggleModalMessage::UsePreamble' has a wrong offset!");
static_assert(offsetof(FMCalibrationControllerComponent_SendToggleModalMessage, bIsAutoLaunch) == 0x000009, "Member 'FMCalibrationControllerComponent_SendToggleModalMessage::bIsAutoLaunch' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.SetAudioLatencyMs
// 0x0004 (0x0004 - 0x0000)
struct FMCalibrationControllerComponent_SetAudioLatencyMs final
{
public:
	float                                         LatencyMs;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_SetAudioLatencyMs) == 0x000004, "Wrong alignment on FMCalibrationControllerComponent_SetAudioLatencyMs");
static_assert(sizeof(FMCalibrationControllerComponent_SetAudioLatencyMs) == 0x000004, "Wrong size on FMCalibrationControllerComponent_SetAudioLatencyMs");
static_assert(offsetof(FMCalibrationControllerComponent_SetAudioLatencyMs, LatencyMs) == 0x000000, "Member 'FMCalibrationControllerComponent_SetAudioLatencyMs::LatencyMs' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.SetHasTalkedWithRoadie
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_SetHasTalkedWithRoadie final
{
public:
	bool                                          bHasTalkedWithRoadie;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_SetHasTalkedWithRoadie) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_SetHasTalkedWithRoadie");
static_assert(sizeof(FMCalibrationControllerComponent_SetHasTalkedWithRoadie) == 0x000001, "Wrong size on FMCalibrationControllerComponent_SetHasTalkedWithRoadie");
static_assert(offsetof(FMCalibrationControllerComponent_SetHasTalkedWithRoadie, bHasTalkedWithRoadie) == 0x000000, "Member 'FMCalibrationControllerComponent_SetHasTalkedWithRoadie::bHasTalkedWithRoadie' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.SetIsAutolaunchDisabled
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_SetIsAutolaunchDisabled final
{
public:
	bool                                          bAutolaunchDisabled;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_SetIsAutolaunchDisabled) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_SetIsAutolaunchDisabled");
static_assert(sizeof(FMCalibrationControllerComponent_SetIsAutolaunchDisabled) == 0x000001, "Wrong size on FMCalibrationControllerComponent_SetIsAutolaunchDisabled");
static_assert(offsetof(FMCalibrationControllerComponent_SetIsAutolaunchDisabled, bAutolaunchDisabled) == 0x000000, "Member 'FMCalibrationControllerComponent_SetIsAutolaunchDisabled::bAutolaunchDisabled' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.SetIsCalibrated
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_SetIsCalibrated final
{
public:
	bool                                          bCalibrated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_SetIsCalibrated) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_SetIsCalibrated");
static_assert(sizeof(FMCalibrationControllerComponent_SetIsCalibrated) == 0x000001, "Wrong size on FMCalibrationControllerComponent_SetIsCalibrated");
static_assert(offsetof(FMCalibrationControllerComponent_SetIsCalibrated, bCalibrated) == 0x000000, "Member 'FMCalibrationControllerComponent_SetIsCalibrated::bCalibrated' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.SetIsCalibrationDebugEnabled
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_SetIsCalibrationDebugEnabled final
{
public:
	bool                                          bCalibrationDebugEnabled;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_SetIsCalibrationDebugEnabled) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_SetIsCalibrationDebugEnabled");
static_assert(sizeof(FMCalibrationControllerComponent_SetIsCalibrationDebugEnabled) == 0x000001, "Wrong size on FMCalibrationControllerComponent_SetIsCalibrationDebugEnabled");
static_assert(offsetof(FMCalibrationControllerComponent_SetIsCalibrationDebugEnabled, bCalibrationDebugEnabled) == 0x000000, "Member 'FMCalibrationControllerComponent_SetIsCalibrationDebugEnabled::bCalibrationDebugEnabled' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.SetIsPreambleDisabled
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_SetIsPreambleDisabled final
{
public:
	bool                                          bPreambleDisabled;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_SetIsPreambleDisabled) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_SetIsPreambleDisabled");
static_assert(sizeof(FMCalibrationControllerComponent_SetIsPreambleDisabled) == 0x000001, "Wrong size on FMCalibrationControllerComponent_SetIsPreambleDisabled");
static_assert(offsetof(FMCalibrationControllerComponent_SetIsPreambleDisabled, bPreambleDisabled) == 0x000000, "Member 'FMCalibrationControllerComponent_SetIsPreambleDisabled::bPreambleDisabled' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.SetVideoLatencyMs
// 0x0004 (0x0004 - 0x0000)
struct FMCalibrationControllerComponent_SetVideoLatencyMs final
{
public:
	float                                         LatencyMs;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_SetVideoLatencyMs) == 0x000004, "Wrong alignment on FMCalibrationControllerComponent_SetVideoLatencyMs");
static_assert(sizeof(FMCalibrationControllerComponent_SetVideoLatencyMs) == 0x000004, "Wrong size on FMCalibrationControllerComponent_SetVideoLatencyMs");
static_assert(offsetof(FMCalibrationControllerComponent_SetVideoLatencyMs, LatencyMs) == 0x000000, "Member 'FMCalibrationControllerComponent_SetVideoLatencyMs::LatencyMs' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.GetAudioLatencyMs
// 0x0004 (0x0004 - 0x0000)
struct FMCalibrationControllerComponent_GetAudioLatencyMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_GetAudioLatencyMs) == 0x000004, "Wrong alignment on FMCalibrationControllerComponent_GetAudioLatencyMs");
static_assert(sizeof(FMCalibrationControllerComponent_GetAudioLatencyMs) == 0x000004, "Wrong size on FMCalibrationControllerComponent_GetAudioLatencyMs");
static_assert(offsetof(FMCalibrationControllerComponent_GetAudioLatencyMs, ReturnValue) == 0x000000, "Member 'FMCalibrationControllerComponent_GetAudioLatencyMs::ReturnValue' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.GetHasTalkedWithRoadie
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_GetHasTalkedWithRoadie final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_GetHasTalkedWithRoadie) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_GetHasTalkedWithRoadie");
static_assert(sizeof(FMCalibrationControllerComponent_GetHasTalkedWithRoadie) == 0x000001, "Wrong size on FMCalibrationControllerComponent_GetHasTalkedWithRoadie");
static_assert(offsetof(FMCalibrationControllerComponent_GetHasTalkedWithRoadie, ReturnValue) == 0x000000, "Member 'FMCalibrationControllerComponent_GetHasTalkedWithRoadie::ReturnValue' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.GetIsAutolaunchDisabled
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_GetIsAutolaunchDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_GetIsAutolaunchDisabled) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_GetIsAutolaunchDisabled");
static_assert(sizeof(FMCalibrationControllerComponent_GetIsAutolaunchDisabled) == 0x000001, "Wrong size on FMCalibrationControllerComponent_GetIsAutolaunchDisabled");
static_assert(offsetof(FMCalibrationControllerComponent_GetIsAutolaunchDisabled, ReturnValue) == 0x000000, "Member 'FMCalibrationControllerComponent_GetIsAutolaunchDisabled::ReturnValue' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.GetIsCalibrated
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_GetIsCalibrated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_GetIsCalibrated) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_GetIsCalibrated");
static_assert(sizeof(FMCalibrationControllerComponent_GetIsCalibrated) == 0x000001, "Wrong size on FMCalibrationControllerComponent_GetIsCalibrated");
static_assert(offsetof(FMCalibrationControllerComponent_GetIsCalibrated, ReturnValue) == 0x000000, "Member 'FMCalibrationControllerComponent_GetIsCalibrated::ReturnValue' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.GetIsCalibrationDebugEnabled
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_GetIsCalibrationDebugEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_GetIsCalibrationDebugEnabled) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_GetIsCalibrationDebugEnabled");
static_assert(sizeof(FMCalibrationControllerComponent_GetIsCalibrationDebugEnabled) == 0x000001, "Wrong size on FMCalibrationControllerComponent_GetIsCalibrationDebugEnabled");
static_assert(offsetof(FMCalibrationControllerComponent_GetIsCalibrationDebugEnabled, ReturnValue) == 0x000000, "Member 'FMCalibrationControllerComponent_GetIsCalibrationDebugEnabled::ReturnValue' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.GetIsPreambleDisabled
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_GetIsPreambleDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_GetIsPreambleDisabled) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_GetIsPreambleDisabled");
static_assert(sizeof(FMCalibrationControllerComponent_GetIsPreambleDisabled) == 0x000001, "Wrong size on FMCalibrationControllerComponent_GetIsPreambleDisabled");
static_assert(offsetof(FMCalibrationControllerComponent_GetIsPreambleDisabled, ReturnValue) == 0x000000, "Member 'FMCalibrationControllerComponent_GetIsPreambleDisabled::ReturnValue' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.GetVideoLatencyMs
// 0x0004 (0x0004 - 0x0000)
struct FMCalibrationControllerComponent_GetVideoLatencyMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_GetVideoLatencyMs) == 0x000004, "Wrong alignment on FMCalibrationControllerComponent_GetVideoLatencyMs");
static_assert(sizeof(FMCalibrationControllerComponent_GetVideoLatencyMs) == 0x000004, "Wrong size on FMCalibrationControllerComponent_GetVideoLatencyMs");
static_assert(offsetof(FMCalibrationControllerComponent_GetVideoLatencyMs, ReturnValue) == 0x000000, "Member 'FMCalibrationControllerComponent_GetVideoLatencyMs::ReturnValue' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.IsCalibrationDataLoaded
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_IsCalibrationDataLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_IsCalibrationDataLoaded) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_IsCalibrationDataLoaded");
static_assert(sizeof(FMCalibrationControllerComponent_IsCalibrationDataLoaded) == 0x000001, "Wrong size on FMCalibrationControllerComponent_IsCalibrationDataLoaded");
static_assert(offsetof(FMCalibrationControllerComponent_IsCalibrationDataLoaded, ReturnValue) == 0x000000, "Member 'FMCalibrationControllerComponent_IsCalibrationDataLoaded::ReturnValue' has a wrong offset!");

// Function FMCalibrationRuntime.FMCalibrationControllerComponent.IsCalibrationDataOnLatestVersion
// 0x0001 (0x0001 - 0x0000)
struct FMCalibrationControllerComponent_IsCalibrationDataOnLatestVersion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMCalibrationControllerComponent_IsCalibrationDataOnLatestVersion) == 0x000001, "Wrong alignment on FMCalibrationControllerComponent_IsCalibrationDataOnLatestVersion");
static_assert(sizeof(FMCalibrationControllerComponent_IsCalibrationDataOnLatestVersion) == 0x000001, "Wrong size on FMCalibrationControllerComponent_IsCalibrationDataOnLatestVersion");
static_assert(offsetof(FMCalibrationControllerComponent_IsCalibrationDataOnLatestVersion, ReturnValue) == 0x000000, "Member 'FMCalibrationControllerComponent_IsCalibrationDataOnLatestVersion::ReturnValue' has a wrong offset!");

}

