#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StateDrivenActorRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "StateDrivenActorRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct FortActorComponent_StateDriven_HandleBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_HandleBeginOverlap) == 0x000008, "Wrong alignment on FortActorComponent_StateDriven_HandleBeginOverlap");
static_assert(sizeof(FortActorComponent_StateDriven_HandleBeginOverlap) == 0x000108, "Wrong size on FortActorComponent_StateDriven_HandleBeginOverlap");
static_assert(offsetof(FortActorComponent_StateDriven_HandleBeginOverlap, OverlappedComp) == 0x000000, "Member 'FortActorComponent_StateDriven_HandleBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleBeginOverlap, OtherActor) == 0x000008, "Member 'FortActorComponent_StateDriven_HandleBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleBeginOverlap, OtherComp) == 0x000010, "Member 'FortActorComponent_StateDriven_HandleBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'FortActorComponent_StateDriven_HandleBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleBeginOverlap, bFromSweep) == 0x00001C, "Member 'FortActorComponent_StateDriven_HandleBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleBeginOverlap, SweepResult) == 0x000020, "Member 'FortActorComponent_StateDriven_HandleBeginOverlap::SweepResult' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleDamaged
// 0x0060 (0x0060 - 0x0000)
struct FortActorComponent_StateDriven_HandleDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_HandleDamaged) == 0x000008, "Wrong alignment on FortActorComponent_StateDriven_HandleDamaged");
static_assert(sizeof(FortActorComponent_StateDriven_HandleDamaged) == 0x000060, "Wrong size on FortActorComponent_StateDriven_HandleDamaged");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDamaged, DamagedActor) == 0x000000, "Member 'FortActorComponent_StateDriven_HandleDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDamaged, Damage) == 0x000008, "Member 'FortActorComponent_StateDriven_HandleDamaged::Damage' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDamaged, InstigatedBy) == 0x000010, "Member 'FortActorComponent_StateDriven_HandleDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDamaged, DamageCauser) == 0x000018, "Member 'FortActorComponent_StateDriven_HandleDamaged::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDamaged, HitLocation) == 0x000020, "Member 'FortActorComponent_StateDriven_HandleDamaged::HitLocation' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDamaged, FHitComponent) == 0x000038, "Member 'FortActorComponent_StateDriven_HandleDamaged::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDamaged, BoneName) == 0x000040, "Member 'FortActorComponent_StateDriven_HandleDamaged::BoneName' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDamaged, Momentum) == 0x000048, "Member 'FortActorComponent_StateDriven_HandleDamaged::Momentum' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleDied
// 0x0060 (0x0060 - 0x0000)
struct FortActorComponent_StateDriven_HandleDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_HandleDied) == 0x000008, "Wrong alignment on FortActorComponent_StateDriven_HandleDied");
static_assert(sizeof(FortActorComponent_StateDriven_HandleDied) == 0x000060, "Wrong size on FortActorComponent_StateDriven_HandleDied");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDied, DamagedActor) == 0x000000, "Member 'FortActorComponent_StateDriven_HandleDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDied, Damage) == 0x000008, "Member 'FortActorComponent_StateDriven_HandleDied::Damage' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDied, InstigatedBy) == 0x000010, "Member 'FortActorComponent_StateDriven_HandleDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDied, DamageCauser) == 0x000018, "Member 'FortActorComponent_StateDriven_HandleDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDied, HitLocation) == 0x000020, "Member 'FortActorComponent_StateDriven_HandleDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDied, FHitComponent) == 0x000038, "Member 'FortActorComponent_StateDriven_HandleDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDied, BoneName) == 0x000040, "Member 'FortActorComponent_StateDriven_HandleDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleDied, Momentum) == 0x000048, "Member 'FortActorComponent_StateDriven_HandleDied::Momentum' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct FortActorComponent_StateDriven_HandleEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActorComponent_StateDriven_HandleEndOverlap) == 0x000008, "Wrong alignment on FortActorComponent_StateDriven_HandleEndOverlap");
static_assert(sizeof(FortActorComponent_StateDriven_HandleEndOverlap) == 0x000020, "Wrong size on FortActorComponent_StateDriven_HandleEndOverlap");
static_assert(offsetof(FortActorComponent_StateDriven_HandleEndOverlap, OverlappedComponent) == 0x000000, "Member 'FortActorComponent_StateDriven_HandleEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleEndOverlap, OtherActor) == 0x000008, "Member 'FortActorComponent_StateDriven_HandleEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleEndOverlap, OtherComp) == 0x000010, "Member 'FortActorComponent_StateDriven_HandleEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleEndOverlap, OtherBodyIndex) == 0x000018, "Member 'FortActorComponent_StateDriven_HandleEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleInteraction
// 0x0010 (0x0010 - 0x0000)
struct FortActorComponent_StateDriven_HandleInteraction final
{
public:
	class ABuildingActor*                         SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              InteractingPawn;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_HandleInteraction) == 0x000008, "Wrong alignment on FortActorComponent_StateDriven_HandleInteraction");
static_assert(sizeof(FortActorComponent_StateDriven_HandleInteraction) == 0x000010, "Wrong size on FortActorComponent_StateDriven_HandleInteraction");
static_assert(offsetof(FortActorComponent_StateDriven_HandleInteraction, SelfActor) == 0x000000, "Member 'FortActorComponent_StateDriven_HandleInteraction::SelfActor' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_HandleInteraction, InteractingPawn) == 0x000008, "Member 'FortActorComponent_StateDriven_HandleInteraction::InteractingPawn' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.OnHandleStateTreeEvent
// 0x0008 (0x0008 - 0x0000)
struct FortActorComponent_StateDriven_OnHandleStateTreeEvent final
{
public:
	struct FGameplayTag                           TransitionTag;                                     // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        BurstGameplayCueTag;                               // 0x0004(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_OnHandleStateTreeEvent) == 0x000004, "Wrong alignment on FortActorComponent_StateDriven_OnHandleStateTreeEvent");
static_assert(sizeof(FortActorComponent_StateDriven_OnHandleStateTreeEvent) == 0x000008, "Wrong size on FortActorComponent_StateDriven_OnHandleStateTreeEvent");
static_assert(offsetof(FortActorComponent_StateDriven_OnHandleStateTreeEvent, TransitionTag) == 0x000000, "Member 'FortActorComponent_StateDriven_OnHandleStateTreeEvent::TransitionTag' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_OnHandleStateTreeEvent, BurstGameplayCueTag) == 0x000004, "Member 'FortActorComponent_StateDriven_OnHandleStateTreeEvent::BurstGameplayCueTag' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.OnMulticastStateTreeEvent
// 0x0008 (0x0008 - 0x0000)
struct FortActorComponent_StateDriven_OnMulticastStateTreeEvent final
{
public:
	struct FGameplayTag                           TransitionTag;                                     // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        BurstGameplayCueTag;                               // 0x0004(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_OnMulticastStateTreeEvent) == 0x000004, "Wrong alignment on FortActorComponent_StateDriven_OnMulticastStateTreeEvent");
static_assert(sizeof(FortActorComponent_StateDriven_OnMulticastStateTreeEvent) == 0x000008, "Wrong size on FortActorComponent_StateDriven_OnMulticastStateTreeEvent");
static_assert(offsetof(FortActorComponent_StateDriven_OnMulticastStateTreeEvent, TransitionTag) == 0x000000, "Member 'FortActorComponent_StateDriven_OnMulticastStateTreeEvent::TransitionTag' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_OnMulticastStateTreeEvent, BurstGameplayCueTag) == 0x000004, "Member 'FortActorComponent_StateDriven_OnMulticastStateTreeEvent::BurstGameplayCueTag' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.SetCurrentState
// 0x00E0 (0x00E0 - 0x0000)
struct FortActorComponent_StateDriven_SetCurrentState final
{
public:
	struct FStateDrivenState                      InCurrentState;                                    // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_SetCurrentState) == 0x000010, "Wrong alignment on FortActorComponent_StateDriven_SetCurrentState");
static_assert(sizeof(FortActorComponent_StateDriven_SetCurrentState) == 0x0000E0, "Wrong size on FortActorComponent_StateDriven_SetCurrentState");
static_assert(offsetof(FortActorComponent_StateDriven_SetCurrentState, InCurrentState) == 0x000000, "Member 'FortActorComponent_StateDriven_SetCurrentState::InCurrentState' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.TriggerCustomEvent
// 0x0004 (0x0004 - 0x0000)
struct FortActorComponent_StateDriven_TriggerCustomEvent final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_TriggerCustomEvent) == 0x000004, "Wrong alignment on FortActorComponent_StateDriven_TriggerCustomEvent");
static_assert(sizeof(FortActorComponent_StateDriven_TriggerCustomEvent) == 0x000004, "Wrong size on FortActorComponent_StateDriven_TriggerCustomEvent");
static_assert(offsetof(FortActorComponent_StateDriven_TriggerCustomEvent, EventTag) == 0x000000, "Member 'FortActorComponent_StateDriven_TriggerCustomEvent::EventTag' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.GetFailedInteractionString
// 0x0028 (0x0028 - 0x0000)
struct FortActorComponent_StateDriven_GetFailedInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_GetFailedInteractionString) == 0x000008, "Wrong alignment on FortActorComponent_StateDriven_GetFailedInteractionString");
static_assert(sizeof(FortActorComponent_StateDriven_GetFailedInteractionString) == 0x000028, "Wrong size on FortActorComponent_StateDriven_GetFailedInteractionString");
static_assert(offsetof(FortActorComponent_StateDriven_GetFailedInteractionString, InteractingPawn) == 0x000000, "Member 'FortActorComponent_StateDriven_GetFailedInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_GetFailedInteractionString, InteractionBeingAttempted) == 0x000008, "Member 'FortActorComponent_StateDriven_GetFailedInteractionString::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_GetFailedInteractionString, ReturnValue) == 0x000010, "Member 'FortActorComponent_StateDriven_GetFailedInteractionString::ReturnValue' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.GetInteractionString
// 0x0028 (0x0028 - 0x0000)
struct FortActorComponent_StateDriven_GetInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_GetInteractionString) == 0x000008, "Wrong alignment on FortActorComponent_StateDriven_GetInteractionString");
static_assert(sizeof(FortActorComponent_StateDriven_GetInteractionString) == 0x000028, "Wrong size on FortActorComponent_StateDriven_GetInteractionString");
static_assert(offsetof(FortActorComponent_StateDriven_GetInteractionString, InteractingPawn) == 0x000000, "Member 'FortActorComponent_StateDriven_GetInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_GetInteractionString, InteractionBeingAttempted) == 0x000008, "Member 'FortActorComponent_StateDriven_GetInteractionString::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(FortActorComponent_StateDriven_GetInteractionString, ReturnValue) == 0x000010, "Member 'FortActorComponent_StateDriven_GetInteractionString::ReturnValue' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.GetSlottedItemDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortActorComponent_StateDriven_GetSlottedItemDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_GetSlottedItemDisplayName) == 0x000008, "Wrong alignment on FortActorComponent_StateDriven_GetSlottedItemDisplayName");
static_assert(sizeof(FortActorComponent_StateDriven_GetSlottedItemDisplayName) == 0x000018, "Wrong size on FortActorComponent_StateDriven_GetSlottedItemDisplayName");
static_assert(offsetof(FortActorComponent_StateDriven_GetSlottedItemDisplayName, ReturnValue) == 0x000000, "Member 'FortActorComponent_StateDriven_GetSlottedItemDisplayName::ReturnValue' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.GetSlottedItemEntry
// 0x01A0 (0x01A0 - 0x0000)
struct FortActorComponent_StateDriven_GetSlottedItemEntry final
{
public:
	struct FFortItemEntry                         ReturnValue;                                       // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_GetSlottedItemEntry) == 0x000008, "Wrong alignment on FortActorComponent_StateDriven_GetSlottedItemEntry");
static_assert(sizeof(FortActorComponent_StateDriven_GetSlottedItemEntry) == 0x0001A0, "Wrong size on FortActorComponent_StateDriven_GetSlottedItemEntry");
static_assert(offsetof(FortActorComponent_StateDriven_GetSlottedItemEntry, ReturnValue) == 0x000000, "Member 'FortActorComponent_StateDriven_GetSlottedItemEntry::ReturnValue' has a wrong offset!");

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.PlayBurstGameplayCue
// 0x0004 (0x0004 - 0x0000)
struct FortActorComponent_StateDriven_PlayBurstGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorComponent_StateDriven_PlayBurstGameplayCue) == 0x000004, "Wrong alignment on FortActorComponent_StateDriven_PlayBurstGameplayCue");
static_assert(sizeof(FortActorComponent_StateDriven_PlayBurstGameplayCue) == 0x000004, "Wrong size on FortActorComponent_StateDriven_PlayBurstGameplayCue");
static_assert(offsetof(FortActorComponent_StateDriven_PlayBurstGameplayCue, GameplayCueTag) == 0x000000, "Member 'FortActorComponent_StateDriven_PlayBurstGameplayCue::GameplayCueTag' has a wrong offset!");

}

