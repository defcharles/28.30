#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotorcycleRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "MotorcycleRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class MotorcycleRuntime.FortMotorcycleVehicleAnimInstance
// 0x0070 (0x0690 - 0x0620)
#pragma pack(push, 0x1)
class alignas(0x10) UFortMotorcycleVehicleAnimInstance : public UFortVehicleAnimInstance
{
public:
	class AFortMotorcycleVehicle*                 MotorcycleVehicle;                                 // 0x0618(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               SwingArmRotation;                                  // 0x0620(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsInInventoryMode;                                // 0x0638(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPlayerAnimInstance_MotorcycleDriver* DriverAnimInstance;                                // 0x0640(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBikeParked;                                     // 0x0648(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBikeOn;                                         // 0x0649(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBikeStopping;                                   // 0x064A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReversing;                                      // 0x064B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalSpeed;                                        // 0x064C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSurfaceWater;                                   // 0x0650(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_651[0x3];                                      // 0x0651(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditiveAlpha;                                     // 0x0654(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRevving;                                        // 0x0658(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_659[0x3];                                      // 0x0659(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccelAlpha;                                        // 0x065C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsThrottling;                                     // 0x0660(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHonking;                                        // 0x0661(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSoloJumpTrickOutro;                             // 0x0662(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpTrickNone;                                  // 0x0663(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakeLeverAlpha;                                   // 0x0664(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExitFromLocomotion;                         // 0x0668(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateRuleFromRevvingToThrottle;                   // 0x0669(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayThrottleAnim;                           // 0x066A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateTransitionRuleToMovingLoop;                  // 0x066B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEarlyOutFromMovingStart;                          // 0x066C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStop;                                       // 0x066D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReverse;                                    // 0x066E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReverseStop;                                // 0x066F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStopThrottling;                             // 0x0670(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromJumpTrick;                                  // 0x0671(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSoloJumpTrick;                                  // 0x0672(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldJump;                                       // 0x0673(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x0674(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMotorcycleAirTrickType                   AirTrickType;                                      // 0x0675(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLandingInPlace;                                 // 0x0676(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateRuleFallingToMoving;                         // 0x0677(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpChargeFactor;                                  // 0x0678(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardSpeed;                                      // 0x067C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoppie;                                          // 0x0680(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBraking;                                        // 0x0681(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBrake;                                      // 0x0682(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEarlyOutBrakingOutro;                             // 0x0683(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldJumpTrick;                                  // 0x0684(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateTransitionRuleToReverseLoop;                 // 0x0685(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReverseNoFeet;                                  // 0x0686(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_687[0x1];                                      // 0x0687(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CollectConditionsFromDriver();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMotorcycleVehicleAnimInstance">();
	}
	static class UFortMotorcycleVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMotorcycleVehicleAnimInstance>();
	}
};
#pragma pack(pop)
static_assert(alignof(UFortMotorcycleVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortMotorcycleVehicleAnimInstance");
static_assert(sizeof(UFortMotorcycleVehicleAnimInstance) == 0x000690, "Wrong size on UFortMotorcycleVehicleAnimInstance");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, MotorcycleVehicle) == 0x000618, "Member 'UFortMotorcycleVehicleAnimInstance::MotorcycleVehicle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, SwingArmRotation) == 0x000620, "Member 'UFortMotorcycleVehicleAnimInstance::SwingArmRotation' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsInInventoryMode) == 0x000638, "Member 'UFortMotorcycleVehicleAnimInstance::bIsInInventoryMode' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, DriverAnimInstance) == 0x000640, "Member 'UFortMotorcycleVehicleAnimInstance::DriverAnimInstance' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsBikeParked) == 0x000648, "Member 'UFortMotorcycleVehicleAnimInstance::bIsBikeParked' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsBikeOn) == 0x000649, "Member 'UFortMotorcycleVehicleAnimInstance::bIsBikeOn' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsBikeStopping) == 0x00064A, "Member 'UFortMotorcycleVehicleAnimInstance::bIsBikeStopping' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsReversing) == 0x00064B, "Member 'UFortMotorcycleVehicleAnimInstance::bIsReversing' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, TotalSpeed) == 0x00064C, "Member 'UFortMotorcycleVehicleAnimInstance::TotalSpeed' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsSurfaceWater) == 0x000650, "Member 'UFortMotorcycleVehicleAnimInstance::bIsSurfaceWater' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, AdditiveAlpha) == 0x000654, "Member 'UFortMotorcycleVehicleAnimInstance::AdditiveAlpha' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsRevving) == 0x000658, "Member 'UFortMotorcycleVehicleAnimInstance::bIsRevving' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, AccelAlpha) == 0x00065C, "Member 'UFortMotorcycleVehicleAnimInstance::AccelAlpha' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsThrottling) == 0x000660, "Member 'UFortMotorcycleVehicleAnimInstance::bIsThrottling' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsHonking) == 0x000661, "Member 'UFortMotorcycleVehicleAnimInstance::bIsHonking' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsSoloJumpTrickOutro) == 0x000662, "Member 'UFortMotorcycleVehicleAnimInstance::bIsSoloJumpTrickOutro' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsJumpTrickNone) == 0x000663, "Member 'UFortMotorcycleVehicleAnimInstance::bIsJumpTrickNone' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, BrakeLeverAlpha) == 0x000664, "Member 'UFortMotorcycleVehicleAnimInstance::BrakeLeverAlpha' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bShouldExitFromLocomotion) == 0x000668, "Member 'UFortMotorcycleVehicleAnimInstance::bShouldExitFromLocomotion' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bStateRuleFromRevvingToThrottle) == 0x000669, "Member 'UFortMotorcycleVehicleAnimInstance::bStateRuleFromRevvingToThrottle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bShouldPlayThrottleAnim) == 0x00066A, "Member 'UFortMotorcycleVehicleAnimInstance::bShouldPlayThrottleAnim' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bStateTransitionRuleToMovingLoop) == 0x00066B, "Member 'UFortMotorcycleVehicleAnimInstance::bStateTransitionRuleToMovingLoop' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bEarlyOutFromMovingStart) == 0x00066C, "Member 'UFortMotorcycleVehicleAnimInstance::bEarlyOutFromMovingStart' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bShouldStop) == 0x00066D, "Member 'UFortMotorcycleVehicleAnimInstance::bShouldStop' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bShouldReverse) == 0x00066E, "Member 'UFortMotorcycleVehicleAnimInstance::bShouldReverse' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bShouldReverseStop) == 0x00066F, "Member 'UFortMotorcycleVehicleAnimInstance::bShouldReverseStop' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bShouldStopThrottling) == 0x000670, "Member 'UFortMotorcycleVehicleAnimInstance::bShouldStopThrottling' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsFromJumpTrick) == 0x000671, "Member 'UFortMotorcycleVehicleAnimInstance::bIsFromJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsSoloJumpTrick) == 0x000672, "Member 'UFortMotorcycleVehicleAnimInstance::bIsSoloJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bShouldJump) == 0x000673, "Member 'UFortMotorcycleVehicleAnimInstance::bShouldJump' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsMoving) == 0x000674, "Member 'UFortMotorcycleVehicleAnimInstance::bIsMoving' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, AirTrickType) == 0x000675, "Member 'UFortMotorcycleVehicleAnimInstance::AirTrickType' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsLandingInPlace) == 0x000676, "Member 'UFortMotorcycleVehicleAnimInstance::bIsLandingInPlace' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bStateRuleFallingToMoving) == 0x000677, "Member 'UFortMotorcycleVehicleAnimInstance::bStateRuleFallingToMoving' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, JumpChargeFactor) == 0x000678, "Member 'UFortMotorcycleVehicleAnimInstance::JumpChargeFactor' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, ForwardSpeed) == 0x00067C, "Member 'UFortMotorcycleVehicleAnimInstance::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bStoppie) == 0x000680, "Member 'UFortMotorcycleVehicleAnimInstance::bStoppie' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsBraking) == 0x000681, "Member 'UFortMotorcycleVehicleAnimInstance::bIsBraking' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bShouldBrake) == 0x000682, "Member 'UFortMotorcycleVehicleAnimInstance::bShouldBrake' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bEarlyOutBrakingOutro) == 0x000683, "Member 'UFortMotorcycleVehicleAnimInstance::bEarlyOutBrakingOutro' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bShouldJumpTrick) == 0x000684, "Member 'UFortMotorcycleVehicleAnimInstance::bShouldJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bStateTransitionRuleToReverseLoop) == 0x000685, "Member 'UFortMotorcycleVehicleAnimInstance::bStateTransitionRuleToReverseLoop' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleAnimInstance, bIsReverseNoFeet) == 0x000686, "Member 'UFortMotorcycleVehicleAnimInstance::bIsReverseNoFeet' has a wrong offset!");

// Class MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleRider
// 0x0410 (0x0880 - 0x0470)
class UFortPlayerAnimInstance_MotorcycleRider : public UFortBaseLayerAnimInstance
{
public:
	class AFortMotorcycleVehicle*                 Motorcycle;                                        // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMotorcycleVehicleAnimInstance*     MotorcycleAnimInstance;                            // 0x0470(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAnimInput_Motorcycle              MotorcycleInput;                                   // 0x0478(0x0054)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        FortPlayerPawn;                                    // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldVelocity;                                     // 0x04D8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalVelocity;                                     // 0x04F0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandIKAlpha;                                  // 0x0508(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftHandIKAlpha;                                   // 0x050C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed2D;                                           // 0x0510(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCardinalDirection                        LocomotionCardinalDirection;                       // 0x0514(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCardinalDirection                        PrePivotCardinalDirection;                         // 0x0515(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShouldPlayJogPivotTransition : 1;                 // 0x0516(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPivotTransitionDoOnceTriggered : 1;               // 0x0516(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsJumping : 1;                                    // 0x0516(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsReloading : 1;                                  // 0x0516(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_517[0x1];                                      // 0x0517(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RiderCatchupRotation;                              // 0x0518(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_530[0x8];                                      // 0x0530(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RiderZDisplacement;                                // 0x0538(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderDisplacementDampUpFactor;                     // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderDisplacementDampDownFactor;                   // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderDisplacementLandingFallDistanceThreshold;     // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderMinDisplacement;                              // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderMaxDisplacement;                              // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderDisplacementRampPerSecond;                    // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderRotationInterpSpeed;                          // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAnimInput_VelocityImpact          VelocityImpact;                                    // 0x0558(0x00F0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpactDisplacement;                                // 0x0648(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsSteerAngle;                                     // 0x0660(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanAngle;                                         // 0x0664(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallDistanceValue;                                 // 0x0668(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66C[0x4];                                      // 0x066C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FootTraceLocation;                                 // 0x0670(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootTraceSideOffset;                               // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFootLocationDistance;                           // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFootTrace;                                     // 0x0690(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAir;                                            // 0x0691(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInRollAngleThreshold;                           // 0x0692(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDriveStarting;                                  // 0x0693(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_694[0x4];                                      // 0x0694(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocalLeftOffset;                                   // 0x0698(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosLeft;                                      // 0x06B0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotLeftOffset;                                // 0x06C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotLeft;                                      // 0x06E0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LocalRightOffset;                                  // 0x06F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosRight;                                     // 0x0710(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LocalRotRightOffset;                               // 0x0728(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotRight;                                     // 0x0740(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsSteeringRotating;                               // 0x0758(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStopped;                                        // 0x0759(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIdle;                                           // 0x075A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75B[0x1];                                      // 0x075B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IdleSpeedKmh;                                      // 0x075C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlowingDown;                                    // 0x0760(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrivingFast;                                    // 0x0761(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurningRightHard;                               // 0x0762(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurningLeftHard;                                // 0x0763(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBraking;                                        // 0x0764(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_765[0x1];                                      // 0x0765(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsBoosting;                                       // 0x0766(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpTrick;                                      // 0x0767(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpPlayRate;                                      // 0x0768(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpFlipping;                                   // 0x076C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldEnableAO;                                   // 0x076D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBodyDragging;                                   // 0x076E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76F[0x1];                                      // 0x076F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallDistanceJumpingThreshold;                      // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallDistanceJumpTrickThreshold;                    // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollAngleThreshold;                                // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartSpeedThreshold;                               // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowingSpeedThreshold;                             // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastSpeedThreshold;                                // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeltaThreshold;                             // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerHardAngleThreshold;                           // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundTraceUpOffset;                               // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundTraceLength;                                 // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              JumpPlayRateInRange;                               // 0x0798(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              JumpPlayRateOutRange;                              // 0x07A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpChargeFactor;                                  // 0x07B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChargingJump;                                   // 0x07BC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMotorcycleJumping;                              // 0x07BD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMotorcycleLaunchedJump;                           // 0x07BE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWheelie;                                          // 0x07BF(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoppie;                                          // 0x07C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMotorcycleAirTrickType                   AirTrickType;                                      // 0x07C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpingAndNotRolling;                           // 0x07C2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnGroundAndNotRolling;                          // 0x07C3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnGroundAndBoosting;                            // 0x07C4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayPivotOnGroundAndNotBoosting;                  // 0x07C5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPowerSliding;                                   // 0x07C6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C7[0x1];                                      // 0x07C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PowerSlideSteeringAngleThreshold;                  // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideSpeedThreshold;                          // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D0[0x8];                                      // 0x07D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LandStartPosInRange;                               // 0x07D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LandStartPosOutRange;                              // 0x07E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandStartPosition;                                 // 0x07F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPawnStandUp;                                // 0x07FC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSmoothingYaw;                                   // 0x07FD(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7FE[0x2];                                      // 0x07FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimPitch;                                          // 0x0800(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYaw;                                            // 0x0804(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawLastFrame;                                   // 0x0808(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawSmoothed;                                    // 0x080C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyAimYaw;                                        // 0x0810(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeBodyAimYaw;                                // 0x0814(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardSpeed;                                      // 0x0818(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousForwardSpeed;                              // 0x081C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalSpeed;                                        // 0x0820(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReversing;                                      // 0x0824(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x0825(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAir;                                          // 0x0826(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingConsumable;                                // 0x0827(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedAnimRelevancyData               IntroCachedTime;                                   // 0x0828(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StoppieLandTime;                                   // 0x083C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayHitReact;                               // 0x0840(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayingMontage;                                 // 0x0841(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_842[0x2];                                      // 0x0842(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VehiclePitch;                                      // 0x0844(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleRoll;                                       // 0x0848(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84C[0x4];                                      // 0x084C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MeleeTwistRot;                                     // 0x0850(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bStateTransitionRuleToMovingLoop;                  // 0x0868(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_869[0x3];                                      // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpperBodyAdditiveAlpha;                            // 0x086C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyAdditiveStrength;                         // 0x0870(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingNoisePlayRate;                               // 0x0874(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFemale;                                         // 0x0878(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimNotify_JumpEntered();
	void CalculateNoiseAlpha();
	void CollapsedAimYawSmoothed(float DeltaSeconds);
	void HandleCancelChargingJump();
	void HandleChargingJump(const float InJumpChargeFactor);
	void HandleFinishAirTrick();
	void HandleJump(const float InJumpChargeFactor);
	void HandleReleaseStoppie();
	void HandleReleaseWheelie();
	void HandleStartAirTrick(const EFortMotorcycleAirTrickType TrickType);
	void HandleStartChargingJump();
	void HandleStartStoppie();
	void HandleStartWheelie();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAnimInstance_MotorcycleRider">();
	}
	static class UFortPlayerAnimInstance_MotorcycleRider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAnimInstance_MotorcycleRider>();
	}
};
static_assert(alignof(UFortPlayerAnimInstance_MotorcycleRider) == 0x000010, "Wrong alignment on UFortPlayerAnimInstance_MotorcycleRider");
static_assert(sizeof(UFortPlayerAnimInstance_MotorcycleRider) == 0x000880, "Wrong size on UFortPlayerAnimInstance_MotorcycleRider");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, Motorcycle) == 0x000468, "Member 'UFortPlayerAnimInstance_MotorcycleRider::Motorcycle' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, MotorcycleAnimInstance) == 0x000470, "Member 'UFortPlayerAnimInstance_MotorcycleRider::MotorcycleAnimInstance' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, MotorcycleInput) == 0x000478, "Member 'UFortPlayerAnimInstance_MotorcycleRider::MotorcycleInput' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, FortPlayerPawn) == 0x0004D0, "Member 'UFortPlayerAnimInstance_MotorcycleRider::FortPlayerPawn' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, WorldVelocity) == 0x0004D8, "Member 'UFortPlayerAnimInstance_MotorcycleRider::WorldVelocity' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LocalVelocity) == 0x0004F0, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LocalVelocity' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RightHandIKAlpha) == 0x000508, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RightHandIKAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LeftHandIKAlpha) == 0x00050C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LeftHandIKAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, Speed2D) == 0x000510, "Member 'UFortPlayerAnimInstance_MotorcycleRider::Speed2D' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LocomotionCardinalDirection) == 0x000514, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LocomotionCardinalDirection' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, PrePivotCardinalDirection) == 0x000515, "Member 'UFortPlayerAnimInstance_MotorcycleRider::PrePivotCardinalDirection' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RiderCatchupRotation) == 0x000518, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RiderCatchupRotation' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RiderZDisplacement) == 0x000538, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RiderZDisplacement' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RiderDisplacementDampUpFactor) == 0x00053C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RiderDisplacementDampUpFactor' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RiderDisplacementDampDownFactor) == 0x000540, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RiderDisplacementDampDownFactor' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RiderDisplacementLandingFallDistanceThreshold) == 0x000544, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RiderDisplacementLandingFallDistanceThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RiderMinDisplacement) == 0x000548, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RiderMinDisplacement' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RiderMaxDisplacement) == 0x00054C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RiderMaxDisplacement' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RiderDisplacementRampPerSecond) == 0x000550, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RiderDisplacementRampPerSecond' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RiderRotationInterpSpeed) == 0x000554, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RiderRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, VelocityImpact) == 0x000558, "Member 'UFortPlayerAnimInstance_MotorcycleRider::VelocityImpact' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, ImpactDisplacement) == 0x000648, "Member 'UFortPlayerAnimInstance_MotorcycleRider::ImpactDisplacement' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, AbsSteerAngle) == 0x000660, "Member 'UFortPlayerAnimInstance_MotorcycleRider::AbsSteerAngle' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LeanAngle) == 0x000664, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LeanAngle' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, FallDistanceValue) == 0x000668, "Member 'UFortPlayerAnimInstance_MotorcycleRider::FallDistanceValue' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, FootTraceLocation) == 0x000670, "Member 'UFortPlayerAnimInstance_MotorcycleRider::FootTraceLocation' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, FootTraceSideOffset) == 0x000688, "Member 'UFortPlayerAnimInstance_MotorcycleRider::FootTraceSideOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, MaxFootLocationDistance) == 0x00068C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::MaxFootLocationDistance' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bHasFootTrace) == 0x000690, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bHasFootTrace' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bInAir) == 0x000691, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bInAir' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsInRollAngleThreshold) == 0x000692, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsInRollAngleThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsDriveStarting) == 0x000693, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsDriveStarting' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LocalLeftOffset) == 0x000698, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LocalLeftOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, WorldPosLeft) == 0x0006B0, "Member 'UFortPlayerAnimInstance_MotorcycleRider::WorldPosLeft' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LocalRotLeftOffset) == 0x0006C8, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LocalRotLeftOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, WorldRotLeft) == 0x0006E0, "Member 'UFortPlayerAnimInstance_MotorcycleRider::WorldRotLeft' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LocalRightOffset) == 0x0006F8, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LocalRightOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, WorldPosRight) == 0x000710, "Member 'UFortPlayerAnimInstance_MotorcycleRider::WorldPosRight' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LocalRotRightOffset) == 0x000728, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LocalRotRightOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, WorldRotRight) == 0x000740, "Member 'UFortPlayerAnimInstance_MotorcycleRider::WorldRotRight' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsSteeringRotating) == 0x000758, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsSteeringRotating' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsStopped) == 0x000759, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsStopped' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsIdle) == 0x00075A, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsIdle' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, IdleSpeedKmh) == 0x00075C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::IdleSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsSlowingDown) == 0x000760, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsSlowingDown' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsDrivingFast) == 0x000761, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsDrivingFast' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsTurningRightHard) == 0x000762, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsTurningRightHard' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsTurningLeftHard) == 0x000763, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsTurningLeftHard' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsBraking) == 0x000764, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsBraking' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsBoosting) == 0x000766, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsBoosting' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsJumpTrick) == 0x000767, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, JumpPlayRate) == 0x000768, "Member 'UFortPlayerAnimInstance_MotorcycleRider::JumpPlayRate' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsJumpFlipping) == 0x00076C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsJumpFlipping' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bShouldEnableAO) == 0x00076D, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bShouldEnableAO' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsBodyDragging) == 0x00076E, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsBodyDragging' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, FallDistanceJumpingThreshold) == 0x000770, "Member 'UFortPlayerAnimInstance_MotorcycleRider::FallDistanceJumpingThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, FallDistanceJumpTrickThreshold) == 0x000774, "Member 'UFortPlayerAnimInstance_MotorcycleRider::FallDistanceJumpTrickThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, RollAngleThreshold) == 0x000778, "Member 'UFortPlayerAnimInstance_MotorcycleRider::RollAngleThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, StartSpeedThreshold) == 0x00077C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::StartSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, SlowingSpeedThreshold) == 0x000780, "Member 'UFortPlayerAnimInstance_MotorcycleRider::SlowingSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, FastSpeedThreshold) == 0x000784, "Member 'UFortPlayerAnimInstance_MotorcycleRider::FastSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, BrakingDeltaThreshold) == 0x000788, "Member 'UFortPlayerAnimInstance_MotorcycleRider::BrakingDeltaThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, SteerHardAngleThreshold) == 0x00078C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::SteerHardAngleThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, GroundTraceUpOffset) == 0x000790, "Member 'UFortPlayerAnimInstance_MotorcycleRider::GroundTraceUpOffset' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, GroundTraceLength) == 0x000794, "Member 'UFortPlayerAnimInstance_MotorcycleRider::GroundTraceLength' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, JumpPlayRateInRange) == 0x000798, "Member 'UFortPlayerAnimInstance_MotorcycleRider::JumpPlayRateInRange' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, JumpPlayRateOutRange) == 0x0007A8, "Member 'UFortPlayerAnimInstance_MotorcycleRider::JumpPlayRateOutRange' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, JumpChargeFactor) == 0x0007B8, "Member 'UFortPlayerAnimInstance_MotorcycleRider::JumpChargeFactor' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsChargingJump) == 0x0007BC, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsChargingJump' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsMotorcycleJumping) == 0x0007BD, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsMotorcycleJumping' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bMotorcycleLaunchedJump) == 0x0007BE, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bMotorcycleLaunchedJump' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bWheelie) == 0x0007BF, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bWheelie' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bStoppie) == 0x0007C0, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bStoppie' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, AirTrickType) == 0x0007C1, "Member 'UFortPlayerAnimInstance_MotorcycleRider::AirTrickType' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsJumpingAndNotRolling) == 0x0007C2, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsJumpingAndNotRolling' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsOnGroundAndNotRolling) == 0x0007C3, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsOnGroundAndNotRolling' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsOnGroundAndBoosting) == 0x0007C4, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsOnGroundAndBoosting' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bPlayPivotOnGroundAndNotBoosting) == 0x0007C5, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bPlayPivotOnGroundAndNotBoosting' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsPowerSliding) == 0x0007C6, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsPowerSliding' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, PowerSlideSteeringAngleThreshold) == 0x0007C8, "Member 'UFortPlayerAnimInstance_MotorcycleRider::PowerSlideSteeringAngleThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, PowerSlideSpeedThreshold) == 0x0007CC, "Member 'UFortPlayerAnimInstance_MotorcycleRider::PowerSlideSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LandStartPosInRange) == 0x0007D8, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LandStartPosInRange' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LandStartPosOutRange) == 0x0007E8, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LandStartPosOutRange' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, LandStartPosition) == 0x0007F8, "Member 'UFortPlayerAnimInstance_MotorcycleRider::LandStartPosition' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bShouldPawnStandUp) == 0x0007FC, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bShouldPawnStandUp' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsSmoothingYaw) == 0x0007FD, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsSmoothingYaw' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, AimPitch) == 0x000800, "Member 'UFortPlayerAnimInstance_MotorcycleRider::AimPitch' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, AimYaw) == 0x000804, "Member 'UFortPlayerAnimInstance_MotorcycleRider::AimYaw' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, AimYawLastFrame) == 0x000808, "Member 'UFortPlayerAnimInstance_MotorcycleRider::AimYawLastFrame' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, AimYawSmoothed) == 0x00080C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::AimYawSmoothed' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, BodyAimYaw) == 0x000810, "Member 'UFortPlayerAnimInstance_MotorcycleRider::BodyAimYaw' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, NegativeBodyAimYaw) == 0x000814, "Member 'UFortPlayerAnimInstance_MotorcycleRider::NegativeBodyAimYaw' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, ForwardSpeed) == 0x000818, "Member 'UFortPlayerAnimInstance_MotorcycleRider::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, PreviousForwardSpeed) == 0x00081C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::PreviousForwardSpeed' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, TotalSpeed) == 0x000820, "Member 'UFortPlayerAnimInstance_MotorcycleRider::TotalSpeed' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsReversing) == 0x000824, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsReversing' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsMoving) == 0x000825, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsMoving' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsInAir) == 0x000826, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsInAir' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsUsingConsumable) == 0x000827, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsUsingConsumable' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, IntroCachedTime) == 0x000828, "Member 'UFortPlayerAnimInstance_MotorcycleRider::IntroCachedTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, StoppieLandTime) == 0x00083C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::StoppieLandTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bShouldPlayHitReact) == 0x000840, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bShouldPlayHitReact' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsPlayingMontage) == 0x000841, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsPlayingMontage' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, VehiclePitch) == 0x000844, "Member 'UFortPlayerAnimInstance_MotorcycleRider::VehiclePitch' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, VehicleRoll) == 0x000848, "Member 'UFortPlayerAnimInstance_MotorcycleRider::VehicleRoll' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, MeleeTwistRot) == 0x000850, "Member 'UFortPlayerAnimInstance_MotorcycleRider::MeleeTwistRot' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bStateTransitionRuleToMovingLoop) == 0x000868, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bStateTransitionRuleToMovingLoop' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, UpperBodyAdditiveAlpha) == 0x00086C, "Member 'UFortPlayerAnimInstance_MotorcycleRider::UpperBodyAdditiveAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, UpperBodyAdditiveStrength) == 0x000870, "Member 'UFortPlayerAnimInstance_MotorcycleRider::UpperBodyAdditiveStrength' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, MovingNoisePlayRate) == 0x000874, "Member 'UFortPlayerAnimInstance_MotorcycleRider::MovingNoisePlayRate' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleRider, bIsFemale) == 0x000878, "Member 'UFortPlayerAnimInstance_MotorcycleRider::bIsFemale' has a wrong offset!");

// Class MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleDriver
// 0x00C0 (0x0940 - 0x0880)
class UFortPlayerAnimInstance_MotorcycleDriver : public UFortPlayerAnimInstance_MotorcycleRider
{
public:
	bool                                          bHasMoved;                                         // 0x0880(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_881[0x3];                                      // 0x0881(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteeringRotation;                                  // 0x0884(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInInventoryMode;                                // 0x0888(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldJump;                                       // 0x0889(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAllowHeadAO;                                // 0x088A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88B[0x1];                                      // 0x088B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FeetDragPlayRate;                                  // 0x088C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldJumpCharge;                                 // 0x0890(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLandingInPlace;                                 // 0x0891(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateRuleFallingToMoving;                         // 0x0892(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplyChargingNoise;                         // 0x0893(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTimer;                                         // 0x0894(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAllowJump;                                  // 0x0898(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSurfaceWater;                                   // 0x0899(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlopeAlphaShouldIncrease;                         // 0x089A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89B[0x1];                                      // 0x089B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlopeAlpha;                                        // 0x089C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPassenger;                                     // 0x08A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOneHandedDualWield;                             // 0x08A1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplyBodyTwistForMelee;                     // 0x08A2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMelee;                                          // 0x08A3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRangedOrConsumable;                             // 0x08A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplyFeetNoise;                             // 0x08A5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A6[0x2];                                      // 0x08A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedFallingStartTime;                            // 0x08A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFalling;                                       // 0x08AC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRevving;                                        // 0x08AD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8AE[0x2];                                      // 0x08AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StoppieLeanAlpha;                                  // 0x08B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayMovingJump;                             // 0x08B4(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasJumpTrickLeftOrRight;                          // 0x08B5(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromJumpTrick;                                  // 0x08B6(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAllowMovingJumpLand;                        // 0x08B7(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateTransitionRuleToReverseLoop;                 // 0x08B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReverseNoFeet;                                  // 0x08B9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8BA[0x2];                                      // 0x08BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkSPlayRate;                                     // 0x08BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanSpeed;                                         // 0x08C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanAlpha;                                         // 0x08C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCombatTransition;                               // 0x08C8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBrake;                                      // 0x08C9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExitFromLocomotion;                         // 0x08CA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEarlyOutBrakingOutro;                             // 0x08CB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightInput;                                     // 0x08CC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayReverseOutro;                           // 0x08CD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplyHipSuspension;                         // 0x08CE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefaultJumpTrick;                               // 0x08CF(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeftJumpTrick;                                  // 0x08D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightJumpTrick;                                 // 0x08D1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNoneJumpTrick;                                  // 0x08D2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSoloJumpTrick;                                  // 0x08D3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExitFromDefaultJumpTrick;                   // 0x08D4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEarlyOutFromMoveStart;                            // 0x08D5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStop;                                       // 0x08D6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D7[0x1];                                      // 0x08D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedTrickIntroTime;                              // 0x08D8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayJumpTrickIntroLeft;                     // 0x08DC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayJumpTrickIntroRight;                    // 0x08DD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateRuleNeutralToJumpTrickLeft;                  // 0x08DE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateRuleNeutralToJumpTrickRight;                 // 0x08DF(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldJumpTrick;                                  // 0x08E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasJumpChargeStarted;                             // 0x08E1(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpTrickLanding;                               // 0x08E2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSoloJumping;                                   // 0x08E3(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasStoppieLanding;                                // 0x08E4(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E5[0x3];                                      // 0x08E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpperBodyBlendAlpha;                               // 0x08E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoredJumpTrickIntroPosition;                      // 0x08EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTrickIntroPosition;                            // 0x08F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpChargeLegIKAlpha;                              // 0x08F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ScytheMontage;                                     // 0x08F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JumpTrickIntroPositionCurveName;                   // 0x0910(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedAnimRelevancyData               FallStartCachedTime;                               // 0x0914(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimRelevancyData               TrickCachedTime;                                   // 0x0928(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_93C[0x4];                                      // 0x093C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAnimInstance_MotorcycleDriver">();
	}
	static class UFortPlayerAnimInstance_MotorcycleDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAnimInstance_MotorcycleDriver>();
	}
};
static_assert(alignof(UFortPlayerAnimInstance_MotorcycleDriver) == 0x000010, "Wrong alignment on UFortPlayerAnimInstance_MotorcycleDriver");
static_assert(sizeof(UFortPlayerAnimInstance_MotorcycleDriver) == 0x000940, "Wrong size on UFortPlayerAnimInstance_MotorcycleDriver");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bHasMoved) == 0x000880, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bHasMoved' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, SteeringRotation) == 0x000884, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::SteeringRotation' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsInInventoryMode) == 0x000888, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsInInventoryMode' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldJump) == 0x000889, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldJump' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldAllowHeadAO) == 0x00088A, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldAllowHeadAO' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, FeetDragPlayRate) == 0x00088C, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::FeetDragPlayRate' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldJumpCharge) == 0x000890, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldJumpCharge' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsLandingInPlace) == 0x000891, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsLandingInPlace' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bStateRuleFallingToMoving) == 0x000892, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bStateRuleFallingToMoving' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldApplyChargingNoise) == 0x000893, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldApplyChargingNoise' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, JumpTimer) == 0x000894, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::JumpTimer' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldAllowJump) == 0x000898, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldAllowJump' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsSurfaceWater) == 0x000899, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsSurfaceWater' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bSlopeAlphaShouldIncrease) == 0x00089A, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bSlopeAlphaShouldIncrease' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, SlopeAlpha) == 0x00089C, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::SlopeAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bHasPassenger) == 0x0008A0, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bHasPassenger' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsOneHandedDualWield) == 0x0008A1, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsOneHandedDualWield' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldApplyBodyTwistForMelee) == 0x0008A2, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldApplyBodyTwistForMelee' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsMelee) == 0x0008A3, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsMelee' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsRangedOrConsumable) == 0x0008A4, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsRangedOrConsumable' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldApplyFeetNoise) == 0x0008A5, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldApplyFeetNoise' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, CachedFallingStartTime) == 0x0008A8, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::CachedFallingStartTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bWasFalling) == 0x0008AC, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bWasFalling' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsRevving) == 0x0008AD, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsRevving' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, StoppieLeanAlpha) == 0x0008B0, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::StoppieLeanAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldPlayMovingJump) == 0x0008B4, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldPlayMovingJump' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bWasJumpTrickLeftOrRight) == 0x0008B5, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bWasJumpTrickLeftOrRight' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsFromJumpTrick) == 0x0008B6, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsFromJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldAllowMovingJumpLand) == 0x0008B7, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldAllowMovingJumpLand' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bStateTransitionRuleToReverseLoop) == 0x0008B8, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bStateTransitionRuleToReverseLoop' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsReverseNoFeet) == 0x0008B9, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsReverseNoFeet' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, WalkSPlayRate) == 0x0008BC, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::WalkSPlayRate' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, LeanSpeed) == 0x0008C0, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::LeanSpeed' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, LeanAlpha) == 0x0008C4, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::LeanAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsCombatTransition) == 0x0008C8, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsCombatTransition' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldBrake) == 0x0008C9, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldBrake' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldExitFromLocomotion) == 0x0008CA, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldExitFromLocomotion' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bEarlyOutBrakingOutro) == 0x0008CB, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bEarlyOutBrakingOutro' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsRightInput) == 0x0008CC, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsRightInput' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldPlayReverseOutro) == 0x0008CD, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldPlayReverseOutro' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldApplyHipSuspension) == 0x0008CE, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldApplyHipSuspension' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsDefaultJumpTrick) == 0x0008CF, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsDefaultJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsLeftJumpTrick) == 0x0008D0, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsLeftJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsRightJumpTrick) == 0x0008D1, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsRightJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsNoneJumpTrick) == 0x0008D2, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsNoneJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsSoloJumpTrick) == 0x0008D3, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsSoloJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldExitFromDefaultJumpTrick) == 0x0008D4, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldExitFromDefaultJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bEarlyOutFromMoveStart) == 0x0008D5, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bEarlyOutFromMoveStart' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldStop) == 0x0008D6, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldStop' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, CachedTrickIntroTime) == 0x0008D8, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::CachedTrickIntroTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldPlayJumpTrickIntroLeft) == 0x0008DC, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldPlayJumpTrickIntroLeft' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldPlayJumpTrickIntroRight) == 0x0008DD, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldPlayJumpTrickIntroRight' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bStateRuleNeutralToJumpTrickLeft) == 0x0008DE, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bStateRuleNeutralToJumpTrickLeft' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bStateRuleNeutralToJumpTrickRight) == 0x0008DF, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bStateRuleNeutralToJumpTrickRight' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bShouldJumpTrick) == 0x0008E0, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bShouldJumpTrick' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bHasJumpChargeStarted) == 0x0008E1, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bHasJumpChargeStarted' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bIsJumpTrickLanding) == 0x0008E2, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bIsJumpTrickLanding' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bWasSoloJumping) == 0x0008E3, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bWasSoloJumping' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, bWasStoppieLanding) == 0x0008E4, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::bWasStoppieLanding' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, UpperBodyBlendAlpha) == 0x0008E8, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::UpperBodyBlendAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, StoredJumpTrickIntroPosition) == 0x0008EC, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::StoredJumpTrickIntroPosition' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, JumpTrickIntroPosition) == 0x0008F0, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::JumpTrickIntroPosition' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, JumpChargeLegIKAlpha) == 0x0008F4, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::JumpChargeLegIKAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, ScytheMontage) == 0x0008F8, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::ScytheMontage' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, JumpTrickIntroPositionCurveName) == 0x000910, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::JumpTrickIntroPositionCurveName' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, FallStartCachedTime) == 0x000914, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::FallStartCachedTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcycleDriver, TrickCachedTime) == 0x000928, "Member 'UFortPlayerAnimInstance_MotorcycleDriver::TrickCachedTime' has a wrong offset!");

// Class MotorcycleRuntime.FortPlayerAnimInstance_MotorcyclePassenger
// 0x0050 (0x08D0 - 0x0880)
class UFortPlayerAnimInstance_MotorcyclePassenger final : public UFortPlayerAnimInstance_MotorcycleRider
{
public:
	class UFortPlayerAnimInstance_MotorcycleDriver* DriverAnimInstance;                                // 0x0880(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDriver;                                        // 0x0888(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDriverJumping;                                  // 0x0889(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDriverInventoryMode;                            // 0x088A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSeatedAction;                                   // 0x088B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsThrowingConsumable;                             // 0x088C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEarlyOutStoppieOutro;                             // 0x088D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88E[0x2];                                      // 0x088E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RunForwardAlpha;                                   // 0x0890(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimFWD;                                           // 0x0894(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimBWD;                                           // 0x0895(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimLFT;                                           // 0x0896(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimRGT;                                           // 0x0897(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimFWDDeltaAngleDegrees;                           // 0x0898(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimBWDDeltaAngleDegrees;                           // 0x089C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimLFTDeltaAngleDegrees;                           // 0x08A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimRGTDeltaAngleDegrees;                           // 0x08A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldJump;                                       // 0x08A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldApplySlopeCorrection;                       // 0x08A9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExitFromLocomotion;                         // 0x08AA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8AB[0x1];                                      // 0x08AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedAnimRelevancyData               JumpIntroCachedTime;                               // 0x08AC(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CachedJumpIntroTime;                               // 0x08C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C4[0xC];                                      // 0x08C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerAnimInstance_MotorcyclePassenger">();
	}
	static class UFortPlayerAnimInstance_MotorcyclePassenger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerAnimInstance_MotorcyclePassenger>();
	}
};
static_assert(alignof(UFortPlayerAnimInstance_MotorcyclePassenger) == 0x000010, "Wrong alignment on UFortPlayerAnimInstance_MotorcyclePassenger");
static_assert(sizeof(UFortPlayerAnimInstance_MotorcyclePassenger) == 0x0008D0, "Wrong size on UFortPlayerAnimInstance_MotorcyclePassenger");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, DriverAnimInstance) == 0x000880, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::DriverAnimInstance' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bHasDriver) == 0x000888, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bHasDriver' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bIsDriverJumping) == 0x000889, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bIsDriverJumping' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bIsDriverInventoryMode) == 0x00088A, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bIsDriverInventoryMode' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bIsSeatedAction) == 0x00088B, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bIsSeatedAction' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bIsThrowingConsumable) == 0x00088C, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bIsThrowingConsumable' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bEarlyOutStoppieOutro) == 0x00088D, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bEarlyOutStoppieOutro' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, RunForwardAlpha) == 0x000890, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::RunForwardAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bAimFWD) == 0x000894, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bAimFWD' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bAimBWD) == 0x000895, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bAimBWD' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bAimLFT) == 0x000896, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bAimLFT' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bAimRGT) == 0x000897, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bAimRGT' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, AimFWDDeltaAngleDegrees) == 0x000898, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::AimFWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, AimBWDDeltaAngleDegrees) == 0x00089C, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::AimBWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, AimLFTDeltaAngleDegrees) == 0x0008A0, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::AimLFTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, AimRGTDeltaAngleDegrees) == 0x0008A4, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::AimRGTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bShouldJump) == 0x0008A8, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bShouldJump' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bShouldApplySlopeCorrection) == 0x0008A9, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bShouldApplySlopeCorrection' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, bShouldExitFromLocomotion) == 0x0008AA, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::bShouldExitFromLocomotion' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, JumpIntroCachedTime) == 0x0008AC, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::JumpIntroCachedTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerAnimInstance_MotorcyclePassenger, CachedJumpIntroTime) == 0x0008C0, "Member 'UFortPlayerAnimInstance_MotorcyclePassenger::CachedJumpIntroTime' has a wrong offset!");

// Class MotorcycleRuntime.FortCameraMode_Motorcycle
// 0x0000 (0x1BC0 - 0x1BC0)
class UFortCameraMode_Motorcycle final : public UFortCameraMode_AthenaVehicle
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_Motorcycle">();
	}
	static class UFortCameraMode_Motorcycle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_Motorcycle>();
	}
};
static_assert(alignof(UFortCameraMode_Motorcycle) == 0x000010, "Wrong alignment on UFortCameraMode_Motorcycle");
static_assert(sizeof(UFortCameraMode_Motorcycle) == 0x001BC0, "Wrong size on UFortCameraMode_Motorcycle");

// Class MotorcycleRuntime.FortMotorcycleVehicle
// 0x0460 (0x23F0 - 0x1F90)
class AFortMotorcycleVehicle : public AFortAthenaSKMotorVehicle
{
public:
	TMulticastInlineDelegate<void()>              OnStartChargingJumpDelegate;                       // 0x1F90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCancelChargingJumpDelegate;                      // 0x1FA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float JumpChargeFactor)> OnJumpDelegate;                                    // 0x1FB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float JumpChargeFactor)> OnChargingJumpDelegate;                            // 0x1FC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EFortMotorcycleAirTrickType TrickType)> OnStartAirTrickDelegate;                           // 0x1FD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishAirTrickDelegate;                          // 0x1FE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStartWheelieDelegate;                            // 0x1FF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReleaseWheelieDelegate;                          // 0x2000(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLandWheelieDelegate;                             // 0x2010(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFailWheelieDelegate;                             // 0x2020(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStartStoppieDelegate;                            // 0x2030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReleaseStoppieDelegate;                          // 0x2040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLandStoppieDelegate;                             // 0x2050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsInInventoryMode)> OnInventoryModeChangedDelegate;                    // 0x2060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsSuperSliding)> OnSuperSlidingChangedDelegate;                     // 0x2070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode_AthenaVehicle> InventoryCameraModeClass;                          // 0x2080(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode_AthenaVehicle> InventoryCameraModeClassADS;                       // 0x2088(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode_AthenaVehicle> PassengerCameraModeClass;                          // 0x2090(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode>            PassengerCameraModeClassADS;                       // 0x2098(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMotorcycleVehicleConfigs*          FortMotorcycleVehicleConfigs;                      // 0x20A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RearAxleSocket;                                    // 0x20A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20AC[0x4];                                     // 0x20AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActionDefForUI>                ActionDefForUI;                                    // 0x20B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SwingArmRotation;                                  // 0x20C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C4[0x7C];                                    // 0x20C4(0x007C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BoostShapeIndices;                                 // 0x2140(0x0010)(Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsBoostAttacking;                                 // 0x2150(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2151[0xF];                                     // 0x2151(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	EFortMotorcycleAirTrickType                   CachedTrickType;                                   // 0x2160(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHadPassengerAtTrickStart;                         // 0x2161(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2162[0x36];                                    // 0x2162(0x0036)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PassengerADSSockets;                               // 0x2198(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        PassengerADSRelativeOffsets;                       // 0x21A8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      CachedNiagaraComponentRoadAndExhaust;              // 0x21B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustNiagaraComponentName;                // 0x21C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustVehicleSpeedName;                    // 0x21D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustSlideDirectionName;                  // 0x21D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustMinSpeedForDust;                     // 0x21D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustRearName;                        // 0x21DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustColorLerpName;                   // 0x21E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustColorLerp;                       // 0x21E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustDustAlphaMultiplierName;             // 0x21E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustAlphaMultiplier;                 // 0x21EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustPeelOutColorIndexName;               // 0x21F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustPeelOutRearName;                     // 0x21F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustIsPeelOutOnRoadName;                 // 0x21F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustIsPeelOutOnRoadRewindName;           // 0x21FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustIsInAirName;                         // 0x2200(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RoadAndExhaustCameraDirtGameplayCueTag;            // 0x2204(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RoadAndExhaustCameraWaterGameplayCueTag;           // 0x2208(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_220C[0x4];                                     // 0x220C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      RoadAndExhaustSurfaceTypeArrayForFX;               // 0x2210(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class ULegacyCameraShake*                     DriverCameraShakeInstance;                         // 0x2220(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULegacyCameraShake*                     AcceleratingCameraShakeInstance;                   // 0x2228(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2230[0x8];                                     // 0x2230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RoadAndExhaustHeadlightsName;                      // 0x2238(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RoadAndExhaustBrakelightsName;                     // 0x223C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DoorBashMinSpeed;                                  // 0x2240(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DoorBashMaxSpeed;                                  // 0x2268(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DoorBashForwardDistanceMin;                        // 0x2290(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DoorBashForwardDistanceMax;                        // 0x22B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DoorBashGameplayCueTag;                            // 0x22E0(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22E4[0x4];                                     // 0x22E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      DoorBashCollisionTypesForDoor;                     // 0x22E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      DoorBashCollisionTypesForPawn;                     // 0x22F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DoorBashSphereRadiusForPawnLaunch;                 // 0x2308(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DoorBashScalarForPawnLaunch;                       // 0x2330(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DoorBashPawnLaunchGameplayCueTag;                  // 0x2358(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_235C[0x4];                                     // 0x235C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      InventoryModeTagQuery;                             // 0x2360(0x0048)(Edit, Transient, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  InputContextBlockedTags;                           // 0x23A8(0x0020)(Edit, Transient, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_23C8[0x18];                                    // 0x23C8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           MobileHUDTag;                                      // 0x23E0(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23E4[0xC];                                     // 0x23E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnCancelChargingJump();
	void BP_OnChargingJump(const float JumpChargeFactor);
	void BP_OnFailWheelie();
	void BP_OnFinishAirTrick();
	void BP_OnJump(const float JumpChargeFactor);
	void BP_OnLandStoppie();
	void BP_OnLandWheelie();
	void BP_OnReleaseStoppie();
	void BP_OnReleaseWheelie();
	void BP_OnStartAirTrick(const EFortMotorcycleAirTrickType TrickType);
	void BP_OnStartChargingJump();
	void BP_OnStartStoppie();
	void BP_OnStartWheelie();
	void ChangeBoostAttackState(const bool bNewIsBoostAttacking);
	void OnPlayerWeaponChanged(class AFortWeapon* InNewWeapon, class AFortWeapon* InPrevWeapon);
	void OnRep_IsBoostAttacking();
	void ServerEjectAllPlayers();

	struct FVector GetAverageSpringNormal() const;
	float GetLeanAngleDegrees() const;
	EPhysicalSurface GetSurfaceTypeVehicleOn() const;
	bool IsInInventoryMode() const;
	bool IsPowerSliding() const;
	bool IsSuperSliding() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMotorcycleVehicle">();
	}
	static class AFortMotorcycleVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortMotorcycleVehicle>();
	}
};
static_assert(alignof(AFortMotorcycleVehicle) == 0x000010, "Wrong alignment on AFortMotorcycleVehicle");
static_assert(sizeof(AFortMotorcycleVehicle) == 0x0023F0, "Wrong size on AFortMotorcycleVehicle");
static_assert(offsetof(AFortMotorcycleVehicle, OnStartChargingJumpDelegate) == 0x001F90, "Member 'AFortMotorcycleVehicle::OnStartChargingJumpDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnCancelChargingJumpDelegate) == 0x001FA0, "Member 'AFortMotorcycleVehicle::OnCancelChargingJumpDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnJumpDelegate) == 0x001FB0, "Member 'AFortMotorcycleVehicle::OnJumpDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnChargingJumpDelegate) == 0x001FC0, "Member 'AFortMotorcycleVehicle::OnChargingJumpDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnStartAirTrickDelegate) == 0x001FD0, "Member 'AFortMotorcycleVehicle::OnStartAirTrickDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnFinishAirTrickDelegate) == 0x001FE0, "Member 'AFortMotorcycleVehicle::OnFinishAirTrickDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnStartWheelieDelegate) == 0x001FF0, "Member 'AFortMotorcycleVehicle::OnStartWheelieDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnReleaseWheelieDelegate) == 0x002000, "Member 'AFortMotorcycleVehicle::OnReleaseWheelieDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnLandWheelieDelegate) == 0x002010, "Member 'AFortMotorcycleVehicle::OnLandWheelieDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnFailWheelieDelegate) == 0x002020, "Member 'AFortMotorcycleVehicle::OnFailWheelieDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnStartStoppieDelegate) == 0x002030, "Member 'AFortMotorcycleVehicle::OnStartStoppieDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnReleaseStoppieDelegate) == 0x002040, "Member 'AFortMotorcycleVehicle::OnReleaseStoppieDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnLandStoppieDelegate) == 0x002050, "Member 'AFortMotorcycleVehicle::OnLandStoppieDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnInventoryModeChangedDelegate) == 0x002060, "Member 'AFortMotorcycleVehicle::OnInventoryModeChangedDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, OnSuperSlidingChangedDelegate) == 0x002070, "Member 'AFortMotorcycleVehicle::OnSuperSlidingChangedDelegate' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, InventoryCameraModeClass) == 0x002080, "Member 'AFortMotorcycleVehicle::InventoryCameraModeClass' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, InventoryCameraModeClassADS) == 0x002088, "Member 'AFortMotorcycleVehicle::InventoryCameraModeClassADS' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, PassengerCameraModeClass) == 0x002090, "Member 'AFortMotorcycleVehicle::PassengerCameraModeClass' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, PassengerCameraModeClassADS) == 0x002098, "Member 'AFortMotorcycleVehicle::PassengerCameraModeClassADS' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, FortMotorcycleVehicleConfigs) == 0x0020A0, "Member 'AFortMotorcycleVehicle::FortMotorcycleVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RearAxleSocket) == 0x0020A8, "Member 'AFortMotorcycleVehicle::RearAxleSocket' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, ActionDefForUI) == 0x0020B0, "Member 'AFortMotorcycleVehicle::ActionDefForUI' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, SwingArmRotation) == 0x0020C0, "Member 'AFortMotorcycleVehicle::SwingArmRotation' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, BoostShapeIndices) == 0x002140, "Member 'AFortMotorcycleVehicle::BoostShapeIndices' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, bIsBoostAttacking) == 0x002150, "Member 'AFortMotorcycleVehicle::bIsBoostAttacking' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, CachedTrickType) == 0x002160, "Member 'AFortMotorcycleVehicle::CachedTrickType' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, bHadPassengerAtTrickStart) == 0x002161, "Member 'AFortMotorcycleVehicle::bHadPassengerAtTrickStart' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, PassengerADSSockets) == 0x002198, "Member 'AFortMotorcycleVehicle::PassengerADSSockets' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, PassengerADSRelativeOffsets) == 0x0021A8, "Member 'AFortMotorcycleVehicle::PassengerADSRelativeOffsets' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, CachedNiagaraComponentRoadAndExhaust) == 0x0021B8, "Member 'AFortMotorcycleVehicle::CachedNiagaraComponentRoadAndExhaust' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustNiagaraComponentName) == 0x0021C0, "Member 'AFortMotorcycleVehicle::RoadAndExhaustNiagaraComponentName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustVehicleSpeedName) == 0x0021D0, "Member 'AFortMotorcycleVehicle::RoadAndExhaustVehicleSpeedName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustSlideDirectionName) == 0x0021D4, "Member 'AFortMotorcycleVehicle::RoadAndExhaustSlideDirectionName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustMinSpeedForDust) == 0x0021D8, "Member 'AFortMotorcycleVehicle::RoadAndExhaustMinSpeedForDust' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustDustRearName) == 0x0021DC, "Member 'AFortMotorcycleVehicle::RoadAndExhaustDustRearName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustDustColorLerpName) == 0x0021E0, "Member 'AFortMotorcycleVehicle::RoadAndExhaustDustColorLerpName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustDustColorLerp) == 0x0021E4, "Member 'AFortMotorcycleVehicle::RoadAndExhaustDustColorLerp' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustDustAlphaMultiplierName) == 0x0021E8, "Member 'AFortMotorcycleVehicle::RoadAndExhaustDustAlphaMultiplierName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustDustAlphaMultiplier) == 0x0021EC, "Member 'AFortMotorcycleVehicle::RoadAndExhaustDustAlphaMultiplier' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustPeelOutColorIndexName) == 0x0021F0, "Member 'AFortMotorcycleVehicle::RoadAndExhaustPeelOutColorIndexName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustPeelOutRearName) == 0x0021F4, "Member 'AFortMotorcycleVehicle::RoadAndExhaustPeelOutRearName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustIsPeelOutOnRoadName) == 0x0021F8, "Member 'AFortMotorcycleVehicle::RoadAndExhaustIsPeelOutOnRoadName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustIsPeelOutOnRoadRewindName) == 0x0021FC, "Member 'AFortMotorcycleVehicle::RoadAndExhaustIsPeelOutOnRoadRewindName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustIsInAirName) == 0x002200, "Member 'AFortMotorcycleVehicle::RoadAndExhaustIsInAirName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustCameraDirtGameplayCueTag) == 0x002204, "Member 'AFortMotorcycleVehicle::RoadAndExhaustCameraDirtGameplayCueTag' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustCameraWaterGameplayCueTag) == 0x002208, "Member 'AFortMotorcycleVehicle::RoadAndExhaustCameraWaterGameplayCueTag' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustSurfaceTypeArrayForFX) == 0x002210, "Member 'AFortMotorcycleVehicle::RoadAndExhaustSurfaceTypeArrayForFX' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DriverCameraShakeInstance) == 0x002220, "Member 'AFortMotorcycleVehicle::DriverCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, AcceleratingCameraShakeInstance) == 0x002228, "Member 'AFortMotorcycleVehicle::AcceleratingCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustHeadlightsName) == 0x002238, "Member 'AFortMotorcycleVehicle::RoadAndExhaustHeadlightsName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, RoadAndExhaustBrakelightsName) == 0x00223C, "Member 'AFortMotorcycleVehicle::RoadAndExhaustBrakelightsName' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashMinSpeed) == 0x002240, "Member 'AFortMotorcycleVehicle::DoorBashMinSpeed' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashMaxSpeed) == 0x002268, "Member 'AFortMotorcycleVehicle::DoorBashMaxSpeed' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashForwardDistanceMin) == 0x002290, "Member 'AFortMotorcycleVehicle::DoorBashForwardDistanceMin' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashForwardDistanceMax) == 0x0022B8, "Member 'AFortMotorcycleVehicle::DoorBashForwardDistanceMax' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashGameplayCueTag) == 0x0022E0, "Member 'AFortMotorcycleVehicle::DoorBashGameplayCueTag' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashCollisionTypesForDoor) == 0x0022E8, "Member 'AFortMotorcycleVehicle::DoorBashCollisionTypesForDoor' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashCollisionTypesForPawn) == 0x0022F8, "Member 'AFortMotorcycleVehicle::DoorBashCollisionTypesForPawn' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashSphereRadiusForPawnLaunch) == 0x002308, "Member 'AFortMotorcycleVehicle::DoorBashSphereRadiusForPawnLaunch' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashScalarForPawnLaunch) == 0x002330, "Member 'AFortMotorcycleVehicle::DoorBashScalarForPawnLaunch' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, DoorBashPawnLaunchGameplayCueTag) == 0x002358, "Member 'AFortMotorcycleVehicle::DoorBashPawnLaunchGameplayCueTag' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, InventoryModeTagQuery) == 0x002360, "Member 'AFortMotorcycleVehicle::InventoryModeTagQuery' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, InputContextBlockedTags) == 0x0023A8, "Member 'AFortMotorcycleVehicle::InputContextBlockedTags' has a wrong offset!");
static_assert(offsetof(AFortMotorcycleVehicle, MobileHUDTag) == 0x0023E0, "Member 'AFortMotorcycleVehicle::MobileHUDTag' has a wrong offset!");

// Class MotorcycleRuntime.FortMotorcycleVehicleConfigs
// 0x02D0 (0x0C18 - 0x0948)
class UFortMotorcycleVehicleConfigs : public UFortPhysicsVehicleConfigs
{
public:
	TArray<struct FMotorcycleWheel>               Wheels;                                            // 0x0948(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SpringInterpDamp;                                  // 0x0958(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieSpringInterpDamp;                           // 0x095C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallPushStiff;                                     // 0x0960(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallPushDamp;                                      // 0x0964(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WallPushXTraceOffset;                              // 0x0968(0x0018)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallPushForwardTraceLengthScale;                   // 0x0980(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallPushBackTraceLengthScale;                      // 0x0984(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallPushRightTraceLength;                          // 0x0988(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WallPushRightTraceOffset;                          // 0x0990(0x0018)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WallPushRearRightTraceOffset;                      // 0x09A8(0x0018)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallPushAngle;                                     // 0x09C0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWallPushTracesForWalls;                        // 0x09C4(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWallPushRearSideTracesForWalls;                // 0x09C5(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C6[0x2];                                      // 0x09C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxJumpChargeTime;                                 // 0x09C8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinChargeJumpForce;                                // 0x09CC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxChargeJumpForce;                                // 0x09D0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinJumpForwardAngle;                               // 0x09D4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxJumpForwardAngle;                               // 0x09D8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9DC[0x4];                                      // 0x09DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                JumpForceMinCOMOffset;                             // 0x09E0(0x0018)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JumpForceMaxCOMOffset;                             // 0x09F8(0x0018)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpChargeGraceTimeSeconds;                        // 0x0A10(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpGraceTimeSeconds;                              // 0x0A14(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanAngleScale;                                    // 0x0A18(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanStiff;                                         // 0x0A1C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanDamp;                                          // 0x0A20(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanStrength;                                      // 0x0A24(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideCatchupForceTime;                             // 0x0A28(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideCatchupSpeed;                                 // 0x0A2C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideCatchupPushForce;                             // 0x0A30(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAirPitchAngle;                                 // 0x0A34(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSteeringAngleForModifiedFriction;               // 0x0A38(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForModifiedFriction;                       // 0x0A3C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSteeringAngleToConsiderTractionLost;            // 0x0A40(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrictionRatioToConsiderTractionLost;               // 0x0A44(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheeliePitchStiffMin;                              // 0x0A48(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheeliePitchStiffMax;                              // 0x0A4C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheeliePitchDampMin;                               // 0x0A50(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheeliePitchDampMax;                               // 0x0A54(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheeliePitchAngleMin;                              // 0x0A58(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheeliePitchAngleMax;                              // 0x0A5C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppiePitchAngle;                                 // 0x0A60(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppiePitchStiff;                                 // 0x0A64(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppiePitchDamp;                                  // 0x0A68(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieRampSeconds;                                // 0x0A6C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieFailPitchAngle;                             // 0x0A70(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieRecoveryRate;                               // 0x0A74(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieFailRecoveryRate;                           // 0x0A78(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieMinStartSpeed;                              // 0x0A7C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppieMinStopSpeed;                               // 0x0A80(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieSteerFactor;                                // 0x0A84(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppieSteerFactor;                                // 0x0A88(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieSteerAlphaThreshold;                        // 0x0A8C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieStoppieMaxLeanAllowedToInitiate;            // 0x0A90(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieGroundBufferTime;                           // 0x0A94(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppieGroundBufferTime;                           // 0x0A98(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieSpringLengthExponent;                       // 0x0A9C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieWheelOffsetLerpMultiplier;                  // 0x0AA0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieBrakeFactor;                                // 0x0AA4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppieTurnInPlaceSpeed;                           // 0x0AA8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppieTurnInPlaceSpeedIce;                        // 0x0AAC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppieTurnInPlaceSpeedMud;                        // 0x0AB0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedKmhForMaxStoppie;                          // 0x0AB4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppieTurnAngleExponent;                          // 0x0AB8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppieMaxTurnAngle;                               // 0x0ABC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieTireTractionMultiplier_Min;                 // 0x0AC0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelieCameraMinStraightFactor;                    // 0x0AC4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLeanAccel;                                      // 0x0AC8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CruiseControlForwardAlpha;                         // 0x0ACC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InventoryModeSpeedKmh;                             // 0x0AD0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CruiseControlDisengageSpeedKmh;                    // 0x0AD4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPowerSlideIsSuperSlide;                           // 0x0AD8(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD9[0x3];                                      // 0x0AD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PowerSlideFrontFrictionMultiplier;                 // 0x0ADC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideRearFrictionMultiplier;                  // 0x0AE0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideRoadFrontFrictionMultiplier;             // 0x0AE4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideRoadRearFrictionMultiplier;              // 0x0AE8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideDirtFrontFrictionMultiplier;             // 0x0AEC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideDirtRearFrictionMultiplier;              // 0x0AF0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideGrassFrontFrictionMultiplier;            // 0x0AF4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideGrassRearFrictionMultiplier;             // 0x0AF8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideSnowFrontFrictionMultiplier;             // 0x0AFC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideSnowRearFrictionMultiplier;              // 0x0B00(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideIceFrontFrictionMultiplier;              // 0x0B04(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideIceRearFrictionMultiplier;               // 0x0B08(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideMudFrontFrictionMultiplier;              // 0x0B0C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideMudRearFrictionMultiplier;               // 0x0B10(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideFactor;                                  // 0x0B14(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideDampFactor;                              // 0x0B18(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrictionDampFactor;                                // 0x0B1C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerSlideLeanAngleScale;                          // 0x0B20(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperSlideLeanAngle;                               // 0x0B24(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperSlideMinStartYawSpeedDegrees;                 // 0x0B28(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperSlideMinStartSpeedKmh;                        // 0x0B2C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuperSlideMaxEndSpeedKmh;                          // 0x0B30(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerslideInputWindow;                             // 0x0B34(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShootingMinSpeedSteeringAngle;                     // 0x0B38(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShootingMaxSpeedSteeringAngle;                     // 0x0B3C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InventoryModeCameraYawConstraint;                  // 0x0B40(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedMultiplier;                           // 0x0B44(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostPushForceMultiplier;                          // 0x0B48(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostMinPushForce;                                 // 0x0B4C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostSteeringMultiplier;                           // 0x0B50(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayHolsterAnimsOnClient;                         // 0x0B54(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B55[0x3];                                      // 0x0B55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrontWheelSteeringFactor;                          // 0x0B58(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontWheelRotationAcceleration;                    // 0x0B5C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassengerInventoryCooldown;                        // 0x0B60(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriverInventoryCooldown;                           // 0x0B64(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FName>                             BoostAttackShapes;                                 // 0x0B68(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthMax;                           // 0x0BB8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthMin;                           // 0x0BBC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthRecovery;                      // 0x0BC0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistInterpSpeed;                           // 0x0BC4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirTrickIncrementInterval;                         // 0x0BC8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirTrickFeedStartTime;                             // 0x0BCC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirTrickPitchMultiplier;                           // 0x0BD0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirTrickYawMultiplier;                             // 0x0BD4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAirTrickNeutral;                             // 0x0BD8(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAirTrickRight;                               // 0x0BD9(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAirTrickLeft;                                // 0x0BDA(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BDB[0x1];                                      // 0x0BDB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PoppedTireTractionScalar_Front;                    // 0x0BDC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionScalar_Rear;                     // 0x0BE0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionScalar_Both;                     // 0x0BE4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TopSpeedKmh;                                       // 0x0BE8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C10[0x8];                                      // 0x0C10(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMotorcycleVehicleConfigs">();
	}
	static class UFortMotorcycleVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMotorcycleVehicleConfigs>();
	}
};
static_assert(alignof(UFortMotorcycleVehicleConfigs) == 0x000008, "Wrong alignment on UFortMotorcycleVehicleConfigs");
static_assert(sizeof(UFortMotorcycleVehicleConfigs) == 0x000C18, "Wrong size on UFortMotorcycleVehicleConfigs");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, Wheels) == 0x000948, "Member 'UFortMotorcycleVehicleConfigs::Wheels' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, SpringInterpDamp) == 0x000958, "Member 'UFortMotorcycleVehicleConfigs::SpringInterpDamp' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieSpringInterpDamp) == 0x00095C, "Member 'UFortMotorcycleVehicleConfigs::WheelieSpringInterpDamp' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WallPushStiff) == 0x000960, "Member 'UFortMotorcycleVehicleConfigs::WallPushStiff' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WallPushDamp) == 0x000964, "Member 'UFortMotorcycleVehicleConfigs::WallPushDamp' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WallPushXTraceOffset) == 0x000968, "Member 'UFortMotorcycleVehicleConfigs::WallPushXTraceOffset' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WallPushForwardTraceLengthScale) == 0x000980, "Member 'UFortMotorcycleVehicleConfigs::WallPushForwardTraceLengthScale' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WallPushBackTraceLengthScale) == 0x000984, "Member 'UFortMotorcycleVehicleConfigs::WallPushBackTraceLengthScale' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WallPushRightTraceLength) == 0x000988, "Member 'UFortMotorcycleVehicleConfigs::WallPushRightTraceLength' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WallPushRightTraceOffset) == 0x000990, "Member 'UFortMotorcycleVehicleConfigs::WallPushRightTraceOffset' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WallPushRearRightTraceOffset) == 0x0009A8, "Member 'UFortMotorcycleVehicleConfigs::WallPushRearRightTraceOffset' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WallPushAngle) == 0x0009C0, "Member 'UFortMotorcycleVehicleConfigs::WallPushAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, bUseWallPushTracesForWalls) == 0x0009C4, "Member 'UFortMotorcycleVehicleConfigs::bUseWallPushTracesForWalls' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, bUseWallPushRearSideTracesForWalls) == 0x0009C5, "Member 'UFortMotorcycleVehicleConfigs::bUseWallPushRearSideTracesForWalls' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MaxJumpChargeTime) == 0x0009C8, "Member 'UFortMotorcycleVehicleConfigs::MaxJumpChargeTime' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MinChargeJumpForce) == 0x0009CC, "Member 'UFortMotorcycleVehicleConfigs::MinChargeJumpForce' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MaxChargeJumpForce) == 0x0009D0, "Member 'UFortMotorcycleVehicleConfigs::MaxChargeJumpForce' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MinJumpForwardAngle) == 0x0009D4, "Member 'UFortMotorcycleVehicleConfigs::MinJumpForwardAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MaxJumpForwardAngle) == 0x0009D8, "Member 'UFortMotorcycleVehicleConfigs::MaxJumpForwardAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, JumpForceMinCOMOffset) == 0x0009E0, "Member 'UFortMotorcycleVehicleConfigs::JumpForceMinCOMOffset' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, JumpForceMaxCOMOffset) == 0x0009F8, "Member 'UFortMotorcycleVehicleConfigs::JumpForceMaxCOMOffset' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, JumpChargeGraceTimeSeconds) == 0x000A10, "Member 'UFortMotorcycleVehicleConfigs::JumpChargeGraceTimeSeconds' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, JumpGraceTimeSeconds) == 0x000A14, "Member 'UFortMotorcycleVehicleConfigs::JumpGraceTimeSeconds' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, LeanAngleScale) == 0x000A18, "Member 'UFortMotorcycleVehicleConfigs::LeanAngleScale' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, LeanStiff) == 0x000A1C, "Member 'UFortMotorcycleVehicleConfigs::LeanStiff' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, LeanDamp) == 0x000A20, "Member 'UFortMotorcycleVehicleConfigs::LeanDamp' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, LeanStrength) == 0x000A24, "Member 'UFortMotorcycleVehicleConfigs::LeanStrength' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, SlideCatchupForceTime) == 0x000A28, "Member 'UFortMotorcycleVehicleConfigs::SlideCatchupForceTime' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, SlideCatchupSpeed) == 0x000A2C, "Member 'UFortMotorcycleVehicleConfigs::SlideCatchupSpeed' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, SlideCatchupPushForce) == 0x000A30, "Member 'UFortMotorcycleVehicleConfigs::SlideCatchupPushForce' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, AutoAirPitchAngle) == 0x000A34, "Member 'UFortMotorcycleVehicleConfigs::AutoAirPitchAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MinSteeringAngleForModifiedFriction) == 0x000A38, "Member 'UFortMotorcycleVehicleConfigs::MinSteeringAngleForModifiedFriction' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MinSpeedForModifiedFriction) == 0x000A3C, "Member 'UFortMotorcycleVehicleConfigs::MinSpeedForModifiedFriction' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MinSteeringAngleToConsiderTractionLost) == 0x000A40, "Member 'UFortMotorcycleVehicleConfigs::MinSteeringAngleToConsiderTractionLost' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, FrictionRatioToConsiderTractionLost) == 0x000A44, "Member 'UFortMotorcycleVehicleConfigs::FrictionRatioToConsiderTractionLost' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheeliePitchStiffMin) == 0x000A48, "Member 'UFortMotorcycleVehicleConfigs::WheeliePitchStiffMin' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheeliePitchStiffMax) == 0x000A4C, "Member 'UFortMotorcycleVehicleConfigs::WheeliePitchStiffMax' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheeliePitchDampMin) == 0x000A50, "Member 'UFortMotorcycleVehicleConfigs::WheeliePitchDampMin' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheeliePitchDampMax) == 0x000A54, "Member 'UFortMotorcycleVehicleConfigs::WheeliePitchDampMax' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheeliePitchAngleMin) == 0x000A58, "Member 'UFortMotorcycleVehicleConfigs::WheeliePitchAngleMin' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheeliePitchAngleMax) == 0x000A5C, "Member 'UFortMotorcycleVehicleConfigs::WheeliePitchAngleMax' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppiePitchAngle) == 0x000A60, "Member 'UFortMotorcycleVehicleConfigs::StoppiePitchAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppiePitchStiff) == 0x000A64, "Member 'UFortMotorcycleVehicleConfigs::StoppiePitchStiff' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppiePitchDamp) == 0x000A68, "Member 'UFortMotorcycleVehicleConfigs::StoppiePitchDamp' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieRampSeconds) == 0x000A6C, "Member 'UFortMotorcycleVehicleConfigs::WheelieRampSeconds' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieFailPitchAngle) == 0x000A70, "Member 'UFortMotorcycleVehicleConfigs::WheelieFailPitchAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieRecoveryRate) == 0x000A74, "Member 'UFortMotorcycleVehicleConfigs::WheelieRecoveryRate' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieFailRecoveryRate) == 0x000A78, "Member 'UFortMotorcycleVehicleConfigs::WheelieFailRecoveryRate' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieMinStartSpeed) == 0x000A7C, "Member 'UFortMotorcycleVehicleConfigs::WheelieMinStartSpeed' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppieMinStopSpeed) == 0x000A80, "Member 'UFortMotorcycleVehicleConfigs::StoppieMinStopSpeed' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieSteerFactor) == 0x000A84, "Member 'UFortMotorcycleVehicleConfigs::WheelieSteerFactor' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppieSteerFactor) == 0x000A88, "Member 'UFortMotorcycleVehicleConfigs::StoppieSteerFactor' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieSteerAlphaThreshold) == 0x000A8C, "Member 'UFortMotorcycleVehicleConfigs::WheelieSteerAlphaThreshold' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieStoppieMaxLeanAllowedToInitiate) == 0x000A90, "Member 'UFortMotorcycleVehicleConfigs::WheelieStoppieMaxLeanAllowedToInitiate' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieGroundBufferTime) == 0x000A94, "Member 'UFortMotorcycleVehicleConfigs::WheelieGroundBufferTime' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppieGroundBufferTime) == 0x000A98, "Member 'UFortMotorcycleVehicleConfigs::StoppieGroundBufferTime' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieSpringLengthExponent) == 0x000A9C, "Member 'UFortMotorcycleVehicleConfigs::WheelieSpringLengthExponent' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieWheelOffsetLerpMultiplier) == 0x000AA0, "Member 'UFortMotorcycleVehicleConfigs::WheelieWheelOffsetLerpMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieBrakeFactor) == 0x000AA4, "Member 'UFortMotorcycleVehicleConfigs::WheelieBrakeFactor' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppieTurnInPlaceSpeed) == 0x000AA8, "Member 'UFortMotorcycleVehicleConfigs::StoppieTurnInPlaceSpeed' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppieTurnInPlaceSpeedIce) == 0x000AAC, "Member 'UFortMotorcycleVehicleConfigs::StoppieTurnInPlaceSpeedIce' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppieTurnInPlaceSpeedMud) == 0x000AB0, "Member 'UFortMotorcycleVehicleConfigs::StoppieTurnInPlaceSpeedMud' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MinSpeedKmhForMaxStoppie) == 0x000AB4, "Member 'UFortMotorcycleVehicleConfigs::MinSpeedKmhForMaxStoppie' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppieTurnAngleExponent) == 0x000AB8, "Member 'UFortMotorcycleVehicleConfigs::StoppieTurnAngleExponent' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, StoppieMaxTurnAngle) == 0x000ABC, "Member 'UFortMotorcycleVehicleConfigs::StoppieMaxTurnAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieTireTractionMultiplier_Min) == 0x000AC0, "Member 'UFortMotorcycleVehicleConfigs::WheelieTireTractionMultiplier_Min' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, WheelieCameraMinStraightFactor) == 0x000AC4, "Member 'UFortMotorcycleVehicleConfigs::WheelieCameraMinStraightFactor' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, MaxLeanAccel) == 0x000AC8, "Member 'UFortMotorcycleVehicleConfigs::MaxLeanAccel' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, CruiseControlForwardAlpha) == 0x000ACC, "Member 'UFortMotorcycleVehicleConfigs::CruiseControlForwardAlpha' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, InventoryModeSpeedKmh) == 0x000AD0, "Member 'UFortMotorcycleVehicleConfigs::InventoryModeSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, CruiseControlDisengageSpeedKmh) == 0x000AD4, "Member 'UFortMotorcycleVehicleConfigs::CruiseControlDisengageSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, bPowerSlideIsSuperSlide) == 0x000AD8, "Member 'UFortMotorcycleVehicleConfigs::bPowerSlideIsSuperSlide' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideFrontFrictionMultiplier) == 0x000ADC, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideFrontFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideRearFrictionMultiplier) == 0x000AE0, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideRearFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideRoadFrontFrictionMultiplier) == 0x000AE4, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideRoadFrontFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideRoadRearFrictionMultiplier) == 0x000AE8, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideRoadRearFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideDirtFrontFrictionMultiplier) == 0x000AEC, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideDirtFrontFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideDirtRearFrictionMultiplier) == 0x000AF0, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideDirtRearFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideGrassFrontFrictionMultiplier) == 0x000AF4, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideGrassFrontFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideGrassRearFrictionMultiplier) == 0x000AF8, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideGrassRearFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideSnowFrontFrictionMultiplier) == 0x000AFC, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideSnowFrontFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideSnowRearFrictionMultiplier) == 0x000B00, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideSnowRearFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideIceFrontFrictionMultiplier) == 0x000B04, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideIceFrontFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideIceRearFrictionMultiplier) == 0x000B08, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideIceRearFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideMudFrontFrictionMultiplier) == 0x000B0C, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideMudFrontFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideMudRearFrictionMultiplier) == 0x000B10, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideMudRearFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideFactor) == 0x000B14, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideFactor' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideDampFactor) == 0x000B18, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideDampFactor' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, FrictionDampFactor) == 0x000B1C, "Member 'UFortMotorcycleVehicleConfigs::FrictionDampFactor' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerSlideLeanAngleScale) == 0x000B20, "Member 'UFortMotorcycleVehicleConfigs::PowerSlideLeanAngleScale' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, SuperSlideLeanAngle) == 0x000B24, "Member 'UFortMotorcycleVehicleConfigs::SuperSlideLeanAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, SuperSlideMinStartYawSpeedDegrees) == 0x000B28, "Member 'UFortMotorcycleVehicleConfigs::SuperSlideMinStartYawSpeedDegrees' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, SuperSlideMinStartSpeedKmh) == 0x000B2C, "Member 'UFortMotorcycleVehicleConfigs::SuperSlideMinStartSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, SuperSlideMaxEndSpeedKmh) == 0x000B30, "Member 'UFortMotorcycleVehicleConfigs::SuperSlideMaxEndSpeedKmh' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PowerslideInputWindow) == 0x000B34, "Member 'UFortMotorcycleVehicleConfigs::PowerslideInputWindow' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, ShootingMinSpeedSteeringAngle) == 0x000B38, "Member 'UFortMotorcycleVehicleConfigs::ShootingMinSpeedSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, ShootingMaxSpeedSteeringAngle) == 0x000B3C, "Member 'UFortMotorcycleVehicleConfigs::ShootingMaxSpeedSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, InventoryModeCameraYawConstraint) == 0x000B40, "Member 'UFortMotorcycleVehicleConfigs::InventoryModeCameraYawConstraint' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, BoostTopSpeedMultiplier) == 0x000B44, "Member 'UFortMotorcycleVehicleConfigs::BoostTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, BoostPushForceMultiplier) == 0x000B48, "Member 'UFortMotorcycleVehicleConfigs::BoostPushForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, BoostMinPushForce) == 0x000B4C, "Member 'UFortMotorcycleVehicleConfigs::BoostMinPushForce' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, BoostSteeringMultiplier) == 0x000B50, "Member 'UFortMotorcycleVehicleConfigs::BoostSteeringMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, bPlayHolsterAnimsOnClient) == 0x000B54, "Member 'UFortMotorcycleVehicleConfigs::bPlayHolsterAnimsOnClient' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, FrontWheelSteeringFactor) == 0x000B58, "Member 'UFortMotorcycleVehicleConfigs::FrontWheelSteeringFactor' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, FrontWheelRotationAcceleration) == 0x000B5C, "Member 'UFortMotorcycleVehicleConfigs::FrontWheelRotationAcceleration' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PassengerInventoryCooldown) == 0x000B60, "Member 'UFortMotorcycleVehicleConfigs::PassengerInventoryCooldown' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, DriverInventoryCooldown) == 0x000B64, "Member 'UFortMotorcycleVehicleConfigs::DriverInventoryCooldown' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, BoostAttackShapes) == 0x000B68, "Member 'UFortMotorcycleVehicleConfigs::BoostAttackShapes' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, CameraAssistStrengthMax) == 0x000BB8, "Member 'UFortMotorcycleVehicleConfigs::CameraAssistStrengthMax' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, CameraAssistStrengthMin) == 0x000BBC, "Member 'UFortMotorcycleVehicleConfigs::CameraAssistStrengthMin' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, CameraAssistStrengthRecovery) == 0x000BC0, "Member 'UFortMotorcycleVehicleConfigs::CameraAssistStrengthRecovery' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, CameraAssistInterpSpeed) == 0x000BC4, "Member 'UFortMotorcycleVehicleConfigs::CameraAssistInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, AirTrickIncrementInterval) == 0x000BC8, "Member 'UFortMotorcycleVehicleConfigs::AirTrickIncrementInterval' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, AirTrickFeedStartTime) == 0x000BCC, "Member 'UFortMotorcycleVehicleConfigs::AirTrickFeedStartTime' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, AirTrickPitchMultiplier) == 0x000BD0, "Member 'UFortMotorcycleVehicleConfigs::AirTrickPitchMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, AirTrickYawMultiplier) == 0x000BD4, "Member 'UFortMotorcycleVehicleConfigs::AirTrickYawMultiplier' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, bAllowAirTrickNeutral) == 0x000BD8, "Member 'UFortMotorcycleVehicleConfigs::bAllowAirTrickNeutral' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, bAllowAirTrickRight) == 0x000BD9, "Member 'UFortMotorcycleVehicleConfigs::bAllowAirTrickRight' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, bAllowAirTrickLeft) == 0x000BDA, "Member 'UFortMotorcycleVehicleConfigs::bAllowAirTrickLeft' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PoppedTireTractionScalar_Front) == 0x000BDC, "Member 'UFortMotorcycleVehicleConfigs::PoppedTireTractionScalar_Front' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PoppedTireTractionScalar_Rear) == 0x000BE0, "Member 'UFortMotorcycleVehicleConfigs::PoppedTireTractionScalar_Rear' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, PoppedTireTractionScalar_Both) == 0x000BE4, "Member 'UFortMotorcycleVehicleConfigs::PoppedTireTractionScalar_Both' has a wrong offset!");
static_assert(offsetof(UFortMotorcycleVehicleConfigs, TopSpeedKmh) == 0x000BE8, "Member 'UFortMotorcycleVehicleConfigs::TopSpeedKmh' has a wrong offset!");

}

