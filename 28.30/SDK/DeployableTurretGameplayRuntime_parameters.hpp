#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DeployableTurretGameplayRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "DeployableTurretGameplayRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function DeployableTurretGameplayRuntime.DeployableTurretAnimInstance.SetNativeVariables
// 0x0030 (0x0030 - 0x0000)
struct DeployableTurretAnimInstance_SetNativeVariables final
{
public:
	const class ABuildingGameplayActor*           OwningTurretBGA;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeployableTurretBPAnimData            AnimData;                                          // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableTurretAnimInstance_SetNativeVariables) == 0x000008, "Wrong alignment on DeployableTurretAnimInstance_SetNativeVariables");
static_assert(sizeof(DeployableTurretAnimInstance_SetNativeVariables) == 0x000030, "Wrong size on DeployableTurretAnimInstance_SetNativeVariables");
static_assert(offsetof(DeployableTurretAnimInstance_SetNativeVariables, OwningTurretBGA) == 0x000000, "Member 'DeployableTurretAnimInstance_SetNativeVariables::OwningTurretBGA' has a wrong offset!");
static_assert(offsetof(DeployableTurretAnimInstance_SetNativeVariables, AnimData) == 0x000008, "Member 'DeployableTurretAnimInstance_SetNativeVariables::AnimData' has a wrong offset!");

// Function DeployableTurretGameplayRuntime.DeployableTurretLibrary.DeployableTurret_CalculateTargetingLaserScale
// 0x00A0 (0x00A0 - 0x0000)
struct DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale final
{
public:
	const class AActor*                           TurretActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTurretAimTransform;                         // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaserOrigin;                                       // 0x0070(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLaserRange;                                     // 0x0088(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistMult;                                          // 0x008C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0xC];                                       // 0x0094(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale) == 0x000010, "Wrong alignment on DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale");
static_assert(sizeof(DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale) == 0x0000A0, "Wrong size on DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale, TurretActor) == 0x000000, "Member 'DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale::TurretActor' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale, CurrentTurretAimTransform) == 0x000010, "Member 'DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale::CurrentTurretAimTransform' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale, LaserOrigin) == 0x000070, "Member 'DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale::LaserOrigin' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale, MaxLaserRange) == 0x000088, "Member 'DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale::MaxLaserRange' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale, DistMult) == 0x00008C, "Member 'DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale::DistMult' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale, ReturnValue) == 0x000090, "Member 'DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale::ReturnValue' has a wrong offset!");

// Function DeployableTurretGameplayRuntime.DeployableTurretLibrary.DeployableTurret_EnableSkeletalMeshComponentBudgeting
// 0x0010 (0x0010 - 0x0000)
struct DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting final
{
public:
	class USkeletalMeshComponentBudgeted*         SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting) == 0x000008, "Wrong alignment on DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting");
static_assert(sizeof(DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting) == 0x000010, "Wrong size on DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting, SkeletalMesh) == 0x000000, "Member 'DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting, bEnable) == 0x000008, "Member 'DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting::bEnable' has a wrong offset!");

// Function DeployableTurretGameplayRuntime.DeployableTurretLibrary.DeployableTurret_GetAimLocationForTargetActor
// 0x0070 (0x0070 - 0x0000)
struct DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FScalableFloat> NonPlayerPawnTargetTagToZOffsetMap;                // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor) == 0x000008, "Wrong alignment on DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor");
static_assert(sizeof(DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor) == 0x000070, "Wrong size on DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor, TargetActor) == 0x000000, "Member 'DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor::TargetActor' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor, NonPlayerPawnTargetTagToZOffsetMap) == 0x000008, "Member 'DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor::NonPlayerPawnTargetTagToZOffsetMap' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor, ReturnValue) == 0x000058, "Member 'DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor::ReturnValue' has a wrong offset!");

// Function DeployableTurretGameplayRuntime.DeployableTurretLibrary.FireAnalyticsEvent_DeployableTurretSessionEnd
// 0x0048 (0x0048 - 0x0000)
struct DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       TurretOwnerAccountId;                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAnalyticsEventAttribute>   Attributes;                                        // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd) == 0x000008, "Wrong alignment on DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd");
static_assert(sizeof(DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd) == 0x000048, "Wrong size on DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd");
static_assert(offsetof(DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd, WorldContextObject) == 0x000000, "Member 'DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd, TurretOwnerAccountId) == 0x000008, "Member 'DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd::TurretOwnerAccountId' has a wrong offset!");
static_assert(offsetof(DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd, Attributes) == 0x000038, "Member 'DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd::Attributes' has a wrong offset!");

}

