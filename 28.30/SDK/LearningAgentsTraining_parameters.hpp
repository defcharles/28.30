#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LearningAgentsTraining

#include "Basic.hpp"

#include "LearningAgentsTraining_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function LearningAgentsTraining.ConditionalCompletion.AddConditionalCompletion
// 0x0018 (0x0018 - 0x0000)
struct ConditionalCompletion_AddConditionalCompletion final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELearningAgentsCompletion                     InCompletionMode;                                  // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UConditionalCompletion*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionalCompletion_AddConditionalCompletion) == 0x000008, "Wrong alignment on ConditionalCompletion_AddConditionalCompletion");
static_assert(sizeof(ConditionalCompletion_AddConditionalCompletion) == 0x000018, "Wrong size on ConditionalCompletion_AddConditionalCompletion");
static_assert(offsetof(ConditionalCompletion_AddConditionalCompletion, InAgentTrainer) == 0x000000, "Member 'ConditionalCompletion_AddConditionalCompletion::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(ConditionalCompletion_AddConditionalCompletion, Name_0) == 0x000008, "Member 'ConditionalCompletion_AddConditionalCompletion::Name_0' has a wrong offset!");
static_assert(offsetof(ConditionalCompletion_AddConditionalCompletion, InCompletionMode) == 0x00000C, "Member 'ConditionalCompletion_AddConditionalCompletion::InCompletionMode' has a wrong offset!");
static_assert(offsetof(ConditionalCompletion_AddConditionalCompletion, ReturnValue) == 0x000010, "Member 'ConditionalCompletion_AddConditionalCompletion::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.ConditionalCompletion.SetConditionalCompletion
// 0x0008 (0x0008 - 0x0000)
struct ConditionalCompletion_SetConditionalCompletion final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCompleted;                                      // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConditionalCompletion_SetConditionalCompletion) == 0x000004, "Wrong alignment on ConditionalCompletion_SetConditionalCompletion");
static_assert(sizeof(ConditionalCompletion_SetConditionalCompletion) == 0x000008, "Wrong size on ConditionalCompletion_SetConditionalCompletion");
static_assert(offsetof(ConditionalCompletion_SetConditionalCompletion, AgentId) == 0x000000, "Member 'ConditionalCompletion_SetConditionalCompletion::AgentId' has a wrong offset!");
static_assert(offsetof(ConditionalCompletion_SetConditionalCompletion, bIsCompleted) == 0x000004, "Member 'ConditionalCompletion_SetConditionalCompletion::bIsCompleted' has a wrong offset!");

// Function LearningAgentsTraining.TimeElapsedCompletion.AddTimeElapsedCompletion
// 0x0020 (0x0020 - 0x0000)
struct TimeElapsedCompletion_AddTimeElapsedCompletion final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELearningAgentsCompletion                     InCompletionMode;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimeElapsedCompletion*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeElapsedCompletion_AddTimeElapsedCompletion) == 0x000008, "Wrong alignment on TimeElapsedCompletion_AddTimeElapsedCompletion");
static_assert(sizeof(TimeElapsedCompletion_AddTimeElapsedCompletion) == 0x000020, "Wrong size on TimeElapsedCompletion_AddTimeElapsedCompletion");
static_assert(offsetof(TimeElapsedCompletion_AddTimeElapsedCompletion, InAgentTrainer) == 0x000000, "Member 'TimeElapsedCompletion_AddTimeElapsedCompletion::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(TimeElapsedCompletion_AddTimeElapsedCompletion, Name_0) == 0x000008, "Member 'TimeElapsedCompletion_AddTimeElapsedCompletion::Name_0' has a wrong offset!");
static_assert(offsetof(TimeElapsedCompletion_AddTimeElapsedCompletion, Threshold) == 0x00000C, "Member 'TimeElapsedCompletion_AddTimeElapsedCompletion::Threshold' has a wrong offset!");
static_assert(offsetof(TimeElapsedCompletion_AddTimeElapsedCompletion, InCompletionMode) == 0x000010, "Member 'TimeElapsedCompletion_AddTimeElapsedCompletion::InCompletionMode' has a wrong offset!");
static_assert(offsetof(TimeElapsedCompletion_AddTimeElapsedCompletion, ReturnValue) == 0x000018, "Member 'TimeElapsedCompletion_AddTimeElapsedCompletion::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.TimeElapsedCompletion.SetTimeElapsedCompletion
// 0x0008 (0x0008 - 0x0000)
struct TimeElapsedCompletion_SetTimeElapsedCompletion final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeElapsedCompletion_SetTimeElapsedCompletion) == 0x000004, "Wrong alignment on TimeElapsedCompletion_SetTimeElapsedCompletion");
static_assert(sizeof(TimeElapsedCompletion_SetTimeElapsedCompletion) == 0x000008, "Wrong size on TimeElapsedCompletion_SetTimeElapsedCompletion");
static_assert(offsetof(TimeElapsedCompletion_SetTimeElapsedCompletion, AgentId) == 0x000000, "Member 'TimeElapsedCompletion_SetTimeElapsedCompletion::AgentId' has a wrong offset!");
static_assert(offsetof(TimeElapsedCompletion_SetTimeElapsedCompletion, Time) == 0x000004, "Member 'TimeElapsedCompletion_SetTimeElapsedCompletion::Time' has a wrong offset!");

// Function LearningAgentsTraining.PlanarPositionDifferenceCompletion.AddPlanarPositionDifferenceCompletion
// 0x0050 (0x0050 - 0x0000)
struct PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELearningAgentsCompletion                     InCompletionMode;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis0;                                             // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarPositionDifferenceCompletion*    ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion) == 0x000008, "Wrong alignment on PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion");
static_assert(sizeof(PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion) == 0x000050, "Wrong size on PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion");
static_assert(offsetof(PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion, InAgentTrainer) == 0x000000, "Member 'PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion, Name_0) == 0x000008, "Member 'PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion, Threshold) == 0x00000C, "Member 'PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion::Threshold' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion, InCompletionMode) == 0x000010, "Member 'PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion::InCompletionMode' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion, Axis0) == 0x000018, "Member 'PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion, Axis1) == 0x000030, "Member 'PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion, ReturnValue) == 0x000048, "Member 'PlanarPositionDifferenceCompletion_AddPlanarPositionDifferenceCompletion::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.PlanarPositionDifferenceCompletion.SetPlanarPositionDifferenceCompletion
// 0x0038 (0x0038 - 0x0000)
struct PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position0;                                         // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position1;                                         // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion) == 0x000008, "Wrong alignment on PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion");
static_assert(sizeof(PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion) == 0x000038, "Wrong size on PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion");
static_assert(offsetof(PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion, AgentId) == 0x000000, "Member 'PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion, Position0) == 0x000008, "Member 'PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion::Position0' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion, Position1) == 0x000020, "Member 'PlanarPositionDifferenceCompletion_SetPlanarPositionDifferenceCompletion::Position1' has a wrong offset!");

// Function LearningAgentsTraining.PlanarPositionSimilarityCompletion.AddPlanarPositionSimilarityCompletion
// 0x0050 (0x0050 - 0x0000)
struct PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELearningAgentsCompletion                     InCompletionMode;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis0;                                             // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarPositionSimilarityCompletion*    ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion) == 0x000008, "Wrong alignment on PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion");
static_assert(sizeof(PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion) == 0x000050, "Wrong size on PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion");
static_assert(offsetof(PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion, InAgentTrainer) == 0x000000, "Member 'PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion, Name_0) == 0x000008, "Member 'PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion, Threshold) == 0x00000C, "Member 'PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion::Threshold' has a wrong offset!");
static_assert(offsetof(PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion, InCompletionMode) == 0x000010, "Member 'PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion::InCompletionMode' has a wrong offset!");
static_assert(offsetof(PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion, Axis0) == 0x000018, "Member 'PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion, Axis1) == 0x000030, "Member 'PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion, ReturnValue) == 0x000048, "Member 'PlanarPositionSimilarityCompletion_AddPlanarPositionSimilarityCompletion::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.PlanarPositionSimilarityCompletion.SetPlanarPositionSimilarityCompletion
// 0x0038 (0x0038 - 0x0000)
struct PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position0;                                         // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position1;                                         // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion) == 0x000008, "Wrong alignment on PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion");
static_assert(sizeof(PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion) == 0x000038, "Wrong size on PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion");
static_assert(offsetof(PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion, AgentId) == 0x000000, "Member 'PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion, Position0) == 0x000008, "Member 'PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion::Position0' has a wrong offset!");
static_assert(offsetof(PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion, Position1) == 0x000020, "Member 'PlanarPositionSimilarityCompletion_SetPlanarPositionSimilarityCompletion::Position1' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsImitationTrainer.BeginTraining
// 0x0068 (0x0068 - 0x0000)
struct LearningAgentsImitationTrainer_BeginTraining final
{
public:
	class ULearningAgentsPolicy*                  InPolicy;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULearningAgentsRecording*         Recording;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLearningAgentsImitationTrainerSettings ImitationTrainerSettings;                          // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLearningAgentsImitationTrainerTrainingSettings ImitationTrainerTrainingSettings;                  // 0x0014(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLearningAgentsTrainerPathSettings     ImitationTrainerPathSettings;                      // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bReinitializePolicyNetwork;                        // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsImitationTrainer_BeginTraining) == 0x000008, "Wrong alignment on LearningAgentsImitationTrainer_BeginTraining");
static_assert(sizeof(LearningAgentsImitationTrainer_BeginTraining) == 0x000068, "Wrong size on LearningAgentsImitationTrainer_BeginTraining");
static_assert(offsetof(LearningAgentsImitationTrainer_BeginTraining, InPolicy) == 0x000000, "Member 'LearningAgentsImitationTrainer_BeginTraining::InPolicy' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_BeginTraining, Recording) == 0x000008, "Member 'LearningAgentsImitationTrainer_BeginTraining::Recording' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_BeginTraining, ImitationTrainerSettings) == 0x000010, "Member 'LearningAgentsImitationTrainer_BeginTraining::ImitationTrainerSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_BeginTraining, ImitationTrainerTrainingSettings) == 0x000014, "Member 'LearningAgentsImitationTrainer_BeginTraining::ImitationTrainerTrainingSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_BeginTraining, ImitationTrainerPathSettings) == 0x000030, "Member 'LearningAgentsImitationTrainer_BeginTraining::ImitationTrainerPathSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_BeginTraining, bReinitializePolicyNetwork) == 0x000060, "Member 'LearningAgentsImitationTrainer_BeginTraining::bReinitializePolicyNetwork' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsImitationTrainer.RunTraining
// 0x0068 (0x0068 - 0x0000)
struct LearningAgentsImitationTrainer_RunTraining final
{
public:
	class ULearningAgentsPolicy*                  InPolicy;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULearningAgentsRecording*         Recording;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLearningAgentsImitationTrainerSettings ImitationTrainerSettings;                          // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLearningAgentsImitationTrainerTrainingSettings ImitationTrainerTrainingSettings;                  // 0x0014(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLearningAgentsTrainerPathSettings     ImitationTrainerPathSettings;                      // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bReinitializePolicyNetwork;                        // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsImitationTrainer_RunTraining) == 0x000008, "Wrong alignment on LearningAgentsImitationTrainer_RunTraining");
static_assert(sizeof(LearningAgentsImitationTrainer_RunTraining) == 0x000068, "Wrong size on LearningAgentsImitationTrainer_RunTraining");
static_assert(offsetof(LearningAgentsImitationTrainer_RunTraining, InPolicy) == 0x000000, "Member 'LearningAgentsImitationTrainer_RunTraining::InPolicy' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_RunTraining, Recording) == 0x000008, "Member 'LearningAgentsImitationTrainer_RunTraining::Recording' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_RunTraining, ImitationTrainerSettings) == 0x000010, "Member 'LearningAgentsImitationTrainer_RunTraining::ImitationTrainerSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_RunTraining, ImitationTrainerTrainingSettings) == 0x000014, "Member 'LearningAgentsImitationTrainer_RunTraining::ImitationTrainerTrainingSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_RunTraining, ImitationTrainerPathSettings) == 0x000030, "Member 'LearningAgentsImitationTrainer_RunTraining::ImitationTrainerPathSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsImitationTrainer_RunTraining, bReinitializePolicyNetwork) == 0x000060, "Member 'LearningAgentsImitationTrainer_RunTraining::bReinitializePolicyNetwork' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsImitationTrainer.HasTrainingFailed
// 0x0001 (0x0001 - 0x0000)
struct LearningAgentsImitationTrainer_HasTrainingFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsImitationTrainer_HasTrainingFailed) == 0x000001, "Wrong alignment on LearningAgentsImitationTrainer_HasTrainingFailed");
static_assert(sizeof(LearningAgentsImitationTrainer_HasTrainingFailed) == 0x000001, "Wrong size on LearningAgentsImitationTrainer_HasTrainingFailed");
static_assert(offsetof(LearningAgentsImitationTrainer_HasTrainingFailed, ReturnValue) == 0x000000, "Member 'LearningAgentsImitationTrainer_HasTrainingFailed::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsImitationTrainer.IsTraining
// 0x0001 (0x0001 - 0x0000)
struct LearningAgentsImitationTrainer_IsTraining final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsImitationTrainer_IsTraining) == 0x000001, "Wrong alignment on LearningAgentsImitationTrainer_IsTraining");
static_assert(sizeof(LearningAgentsImitationTrainer_IsTraining) == 0x000001, "Wrong size on LearningAgentsImitationTrainer_IsTraining");
static_assert(offsetof(LearningAgentsImitationTrainer_IsTraining, ReturnValue) == 0x000000, "Member 'LearningAgentsImitationTrainer_IsTraining::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.AppendRecordingFromFile
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsRecorder_AppendRecordingFromFile final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_AppendRecordingFromFile) == 0x000008, "Wrong alignment on LearningAgentsRecorder_AppendRecordingFromFile");
static_assert(sizeof(LearningAgentsRecorder_AppendRecordingFromFile) == 0x000010, "Wrong size on LearningAgentsRecorder_AppendRecordingFromFile");
static_assert(offsetof(LearningAgentsRecorder_AppendRecordingFromFile, File) == 0x000000, "Member 'LearningAgentsRecorder_AppendRecordingFromFile::File' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.AppendRecordingToAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsRecorder_AppendRecordingToAsset final
{
public:
	class ULearningAgentsRecording*               RecordingAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_AppendRecordingToAsset) == 0x000008, "Wrong alignment on LearningAgentsRecorder_AppendRecordingToAsset");
static_assert(sizeof(LearningAgentsRecorder_AppendRecordingToAsset) == 0x000008, "Wrong size on LearningAgentsRecorder_AppendRecordingToAsset");
static_assert(offsetof(LearningAgentsRecorder_AppendRecordingToAsset, RecordingAsset) == 0x000000, "Member 'LearningAgentsRecorder_AppendRecordingToAsset::RecordingAsset' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.BeginRecording
// 0x0001 (0x0001 - 0x0000)
struct LearningAgentsRecorder_BeginRecording final
{
public:
	bool                                          bReinitializeRecording;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_BeginRecording) == 0x000001, "Wrong alignment on LearningAgentsRecorder_BeginRecording");
static_assert(sizeof(LearningAgentsRecorder_BeginRecording) == 0x000001, "Wrong size on LearningAgentsRecorder_BeginRecording");
static_assert(offsetof(LearningAgentsRecorder_BeginRecording, bReinitializeRecording) == 0x000000, "Member 'LearningAgentsRecorder_BeginRecording::bReinitializeRecording' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.LoadRecordingFromAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsRecorder_LoadRecordingFromAsset final
{
public:
	class ULearningAgentsRecording*               RecordingAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_LoadRecordingFromAsset) == 0x000008, "Wrong alignment on LearningAgentsRecorder_LoadRecordingFromAsset");
static_assert(sizeof(LearningAgentsRecorder_LoadRecordingFromAsset) == 0x000008, "Wrong size on LearningAgentsRecorder_LoadRecordingFromAsset");
static_assert(offsetof(LearningAgentsRecorder_LoadRecordingFromAsset, RecordingAsset) == 0x000000, "Member 'LearningAgentsRecorder_LoadRecordingFromAsset::RecordingAsset' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.LoadRecordingFromFile
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsRecorder_LoadRecordingFromFile final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_LoadRecordingFromFile) == 0x000008, "Wrong alignment on LearningAgentsRecorder_LoadRecordingFromFile");
static_assert(sizeof(LearningAgentsRecorder_LoadRecordingFromFile) == 0x000010, "Wrong size on LearningAgentsRecorder_LoadRecordingFromFile");
static_assert(offsetof(LearningAgentsRecorder_LoadRecordingFromFile, File) == 0x000000, "Member 'LearningAgentsRecorder_LoadRecordingFromFile::File' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.SaveRecordingToAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsRecorder_SaveRecordingToAsset final
{
public:
	class ULearningAgentsRecording*               RecordingAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_SaveRecordingToAsset) == 0x000008, "Wrong alignment on LearningAgentsRecorder_SaveRecordingToAsset");
static_assert(sizeof(LearningAgentsRecorder_SaveRecordingToAsset) == 0x000008, "Wrong size on LearningAgentsRecorder_SaveRecordingToAsset");
static_assert(offsetof(LearningAgentsRecorder_SaveRecordingToAsset, RecordingAsset) == 0x000000, "Member 'LearningAgentsRecorder_SaveRecordingToAsset::RecordingAsset' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.SetupRecorder
// 0x0030 (0x0030 - 0x0000)
struct LearningAgentsRecorder_SetupRecorder final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLearningAgentsRecorderPathSettings    RecorderPathSettings;                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ULearningAgentsRecording*               RecordingAsset;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_SetupRecorder) == 0x000008, "Wrong alignment on LearningAgentsRecorder_SetupRecorder");
static_assert(sizeof(LearningAgentsRecorder_SetupRecorder) == 0x000030, "Wrong size on LearningAgentsRecorder_SetupRecorder");
static_assert(offsetof(LearningAgentsRecorder_SetupRecorder, InInteractor) == 0x000000, "Member 'LearningAgentsRecorder_SetupRecorder::InInteractor' has a wrong offset!");
static_assert(offsetof(LearningAgentsRecorder_SetupRecorder, RecorderPathSettings) == 0x000008, "Member 'LearningAgentsRecorder_SetupRecorder::RecorderPathSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsRecorder_SetupRecorder, RecordingAsset) == 0x000028, "Member 'LearningAgentsRecorder_SetupRecorder::RecordingAsset' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.UseRecordingAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsRecorder_UseRecordingAsset final
{
public:
	class ULearningAgentsRecording*               RecordingAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_UseRecordingAsset) == 0x000008, "Wrong alignment on LearningAgentsRecorder_UseRecordingAsset");
static_assert(sizeof(LearningAgentsRecorder_UseRecordingAsset) == 0x000008, "Wrong size on LearningAgentsRecorder_UseRecordingAsset");
static_assert(offsetof(LearningAgentsRecorder_UseRecordingAsset, RecordingAsset) == 0x000000, "Member 'LearningAgentsRecorder_UseRecordingAsset::RecordingAsset' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.GetCurrentRecording
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsRecorder_GetCurrentRecording final
{
public:
	const class ULearningAgentsRecording*         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_GetCurrentRecording) == 0x000008, "Wrong alignment on LearningAgentsRecorder_GetCurrentRecording");
static_assert(sizeof(LearningAgentsRecorder_GetCurrentRecording) == 0x000008, "Wrong size on LearningAgentsRecorder_GetCurrentRecording");
static_assert(offsetof(LearningAgentsRecorder_GetCurrentRecording, ReturnValue) == 0x000000, "Member 'LearningAgentsRecorder_GetCurrentRecording::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.IsRecording
// 0x0001 (0x0001 - 0x0000)
struct LearningAgentsRecorder_IsRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_IsRecording) == 0x000001, "Wrong alignment on LearningAgentsRecorder_IsRecording");
static_assert(sizeof(LearningAgentsRecorder_IsRecording) == 0x000001, "Wrong size on LearningAgentsRecorder_IsRecording");
static_assert(offsetof(LearningAgentsRecorder_IsRecording, ReturnValue) == 0x000000, "Member 'LearningAgentsRecorder_IsRecording::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecorder.SaveRecordingToFile
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsRecorder_SaveRecordingToFile final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecorder_SaveRecordingToFile) == 0x000008, "Wrong alignment on LearningAgentsRecorder_SaveRecordingToFile");
static_assert(sizeof(LearningAgentsRecorder_SaveRecordingToFile) == 0x000010, "Wrong size on LearningAgentsRecorder_SaveRecordingToFile");
static_assert(offsetof(LearningAgentsRecorder_SaveRecordingToFile, File) == 0x000000, "Member 'LearningAgentsRecorder_SaveRecordingToFile::File' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecording.AppendRecordingFromFile
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsRecording_AppendRecordingFromFile final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecording_AppendRecordingFromFile) == 0x000008, "Wrong alignment on LearningAgentsRecording_AppendRecordingFromFile");
static_assert(sizeof(LearningAgentsRecording_AppendRecordingFromFile) == 0x000010, "Wrong size on LearningAgentsRecording_AppendRecordingFromFile");
static_assert(offsetof(LearningAgentsRecording_AppendRecordingFromFile, File) == 0x000000, "Member 'LearningAgentsRecording_AppendRecordingFromFile::File' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecording.AppendRecordingToAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsRecording_AppendRecordingToAsset final
{
public:
	class ULearningAgentsRecording*               RecordingAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecording_AppendRecordingToAsset) == 0x000008, "Wrong alignment on LearningAgentsRecording_AppendRecordingToAsset");
static_assert(sizeof(LearningAgentsRecording_AppendRecordingToAsset) == 0x000008, "Wrong size on LearningAgentsRecording_AppendRecordingToAsset");
static_assert(offsetof(LearningAgentsRecording_AppendRecordingToAsset, RecordingAsset) == 0x000000, "Member 'LearningAgentsRecording_AppendRecordingToAsset::RecordingAsset' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecording.LoadRecordingFromAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsRecording_LoadRecordingFromAsset final
{
public:
	class ULearningAgentsRecording*               RecordingAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecording_LoadRecordingFromAsset) == 0x000008, "Wrong alignment on LearningAgentsRecording_LoadRecordingFromAsset");
static_assert(sizeof(LearningAgentsRecording_LoadRecordingFromAsset) == 0x000008, "Wrong size on LearningAgentsRecording_LoadRecordingFromAsset");
static_assert(offsetof(LearningAgentsRecording_LoadRecordingFromAsset, RecordingAsset) == 0x000000, "Member 'LearningAgentsRecording_LoadRecordingFromAsset::RecordingAsset' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecording.LoadRecordingFromFile
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsRecording_LoadRecordingFromFile final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecording_LoadRecordingFromFile) == 0x000008, "Wrong alignment on LearningAgentsRecording_LoadRecordingFromFile");
static_assert(sizeof(LearningAgentsRecording_LoadRecordingFromFile) == 0x000010, "Wrong size on LearningAgentsRecording_LoadRecordingFromFile");
static_assert(offsetof(LearningAgentsRecording_LoadRecordingFromFile, File) == 0x000000, "Member 'LearningAgentsRecording_LoadRecordingFromFile::File' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecording.SaveRecordingToAsset
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsRecording_SaveRecordingToAsset final
{
public:
	class ULearningAgentsRecording*               RecordingAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecording_SaveRecordingToAsset) == 0x000008, "Wrong alignment on LearningAgentsRecording_SaveRecordingToAsset");
static_assert(sizeof(LearningAgentsRecording_SaveRecordingToAsset) == 0x000008, "Wrong size on LearningAgentsRecording_SaveRecordingToAsset");
static_assert(offsetof(LearningAgentsRecording_SaveRecordingToAsset, RecordingAsset) == 0x000000, "Member 'LearningAgentsRecording_SaveRecordingToAsset::RecordingAsset' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsRecording.SaveRecordingToFile
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsRecording_SaveRecordingToFile final
{
public:
	struct FFilePath                              File;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsRecording_SaveRecordingToFile) == 0x000008, "Wrong alignment on LearningAgentsRecording_SaveRecordingToFile");
static_assert(sizeof(LearningAgentsRecording_SaveRecordingToFile) == 0x000010, "Wrong size on LearningAgentsRecording_SaveRecordingToFile");
static_assert(offsetof(LearningAgentsRecording_SaveRecordingToFile, File) == 0x000000, "Member 'LearningAgentsRecording_SaveRecordingToFile::File' has a wrong offset!");

// Function LearningAgentsTraining.FloatReward.AddFloatReward
// 0x0018 (0x0018 - 0x0000)
struct FloatReward_AddFloatReward final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFloatReward*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatReward_AddFloatReward) == 0x000008, "Wrong alignment on FloatReward_AddFloatReward");
static_assert(sizeof(FloatReward_AddFloatReward) == 0x000018, "Wrong size on FloatReward_AddFloatReward");
static_assert(offsetof(FloatReward_AddFloatReward, InAgentTrainer) == 0x000000, "Member 'FloatReward_AddFloatReward::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(FloatReward_AddFloatReward, Name_0) == 0x000008, "Member 'FloatReward_AddFloatReward::Name_0' has a wrong offset!");
static_assert(offsetof(FloatReward_AddFloatReward, Weight) == 0x00000C, "Member 'FloatReward_AddFloatReward::Weight' has a wrong offset!");
static_assert(offsetof(FloatReward_AddFloatReward, ReturnValue) == 0x000010, "Member 'FloatReward_AddFloatReward::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.FloatReward.SetFloatReward
// 0x0008 (0x0008 - 0x0000)
struct FloatReward_SetFloatReward final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Reward;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatReward_SetFloatReward) == 0x000004, "Wrong alignment on FloatReward_SetFloatReward");
static_assert(sizeof(FloatReward_SetFloatReward) == 0x000008, "Wrong size on FloatReward_SetFloatReward");
static_assert(offsetof(FloatReward_SetFloatReward, AgentId) == 0x000000, "Member 'FloatReward_SetFloatReward::AgentId' has a wrong offset!");
static_assert(offsetof(FloatReward_SetFloatReward, Reward) == 0x000004, "Member 'FloatReward_SetFloatReward::Reward' has a wrong offset!");

// Function LearningAgentsTraining.ConditionalReward.AddConditionalReward
// 0x0018 (0x0018 - 0x0000)
struct ConditionalReward_AddConditionalReward final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConditionalReward*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionalReward_AddConditionalReward) == 0x000008, "Wrong alignment on ConditionalReward_AddConditionalReward");
static_assert(sizeof(ConditionalReward_AddConditionalReward) == 0x000018, "Wrong size on ConditionalReward_AddConditionalReward");
static_assert(offsetof(ConditionalReward_AddConditionalReward, InAgentTrainer) == 0x000000, "Member 'ConditionalReward_AddConditionalReward::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(ConditionalReward_AddConditionalReward, Name_0) == 0x000008, "Member 'ConditionalReward_AddConditionalReward::Name_0' has a wrong offset!");
static_assert(offsetof(ConditionalReward_AddConditionalReward, Value) == 0x00000C, "Member 'ConditionalReward_AddConditionalReward::Value' has a wrong offset!");
static_assert(offsetof(ConditionalReward_AddConditionalReward, ReturnValue) == 0x000010, "Member 'ConditionalReward_AddConditionalReward::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.ConditionalReward.SetConditionalReward
// 0x0008 (0x0008 - 0x0000)
struct ConditionalReward_SetConditionalReward final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCondition;                                        // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConditionalReward_SetConditionalReward) == 0x000004, "Wrong alignment on ConditionalReward_SetConditionalReward");
static_assert(sizeof(ConditionalReward_SetConditionalReward) == 0x000008, "Wrong size on ConditionalReward_SetConditionalReward");
static_assert(offsetof(ConditionalReward_SetConditionalReward, AgentId) == 0x000000, "Member 'ConditionalReward_SetConditionalReward::AgentId' has a wrong offset!");
static_assert(offsetof(ConditionalReward_SetConditionalReward, bCondition) == 0x000004, "Member 'ConditionalReward_SetConditionalReward::bCondition' has a wrong offset!");

// Function LearningAgentsTraining.ScalarVelocityReward.AddScalarVelocityReward
// 0x0020 (0x0020 - 0x0000)
struct ScalarVelocityReward_AddScalarVelocityReward final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScalarVelocityReward*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarVelocityReward_AddScalarVelocityReward) == 0x000008, "Wrong alignment on ScalarVelocityReward_AddScalarVelocityReward");
static_assert(sizeof(ScalarVelocityReward_AddScalarVelocityReward) == 0x000020, "Wrong size on ScalarVelocityReward_AddScalarVelocityReward");
static_assert(offsetof(ScalarVelocityReward_AddScalarVelocityReward, InAgentTrainer) == 0x000000, "Member 'ScalarVelocityReward_AddScalarVelocityReward::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(ScalarVelocityReward_AddScalarVelocityReward, Name_0) == 0x000008, "Member 'ScalarVelocityReward_AddScalarVelocityReward::Name_0' has a wrong offset!");
static_assert(offsetof(ScalarVelocityReward_AddScalarVelocityReward, Weight) == 0x00000C, "Member 'ScalarVelocityReward_AddScalarVelocityReward::Weight' has a wrong offset!");
static_assert(offsetof(ScalarVelocityReward_AddScalarVelocityReward, Scale) == 0x000010, "Member 'ScalarVelocityReward_AddScalarVelocityReward::Scale' has a wrong offset!");
static_assert(offsetof(ScalarVelocityReward_AddScalarVelocityReward, ReturnValue) == 0x000018, "Member 'ScalarVelocityReward_AddScalarVelocityReward::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.ScalarVelocityReward.SetScalarVelocityReward
// 0x0008 (0x0008 - 0x0000)
struct ScalarVelocityReward_SetScalarVelocityReward final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScalarVelocityReward_SetScalarVelocityReward) == 0x000004, "Wrong alignment on ScalarVelocityReward_SetScalarVelocityReward");
static_assert(sizeof(ScalarVelocityReward_SetScalarVelocityReward) == 0x000008, "Wrong size on ScalarVelocityReward_SetScalarVelocityReward");
static_assert(offsetof(ScalarVelocityReward_SetScalarVelocityReward, AgentId) == 0x000000, "Member 'ScalarVelocityReward_SetScalarVelocityReward::AgentId' has a wrong offset!");
static_assert(offsetof(ScalarVelocityReward_SetScalarVelocityReward, Velocity) == 0x000004, "Member 'ScalarVelocityReward_SetScalarVelocityReward::Velocity' has a wrong offset!");

// Function LearningAgentsTraining.LocalDirectionalVelocityReward.AddLocalDirectionalVelocityReward
// 0x0038 (0x0038 - 0x0000)
struct LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis;                                              // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalDirectionalVelocityReward*        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward) == 0x000008, "Wrong alignment on LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward");
static_assert(sizeof(LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward) == 0x000038, "Wrong size on LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward");
static_assert(offsetof(LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward, InAgentTrainer) == 0x000000, "Member 'LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward, Name_0) == 0x000008, "Member 'LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward::Name_0' has a wrong offset!");
static_assert(offsetof(LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward, Weight) == 0x00000C, "Member 'LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward::Weight' has a wrong offset!");
static_assert(offsetof(LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward, Scale) == 0x000010, "Member 'LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward::Scale' has a wrong offset!");
static_assert(offsetof(LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward, Axis) == 0x000018, "Member 'LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward::Axis' has a wrong offset!");
static_assert(offsetof(LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward, ReturnValue) == 0x000030, "Member 'LocalDirectionalVelocityReward_AddLocalDirectionalVelocityReward::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.LocalDirectionalVelocityReward.SetLocalDirectionalVelocityReward
// 0x0038 (0x0038 - 0x0000)
struct LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward) == 0x000008, "Wrong alignment on LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward");
static_assert(sizeof(LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward) == 0x000038, "Wrong size on LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward");
static_assert(offsetof(LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward, AgentId) == 0x000000, "Member 'LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward::AgentId' has a wrong offset!");
static_assert(offsetof(LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward, Velocity) == 0x000008, "Member 'LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward::Velocity' has a wrong offset!");
static_assert(offsetof(LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward, RelativeRotation) == 0x000020, "Member 'LocalDirectionalVelocityReward_SetLocalDirectionalVelocityReward::RelativeRotation' has a wrong offset!");

// Function LearningAgentsTraining.PlanarPositionDifferencePenalty.AddPlanarPositionDifferencePenalty
// 0x0050 (0x0050 - 0x0000)
struct PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis0;                                             // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1;                                             // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlanarPositionDifferencePenalty*       ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty) == 0x000008, "Wrong alignment on PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty");
static_assert(sizeof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty) == 0x000050, "Wrong size on PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty");
static_assert(offsetof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty, InAgentTrainer) == 0x000000, "Member 'PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty, Name_0) == 0x000008, "Member 'PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty::Name_0' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty, Weight) == 0x00000C, "Member 'PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty::Weight' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty, Scale) == 0x000010, "Member 'PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty::Scale' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty, Threshold) == 0x000014, "Member 'PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty::Threshold' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty, Axis0) == 0x000018, "Member 'PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty::Axis0' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty, Axis1) == 0x000030, "Member 'PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty::Axis1' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty, ReturnValue) == 0x000048, "Member 'PlanarPositionDifferencePenalty_AddPlanarPositionDifferencePenalty::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.PlanarPositionDifferencePenalty.SetPlanarPositionDifferencePenalty
// 0x0038 (0x0038 - 0x0000)
struct PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position0;                                         // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position1;                                         // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty) == 0x000008, "Wrong alignment on PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty");
static_assert(sizeof(PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty) == 0x000038, "Wrong size on PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty");
static_assert(offsetof(PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty, AgentId) == 0x000000, "Member 'PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty::AgentId' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty, Position0) == 0x000008, "Member 'PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty::Position0' has a wrong offset!");
static_assert(offsetof(PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty, Position1) == 0x000020, "Member 'PlanarPositionDifferencePenalty_SetPlanarPositionDifferencePenalty::Position1' has a wrong offset!");

// Function LearningAgentsTraining.PositionArraySimilarityReward.AddPositionArraySimilarityReward
// 0x0020 (0x0020 - 0x0000)
struct PositionArraySimilarityReward_AddPositionArraySimilarityReward final
{
public:
	class ULearningAgentsTrainer*                 InAgentTrainer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionNum;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPositionArraySimilarityReward*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PositionArraySimilarityReward_AddPositionArraySimilarityReward) == 0x000008, "Wrong alignment on PositionArraySimilarityReward_AddPositionArraySimilarityReward");
static_assert(sizeof(PositionArraySimilarityReward_AddPositionArraySimilarityReward) == 0x000020, "Wrong size on PositionArraySimilarityReward_AddPositionArraySimilarityReward");
static_assert(offsetof(PositionArraySimilarityReward_AddPositionArraySimilarityReward, InAgentTrainer) == 0x000000, "Member 'PositionArraySimilarityReward_AddPositionArraySimilarityReward::InAgentTrainer' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_AddPositionArraySimilarityReward, Name_0) == 0x000008, "Member 'PositionArraySimilarityReward_AddPositionArraySimilarityReward::Name_0' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_AddPositionArraySimilarityReward, PositionNum) == 0x00000C, "Member 'PositionArraySimilarityReward_AddPositionArraySimilarityReward::PositionNum' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_AddPositionArraySimilarityReward, Scale) == 0x000010, "Member 'PositionArraySimilarityReward_AddPositionArraySimilarityReward::Scale' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_AddPositionArraySimilarityReward, Weight) == 0x000014, "Member 'PositionArraySimilarityReward_AddPositionArraySimilarityReward::Weight' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_AddPositionArraySimilarityReward, ReturnValue) == 0x000018, "Member 'PositionArraySimilarityReward_AddPositionArraySimilarityReward::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.PositionArraySimilarityReward.SetPositionArraySimilarityReward
// 0x0088 (0x0088 - 0x0000)
struct PositionArraySimilarityReward_SetPositionArraySimilarityReward final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Positions0;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Positions1;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                RelativePosition0;                                 // 0x0028(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativePosition1;                                 // 0x0040(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation0;                                 // 0x0058(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation1;                                 // 0x0070(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PositionArraySimilarityReward_SetPositionArraySimilarityReward) == 0x000008, "Wrong alignment on PositionArraySimilarityReward_SetPositionArraySimilarityReward");
static_assert(sizeof(PositionArraySimilarityReward_SetPositionArraySimilarityReward) == 0x000088, "Wrong size on PositionArraySimilarityReward_SetPositionArraySimilarityReward");
static_assert(offsetof(PositionArraySimilarityReward_SetPositionArraySimilarityReward, AgentId) == 0x000000, "Member 'PositionArraySimilarityReward_SetPositionArraySimilarityReward::AgentId' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_SetPositionArraySimilarityReward, Positions0) == 0x000008, "Member 'PositionArraySimilarityReward_SetPositionArraySimilarityReward::Positions0' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_SetPositionArraySimilarityReward, Positions1) == 0x000018, "Member 'PositionArraySimilarityReward_SetPositionArraySimilarityReward::Positions1' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_SetPositionArraySimilarityReward, RelativePosition0) == 0x000028, "Member 'PositionArraySimilarityReward_SetPositionArraySimilarityReward::RelativePosition0' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_SetPositionArraySimilarityReward, RelativePosition1) == 0x000040, "Member 'PositionArraySimilarityReward_SetPositionArraySimilarityReward::RelativePosition1' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_SetPositionArraySimilarityReward, RelativeRotation0) == 0x000058, "Member 'PositionArraySimilarityReward_SetPositionArraySimilarityReward::RelativeRotation0' has a wrong offset!");
static_assert(offsetof(PositionArraySimilarityReward_SetPositionArraySimilarityReward, RelativeRotation1) == 0x000070, "Member 'PositionArraySimilarityReward_SetPositionArraySimilarityReward::RelativeRotation1' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.BeginTraining
// 0x00A0 (0x00A0 - 0x0000)
struct LearningAgentsTrainer_BeginTraining final
{
public:
	struct FLearningAgentsTrainerTrainingSettings TrainerTrainingSettings;                           // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLearningAgentsTrainerGameSettings     TrainerGameSettings;                               // 0x0058(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLearningAgentsTrainerPathSettings     TrainerPathSettings;                               // 0x0068(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bReinitializePolicyNetwork;                        // 0x0098(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitializeCriticNetwork;                        // 0x0099(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetAgentsOnBegin;                               // 0x009A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsTrainer_BeginTraining) == 0x000008, "Wrong alignment on LearningAgentsTrainer_BeginTraining");
static_assert(sizeof(LearningAgentsTrainer_BeginTraining) == 0x0000A0, "Wrong size on LearningAgentsTrainer_BeginTraining");
static_assert(offsetof(LearningAgentsTrainer_BeginTraining, TrainerTrainingSettings) == 0x000000, "Member 'LearningAgentsTrainer_BeginTraining::TrainerTrainingSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_BeginTraining, TrainerGameSettings) == 0x000058, "Member 'LearningAgentsTrainer_BeginTraining::TrainerGameSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_BeginTraining, TrainerPathSettings) == 0x000068, "Member 'LearningAgentsTrainer_BeginTraining::TrainerPathSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_BeginTraining, bReinitializePolicyNetwork) == 0x000098, "Member 'LearningAgentsTrainer_BeginTraining::bReinitializePolicyNetwork' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_BeginTraining, bReinitializeCriticNetwork) == 0x000099, "Member 'LearningAgentsTrainer_BeginTraining::bReinitializeCriticNetwork' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_BeginTraining, bResetAgentsOnBegin) == 0x00009A, "Member 'LearningAgentsTrainer_BeginTraining::bResetAgentsOnBegin' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.ResetEpisodes
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsTrainer_ResetEpisodes final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsTrainer_ResetEpisodes) == 0x000008, "Wrong alignment on LearningAgentsTrainer_ResetEpisodes");
static_assert(sizeof(LearningAgentsTrainer_ResetEpisodes) == 0x000010, "Wrong size on LearningAgentsTrainer_ResetEpisodes");
static_assert(offsetof(LearningAgentsTrainer_ResetEpisodes, AgentIds) == 0x000000, "Member 'LearningAgentsTrainer_ResetEpisodes::AgentIds' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.RunTraining
// 0x00A0 (0x00A0 - 0x0000)
struct LearningAgentsTrainer_RunTraining final
{
public:
	struct FLearningAgentsTrainerTrainingSettings TrainerTrainingSettings;                           // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLearningAgentsTrainerGameSettings     TrainerGameSettings;                               // 0x0058(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLearningAgentsTrainerPathSettings     TrainerPathSettings;                               // 0x0068(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bReinitializePolicyNetwork;                        // 0x0098(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitializeCriticNetwork;                        // 0x0099(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetAgentsOnBegin;                               // 0x009A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsTrainer_RunTraining) == 0x000008, "Wrong alignment on LearningAgentsTrainer_RunTraining");
static_assert(sizeof(LearningAgentsTrainer_RunTraining) == 0x0000A0, "Wrong size on LearningAgentsTrainer_RunTraining");
static_assert(offsetof(LearningAgentsTrainer_RunTraining, TrainerTrainingSettings) == 0x000000, "Member 'LearningAgentsTrainer_RunTraining::TrainerTrainingSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_RunTraining, TrainerGameSettings) == 0x000058, "Member 'LearningAgentsTrainer_RunTraining::TrainerGameSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_RunTraining, TrainerPathSettings) == 0x000068, "Member 'LearningAgentsTrainer_RunTraining::TrainerPathSettings' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_RunTraining, bReinitializePolicyNetwork) == 0x000098, "Member 'LearningAgentsTrainer_RunTraining::bReinitializePolicyNetwork' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_RunTraining, bReinitializeCriticNetwork) == 0x000099, "Member 'LearningAgentsTrainer_RunTraining::bReinitializeCriticNetwork' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_RunTraining, bResetAgentsOnBegin) == 0x00009A, "Member 'LearningAgentsTrainer_RunTraining::bResetAgentsOnBegin' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.SetCompletions
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsTrainer_SetCompletions final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsTrainer_SetCompletions) == 0x000008, "Wrong alignment on LearningAgentsTrainer_SetCompletions");
static_assert(sizeof(LearningAgentsTrainer_SetCompletions) == 0x000010, "Wrong size on LearningAgentsTrainer_SetCompletions");
static_assert(offsetof(LearningAgentsTrainer_SetCompletions, AgentIds) == 0x000000, "Member 'LearningAgentsTrainer_SetCompletions::AgentIds' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.SetRewards
// 0x0010 (0x0010 - 0x0000)
struct LearningAgentsTrainer_SetRewards final
{
public:
	TArray<int32>                                 AgentIds;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsTrainer_SetRewards) == 0x000008, "Wrong alignment on LearningAgentsTrainer_SetRewards");
static_assert(sizeof(LearningAgentsTrainer_SetRewards) == 0x000010, "Wrong size on LearningAgentsTrainer_SetRewards");
static_assert(offsetof(LearningAgentsTrainer_SetRewards, AgentIds) == 0x000000, "Member 'LearningAgentsTrainer_SetRewards::AgentIds' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.SetupTrainer
// 0x0030 (0x0030 - 0x0000)
struct LearningAgentsTrainer_SetupTrainer final
{
public:
	class ULearningAgentsInteractor*              InInteractor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULearningAgentsPolicy*                  InPolicy;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULearningAgentsCritic*                  InCritic;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLearningAgentsTrainerSettings         TrainerSettings;                                   // 0x0018(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsTrainer_SetupTrainer) == 0x000008, "Wrong alignment on LearningAgentsTrainer_SetupTrainer");
static_assert(sizeof(LearningAgentsTrainer_SetupTrainer) == 0x000030, "Wrong size on LearningAgentsTrainer_SetupTrainer");
static_assert(offsetof(LearningAgentsTrainer_SetupTrainer, InInteractor) == 0x000000, "Member 'LearningAgentsTrainer_SetupTrainer::InInteractor' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_SetupTrainer, InPolicy) == 0x000008, "Member 'LearningAgentsTrainer_SetupTrainer::InPolicy' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_SetupTrainer, InCritic) == 0x000010, "Member 'LearningAgentsTrainer_SetupTrainer::InCritic' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_SetupTrainer, TrainerSettings) == 0x000018, "Member 'LearningAgentsTrainer_SetupTrainer::TrainerSettings' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.GetReward
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsTrainer_GetReward final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsTrainer_GetReward) == 0x000004, "Wrong alignment on LearningAgentsTrainer_GetReward");
static_assert(sizeof(LearningAgentsTrainer_GetReward) == 0x000008, "Wrong size on LearningAgentsTrainer_GetReward");
static_assert(offsetof(LearningAgentsTrainer_GetReward, AgentId) == 0x000000, "Member 'LearningAgentsTrainer_GetReward::AgentId' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_GetReward, ReturnValue) == 0x000004, "Member 'LearningAgentsTrainer_GetReward::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.HasTrainingFailed
// 0x0001 (0x0001 - 0x0000)
struct LearningAgentsTrainer_HasTrainingFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsTrainer_HasTrainingFailed) == 0x000001, "Wrong alignment on LearningAgentsTrainer_HasTrainingFailed");
static_assert(sizeof(LearningAgentsTrainer_HasTrainingFailed) == 0x000001, "Wrong size on LearningAgentsTrainer_HasTrainingFailed");
static_assert(offsetof(LearningAgentsTrainer_HasTrainingFailed, ReturnValue) == 0x000000, "Member 'LearningAgentsTrainer_HasTrainingFailed::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.IsCompleted
// 0x0008 (0x0008 - 0x0000)
struct LearningAgentsTrainer_IsCompleted final
{
public:
	int32                                         AgentId;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELearningAgentsCompletion                     OutCompletion;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LearningAgentsTrainer_IsCompleted) == 0x000004, "Wrong alignment on LearningAgentsTrainer_IsCompleted");
static_assert(sizeof(LearningAgentsTrainer_IsCompleted) == 0x000008, "Wrong size on LearningAgentsTrainer_IsCompleted");
static_assert(offsetof(LearningAgentsTrainer_IsCompleted, AgentId) == 0x000000, "Member 'LearningAgentsTrainer_IsCompleted::AgentId' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_IsCompleted, OutCompletion) == 0x000004, "Member 'LearningAgentsTrainer_IsCompleted::OutCompletion' has a wrong offset!");
static_assert(offsetof(LearningAgentsTrainer_IsCompleted, ReturnValue) == 0x000005, "Member 'LearningAgentsTrainer_IsCompleted::ReturnValue' has a wrong offset!");

// Function LearningAgentsTraining.LearningAgentsTrainer.IsTraining
// 0x0001 (0x0001 - 0x0000)
struct LearningAgentsTrainer_IsTraining final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LearningAgentsTrainer_IsTraining) == 0x000001, "Wrong alignment on LearningAgentsTrainer_IsTraining");
static_assert(sizeof(LearningAgentsTrainer_IsTraining) == 0x000001, "Wrong size on LearningAgentsTrainer_IsTraining");
static_assert(offsetof(LearningAgentsTrainer_IsTraining, ReturnValue) == 0x000000, "Member 'LearningAgentsTrainer_IsTraining::ReturnValue' has a wrong offset!");

}

