#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleAudioRuntime

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"


namespace SDK
{

// ScriptStruct VehicleAudioRuntime.FortMotorSimPatternState
// 0x0030 (0x0030 - 0x0000)
struct FFortMotorSimPatternState final
{
public:
	TArray<class UCurveVector*>                   Curves;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         OnsetInterpSpeed;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleThreshold;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RpmFallRate;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMin;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMax;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RpmOffsetMin;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RpmOffsetMax;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopCurves;                                       // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMotorSimPatternState) == 0x000008, "Wrong alignment on FFortMotorSimPatternState");
static_assert(sizeof(FFortMotorSimPatternState) == 0x000030, "Wrong size on FFortMotorSimPatternState");
static_assert(offsetof(FFortMotorSimPatternState, Curves) == 0x000000, "Member 'FFortMotorSimPatternState::Curves' has a wrong offset!");
static_assert(offsetof(FFortMotorSimPatternState, OnsetInterpSpeed) == 0x000010, "Member 'FFortMotorSimPatternState::OnsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortMotorSimPatternState, ThrottleThreshold) == 0x000014, "Member 'FFortMotorSimPatternState::ThrottleThreshold' has a wrong offset!");
static_assert(offsetof(FFortMotorSimPatternState, RpmFallRate) == 0x000018, "Member 'FFortMotorSimPatternState::RpmFallRate' has a wrong offset!");
static_assert(offsetof(FFortMotorSimPatternState, SpeedMin) == 0x00001C, "Member 'FFortMotorSimPatternState::SpeedMin' has a wrong offset!");
static_assert(offsetof(FFortMotorSimPatternState, SpeedMax) == 0x000020, "Member 'FFortMotorSimPatternState::SpeedMax' has a wrong offset!");
static_assert(offsetof(FFortMotorSimPatternState, RpmOffsetMin) == 0x000024, "Member 'FFortMotorSimPatternState::RpmOffsetMin' has a wrong offset!");
static_assert(offsetof(FFortMotorSimPatternState, RpmOffsetMax) == 0x000028, "Member 'FFortMotorSimPatternState::RpmOffsetMax' has a wrong offset!");
static_assert(offsetof(FFortMotorSimPatternState, bLoopCurves) == 0x00002C, "Member 'FFortMotorSimPatternState::bLoopCurves' has a wrong offset!");

// ScriptStruct VehicleAudioRuntime.FortVehicleSoundSurfaceParam
// 0x000C (0x000C - 0x0000)
struct FFortVehicleSoundSurfaceParam final
{
public:
	EPhysicalSurface                              Surface;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortVehicleSoundSurfaceParam) == 0x000004, "Wrong alignment on FFortVehicleSoundSurfaceParam");
static_assert(sizeof(FFortVehicleSoundSurfaceParam) == 0x00000C, "Wrong size on FFortVehicleSoundSurfaceParam");
static_assert(offsetof(FFortVehicleSoundSurfaceParam, Surface) == 0x000000, "Member 'FFortVehicleSoundSurfaceParam::Surface' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundSurfaceParam, Name) == 0x000004, "Member 'FFortVehicleSoundSurfaceParam::Name' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundSurfaceParam, Value) == 0x000008, "Member 'FFortVehicleSoundSurfaceParam::Value' has a wrong offset!");

// ScriptStruct VehicleAudioRuntime.FortVehicleSoundComponent_SurfaceContext
// 0x00A8 (0x00A8 - 0x0000)
struct FFortVehicleSoundComponent_SurfaceContext final
{
public:
	float                                         BrakingHardStopThreshold;                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingSoftStopThreshold;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceParamInterpSpeed;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, EPhysicalSurface>      SurfaceMap;                                        // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   WaterParamName;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterParamInterpSpeed;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AirParamName;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirParamAttackInterpSpeed;                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirParamReleaseInterpSpeed;                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForSkidFX;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedForSkidFX;                                 // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkiddingParamName;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkiddingParamInterpSpeed;                          // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              CurrentSurface;                                    // 0x0084(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortVehicleSoundSurfaceParam>  SurfaceParams;                                     // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVehicleSoundComponent_SurfaceContext) == 0x000008, "Wrong alignment on FFortVehicleSoundComponent_SurfaceContext");
static_assert(sizeof(FFortVehicleSoundComponent_SurfaceContext) == 0x0000A8, "Wrong size on FFortVehicleSoundComponent_SurfaceContext");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, BrakingHardStopThreshold) == 0x000000, "Member 'FFortVehicleSoundComponent_SurfaceContext::BrakingHardStopThreshold' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, BrakingSoftStopThreshold) == 0x000004, "Member 'FFortVehicleSoundComponent_SurfaceContext::BrakingSoftStopThreshold' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, SurfaceParamInterpSpeed) == 0x000008, "Member 'FFortVehicleSoundComponent_SurfaceContext::SurfaceParamInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, SurfaceMap) == 0x000010, "Member 'FFortVehicleSoundComponent_SurfaceContext::SurfaceMap' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, WaterParamName) == 0x000060, "Member 'FFortVehicleSoundComponent_SurfaceContext::WaterParamName' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, WaterParamInterpSpeed) == 0x000064, "Member 'FFortVehicleSoundComponent_SurfaceContext::WaterParamInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, AirParamName) == 0x000068, "Member 'FFortVehicleSoundComponent_SurfaceContext::AirParamName' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, AirParamAttackInterpSpeed) == 0x00006C, "Member 'FFortVehicleSoundComponent_SurfaceContext::AirParamAttackInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, AirParamReleaseInterpSpeed) == 0x000070, "Member 'FFortVehicleSoundComponent_SurfaceContext::AirParamReleaseInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, MinSpeedForSkidFX) == 0x000074, "Member 'FFortVehicleSoundComponent_SurfaceContext::MinSpeedForSkidFX' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, MaxSpeedForSkidFX) == 0x000078, "Member 'FFortVehicleSoundComponent_SurfaceContext::MaxSpeedForSkidFX' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, SkiddingParamName) == 0x00007C, "Member 'FFortVehicleSoundComponent_SurfaceContext::SkiddingParamName' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, SkiddingParamInterpSpeed) == 0x000080, "Member 'FFortVehicleSoundComponent_SurfaceContext::SkiddingParamInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, CurrentSurface) == 0x000084, "Member 'FFortVehicleSoundComponent_SurfaceContext::CurrentSurface' has a wrong offset!");
static_assert(offsetof(FFortVehicleSoundComponent_SurfaceContext, SurfaceParams) == 0x000088, "Member 'FFortVehicleSoundComponent_SurfaceContext::SurfaceParams' has a wrong offset!");

}

