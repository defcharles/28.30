#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarCore

#include "Basic.hpp"

#include "DelMarCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "LinkId_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function DelMarCore.DelMarGhostSessionComponent.IsSessionActive
// 0x0001 (0x0001 - 0x0000)
struct DelMarGhostSessionComponent_IsSessionActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGhostSessionComponent_IsSessionActive) == 0x000001, "Wrong alignment on DelMarGhostSessionComponent_IsSessionActive");
static_assert(sizeof(DelMarGhostSessionComponent_IsSessionActive) == 0x000001, "Wrong size on DelMarGhostSessionComponent_IsSessionActive");
static_assert(offsetof(DelMarGhostSessionComponent_IsSessionActive, ReturnValue) == 0x000000, "Member 'DelMarGhostSessionComponent_IsSessionActive::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarGhostPlaybackSessionComponent.SetPlaybackLog
// 0x0008 (0x0008 - 0x0000)
struct DelMarGhostPlaybackSessionComponent_SetPlaybackLog final
{
public:
	class UDelMarGhostReplayLog*                  InLog;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGhostPlaybackSessionComponent_SetPlaybackLog) == 0x000008, "Wrong alignment on DelMarGhostPlaybackSessionComponent_SetPlaybackLog");
static_assert(sizeof(DelMarGhostPlaybackSessionComponent_SetPlaybackLog) == 0x000008, "Wrong size on DelMarGhostPlaybackSessionComponent_SetPlaybackLog");
static_assert(offsetof(DelMarGhostPlaybackSessionComponent_SetPlaybackLog, InLog) == 0x000000, "Member 'DelMarGhostPlaybackSessionComponent_SetPlaybackLog::InLog' has a wrong offset!");

// Function DelMarCore.DelMarAIController.HandleGroundedStateChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarAIController_HandleGroundedStateChanged final
{
public:
	TScriptInterface<class IDelMarVehicleInterface> VehicleRef;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarAIController_HandleGroundedStateChanged) == 0x000008, "Wrong alignment on DelMarAIController_HandleGroundedStateChanged");
static_assert(sizeof(DelMarAIController_HandleGroundedStateChanged) == 0x000018, "Wrong size on DelMarAIController_HandleGroundedStateChanged");
static_assert(offsetof(DelMarAIController_HandleGroundedStateChanged, VehicleRef) == 0x000000, "Member 'DelMarAIController_HandleGroundedStateChanged::VehicleRef' has a wrong offset!");
static_assert(offsetof(DelMarAIController_HandleGroundedStateChanged, bValue) == 0x000010, "Member 'DelMarAIController_HandleGroundedStateChanged::bValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceMusicPlaylistComponent.SetMusicPlaylist
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceMusicPlaylistComponent_SetMusicPlaylist final
{
public:
	class UDelMarRaceMusicPlaylist*               SetPlaylist;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMusic;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarRaceMusicPlaylistComponent_SetMusicPlaylist) == 0x000008, "Wrong alignment on DelMarRaceMusicPlaylistComponent_SetMusicPlaylist");
static_assert(sizeof(DelMarRaceMusicPlaylistComponent_SetMusicPlaylist) == 0x000010, "Wrong size on DelMarRaceMusicPlaylistComponent_SetMusicPlaylist");
static_assert(offsetof(DelMarRaceMusicPlaylistComponent_SetMusicPlaylist, SetPlaylist) == 0x000000, "Member 'DelMarRaceMusicPlaylistComponent_SetMusicPlaylist::SetPlaylist' has a wrong offset!");
static_assert(offsetof(DelMarRaceMusicPlaylistComponent_SetMusicPlaylist, bEnableMusic) == 0x000008, "Member 'DelMarRaceMusicPlaylistComponent_SetMusicPlaylist::bEnableMusic' has a wrong offset!");

// Function DelMarCore.DelMarAIService.GetRegisteredAIBotControllers
// 0x0010 (0x0010 - 0x0000)
struct DelMarAIService_GetRegisteredAIBotControllers final
{
public:
	TArray<class ADelMarAIController*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAIService_GetRegisteredAIBotControllers) == 0x000008, "Wrong alignment on DelMarAIService_GetRegisteredAIBotControllers");
static_assert(sizeof(DelMarAIService_GetRegisteredAIBotControllers) == 0x000010, "Wrong size on DelMarAIService_GetRegisteredAIBotControllers");
static_assert(offsetof(DelMarAIService_GetRegisteredAIBotControllers, ReturnValue) == 0x000000, "Member 'DelMarAIService_GetRegisteredAIBotControllers::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarAIService.HandlePlayerRegistered
// 0x0008 (0x0008 - 0x0000)
struct DelMarAIService_HandlePlayerRegistered final
{
public:
	class AFortPlayerState*                       RegisteredPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAIService_HandlePlayerRegistered) == 0x000008, "Wrong alignment on DelMarAIService_HandlePlayerRegistered");
static_assert(sizeof(DelMarAIService_HandlePlayerRegistered) == 0x000008, "Wrong size on DelMarAIService_HandlePlayerRegistered");
static_assert(offsetof(DelMarAIService_HandlePlayerRegistered, RegisteredPlayerState) == 0x000000, "Member 'DelMarAIService_HandlePlayerRegistered::RegisteredPlayerState' has a wrong offset!");

// Function DelMarCore.DelMarAIService.HandlePlayerUnregistered
// 0x0010 (0x0010 - 0x0000)
struct DelMarAIService_HandlePlayerUnregistered final
{
public:
	class AFortPlayerState*                       UnregisteredPlayerState;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAsInactive;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarAIService_HandlePlayerUnregistered) == 0x000008, "Wrong alignment on DelMarAIService_HandlePlayerUnregistered");
static_assert(sizeof(DelMarAIService_HandlePlayerUnregistered) == 0x000010, "Wrong size on DelMarAIService_HandlePlayerUnregistered");
static_assert(offsetof(DelMarAIService_HandlePlayerUnregistered, UnregisteredPlayerState) == 0x000000, "Member 'DelMarAIService_HandlePlayerUnregistered::UnregisteredPlayerState' has a wrong offset!");
static_assert(offsetof(DelMarAIService_HandlePlayerUnregistered, bSetAsInactive) == 0x000008, "Member 'DelMarAIService_HandlePlayerUnregistered::bSetAsInactive' has a wrong offset!");

// Function DelMarCore.DelMarAIService.GetMaxNumberOfPlayers
// 0x0004 (0x0004 - 0x0000)
struct DelMarAIService_GetMaxNumberOfPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAIService_GetMaxNumberOfPlayers) == 0x000004, "Wrong alignment on DelMarAIService_GetMaxNumberOfPlayers");
static_assert(sizeof(DelMarAIService_GetMaxNumberOfPlayers) == 0x000004, "Wrong size on DelMarAIService_GetMaxNumberOfPlayers");
static_assert(offsetof(DelMarAIService_GetMaxNumberOfPlayers, ReturnValue) == 0x000000, "Member 'DelMarAIService_GetMaxNumberOfPlayers::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.FinalizeRegisteredPlayerInitialization
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_FinalizeRegisteredPlayerInitialization final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_FinalizeRegisteredPlayerInitialization) == 0x000008, "Wrong alignment on DelMarRaceManager_FinalizeRegisteredPlayerInitialization");
static_assert(sizeof(DelMarRaceManager_FinalizeRegisteredPlayerInitialization) == 0x000008, "Wrong size on DelMarRaceManager_FinalizeRegisteredPlayerInitialization");
static_assert(offsetof(DelMarRaceManager_FinalizeRegisteredPlayerInitialization, PlayerState) == 0x000000, "Member 'DelMarRaceManager_FinalizeRegisteredPlayerInitialization::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.HandleRegisteredPlayerPawnSet
// 0x0018 (0x0018 - 0x0000)
struct DelMarRaceManager_HandleRegisteredPlayerPawnSet final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  OldPawn;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_HandleRegisteredPlayerPawnSet) == 0x000008, "Wrong alignment on DelMarRaceManager_HandleRegisteredPlayerPawnSet");
static_assert(sizeof(DelMarRaceManager_HandleRegisteredPlayerPawnSet) == 0x000018, "Wrong size on DelMarRaceManager_HandleRegisteredPlayerPawnSet");
static_assert(offsetof(DelMarRaceManager_HandleRegisteredPlayerPawnSet, Player) == 0x000000, "Member 'DelMarRaceManager_HandleRegisteredPlayerPawnSet::Player' has a wrong offset!");
static_assert(offsetof(DelMarRaceManager_HandleRegisteredPlayerPawnSet, NewPawn) == 0x000008, "Member 'DelMarRaceManager_HandleRegisteredPlayerPawnSet::NewPawn' has a wrong offset!");
static_assert(offsetof(DelMarRaceManager_HandleRegisteredPlayerPawnSet, OldPawn) == 0x000010, "Member 'DelMarRaceManager_HandleRegisteredPlayerPawnSet::OldPawn' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.NetMulticast_FinishRace
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_NetMulticast_FinishRace final
{
public:
	double                                        RaceFinishedTime;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_NetMulticast_FinishRace) == 0x000008, "Wrong alignment on DelMarRaceManager_NetMulticast_FinishRace");
static_assert(sizeof(DelMarRaceManager_NetMulticast_FinishRace) == 0x000008, "Wrong size on DelMarRaceManager_NetMulticast_FinishRace");
static_assert(offsetof(DelMarRaceManager_NetMulticast_FinishRace, RaceFinishedTime) == 0x000000, "Member 'DelMarRaceManager_NetMulticast_FinishRace::RaceFinishedTime' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.NetMulticast_ResetRace
// 0x0001 (0x0001 - 0x0000)
struct DelMarRaceManager_NetMulticast_ResetRace final
{
public:
	bool                                          bNextRound;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_NetMulticast_ResetRace) == 0x000001, "Wrong alignment on DelMarRaceManager_NetMulticast_ResetRace");
static_assert(sizeof(DelMarRaceManager_NetMulticast_ResetRace) == 0x000001, "Wrong size on DelMarRaceManager_NetMulticast_ResetRace");
static_assert(offsetof(DelMarRaceManager_NetMulticast_ResetRace, bNextRound) == 0x000000, "Member 'DelMarRaceManager_NetMulticast_ResetRace::bNextRound' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.NetMulticast_ResetRun
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManager_NetMulticast_ResetRun final
{
public:
	const class AFortPlayerState*                 InPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerTriggered;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarRaceManager_NetMulticast_ResetRun) == 0x000008, "Wrong alignment on DelMarRaceManager_NetMulticast_ResetRun");
static_assert(sizeof(DelMarRaceManager_NetMulticast_ResetRun) == 0x000010, "Wrong size on DelMarRaceManager_NetMulticast_ResetRun");
static_assert(offsetof(DelMarRaceManager_NetMulticast_ResetRun, InPlayerState) == 0x000000, "Member 'DelMarRaceManager_NetMulticast_ResetRun::InPlayerState' has a wrong offset!");
static_assert(offsetof(DelMarRaceManager_NetMulticast_ResetRun, bPlayerTriggered) == 0x000008, "Member 'DelMarRaceManager_NetMulticast_ResetRun::bPlayerTriggered' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.RegisterPlayerController
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_RegisterPlayerController final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_RegisterPlayerController) == 0x000008, "Wrong alignment on DelMarRaceManager_RegisterPlayerController");
static_assert(sizeof(DelMarRaceManager_RegisterPlayerController) == 0x000008, "Wrong size on DelMarRaceManager_RegisterPlayerController");
static_assert(offsetof(DelMarRaceManager_RegisterPlayerController, InController) == 0x000000, "Member 'DelMarRaceManager_RegisterPlayerController::InController' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.RegisterPlayerState
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_RegisterPlayerState final
{
public:
	class AFortPlayerState*                       InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_RegisterPlayerState) == 0x000008, "Wrong alignment on DelMarRaceManager_RegisterPlayerState");
static_assert(sizeof(DelMarRaceManager_RegisterPlayerState) == 0x000008, "Wrong size on DelMarRaceManager_RegisterPlayerState");
static_assert(offsetof(DelMarRaceManager_RegisterPlayerState, InPlayerState) == 0x000000, "Member 'DelMarRaceManager_RegisterPlayerState::InPlayerState' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.RequestStartRace
// 0x0001 (0x0001 - 0x0000)
struct DelMarRaceManager_RequestStartRace final
{
public:
	bool                                          bSkipCountdown;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_RequestStartRace) == 0x000001, "Wrong alignment on DelMarRaceManager_RequestStartRace");
static_assert(sizeof(DelMarRaceManager_RequestStartRace) == 0x000001, "Wrong size on DelMarRaceManager_RequestStartRace");
static_assert(offsetof(DelMarRaceManager_RequestStartRace, bSkipCountdown) == 0x000000, "Member 'DelMarRaceManager_RequestStartRace::bSkipCountdown' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.ResetRace
// 0x0001 (0x0001 - 0x0000)
struct DelMarRaceManager_ResetRace final
{
public:
	bool                                          bIsRoundReset;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_ResetRace) == 0x000001, "Wrong alignment on DelMarRaceManager_ResetRace");
static_assert(sizeof(DelMarRaceManager_ResetRace) == 0x000001, "Wrong size on DelMarRaceManager_ResetRace");
static_assert(offsetof(DelMarRaceManager_ResetRace, bIsRoundReset) == 0x000000, "Member 'DelMarRaceManager_ResetRace::bIsRoundReset' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.ResetRun
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManager_ResetRun final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerTriggered;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarRaceManager_ResetRun) == 0x000008, "Wrong alignment on DelMarRaceManager_ResetRun");
static_assert(sizeof(DelMarRaceManager_ResetRun) == 0x000010, "Wrong size on DelMarRaceManager_ResetRun");
static_assert(offsetof(DelMarRaceManager_ResetRun, PlayerState) == 0x000000, "Member 'DelMarRaceManager_ResetRun::PlayerState' has a wrong offset!");
static_assert(offsetof(DelMarRaceManager_ResetRun, bPlayerTriggered) == 0x000008, "Member 'DelMarRaceManager_ResetRun::bPlayerTriggered' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.SetActiveRaceLevelConfig
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_SetActiveRaceLevelConfig final
{
public:
	class ADelMarRaceLevelConfig*                 InRaceLevelConfig;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_SetActiveRaceLevelConfig) == 0x000008, "Wrong alignment on DelMarRaceManager_SetActiveRaceLevelConfig");
static_assert(sizeof(DelMarRaceManager_SetActiveRaceLevelConfig) == 0x000008, "Wrong size on DelMarRaceManager_SetActiveRaceLevelConfig");
static_assert(offsetof(DelMarRaceManager_SetActiveRaceLevelConfig, InRaceLevelConfig) == 0x000000, "Member 'DelMarRaceManager_SetActiveRaceLevelConfig::InRaceLevelConfig' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.SetPlayerAsSpectator
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_SetPlayerAsSpectator final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_SetPlayerAsSpectator) == 0x000008, "Wrong alignment on DelMarRaceManager_SetPlayerAsSpectator");
static_assert(sizeof(DelMarRaceManager_SetPlayerAsSpectator) == 0x000008, "Wrong size on DelMarRaceManager_SetPlayerAsSpectator");
static_assert(offsetof(DelMarRaceManager_SetPlayerAsSpectator, PlayerState) == 0x000000, "Member 'DelMarRaceManager_SetPlayerAsSpectator::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.SetSpectatorAsPlayer
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_SetSpectatorAsPlayer final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_SetSpectatorAsPlayer) == 0x000008, "Wrong alignment on DelMarRaceManager_SetSpectatorAsPlayer");
static_assert(sizeof(DelMarRaceManager_SetSpectatorAsPlayer) == 0x000008, "Wrong size on DelMarRaceManager_SetSpectatorAsPlayer");
static_assert(offsetof(DelMarRaceManager_SetSpectatorAsPlayer, PlayerState) == 0x000000, "Member 'DelMarRaceManager_SetSpectatorAsPlayer::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.UnregisterAllPlayers
// 0x0001 (0x0001 - 0x0000)
struct DelMarRaceManager_UnregisterAllPlayers final
{
public:
	bool                                          bSetAsInactive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_UnregisterAllPlayers) == 0x000001, "Wrong alignment on DelMarRaceManager_UnregisterAllPlayers");
static_assert(sizeof(DelMarRaceManager_UnregisterAllPlayers) == 0x000001, "Wrong size on DelMarRaceManager_UnregisterAllPlayers");
static_assert(offsetof(DelMarRaceManager_UnregisterAllPlayers, bSetAsInactive) == 0x000000, "Member 'DelMarRaceManager_UnregisterAllPlayers::bSetAsInactive' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.UnregisterPlayerController
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManager_UnregisterPlayerController final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAsInactive;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarRaceManager_UnregisterPlayerController) == 0x000008, "Wrong alignment on DelMarRaceManager_UnregisterPlayerController");
static_assert(sizeof(DelMarRaceManager_UnregisterPlayerController) == 0x000010, "Wrong size on DelMarRaceManager_UnregisterPlayerController");
static_assert(offsetof(DelMarRaceManager_UnregisterPlayerController, InController) == 0x000000, "Member 'DelMarRaceManager_UnregisterPlayerController::InController' has a wrong offset!");
static_assert(offsetof(DelMarRaceManager_UnregisterPlayerController, bSetAsInactive) == 0x000008, "Member 'DelMarRaceManager_UnregisterPlayerController::bSetAsInactive' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.UnregisterPlayerState
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManager_UnregisterPlayerState final
{
public:
	class AFortPlayerState*                       InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAsInactive;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarRaceManager_UnregisterPlayerState) == 0x000008, "Wrong alignment on DelMarRaceManager_UnregisterPlayerState");
static_assert(sizeof(DelMarRaceManager_UnregisterPlayerState) == 0x000010, "Wrong size on DelMarRaceManager_UnregisterPlayerState");
static_assert(offsetof(DelMarRaceManager_UnregisterPlayerState, InPlayerState) == 0x000000, "Member 'DelMarRaceManager_UnregisterPlayerState::InPlayerState' has a wrong offset!");
static_assert(offsetof(DelMarRaceManager_UnregisterPlayerState, bSetAsInactive) == 0x000008, "Member 'DelMarRaceManager_UnregisterPlayerState::bSetAsInactive' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetActiveRaceLevelConfig
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_GetActiveRaceLevelConfig final
{
public:
	class ADelMarRaceLevelConfig*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetActiveRaceLevelConfig) == 0x000008, "Wrong alignment on DelMarRaceManager_GetActiveRaceLevelConfig");
static_assert(sizeof(DelMarRaceManager_GetActiveRaceLevelConfig) == 0x000008, "Wrong size on DelMarRaceManager_GetActiveRaceLevelConfig");
static_assert(offsetof(DelMarRaceManager_GetActiveRaceLevelConfig, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetActiveRaceLevelConfig::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetActiveRacers
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManager_GetActiveRacers final
{
public:
	TArray<class AFortPlayerState*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetActiveRacers) == 0x000008, "Wrong alignment on DelMarRaceManager_GetActiveRacers");
static_assert(sizeof(DelMarRaceManager_GetActiveRacers) == 0x000010, "Wrong size on DelMarRaceManager_GetActiveRacers");
static_assert(offsetof(DelMarRaceManager_GetActiveRacers, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetActiveRacers::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetCurrentRaceMode
// 0x0001 (0x0001 - 0x0000)
struct DelMarRaceManager_GetCurrentRaceMode final
{
public:
	EDelMarRaceMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetCurrentRaceMode) == 0x000001, "Wrong alignment on DelMarRaceManager_GetCurrentRaceMode");
static_assert(sizeof(DelMarRaceManager_GetCurrentRaceMode) == 0x000001, "Wrong size on DelMarRaceManager_GetCurrentRaceMode");
static_assert(offsetof(DelMarRaceManager_GetCurrentRaceMode, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetCurrentRaceMode::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetCurrentSpawnMode
// 0x0001 (0x0001 - 0x0000)
struct DelMarRaceManager_GetCurrentSpawnMode final
{
public:
	EDelMarRaceSpawnMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetCurrentSpawnMode) == 0x000001, "Wrong alignment on DelMarRaceManager_GetCurrentSpawnMode");
static_assert(sizeof(DelMarRaceManager_GetCurrentSpawnMode) == 0x000001, "Wrong size on DelMarRaceManager_GetCurrentSpawnMode");
static_assert(offsetof(DelMarRaceManager_GetCurrentSpawnMode, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetCurrentSpawnMode::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetEliminationManagerComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_GetEliminationManagerComponent final
{
public:
	class UDelMarEliminationRaceManagerComponent* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetEliminationManagerComponent) == 0x000008, "Wrong alignment on DelMarRaceManager_GetEliminationManagerComponent");
static_assert(sizeof(DelMarRaceManager_GetEliminationManagerComponent) == 0x000008, "Wrong size on DelMarRaceManager_GetEliminationManagerComponent");
static_assert(offsetof(DelMarRaceManager_GetEliminationManagerComponent, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetEliminationManagerComponent::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetManagedPlayerStatesArray
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManager_GetManagedPlayerStatesArray final
{
public:
	TArray<class AFortPlayerState*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetManagedPlayerStatesArray) == 0x000008, "Wrong alignment on DelMarRaceManager_GetManagedPlayerStatesArray");
static_assert(sizeof(DelMarRaceManager_GetManagedPlayerStatesArray) == 0x000010, "Wrong size on DelMarRaceManager_GetManagedPlayerStatesArray");
static_assert(offsetof(DelMarRaceManager_GetManagedPlayerStatesArray, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetManagedPlayerStatesArray::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetNumberOfLapsForRace
// 0x0004 (0x0004 - 0x0000)
struct DelMarRaceManager_GetNumberOfLapsForRace final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetNumberOfLapsForRace) == 0x000004, "Wrong alignment on DelMarRaceManager_GetNumberOfLapsForRace");
static_assert(sizeof(DelMarRaceManager_GetNumberOfLapsForRace) == 0x000004, "Wrong size on DelMarRaceManager_GetNumberOfLapsForRace");
static_assert(offsetof(DelMarRaceManager_GetNumberOfLapsForRace, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetNumberOfLapsForRace::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetNumInactiveRacers
// 0x0004 (0x0004 - 0x0000)
struct DelMarRaceManager_GetNumInactiveRacers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetNumInactiveRacers) == 0x000004, "Wrong alignment on DelMarRaceManager_GetNumInactiveRacers");
static_assert(sizeof(DelMarRaceManager_GetNumInactiveRacers) == 0x000004, "Wrong size on DelMarRaceManager_GetNumInactiveRacers");
static_assert(offsetof(DelMarRaceManager_GetNumInactiveRacers, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetNumInactiveRacers::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetPositionalTracker
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_GetPositionalTracker final
{
public:
	class UDelMarPositionalTrackerComponent*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetPositionalTracker) == 0x000008, "Wrong alignment on DelMarRaceManager_GetPositionalTracker");
static_assert(sizeof(DelMarRaceManager_GetPositionalTracker) == 0x000008, "Wrong size on DelMarRaceManager_GetPositionalTracker");
static_assert(offsetof(DelMarRaceManager_GetPositionalTracker, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetPositionalTracker::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetRaceConfig
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_GetRaceConfig final
{
public:
	class UDelMarRaceConfigComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetRaceConfig) == 0x000008, "Wrong alignment on DelMarRaceManager_GetRaceConfig");
static_assert(sizeof(DelMarRaceManager_GetRaceConfig) == 0x000008, "Wrong size on DelMarRaceManager_GetRaceConfig");
static_assert(offsetof(DelMarRaceManager_GetRaceConfig, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetRaceConfig::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetRespawnManagerComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_GetRespawnManagerComponent final
{
public:
	class UDelMarRespawnManagerComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetRespawnManagerComponent) == 0x000008, "Wrong alignment on DelMarRaceManager_GetRespawnManagerComponent");
static_assert(sizeof(DelMarRaceManager_GetRespawnManagerComponent) == 0x000008, "Wrong size on DelMarRaceManager_GetRespawnManagerComponent");
static_assert(offsetof(DelMarRaceManager_GetRespawnManagerComponent, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetRespawnManagerComponent::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetRubberbandingManager
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_GetRubberbandingManager final
{
public:
	class UDelMarRubberbandingManagerComponent*   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetRubberbandingManager) == 0x000008, "Wrong alignment on DelMarRaceManager_GetRubberbandingManager");
static_assert(sizeof(DelMarRaceManager_GetRubberbandingManager) == 0x000008, "Wrong size on DelMarRaceManager_GetRubberbandingManager");
static_assert(offsetof(DelMarRaceManager_GetRubberbandingManager, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetRubberbandingManager::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetSpectators
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManager_GetSpectators final
{
public:
	TArray<class AFortPlayerState*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetSpectators) == 0x000008, "Wrong alignment on DelMarRaceManager_GetSpectators");
static_assert(sizeof(DelMarRaceManager_GetSpectators) == 0x000010, "Wrong size on DelMarRaceManager_GetSpectators");
static_assert(offsetof(DelMarRaceManager_GetSpectators, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetSpectators::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.GetTimeManager
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_GetTimeManager final
{
public:
	class UDelMarTimeManagerComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_GetTimeManager) == 0x000008, "Wrong alignment on DelMarRaceManager_GetTimeManager");
static_assert(sizeof(DelMarRaceManager_GetTimeManager) == 0x000008, "Wrong size on DelMarRaceManager_GetTimeManager");
static_assert(offsetof(DelMarRaceManager_GetTimeManager, ReturnValue) == 0x000000, "Member 'DelMarRaceManager_GetTimeManager::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.IsActiveRacer
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManager_IsActiveRacer final
{
public:
	const class AFortPlayerState*                 PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarRaceManager_IsActiveRacer) == 0x000008, "Wrong alignment on DelMarRaceManager_IsActiveRacer");
static_assert(sizeof(DelMarRaceManager_IsActiveRacer) == 0x000010, "Wrong size on DelMarRaceManager_IsActiveRacer");
static_assert(offsetof(DelMarRaceManager_IsActiveRacer, PlayerState) == 0x000000, "Member 'DelMarRaceManager_IsActiveRacer::PlayerState' has a wrong offset!");
static_assert(offsetof(DelMarRaceManager_IsActiveRacer, ReturnValue) == 0x000008, "Member 'DelMarRaceManager_IsActiveRacer::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.IsSpectator
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManager_IsSpectator final
{
public:
	const class AFortPlayerState*                 PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarRaceManager_IsSpectator) == 0x000008, "Wrong alignment on DelMarRaceManager_IsSpectator");
static_assert(sizeof(DelMarRaceManager_IsSpectator) == 0x000010, "Wrong size on DelMarRaceManager_IsSpectator");
static_assert(offsetof(DelMarRaceManager_IsSpectator, PlayerState) == 0x000000, "Member 'DelMarRaceManager_IsSpectator::PlayerState' has a wrong offset!");
static_assert(offsetof(DelMarRaceManager_IsSpectator, ReturnValue) == 0x000008, "Member 'DelMarRaceManager_IsSpectator::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManager.RequestCountdownForPlayer
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceManager_RequestCountdownForPlayer final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManager_RequestCountdownForPlayer) == 0x000008, "Wrong alignment on DelMarRaceManager_RequestCountdownForPlayer");
static_assert(sizeof(DelMarRaceManager_RequestCountdownForPlayer) == 0x000008, "Wrong size on DelMarRaceManager_RequestCountdownForPlayer");
static_assert(offsetof(DelMarRaceManager_RequestCountdownForPlayer, PlayerState) == 0x000000, "Member 'DelMarRaceManager_RequestCountdownForPlayer::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarTutorialRaceManager.NetMulticast_TutorialSectionChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged final
{
public:
	const class AFortPlayerState*                 PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIndex;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevSectionIndex;                                  // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged) == 0x000008, "Wrong alignment on DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged");
static_assert(sizeof(DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged) == 0x000010, "Wrong size on DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged");
static_assert(offsetof(DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged, PlayerState) == 0x000000, "Member 'DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged, SectionIndex) == 0x000008, "Member 'DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged::SectionIndex' has a wrong offset!");
static_assert(offsetof(DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged, PrevSectionIndex) == 0x00000C, "Member 'DelMarTutorialRaceManager_NetMulticast_TutorialSectionChanged::PrevSectionIndex' has a wrong offset!");

// Function DelMarCore.DelMarTutorialRaceManager.RequestNextTutorialSection
// 0x0008 (0x0008 - 0x0000)
struct DelMarTutorialRaceManager_RequestNextTutorialSection final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialRaceManager_RequestNextTutorialSection) == 0x000008, "Wrong alignment on DelMarTutorialRaceManager_RequestNextTutorialSection");
static_assert(sizeof(DelMarTutorialRaceManager_RequestNextTutorialSection) == 0x000008, "Wrong size on DelMarTutorialRaceManager_RequestNextTutorialSection");
static_assert(offsetof(DelMarTutorialRaceManager_RequestNextTutorialSection, PlayerState) == 0x000000, "Member 'DelMarTutorialRaceManager_RequestNextTutorialSection::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarTutorialRaceManager.RequestPrevTutorialSection
// 0x0008 (0x0008 - 0x0000)
struct DelMarTutorialRaceManager_RequestPrevTutorialSection final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialRaceManager_RequestPrevTutorialSection) == 0x000008, "Wrong alignment on DelMarTutorialRaceManager_RequestPrevTutorialSection");
static_assert(sizeof(DelMarTutorialRaceManager_RequestPrevTutorialSection) == 0x000008, "Wrong size on DelMarTutorialRaceManager_RequestPrevTutorialSection");
static_assert(offsetof(DelMarTutorialRaceManager_RequestPrevTutorialSection, PlayerState) == 0x000000, "Member 'DelMarTutorialRaceManager_RequestPrevTutorialSection::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarTutorialRaceManager.SetCurrentTutorialSection
// 0x0010 (0x0010 - 0x0000)
struct DelMarTutorialRaceManager_SetCurrentTutorialSection final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialRaceManager_SetCurrentTutorialSection) == 0x000008, "Wrong alignment on DelMarTutorialRaceManager_SetCurrentTutorialSection");
static_assert(sizeof(DelMarTutorialRaceManager_SetCurrentTutorialSection) == 0x000010, "Wrong size on DelMarTutorialRaceManager_SetCurrentTutorialSection");
static_assert(offsetof(DelMarTutorialRaceManager_SetCurrentTutorialSection, SectionIndex) == 0x000000, "Member 'DelMarTutorialRaceManager_SetCurrentTutorialSection::SectionIndex' has a wrong offset!");
static_assert(offsetof(DelMarTutorialRaceManager_SetCurrentTutorialSection, PlayerState) == 0x000008, "Member 'DelMarTutorialRaceManager_SetCurrentTutorialSection::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarSpeedUpDevice.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct DelMarSpeedUpDevice_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSpeedUpDevice_OnBeginOverlap) == 0x000008, "Wrong alignment on DelMarSpeedUpDevice_OnBeginOverlap");
static_assert(sizeof(DelMarSpeedUpDevice_OnBeginOverlap) == 0x000108, "Wrong size on DelMarSpeedUpDevice_OnBeginOverlap");
static_assert(offsetof(DelMarSpeedUpDevice_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'DelMarSpeedUpDevice_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(DelMarSpeedUpDevice_OnBeginOverlap, OtherActor) == 0x000008, "Member 'DelMarSpeedUpDevice_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarSpeedUpDevice_OnBeginOverlap, OtherComp) == 0x000010, "Member 'DelMarSpeedUpDevice_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(DelMarSpeedUpDevice_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'DelMarSpeedUpDevice_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(DelMarSpeedUpDevice_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'DelMarSpeedUpDevice_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(DelMarSpeedUpDevice_OnBeginOverlap, SweepResult) == 0x000020, "Member 'DelMarSpeedUpDevice_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function DelMarCore.DelMarSpeedUpDevice.ShouldGrantSpeedEffect
// 0x0010 (0x0010 - 0x0000)
struct DelMarSpeedUpDevice_ShouldGrantSpeedEffect final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarSpeedUpDevice_ShouldGrantSpeedEffect) == 0x000008, "Wrong alignment on DelMarSpeedUpDevice_ShouldGrantSpeedEffect");
static_assert(sizeof(DelMarSpeedUpDevice_ShouldGrantSpeedEffect) == 0x000010, "Wrong size on DelMarSpeedUpDevice_ShouldGrantSpeedEffect");
static_assert(offsetof(DelMarSpeedUpDevice_ShouldGrantSpeedEffect, OtherActor) == 0x000000, "Member 'DelMarSpeedUpDevice_ShouldGrantSpeedEffect::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarSpeedUpDevice_ShouldGrantSpeedEffect, ReturnValue) == 0x000008, "Member 'DelMarSpeedUpDevice_ShouldGrantSpeedEffect::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceManagerVerbComponent.HandleFinalRacePositionsChanged
// 0x0060 (0x0060 - 0x0000)
struct DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged final
{
public:
	TArray<struct FDelMarFinalRacePositionEntry>  FinalRacePositions;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDelMarEvent_RunRecorded               RecordedRun;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged) == 0x000008, "Wrong alignment on DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged");
static_assert(sizeof(DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged) == 0x000060, "Wrong size on DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged");
static_assert(offsetof(DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged, FinalRacePositions) == 0x000000, "Member 'DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged::FinalRacePositions' has a wrong offset!");
static_assert(offsetof(DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged, RecordedRun) == 0x000010, "Member 'DelMarRaceManagerVerbComponent_HandleFinalRacePositionsChanged::RecordedRun' has a wrong offset!");

// Function DelMarCore.DelMarRaceManagerVerbComponent.HandlePlayerLapCompleted
// 0x0020 (0x0020 - 0x0000)
struct DelMarRaceManagerVerbComponent_HandlePlayerLapCompleted final
{
public:
	struct FDelMarEvent_LapComplete               LapCompleteEvent;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManagerVerbComponent_HandlePlayerLapCompleted) == 0x000008, "Wrong alignment on DelMarRaceManagerVerbComponent_HandlePlayerLapCompleted");
static_assert(sizeof(DelMarRaceManagerVerbComponent_HandlePlayerLapCompleted) == 0x000020, "Wrong size on DelMarRaceManagerVerbComponent_HandlePlayerLapCompleted");
static_assert(offsetof(DelMarRaceManagerVerbComponent_HandlePlayerLapCompleted, LapCompleteEvent) == 0x000000, "Member 'DelMarRaceManagerVerbComponent_HandlePlayerLapCompleted::LapCompleteEvent' has a wrong offset!");

// Function DelMarCore.DelMarRaceManagerVerbComponent.HandlePlayerPositionsChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceManagerVerbComponent_HandlePlayerPositionsChanged final
{
public:
	TArray<class AFortPlayerState*>               RacePositions;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceManagerVerbComponent_HandlePlayerPositionsChanged) == 0x000008, "Wrong alignment on DelMarRaceManagerVerbComponent_HandlePlayerPositionsChanged");
static_assert(sizeof(DelMarRaceManagerVerbComponent_HandlePlayerPositionsChanged) == 0x000010, "Wrong size on DelMarRaceManagerVerbComponent_HandlePlayerPositionsChanged");
static_assert(offsetof(DelMarRaceManagerVerbComponent_HandlePlayerPositionsChanged, RacePositions) == 0x000000, "Member 'DelMarRaceManagerVerbComponent_HandlePlayerPositionsChanged::RacePositions' has a wrong offset!");

// Function DelMarCore.DelMarBTTask_DriveTrack.HandleVehicleGroundedStateChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged final
{
public:
	TScriptInterface<class IDelMarVehicleInterface> VehicleRef;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged) == 0x000008, "Wrong alignment on DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged");
static_assert(sizeof(DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged) == 0x000018, "Wrong size on DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged");
static_assert(offsetof(DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged, VehicleRef) == 0x000000, "Member 'DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged::VehicleRef' has a wrong offset!");
static_assert(offsetof(DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged, bValue) == 0x000010, "Member 'DelMarBTTask_DriveTrack_HandleVehicleGroundedStateChanged::bValue' has a wrong offset!");

// Function DelMarCore.DelMarBTTask_DriveTrack.TurboBonusZoneStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarBTTask_DriveTrack_TurboBonusZoneStateChanged final
{
public:
	EDelMarTurboZoneState                         NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBTTask_DriveTrack_TurboBonusZoneStateChanged) == 0x000001, "Wrong alignment on DelMarBTTask_DriveTrack_TurboBonusZoneStateChanged");
static_assert(sizeof(DelMarBTTask_DriveTrack_TurboBonusZoneStateChanged) == 0x000001, "Wrong size on DelMarBTTask_DriveTrack_TurboBonusZoneStateChanged");
static_assert(offsetof(DelMarBTTask_DriveTrack_TurboBonusZoneStateChanged, NewState) == 0x000000, "Member 'DelMarBTTask_DriveTrack_TurboBonusZoneStateChanged::NewState' has a wrong offset!");

// Function DelMarCore.DelMarChallengeRaceManager.NetMulticast_StartOvertime
// 0x0008 (0x0008 - 0x0000)
struct DelMarChallengeRaceManager_NetMulticast_StartOvertime final
{
public:
	double                                        RaceFinishTimestamp;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarChallengeRaceManager_NetMulticast_StartOvertime) == 0x000008, "Wrong alignment on DelMarChallengeRaceManager_NetMulticast_StartOvertime");
static_assert(sizeof(DelMarChallengeRaceManager_NetMulticast_StartOvertime) == 0x000008, "Wrong size on DelMarChallengeRaceManager_NetMulticast_StartOvertime");
static_assert(offsetof(DelMarChallengeRaceManager_NetMulticast_StartOvertime, RaceFinishTimestamp) == 0x000000, "Member 'DelMarChallengeRaceManager_NetMulticast_StartOvertime::RaceFinishTimestamp' has a wrong offset!");

// Function DelMarCore.DelMarStateMachine.RequestState
// 0x0004 (0x0004 - 0x0000)
struct DelMarStateMachine_RequestState final
{
public:
	struct FGameplayTag                           StateTag;                                          // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStateMachine_RequestState) == 0x000004, "Wrong alignment on DelMarStateMachine_RequestState");
static_assert(sizeof(DelMarStateMachine_RequestState) == 0x000004, "Wrong size on DelMarStateMachine_RequestState");
static_assert(offsetof(DelMarStateMachine_RequestState, StateTag) == 0x000000, "Member 'DelMarStateMachine_RequestState::StateTag' has a wrong offset!");

// Function DelMarCore.DelMarStateMachine.GetActiveStateByTag
// 0x0010 (0x0010 - 0x0000)
struct DelMarStateMachine_GetActiveStateByTag final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarState*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStateMachine_GetActiveStateByTag) == 0x000008, "Wrong alignment on DelMarStateMachine_GetActiveStateByTag");
static_assert(sizeof(DelMarStateMachine_GetActiveStateByTag) == 0x000010, "Wrong size on DelMarStateMachine_GetActiveStateByTag");
static_assert(offsetof(DelMarStateMachine_GetActiveStateByTag, GameplayTag) == 0x000000, "Member 'DelMarStateMachine_GetActiveStateByTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(DelMarStateMachine_GetActiveStateByTag, ReturnValue) == 0x000008, "Member 'DelMarStateMachine_GetActiveStateByTag::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarStateMachine.GetCurrentState
// 0x0008 (0x0008 - 0x0000)
struct DelMarStateMachine_GetCurrentState final
{
public:
	class UDelMarState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStateMachine_GetCurrentState) == 0x000008, "Wrong alignment on DelMarStateMachine_GetCurrentState");
static_assert(sizeof(DelMarStateMachine_GetCurrentState) == 0x000008, "Wrong size on DelMarStateMachine_GetCurrentState");
static_assert(offsetof(DelMarStateMachine_GetCurrentState, ReturnValue) == 0x000000, "Member 'DelMarStateMachine_GetCurrentState::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarStateMachine.GetCurrentStateTag
// 0x0004 (0x0004 - 0x0000)
struct DelMarStateMachine_GetCurrentStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStateMachine_GetCurrentStateTag) == 0x000004, "Wrong alignment on DelMarStateMachine_GetCurrentStateTag");
static_assert(sizeof(DelMarStateMachine_GetCurrentStateTag) == 0x000004, "Wrong size on DelMarStateMachine_GetCurrentStateTag");
static_assert(offsetof(DelMarStateMachine_GetCurrentStateTag, ReturnValue) == 0x000000, "Member 'DelMarStateMachine_GetCurrentStateTag::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarStateMachine.GetRequestedStateTag
// 0x0004 (0x0004 - 0x0000)
struct DelMarStateMachine_GetRequestedStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStateMachine_GetRequestedStateTag) == 0x000004, "Wrong alignment on DelMarStateMachine_GetRequestedStateTag");
static_assert(sizeof(DelMarStateMachine_GetRequestedStateTag) == 0x000004, "Wrong size on DelMarStateMachine_GetRequestedStateTag");
static_assert(offsetof(DelMarStateMachine_GetRequestedStateTag, ReturnValue) == 0x000000, "Member 'DelMarStateMachine_GetRequestedStateTag::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleManager.HandlePawnEnteredVehicle
// 0x0020 (0x0020 - 0x0000)
struct DelMarVehicleManager_HandlePawnEnteredVehicle final
{
public:
	TScriptInterface<class IFortVehicleInterface> Vehicle;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Pawn;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeatIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleManager_HandlePawnEnteredVehicle) == 0x000008, "Wrong alignment on DelMarVehicleManager_HandlePawnEnteredVehicle");
static_assert(sizeof(DelMarVehicleManager_HandlePawnEnteredVehicle) == 0x000020, "Wrong size on DelMarVehicleManager_HandlePawnEnteredVehicle");
static_assert(offsetof(DelMarVehicleManager_HandlePawnEnteredVehicle, Vehicle) == 0x000000, "Member 'DelMarVehicleManager_HandlePawnEnteredVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(DelMarVehicleManager_HandlePawnEnteredVehicle, Pawn) == 0x000010, "Member 'DelMarVehicleManager_HandlePawnEnteredVehicle::Pawn' has a wrong offset!");
static_assert(offsetof(DelMarVehicleManager_HandlePawnEnteredVehicle, SeatIndex) == 0x000018, "Member 'DelMarVehicleManager_HandlePawnEnteredVehicle::SeatIndex' has a wrong offset!");

// Function DelMarCore.DelMarVehicleManager.HandlePawnExitedVehicle
// 0x0020 (0x0020 - 0x0000)
struct DelMarVehicleManager_HandlePawnExitedVehicle final
{
public:
	TScriptInterface<class IFortVehicleInterface> Vehicle;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Pawn;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeatIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleManager_HandlePawnExitedVehicle) == 0x000008, "Wrong alignment on DelMarVehicleManager_HandlePawnExitedVehicle");
static_assert(sizeof(DelMarVehicleManager_HandlePawnExitedVehicle) == 0x000020, "Wrong size on DelMarVehicleManager_HandlePawnExitedVehicle");
static_assert(offsetof(DelMarVehicleManager_HandlePawnExitedVehicle, Vehicle) == 0x000000, "Member 'DelMarVehicleManager_HandlePawnExitedVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(DelMarVehicleManager_HandlePawnExitedVehicle, Pawn) == 0x000010, "Member 'DelMarVehicleManager_HandlePawnExitedVehicle::Pawn' has a wrong offset!");
static_assert(offsetof(DelMarVehicleManager_HandlePawnExitedVehicle, SeatIndex) == 0x000018, "Member 'DelMarVehicleManager_HandlePawnExitedVehicle::SeatIndex' has a wrong offset!");

// Function DelMarCore.DelMarVehicleManager.HandlePawnPlayerStateSet
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleManager_HandlePawnPlayerStateSet final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleManager_HandlePawnPlayerStateSet) == 0x000008, "Wrong alignment on DelMarVehicleManager_HandlePawnPlayerStateSet");
static_assert(sizeof(DelMarVehicleManager_HandlePawnPlayerStateSet) == 0x000008, "Wrong size on DelMarVehicleManager_HandlePawnPlayerStateSet");
static_assert(offsetof(DelMarVehicleManager_HandlePawnPlayerStateSet, Pawn) == 0x000000, "Member 'DelMarVehicleManager_HandlePawnPlayerStateSet::Pawn' has a wrong offset!");

// Function DelMarCore.DelMarVehicleManager.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarVehicleManager_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleManager_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarVehicleManager_HandleViewTargetChanged");
static_assert(sizeof(DelMarVehicleManager_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarVehicleManager_HandleViewTargetChanged");
static_assert(offsetof(DelMarVehicleManager_HandleViewTargetChanged, InController) == 0x000000, "Member 'DelMarVehicleManager_HandleViewTargetChanged::InController' has a wrong offset!");
static_assert(offsetof(DelMarVehicleManager_HandleViewTargetChanged, OldViewTarget) == 0x000008, "Member 'DelMarVehicleManager_HandleViewTargetChanged::OldViewTarget' has a wrong offset!");
static_assert(offsetof(DelMarVehicleManager_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarVehicleManager_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarCore.DelMarSpectatorControllerComponent.ServerSetSpectatorTarget
// 0x0008 (0x0008 - 0x0000)
struct DelMarSpectatorControllerComponent_ServerSetSpectatorTarget final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSpectatorControllerComponent_ServerSetSpectatorTarget) == 0x000008, "Wrong alignment on DelMarSpectatorControllerComponent_ServerSetSpectatorTarget");
static_assert(sizeof(DelMarSpectatorControllerComponent_ServerSetSpectatorTarget) == 0x000008, "Wrong size on DelMarSpectatorControllerComponent_ServerSetSpectatorTarget");
static_assert(offsetof(DelMarSpectatorControllerComponent_ServerSetSpectatorTarget, PlayerState) == 0x000000, "Member 'DelMarSpectatorControllerComponent_ServerSetSpectatorTarget::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarSpectatorControllerComponent.SetIsLateJoinSpectator
// 0x0001 (0x0001 - 0x0000)
struct DelMarSpectatorControllerComponent_SetIsLateJoinSpectator final
{
public:
	bool                                          bNewLateJoinSpectator;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSpectatorControllerComponent_SetIsLateJoinSpectator) == 0x000001, "Wrong alignment on DelMarSpectatorControllerComponent_SetIsLateJoinSpectator");
static_assert(sizeof(DelMarSpectatorControllerComponent_SetIsLateJoinSpectator) == 0x000001, "Wrong size on DelMarSpectatorControllerComponent_SetIsLateJoinSpectator");
static_assert(offsetof(DelMarSpectatorControllerComponent_SetIsLateJoinSpectator, bNewLateJoinSpectator) == 0x000000, "Member 'DelMarSpectatorControllerComponent_SetIsLateJoinSpectator::bNewLateJoinSpectator' has a wrong offset!");

// Function DelMarCore.DelMarSpectatorControllerComponent.SetSpectatorTarget
// 0x0008 (0x0008 - 0x0000)
struct DelMarSpectatorControllerComponent_SetSpectatorTarget final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSpectatorControllerComponent_SetSpectatorTarget) == 0x000008, "Wrong alignment on DelMarSpectatorControllerComponent_SetSpectatorTarget");
static_assert(sizeof(DelMarSpectatorControllerComponent_SetSpectatorTarget) == 0x000008, "Wrong size on DelMarSpectatorControllerComponent_SetSpectatorTarget");
static_assert(offsetof(DelMarSpectatorControllerComponent_SetSpectatorTarget, PlayerState) == 0x000000, "Member 'DelMarSpectatorControllerComponent_SetSpectatorTarget::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarSpectatorControllerComponent.IsLateJoinSpectator
// 0x0001 (0x0001 - 0x0000)
struct DelMarSpectatorControllerComponent_IsLateJoinSpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSpectatorControllerComponent_IsLateJoinSpectator) == 0x000001, "Wrong alignment on DelMarSpectatorControllerComponent_IsLateJoinSpectator");
static_assert(sizeof(DelMarSpectatorControllerComponent_IsLateJoinSpectator) == 0x000001, "Wrong size on DelMarSpectatorControllerComponent_IsLateJoinSpectator");
static_assert(offsetof(DelMarSpectatorControllerComponent_IsLateJoinSpectator, ReturnValue) == 0x000000, "Member 'DelMarSpectatorControllerComponent_IsLateJoinSpectator::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCoreSplineMeshComponent.OnBeginActorOverlap
// 0x0108 (0x0108 - 0x0000)
struct DelMarCoreSplineMeshComponent_OnBeginActorOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCoreSplineMeshComponent_OnBeginActorOverlap) == 0x000008, "Wrong alignment on DelMarCoreSplineMeshComponent_OnBeginActorOverlap");
static_assert(sizeof(DelMarCoreSplineMeshComponent_OnBeginActorOverlap) == 0x000108, "Wrong size on DelMarCoreSplineMeshComponent_OnBeginActorOverlap");
static_assert(offsetof(DelMarCoreSplineMeshComponent_OnBeginActorOverlap, OverlappedComponent) == 0x000000, "Member 'DelMarCoreSplineMeshComponent_OnBeginActorOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(DelMarCoreSplineMeshComponent_OnBeginActorOverlap, OtherActor) == 0x000008, "Member 'DelMarCoreSplineMeshComponent_OnBeginActorOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarCoreSplineMeshComponent_OnBeginActorOverlap, OtherComp) == 0x000010, "Member 'DelMarCoreSplineMeshComponent_OnBeginActorOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(DelMarCoreSplineMeshComponent_OnBeginActorOverlap, OtherBodyIndex) == 0x000018, "Member 'DelMarCoreSplineMeshComponent_OnBeginActorOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(DelMarCoreSplineMeshComponent_OnBeginActorOverlap, bFromSweep) == 0x00001C, "Member 'DelMarCoreSplineMeshComponent_OnBeginActorOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(DelMarCoreSplineMeshComponent_OnBeginActorOverlap, SweepResult) == 0x000020, "Member 'DelMarCoreSplineMeshComponent_OnBeginActorOverlap::SweepResult' has a wrong offset!");

// Function DelMarCore.DelMarCompetitiveRaceManager.HandleFinalRacePositionsUpdated
// 0x0060 (0x0060 - 0x0000)
struct DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated final
{
public:
	TArray<struct FDelMarFinalRacePositionEntry>  FinalRacePositions;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDelMarEvent_RunRecorded               RecordedRun;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated) == 0x000008, "Wrong alignment on DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated");
static_assert(sizeof(DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated) == 0x000060, "Wrong size on DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated");
static_assert(offsetof(DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated, FinalRacePositions) == 0x000000, "Member 'DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated::FinalRacePositions' has a wrong offset!");
static_assert(offsetof(DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated, RecordedRun) == 0x000010, "Member 'DelMarCompetitiveRaceManager_HandleFinalRacePositionsUpdated::RecordedRun' has a wrong offset!");

// Function DelMarCore.DelMarConnectedHintComponent.HandleActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct DelMarConnectedHintComponent_HandleActorBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarConnectedHintComponent_HandleActorBeginOverlap) == 0x000008, "Wrong alignment on DelMarConnectedHintComponent_HandleActorBeginOverlap");
static_assert(sizeof(DelMarConnectedHintComponent_HandleActorBeginOverlap) == 0x000010, "Wrong size on DelMarConnectedHintComponent_HandleActorBeginOverlap");
static_assert(offsetof(DelMarConnectedHintComponent_HandleActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'DelMarConnectedHintComponent_HandleActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(DelMarConnectedHintComponent_HandleActorBeginOverlap, OtherActor) == 0x000008, "Member 'DelMarConnectedHintComponent_HandleActorBeginOverlap::OtherActor' has a wrong offset!");

// Function DelMarCore.DelMarConnectedHintComponent.HandleActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct DelMarConnectedHintComponent_HandleActorEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarConnectedHintComponent_HandleActorEndOverlap) == 0x000008, "Wrong alignment on DelMarConnectedHintComponent_HandleActorEndOverlap");
static_assert(sizeof(DelMarConnectedHintComponent_HandleActorEndOverlap) == 0x000010, "Wrong size on DelMarConnectedHintComponent_HandleActorEndOverlap");
static_assert(offsetof(DelMarConnectedHintComponent_HandleActorEndOverlap, OverlappedActor) == 0x000000, "Member 'DelMarConnectedHintComponent_HandleActorEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(DelMarConnectedHintComponent_HandleActorEndOverlap, OtherActor) == 0x000008, "Member 'DelMarConnectedHintComponent_HandleActorEndOverlap::OtherActor' has a wrong offset!");

// Function DelMarCore.DelMarConnectedHintComponent.PassNuxHintTypeToConnectedHintComponent
// 0x0004 (0x0004 - 0x0000)
struct DelMarConnectedHintComponent_PassNuxHintTypeToConnectedHintComponent final
{
public:
	struct FGameplayTag                           HintTypeTag;                                       // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarConnectedHintComponent_PassNuxHintTypeToConnectedHintComponent) == 0x000004, "Wrong alignment on DelMarConnectedHintComponent_PassNuxHintTypeToConnectedHintComponent");
static_assert(sizeof(DelMarConnectedHintComponent_PassNuxHintTypeToConnectedHintComponent) == 0x000004, "Wrong size on DelMarConnectedHintComponent_PassNuxHintTypeToConnectedHintComponent");
static_assert(offsetof(DelMarConnectedHintComponent_PassNuxHintTypeToConnectedHintComponent, HintTypeTag) == 0x000000, "Member 'DelMarConnectedHintComponent_PassNuxHintTypeToConnectedHintComponent::HintTypeTag' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticsDatabase.GetItemsForSlot
// 0x0018 (0x0018 - 0x0000)
struct DelMarCosmeticsDatabase_GetItemsForSlot final
{
public:
	struct FGameplayTag                           Slot;                                              // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDelMarCosmeticItemDefinition*>  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticsDatabase_GetItemsForSlot) == 0x000008, "Wrong alignment on DelMarCosmeticsDatabase_GetItemsForSlot");
static_assert(sizeof(DelMarCosmeticsDatabase_GetItemsForSlot) == 0x000018, "Wrong size on DelMarCosmeticsDatabase_GetItemsForSlot");
static_assert(offsetof(DelMarCosmeticsDatabase_GetItemsForSlot, Slot) == 0x000000, "Member 'DelMarCosmeticsDatabase_GetItemsForSlot::Slot' has a wrong offset!");
static_assert(offsetof(DelMarCosmeticsDatabase_GetItemsForSlot, ReturnValue) == 0x000008, "Member 'DelMarCosmeticsDatabase_GetItemsForSlot::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticsDatabase.GetSlotInfos
// 0x0010 (0x0010 - 0x0000)
struct DelMarCosmeticsDatabase_GetSlotInfos final
{
public:
	TArray<struct FDelMarCosmeticSlotInfo>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticsDatabase_GetSlotInfos) == 0x000008, "Wrong alignment on DelMarCosmeticsDatabase_GetSlotInfos");
static_assert(sizeof(DelMarCosmeticsDatabase_GetSlotInfos) == 0x000010, "Wrong size on DelMarCosmeticsDatabase_GetSlotInfos");
static_assert(offsetof(DelMarCosmeticsDatabase_GetSlotInfos, ReturnValue) == 0x000000, "Member 'DelMarCosmeticsDatabase_GetSlotInfos::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarDriverInteractionComponent.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarDriverInteractionComponent_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDriverInteractionComponent_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarDriverInteractionComponent_HandleViewTargetChanged");
static_assert(sizeof(DelMarDriverInteractionComponent_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarDriverInteractionComponent_HandleViewTargetChanged");
static_assert(offsetof(DelMarDriverInteractionComponent_HandleViewTargetChanged, InController) == 0x000000, "Member 'DelMarDriverInteractionComponent_HandleViewTargetChanged::InController' has a wrong offset!");
static_assert(offsetof(DelMarDriverInteractionComponent_HandleViewTargetChanged, OldViewTarget) == 0x000008, "Member 'DelMarDriverInteractionComponent_HandleViewTargetChanged::OldViewTarget' has a wrong offset!");
static_assert(offsetof(DelMarDriverInteractionComponent_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarDriverInteractionComponent_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarCore.DelMarGhostPlaybackTrigger.BP_HandlePlaybackCompleted
// 0x0018 (0x0018 - 0x0000)
struct DelMarGhostPlaybackTrigger_BP_HandlePlaybackCompleted final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGhostPlaybackTrigger_BP_HandlePlaybackCompleted) == 0x000008, "Wrong alignment on DelMarGhostPlaybackTrigger_BP_HandlePlaybackCompleted");
static_assert(sizeof(DelMarGhostPlaybackTrigger_BP_HandlePlaybackCompleted) == 0x000018, "Wrong size on DelMarGhostPlaybackTrigger_BP_HandlePlaybackCompleted");
static_assert(offsetof(DelMarGhostPlaybackTrigger_BP_HandlePlaybackCompleted, Location) == 0x000000, "Member 'DelMarGhostPlaybackTrigger_BP_HandlePlaybackCompleted::Location' has a wrong offset!");

// Function DelMarCore.DelMarGhostPlaybackTrigger.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct DelMarGhostPlaybackTrigger_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGhostPlaybackTrigger_OnBeginOverlap) == 0x000008, "Wrong alignment on DelMarGhostPlaybackTrigger_OnBeginOverlap");
static_assert(sizeof(DelMarGhostPlaybackTrigger_OnBeginOverlap) == 0x000108, "Wrong size on DelMarGhostPlaybackTrigger_OnBeginOverlap");
static_assert(offsetof(DelMarGhostPlaybackTrigger_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'DelMarGhostPlaybackTrigger_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(DelMarGhostPlaybackTrigger_OnBeginOverlap, OtherActor) == 0x000008, "Member 'DelMarGhostPlaybackTrigger_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarGhostPlaybackTrigger_OnBeginOverlap, OtherComp) == 0x000010, "Member 'DelMarGhostPlaybackTrigger_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(DelMarGhostPlaybackTrigger_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'DelMarGhostPlaybackTrigger_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(DelMarGhostPlaybackTrigger_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'DelMarGhostPlaybackTrigger_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(DelMarGhostPlaybackTrigger_OnBeginOverlap, SweepResult) == 0x000020, "Member 'DelMarGhostPlaybackTrigger_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function DelMarCore.DelMarGhostRecordingSessionComponent.SetRecordOffPhysicsDelegate
// 0x0001 (0x0001 - 0x0000)
struct DelMarGhostRecordingSessionComponent_SetRecordOffPhysicsDelegate final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGhostRecordingSessionComponent_SetRecordOffPhysicsDelegate) == 0x000001, "Wrong alignment on DelMarGhostRecordingSessionComponent_SetRecordOffPhysicsDelegate");
static_assert(sizeof(DelMarGhostRecordingSessionComponent_SetRecordOffPhysicsDelegate) == 0x000001, "Wrong size on DelMarGhostRecordingSessionComponent_SetRecordOffPhysicsDelegate");
static_assert(offsetof(DelMarGhostRecordingSessionComponent_SetRecordOffPhysicsDelegate, bEnabled) == 0x000000, "Member 'DelMarGhostRecordingSessionComponent_SetRecordOffPhysicsDelegate::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarGlobalLeaderboardControllerComponent.ClientNewPersonalBest
// 0x0048 (0x0048 - 0x0000)
struct DelMarGlobalLeaderboardControllerComponent_ClientNewPersonalBest final
{
public:
	struct FDelMarEvent_GlobalLeaderboardNewPersonalBest PersonalBestEvent;                                 // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGlobalLeaderboardControllerComponent_ClientNewPersonalBest) == 0x000008, "Wrong alignment on DelMarGlobalLeaderboardControllerComponent_ClientNewPersonalBest");
static_assert(sizeof(DelMarGlobalLeaderboardControllerComponent_ClientNewPersonalBest) == 0x000048, "Wrong size on DelMarGlobalLeaderboardControllerComponent_ClientNewPersonalBest");
static_assert(offsetof(DelMarGlobalLeaderboardControllerComponent_ClientNewPersonalBest, PersonalBestEvent) == 0x000000, "Member 'DelMarGlobalLeaderboardControllerComponent_ClientNewPersonalBest::PersonalBestEvent' has a wrong offset!");

// Function DelMarCore.DelMarGlobalLeaderboardControllerComponent.ServerNewPersonalBest
// 0x0048 (0x0048 - 0x0000)
struct DelMarGlobalLeaderboardControllerComponent_ServerNewPersonalBest final
{
public:
	struct FDelMarEvent_GlobalLeaderboardNewPersonalBest PersonalBestRetrievedEvent;                        // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGlobalLeaderboardControllerComponent_ServerNewPersonalBest) == 0x000008, "Wrong alignment on DelMarGlobalLeaderboardControllerComponent_ServerNewPersonalBest");
static_assert(sizeof(DelMarGlobalLeaderboardControllerComponent_ServerNewPersonalBest) == 0x000048, "Wrong size on DelMarGlobalLeaderboardControllerComponent_ServerNewPersonalBest");
static_assert(offsetof(DelMarGlobalLeaderboardControllerComponent_ServerNewPersonalBest, PersonalBestRetrievedEvent) == 0x000000, "Member 'DelMarGlobalLeaderboardControllerComponent_ServerNewPersonalBest::PersonalBestRetrievedEvent' has a wrong offset!");

// Function DelMarCore.DelMarGuidedTutorialZoneActor.HandleVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarGuidedTutorialZoneActor_HandleVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGuidedTutorialZoneActor_HandleVehicleDemolished) == 0x000004, "Wrong alignment on DelMarGuidedTutorialZoneActor_HandleVehicleDemolished");
static_assert(sizeof(DelMarGuidedTutorialZoneActor_HandleVehicleDemolished) == 0x000004, "Wrong size on DelMarGuidedTutorialZoneActor_HandleVehicleDemolished");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_HandleVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarGuidedTutorialZoneActor_HandleVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarCore.DelMarGuidedTutorialZoneActor.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct DelMarGuidedTutorialZoneActor_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarGuidedTutorialZoneActor_OnBeginOverlap) == 0x000008, "Wrong alignment on DelMarGuidedTutorialZoneActor_OnBeginOverlap");
static_assert(sizeof(DelMarGuidedTutorialZoneActor_OnBeginOverlap) == 0x000108, "Wrong size on DelMarGuidedTutorialZoneActor_OnBeginOverlap");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'DelMarGuidedTutorialZoneActor_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnBeginOverlap, OtherActor) == 0x000008, "Member 'DelMarGuidedTutorialZoneActor_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnBeginOverlap, OtherComp) == 0x000010, "Member 'DelMarGuidedTutorialZoneActor_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'DelMarGuidedTutorialZoneActor_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'DelMarGuidedTutorialZoneActor_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnBeginOverlap, SweepResult) == 0x000020, "Member 'DelMarGuidedTutorialZoneActor_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function DelMarCore.DelMarGuidedTutorialZoneActor.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct DelMarGuidedTutorialZoneActor_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarGuidedTutorialZoneActor_OnEndOverlap) == 0x000008, "Wrong alignment on DelMarGuidedTutorialZoneActor_OnEndOverlap");
static_assert(sizeof(DelMarGuidedTutorialZoneActor_OnEndOverlap) == 0x000020, "Wrong size on DelMarGuidedTutorialZoneActor_OnEndOverlap");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'DelMarGuidedTutorialZoneActor_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnEndOverlap, OtherActor) == 0x000008, "Member 'DelMarGuidedTutorialZoneActor_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnEndOverlap, OtherComp) == 0x000010, "Member 'DelMarGuidedTutorialZoneActor_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(DelMarGuidedTutorialZoneActor_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'DelMarGuidedTutorialZoneActor_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DelMarCore.DelMarInputModifierHazard.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct DelMarInputModifierHazard_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarInputModifierHazard_OnBeginOverlap) == 0x000008, "Wrong alignment on DelMarInputModifierHazard_OnBeginOverlap");
static_assert(sizeof(DelMarInputModifierHazard_OnBeginOverlap) == 0x000108, "Wrong size on DelMarInputModifierHazard_OnBeginOverlap");
static_assert(offsetof(DelMarInputModifierHazard_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'DelMarInputModifierHazard_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(DelMarInputModifierHazard_OnBeginOverlap, OtherActor) == 0x000008, "Member 'DelMarInputModifierHazard_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarInputModifierHazard_OnBeginOverlap, OtherComp) == 0x000010, "Member 'DelMarInputModifierHazard_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(DelMarInputModifierHazard_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'DelMarInputModifierHazard_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(DelMarInputModifierHazard_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'DelMarInputModifierHazard_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(DelMarInputModifierHazard_OnBeginOverlap, SweepResult) == 0x000020, "Member 'DelMarInputModifierHazard_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function DelMarCore.DelMarPhysicsRateDevice.SetPhysicsRate
// 0x0001 (0x0001 - 0x0000)
struct DelMarPhysicsRateDevice_SetPhysicsRate final
{
public:
	EDelMarPhysicsRate                            PhysicsRate;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPhysicsRateDevice_SetPhysicsRate) == 0x000001, "Wrong alignment on DelMarPhysicsRateDevice_SetPhysicsRate");
static_assert(sizeof(DelMarPhysicsRateDevice_SetPhysicsRate) == 0x000001, "Wrong size on DelMarPhysicsRateDevice_SetPhysicsRate");
static_assert(offsetof(DelMarPhysicsRateDevice_SetPhysicsRate, PhysicsRate) == 0x000000, "Member 'DelMarPhysicsRateDevice_SetPhysicsRate::PhysicsRate' has a wrong offset!");

// Function DelMarCore.DelMarPlayerActiveRaceManagerComponent.OnRep_ActiveRaceManager
// 0x0008 (0x0008 - 0x0000)
struct DelMarPlayerActiveRaceManagerComponent_OnRep_ActiveRaceManager final
{
public:
	class ADelMarRaceManager*                     PreviousRaceManager;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerActiveRaceManagerComponent_OnRep_ActiveRaceManager) == 0x000008, "Wrong alignment on DelMarPlayerActiveRaceManagerComponent_OnRep_ActiveRaceManager");
static_assert(sizeof(DelMarPlayerActiveRaceManagerComponent_OnRep_ActiveRaceManager) == 0x000008, "Wrong size on DelMarPlayerActiveRaceManagerComponent_OnRep_ActiveRaceManager");
static_assert(offsetof(DelMarPlayerActiveRaceManagerComponent_OnRep_ActiveRaceManager, PreviousRaceManager) == 0x000000, "Member 'DelMarPlayerActiveRaceManagerComponent_OnRep_ActiveRaceManager::PreviousRaceManager' has a wrong offset!");

// Function DelMarCore.DelMarPlayerActiveRaceManagerComponent.SetActiveRaceManager
// 0x0008 (0x0008 - 0x0000)
struct DelMarPlayerActiveRaceManagerComponent_SetActiveRaceManager final
{
public:
	class ADelMarRaceManager*                     RaceManager;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerActiveRaceManagerComponent_SetActiveRaceManager) == 0x000008, "Wrong alignment on DelMarPlayerActiveRaceManagerComponent_SetActiveRaceManager");
static_assert(sizeof(DelMarPlayerActiveRaceManagerComponent_SetActiveRaceManager) == 0x000008, "Wrong size on DelMarPlayerActiveRaceManagerComponent_SetActiveRaceManager");
static_assert(offsetof(DelMarPlayerActiveRaceManagerComponent_SetActiveRaceManager, RaceManager) == 0x000000, "Member 'DelMarPlayerActiveRaceManagerComponent_SetActiveRaceManager::RaceManager' has a wrong offset!");

// Function DelMarCore.DelMarPlayerActiveRaceManagerComponent.GetActiveRaceManager
// 0x0008 (0x0008 - 0x0000)
struct DelMarPlayerActiveRaceManagerComponent_GetActiveRaceManager final
{
public:
	class ADelMarRaceManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerActiveRaceManagerComponent_GetActiveRaceManager) == 0x000008, "Wrong alignment on DelMarPlayerActiveRaceManagerComponent_GetActiveRaceManager");
static_assert(sizeof(DelMarPlayerActiveRaceManagerComponent_GetActiveRaceManager) == 0x000008, "Wrong size on DelMarPlayerActiveRaceManagerComponent_GetActiveRaceManager");
static_assert(offsetof(DelMarPlayerActiveRaceManagerComponent_GetActiveRaceManager, ReturnValue) == 0x000000, "Member 'DelMarPlayerActiveRaceManagerComponent_GetActiveRaceManager::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleDriftKickActivated
// 0x0008 (0x0008 - 0x0000)
struct DelMarPlayerAnalyticsComponent_HandleDriftKickActivated final
{
public:
	float                                         DriftDirection;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleDriftState                      DriftState;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarPlayerAnalyticsComponent_HandleDriftKickActivated) == 0x000004, "Wrong alignment on DelMarPlayerAnalyticsComponent_HandleDriftKickActivated");
static_assert(sizeof(DelMarPlayerAnalyticsComponent_HandleDriftKickActivated) == 0x000008, "Wrong size on DelMarPlayerAnalyticsComponent_HandleDriftKickActivated");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandleDriftKickActivated, DriftDirection) == 0x000000, "Member 'DelMarPlayerAnalyticsComponent_HandleDriftKickActivated::DriftDirection' has a wrong offset!");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandleDriftKickActivated, DriftState) == 0x000004, "Member 'DelMarPlayerAnalyticsComponent_HandleDriftKickActivated::DriftState' has a wrong offset!");

// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleKickflipActivated
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayerAnalyticsComponent_HandleKickflipActivated final
{
public:
	bool                                          bLeft;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerAnalyticsComponent_HandleKickflipActivated) == 0x000001, "Wrong alignment on DelMarPlayerAnalyticsComponent_HandleKickflipActivated");
static_assert(sizeof(DelMarPlayerAnalyticsComponent_HandleKickflipActivated) == 0x000001, "Wrong size on DelMarPlayerAnalyticsComponent_HandleKickflipActivated");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandleKickflipActivated, bLeft) == 0x000000, "Member 'DelMarPlayerAnalyticsComponent_HandleKickflipActivated::bLeft' has a wrong offset!");

// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandlePlayerResetRun
// 0x0008 (0x0008 - 0x0000)
struct DelMarPlayerAnalyticsComponent_HandlePlayerResetRun final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerAnalyticsComponent_HandlePlayerResetRun) == 0x000008, "Wrong alignment on DelMarPlayerAnalyticsComponent_HandlePlayerResetRun");
static_assert(sizeof(DelMarPlayerAnalyticsComponent_HandlePlayerResetRun) == 0x000008, "Wrong size on DelMarPlayerAnalyticsComponent_HandlePlayerResetRun");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandlePlayerResetRun, PlayerState) == 0x000000, "Member 'DelMarPlayerAnalyticsComponent_HandlePlayerResetRun::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandlePotentialDriftBoostChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerAnalyticsComponent_HandlePotentialDriftBoostChanged final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerAnalyticsComponent_HandlePotentialDriftBoostChanged) == 0x000004, "Wrong alignment on DelMarPlayerAnalyticsComponent_HandlePotentialDriftBoostChanged");
static_assert(sizeof(DelMarPlayerAnalyticsComponent_HandlePotentialDriftBoostChanged) == 0x000004, "Wrong size on DelMarPlayerAnalyticsComponent_HandlePotentialDriftBoostChanged");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandlePotentialDriftBoostChanged, Percent) == 0x000000, "Member 'DelMarPlayerAnalyticsComponent_HandlePotentialDriftBoostChanged::Percent' has a wrong offset!");

// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleTurboBonusZoneChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayerAnalyticsComponent_HandleTurboBonusZoneChanged final
{
public:
	EDelMarTurboZoneState                         BonusZoneState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerAnalyticsComponent_HandleTurboBonusZoneChanged) == 0x000001, "Wrong alignment on DelMarPlayerAnalyticsComponent_HandleTurboBonusZoneChanged");
static_assert(sizeof(DelMarPlayerAnalyticsComponent_HandleTurboBonusZoneChanged) == 0x000001, "Wrong size on DelMarPlayerAnalyticsComponent_HandleTurboBonusZoneChanged");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandleTurboBonusZoneChanged, BonusZoneState) == 0x000000, "Member 'DelMarPlayerAnalyticsComponent_HandleTurboBonusZoneChanged::BonusZoneState' has a wrong offset!");

// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleUnderthrustPercentChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerAnalyticsComponent_HandleUnderthrustPercentChanged final
{
public:
	float                                         PercentageUnderthrustRemaining;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerAnalyticsComponent_HandleUnderthrustPercentChanged) == 0x000004, "Wrong alignment on DelMarPlayerAnalyticsComponent_HandleUnderthrustPercentChanged");
static_assert(sizeof(DelMarPlayerAnalyticsComponent_HandleUnderthrustPercentChanged) == 0x000004, "Wrong size on DelMarPlayerAnalyticsComponent_HandleUnderthrustPercentChanged");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandleUnderthrustPercentChanged, PercentageUnderthrustRemaining) == 0x000000, "Member 'DelMarPlayerAnalyticsComponent_HandleUnderthrustPercentChanged::PercentageUnderthrustRemaining' has a wrong offset!");

// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerAnalyticsComponent_HandleVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerAnalyticsComponent_HandleVehicleDemolished) == 0x000004, "Wrong alignment on DelMarPlayerAnalyticsComponent_HandleVehicleDemolished");
static_assert(sizeof(DelMarPlayerAnalyticsComponent_HandleVehicleDemolished) == 0x000004, "Wrong size on DelMarPlayerAnalyticsComponent_HandleVehicleDemolished");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandleVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarPlayerAnalyticsComponent_HandleVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarCore.DelMarPlayerAnalyticsComponent.HandleWorldBonusSpeedStackGained
// 0x0008 (0x0008 - 0x0000)
struct DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained) == 0x000004, "Wrong alignment on DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained");
static_assert(sizeof(DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained) == 0x000008, "Wrong size on DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained, Source) == 0x000000, "Member 'DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained::Source' has a wrong offset!");
static_assert(offsetof(DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained, Stacks) == 0x000004, "Member 'DelMarPlayerAnalyticsComponent_HandleWorldBonusSpeedStackGained::Stacks' has a wrong offset!");

// Function DelMarCore.DelMarPlayerIdleComponent.OnPlayerDisconnected
// 0x0010 (0x0010 - 0x0000)
struct DelMarPlayerIdleComponent_OnPlayerDisconnected final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisconnected;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarPlayerIdleComponent_OnPlayerDisconnected) == 0x000008, "Wrong alignment on DelMarPlayerIdleComponent_OnPlayerDisconnected");
static_assert(sizeof(DelMarPlayerIdleComponent_OnPlayerDisconnected) == 0x000010, "Wrong size on DelMarPlayerIdleComponent_OnPlayerDisconnected");
static_assert(offsetof(DelMarPlayerIdleComponent_OnPlayerDisconnected, PlayerState) == 0x000000, "Member 'DelMarPlayerIdleComponent_OnPlayerDisconnected::PlayerState' has a wrong offset!");
static_assert(offsetof(DelMarPlayerIdleComponent_OnPlayerDisconnected, bIsDisconnected) == 0x000008, "Member 'DelMarPlayerIdleComponent_OnPlayerDisconnected::bIsDisconnected' has a wrong offset!");

// Function DelMarCore.DelMarPlayerQuestDistanceTraveledComponent.HandleVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerQuestDistanceTraveledComponent_HandleVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerQuestDistanceTraveledComponent_HandleVehicleDemolished) == 0x000004, "Wrong alignment on DelMarPlayerQuestDistanceTraveledComponent_HandleVehicleDemolished");
static_assert(sizeof(DelMarPlayerQuestDistanceTraveledComponent_HandleVehicleDemolished) == 0x000004, "Wrong size on DelMarPlayerQuestDistanceTraveledComponent_HandleVehicleDemolished");
static_assert(offsetof(DelMarPlayerQuestDistanceTraveledComponent_HandleVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarPlayerQuestDistanceTraveledComponent_HandleVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarCore.DelMarPlayerQuestMatchInfoComponent.HandleVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerQuestMatchInfoComponent_HandleVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerQuestMatchInfoComponent_HandleVehicleDemolished) == 0x000004, "Wrong alignment on DelMarPlayerQuestMatchInfoComponent_HandleVehicleDemolished");
static_assert(sizeof(DelMarPlayerQuestMatchInfoComponent_HandleVehicleDemolished) == 0x000004, "Wrong size on DelMarPlayerQuestMatchInfoComponent_HandleVehicleDemolished");
static_assert(offsetof(DelMarPlayerQuestMatchInfoComponent_HandleVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarPlayerQuestMatchInfoComponent_HandleVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarCore.DelMarProxyGhostVisualComponent.HandlePartCustomizationUpdated
// 0x0004 (0x0004 - 0x0000)
struct DelMarProxyGhostVisualComponent_HandlePartCustomizationUpdated final
{
public:
	int32                                         MeshPartIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarProxyGhostVisualComponent_HandlePartCustomizationUpdated) == 0x000004, "Wrong alignment on DelMarProxyGhostVisualComponent_HandlePartCustomizationUpdated");
static_assert(sizeof(DelMarProxyGhostVisualComponent_HandlePartCustomizationUpdated) == 0x000004, "Wrong size on DelMarProxyGhostVisualComponent_HandlePartCustomizationUpdated");
static_assert(offsetof(DelMarProxyGhostVisualComponent_HandlePartCustomizationUpdated, MeshPartIndex) == 0x000000, "Member 'DelMarProxyGhostVisualComponent_HandlePartCustomizationUpdated::MeshPartIndex' has a wrong offset!");

// Function DelMarCore.DelMarProxyGhostVisualComponent.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarProxyGhostVisualComponent_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarProxyGhostVisualComponent_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarProxyGhostVisualComponent_HandleViewTargetChanged");
static_assert(sizeof(DelMarProxyGhostVisualComponent_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarProxyGhostVisualComponent_HandleViewTargetChanged");
static_assert(offsetof(DelMarProxyGhostVisualComponent_HandleViewTargetChanged, InController) == 0x000000, "Member 'DelMarProxyGhostVisualComponent_HandleViewTargetChanged::InController' has a wrong offset!");
static_assert(offsetof(DelMarProxyGhostVisualComponent_HandleViewTargetChanged, OldViewTarget) == 0x000008, "Member 'DelMarProxyGhostVisualComponent_HandleViewTargetChanged::OldViewTarget' has a wrong offset!");
static_assert(offsetof(DelMarProxyGhostVisualComponent_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarProxyGhostVisualComponent_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarCore.DelMarRaceLevelConfig.SpawnRaceManager
// 0x0010 (0x0010 - 0x0000)
struct DelMarRaceLevelConfig_SpawnRaceManager final
{
public:
	bool                                          bFireInitializationEvent;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADelMarRaceManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceLevelConfig_SpawnRaceManager) == 0x000008, "Wrong alignment on DelMarRaceLevelConfig_SpawnRaceManager");
static_assert(sizeof(DelMarRaceLevelConfig_SpawnRaceManager) == 0x000010, "Wrong size on DelMarRaceLevelConfig_SpawnRaceManager");
static_assert(offsetof(DelMarRaceLevelConfig_SpawnRaceManager, bFireInitializationEvent) == 0x000000, "Member 'DelMarRaceLevelConfig_SpawnRaceManager::bFireInitializationEvent' has a wrong offset!");
static_assert(offsetof(DelMarRaceLevelConfig_SpawnRaceManager, ReturnValue) == 0x000008, "Member 'DelMarRaceLevelConfig_SpawnRaceManager::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceLevelConfig.GetRaceManagerClass
// 0x0008 (0x0008 - 0x0000)
struct DelMarRaceLevelConfig_GetRaceManagerClass final
{
public:
	TSubclassOf<class ADelMarRaceManager>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceLevelConfig_GetRaceManagerClass) == 0x000008, "Wrong alignment on DelMarRaceLevelConfig_GetRaceManagerClass");
static_assert(sizeof(DelMarRaceLevelConfig_GetRaceManagerClass) == 0x000008, "Wrong size on DelMarRaceLevelConfig_GetRaceManagerClass");
static_assert(offsetof(DelMarRaceLevelConfig_GetRaceManagerClass, ReturnValue) == 0x000000, "Member 'DelMarRaceLevelConfig_GetRaceManagerClass::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceLevelConfig.GetRaceModeTag
// 0x0004 (0x0004 - 0x0000)
struct DelMarRaceLevelConfig_GetRaceModeTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceLevelConfig_GetRaceModeTag) == 0x000004, "Wrong alignment on DelMarRaceLevelConfig_GetRaceModeTag");
static_assert(sizeof(DelMarRaceLevelConfig_GetRaceModeTag) == 0x000004, "Wrong size on DelMarRaceLevelConfig_GetRaceModeTag");
static_assert(offsetof(DelMarRaceLevelConfig_GetRaceModeTag, ReturnValue) == 0x000000, "Member 'DelMarRaceLevelConfig_GetRaceModeTag::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTimeManagerComponent.StartCountdownForPlayer
// 0x0018 (0x0018 - 0x0000)
struct DelMarTimeManagerComponent_StartCountdownForPlayer final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ServerCountdownStartTime;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ServerRunStartTime;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeManagerComponent_StartCountdownForPlayer) == 0x000008, "Wrong alignment on DelMarTimeManagerComponent_StartCountdownForPlayer");
static_assert(sizeof(DelMarTimeManagerComponent_StartCountdownForPlayer) == 0x000018, "Wrong size on DelMarTimeManagerComponent_StartCountdownForPlayer");
static_assert(offsetof(DelMarTimeManagerComponent_StartCountdownForPlayer, PlayerState) == 0x000000, "Member 'DelMarTimeManagerComponent_StartCountdownForPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(DelMarTimeManagerComponent_StartCountdownForPlayer, ServerCountdownStartTime) == 0x000008, "Member 'DelMarTimeManagerComponent_StartCountdownForPlayer::ServerCountdownStartTime' has a wrong offset!");
static_assert(offsetof(DelMarTimeManagerComponent_StartCountdownForPlayer, ServerRunStartTime) == 0x000010, "Member 'DelMarTimeManagerComponent_StartCountdownForPlayer::ServerRunStartTime' has a wrong offset!");

// Function DelMarCore.DelMarTimeManagerComponent.StartCountdownForRace
// 0x0018 (0x0018 - 0x0000)
struct DelMarTimeManagerComponent_StartCountdownForRace final
{
public:
	double                                        ServerCountdownStartTime;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ServerRunStartTime;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InServerCountdownIntervalTime;                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeManagerComponent_StartCountdownForRace) == 0x000008, "Wrong alignment on DelMarTimeManagerComponent_StartCountdownForRace");
static_assert(sizeof(DelMarTimeManagerComponent_StartCountdownForRace) == 0x000018, "Wrong size on DelMarTimeManagerComponent_StartCountdownForRace");
static_assert(offsetof(DelMarTimeManagerComponent_StartCountdownForRace, ServerCountdownStartTime) == 0x000000, "Member 'DelMarTimeManagerComponent_StartCountdownForRace::ServerCountdownStartTime' has a wrong offset!");
static_assert(offsetof(DelMarTimeManagerComponent_StartCountdownForRace, ServerRunStartTime) == 0x000008, "Member 'DelMarTimeManagerComponent_StartCountdownForRace::ServerRunStartTime' has a wrong offset!");
static_assert(offsetof(DelMarTimeManagerComponent_StartCountdownForRace, InServerCountdownIntervalTime) == 0x000010, "Member 'DelMarTimeManagerComponent_StartCountdownForRace::InServerCountdownIntervalTime' has a wrong offset!");

// Function DelMarCore.DelMarTimeManagerComponent.GetRaceTimeRemaining
// 0x0008 (0x0008 - 0x0000)
struct DelMarTimeManagerComponent_GetRaceTimeRemaining final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeManagerComponent_GetRaceTimeRemaining) == 0x000008, "Wrong alignment on DelMarTimeManagerComponent_GetRaceTimeRemaining");
static_assert(sizeof(DelMarTimeManagerComponent_GetRaceTimeRemaining) == 0x000008, "Wrong size on DelMarTimeManagerComponent_GetRaceTimeRemaining");
static_assert(offsetof(DelMarTimeManagerComponent_GetRaceTimeRemaining, ReturnValue) == 0x000000, "Member 'DelMarTimeManagerComponent_GetRaceTimeRemaining::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTimeManagerComponent.GetSecondsRemainingTillRaceStart
// 0x0008 (0x0008 - 0x0000)
struct DelMarTimeManagerComponent_GetSecondsRemainingTillRaceStart final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeManagerComponent_GetSecondsRemainingTillRaceStart) == 0x000008, "Wrong alignment on DelMarTimeManagerComponent_GetSecondsRemainingTillRaceStart");
static_assert(sizeof(DelMarTimeManagerComponent_GetSecondsRemainingTillRaceStart) == 0x000008, "Wrong size on DelMarTimeManagerComponent_GetSecondsRemainingTillRaceStart");
static_assert(offsetof(DelMarTimeManagerComponent_GetSecondsRemainingTillRaceStart, ReturnValue) == 0x000000, "Member 'DelMarTimeManagerComponent_GetSecondsRemainingTillRaceStart::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTimeManagerComponent.GetSecondsSinceRaceStart
// 0x0008 (0x0008 - 0x0000)
struct DelMarTimeManagerComponent_GetSecondsSinceRaceStart final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeManagerComponent_GetSecondsSinceRaceStart) == 0x000008, "Wrong alignment on DelMarTimeManagerComponent_GetSecondsSinceRaceStart");
static_assert(sizeof(DelMarTimeManagerComponent_GetSecondsSinceRaceStart) == 0x000008, "Wrong size on DelMarTimeManagerComponent_GetSecondsSinceRaceStart");
static_assert(offsetof(DelMarTimeManagerComponent_GetSecondsSinceRaceStart, ReturnValue) == 0x000000, "Member 'DelMarTimeManagerComponent_GetSecondsSinceRaceStart::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTimeManagerComponent.GetServerCountdownIntervalTime
// 0x0008 (0x0008 - 0x0000)
struct DelMarTimeManagerComponent_GetServerCountdownIntervalTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeManagerComponent_GetServerCountdownIntervalTime) == 0x000008, "Wrong alignment on DelMarTimeManagerComponent_GetServerCountdownIntervalTime");
static_assert(sizeof(DelMarTimeManagerComponent_GetServerCountdownIntervalTime) == 0x000008, "Wrong size on DelMarTimeManagerComponent_GetServerCountdownIntervalTime");
static_assert(offsetof(DelMarTimeManagerComponent_GetServerCountdownIntervalTime, ReturnValue) == 0x000000, "Member 'DelMarTimeManagerComponent_GetServerCountdownIntervalTime::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTimeManagerComponent.GetServerRaceFinishTime
// 0x0008 (0x0008 - 0x0000)
struct DelMarTimeManagerComponent_GetServerRaceFinishTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeManagerComponent_GetServerRaceFinishTime) == 0x000008, "Wrong alignment on DelMarTimeManagerComponent_GetServerRaceFinishTime");
static_assert(sizeof(DelMarTimeManagerComponent_GetServerRaceFinishTime) == 0x000008, "Wrong size on DelMarTimeManagerComponent_GetServerRaceFinishTime");
static_assert(offsetof(DelMarTimeManagerComponent_GetServerRaceFinishTime, ReturnValue) == 0x000000, "Member 'DelMarTimeManagerComponent_GetServerRaceFinishTime::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTimeManagerComponent.GetServerRaceStartTime
// 0x0008 (0x0008 - 0x0000)
struct DelMarTimeManagerComponent_GetServerRaceStartTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeManagerComponent_GetServerRaceStartTime) == 0x000008, "Wrong alignment on DelMarTimeManagerComponent_GetServerRaceStartTime");
static_assert(sizeof(DelMarTimeManagerComponent_GetServerRaceStartTime) == 0x000008, "Wrong size on DelMarTimeManagerComponent_GetServerRaceStartTime");
static_assert(offsetof(DelMarTimeManagerComponent_GetServerRaceStartTime, ReturnValue) == 0x000000, "Member 'DelMarTimeManagerComponent_GetServerRaceStartTime::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTutorialInteractableSpline.BP_HandleAllSplineTriggersCompleted
// 0x0008 (0x0008 - 0x0000)
struct DelMarTutorialInteractableSpline_BP_HandleAllSplineTriggersCompleted final
{
public:
	class AActor*                                 FinalCompletedTrigger;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialInteractableSpline_BP_HandleAllSplineTriggersCompleted) == 0x000008, "Wrong alignment on DelMarTutorialInteractableSpline_BP_HandleAllSplineTriggersCompleted");
static_assert(sizeof(DelMarTutorialInteractableSpline_BP_HandleAllSplineTriggersCompleted) == 0x000008, "Wrong size on DelMarTutorialInteractableSpline_BP_HandleAllSplineTriggersCompleted");
static_assert(offsetof(DelMarTutorialInteractableSpline_BP_HandleAllSplineTriggersCompleted, FinalCompletedTrigger) == 0x000000, "Member 'DelMarTutorialInteractableSpline_BP_HandleAllSplineTriggersCompleted::FinalCompletedTrigger' has a wrong offset!");

// Function DelMarCore.DelMarTutorialInteractableSpline.HandleColliderOverlap
// 0x0008 (0x0008 - 0x0000)
struct DelMarTutorialInteractableSpline_HandleColliderOverlap final
{
public:
	class ADelMarTutorialTriggerActor*            InTrigger;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialInteractableSpline_HandleColliderOverlap) == 0x000008, "Wrong alignment on DelMarTutorialInteractableSpline_HandleColliderOverlap");
static_assert(sizeof(DelMarTutorialInteractableSpline_HandleColliderOverlap) == 0x000008, "Wrong size on DelMarTutorialInteractableSpline_HandleColliderOverlap");
static_assert(offsetof(DelMarTutorialInteractableSpline_HandleColliderOverlap, InTrigger) == 0x000000, "Member 'DelMarTutorialInteractableSpline_HandleColliderOverlap::InTrigger' has a wrong offset!");

// Function DelMarCore.DelMarTutorialInteractableSpline.GetHaveAllTriggersCompleted
// 0x0001 (0x0001 - 0x0000)
struct DelMarTutorialInteractableSpline_GetHaveAllTriggersCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialInteractableSpline_GetHaveAllTriggersCompleted) == 0x000001, "Wrong alignment on DelMarTutorialInteractableSpline_GetHaveAllTriggersCompleted");
static_assert(sizeof(DelMarTutorialInteractableSpline_GetHaveAllTriggersCompleted) == 0x000001, "Wrong size on DelMarTutorialInteractableSpline_GetHaveAllTriggersCompleted");
static_assert(offsetof(DelMarTutorialInteractableSpline_GetHaveAllTriggersCompleted, ReturnValue) == 0x000000, "Member 'DelMarTutorialInteractableSpline_GetHaveAllTriggersCompleted::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTutorialInteractableSpline.GetTriggerIndex
// 0x0010 (0x0010 - 0x0000)
struct DelMarTutorialInteractableSpline_GetTriggerIndex final
{
public:
	class ADelMarTutorialTriggerActor*            InTrigger;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTutorialInteractableSpline_GetTriggerIndex) == 0x000008, "Wrong alignment on DelMarTutorialInteractableSpline_GetTriggerIndex");
static_assert(sizeof(DelMarTutorialInteractableSpline_GetTriggerIndex) == 0x000010, "Wrong size on DelMarTutorialInteractableSpline_GetTriggerIndex");
static_assert(offsetof(DelMarTutorialInteractableSpline_GetTriggerIndex, InTrigger) == 0x000000, "Member 'DelMarTutorialInteractableSpline_GetTriggerIndex::InTrigger' has a wrong offset!");
static_assert(offsetof(DelMarTutorialInteractableSpline_GetTriggerIndex, ReturnValue) == 0x000008, "Member 'DelMarTutorialInteractableSpline_GetTriggerIndex::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTutorialInteractableSpline.GetTriggerIndexAsRatio
// 0x0010 (0x0010 - 0x0000)
struct DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio final
{
public:
	class ADelMarTutorialTriggerActor*            InTrigger;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio) == 0x000008, "Wrong alignment on DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio");
static_assert(sizeof(DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio) == 0x000010, "Wrong size on DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio");
static_assert(offsetof(DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio, InTrigger) == 0x000000, "Member 'DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio::InTrigger' has a wrong offset!");
static_assert(offsetof(DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio, ReturnValue) == 0x000008, "Member 'DelMarTutorialInteractableSpline_GetTriggerIndexAsRatio::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTutorialTriggerActor.BP_CanTriggerActor
// 0x0010 (0x0010 - 0x0000)
struct DelMarTutorialTriggerActor_BP_CanTriggerActor final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTutorialTriggerActor_BP_CanTriggerActor) == 0x000008, "Wrong alignment on DelMarTutorialTriggerActor_BP_CanTriggerActor");
static_assert(sizeof(DelMarTutorialTriggerActor_BP_CanTriggerActor) == 0x000010, "Wrong size on DelMarTutorialTriggerActor_BP_CanTriggerActor");
static_assert(offsetof(DelMarTutorialTriggerActor_BP_CanTriggerActor, OtherActor) == 0x000000, "Member 'DelMarTutorialTriggerActor_BP_CanTriggerActor::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarTutorialTriggerActor_BP_CanTriggerActor, ReturnValue) == 0x000008, "Member 'DelMarTutorialTriggerActor_BP_CanTriggerActor::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTutorialTriggerActor.CanTriggerActor
// 0x0010 (0x0010 - 0x0000)
struct DelMarTutorialTriggerActor_CanTriggerActor final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTutorialTriggerActor_CanTriggerActor) == 0x000008, "Wrong alignment on DelMarTutorialTriggerActor_CanTriggerActor");
static_assert(sizeof(DelMarTutorialTriggerActor_CanTriggerActor) == 0x000010, "Wrong size on DelMarTutorialTriggerActor_CanTriggerActor");
static_assert(offsetof(DelMarTutorialTriggerActor_CanTriggerActor, OtherActor) == 0x000000, "Member 'DelMarTutorialTriggerActor_CanTriggerActor::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarTutorialTriggerActor_CanTriggerActor, ReturnValue) == 0x000008, "Member 'DelMarTutorialTriggerActor_CanTriggerActor::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTutorialTriggerActor.HandleColliderOverlap
// 0x0108 (0x0108 - 0x0000)
struct DelMarTutorialTriggerActor_HandleColliderOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialTriggerActor_HandleColliderOverlap) == 0x000008, "Wrong alignment on DelMarTutorialTriggerActor_HandleColliderOverlap");
static_assert(sizeof(DelMarTutorialTriggerActor_HandleColliderOverlap) == 0x000108, "Wrong size on DelMarTutorialTriggerActor_HandleColliderOverlap");
static_assert(offsetof(DelMarTutorialTriggerActor_HandleColliderOverlap, OverlappedComponent) == 0x000000, "Member 'DelMarTutorialTriggerActor_HandleColliderOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(DelMarTutorialTriggerActor_HandleColliderOverlap, OtherActor) == 0x000008, "Member 'DelMarTutorialTriggerActor_HandleColliderOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(DelMarTutorialTriggerActor_HandleColliderOverlap, OtherComp) == 0x000010, "Member 'DelMarTutorialTriggerActor_HandleColliderOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(DelMarTutorialTriggerActor_HandleColliderOverlap, OtherBodyIndex) == 0x000018, "Member 'DelMarTutorialTriggerActor_HandleColliderOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(DelMarTutorialTriggerActor_HandleColliderOverlap, bFromSweep) == 0x00001C, "Member 'DelMarTutorialTriggerActor_HandleColliderOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(DelMarTutorialTriggerActor_HandleColliderOverlap, SweepResult) == 0x000020, "Member 'DelMarTutorialTriggerActor_HandleColliderOverlap::SweepResult' has a wrong offset!");

// Function DelMarCore.DelMarVehicleAction_Drift.HandleDrift
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleAction_Drift_HandleDrift final
{
public:
	float                                         DriftDirection;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleDriftState                      DriftState;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleAction_Drift_HandleDrift) == 0x000004, "Wrong alignment on DelMarVehicleAction_Drift_HandleDrift");
static_assert(sizeof(DelMarVehicleAction_Drift_HandleDrift) == 0x000008, "Wrong size on DelMarVehicleAction_Drift_HandleDrift");
static_assert(offsetof(DelMarVehicleAction_Drift_HandleDrift, DriftDirection) == 0x000000, "Member 'DelMarVehicleAction_Drift_HandleDrift::DriftDirection' has a wrong offset!");
static_assert(offsetof(DelMarVehicleAction_Drift_HandleDrift, DriftState) == 0x000004, "Member 'DelMarVehicleAction_Drift_HandleDrift::DriftState' has a wrong offset!");

// Function DelMarCore.DelMarVehicleAction_KickFlip.HandleKickflip
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleAction_KickFlip_HandleKickflip final
{
public:
	bool                                          bLeftSide;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleAction_KickFlip_HandleKickflip) == 0x000001, "Wrong alignment on DelMarVehicleAction_KickFlip_HandleKickflip");
static_assert(sizeof(DelMarVehicleAction_KickFlip_HandleKickflip) == 0x000001, "Wrong size on DelMarVehicleAction_KickFlip_HandleKickflip");
static_assert(offsetof(DelMarVehicleAction_KickFlip_HandleKickflip, bLeftSide) == 0x000000, "Member 'DelMarVehicleAction_KickFlip_HandleKickflip::bLeftSide' has a wrong offset!");

// Function DelMarCore.DelMarVehicleCameraMode_V2.OnDriftKickActivated
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleCameraMode_V2_OnDriftKickActivated final
{
public:
	float                                         DriftDirection;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleDriftState                      DriftState;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleCameraMode_V2_OnDriftKickActivated) == 0x000004, "Wrong alignment on DelMarVehicleCameraMode_V2_OnDriftKickActivated");
static_assert(sizeof(DelMarVehicleCameraMode_V2_OnDriftKickActivated) == 0x000008, "Wrong size on DelMarVehicleCameraMode_V2_OnDriftKickActivated");
static_assert(offsetof(DelMarVehicleCameraMode_V2_OnDriftKickActivated, DriftDirection) == 0x000000, "Member 'DelMarVehicleCameraMode_V2_OnDriftKickActivated::DriftDirection' has a wrong offset!");
static_assert(offsetof(DelMarVehicleCameraMode_V2_OnDriftKickActivated, DriftState) == 0x000004, "Member 'DelMarVehicleCameraMode_V2_OnDriftKickActivated::DriftState' has a wrong offset!");

// Function DelMarCore.DelMarVehicleCameraMode_V2.OnStartlineBoostActivated
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleCameraMode_V2_OnStartlineBoostActivated final
{
public:
	float                                         StartlineBoostPerc;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleCameraMode_V2_OnStartlineBoostActivated) == 0x000004, "Wrong alignment on DelMarVehicleCameraMode_V2_OnStartlineBoostActivated");
static_assert(sizeof(DelMarVehicleCameraMode_V2_OnStartlineBoostActivated) == 0x000004, "Wrong size on DelMarVehicleCameraMode_V2_OnStartlineBoostActivated");
static_assert(offsetof(DelMarVehicleCameraMode_V2_OnStartlineBoostActivated, StartlineBoostPerc) == 0x000000, "Member 'DelMarVehicleCameraMode_V2_OnStartlineBoostActivated::StartlineBoostPerc' has a wrong offset!");

// Function DelMarCore.DelMarVehicleCameraMode_V2.OnTurboBonusZoneStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleCameraMode_V2_OnTurboBonusZoneStateChanged final
{
public:
	EDelMarTurboZoneState                         ZoneState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleCameraMode_V2_OnTurboBonusZoneStateChanged) == 0x000001, "Wrong alignment on DelMarVehicleCameraMode_V2_OnTurboBonusZoneStateChanged");
static_assert(sizeof(DelMarVehicleCameraMode_V2_OnTurboBonusZoneStateChanged) == 0x000001, "Wrong size on DelMarVehicleCameraMode_V2_OnTurboBonusZoneStateChanged");
static_assert(offsetof(DelMarVehicleCameraMode_V2_OnTurboBonusZoneStateChanged, ZoneState) == 0x000000, "Member 'DelMarVehicleCameraMode_V2_OnTurboBonusZoneStateChanged::ZoneState' has a wrong offset!");

// Function DelMarCore.DelMarVehicleCameraMode_V2.OnWorldBonusSpeedStackGained
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained) == 0x000004, "Wrong alignment on DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained");
static_assert(sizeof(DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained) == 0x000008, "Wrong size on DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained");
static_assert(offsetof(DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained, Source) == 0x000000, "Member 'DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained::Source' has a wrong offset!");
static_assert(offsetof(DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained, Stacks) == 0x000004, "Member 'DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackGained::Stacks' has a wrong offset!");

// Function DelMarCore.DelMarVehicleCameraMode_V2.OnWorldBonusSpeedStackLost
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost) == 0x000004, "Wrong alignment on DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost");
static_assert(sizeof(DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost) == 0x000008, "Wrong size on DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost");
static_assert(offsetof(DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost, Source) == 0x000000, "Member 'DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost::Source' has a wrong offset!");
static_assert(offsetof(DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost, Stacks) == 0x000004, "Member 'DelMarVehicleCameraMode_V2_OnWorldBonusSpeedStackLost::Stacks' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.AnyWheelsOnGround
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_AnyWheelsOnGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_AnyWheelsOnGround) == 0x000001, "Wrong alignment on DelMarVehicleInterface_AnyWheelsOnGround");
static_assert(sizeof(DelMarVehicleInterface_AnyWheelsOnGround) == 0x000001, "Wrong size on DelMarVehicleInterface_AnyWheelsOnGround");
static_assert(offsetof(DelMarVehicleInterface_AnyWheelsOnGround, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_AnyWheelsOnGround::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.CanStrafeBeActivated
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_CanStrafeBeActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_CanStrafeBeActivated) == 0x000001, "Wrong alignment on DelMarVehicleInterface_CanStrafeBeActivated");
static_assert(sizeof(DelMarVehicleInterface_CanStrafeBeActivated) == 0x000001, "Wrong size on DelMarVehicleInterface_CanStrafeBeActivated");
static_assert(offsetof(DelMarVehicleInterface_CanStrafeBeActivated, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_CanStrafeBeActivated::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetAcceleration
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetAcceleration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetAcceleration) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetAcceleration");
static_assert(sizeof(DelMarVehicleInterface_GetAcceleration) == 0x000004, "Wrong size on DelMarVehicleInterface_GetAcceleration");
static_assert(offsetof(DelMarVehicleInterface_GetAcceleration, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetAcceleration::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetBaseForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetBaseForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetBaseForwardSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetBaseForwardSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetBaseForwardSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetBaseForwardSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetBaseForwardSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetBaseForwardSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetBaseTargetSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetBaseTargetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetBaseTargetSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetBaseTargetSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetBaseTargetSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetBaseTargetSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetBaseTargetSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetBaseTargetSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetBonusSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetBonusSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetCosmeticComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleInterface_GetCosmeticComponent final
{
public:
	class UDelMarVehicleCosmeticComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetCosmeticComponent) == 0x000008, "Wrong alignment on DelMarVehicleInterface_GetCosmeticComponent");
static_assert(sizeof(DelMarVehicleInterface_GetCosmeticComponent) == 0x000008, "Wrong size on DelMarVehicleInterface_GetCosmeticComponent");
static_assert(offsetof(DelMarVehicleInterface_GetCosmeticComponent, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetCosmeticComponent::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetCurrentNumTurboCharges
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetCurrentNumTurboCharges final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetCurrentNumTurboCharges) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetCurrentNumTurboCharges");
static_assert(sizeof(DelMarVehicleInterface_GetCurrentNumTurboCharges) == 0x000004, "Wrong size on DelMarVehicleInterface_GetCurrentNumTurboCharges");
static_assert(offsetof(DelMarVehicleInterface_GetCurrentNumTurboCharges, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetCurrentNumTurboCharges::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetCurrentTurboBonusZoneState
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_GetCurrentTurboBonusZoneState final
{
public:
	EDelMarTurboZoneState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetCurrentTurboBonusZoneState) == 0x000001, "Wrong alignment on DelMarVehicleInterface_GetCurrentTurboBonusZoneState");
static_assert(sizeof(DelMarVehicleInterface_GetCurrentTurboBonusZoneState) == 0x000001, "Wrong size on DelMarVehicleInterface_GetCurrentTurboBonusZoneState");
static_assert(offsetof(DelMarVehicleInterface_GetCurrentTurboBonusZoneState, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetCurrentTurboBonusZoneState::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetDraftingMaxBonusSpeedPercentage
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetDraftingMaxBonusSpeedPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetDraftingMaxBonusSpeedPercentage) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetDraftingMaxBonusSpeedPercentage");
static_assert(sizeof(DelMarVehicleInterface_GetDraftingMaxBonusSpeedPercentage) == 0x000004, "Wrong size on DelMarVehicleInterface_GetDraftingMaxBonusSpeedPercentage");
static_assert(offsetof(DelMarVehicleInterface_GetDraftingMaxBonusSpeedPercentage, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetDraftingMaxBonusSpeedPercentage::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetDraftingState
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_GetDraftingState final
{
public:
	EDelmarDraftingState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetDraftingState) == 0x000001, "Wrong alignment on DelMarVehicleInterface_GetDraftingState");
static_assert(sizeof(DelMarVehicleInterface_GetDraftingState) == 0x000001, "Wrong size on DelMarVehicleInterface_GetDraftingState");
static_assert(offsetof(DelMarVehicleInterface_GetDraftingState, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetDraftingState::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetDriftAngle
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetDriftAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetDriftAngle) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetDriftAngle");
static_assert(sizeof(DelMarVehicleInterface_GetDriftAngle) == 0x000004, "Wrong size on DelMarVehicleInterface_GetDriftAngle");
static_assert(offsetof(DelMarVehicleInterface_GetDriftAngle, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetDriftAngle::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetDriftBoostAppliedBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetDriftBoostAppliedBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetDriftBoostAppliedBonusSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetDriftBoostAppliedBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetDriftBoostAppliedBonusSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetDriftBoostAppliedBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetDriftBoostAppliedBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetDriftBoostAppliedBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetDriftDuration
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetDriftDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetDriftDuration) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetDriftDuration");
static_assert(sizeof(DelMarVehicleInterface_GetDriftDuration) == 0x000004, "Wrong size on DelMarVehicleInterface_GetDriftDuration");
static_assert(offsetof(DelMarVehicleInterface_GetDriftDuration, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetDriftDuration::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetDriftSlipAngleRatio
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetDriftSlipAngleRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetDriftSlipAngleRatio) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetDriftSlipAngleRatio");
static_assert(sizeof(DelMarVehicleInterface_GetDriftSlipAngleRatio) == 0x000004, "Wrong size on DelMarVehicleInterface_GetDriftSlipAngleRatio");
static_assert(offsetof(DelMarVehicleInterface_GetDriftSlipAngleRatio, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetDriftSlipAngleRatio::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetForwardSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetForwardSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetForwardSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetForwardSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetForwardSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetForwardSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetKickflipActivationCharges
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetKickflipActivationCharges final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetKickflipActivationCharges) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetKickflipActivationCharges");
static_assert(sizeof(DelMarVehicleInterface_GetKickflipActivationCharges) == 0x000004, "Wrong size on DelMarVehicleInterface_GetKickflipActivationCharges");
static_assert(offsetof(DelMarVehicleInterface_GetKickflipActivationCharges, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetKickflipActivationCharges::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetKickflipDistanceToSuctionSurface
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetKickflipDistanceToSuctionSurface final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetKickflipDistanceToSuctionSurface) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetKickflipDistanceToSuctionSurface");
static_assert(sizeof(DelMarVehicleInterface_GetKickflipDistanceToSuctionSurface) == 0x000004, "Wrong size on DelMarVehicleInterface_GetKickflipDistanceToSuctionSurface");
static_assert(offsetof(DelMarVehicleInterface_GetKickflipDistanceToSuctionSurface, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetKickflipDistanceToSuctionSurface::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetKickflipDuration
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetKickflipDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetKickflipDuration) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetKickflipDuration");
static_assert(sizeof(DelMarVehicleInterface_GetKickflipDuration) == 0x000004, "Wrong size on DelMarVehicleInterface_GetKickflipDuration");
static_assert(offsetof(DelMarVehicleInterface_GetKickflipDuration, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetKickflipDuration::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetLandingData
// 0x000C (0x000C - 0x0000)
struct DelMarVehicleInterface_GetLandingData final
{
public:
	struct FDelMarVehicleLandingData              ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetLandingData) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetLandingData");
static_assert(sizeof(DelMarVehicleInterface_GetLandingData) == 0x00000C, "Wrong size on DelMarVehicleInterface_GetLandingData");
static_assert(offsetof(DelMarVehicleInterface_GetLandingData, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetLandingData::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetMaxNumTurboCharges
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetMaxNumTurboCharges final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetMaxNumTurboCharges) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetMaxNumTurboCharges");
static_assert(sizeof(DelMarVehicleInterface_GetMaxNumTurboCharges) == 0x000004, "Wrong size on DelMarVehicleInterface_GetMaxNumTurboCharges");
static_assert(offsetof(DelMarVehicleInterface_GetMaxNumTurboCharges, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetMaxNumTurboCharges::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetNormalizedBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetNormalizedBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetNormalizedBonusSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetNormalizedBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetNormalizedBonusSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetNormalizedBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetNormalizedBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetNormalizedBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetNormalizedForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetNormalizedForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetNormalizedForwardSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetNormalizedForwardSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetNormalizedForwardSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetNormalizedForwardSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetNormalizedForwardSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetNormalizedForwardSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetOversteerAccumulationPercentage
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetOversteerAccumulationPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetOversteerAccumulationPercentage) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetOversteerAccumulationPercentage");
static_assert(sizeof(DelMarVehicleInterface_GetOversteerAccumulationPercentage) == 0x000004, "Wrong size on DelMarVehicleInterface_GetOversteerAccumulationPercentage");
static_assert(offsetof(DelMarVehicleInterface_GetOversteerAccumulationPercentage, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetOversteerAccumulationPercentage::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetPercentageTurboActiveTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetPercentageTurboActiveTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetPercentageTurboActiveTimeRemaining) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetPercentageTurboActiveTimeRemaining");
static_assert(sizeof(DelMarVehicleInterface_GetPercentageTurboActiveTimeRemaining) == 0x000004, "Wrong size on DelMarVehicleInterface_GetPercentageTurboActiveTimeRemaining");
static_assert(offsetof(DelMarVehicleInterface_GetPercentageTurboActiveTimeRemaining, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetPercentageTurboActiveTimeRemaining::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetPostProcessComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleInterface_GetPostProcessComponent final
{
public:
	class UPostProcessComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetPostProcessComponent) == 0x000008, "Wrong alignment on DelMarVehicleInterface_GetPostProcessComponent");
static_assert(sizeof(DelMarVehicleInterface_GetPostProcessComponent) == 0x000008, "Wrong size on DelMarVehicleInterface_GetPostProcessComponent");
static_assert(offsetof(DelMarVehicleInterface_GetPostProcessComponent, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetPostProcessComponent::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetPotentialDriftBoostPercentage
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetPotentialDriftBoostPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetPotentialDriftBoostPercentage) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetPotentialDriftBoostPercentage");
static_assert(sizeof(DelMarVehicleInterface_GetPotentialDriftBoostPercentage) == 0x000004, "Wrong size on DelMarVehicleInterface_GetPotentialDriftBoostPercentage");
static_assert(offsetof(DelMarVehicleInterface_GetPotentialDriftBoostPercentage, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetPotentialDriftBoostPercentage::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetQueuedBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetQueuedBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetQueuedBonusSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetQueuedBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetQueuedBonusSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetQueuedBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetQueuedBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetQueuedBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetReattachmentDirection
// 0x0018 (0x0018 - 0x0000)
struct DelMarVehicleInterface_GetReattachmentDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetReattachmentDirection) == 0x000008, "Wrong alignment on DelMarVehicleInterface_GetReattachmentDirection");
static_assert(sizeof(DelMarVehicleInterface_GetReattachmentDirection) == 0x000018, "Wrong size on DelMarVehicleInterface_GetReattachmentDirection");
static_assert(offsetof(DelMarVehicleInterface_GetReattachmentDirection, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetReattachmentDirection::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetRemainingTurboActiveSeconds
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetRemainingTurboActiveSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetRemainingTurboActiveSeconds) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetRemainingTurboActiveSeconds");
static_assert(sizeof(DelMarVehicleInterface_GetRemainingTurboActiveSeconds) == 0x000004, "Wrong size on DelMarVehicleInterface_GetRemainingTurboActiveSeconds");
static_assert(offsetof(DelMarVehicleInterface_GetRemainingTurboActiveSeconds, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetRemainingTurboActiveSeconds::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetSideSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetSideSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetSideSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetSideSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetSideSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetSideSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetSideSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetSideSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleInterface_GetSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetSkeletalMeshComponent) == 0x000008, "Wrong alignment on DelMarVehicleInterface_GetSkeletalMeshComponent");
static_assert(sizeof(DelMarVehicleInterface_GetSkeletalMeshComponent) == 0x000008, "Wrong size on DelMarVehicleInterface_GetSkeletalMeshComponent");
static_assert(offsetof(DelMarVehicleInterface_GetSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetSpeedometerSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetSpeedometerSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetSpeedometerSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetSpeedometerSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetSpeedometerSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetSpeedometerSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetSpeedometerSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetSpeedometerSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetStableSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetStableSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetStableSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetStableSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetStableSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetStableSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetStableSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetStableSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetStartlineAppliedBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetStartlineAppliedBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetStartlineAppliedBonusSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetStartlineAppliedBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetStartlineAppliedBonusSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetStartlineAppliedBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetStartlineAppliedBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetStartlineAppliedBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetStartlineMaxEarnedBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetStartlineMaxEarnedBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetStartlineMaxEarnedBonusSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetStartlineMaxEarnedBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetStartlineMaxEarnedBonusSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetStartlineMaxEarnedBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetStartlineMaxEarnedBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetStartlineMaxEarnedBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetStartlinePercentageMaxBonusSpeedEarned
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetStartlinePercentageMaxBonusSpeedEarned final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetStartlinePercentageMaxBonusSpeedEarned) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetStartlinePercentageMaxBonusSpeedEarned");
static_assert(sizeof(DelMarVehicleInterface_GetStartlinePercentageMaxBonusSpeedEarned) == 0x000004, "Wrong size on DelMarVehicleInterface_GetStartlinePercentageMaxBonusSpeedEarned");
static_assert(offsetof(DelMarVehicleInterface_GetStartlinePercentageMaxBonusSpeedEarned, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetStartlinePercentageMaxBonusSpeedEarned::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetSteering
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetSteering final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetSteering) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetSteering");
static_assert(sizeof(DelMarVehicleInterface_GetSteering) == 0x000004, "Wrong size on DelMarVehicleInterface_GetSteering");
static_assert(offsetof(DelMarVehicleInterface_GetSteering, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetSteering::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetSteeringAngle
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetSteeringAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetSteeringAngle) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetSteeringAngle");
static_assert(sizeof(DelMarVehicleInterface_GetSteeringAngle) == 0x000004, "Wrong size on DelMarVehicleInterface_GetSteeringAngle");
static_assert(offsetof(DelMarVehicleInterface_GetSteeringAngle, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetSteeringAngle::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetStrafeCooldownPercentage
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetStrafeCooldownPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetStrafeCooldownPercentage) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetStrafeCooldownPercentage");
static_assert(sizeof(DelMarVehicleInterface_GetStrafeCooldownPercentage) == 0x000004, "Wrong size on DelMarVehicleInterface_GetStrafeCooldownPercentage");
static_assert(offsetof(DelMarVehicleInterface_GetStrafeCooldownPercentage, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetStrafeCooldownPercentage::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetTargetDriftSide
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetTargetDriftSide final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetTargetDriftSide) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetTargetDriftSide");
static_assert(sizeof(DelMarVehicleInterface_GetTargetDriftSide) == 0x000004, "Wrong size on DelMarVehicleInterface_GetTargetDriftSide");
static_assert(offsetof(DelMarVehicleInterface_GetTargetDriftSide, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetTargetDriftSide::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetTargetSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetTargetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetTargetSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetTargetSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetTargetSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetTargetSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetTargetSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetTargetSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetThrottle
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetThrottle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetThrottle) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetThrottle");
static_assert(sizeof(DelMarVehicleInterface_GetThrottle) == 0x000004, "Wrong size on DelMarVehicleInterface_GetThrottle");
static_assert(offsetof(DelMarVehicleInterface_GetThrottle, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetThrottle::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetTotalTimeSkydiving
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetTotalTimeSkydiving final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetTotalTimeSkydiving) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetTotalTimeSkydiving");
static_assert(sizeof(DelMarVehicleInterface_GetTotalTimeSkydiving) == 0x000004, "Wrong size on DelMarVehicleInterface_GetTotalTimeSkydiving");
static_assert(offsetof(DelMarVehicleInterface_GetTotalTimeSkydiving, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetTotalTimeSkydiving::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetTrackPositionComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleInterface_GetTrackPositionComponent final
{
public:
	class UDelMarTrackPositionComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetTrackPositionComponent) == 0x000008, "Wrong alignment on DelMarVehicleInterface_GetTrackPositionComponent");
static_assert(sizeof(DelMarVehicleInterface_GetTrackPositionComponent) == 0x000008, "Wrong size on DelMarVehicleInterface_GetTrackPositionComponent");
static_assert(offsetof(DelMarVehicleInterface_GetTrackPositionComponent, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetTrackPositionComponent::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetTurboAdditionalActiveSeconds
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetTurboAdditionalActiveSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetTurboAdditionalActiveSeconds) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetTurboAdditionalActiveSeconds");
static_assert(sizeof(DelMarVehicleInterface_GetTurboAdditionalActiveSeconds) == 0x000004, "Wrong size on DelMarVehicleInterface_GetTurboAdditionalActiveSeconds");
static_assert(offsetof(DelMarVehicleInterface_GetTurboAdditionalActiveSeconds, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetTurboAdditionalActiveSeconds::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetTurboAppliedBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetTurboAppliedBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetTurboAppliedBonusSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetTurboAppliedBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetTurboAppliedBonusSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetTurboAppliedBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetTurboAppliedBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetTurboAppliedBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetTurboBonusZoneBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetTurboBonusZoneBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetTurboBonusZoneBonusSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetTurboBonusZoneBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetTurboBonusZoneBonusSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetTurboBonusZoneBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetTurboBonusZoneBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetTurboBonusZoneBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetUnderthrustActiveDuration
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetUnderthrustActiveDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetUnderthrustActiveDuration) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetUnderthrustActiveDuration");
static_assert(sizeof(DelMarVehicleInterface_GetUnderthrustActiveDuration) == 0x000004, "Wrong size on DelMarVehicleInterface_GetUnderthrustActiveDuration");
static_assert(offsetof(DelMarVehicleInterface_GetUnderthrustActiveDuration, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetUnderthrustActiveDuration::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetUnderthrustPercentageTankRemaining
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetUnderthrustPercentageTankRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetUnderthrustPercentageTankRemaining) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetUnderthrustPercentageTankRemaining");
static_assert(sizeof(DelMarVehicleInterface_GetUnderthrustPercentageTankRemaining) == 0x000004, "Wrong size on DelMarVehicleInterface_GetUnderthrustPercentageTankRemaining");
static_assert(offsetof(DelMarVehicleInterface_GetUnderthrustPercentageTankRemaining, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetUnderthrustPercentageTankRemaining::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetVehicleForwardState
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_GetVehicleForwardState final
{
public:
	EDelMarVehicleForwardState                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetVehicleForwardState) == 0x000001, "Wrong alignment on DelMarVehicleInterface_GetVehicleForwardState");
static_assert(sizeof(DelMarVehicleInterface_GetVehicleForwardState) == 0x000001, "Wrong size on DelMarVehicleInterface_GetVehicleForwardState");
static_assert(offsetof(DelMarVehicleInterface_GetVehicleForwardState, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetVehicleForwardState::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetVelocity
// 0x0018 (0x0018 - 0x0000)
struct DelMarVehicleInterface_GetVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetVelocity) == 0x000008, "Wrong alignment on DelMarVehicleInterface_GetVelocity");
static_assert(sizeof(DelMarVehicleInterface_GetVelocity) == 0x000018, "Wrong size on DelMarVehicleInterface_GetVelocity");
static_assert(offsetof(DelMarVehicleInterface_GetVelocity, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetVelocity::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.GetWorldAppliedBonusSpeed
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleInterface_GetWorldAppliedBonusSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_GetWorldAppliedBonusSpeed) == 0x000004, "Wrong alignment on DelMarVehicleInterface_GetWorldAppliedBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_GetWorldAppliedBonusSpeed) == 0x000004, "Wrong size on DelMarVehicleInterface_GetWorldAppliedBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_GetWorldAppliedBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_GetWorldAppliedBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.HasValidDraftingTarget
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_HasValidDraftingTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_HasValidDraftingTarget) == 0x000001, "Wrong alignment on DelMarVehicleInterface_HasValidDraftingTarget");
static_assert(sizeof(DelMarVehicleInterface_HasValidDraftingTarget) == 0x000001, "Wrong size on DelMarVehicleInterface_HasValidDraftingTarget");
static_assert(offsetof(DelMarVehicleInterface_HasValidDraftingTarget, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_HasValidDraftingTarget::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.InDriftBoostRange
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_InDriftBoostRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_InDriftBoostRange) == 0x000001, "Wrong alignment on DelMarVehicleInterface_InDriftBoostRange");
static_assert(sizeof(DelMarVehicleInterface_InDriftBoostRange) == 0x000001, "Wrong size on DelMarVehicleInterface_InDriftBoostRange");
static_assert(offsetof(DelMarVehicleInterface_InDriftBoostRange, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_InDriftBoostRange::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsAccelerating
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsAccelerating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsAccelerating) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsAccelerating");
static_assert(sizeof(DelMarVehicleInterface_IsAccelerating) == 0x000001, "Wrong size on DelMarVehicleInterface_IsAccelerating");
static_assert(offsetof(DelMarVehicleInterface_IsAccelerating, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsAccelerating::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsAirFreestyling
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsAirFreestyling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsAirFreestyling) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsAirFreestyling");
static_assert(sizeof(DelMarVehicleInterface_IsAirFreestyling) == 0x000001, "Wrong size on DelMarVehicleInterface_IsAirFreestyling");
static_assert(offsetof(DelMarVehicleInterface_IsAirFreestyling, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsAirFreestyling::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsAllVehicleInputDisabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsAllVehicleInputDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsAllVehicleInputDisabled) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsAllVehicleInputDisabled");
static_assert(sizeof(DelMarVehicleInterface_IsAllVehicleInputDisabled) == 0x000001, "Wrong size on DelMarVehicleInterface_IsAllVehicleInputDisabled");
static_assert(offsetof(DelMarVehicleInterface_IsAllVehicleInputDisabled, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsAllVehicleInputDisabled::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsBraking
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsBraking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsBraking) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsBraking");
static_assert(sizeof(DelMarVehicleInterface_IsBraking) == 0x000001, "Wrong size on DelMarVehicleInterface_IsBraking");
static_assert(offsetof(DelMarVehicleInterface_IsBraking, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsBraking::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsDriftControlled
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsDriftControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsDriftControlled) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsDriftControlled");
static_assert(sizeof(DelMarVehicleInterface_IsDriftControlled) == 0x000001, "Wrong size on DelMarVehicleInterface_IsDriftControlled");
static_assert(offsetof(DelMarVehicleInterface_IsDriftControlled, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsDriftControlled::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsInvulnerabilityActive
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsInvulnerabilityActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsInvulnerabilityActive) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsInvulnerabilityActive");
static_assert(sizeof(DelMarVehicleInterface_IsInvulnerabilityActive) == 0x000001, "Wrong size on DelMarVehicleInterface_IsInvulnerabilityActive");
static_assert(offsetof(DelMarVehicleInterface_IsInvulnerabilityActive, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsInvulnerabilityActive::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsKickflipSuctionActive
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsKickflipSuctionActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsKickflipSuctionActive) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsKickflipSuctionActive");
static_assert(sizeof(DelMarVehicleInterface_IsKickflipSuctionActive) == 0x000001, "Wrong size on DelMarVehicleInterface_IsKickflipSuctionActive");
static_assert(offsetof(DelMarVehicleInterface_IsKickflipSuctionActive, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsKickflipSuctionActive::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsKickingWheels
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsKickingWheels final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsKickingWheels) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsKickingWheels");
static_assert(sizeof(DelMarVehicleInterface_IsKickingWheels) == 0x000001, "Wrong size on DelMarVehicleInterface_IsKickingWheels");
static_assert(offsetof(DelMarVehicleInterface_IsKickingWheels, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsKickingWheels::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsLosingAppliedBonusSpeed
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsLosingAppliedBonusSpeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsLosingAppliedBonusSpeed) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsLosingAppliedBonusSpeed");
static_assert(sizeof(DelMarVehicleInterface_IsLosingAppliedBonusSpeed) == 0x000001, "Wrong size on DelMarVehicleInterface_IsLosingAppliedBonusSpeed");
static_assert(offsetof(DelMarVehicleInterface_IsLosingAppliedBonusSpeed, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsLosingAppliedBonusSpeed::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsReattaching
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsReattaching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsReattaching) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsReattaching");
static_assert(sizeof(DelMarVehicleInterface_IsReattaching) == 0x000001, "Wrong size on DelMarVehicleInterface_IsReattaching");
static_assert(offsetof(DelMarVehicleInterface_IsReattaching, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsReattaching::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsSkyDiving
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsSkyDiving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsSkyDiving) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsSkyDiving");
static_assert(sizeof(DelMarVehicleInterface_IsSkyDiving) == 0x000001, "Wrong size on DelMarVehicleInterface_IsSkyDiving");
static_assert(offsetof(DelMarVehicleInterface_IsSkyDiving, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsSkyDiving::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsStrafeActive
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsStrafeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsStrafeActive) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsStrafeActive");
static_assert(sizeof(DelMarVehicleInterface_IsStrafeActive) == 0x000001, "Wrong size on DelMarVehicleInterface_IsStrafeActive");
static_assert(offsetof(DelMarVehicleInterface_IsStrafeActive, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsStrafeActive::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsStrafeDisabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsStrafeDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsStrafeDisabled) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsStrafeDisabled");
static_assert(sizeof(DelMarVehicleInterface_IsStrafeDisabled) == 0x000001, "Wrong size on DelMarVehicleInterface_IsStrafeDisabled");
static_assert(offsetof(DelMarVehicleInterface_IsStrafeDisabled, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsStrafeDisabled::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.IsStrafeLeft
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_IsStrafeLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_IsStrafeLeft) == 0x000001, "Wrong alignment on DelMarVehicleInterface_IsStrafeLeft");
static_assert(sizeof(DelMarVehicleInterface_IsStrafeLeft) == 0x000001, "Wrong size on DelMarVehicleInterface_IsStrafeLeft");
static_assert(offsetof(DelMarVehicleInterface_IsStrafeLeft, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_IsStrafeLeft::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleInterface.WheelsOnGround
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleInterface_WheelsOnGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleInterface_WheelsOnGround) == 0x000001, "Wrong alignment on DelMarVehicleInterface_WheelsOnGround");
static_assert(sizeof(DelMarVehicleInterface_WheelsOnGround) == 0x000001, "Wrong size on DelMarVehicleInterface_WheelsOnGround");
static_assert(offsetof(DelMarVehicleInterface_WheelsOnGround, ReturnValue) == 0x000000, "Member 'DelMarVehicleInterface_WheelsOnGround::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.AddTargetSpeedAdjustment
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicle_AddTargetSpeedAdjustment final
{
public:
	class FName                                   Source;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_AddTargetSpeedAdjustment) == 0x000004, "Wrong alignment on DelMarVehicle_AddTargetSpeedAdjustment");
static_assert(sizeof(DelMarVehicle_AddTargetSpeedAdjustment) == 0x000008, "Wrong size on DelMarVehicle_AddTargetSpeedAdjustment");
static_assert(offsetof(DelMarVehicle_AddTargetSpeedAdjustment, Source) == 0x000000, "Member 'DelMarVehicle_AddTargetSpeedAdjustment::Source' has a wrong offset!");
static_assert(offsetof(DelMarVehicle_AddTargetSpeedAdjustment, Value) == 0x000004, "Member 'DelMarVehicle_AddTargetSpeedAdjustment::Value' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.AddWorldBonusSpeedStack
// 0x0024 (0x0024 - 0x0000)
struct DelMarVehicle_AddWorldBonusSpeedStack final
{
public:
	struct FDelMarWorldBonusSpeedStack            BonusSpeedStack;                                   // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_AddWorldBonusSpeedStack) == 0x000004, "Wrong alignment on DelMarVehicle_AddWorldBonusSpeedStack");
static_assert(sizeof(DelMarVehicle_AddWorldBonusSpeedStack) == 0x000024, "Wrong size on DelMarVehicle_AddWorldBonusSpeedStack");
static_assert(offsetof(DelMarVehicle_AddWorldBonusSpeedStack, BonusSpeedStack) == 0x000000, "Member 'DelMarVehicle_AddWorldBonusSpeedStack::BonusSpeedStack' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.DemolishVehicle
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicle_DemolishVehicle final
{
public:
	struct FGameplayTag                           InCausedByTag;                                     // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_DemolishVehicle) == 0x000004, "Wrong alignment on DelMarVehicle_DemolishVehicle");
static_assert(sizeof(DelMarVehicle_DemolishVehicle) == 0x000004, "Wrong size on DelMarVehicle_DemolishVehicle");
static_assert(offsetof(DelMarVehicle_DemolishVehicle, InCausedByTag) == 0x000000, "Member 'DelMarVehicle_DemolishVehicle::InCausedByTag' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.ResetTrackPosition
// 0x0010 (0x0010 - 0x0000)
struct DelMarVehicle_ResetTrackPosition final
{
public:
	class ADelMarTrackBase*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrackSegment;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicle_ResetTrackPosition) == 0x000008, "Wrong alignment on DelMarVehicle_ResetTrackPosition");
static_assert(sizeof(DelMarVehicle_ResetTrackPosition) == 0x000010, "Wrong size on DelMarVehicle_ResetTrackPosition");
static_assert(offsetof(DelMarVehicle_ResetTrackPosition, Track) == 0x000000, "Member 'DelMarVehicle_ResetTrackPosition::Track' has a wrong offset!");
static_assert(offsetof(DelMarVehicle_ResetTrackPosition, TrackSegment) == 0x000008, "Member 'DelMarVehicle_ResetTrackPosition::TrackSegment' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.ServerAddReplicatedGameplayTag
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicle_ServerAddReplicatedGameplayTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_ServerAddReplicatedGameplayTag) == 0x000004, "Wrong alignment on DelMarVehicle_ServerAddReplicatedGameplayTag");
static_assert(sizeof(DelMarVehicle_ServerAddReplicatedGameplayTag) == 0x000004, "Wrong size on DelMarVehicle_ServerAddReplicatedGameplayTag");
static_assert(offsetof(DelMarVehicle_ServerAddReplicatedGameplayTag, InTag) == 0x000000, "Member 'DelMarVehicle_ServerAddReplicatedGameplayTag::InTag' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.ServerAddReplicatedGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct DelMarVehicle_ServerAddReplicatedGameplayTags final
{
public:
	struct FGameplayTagContainer                  InTags;                                            // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_ServerAddReplicatedGameplayTags) == 0x000008, "Wrong alignment on DelMarVehicle_ServerAddReplicatedGameplayTags");
static_assert(sizeof(DelMarVehicle_ServerAddReplicatedGameplayTags) == 0x000020, "Wrong size on DelMarVehicle_ServerAddReplicatedGameplayTags");
static_assert(offsetof(DelMarVehicle_ServerAddReplicatedGameplayTags, InTags) == 0x000000, "Member 'DelMarVehicle_ServerAddReplicatedGameplayTags::InTags' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.ServerDemolishVehicle
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicle_ServerDemolishVehicle final
{
public:
	struct FGameplayTag                           InCausedByTag;                                     // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_ServerDemolishVehicle) == 0x000004, "Wrong alignment on DelMarVehicle_ServerDemolishVehicle");
static_assert(sizeof(DelMarVehicle_ServerDemolishVehicle) == 0x000004, "Wrong size on DelMarVehicle_ServerDemolishVehicle");
static_assert(offsetof(DelMarVehicle_ServerDemolishVehicle, InCausedByTag) == 0x000000, "Member 'DelMarVehicle_ServerDemolishVehicle::InCausedByTag' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.ServerRemoveReplicatedGameplayTag
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicle_ServerRemoveReplicatedGameplayTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_ServerRemoveReplicatedGameplayTag) == 0x000004, "Wrong alignment on DelMarVehicle_ServerRemoveReplicatedGameplayTag");
static_assert(sizeof(DelMarVehicle_ServerRemoveReplicatedGameplayTag) == 0x000004, "Wrong size on DelMarVehicle_ServerRemoveReplicatedGameplayTag");
static_assert(offsetof(DelMarVehicle_ServerRemoveReplicatedGameplayTag, InTag) == 0x000000, "Member 'DelMarVehicle_ServerRemoveReplicatedGameplayTag::InTag' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.ServerRemoveReplicatedGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct DelMarVehicle_ServerRemoveReplicatedGameplayTags final
{
public:
	struct FGameplayTagContainer                  InTags;                                            // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_ServerRemoveReplicatedGameplayTags) == 0x000008, "Wrong alignment on DelMarVehicle_ServerRemoveReplicatedGameplayTags");
static_assert(sizeof(DelMarVehicle_ServerRemoveReplicatedGameplayTags) == 0x000020, "Wrong size on DelMarVehicle_ServerRemoveReplicatedGameplayTags");
static_assert(offsetof(DelMarVehicle_ServerRemoveReplicatedGameplayTags, InTags) == 0x000000, "Member 'DelMarVehicle_ServerRemoveReplicatedGameplayTags::InTags' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.ServerSetLocalDriverHasReplicatedTheVehicle
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicle_ServerSetLocalDriverHasReplicatedTheVehicle final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_ServerSetLocalDriverHasReplicatedTheVehicle) == 0x000001, "Wrong alignment on DelMarVehicle_ServerSetLocalDriverHasReplicatedTheVehicle");
static_assert(sizeof(DelMarVehicle_ServerSetLocalDriverHasReplicatedTheVehicle) == 0x000001, "Wrong size on DelMarVehicle_ServerSetLocalDriverHasReplicatedTheVehicle");
static_assert(offsetof(DelMarVehicle_ServerSetLocalDriverHasReplicatedTheVehicle, bNewValue) == 0x000000, "Member 'DelMarVehicle_ServerSetLocalDriverHasReplicatedTheVehicle::bNewValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.SetTeleportRotation
// 0x0018 (0x0018 - 0x0000)
struct DelMarVehicle_SetTeleportRotation final
{
public:
	struct FRotator                               DestRotation;                                      // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_SetTeleportRotation) == 0x000008, "Wrong alignment on DelMarVehicle_SetTeleportRotation");
static_assert(sizeof(DelMarVehicle_SetTeleportRotation) == 0x000018, "Wrong size on DelMarVehicle_SetTeleportRotation");
static_assert(offsetof(DelMarVehicle_SetTeleportRotation, DestRotation) == 0x000000, "Member 'DelMarVehicle_SetTeleportRotation::DestRotation' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.SetVehicleMesh
// 0x0010 (0x0010 - 0x0000)
struct DelMarVehicle_SetVehicleMesh final
{
public:
	class USkeletalMesh*                          NewMesh;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          PhysicsAsset;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_SetVehicleMesh) == 0x000008, "Wrong alignment on DelMarVehicle_SetVehicleMesh");
static_assert(sizeof(DelMarVehicle_SetVehicleMesh) == 0x000010, "Wrong size on DelMarVehicle_SetVehicleMesh");
static_assert(offsetof(DelMarVehicle_SetVehicleMesh, NewMesh) == 0x000000, "Member 'DelMarVehicle_SetVehicleMesh::NewMesh' has a wrong offset!");
static_assert(offsetof(DelMarVehicle_SetVehicleMesh, PhysicsAsset) == 0x000008, "Member 'DelMarVehicle_SetVehicleMesh::PhysicsAsset' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.GetAudioComponentGroup
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicle_GetAudioComponentGroup final
{
public:
	class UDelMarAudioComponentGroup*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_GetAudioComponentGroup) == 0x000008, "Wrong alignment on DelMarVehicle_GetAudioComponentGroup");
static_assert(sizeof(DelMarVehicle_GetAudioComponentGroup) == 0x000008, "Wrong size on DelMarVehicle_GetAudioComponentGroup");
static_assert(offsetof(DelMarVehicle_GetAudioComponentGroup, ReturnValue) == 0x000000, "Member 'DelMarVehicle_GetAudioComponentGroup::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.GetCosmeticComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicle_GetCosmeticComponent final
{
public:
	class UDelMarVehicleCosmeticComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_GetCosmeticComponent) == 0x000008, "Wrong alignment on DelMarVehicle_GetCosmeticComponent");
static_assert(sizeof(DelMarVehicle_GetCosmeticComponent) == 0x000008, "Wrong size on DelMarVehicle_GetCosmeticComponent");
static_assert(offsetof(DelMarVehicle_GetCosmeticComponent, ReturnValue) == 0x000000, "Member 'DelMarVehicle_GetCosmeticComponent::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.GetNewestStackActiveDurationFromSource
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicle_GetNewestStackActiveDurationFromSource final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_GetNewestStackActiveDurationFromSource) == 0x000004, "Wrong alignment on DelMarVehicle_GetNewestStackActiveDurationFromSource");
static_assert(sizeof(DelMarVehicle_GetNewestStackActiveDurationFromSource) == 0x000008, "Wrong size on DelMarVehicle_GetNewestStackActiveDurationFromSource");
static_assert(offsetof(DelMarVehicle_GetNewestStackActiveDurationFromSource, Source) == 0x000000, "Member 'DelMarVehicle_GetNewestStackActiveDurationFromSource::Source' has a wrong offset!");
static_assert(offsetof(DelMarVehicle_GetNewestStackActiveDurationFromSource, ReturnValue) == 0x000004, "Member 'DelMarVehicle_GetNewestStackActiveDurationFromSource::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.GetRaceManager
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicle_GetRaceManager final
{
public:
	class ADelMarRaceManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_GetRaceManager) == 0x000008, "Wrong alignment on DelMarVehicle_GetRaceManager");
static_assert(sizeof(DelMarVehicle_GetRaceManager) == 0x000008, "Wrong size on DelMarVehicle_GetRaceManager");
static_assert(offsetof(DelMarVehicle_GetRaceManager, ReturnValue) == 0x000000, "Member 'DelMarVehicle_GetRaceManager::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.GetTrackPositionComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicle_GetTrackPositionComponent final
{
public:
	class UDelMarTrackPositionComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_GetTrackPositionComponent) == 0x000008, "Wrong alignment on DelMarVehicle_GetTrackPositionComponent");
static_assert(sizeof(DelMarVehicle_GetTrackPositionComponent) == 0x000008, "Wrong size on DelMarVehicle_GetTrackPositionComponent");
static_assert(offsetof(DelMarVehicle_GetTrackPositionComponent, ReturnValue) == 0x000000, "Member 'DelMarVehicle_GetTrackPositionComponent::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.IsInvulnerabilityActive
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicle_IsInvulnerabilityActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_IsInvulnerabilityActive) == 0x000001, "Wrong alignment on DelMarVehicle_IsInvulnerabilityActive");
static_assert(sizeof(DelMarVehicle_IsInvulnerabilityActive) == 0x000001, "Wrong size on DelMarVehicle_IsInvulnerabilityActive");
static_assert(offsetof(DelMarVehicle_IsInvulnerabilityActive, ReturnValue) == 0x000000, "Member 'DelMarVehicle_IsInvulnerabilityActive::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.IsRespawnEffectSignificant
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicle_IsRespawnEffectSignificant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_IsRespawnEffectSignificant) == 0x000001, "Wrong alignment on DelMarVehicle_IsRespawnEffectSignificant");
static_assert(sizeof(DelMarVehicle_IsRespawnEffectSignificant) == 0x000001, "Wrong size on DelMarVehicle_IsRespawnEffectSignificant");
static_assert(offsetof(DelMarVehicle_IsRespawnEffectSignificant, ReturnValue) == 0x000000, "Member 'DelMarVehicle_IsRespawnEffectSignificant::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.IsWheelOnGround
// 0x0002 (0x0002 - 0x0000)
struct DelMarVehicle_IsWheelOnGround final
{
public:
	EDelMarVehicleWheelIndex                      WheelIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicle_IsWheelOnGround) == 0x000001, "Wrong alignment on DelMarVehicle_IsWheelOnGround");
static_assert(sizeof(DelMarVehicle_IsWheelOnGround) == 0x000002, "Wrong size on DelMarVehicle_IsWheelOnGround");
static_assert(offsetof(DelMarVehicle_IsWheelOnGround, WheelIndex) == 0x000000, "Member 'DelMarVehicle_IsWheelOnGround::WheelIndex' has a wrong offset!");
static_assert(offsetof(DelMarVehicle_IsWheelOnGround, ReturnValue) == 0x000001, "Member 'DelMarVehicle_IsWheelOnGround::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicle.VehicleHasTag
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicle_VehicleHasTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicle_VehicleHasTag) == 0x000004, "Wrong alignment on DelMarVehicle_VehicleHasTag");
static_assert(sizeof(DelMarVehicle_VehicleHasTag) == 0x000008, "Wrong size on DelMarVehicle_VehicleHasTag");
static_assert(offsetof(DelMarVehicle_VehicleHasTag, InTag) == 0x000000, "Member 'DelMarVehicle_VehicleHasTag::InTag' has a wrong offset!");
static_assert(offsetof(DelMarVehicle_VehicleHasTag, ReturnValue) == 0x000004, "Member 'DelMarVehicle_VehicleHasTag::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleNetworkPhysicsComponent.OnPhysicsStateChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged final
{
public:
	class UPrimitiveComponent*                    ChangedComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentPhysicsStateChange                  StateChange;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged) == 0x000008, "Wrong alignment on DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged");
static_assert(sizeof(DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged) == 0x000010, "Wrong size on DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged");
static_assert(offsetof(DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged, ChangedComponent) == 0x000000, "Member 'DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged::ChangedComponent' has a wrong offset!");
static_assert(offsetof(DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged, StateChange) == 0x000008, "Member 'DelMarVehicleNetworkPhysicsComponent_OnPhysicsStateChanged::StateChange' has a wrong offset!");

// Function DelMarCore.DelMarVehicleNetworkPhysicsComponent.OnRep_ReplicatedState
// 0x0290 (0x0290 - 0x0000)
struct DelMarVehicleNetworkPhysicsComponent_OnRep_ReplicatedState final
{
public:
	struct FDelMarVehicleReplicatedState          PrevReplicatedState;                               // 0x0000(0x0290)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleNetworkPhysicsComponent_OnRep_ReplicatedState) == 0x000010, "Wrong alignment on DelMarVehicleNetworkPhysicsComponent_OnRep_ReplicatedState");
static_assert(sizeof(DelMarVehicleNetworkPhysicsComponent_OnRep_ReplicatedState) == 0x000290, "Wrong size on DelMarVehicleNetworkPhysicsComponent_OnRep_ReplicatedState");
static_assert(offsetof(DelMarVehicleNetworkPhysicsComponent_OnRep_ReplicatedState, PrevReplicatedState) == 0x000000, "Member 'DelMarVehicleNetworkPhysicsComponent_OnRep_ReplicatedState::PrevReplicatedState' has a wrong offset!");

// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleAnyWheelsOnGroundChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged final
{
public:
	TScriptInterface<class IDelMarVehicleInterface> Vehicle;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWheelsOnGround;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged) == 0x000008, "Wrong alignment on DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged");
static_assert(sizeof(DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged) == 0x000018, "Wrong size on DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged");
static_assert(offsetof(DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged, Vehicle) == 0x000000, "Member 'DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged::Vehicle' has a wrong offset!");
static_assert(offsetof(DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged, bWheelsOnGround) == 0x000010, "Member 'DelMarVehicleStateTagManagerComponent_HandleAnyWheelsOnGroundChanged::bWheelsOnGround' has a wrong offset!");

// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleWorldBonusSpeedStackGained
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained) == 0x000004, "Wrong alignment on DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained");
static_assert(sizeof(DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained) == 0x000008, "Wrong size on DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained");
static_assert(offsetof(DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained, Source) == 0x000000, "Member 'DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained::Source' has a wrong offset!");
static_assert(offsetof(DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained, Stacks) == 0x000004, "Member 'DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackGained::Stacks' has a wrong offset!");

// Function DelMarCore.DelMarVehicleStateTagManagerComponent.HandleWorldBonusSpeedStackLost
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost) == 0x000004, "Wrong alignment on DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost");
static_assert(sizeof(DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost) == 0x000008, "Wrong size on DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost");
static_assert(offsetof(DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost, Source) == 0x000000, "Member 'DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost::Source' has a wrong offset!");
static_assert(offsetof(DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost, Stacks) == 0x000004, "Member 'DelMarVehicleStateTagManagerComponent_HandleWorldBonusSpeedStackLost::Stacks' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleAnyWheelsOnGroundChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged final
{
public:
	TScriptInterface<class IDelMarVehicleInterface> Vehicle;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWheelsOnGround;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged) == 0x000008, "Wrong alignment on DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged) == 0x000018, "Wrong size on DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged, Vehicle) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged::Vehicle' has a wrong offset!");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged, bWheelsOnGround) == 0x000010, "Member 'DelMarVehicleVerbComponent_HandleAnyWheelsOnGroundChanged::bWheelsOnGround' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleDriftDurationChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleVerbComponent_HandleDriftDurationChanged final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleDriftDurationChanged) == 0x000004, "Wrong alignment on DelMarVehicleVerbComponent_HandleDriftDurationChanged");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleDriftDurationChanged) == 0x000004, "Wrong size on DelMarVehicleVerbComponent_HandleDriftDurationChanged");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleDriftDurationChanged, duration) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleDriftDurationChanged::duration' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleKickflipped
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleVerbComponent_HandleKickflipped final
{
public:
	bool                                          bLeft;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleKickflipped) == 0x000001, "Wrong alignment on DelMarVehicleVerbComponent_HandleKickflipped");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleKickflipped) == 0x000001, "Wrong size on DelMarVehicleVerbComponent_HandleKickflipped");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleKickflipped, bLeft) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleKickflipped::bLeft' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandlePotentialDriftBoostChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleVerbComponent_HandlePotentialDriftBoostChanged final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleVerbComponent_HandlePotentialDriftBoostChanged) == 0x000004, "Wrong alignment on DelMarVehicleVerbComponent_HandlePotentialDriftBoostChanged");
static_assert(sizeof(DelMarVehicleVerbComponent_HandlePotentialDriftBoostChanged) == 0x000004, "Wrong size on DelMarVehicleVerbComponent_HandlePotentialDriftBoostChanged");
static_assert(offsetof(DelMarVehicleVerbComponent_HandlePotentialDriftBoostChanged, Percent) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandlePotentialDriftBoostChanged::Percent' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleSpeedometerSpeedChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleVerbComponent_HandleSpeedometerSpeedChanged final
{
public:
	float                                         UpdatedSpeedometerSpeed;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleSpeedometerSpeedChanged) == 0x000004, "Wrong alignment on DelMarVehicleVerbComponent_HandleSpeedometerSpeedChanged");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleSpeedometerSpeedChanged) == 0x000004, "Wrong size on DelMarVehicleVerbComponent_HandleSpeedometerSpeedChanged");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleSpeedometerSpeedChanged, UpdatedSpeedometerSpeed) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleSpeedometerSpeedChanged::UpdatedSpeedometerSpeed' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleStartlineBoostActivated
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleVerbComponent_HandleStartlineBoostActivated final
{
public:
	float                                         BoostPercent;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleStartlineBoostActivated) == 0x000004, "Wrong alignment on DelMarVehicleVerbComponent_HandleStartlineBoostActivated");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleStartlineBoostActivated) == 0x000004, "Wrong size on DelMarVehicleVerbComponent_HandleStartlineBoostActivated");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleStartlineBoostActivated, BoostPercent) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleStartlineBoostActivated::BoostPercent' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleTurboBonusZoneChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleVerbComponent_HandleTurboBonusZoneChanged final
{
public:
	EDelMarTurboZoneState                         BonusZoneState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleTurboBonusZoneChanged) == 0x000001, "Wrong alignment on DelMarVehicleVerbComponent_HandleTurboBonusZoneChanged");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleTurboBonusZoneChanged) == 0x000001, "Wrong size on DelMarVehicleVerbComponent_HandleTurboBonusZoneChanged");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleTurboBonusZoneChanged, BonusZoneState) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleTurboBonusZoneChanged::BonusZoneState' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleUnderthrustPercentChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarVehicleVerbComponent_HandleUnderthrustPercentChanged final
{
public:
	float                                         PercentageUnderthrustRemaining;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleUnderthrustPercentChanged) == 0x000004, "Wrong alignment on DelMarVehicleVerbComponent_HandleUnderthrustPercentChanged");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleUnderthrustPercentChanged) == 0x000004, "Wrong size on DelMarVehicleVerbComponent_HandleUnderthrustPercentChanged");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleUnderthrustPercentChanged, PercentageUnderthrustRemaining) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleUnderthrustPercentChanged::PercentageUnderthrustRemaining' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleVehicleLanded
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleVerbComponent_HandleVehicleLanded final
{
public:
	float                                         LandingForce;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandedKickflip;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleVehicleLanded) == 0x000004, "Wrong alignment on DelMarVehicleVerbComponent_HandleVehicleLanded");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleVehicleLanded) == 0x000008, "Wrong size on DelMarVehicleVerbComponent_HandleVehicleLanded");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleVehicleLanded, LandingForce) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleVehicleLanded::LandingForce' has a wrong offset!");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleVehicleLanded, bLandedKickflip) == 0x000004, "Member 'DelMarVehicleVerbComponent_HandleVehicleLanded::bLandedKickflip' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleWorldBonusSpeedStackGained
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained) == 0x000004, "Wrong alignment on DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained) == 0x000008, "Wrong size on DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained, Source) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained::Source' has a wrong offset!");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained, Stacks) == 0x000004, "Member 'DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackGained::Stacks' has a wrong offset!");

// Function DelMarCore.DelMarVehicleVerbComponent.HandleWorldBonusSpeedStackLost
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost) == 0x000004, "Wrong alignment on DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost");
static_assert(sizeof(DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost) == 0x000008, "Wrong size on DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost, Source) == 0x000000, "Member 'DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost::Source' has a wrong offset!");
static_assert(offsetof(DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost, Stacks) == 0x000004, "Member 'DelMarVehicleVerbComponent_HandleWorldBonusSpeedStackLost::Stacks' has a wrong offset!");

// Function DelMarCore.DelMarAudioComponentGroup.GetMixModifiers
// 0x0008 (0x0008 - 0x0000)
struct DelMarAudioComponentGroup_GetMixModifiers final
{
public:
	class UDelMarAudioMixModifierExtension*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioComponentGroup_GetMixModifiers) == 0x000008, "Wrong alignment on DelMarAudioComponentGroup_GetMixModifiers");
static_assert(sizeof(DelMarAudioComponentGroup_GetMixModifiers) == 0x000008, "Wrong size on DelMarAudioComponentGroup_GetMixModifiers");
static_assert(offsetof(DelMarAudioComponentGroup_GetMixModifiers, ReturnValue) == 0x000000, "Member 'DelMarAudioComponentGroup_GetMixModifiers::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarAudioComponentGroup.GetSubmixSends
// 0x0008 (0x0008 - 0x0000)
struct DelMarAudioComponentGroup_GetSubmixSends final
{
public:
	class UDelMarSubmixSendExtension*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioComponentGroup_GetSubmixSends) == 0x000008, "Wrong alignment on DelMarAudioComponentGroup_GetSubmixSends");
static_assert(sizeof(DelMarAudioComponentGroup_GetSubmixSends) == 0x000008, "Wrong size on DelMarAudioComponentGroup_GetSubmixSends");
static_assert(offsetof(DelMarAudioComponentGroup_GetSubmixSends, ReturnValue) == 0x000000, "Member 'DelMarAudioComponentGroup_GetSubmixSends::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarAudioController.HandleVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarAudioController_HandleVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioController_HandleVehicleDemolished) == 0x000004, "Wrong alignment on DelMarAudioController_HandleVehicleDemolished");
static_assert(sizeof(DelMarAudioController_HandleVehicleDemolished) == 0x000004, "Wrong size on DelMarAudioController_HandleVehicleDemolished");
static_assert(offsetof(DelMarAudioController_HandleVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarAudioController_HandleVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarCore.DelMarAudioController.PlaySound
// 0x0020 (0x0020 - 0x0000)
struct DelMarAudioController_PlaySound final
{
public:
	class USoundBase*                             sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFadeInTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTargetVolume;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableAttenuation;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFaderCurve                              InFadeCurve;                                       // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioController_PlaySound) == 0x000008, "Wrong alignment on DelMarAudioController_PlaySound");
static_assert(sizeof(DelMarAudioController_PlaySound) == 0x000020, "Wrong size on DelMarAudioController_PlaySound");
static_assert(offsetof(DelMarAudioController_PlaySound, sound) == 0x000000, "Member 'DelMarAudioController_PlaySound::sound' has a wrong offset!");
static_assert(offsetof(DelMarAudioController_PlaySound, InFadeInTime) == 0x000008, "Member 'DelMarAudioController_PlaySound::InFadeInTime' has a wrong offset!");
static_assert(offsetof(DelMarAudioController_PlaySound, InTargetVolume) == 0x00000C, "Member 'DelMarAudioController_PlaySound::InTargetVolume' has a wrong offset!");
static_assert(offsetof(DelMarAudioController_PlaySound, bDisableAttenuation) == 0x000010, "Member 'DelMarAudioController_PlaySound::bDisableAttenuation' has a wrong offset!");
static_assert(offsetof(DelMarAudioController_PlaySound, InFadeCurve) == 0x000011, "Member 'DelMarAudioController_PlaySound::InFadeCurve' has a wrong offset!");
static_assert(offsetof(DelMarAudioController_PlaySound, ReturnValue) == 0x000018, "Member 'DelMarAudioController_PlaySound::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarAudioController.GetComponentGroup
// 0x0008 (0x0008 - 0x0000)
struct DelMarAudioController_GetComponentGroup final
{
public:
	class UDelMarAudioComponentGroup*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioController_GetComponentGroup) == 0x000008, "Wrong alignment on DelMarAudioController_GetComponentGroup");
static_assert(sizeof(DelMarAudioController_GetComponentGroup) == 0x000008, "Wrong size on DelMarAudioController_GetComponentGroup");
static_assert(offsetof(DelMarAudioController_GetComponentGroup, ReturnValue) == 0x000000, "Member 'DelMarAudioController_GetComponentGroup::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarAudioController.IsVirtualized
// 0x0001 (0x0001 - 0x0000)
struct DelMarAudioController_IsVirtualized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioController_IsVirtualized) == 0x000001, "Wrong alignment on DelMarAudioController_IsVirtualized");
static_assert(sizeof(DelMarAudioController_IsVirtualized) == 0x000001, "Wrong size on DelMarAudioController_IsVirtualized");
static_assert(offsetof(DelMarAudioController_IsVirtualized, ReturnValue) == 0x000000, "Member 'DelMarAudioController_IsVirtualized::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarAudioMixModifierExtension.AddMixGroup
// 0x0018 (0x0018 - 0x0000)
struct DelMarAudioMixModifierExtension_AddMixGroup final
{
public:
	struct FAudioMixModifierGroup                 InMixModifier;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioMixModifierExtension_AddMixGroup) == 0x000008, "Wrong alignment on DelMarAudioMixModifierExtension_AddMixGroup");
static_assert(sizeof(DelMarAudioMixModifierExtension_AddMixGroup) == 0x000018, "Wrong size on DelMarAudioMixModifierExtension_AddMixGroup");
static_assert(offsetof(DelMarAudioMixModifierExtension_AddMixGroup, InMixModifier) == 0x000000, "Member 'DelMarAudioMixModifierExtension_AddMixGroup::InMixModifier' has a wrong offset!");

// Function DelMarCore.DelMarAudioMixModifierExtension.RemoveMixGroup
// 0x0018 (0x0018 - 0x0000)
struct DelMarAudioMixModifierExtension_RemoveMixGroup final
{
public:
	struct FAudioMixModifierGroup                 InMixModifier;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioMixModifierExtension_RemoveMixGroup) == 0x000008, "Wrong alignment on DelMarAudioMixModifierExtension_RemoveMixGroup");
static_assert(sizeof(DelMarAudioMixModifierExtension_RemoveMixGroup) == 0x000018, "Wrong size on DelMarAudioMixModifierExtension_RemoveMixGroup");
static_assert(offsetof(DelMarAudioMixModifierExtension_RemoveMixGroup, InMixModifier) == 0x000000, "Member 'DelMarAudioMixModifierExtension_RemoveMixGroup::InMixModifier' has a wrong offset!");

// Function DelMarCore.DelMarAudioMixModifierExtension.RemoveMixGroupByName
// 0x0004 (0x0004 - 0x0000)
struct DelMarAudioMixModifierExtension_RemoveMixGroupByName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarAudioMixModifierExtension_RemoveMixGroupByName) == 0x000004, "Wrong alignment on DelMarAudioMixModifierExtension_RemoveMixGroupByName");
static_assert(sizeof(DelMarAudioMixModifierExtension_RemoveMixGroupByName) == 0x000004, "Wrong size on DelMarAudioMixModifierExtension_RemoveMixGroupByName");
static_assert(offsetof(DelMarAudioMixModifierExtension_RemoveMixGroupByName, InName) == 0x000000, "Member 'DelMarAudioMixModifierExtension_RemoveMixGroupByName::InName' has a wrong offset!");

// Function DelMarCore.DelMarSubmixSendExtension.RemoveSend
// 0x0008 (0x0008 - 0x0000)
struct DelMarSubmixSendExtension_RemoveSend final
{
public:
	class USoundSubmixBase*                       InSubmix;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarSubmixSendExtension_RemoveSend) == 0x000008, "Wrong alignment on DelMarSubmixSendExtension_RemoveSend");
static_assert(sizeof(DelMarSubmixSendExtension_RemoveSend) == 0x000008, "Wrong size on DelMarSubmixSendExtension_RemoveSend");
static_assert(offsetof(DelMarSubmixSendExtension_RemoveSend, InSubmix) == 0x000000, "Member 'DelMarSubmixSendExtension_RemoveSend::InSubmix' has a wrong offset!");

// Function DelMarCore.DelMarSubmixSendExtension.SetSend
// 0x0010 (0x0010 - 0x0000)
struct DelMarSubmixSendExtension_SetSend final
{
public:
	class USoundSubmixBase*                       InSubmix;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLevel;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackCount;                                       // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarSubmixSendExtension_SetSend) == 0x000008, "Wrong alignment on DelMarSubmixSendExtension_SetSend");
static_assert(sizeof(DelMarSubmixSendExtension_SetSend) == 0x000010, "Wrong size on DelMarSubmixSendExtension_SetSend");
static_assert(offsetof(DelMarSubmixSendExtension_SetSend, InSubmix) == 0x000000, "Member 'DelMarSubmixSendExtension_SetSend::InSubmix' has a wrong offset!");
static_assert(offsetof(DelMarSubmixSendExtension_SetSend, InLevel) == 0x000008, "Member 'DelMarSubmixSendExtension_SetSend::InLevel' has a wrong offset!");
static_assert(offsetof(DelMarSubmixSendExtension_SetSend, bTrackCount) == 0x00000C, "Member 'DelMarSubmixSendExtension_SetSend::bTrackCount' has a wrong offset!");

// Function DelMarCore.DelMarNuxBlueprintFunctionLibrary.GetCurrentLapNumber
// 0x0010 (0x0010 - 0x0000)
struct DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber final
{
public:
	const class ADelMarVehicle*                   Vehicle;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber) == 0x000008, "Wrong alignment on DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber");
static_assert(sizeof(DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber) == 0x000010, "Wrong size on DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber");
static_assert(offsetof(DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber, Vehicle) == 0x000000, "Member 'DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber::Vehicle' has a wrong offset!");
static_assert(offsetof(DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber, ReturnValue) == 0x000008, "Member 'DelMarNuxBlueprintFunctionLibrary_GetCurrentLapNumber::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarNuxBlueprintFunctionLibrary.GetCurrentRankedInfoForVehicle
// 0x0020 (0x0020 - 0x0000)
struct DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle final
{
public:
	const class ADelMarVehicle*                   Vehicle;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarRankedInfo                      ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle) == 0x000008, "Wrong alignment on DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle");
static_assert(sizeof(DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle) == 0x000020, "Wrong size on DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle");
static_assert(offsetof(DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle, Vehicle) == 0x000000, "Member 'DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle, ReturnValue) == 0x000008, "Member 'DelMarNuxBlueprintFunctionLibrary_GetCurrentRankedInfoForVehicle::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.BP_FirstPlaceChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheckpoint_BP_FirstPlaceChanged final
{
public:
	bool                                          bValidPrevFirstPlace;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_BP_FirstPlaceChanged) == 0x000001, "Wrong alignment on DelMarCheckpoint_BP_FirstPlaceChanged");
static_assert(sizeof(DelMarCheckpoint_BP_FirstPlaceChanged) == 0x000001, "Wrong size on DelMarCheckpoint_BP_FirstPlaceChanged");
static_assert(offsetof(DelMarCheckpoint_BP_FirstPlaceChanged, bValidPrevFirstPlace) == 0x000000, "Member 'DelMarCheckpoint_BP_FirstPlaceChanged::bValidPrevFirstPlace' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.BP_LapFinished
// 0x000C (0x000C - 0x0000)
struct DelMarCheckpoint_BP_LapFinished final
{
public:
	int32                                         CompletedLap;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLap;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalLaps;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_BP_LapFinished) == 0x000004, "Wrong alignment on DelMarCheckpoint_BP_LapFinished");
static_assert(sizeof(DelMarCheckpoint_BP_LapFinished) == 0x00000C, "Wrong size on DelMarCheckpoint_BP_LapFinished");
static_assert(offsetof(DelMarCheckpoint_BP_LapFinished, CompletedLap) == 0x000000, "Member 'DelMarCheckpoint_BP_LapFinished::CompletedLap' has a wrong offset!");
static_assert(offsetof(DelMarCheckpoint_BP_LapFinished, CurrentLap) == 0x000004, "Member 'DelMarCheckpoint_BP_LapFinished::CurrentLap' has a wrong offset!");
static_assert(offsetof(DelMarCheckpoint_BP_LapFinished, TotalLaps) == 0x000008, "Member 'DelMarCheckpoint_BP_LapFinished::TotalLaps' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.ClientSetCheckpointActive
// 0x0008 (0x0008 - 0x0000)
struct DelMarCheckpoint_ClientSetCheckpointActive final
{
public:
	int32                                         CurrentLap;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalLaps;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_ClientSetCheckpointActive) == 0x000004, "Wrong alignment on DelMarCheckpoint_ClientSetCheckpointActive");
static_assert(sizeof(DelMarCheckpoint_ClientSetCheckpointActive) == 0x000008, "Wrong size on DelMarCheckpoint_ClientSetCheckpointActive");
static_assert(offsetof(DelMarCheckpoint_ClientSetCheckpointActive, CurrentLap) == 0x000000, "Member 'DelMarCheckpoint_ClientSetCheckpointActive::CurrentLap' has a wrong offset!");
static_assert(offsetof(DelMarCheckpoint_ClientSetCheckpointActive, TotalLaps) == 0x000004, "Member 'DelMarCheckpoint_ClientSetCheckpointActive::TotalLaps' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.HandlePawnEnteredVehicle
// 0x0020 (0x0020 - 0x0000)
struct DelMarCheckpoint_HandlePawnEnteredVehicle final
{
public:
	TScriptInterface<class IFortVehicleInterface> Vehicle;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Pawn;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeatIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCheckpoint_HandlePawnEnteredVehicle) == 0x000008, "Wrong alignment on DelMarCheckpoint_HandlePawnEnteredVehicle");
static_assert(sizeof(DelMarCheckpoint_HandlePawnEnteredVehicle) == 0x000020, "Wrong size on DelMarCheckpoint_HandlePawnEnteredVehicle");
static_assert(offsetof(DelMarCheckpoint_HandlePawnEnteredVehicle, Vehicle) == 0x000000, "Member 'DelMarCheckpoint_HandlePawnEnteredVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(DelMarCheckpoint_HandlePawnEnteredVehicle, Pawn) == 0x000010, "Member 'DelMarCheckpoint_HandlePawnEnteredVehicle::Pawn' has a wrong offset!");
static_assert(offsetof(DelMarCheckpoint_HandlePawnEnteredVehicle, SeatIndex) == 0x000018, "Member 'DelMarCheckpoint_HandlePawnEnteredVehicle::SeatIndex' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.OnTriggered
// 0x0008 (0x0008 - 0x0000)
struct DelMarCheckpoint_OnTriggered final
{
public:
	class ADelMarVehicle*                         InDelMarVehicle;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_OnTriggered) == 0x000008, "Wrong alignment on DelMarCheckpoint_OnTriggered");
static_assert(sizeof(DelMarCheckpoint_OnTriggered) == 0x000008, "Wrong size on DelMarCheckpoint_OnTriggered");
static_assert(offsetof(DelMarCheckpoint_OnTriggered, InDelMarVehicle) == 0x000000, "Member 'DelMarCheckpoint_OnTriggered::InDelMarVehicle' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.UpdateCheckpointMesh
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheckpoint_UpdateCheckpointMesh final
{
public:
	EDelMarCheckpointMeshType                     MeshType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_UpdateCheckpointMesh) == 0x000001, "Wrong alignment on DelMarCheckpoint_UpdateCheckpointMesh");
static_assert(sizeof(DelMarCheckpoint_UpdateCheckpointMesh) == 0x000001, "Wrong size on DelMarCheckpoint_UpdateCheckpointMesh");
static_assert(offsetof(DelMarCheckpoint_UpdateCheckpointMesh, MeshType) == 0x000000, "Member 'DelMarCheckpoint_UpdateCheckpointMesh::MeshType' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.GetCheckpointMeshType
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheckpoint_GetCheckpointMeshType final
{
public:
	EDelMarCheckpointMeshType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_GetCheckpointMeshType) == 0x000001, "Wrong alignment on DelMarCheckpoint_GetCheckpointMeshType");
static_assert(sizeof(DelMarCheckpoint_GetCheckpointMeshType) == 0x000001, "Wrong size on DelMarCheckpoint_GetCheckpointMeshType");
static_assert(offsetof(DelMarCheckpoint_GetCheckpointMeshType, ReturnValue) == 0x000000, "Member 'DelMarCheckpoint_GetCheckpointMeshType::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.GetFurthestAheadTrackDistance
// 0x0018 (0x0018 - 0x0000)
struct DelMarCheckpoint_GetFurthestAheadTrackDistance final
{
public:
	struct FCheckpointTrackDistance               ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_GetFurthestAheadTrackDistance) == 0x000008, "Wrong alignment on DelMarCheckpoint_GetFurthestAheadTrackDistance");
static_assert(sizeof(DelMarCheckpoint_GetFurthestAheadTrackDistance) == 0x000018, "Wrong size on DelMarCheckpoint_GetFurthestAheadTrackDistance");
static_assert(offsetof(DelMarCheckpoint_GetFurthestAheadTrackDistance, ReturnValue) == 0x000000, "Member 'DelMarCheckpoint_GetFurthestAheadTrackDistance::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.GetFurthestBehindTrackDistance
// 0x0018 (0x0018 - 0x0000)
struct DelMarCheckpoint_GetFurthestBehindTrackDistance final
{
public:
	struct FCheckpointTrackDistance               ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_GetFurthestBehindTrackDistance) == 0x000008, "Wrong alignment on DelMarCheckpoint_GetFurthestBehindTrackDistance");
static_assert(sizeof(DelMarCheckpoint_GetFurthestBehindTrackDistance) == 0x000018, "Wrong size on DelMarCheckpoint_GetFurthestBehindTrackDistance");
static_assert(offsetof(DelMarCheckpoint_GetFurthestBehindTrackDistance, ReturnValue) == 0x000000, "Member 'DelMarCheckpoint_GetFurthestBehindTrackDistance::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.GetNearestTrackData
// 0x0018 (0x0018 - 0x0000)
struct DelMarCheckpoint_GetNearestTrackData final
{
public:
	struct FCheckpointTrackDistance               ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_GetNearestTrackData) == 0x000008, "Wrong alignment on DelMarCheckpoint_GetNearestTrackData");
static_assert(sizeof(DelMarCheckpoint_GetNearestTrackData) == 0x000018, "Wrong size on DelMarCheckpoint_GetNearestTrackData");
static_assert(offsetof(DelMarCheckpoint_GetNearestTrackData, ReturnValue) == 0x000000, "Member 'DelMarCheckpoint_GetNearestTrackData::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.GetSpawnTransform
// 0x0060 (0x0060 - 0x0000)
struct DelMarCheckpoint_GetSpawnTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_GetSpawnTransform) == 0x000010, "Wrong alignment on DelMarCheckpoint_GetSpawnTransform");
static_assert(sizeof(DelMarCheckpoint_GetSpawnTransform) == 0x000060, "Wrong size on DelMarCheckpoint_GetSpawnTransform");
static_assert(offsetof(DelMarCheckpoint_GetSpawnTransform, ReturnValue) == 0x000000, "Member 'DelMarCheckpoint_GetSpawnTransform::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.GetTrackDistanceDataForTrack
// 0x0028 (0x0028 - 0x0000)
struct DelMarCheckpoint_GetTrackDistanceDataForTrack final
{
public:
	const class ADelMarTrackBase*                 InTrack;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnsureAssociated;                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCheckpointTrackDistance               ReturnValue;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpoint_GetTrackDistanceDataForTrack) == 0x000008, "Wrong alignment on DelMarCheckpoint_GetTrackDistanceDataForTrack");
static_assert(sizeof(DelMarCheckpoint_GetTrackDistanceDataForTrack) == 0x000028, "Wrong size on DelMarCheckpoint_GetTrackDistanceDataForTrack");
static_assert(offsetof(DelMarCheckpoint_GetTrackDistanceDataForTrack, InTrack) == 0x000000, "Member 'DelMarCheckpoint_GetTrackDistanceDataForTrack::InTrack' has a wrong offset!");
static_assert(offsetof(DelMarCheckpoint_GetTrackDistanceDataForTrack, bEnsureAssociated) == 0x000008, "Member 'DelMarCheckpoint_GetTrackDistanceDataForTrack::bEnsureAssociated' has a wrong offset!");
static_assert(offsetof(DelMarCheckpoint_GetTrackDistanceDataForTrack, ReturnValue) == 0x000010, "Member 'DelMarCheckpoint_GetTrackDistanceDataForTrack::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCheckpoint.IsAssociatedWithTrack
// 0x0010 (0x0010 - 0x0000)
struct DelMarCheckpoint_IsAssociatedWithTrack final
{
public:
	const class ADelMarTrackBase*                 InTrack;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCheckpoint_IsAssociatedWithTrack) == 0x000008, "Wrong alignment on DelMarCheckpoint_IsAssociatedWithTrack");
static_assert(sizeof(DelMarCheckpoint_IsAssociatedWithTrack) == 0x000010, "Wrong size on DelMarCheckpoint_IsAssociatedWithTrack");
static_assert(offsetof(DelMarCheckpoint_IsAssociatedWithTrack, InTrack) == 0x000000, "Member 'DelMarCheckpoint_IsAssociatedWithTrack::InTrack' has a wrong offset!");
static_assert(offsetof(DelMarCheckpoint_IsAssociatedWithTrack, ReturnValue) == 0x000008, "Member 'DelMarCheckpoint_IsAssociatedWithTrack::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.AreAllLeaderboardFiltersEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarBlueprintLibrary_AreAllLeaderboardFiltersEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_AreAllLeaderboardFiltersEnabled) == 0x000001, "Wrong alignment on DelMarBlueprintLibrary_AreAllLeaderboardFiltersEnabled");
static_assert(sizeof(DelMarBlueprintLibrary_AreAllLeaderboardFiltersEnabled) == 0x000001, "Wrong size on DelMarBlueprintLibrary_AreAllLeaderboardFiltersEnabled");
static_assert(offsetof(DelMarBlueprintLibrary_AreAllLeaderboardFiltersEnabled, ReturnValue) == 0x000000, "Member 'DelMarBlueprintLibrary_AreAllLeaderboardFiltersEnabled::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.BP_KillAndRespawnVehicle
// 0x0010 (0x0010 - 0x0000)
struct DelMarBlueprintLibrary_BP_KillAndRespawnVehicle final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CausedByTag;                                       // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarBlueprintLibrary_BP_KillAndRespawnVehicle) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_BP_KillAndRespawnVehicle");
static_assert(sizeof(DelMarBlueprintLibrary_BP_KillAndRespawnVehicle) == 0x000010, "Wrong size on DelMarBlueprintLibrary_BP_KillAndRespawnVehicle");
static_assert(offsetof(DelMarBlueprintLibrary_BP_KillAndRespawnVehicle, Controller) == 0x000000, "Member 'DelMarBlueprintLibrary_BP_KillAndRespawnVehicle::Controller' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_BP_KillAndRespawnVehicle, CausedByTag) == 0x000008, "Member 'DelMarBlueprintLibrary_BP_KillAndRespawnVehicle::CausedByTag' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_BP_KillAndRespawnVehicle, ReturnValue) == 0x00000C, "Member 'DelMarBlueprintLibrary_BP_KillAndRespawnVehicle::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.DelMarFormatTime
// 0x0028 (0x0028 - 0x0000)
struct DelMarBlueprintLibrary_DelMarFormatTime final
{
public:
	double                                        TimeSeconds;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeMilliseconds;                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_DelMarFormatTime) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_DelMarFormatTime");
static_assert(sizeof(DelMarBlueprintLibrary_DelMarFormatTime) == 0x000028, "Wrong size on DelMarBlueprintLibrary_DelMarFormatTime");
static_assert(offsetof(DelMarBlueprintLibrary_DelMarFormatTime, TimeSeconds) == 0x000000, "Member 'DelMarBlueprintLibrary_DelMarFormatTime::TimeSeconds' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_DelMarFormatTime, bIncludeMilliseconds) == 0x000008, "Member 'DelMarBlueprintLibrary_DelMarFormatTime::bIncludeMilliseconds' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_DelMarFormatTime, ReturnValue) == 0x000010, "Member 'DelMarBlueprintLibrary_DelMarFormatTime::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.GetClientWorldTimeSeconds
// 0x0010 (0x0010 - 0x0000)
struct DelMarBlueprintLibrary_GetClientWorldTimeSeconds final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_GetClientWorldTimeSeconds) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_GetClientWorldTimeSeconds");
static_assert(sizeof(DelMarBlueprintLibrary_GetClientWorldTimeSeconds) == 0x000010, "Wrong size on DelMarBlueprintLibrary_GetClientWorldTimeSeconds");
static_assert(offsetof(DelMarBlueprintLibrary_GetClientWorldTimeSeconds, WorldContextObject) == 0x000000, "Member 'DelMarBlueprintLibrary_GetClientWorldTimeSeconds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetClientWorldTimeSeconds, ReturnValue) == 0x000008, "Member 'DelMarBlueprintLibrary_GetClientWorldTimeSeconds::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.GetDelMarPlayspace
// 0x0010 (0x0010 - 0x0000)
struct DelMarBlueprintLibrary_GetDelMarPlayspace final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADelMarPlayspace*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_GetDelMarPlayspace) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_GetDelMarPlayspace");
static_assert(sizeof(DelMarBlueprintLibrary_GetDelMarPlayspace) == 0x000010, "Wrong size on DelMarBlueprintLibrary_GetDelMarPlayspace");
static_assert(offsetof(DelMarBlueprintLibrary_GetDelMarPlayspace, WorldContextObject) == 0x000000, "Member 'DelMarBlueprintLibrary_GetDelMarPlayspace::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetDelMarPlayspace, ReturnValue) == 0x000008, "Member 'DelMarBlueprintLibrary_GetDelMarPlayspace::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.GetDelMarVehicle
// 0x0010 (0x0010 - 0x0000)
struct DelMarBlueprintLibrary_GetDelMarVehicle final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADelMarVehicle*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_GetDelMarVehicle) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_GetDelMarVehicle");
static_assert(sizeof(DelMarBlueprintLibrary_GetDelMarVehicle) == 0x000010, "Wrong size on DelMarBlueprintLibrary_GetDelMarVehicle");
static_assert(offsetof(DelMarBlueprintLibrary_GetDelMarVehicle, PlayerController) == 0x000000, "Member 'DelMarBlueprintLibrary_GetDelMarVehicle::PlayerController' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetDelMarVehicle, ReturnValue) == 0x000008, "Member 'DelMarBlueprintLibrary_GetDelMarVehicle::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.GetNetModel
// 0x0010 (0x0010 - 0x0000)
struct DelMarBlueprintLibrary_GetNetModel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarNetModel                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarBlueprintLibrary_GetNetModel) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_GetNetModel");
static_assert(sizeof(DelMarBlueprintLibrary_GetNetModel) == 0x000010, "Wrong size on DelMarBlueprintLibrary_GetNetModel");
static_assert(offsetof(DelMarBlueprintLibrary_GetNetModel, WorldContextObject) == 0x000000, "Member 'DelMarBlueprintLibrary_GetNetModel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetNetModel, ReturnValue) == 0x000008, "Member 'DelMarBlueprintLibrary_GetNetModel::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.GetPrimaryPlayerController
// 0x0010 (0x0010 - 0x0000)
struct DelMarBlueprintLibrary_GetPrimaryPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_GetPrimaryPlayerController) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_GetPrimaryPlayerController");
static_assert(sizeof(DelMarBlueprintLibrary_GetPrimaryPlayerController) == 0x000010, "Wrong size on DelMarBlueprintLibrary_GetPrimaryPlayerController");
static_assert(offsetof(DelMarBlueprintLibrary_GetPrimaryPlayerController, WorldContextObject) == 0x000000, "Member 'DelMarBlueprintLibrary_GetPrimaryPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetPrimaryPlayerController, ReturnValue) == 0x000008, "Member 'DelMarBlueprintLibrary_GetPrimaryPlayerController::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.GetPrimaryPlayerState
// 0x0010 (0x0010 - 0x0000)
struct DelMarBlueprintLibrary_GetPrimaryPlayerState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_GetPrimaryPlayerState) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_GetPrimaryPlayerState");
static_assert(sizeof(DelMarBlueprintLibrary_GetPrimaryPlayerState) == 0x000010, "Wrong size on DelMarBlueprintLibrary_GetPrimaryPlayerState");
static_assert(offsetof(DelMarBlueprintLibrary_GetPrimaryPlayerState, WorldContextObject) == 0x000000, "Member 'DelMarBlueprintLibrary_GetPrimaryPlayerState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetPrimaryPlayerState, ReturnValue) == 0x000008, "Member 'DelMarBlueprintLibrary_GetPrimaryPlayerState::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.GetTimerDeltaFromServerTime
// 0x0020 (0x0020 - 0x0000)
struct DelMarBlueprintLibrary_GetTimerDeltaFromServerTime final
{
public:
	double                                        TimestampSeconds;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarTimerDirection                         Direction;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapAtZero;                                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPositive;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_GetTimerDeltaFromServerTime) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_GetTimerDeltaFromServerTime");
static_assert(sizeof(DelMarBlueprintLibrary_GetTimerDeltaFromServerTime) == 0x000020, "Wrong size on DelMarBlueprintLibrary_GetTimerDeltaFromServerTime");
static_assert(offsetof(DelMarBlueprintLibrary_GetTimerDeltaFromServerTime, TimestampSeconds) == 0x000000, "Member 'DelMarBlueprintLibrary_GetTimerDeltaFromServerTime::TimestampSeconds' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetTimerDeltaFromServerTime, Direction) == 0x000008, "Member 'DelMarBlueprintLibrary_GetTimerDeltaFromServerTime::Direction' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetTimerDeltaFromServerTime, bCapAtZero) == 0x000009, "Member 'DelMarBlueprintLibrary_GetTimerDeltaFromServerTime::bCapAtZero' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetTimerDeltaFromServerTime, bIsPositive) == 0x00000A, "Member 'DelMarBlueprintLibrary_GetTimerDeltaFromServerTime::bIsPositive' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetTimerDeltaFromServerTime, WorldContextObject) == 0x000010, "Member 'DelMarBlueprintLibrary_GetTimerDeltaFromServerTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_GetTimerDeltaFromServerTime, ReturnValue) == 0x000018, "Member 'DelMarBlueprintLibrary_GetTimerDeltaFromServerTime::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.IsDelMarExperience
// 0x0002 (0x0002 - 0x0000)
struct DelMarBlueprintLibrary_IsDelMarExperience final
{
public:
	bool                                          bEnableCaching;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_IsDelMarExperience) == 0x000001, "Wrong alignment on DelMarBlueprintLibrary_IsDelMarExperience");
static_assert(sizeof(DelMarBlueprintLibrary_IsDelMarExperience) == 0x000002, "Wrong size on DelMarBlueprintLibrary_IsDelMarExperience");
static_assert(offsetof(DelMarBlueprintLibrary_IsDelMarExperience, bEnableCaching) == 0x000000, "Member 'DelMarBlueprintLibrary_IsDelMarExperience::bEnableCaching' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_IsDelMarExperience, ReturnValue) == 0x000001, "Member 'DelMarBlueprintLibrary_IsDelMarExperience::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.SetDelMarControlsText
// 0x0038 (0x0038 - 0x0000)
struct DelMarBlueprintLibrary_SetDelMarControlsText final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarEvent_SetControlsText           Event;                                             // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_SetDelMarControlsText) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_SetDelMarControlsText");
static_assert(sizeof(DelMarBlueprintLibrary_SetDelMarControlsText) == 0x000038, "Wrong size on DelMarBlueprintLibrary_SetDelMarControlsText");
static_assert(offsetof(DelMarBlueprintLibrary_SetDelMarControlsText, PlayerController) == 0x000000, "Member 'DelMarBlueprintLibrary_SetDelMarControlsText::PlayerController' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_SetDelMarControlsText, Event) == 0x000008, "Member 'DelMarBlueprintLibrary_SetDelMarControlsText::Event' has a wrong offset!");

// Function DelMarCore.DelMarBlueprintLibrary.SetDelMarTutorialHint
// 0x0068 (0x0068 - 0x0000)
struct DelMarBlueprintLibrary_SetDelMarTutorialHint final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarEvent_SetTutorialHint           Event;                                             // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarBlueprintLibrary_SetDelMarTutorialHint) == 0x000008, "Wrong alignment on DelMarBlueprintLibrary_SetDelMarTutorialHint");
static_assert(sizeof(DelMarBlueprintLibrary_SetDelMarTutorialHint) == 0x000068, "Wrong size on DelMarBlueprintLibrary_SetDelMarTutorialHint");
static_assert(offsetof(DelMarBlueprintLibrary_SetDelMarTutorialHint, PlayerController) == 0x000000, "Member 'DelMarBlueprintLibrary_SetDelMarTutorialHint::PlayerController' has a wrong offset!");
static_assert(offsetof(DelMarBlueprintLibrary_SetDelMarTutorialHint, Event) == 0x000008, "Member 'DelMarBlueprintLibrary_SetDelMarTutorialHint::Event' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarDemolishSelfWithTag
// 0x0010 (0x0010 - 0x0000)
struct DelMarCheatManager_DelMarDemolishSelfWithTag final
{
public:
	class FString                                 DemolishTagString;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarDemolishSelfWithTag) == 0x000008, "Wrong alignment on DelMarCheatManager_DelMarDemolishSelfWithTag");
static_assert(sizeof(DelMarCheatManager_DelMarDemolishSelfWithTag) == 0x000010, "Wrong size on DelMarCheatManager_DelMarDemolishSelfWithTag");
static_assert(offsetof(DelMarCheatManager_DelMarDemolishSelfWithTag, DemolishTagString) == 0x000000, "Member 'DelMarCheatManager_DelMarDemolishSelfWithTag::DemolishTagString' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarForceLoadLevel
// 0x0010 (0x0010 - 0x0000)
struct DelMarCheatManager_DelMarForceLoadLevel final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarForceLoadLevel) == 0x000008, "Wrong alignment on DelMarCheatManager_DelMarForceLoadLevel");
static_assert(sizeof(DelMarCheatManager_DelMarForceLoadLevel) == 0x000010, "Wrong size on DelMarCheatManager_DelMarForceLoadLevel");
static_assert(offsetof(DelMarCheatManager_DelMarForceLoadLevel, LevelName) == 0x000000, "Member 'DelMarCheatManager_DelMarForceLoadLevel::LevelName' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarForceLoadUEFNIsland
// 0x0010 (0x0010 - 0x0000)
struct DelMarCheatManager_DelMarForceLoadUEFNIsland final
{
public:
	class FString                                 IslandCode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarForceLoadUEFNIsland) == 0x000008, "Wrong alignment on DelMarCheatManager_DelMarForceLoadUEFNIsland");
static_assert(sizeof(DelMarCheatManager_DelMarForceLoadUEFNIsland) == 0x000010, "Wrong size on DelMarCheatManager_DelMarForceLoadUEFNIsland");
static_assert(offsetof(DelMarCheatManager_DelMarForceLoadUEFNIsland, IslandCode) == 0x000000, "Member 'DelMarCheatManager_DelMarForceLoadUEFNIsland::IslandCode' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarGhostSetRecordOffPhysics
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarGhostSetRecordOffPhysics final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarGhostSetRecordOffPhysics) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarGhostSetRecordOffPhysics");
static_assert(sizeof(DelMarCheatManager_DelMarGhostSetRecordOffPhysics) == 0x000001, "Wrong size on DelMarCheatManager_DelMarGhostSetRecordOffPhysics");
static_assert(offsetof(DelMarCheatManager_DelMarGhostSetRecordOffPhysics, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarGhostSetRecordOffPhysics::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarGhostSetReplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarGhostSetReplayEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarGhostSetReplayEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarGhostSetReplayEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarGhostSetReplayEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarGhostSetReplayEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarGhostSetReplayEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarGhostSetReplayEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarGhostStartPlayerRecording
// 0x0018 (0x0018 - 0x0000)
struct DelMarCheatManager_DelMarGhostStartPlayerRecording final
{
public:
	class FString                                 SaveFileName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveToFile;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCheatManager_DelMarGhostStartPlayerRecording) == 0x000008, "Wrong alignment on DelMarCheatManager_DelMarGhostStartPlayerRecording");
static_assert(sizeof(DelMarCheatManager_DelMarGhostStartPlayerRecording) == 0x000018, "Wrong size on DelMarCheatManager_DelMarGhostStartPlayerRecording");
static_assert(offsetof(DelMarCheatManager_DelMarGhostStartPlayerRecording, SaveFileName) == 0x000000, "Member 'DelMarCheatManager_DelMarGhostStartPlayerRecording::SaveFileName' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarGhostStartPlayerRecording, bSaveToFile) == 0x000010, "Member 'DelMarCheatManager_DelMarGhostStartPlayerRecording::bSaveToFile' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarGiveSelfSomeCompetitiveMMRStats
// 0x000C (0x000C - 0x0000)
struct DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats final
{
public:
	int32                                         MyPosition;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumberOfPlayers;                              // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfTimesToSendMMRUpdate;                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats");
static_assert(sizeof(DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats) == 0x00000C, "Wrong size on DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats");
static_assert(offsetof(DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats, MyPosition) == 0x000000, "Member 'DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats::MyPosition' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats, TotalNumberOfPlayers) == 0x000004, "Member 'DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats::TotalNumberOfPlayers' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats, NumberOfTimesToSendMMRUpdate) == 0x000008, "Member 'DelMarCheatManager_DelMarGiveSelfSomeCompetitiveMMRStats::NumberOfTimesToSendMMRUpdate' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarGrantQuestsInDir
// 0x0010 (0x0010 - 0x0000)
struct DelMarCheatManager_DelMarGrantQuestsInDir final
{
public:
	class FString                                 Dir;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarGrantQuestsInDir) == 0x000008, "Wrong alignment on DelMarCheatManager_DelMarGrantQuestsInDir");
static_assert(sizeof(DelMarCheatManager_DelMarGrantQuestsInDir) == 0x000010, "Wrong size on DelMarCheatManager_DelMarGrantQuestsInDir");
static_assert(offsetof(DelMarCheatManager_DelMarGrantQuestsInDir, Dir) == 0x000000, "Member 'DelMarCheatManager_DelMarGrantQuestsInDir::Dir' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarGrantTurboCharges
// 0x0008 (0x0008 - 0x0000)
struct DelMarCheatManager_DelMarGrantTurboCharges final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGrantToEveryone;                                  // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCheatManager_DelMarGrantTurboCharges) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarGrantTurboCharges");
static_assert(sizeof(DelMarCheatManager_DelMarGrantTurboCharges) == 0x000008, "Wrong size on DelMarCheatManager_DelMarGrantTurboCharges");
static_assert(offsetof(DelMarCheatManager_DelMarGrantTurboCharges, Amount) == 0x000000, "Member 'DelMarCheatManager_DelMarGrantTurboCharges::Amount' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarGrantTurboCharges, bGrantToEveryone) == 0x000004, "Member 'DelMarCheatManager_DelMarGrantTurboCharges::bGrantToEveryone' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarInitiateMissedCheckpointDemoCountdown
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarInitiateMissedCheckpointDemoCountdown final
{
public:
	float                                         SecondsUntilDemo;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarInitiateMissedCheckpointDemoCountdown) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarInitiateMissedCheckpointDemoCountdown");
static_assert(sizeof(DelMarCheatManager_DelMarInitiateMissedCheckpointDemoCountdown) == 0x000004, "Wrong size on DelMarCheatManager_DelMarInitiateMissedCheckpointDemoCountdown");
static_assert(offsetof(DelMarCheatManager_DelMarInitiateMissedCheckpointDemoCountdown, SecondsUntilDemo) == 0x000000, "Member 'DelMarCheatManager_DelMarInitiateMissedCheckpointDemoCountdown::SecondsUntilDemo' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarInitiateReturnToTrackDemoCountdown
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarInitiateReturnToTrackDemoCountdown final
{
public:
	float                                         SecondsUntilDemo;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarInitiateReturnToTrackDemoCountdown) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarInitiateReturnToTrackDemoCountdown");
static_assert(sizeof(DelMarCheatManager_DelMarInitiateReturnToTrackDemoCountdown) == 0x000004, "Wrong size on DelMarCheatManager_DelMarInitiateReturnToTrackDemoCountdown");
static_assert(offsetof(DelMarCheatManager_DelMarInitiateReturnToTrackDemoCountdown, SecondsUntilDemo) == 0x000000, "Member 'DelMarCheatManager_DelMarInitiateReturnToTrackDemoCountdown::SecondsUntilDemo' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarQueueAutoInputDriveThenTurn
// 0x0014 (0x0014 - 0x0000)
struct DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn final
{
public:
	int32                                         Repeat;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Throttle;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StraightDuration;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steer;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDuration;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn");
static_assert(sizeof(DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn) == 0x000014, "Wrong size on DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn");
static_assert(offsetof(DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn, Repeat) == 0x000000, "Member 'DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn::Repeat' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn, Throttle) == 0x000004, "Member 'DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn::Throttle' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn, StraightDuration) == 0x000008, "Member 'DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn::StraightDuration' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn, Steer) == 0x00000C, "Member 'DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn::Steer' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn, TurnDuration) == 0x000010, "Member 'DelMarCheatManager_DelMarQueueAutoInputDriveThenTurn::TurnDuration' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarQueueAutoInputJump
// 0x0008 (0x0008 - 0x0000)
struct DelMarCheatManager_DelMarQueueAutoInputJump final
{
public:
	int32                                         Repeat;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarQueueAutoInputJump) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarQueueAutoInputJump");
static_assert(sizeof(DelMarCheatManager_DelMarQueueAutoInputJump) == 0x000008, "Wrong size on DelMarCheatManager_DelMarQueueAutoInputJump");
static_assert(offsetof(DelMarCheatManager_DelMarQueueAutoInputJump, Repeat) == 0x000000, "Member 'DelMarCheatManager_DelMarQueueAutoInputJump::Repeat' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarQueueAutoInputJump, Delay) == 0x000004, "Member 'DelMarCheatManager_DelMarQueueAutoInputJump::Delay' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarQueueAutoInputThrottle
// 0x0008 (0x0008 - 0x0000)
struct DelMarCheatManager_DelMarQueueAutoInputThrottle final
{
public:
	float                                         Throttle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarQueueAutoInputThrottle) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarQueueAutoInputThrottle");
static_assert(sizeof(DelMarCheatManager_DelMarQueueAutoInputThrottle) == 0x000008, "Wrong size on DelMarCheatManager_DelMarQueueAutoInputThrottle");
static_assert(offsetof(DelMarCheatManager_DelMarQueueAutoInputThrottle, Throttle) == 0x000000, "Member 'DelMarCheatManager_DelMarQueueAutoInputThrottle::Throttle' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarQueueAutoInputThrottle, duration) == 0x000004, "Member 'DelMarCheatManager_DelMarQueueAutoInputThrottle::duration' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarRemoveBotByName
// 0x0010 (0x0010 - 0x0000)
struct DelMarCheatManager_DelMarRemoveBotByName final
{
public:
	class FString                                 BotName;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarRemoveBotByName) == 0x000008, "Wrong alignment on DelMarCheatManager_DelMarRemoveBotByName");
static_assert(sizeof(DelMarCheatManager_DelMarRemoveBotByName) == 0x000010, "Wrong size on DelMarCheatManager_DelMarRemoveBotByName");
static_assert(offsetof(DelMarCheatManager_DelMarRemoveBotByName, BotName) == 0x000000, "Member 'DelMarCheatManager_DelMarRemoveBotByName::BotName' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarRemoveNumberOfBots
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarRemoveNumberOfBots final
{
public:
	int32                                         NumberOfBotsToRemove;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarRemoveNumberOfBots) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarRemoveNumberOfBots");
static_assert(sizeof(DelMarCheatManager_DelMarRemoveNumberOfBots) == 0x000004, "Wrong size on DelMarCheatManager_DelMarRemoveNumberOfBots");
static_assert(offsetof(DelMarCheatManager_DelMarRemoveNumberOfBots, NumberOfBotsToRemove) == 0x000000, "Member 'DelMarCheatManager_DelMarRemoveNumberOfBots::NumberOfBotsToRemove' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetAirFreestyleEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetAirFreestyleEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetAirFreestyleEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetAirFreestyleEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetAirFreestyleEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetAirFreestyleEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetAirFreestyleEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetAirFreestyleEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetCollisionDemosEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetCollisionDemosEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetCollisionDemosEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetCollisionDemosEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetCollisionDemosEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetCollisionDemosEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetCollisionDemosEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetCollisionDemosEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetDemoModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetDemoModeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetDemoModeEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetDemoModeEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetDemoModeEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetDemoModeEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetDemoModeEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetDemoModeEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetDraftingEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetDraftingEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetDraftingEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetDraftingEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetDraftingEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetDraftingEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetDraftingEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetDraftingEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetGlobalInputEnabled
// 0x0018 (0x0018 - 0x0000)
struct DelMarCheatManager_DelMarSetGlobalInputEnabled final
{
public:
	class FString                                 InputTag;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInput;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCheatManager_DelMarSetGlobalInputEnabled) == 0x000008, "Wrong alignment on DelMarCheatManager_DelMarSetGlobalInputEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetGlobalInputEnabled) == 0x000018, "Wrong size on DelMarCheatManager_DelMarSetGlobalInputEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetGlobalInputEnabled, InputTag) == 0x000000, "Member 'DelMarCheatManager_DelMarSetGlobalInputEnabled::InputTag' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarSetGlobalInputEnabled, bEnableInput) == 0x000010, "Member 'DelMarCheatManager_DelMarSetGlobalInputEnabled::bEnableInput' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetInfiniteUnderthrustEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetInfiniteUnderthrustEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetInfiniteUnderthrustEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetInfiniteUnderthrustEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetInfiniteUnderthrustEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetInfiniteUnderthrustEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetInfiniteUnderthrustEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetInfiniteUnderthrustEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetInputMappingContextEnabled
// 0x0018 (0x0018 - 0x0000)
struct DelMarCheatManager_DelMarSetInputMappingContextEnabled final
{
public:
	class FString                                 InputTag;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInput;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCheatManager_DelMarSetInputMappingContextEnabled) == 0x000008, "Wrong alignment on DelMarCheatManager_DelMarSetInputMappingContextEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetInputMappingContextEnabled) == 0x000018, "Wrong size on DelMarCheatManager_DelMarSetInputMappingContextEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetInputMappingContextEnabled, InputTag) == 0x000000, "Member 'DelMarCheatManager_DelMarSetInputMappingContextEnabled::InputTag' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarSetInputMappingContextEnabled, bEnableInput) == 0x000010, "Member 'DelMarCheatManager_DelMarSetInputMappingContextEnabled::bEnableInput' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetInvertSteerMethod
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetInvertSteerMethod final
{
public:
	EDelMarInvertSteerMethod                      InInvertSteerMethod;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetInvertSteerMethod) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetInvertSteerMethod");
static_assert(sizeof(DelMarCheatManager_DelMarSetInvertSteerMethod) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetInvertSteerMethod");
static_assert(offsetof(DelMarCheatManager_DelMarSetInvertSteerMethod, InInvertSteerMethod) == 0x000000, "Member 'DelMarCheatManager_DelMarSetInvertSteerMethod::InInvertSteerMethod' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetLap
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetLap final
{
public:
	int32                                         LapNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetLap) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetLap");
static_assert(sizeof(DelMarCheatManager_DelMarSetLap) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetLap");
static_assert(offsetof(DelMarCheatManager_DelMarSetLap, LapNum) == 0x000000, "Member 'DelMarCheatManager_DelMarSetLap::LapNum' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetLapTotal
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetLapTotal final
{
public:
	int32                                         NewTotal;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetLapTotal) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetLapTotal");
static_assert(sizeof(DelMarCheatManager_DelMarSetLapTotal) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetLapTotal");
static_assert(offsetof(DelMarCheatManager_DelMarSetLapTotal, NewTotal) == 0x000000, "Member 'DelMarCheatManager_DelMarSetLapTotal::NewTotal' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetLoadingScreenVisibility
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetLoadingScreenVisibility final
{
public:
	bool                                          bShouldBeVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetLoadingScreenVisibility) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetLoadingScreenVisibility");
static_assert(sizeof(DelMarCheatManager_DelMarSetLoadingScreenVisibility) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetLoadingScreenVisibility");
static_assert(offsetof(DelMarCheatManager_DelMarSetLoadingScreenVisibility, bShouldBeVisible) == 0x000000, "Member 'DelMarCheatManager_DelMarSetLoadingScreenVisibility::bShouldBeVisible' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetReplicatedTagEnabledOnSelf
// 0x0018 (0x0018 - 0x0000)
struct DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf final
{
public:
	class FString                                 InputTag;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf) == 0x000008, "Wrong alignment on DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf");
static_assert(sizeof(DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf) == 0x000018, "Wrong size on DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf");
static_assert(offsetof(DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf, InputTag) == 0x000000, "Member 'DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf::InputTag' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf, bEnabled) == 0x000010, "Member 'DelMarCheatManager_DelMarSetReplicatedTagEnabledOnSelf::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnCollisionProtectionEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetRespawnCollisionProtectionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRespawnCollisionProtectionEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetRespawnCollisionProtectionEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetRespawnCollisionProtectionEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetRespawnCollisionProtectionEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetRespawnCollisionProtectionEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRespawnCollisionProtectionEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnCollisionProtectionSeconds
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRespawnCollisionProtectionSeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRespawnCollisionProtectionSeconds) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRespawnCollisionProtectionSeconds");
static_assert(sizeof(DelMarCheatManager_DelMarSetRespawnCollisionProtectionSeconds) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRespawnCollisionProtectionSeconds");
static_assert(offsetof(DelMarCheatManager_DelMarSetRespawnCollisionProtectionSeconds, Seconds) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRespawnCollisionProtectionSeconds::Seconds' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnInvulnerabilityEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetRespawnInvulnerabilityEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRespawnInvulnerabilityEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetRespawnInvulnerabilityEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetRespawnInvulnerabilityEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetRespawnInvulnerabilityEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetRespawnInvulnerabilityEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRespawnInvulnerabilityEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnInvulnerabilitySeconds
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRespawnInvulnerabilitySeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRespawnInvulnerabilitySeconds) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRespawnInvulnerabilitySeconds");
static_assert(sizeof(DelMarCheatManager_DelMarSetRespawnInvulnerabilitySeconds) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRespawnInvulnerabilitySeconds");
static_assert(offsetof(DelMarCheatManager_DelMarSetRespawnInvulnerabilitySeconds, Seconds) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRespawnInvulnerabilitySeconds::Seconds' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRespawnTracesEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetRespawnTracesEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRespawnTracesEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetRespawnTracesEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetRespawnTracesEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetRespawnTracesEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetRespawnTracesEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRespawnTracesEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxBonusSpeedScalar
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingMaxBonusSpeedScalar final
{
public:
	float                                         InMaxBonusSpeedScalar;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingMaxBonusSpeedScalar) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingMaxBonusSpeedScalar");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingMaxBonusSpeedScalar) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingMaxBonusSpeedScalar");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingMaxBonusSpeedScalar, InMaxBonusSpeedScalar) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingMaxBonusSpeedScalar::InMaxBonusSpeedScalar' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxDistanceFromPack
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingMaxDistanceFromPack final
{
public:
	float                                         InMaxDistanceFromPack;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingMaxDistanceFromPack) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingMaxDistanceFromPack");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingMaxDistanceFromPack) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingMaxDistanceFromPack");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingMaxDistanceFromPack, InMaxDistanceFromPack) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingMaxDistanceFromPack::InMaxDistanceFromPack' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxPackDistance
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingMaxPackDistance final
{
public:
	float                                         InMaxPackDistance;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingMaxPackDistance) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingMaxPackDistance");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingMaxPackDistance) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingMaxPackDistance");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingMaxPackDistance, InMaxPackDistance) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingMaxPackDistance::InMaxPackDistance' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxPackDistanceGainedPerSecond
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceGainedPerSecond final
{
public:
	float                                         InMaxPackDistanceGainedPerSecond;                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceGainedPerSecond) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceGainedPerSecond");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceGainedPerSecond) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceGainedPerSecond");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceGainedPerSecond, InMaxPackDistanceGainedPerSecond) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceGainedPerSecond::InMaxPackDistanceGainedPerSecond' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMaxPackDistanceLostPerSecond
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceLostPerSecond final
{
public:
	float                                         InMaxPackDistanceLostPerSecond;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceLostPerSecond) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceLostPerSecond");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceLostPerSecond) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceLostPerSecond");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceLostPerSecond, InMaxPackDistanceLostPerSecond) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingMaxPackDistanceLostPerSecond::InMaxPackDistanceLostPerSecond' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMinDistanceFromPack
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingMinDistanceFromPack final
{
public:
	float                                         InMinDistanceFromPack;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingMinDistanceFromPack) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingMinDistanceFromPack");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingMinDistanceFromPack) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingMinDistanceFromPack");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingMinDistanceFromPack, InMinDistanceFromPack) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingMinDistanceFromPack::InMinDistanceFromPack' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMinPackDistance
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingMinPackDistance final
{
public:
	float                                         InMinPackDistance;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingMinPackDistance) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingMinPackDistance");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingMinPackDistance) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingMinPackDistance");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingMinPackDistance, InMinPackDistance) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingMinPackDistance::InMinPackDistance' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingMMR
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingMMR final
{
public:
	int32                                         InMMR;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingMMR) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingMMR");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingMMR) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingMMR");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingMMR, InMMR) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingMMR::InMMR' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetRubberbandingNumPlayersForPackDistance
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetRubberbandingNumPlayersForPackDistance final
{
public:
	int32                                         InNumPlayersForPackDistance;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetRubberbandingNumPlayersForPackDistance) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetRubberbandingNumPlayersForPackDistance");
static_assert(sizeof(DelMarCheatManager_DelMarSetRubberbandingNumPlayersForPackDistance) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetRubberbandingNumPlayersForPackDistance");
static_assert(offsetof(DelMarCheatManager_DelMarSetRubberbandingNumPlayersForPackDistance, InNumPlayersForPackDistance) == 0x000000, "Member 'DelMarCheatManager_DelMarSetRubberbandingNumPlayersForPackDistance::InNumPlayersForPackDistance' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetSpawnMode
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetSpawnMode final
{
public:
	EDelMarRaceSpawnMode                          SpawnMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetSpawnMode) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetSpawnMode");
static_assert(sizeof(DelMarCheatManager_DelMarSetSpawnMode) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetSpawnMode");
static_assert(offsetof(DelMarCheatManager_DelMarSetSpawnMode, SpawnMode) == 0x000000, "Member 'DelMarCheatManager_DelMarSetSpawnMode::SpawnMode' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetStartlineBoostEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetStartlineBoostEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetStartlineBoostEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetStartlineBoostEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetStartlineBoostEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetStartlineBoostEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetStartlineBoostEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetStartlineBoostEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetStrafeEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetStrafeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetStrafeEnabled) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetStrafeEnabled");
static_assert(sizeof(DelMarCheatManager_DelMarSetStrafeEnabled) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetStrafeEnabled");
static_assert(offsetof(DelMarCheatManager_DelMarSetStrafeEnabled, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarSetStrafeEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetTurboCharges
// 0x0008 (0x0008 - 0x0000)
struct DelMarCheatManager_DelMarSetTurboCharges final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGrantToEveryone;                                  // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCheatManager_DelMarSetTurboCharges) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetTurboCharges");
static_assert(sizeof(DelMarCheatManager_DelMarSetTurboCharges) == 0x000008, "Wrong size on DelMarCheatManager_DelMarSetTurboCharges");
static_assert(offsetof(DelMarCheatManager_DelMarSetTurboCharges, Amount) == 0x000000, "Member 'DelMarCheatManager_DelMarSetTurboCharges::Amount' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarSetTurboCharges, bGrantToEveryone) == 0x000004, "Member 'DelMarCheatManager_DelMarSetTurboCharges::bGrantToEveryone' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetTutorialSection
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSetTutorialSection final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetTutorialSection) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSetTutorialSection");
static_assert(sizeof(DelMarCheatManager_DelMarSetTutorialSection) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSetTutorialSection");
static_assert(offsetof(DelMarCheatManager_DelMarSetTutorialSection, Index_0) == 0x000000, "Member 'DelMarCheatManager_DelMarSetTutorialSection::Index_0' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetVehicleCollisionsOverrideForSelf
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetVehicleCollisionsOverrideForSelf final
{
public:
	EDelMarVehicleCollisionOverrideSetting        NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetVehicleCollisionsOverrideForSelf) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetVehicleCollisionsOverrideForSelf");
static_assert(sizeof(DelMarCheatManager_DelMarSetVehicleCollisionsOverrideForSelf) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetVehicleCollisionsOverrideForSelf");
static_assert(offsetof(DelMarCheatManager_DelMarSetVehicleCollisionsOverrideForSelf, NewValue) == 0x000000, "Member 'DelMarCheatManager_DelMarSetVehicleCollisionsOverrideForSelf::NewValue' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetVehicleCollisionsOverrideGlobal
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetVehicleCollisionsOverrideGlobal final
{
public:
	EDelMarVehicleCollisionOverrideSetting        NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetVehicleCollisionsOverrideGlobal) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetVehicleCollisionsOverrideGlobal");
static_assert(sizeof(DelMarCheatManager_DelMarSetVehicleCollisionsOverrideGlobal) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetVehicleCollisionsOverrideGlobal");
static_assert(offsetof(DelMarCheatManager_DelMarSetVehicleCollisionsOverrideGlobal, NewValue) == 0x000000, "Member 'DelMarCheatManager_DelMarSetVehicleCollisionsOverrideGlobal::NewValue' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSetVerticalKickflipInverted
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarSetVerticalKickflipInverted final
{
public:
	bool                                          InbVerticalKickflipInverted;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSetVerticalKickflipInverted) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarSetVerticalKickflipInverted");
static_assert(sizeof(DelMarCheatManager_DelMarSetVerticalKickflipInverted) == 0x000001, "Wrong size on DelMarCheatManager_DelMarSetVerticalKickflipInverted");
static_assert(offsetof(DelMarCheatManager_DelMarSetVerticalKickflipInverted, InbVerticalKickflipInverted) == 0x000000, "Member 'DelMarCheatManager_DelMarSetVerticalKickflipInverted::InbVerticalKickflipInverted' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSpawnBots
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarSpawnBots final
{
public:
	int32                                         NumberOfBotsToSpawn;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSpawnBots) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSpawnBots");
static_assert(sizeof(DelMarCheatManager_DelMarSpawnBots) == 0x000004, "Wrong size on DelMarCheatManager_DelMarSpawnBots");
static_assert(offsetof(DelMarCheatManager_DelMarSpawnBots, NumberOfBotsToSpawn) == 0x000000, "Member 'DelMarCheatManager_DelMarSpawnBots::NumberOfBotsToSpawn' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarSpawnBotsAtSkillLevel
// 0x0008 (0x0008 - 0x0000)
struct DelMarCheatManager_DelMarSpawnBotsAtSkillLevel final
{
public:
	int32                                         NumberOfBotsToSpawn;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarSpawnBotsAtSkillLevel) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarSpawnBotsAtSkillLevel");
static_assert(sizeof(DelMarCheatManager_DelMarSpawnBotsAtSkillLevel) == 0x000008, "Wrong size on DelMarCheatManager_DelMarSpawnBotsAtSkillLevel");
static_assert(offsetof(DelMarCheatManager_DelMarSpawnBotsAtSkillLevel, NumberOfBotsToSpawn) == 0x000000, "Member 'DelMarCheatManager_DelMarSpawnBotsAtSkillLevel::NumberOfBotsToSpawn' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarSpawnBotsAtSkillLevel, SkillLevel) == 0x000004, "Member 'DelMarCheatManager_DelMarSpawnBotsAtSkillLevel::SkillLevel' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarStartFollowTrack
// 0x0004 (0x0004 - 0x0000)
struct DelMarCheatManager_DelMarStartFollowTrack final
{
public:
	float                                         Throttle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarStartFollowTrack) == 0x000004, "Wrong alignment on DelMarCheatManager_DelMarStartFollowTrack");
static_assert(sizeof(DelMarCheatManager_DelMarStartFollowTrack) == 0x000004, "Wrong size on DelMarCheatManager_DelMarStartFollowTrack");
static_assert(offsetof(DelMarCheatManager_DelMarStartFollowTrack, Throttle) == 0x000000, "Member 'DelMarCheatManager_DelMarStartFollowTrack::Throttle' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarUsePredictiveInterpolation
// 0x0002 (0x0002 - 0x0000)
struct DelMarCheatManager_DelMarUsePredictiveInterpolation final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEveryOther;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarUsePredictiveInterpolation) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarUsePredictiveInterpolation");
static_assert(sizeof(DelMarCheatManager_DelMarUsePredictiveInterpolation) == 0x000002, "Wrong size on DelMarCheatManager_DelMarUsePredictiveInterpolation");
static_assert(offsetof(DelMarCheatManager_DelMarUsePredictiveInterpolation, bEnabled) == 0x000000, "Member 'DelMarCheatManager_DelMarUsePredictiveInterpolation::bEnabled' has a wrong offset!");
static_assert(offsetof(DelMarCheatManager_DelMarUsePredictiveInterpolation, bEveryOther) == 0x000001, "Member 'DelMarCheatManager_DelMarUsePredictiveInterpolation::bEveryOther' has a wrong offset!");

// Function DelMarCore.DelMarCheatManager.DelMarStartTrackScrubberWithViewTarget
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheatManager_DelMarStartTrackScrubberWithViewTarget final
{
public:
	bool                                          bRunCsvProfilerDuringScrub;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheatManager_DelMarStartTrackScrubberWithViewTarget) == 0x000001, "Wrong alignment on DelMarCheatManager_DelMarStartTrackScrubberWithViewTarget");
static_assert(sizeof(DelMarCheatManager_DelMarStartTrackScrubberWithViewTarget) == 0x000001, "Wrong size on DelMarCheatManager_DelMarStartTrackScrubberWithViewTarget");
static_assert(offsetof(DelMarCheatManager_DelMarStartTrackScrubberWithViewTarget, bRunCsvProfilerDuringScrub) == 0x000000, "Member 'DelMarCheatManager_DelMarStartTrackScrubberWithViewTarget::bRunCsvProfilerDuringScrub' has a wrong offset!");

// Function DelMarCore.DelMarStateSequencerFXComponent.HandleCurrentStateChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarStateSequencerFXComponent_HandleCurrentStateChanged final
{
public:
	struct FGameplayTag                           NewState;                                          // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStateSequencerFXComponent_HandleCurrentStateChanged) == 0x000004, "Wrong alignment on DelMarStateSequencerFXComponent_HandleCurrentStateChanged");
static_assert(sizeof(DelMarStateSequencerFXComponent_HandleCurrentStateChanged) == 0x000004, "Wrong size on DelMarStateSequencerFXComponent_HandleCurrentStateChanged");
static_assert(offsetof(DelMarStateSequencerFXComponent_HandleCurrentStateChanged, NewState) == 0x000000, "Member 'DelMarStateSequencerFXComponent_HandleCurrentStateChanged::NewState' has a wrong offset!");

// Function DelMarCore.DelMarStateSequencerFXComponent.HandleEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarStateSequencerFXComponent_HandleEnabledChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarStateSequencerFXComponent_HandleEnabledChanged) == 0x000001, "Wrong alignment on DelMarStateSequencerFXComponent_HandleEnabledChanged");
static_assert(sizeof(DelMarStateSequencerFXComponent_HandleEnabledChanged) == 0x000001, "Wrong size on DelMarStateSequencerFXComponent_HandleEnabledChanged");
static_assert(offsetof(DelMarStateSequencerFXComponent_HandleEnabledChanged, bEnabled) == 0x000000, "Member 'DelMarStateSequencerFXComponent_HandleEnabledChanged::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarTimeDelayedStateSequencer.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarTimeDelayedStateSequencer_SetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeDelayedStateSequencer_SetEnabled) == 0x000001, "Wrong alignment on DelMarTimeDelayedStateSequencer_SetEnabled");
static_assert(sizeof(DelMarTimeDelayedStateSequencer_SetEnabled) == 0x000001, "Wrong size on DelMarTimeDelayedStateSequencer_SetEnabled");
static_assert(offsetof(DelMarTimeDelayedStateSequencer_SetEnabled, bEnabled) == 0x000000, "Member 'DelMarTimeDelayedStateSequencer_SetEnabled::bEnabled' has a wrong offset!");

// Function DelMarCore.DelMarTimeDelayedStateSequencer.GetCurrentStateTag
// 0x0004 (0x0004 - 0x0000)
struct DelMarTimeDelayedStateSequencer_GetCurrentStateTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeDelayedStateSequencer_GetCurrentStateTag) == 0x000004, "Wrong alignment on DelMarTimeDelayedStateSequencer_GetCurrentStateTag");
static_assert(sizeof(DelMarTimeDelayedStateSequencer_GetCurrentStateTag) == 0x000004, "Wrong size on DelMarTimeDelayedStateSequencer_GetCurrentStateTag");
static_assert(offsetof(DelMarTimeDelayedStateSequencer_GetCurrentStateTag, ReturnValue) == 0x000000, "Member 'DelMarTimeDelayedStateSequencer_GetCurrentStateTag::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTimeDelayedStateSequencer.GetStateCount
// 0x0004 (0x0004 - 0x0000)
struct DelMarTimeDelayedStateSequencer_GetStateCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeDelayedStateSequencer_GetStateCount) == 0x000004, "Wrong alignment on DelMarTimeDelayedStateSequencer_GetStateCount");
static_assert(sizeof(DelMarTimeDelayedStateSequencer_GetStateCount) == 0x000004, "Wrong size on DelMarTimeDelayedStateSequencer_GetStateCount");
static_assert(offsetof(DelMarTimeDelayedStateSequencer_GetStateCount, ReturnValue) == 0x000000, "Member 'DelMarTimeDelayedStateSequencer_GetStateCount::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarTimeDelayedStateSequencer.GetStateTagAtIndex
// 0x0008 (0x0008 - 0x0000)
struct DelMarTimeDelayedStateSequencer_GetStateTagAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTimeDelayedStateSequencer_GetStateTagAtIndex) == 0x000004, "Wrong alignment on DelMarTimeDelayedStateSequencer_GetStateTagAtIndex");
static_assert(sizeof(DelMarTimeDelayedStateSequencer_GetStateTagAtIndex) == 0x000008, "Wrong size on DelMarTimeDelayedStateSequencer_GetStateTagAtIndex");
static_assert(offsetof(DelMarTimeDelayedStateSequencer_GetStateTagAtIndex, Index_0) == 0x000000, "Member 'DelMarTimeDelayedStateSequencer_GetStateTagAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(DelMarTimeDelayedStateSequencer_GetStateTagAtIndex, ReturnValue) == 0x000004, "Member 'DelMarTimeDelayedStateSequencer_GetStateTagAtIndex::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarGlobalInputDisabler.SetGlobalInputsEnabled
// 0x0028 (0x0028 - 0x0000)
struct DelMarGlobalInputDisabler_SetGlobalInputsEnabled final
{
public:
	struct FGameplayTagContainer                  InputTags;                                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarGlobalInputDisabler_SetGlobalInputsEnabled) == 0x000008, "Wrong alignment on DelMarGlobalInputDisabler_SetGlobalInputsEnabled");
static_assert(sizeof(DelMarGlobalInputDisabler_SetGlobalInputsEnabled) == 0x000028, "Wrong size on DelMarGlobalInputDisabler_SetGlobalInputsEnabled");
static_assert(offsetof(DelMarGlobalInputDisabler_SetGlobalInputsEnabled, InputTags) == 0x000000, "Member 'DelMarGlobalInputDisabler_SetGlobalInputsEnabled::InputTags' has a wrong offset!");
static_assert(offsetof(DelMarGlobalInputDisabler_SetGlobalInputsEnabled, bEnable) == 0x000020, "Member 'DelMarGlobalInputDisabler_SetGlobalInputsEnabled::bEnable' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnAnyWheelsOnGroundChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged final
{
public:
	TScriptInterface<class IDelMarVehicleInterface> VehicleRef;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged) == 0x000008, "Wrong alignment on DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged) == 0x000018, "Wrong size on DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged, VehicleRef) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged::VehicleRef' has a wrong offset!");
static_assert(offsetof(DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged, bValue) == 0x000010, "Member 'DelMarCosmeticActor_BP_OnAnyWheelsOnGroundChanged::bValue' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnBonusSpeedChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarCosmeticActor_BP_OnBonusSpeedChanged final
{
public:
	float                                         BonusSpeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnBonusSpeedChanged) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnBonusSpeedChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnBonusSpeedChanged) == 0x000004, "Wrong size on DelMarCosmeticActor_BP_OnBonusSpeedChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnBonusSpeedChanged, BonusSpeed) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnBonusSpeedChanged::BonusSpeed' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnDelMarVehicleSpawned
// 0x0002 (0x0002 - 0x0000)
struct DelMarCosmeticActor_BP_OnDelMarVehicleSpawned final
{
public:
	bool                                          bFirstVehicleForPlayer;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrevVehicleDemolished;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnDelMarVehicleSpawned) == 0x000001, "Wrong alignment on DelMarCosmeticActor_BP_OnDelMarVehicleSpawned");
static_assert(sizeof(DelMarCosmeticActor_BP_OnDelMarVehicleSpawned) == 0x000002, "Wrong size on DelMarCosmeticActor_BP_OnDelMarVehicleSpawned");
static_assert(offsetof(DelMarCosmeticActor_BP_OnDelMarVehicleSpawned, bFirstVehicleForPlayer) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnDelMarVehicleSpawned::bFirstVehicleForPlayer' has a wrong offset!");
static_assert(offsetof(DelMarCosmeticActor_BP_OnDelMarVehicleSpawned, bPrevVehicleDemolished) == 0x000001, "Member 'DelMarCosmeticActor_BP_OnDelMarVehicleSpawned::bPrevVehicleDemolished' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnDraftStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarCosmeticActor_BP_OnDraftStateChanged final
{
public:
	EDelmarDraftingState                          CurrentState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnDraftStateChanged) == 0x000001, "Wrong alignment on DelMarCosmeticActor_BP_OnDraftStateChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnDraftStateChanged) == 0x000001, "Wrong size on DelMarCosmeticActor_BP_OnDraftStateChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnDraftStateChanged, CurrentState) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnDraftStateChanged::CurrentState' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftControlChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarCosmeticActor_BP_OnDriftControlChanged final
{
public:
	bool                                          bIsDriftingControlled;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnDriftControlChanged) == 0x000001, "Wrong alignment on DelMarCosmeticActor_BP_OnDriftControlChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnDriftControlChanged) == 0x000001, "Wrong size on DelMarCosmeticActor_BP_OnDriftControlChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnDriftControlChanged, bIsDriftingControlled) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnDriftControlChanged::bIsDriftingControlled' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftDurationChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarCosmeticActor_BP_OnDriftDurationChanged final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnDriftDurationChanged) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnDriftDurationChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnDriftDurationChanged) == 0x000004, "Wrong size on DelMarCosmeticActor_BP_OnDriftDurationChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnDriftDurationChanged, duration) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnDriftDurationChanged::duration' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnDriftKickActivated
// 0x0008 (0x0008 - 0x0000)
struct DelMarCosmeticActor_BP_OnDriftKickActivated final
{
public:
	float                                         DriftDirection;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleDriftState                      DriftState;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCosmeticActor_BP_OnDriftKickActivated) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnDriftKickActivated");
static_assert(sizeof(DelMarCosmeticActor_BP_OnDriftKickActivated) == 0x000008, "Wrong size on DelMarCosmeticActor_BP_OnDriftKickActivated");
static_assert(offsetof(DelMarCosmeticActor_BP_OnDriftKickActivated, DriftDirection) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnDriftKickActivated::DriftDirection' has a wrong offset!");
static_assert(offsetof(DelMarCosmeticActor_BP_OnDriftKickActivated, DriftState) == 0x000004, "Member 'DelMarCosmeticActor_BP_OnDriftKickActivated::DriftState' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipActivated
// 0x0001 (0x0001 - 0x0000)
struct DelMarCosmeticActor_BP_OnKickflipActivated final
{
public:
	bool                                          bLeftSide;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnKickflipActivated) == 0x000001, "Wrong alignment on DelMarCosmeticActor_BP_OnKickflipActivated");
static_assert(sizeof(DelMarCosmeticActor_BP_OnKickflipActivated) == 0x000001, "Wrong size on DelMarCosmeticActor_BP_OnKickflipActivated");
static_assert(offsetof(DelMarCosmeticActor_BP_OnKickflipActivated, bLeftSide) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnKickflipActivated::bLeftSide' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipActivationChargesChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarCosmeticActor_BP_OnKickflipActivationChargesChanged final
{
public:
	int32                                         ActivationCharges;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnKickflipActivationChargesChanged) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnKickflipActivationChargesChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnKickflipActivationChargesChanged) == 0x000004, "Wrong size on DelMarCosmeticActor_BP_OnKickflipActivationChargesChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnKickflipActivationChargesChanged, ActivationCharges) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnKickflipActivationChargesChanged::ActivationCharges' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipDistanceToSuctionSurfaceChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarCosmeticActor_BP_OnKickflipDistanceToSuctionSurfaceChanged final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnKickflipDistanceToSuctionSurfaceChanged) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnKickflipDistanceToSuctionSurfaceChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnKickflipDistanceToSuctionSurfaceChanged) == 0x000004, "Wrong size on DelMarCosmeticActor_BP_OnKickflipDistanceToSuctionSurfaceChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnKickflipDistanceToSuctionSurfaceChanged, Distance) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnKickflipDistanceToSuctionSurfaceChanged::Distance' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnKickflipDurationChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarCosmeticActor_BP_OnKickflipDurationChanged final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnKickflipDurationChanged) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnKickflipDurationChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnKickflipDurationChanged) == 0x000004, "Wrong size on DelMarCosmeticActor_BP_OnKickflipDurationChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnKickflipDurationChanged, duration) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnKickflipDurationChanged::duration' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnStartlineBoostActivated
// 0x0004 (0x0004 - 0x0000)
struct DelMarCosmeticActor_BP_OnStartlineBoostActivated final
{
public:
	float                                         PercentageMaxBonusSpeedEarned;                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnStartlineBoostActivated) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnStartlineBoostActivated");
static_assert(sizeof(DelMarCosmeticActor_BP_OnStartlineBoostActivated) == 0x000004, "Wrong size on DelMarCosmeticActor_BP_OnStartlineBoostActivated");
static_assert(offsetof(DelMarCosmeticActor_BP_OnStartlineBoostActivated, PercentageMaxBonusSpeedEarned) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnStartlineBoostActivated::PercentageMaxBonusSpeedEarned' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnStrafeActivated
// 0x0001 (0x0001 - 0x0000)
struct DelMarCosmeticActor_BP_OnStrafeActivated final
{
public:
	bool                                          bLeftSide;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnStrafeActivated) == 0x000001, "Wrong alignment on DelMarCosmeticActor_BP_OnStrafeActivated");
static_assert(sizeof(DelMarCosmeticActor_BP_OnStrafeActivated) == 0x000001, "Wrong size on DelMarCosmeticActor_BP_OnStrafeActivated");
static_assert(offsetof(DelMarCosmeticActor_BP_OnStrafeActivated, bLeftSide) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnStrafeActivated::bLeftSide' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnStrafeCooldownChanged
// 0x0004 (0x0004 - 0x0000)
struct DelMarCosmeticActor_BP_OnStrafeCooldownChanged final
{
public:
	float                                         CooldownPercentage;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnStrafeCooldownChanged) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnStrafeCooldownChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnStrafeCooldownChanged) == 0x000004, "Wrong size on DelMarCosmeticActor_BP_OnStrafeCooldownChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnStrafeCooldownChanged, CooldownPercentage) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnStrafeCooldownChanged::CooldownPercentage' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnStrafeDisabledChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarCosmeticActor_BP_OnStrafeDisabledChanged final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnStrafeDisabledChanged) == 0x000001, "Wrong alignment on DelMarCosmeticActor_BP_OnStrafeDisabledChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnStrafeDisabledChanged) == 0x000001, "Wrong size on DelMarCosmeticActor_BP_OnStrafeDisabledChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnStrafeDisabledChanged, bDisabled) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnStrafeDisabledChanged::bDisabled' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnStrafeUsabilityChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarCosmeticActor_BP_OnStrafeUsabilityChanged final
{
public:
	bool                                          bCanActivate;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnStrafeUsabilityChanged) == 0x000001, "Wrong alignment on DelMarCosmeticActor_BP_OnStrafeUsabilityChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnStrafeUsabilityChanged) == 0x000001, "Wrong size on DelMarCosmeticActor_BP_OnStrafeUsabilityChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnStrafeUsabilityChanged, bCanActivate) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnStrafeUsabilityChanged::bCanActivate' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnTurboBonusStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarCosmeticActor_BP_OnTurboBonusStateChanged final
{
public:
	EDelMarTurboZoneState                         NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnTurboBonusStateChanged) == 0x000001, "Wrong alignment on DelMarCosmeticActor_BP_OnTurboBonusStateChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnTurboBonusStateChanged) == 0x000001, "Wrong size on DelMarCosmeticActor_BP_OnTurboBonusStateChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnTurboBonusStateChanged, NewState) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnTurboBonusStateChanged::NewState' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarCosmeticActor_BP_OnVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnVehicleDemolished) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnVehicleDemolished");
static_assert(sizeof(DelMarCosmeticActor_BP_OnVehicleDemolished) == 0x000004, "Wrong size on DelMarCosmeticActor_BP_OnVehicleDemolished");
static_assert(offsetof(DelMarCosmeticActor_BP_OnVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnVehicleForwardStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarCosmeticActor_BP_OnVehicleForwardStateChanged final
{
public:
	EDelMarVehicleForwardState                    NewForwardState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnVehicleForwardStateChanged) == 0x000001, "Wrong alignment on DelMarCosmeticActor_BP_OnVehicleForwardStateChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnVehicleForwardStateChanged) == 0x000001, "Wrong size on DelMarCosmeticActor_BP_OnVehicleForwardStateChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnVehicleForwardStateChanged, NewForwardState) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnVehicleForwardStateChanged::NewForwardState' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnVehicleLanded
// 0x0008 (0x0008 - 0x0000)
struct DelMarCosmeticActor_BP_OnVehicleLanded final
{
public:
	float                                         LandingForced;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandedKickflip;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCosmeticActor_BP_OnVehicleLanded) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnVehicleLanded");
static_assert(sizeof(DelMarCosmeticActor_BP_OnVehicleLanded) == 0x000008, "Wrong size on DelMarCosmeticActor_BP_OnVehicleLanded");
static_assert(offsetof(DelMarCosmeticActor_BP_OnVehicleLanded, LandingForced) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnVehicleLanded::LandingForced' has a wrong offset!");
static_assert(offsetof(DelMarCosmeticActor_BP_OnVehicleLanded, bLandedKickflip) == 0x000004, "Member 'DelMarCosmeticActor_BP_OnVehicleLanded::bLandedKickflip' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnWheelsOnGroundChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarCosmeticActor_BP_OnWheelsOnGroundChanged final
{
public:
	TScriptInterface<class IDelMarVehicleInterface> VehicleRef;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCosmeticActor_BP_OnWheelsOnGroundChanged) == 0x000008, "Wrong alignment on DelMarCosmeticActor_BP_OnWheelsOnGroundChanged");
static_assert(sizeof(DelMarCosmeticActor_BP_OnWheelsOnGroundChanged) == 0x000018, "Wrong size on DelMarCosmeticActor_BP_OnWheelsOnGroundChanged");
static_assert(offsetof(DelMarCosmeticActor_BP_OnWheelsOnGroundChanged, VehicleRef) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnWheelsOnGroundChanged::VehicleRef' has a wrong offset!");
static_assert(offsetof(DelMarCosmeticActor_BP_OnWheelsOnGroundChanged, bValue) == 0x000010, "Member 'DelMarCosmeticActor_BP_OnWheelsOnGroundChanged::bValue' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnWorldBonusSpeedStackGained
// 0x0008 (0x0008 - 0x0000)
struct DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained");
static_assert(sizeof(DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained) == 0x000008, "Wrong size on DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained");
static_assert(offsetof(DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained, Source) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained::Source' has a wrong offset!");
static_assert(offsetof(DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained, Stacks) == 0x000004, "Member 'DelMarCosmeticActor_BP_OnWorldBonusSpeedStackGained::Stacks' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.BP_OnWorldBonusSpeedStackLost
// 0x0008 (0x0008 - 0x0000)
struct DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost) == 0x000004, "Wrong alignment on DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost");
static_assert(sizeof(DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost) == 0x000008, "Wrong size on DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost");
static_assert(offsetof(DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost, Source) == 0x000000, "Member 'DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost::Source' has a wrong offset!");
static_assert(offsetof(DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost, Stacks) == 0x000004, "Member 'DelMarCosmeticActor_BP_OnWorldBonusSpeedStackLost::Stacks' has a wrong offset!");

// Function DelMarCore.DelMarCosmeticActor.GetBodyMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarCosmeticActor_GetBodyMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCosmeticActor_GetBodyMeshComponent) == 0x000008, "Wrong alignment on DelMarCosmeticActor_GetBodyMeshComponent");
static_assert(sizeof(DelMarCosmeticActor_GetBodyMeshComponent) == 0x000008, "Wrong size on DelMarCosmeticActor_GetBodyMeshComponent");
static_assert(offsetof(DelMarCosmeticActor_GetBodyMeshComponent, ReturnValue) == 0x000000, "Member 'DelMarCosmeticActor_GetBodyMeshComponent::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarMatchmakingComponent.ClientStartMatchmaking
// 0x0018 (0x0018 - 0x0000)
struct DelMarMatchmakingComponent_ClientStartMatchmaking final
{
public:
	struct FOnlineLinkId                          LinkId;                                            // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarMatchmakingComponent_ClientStartMatchmaking) == 0x000008, "Wrong alignment on DelMarMatchmakingComponent_ClientStartMatchmaking");
static_assert(sizeof(DelMarMatchmakingComponent_ClientStartMatchmaking) == 0x000018, "Wrong size on DelMarMatchmakingComponent_ClientStartMatchmaking");
static_assert(offsetof(DelMarMatchmakingComponent_ClientStartMatchmaking, LinkId) == 0x000000, "Member 'DelMarMatchmakingComponent_ClientStartMatchmaking::LinkId' has a wrong offset!");

// Function DelMarCore.DelMarContextualHintComponent.HandleVehicleDemolished
// 0x0004 (0x0004 - 0x0000)
struct DelMarContextualHintComponent_HandleVehicleDemolished final
{
public:
	struct FGameplayTag                           CausedByTag;                                       // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarContextualHintComponent_HandleVehicleDemolished) == 0x000004, "Wrong alignment on DelMarContextualHintComponent_HandleVehicleDemolished");
static_assert(sizeof(DelMarContextualHintComponent_HandleVehicleDemolished) == 0x000004, "Wrong size on DelMarContextualHintComponent_HandleVehicleDemolished");
static_assert(offsetof(DelMarContextualHintComponent_HandleVehicleDemolished, CausedByTag) == 0x000000, "Member 'DelMarContextualHintComponent_HandleVehicleDemolished::CausedByTag' has a wrong offset!");

// Function DelMarCore.DelMarLocalCheckpointVisibilityControllerComponent.HandleCheckpointPassed
// 0x0010 (0x0010 - 0x0000)
struct DelMarLocalCheckpointVisibilityControllerComponent_HandleCheckpointPassed final
{
public:
	struct FDelMarEvent_CheckpointPassed_ParallelPath CheckpointEvent;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarLocalCheckpointVisibilityControllerComponent_HandleCheckpointPassed) == 0x000008, "Wrong alignment on DelMarLocalCheckpointVisibilityControllerComponent_HandleCheckpointPassed");
static_assert(sizeof(DelMarLocalCheckpointVisibilityControllerComponent_HandleCheckpointPassed) == 0x000010, "Wrong size on DelMarLocalCheckpointVisibilityControllerComponent_HandleCheckpointPassed");
static_assert(offsetof(DelMarLocalCheckpointVisibilityControllerComponent_HandleCheckpointPassed, CheckpointEvent) == 0x000000, "Member 'DelMarLocalCheckpointVisibilityControllerComponent_HandleCheckpointPassed::CheckpointEvent' has a wrong offset!");

// Function DelMarCore.DelMarLocalCheckpointVisibilityControllerComponent.HandleLapComplete
// 0x0020 (0x0020 - 0x0000)
struct DelMarLocalCheckpointVisibilityControllerComponent_HandleLapComplete final
{
public:
	struct FDelMarEvent_LapComplete               LapEvent;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarLocalCheckpointVisibilityControllerComponent_HandleLapComplete) == 0x000008, "Wrong alignment on DelMarLocalCheckpointVisibilityControllerComponent_HandleLapComplete");
static_assert(sizeof(DelMarLocalCheckpointVisibilityControllerComponent_HandleLapComplete) == 0x000020, "Wrong size on DelMarLocalCheckpointVisibilityControllerComponent_HandleLapComplete");
static_assert(offsetof(DelMarLocalCheckpointVisibilityControllerComponent_HandleLapComplete, LapEvent) == 0x000000, "Member 'DelMarLocalCheckpointVisibilityControllerComponent_HandleLapComplete::LapEvent' has a wrong offset!");

// Function DelMarCore.DelMarLocalCheckpointVisibilityControllerComponent.HandleViewTargetChanged
// 0x0018 (0x0018 - 0x0000)
struct DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged) == 0x000008, "Wrong alignment on DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged");
static_assert(sizeof(DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged) == 0x000018, "Wrong size on DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged");
static_assert(offsetof(DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged, PlayerController) == 0x000000, "Member 'DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged::PlayerController' has a wrong offset!");
static_assert(offsetof(DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged, OldViewTarget) == 0x000008, "Member 'DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged::OldViewTarget' has a wrong offset!");
static_assert(offsetof(DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged, NewViewTarget) == 0x000010, "Member 'DelMarLocalCheckpointVisibilityControllerComponent_HandleViewTargetChanged::NewViewTarget' has a wrong offset!");

// Function DelMarCore.DelMarNetworkInputComponent.ServerSendInputs
// 0x0018 (0x0018 - 0x0000)
struct DelMarNetworkInputComponent_ServerSendInputs final
{
public:
	struct FDelMarNetworkInputPacket              InputPacket;                                       // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarNetworkInputComponent_ServerSendInputs) == 0x000008, "Wrong alignment on DelMarNetworkInputComponent_ServerSendInputs");
static_assert(sizeof(DelMarNetworkInputComponent_ServerSendInputs) == 0x000018, "Wrong size on DelMarNetworkInputComponent_ServerSendInputs");
static_assert(offsetof(DelMarNetworkInputComponent_ServerSendInputs, InputPacket) == 0x000000, "Member 'DelMarNetworkInputComponent_ServerSendInputs::InputPacket' has a wrong offset!");

// Function DelMarCore.DelMarPlayerRaceDataComponent.GetNumViewingSpectator
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerRaceDataComponent_GetNumViewingSpectator final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerRaceDataComponent_GetNumViewingSpectator) == 0x000004, "Wrong alignment on DelMarPlayerRaceDataComponent_GetNumViewingSpectator");
static_assert(sizeof(DelMarPlayerRaceDataComponent_GetNumViewingSpectator) == 0x000004, "Wrong size on DelMarPlayerRaceDataComponent_GetNumViewingSpectator");
static_assert(offsetof(DelMarPlayerRaceDataComponent_GetNumViewingSpectator, ReturnValue) == 0x000000, "Member 'DelMarPlayerRaceDataComponent_GetNumViewingSpectator::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarPlayerRaceDataComponent.GetViewingSpectators
// 0x0010 (0x0010 - 0x0000)
struct DelMarPlayerRaceDataComponent_GetViewingSpectators final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerRaceDataComponent_GetViewingSpectators) == 0x000008, "Wrong alignment on DelMarPlayerRaceDataComponent_GetViewingSpectators");
static_assert(sizeof(DelMarPlayerRaceDataComponent_GetViewingSpectators) == 0x000010, "Wrong size on DelMarPlayerRaceDataComponent_GetViewingSpectators");
static_assert(offsetof(DelMarPlayerRaceDataComponent_GetViewingSpectators, ReturnValue) == 0x000000, "Member 'DelMarPlayerRaceDataComponent_GetViewingSpectators::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_CheckpointPassed_ParallelPath
// 0x0010 (0x0010 - 0x0000)
struct DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassed_ParallelPath final
{
public:
	struct FDelMarEvent_CheckpointPassed_ParallelPath CheckpointEvent;                                   // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassed_ParallelPath) == 0x000008, "Wrong alignment on DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassed_ParallelPath");
static_assert(sizeof(DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassed_ParallelPath) == 0x000010, "Wrong size on DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassed_ParallelPath");
static_assert(offsetof(DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassed_ParallelPath, CheckpointEvent) == 0x000000, "Member 'DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassed_ParallelPath::CheckpointEvent' has a wrong offset!");

// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_CheckpointPassedOutOfOrder_ParallelPath
// 0x0008 (0x0008 - 0x0000)
struct DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassedOutOfOrder_ParallelPath final
{
public:
	struct FDelMarEvent_CheckpointPassedOutOfOrder_ParallelPath InCheckpointPassedOutOfOrderEvent;                 // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassedOutOfOrder_ParallelPath) == 0x000008, "Wrong alignment on DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassedOutOfOrder_ParallelPath");
static_assert(sizeof(DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassedOutOfOrder_ParallelPath) == 0x000008, "Wrong size on DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassedOutOfOrder_ParallelPath");
static_assert(offsetof(DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassedOutOfOrder_ParallelPath, InCheckpointPassedOutOfOrderEvent) == 0x000000, "Member 'DelMarPlayerRaceDataComponent_NetMulticast_CheckpointPassedOutOfOrder_ParallelPath::InCheckpointPassedOutOfOrderEvent' has a wrong offset!");

// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_LapCompleted
// 0x0020 (0x0020 - 0x0000)
struct DelMarPlayerRaceDataComponent_NetMulticast_LapCompleted final
{
public:
	struct FDelMarEvent_LapComplete               InLapEvent;                                        // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerRaceDataComponent_NetMulticast_LapCompleted) == 0x000008, "Wrong alignment on DelMarPlayerRaceDataComponent_NetMulticast_LapCompleted");
static_assert(sizeof(DelMarPlayerRaceDataComponent_NetMulticast_LapCompleted) == 0x000020, "Wrong size on DelMarPlayerRaceDataComponent_NetMulticast_LapCompleted");
static_assert(offsetof(DelMarPlayerRaceDataComponent_NetMulticast_LapCompleted, InLapEvent) == 0x000000, "Member 'DelMarPlayerRaceDataComponent_NetMulticast_LapCompleted::InLapEvent' has a wrong offset!");

// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_RaceCompleted
// 0x0010 (0x0010 - 0x0000)
struct DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted final
{
public:
	double                                        RunTime;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidRun;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted) == 0x000008, "Wrong alignment on DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted");
static_assert(sizeof(DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted) == 0x000010, "Wrong size on DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted");
static_assert(offsetof(DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted, RunTime) == 0x000000, "Member 'DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted::RunTime' has a wrong offset!");
static_assert(offsetof(DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted, bValidRun) == 0x000008, "Member 'DelMarPlayerRaceDataComponent_NetMulticast_RaceCompleted::bValidRun' has a wrong offset!");

// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_SectionCompleted_ParallelPath
// 0x0020 (0x0020 - 0x0000)
struct DelMarPlayerRaceDataComponent_NetMulticast_SectionCompleted_ParallelPath final
{
public:
	struct FDelMarEvent_SectionComplete_ParallelPath InSectionEvent;                                    // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerRaceDataComponent_NetMulticast_SectionCompleted_ParallelPath) == 0x000008, "Wrong alignment on DelMarPlayerRaceDataComponent_NetMulticast_SectionCompleted_ParallelPath");
static_assert(sizeof(DelMarPlayerRaceDataComponent_NetMulticast_SectionCompleted_ParallelPath) == 0x000020, "Wrong size on DelMarPlayerRaceDataComponent_NetMulticast_SectionCompleted_ParallelPath");
static_assert(offsetof(DelMarPlayerRaceDataComponent_NetMulticast_SectionCompleted_ParallelPath, InSectionEvent) == 0x000000, "Member 'DelMarPlayerRaceDataComponent_NetMulticast_SectionCompleted_ParallelPath::InSectionEvent' has a wrong offset!");

// Function DelMarCore.DelMarPlayerRaceDataComponent.NetMulticast_TeleportEntered
// 0x0010 (0x0010 - 0x0000)
struct DelMarPlayerRaceDataComponent_NetMulticast_TeleportEntered final
{
public:
	struct FDelMarEvent_TeleportEnteredEvent      InCheckpointTeleportingEvent;                      // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerRaceDataComponent_NetMulticast_TeleportEntered) == 0x000008, "Wrong alignment on DelMarPlayerRaceDataComponent_NetMulticast_TeleportEntered");
static_assert(sizeof(DelMarPlayerRaceDataComponent_NetMulticast_TeleportEntered) == 0x000010, "Wrong size on DelMarPlayerRaceDataComponent_NetMulticast_TeleportEntered");
static_assert(offsetof(DelMarPlayerRaceDataComponent_NetMulticast_TeleportEntered, InCheckpointTeleportingEvent) == 0x000000, "Member 'DelMarPlayerRaceDataComponent_NetMulticast_TeleportEntered::InCheckpointTeleportingEvent' has a wrong offset!");

// Function DelMarCore.DelMarPlayerPreferencesComponent.ServerSetInvertSteerMethod
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayerPreferencesComponent_ServerSetInvertSteerMethod final
{
public:
	EDelMarInvertSteerMethod                      InInvertSteerMethod;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerPreferencesComponent_ServerSetInvertSteerMethod) == 0x000001, "Wrong alignment on DelMarPlayerPreferencesComponent_ServerSetInvertSteerMethod");
static_assert(sizeof(DelMarPlayerPreferencesComponent_ServerSetInvertSteerMethod) == 0x000001, "Wrong size on DelMarPlayerPreferencesComponent_ServerSetInvertSteerMethod");
static_assert(offsetof(DelMarPlayerPreferencesComponent_ServerSetInvertSteerMethod, InInvertSteerMethod) == 0x000000, "Member 'DelMarPlayerPreferencesComponent_ServerSetInvertSteerMethod::InInvertSteerMethod' has a wrong offset!");

// Function DelMarCore.DelMarPlayerPreferencesComponent.ServerUpdateAerialPitchActivation
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayerPreferencesComponent_ServerUpdateAerialPitchActivation final
{
public:
	bool                                          bInAerialPitchActivationEnabled;                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerPreferencesComponent_ServerUpdateAerialPitchActivation) == 0x000001, "Wrong alignment on DelMarPlayerPreferencesComponent_ServerUpdateAerialPitchActivation");
static_assert(sizeof(DelMarPlayerPreferencesComponent_ServerUpdateAerialPitchActivation) == 0x000001, "Wrong size on DelMarPlayerPreferencesComponent_ServerUpdateAerialPitchActivation");
static_assert(offsetof(DelMarPlayerPreferencesComponent_ServerUpdateAerialPitchActivation, bInAerialPitchActivationEnabled) == 0x000000, "Member 'DelMarPlayerPreferencesComponent_ServerUpdateAerialPitchActivation::bInAerialPitchActivationEnabled' has a wrong offset!");

// Function DelMarCore.DelMarPlayerPreferencesComponent.ServerUpdatePitchInverted
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayerPreferencesComponent_ServerUpdatePitchInverted final
{
public:
	bool                                          bInPitchInverted;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerPreferencesComponent_ServerUpdatePitchInverted) == 0x000001, "Wrong alignment on DelMarPlayerPreferencesComponent_ServerUpdatePitchInverted");
static_assert(sizeof(DelMarPlayerPreferencesComponent_ServerUpdatePitchInverted) == 0x000001, "Wrong size on DelMarPlayerPreferencesComponent_ServerUpdatePitchInverted");
static_assert(offsetof(DelMarPlayerPreferencesComponent_ServerUpdatePitchInverted, bInPitchInverted) == 0x000000, "Member 'DelMarPlayerPreferencesComponent_ServerUpdatePitchInverted::bInPitchInverted' has a wrong offset!");

// Function DelMarCore.DelMarPlayerPreferencesComponent.GetTouchControlsLayout
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerPreferencesComponent_GetTouchControlsLayout final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerPreferencesComponent_GetTouchControlsLayout) == 0x000004, "Wrong alignment on DelMarPlayerPreferencesComponent_GetTouchControlsLayout");
static_assert(sizeof(DelMarPlayerPreferencesComponent_GetTouchControlsLayout) == 0x000004, "Wrong size on DelMarPlayerPreferencesComponent_GetTouchControlsLayout");
static_assert(offsetof(DelMarPlayerPreferencesComponent_GetTouchControlsLayout, ReturnValue) == 0x000000, "Member 'DelMarPlayerPreferencesComponent_GetTouchControlsLayout::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarPlayerPreferencesComponent.GetUseIconOnlyPlayerNameplates
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayerPreferencesComponent_GetUseIconOnlyPlayerNameplates final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerPreferencesComponent_GetUseIconOnlyPlayerNameplates) == 0x000001, "Wrong alignment on DelMarPlayerPreferencesComponent_GetUseIconOnlyPlayerNameplates");
static_assert(sizeof(DelMarPlayerPreferencesComponent_GetUseIconOnlyPlayerNameplates) == 0x000001, "Wrong size on DelMarPlayerPreferencesComponent_GetUseIconOnlyPlayerNameplates");
static_assert(offsetof(DelMarPlayerPreferencesComponent_GetUseIconOnlyPlayerNameplates, ReturnValue) == 0x000000, "Member 'DelMarPlayerPreferencesComponent_GetUseIconOnlyPlayerNameplates::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarPlayerPreferencesComponent.GetUseToggleOnExpandableHudWidget
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayerPreferencesComponent_GetUseToggleOnExpandableHudWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerPreferencesComponent_GetUseToggleOnExpandableHudWidget) == 0x000001, "Wrong alignment on DelMarPlayerPreferencesComponent_GetUseToggleOnExpandableHudWidget");
static_assert(sizeof(DelMarPlayerPreferencesComponent_GetUseToggleOnExpandableHudWidget) == 0x000001, "Wrong size on DelMarPlayerPreferencesComponent_GetUseToggleOnExpandableHudWidget");
static_assert(offsetof(DelMarPlayerPreferencesComponent_GetUseToggleOnExpandableHudWidget, ReturnValue) == 0x000000, "Member 'DelMarPlayerPreferencesComponent_GetUseToggleOnExpandableHudWidget::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarPlayerTurboManagerComponent.ModifyTurboCharges
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerTurboManagerComponent_ModifyTurboCharges final
{
public:
	float                                         TurboChargeAmount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerTurboManagerComponent_ModifyTurboCharges) == 0x000004, "Wrong alignment on DelMarPlayerTurboManagerComponent_ModifyTurboCharges");
static_assert(sizeof(DelMarPlayerTurboManagerComponent_ModifyTurboCharges) == 0x000004, "Wrong size on DelMarPlayerTurboManagerComponent_ModifyTurboCharges");
static_assert(offsetof(DelMarPlayerTurboManagerComponent_ModifyTurboCharges, TurboChargeAmount) == 0x000000, "Member 'DelMarPlayerTurboManagerComponent_ModifyTurboCharges::TurboChargeAmount' has a wrong offset!");

// Function DelMarCore.DelMarPlayerTurboManagerComponent.ModifyTurboCharges_Delayed
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerTurboManagerComponent_ModifyTurboCharges_Delayed final
{
public:
	float                                         TurboChargeAmount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerTurboManagerComponent_ModifyTurboCharges_Delayed) == 0x000004, "Wrong alignment on DelMarPlayerTurboManagerComponent_ModifyTurboCharges_Delayed");
static_assert(sizeof(DelMarPlayerTurboManagerComponent_ModifyTurboCharges_Delayed) == 0x000004, "Wrong size on DelMarPlayerTurboManagerComponent_ModifyTurboCharges_Delayed");
static_assert(offsetof(DelMarPlayerTurboManagerComponent_ModifyTurboCharges_Delayed, TurboChargeAmount) == 0x000000, "Member 'DelMarPlayerTurboManagerComponent_ModifyTurboCharges_Delayed::TurboChargeAmount' has a wrong offset!");

// Function DelMarCore.DelMarPlayerTurboManagerComponent.SetTurboCharges
// 0x0004 (0x0004 - 0x0000)
struct DelMarPlayerTurboManagerComponent_SetTurboCharges final
{
public:
	float                                         TurboChargeAmount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayerTurboManagerComponent_SetTurboCharges) == 0x000004, "Wrong alignment on DelMarPlayerTurboManagerComponent_SetTurboCharges");
static_assert(sizeof(DelMarPlayerTurboManagerComponent_SetTurboCharges) == 0x000004, "Wrong size on DelMarPlayerTurboManagerComponent_SetTurboCharges");
static_assert(offsetof(DelMarPlayerTurboManagerComponent_SetTurboCharges, TurboChargeAmount) == 0x000000, "Member 'DelMarPlayerTurboManagerComponent_SetTurboCharges::TurboChargeAmount' has a wrong offset!");

// Function DelMarCore.DelMarRequestComponent.ServerReadyUp
// 0x0001 (0x0001 - 0x0000)
struct DelMarRequestComponent_ServerReadyUp final
{
public:
	bool                                          bInReadyUp;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRequestComponent_ServerReadyUp) == 0x000001, "Wrong alignment on DelMarRequestComponent_ServerReadyUp");
static_assert(sizeof(DelMarRequestComponent_ServerReadyUp) == 0x000001, "Wrong size on DelMarRequestComponent_ServerReadyUp");
static_assert(offsetof(DelMarRequestComponent_ServerReadyUp, bInReadyUp) == 0x000000, "Member 'DelMarRequestComponent_ServerReadyUp::bInReadyUp' has a wrong offset!");

// Function DelMarCore.DelMarRequestComponent.ServerRequestMap
// 0x0020 (0x0020 - 0x0000)
struct DelMarRequestComponent_ServerRequestMap final
{
public:
	struct FGameplayTagContainer                  InMapChoice;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRequestComponent_ServerRequestMap) == 0x000008, "Wrong alignment on DelMarRequestComponent_ServerRequestMap");
static_assert(sizeof(DelMarRequestComponent_ServerRequestMap) == 0x000020, "Wrong size on DelMarRequestComponent_ServerRequestMap");
static_assert(offsetof(DelMarRequestComponent_ServerRequestMap, InMapChoice) == 0x000000, "Member 'DelMarRequestComponent_ServerRequestMap::InMapChoice' has a wrong offset!");

// Function DelMarCore.DelMarRequestComponent.ServerRequestMapFromGameplay
// 0x0020 (0x0020 - 0x0000)
struct DelMarRequestComponent_ServerRequestMapFromGameplay final
{
public:
	struct FGameplayTagContainer                  InMapChoice;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRequestComponent_ServerRequestMapFromGameplay) == 0x000008, "Wrong alignment on DelMarRequestComponent_ServerRequestMapFromGameplay");
static_assert(sizeof(DelMarRequestComponent_ServerRequestMapFromGameplay) == 0x000020, "Wrong size on DelMarRequestComponent_ServerRequestMapFromGameplay");
static_assert(offsetof(DelMarRequestComponent_ServerRequestMapFromGameplay, InMapChoice) == 0x000000, "Member 'DelMarRequestComponent_ServerRequestMapFromGameplay::InMapChoice' has a wrong offset!");

// Function DelMarCore.DelMarRequestComponent.ServerSetJoinNextRace
// 0x0001 (0x0001 - 0x0000)
struct DelMarRequestComponent_ServerSetJoinNextRace final
{
public:
	bool                                          bInReadyToJoinRace;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRequestComponent_ServerSetJoinNextRace) == 0x000001, "Wrong alignment on DelMarRequestComponent_ServerSetJoinNextRace");
static_assert(sizeof(DelMarRequestComponent_ServerSetJoinNextRace) == 0x000001, "Wrong size on DelMarRequestComponent_ServerSetJoinNextRace");
static_assert(offsetof(DelMarRequestComponent_ServerSetJoinNextRace, bInReadyToJoinRace) == 0x000000, "Member 'DelMarRequestComponent_ServerSetJoinNextRace::bInReadyToJoinRace' has a wrong offset!");

// Function DelMarCore.DelMarRequestComponent.ServerSetPostRaceVote
// 0x0001 (0x0001 - 0x0000)
struct DelMarRequestComponent_ServerSetPostRaceVote final
{
public:
	EDelMarPostRaceVote                           NewVote;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRequestComponent_ServerSetPostRaceVote) == 0x000001, "Wrong alignment on DelMarRequestComponent_ServerSetPostRaceVote");
static_assert(sizeof(DelMarRequestComponent_ServerSetPostRaceVote) == 0x000001, "Wrong size on DelMarRequestComponent_ServerSetPostRaceVote");
static_assert(offsetof(DelMarRequestComponent_ServerSetPostRaceVote, NewVote) == 0x000000, "Member 'DelMarRequestComponent_ServerSetPostRaceVote::NewVote' has a wrong offset!");

// Function DelMarCore.DelMarRunRecordPlayerComponent.PrintRecords
// 0x0030 (0x0030 - 0x0000)
struct DelMarRunRecordPlayerComponent_PrintRecords final
{
public:
	struct FDelMarRunRecord                       RunRecord;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRunRecordPlayerComponent_PrintRecords) == 0x000008, "Wrong alignment on DelMarRunRecordPlayerComponent_PrintRecords");
static_assert(sizeof(DelMarRunRecordPlayerComponent_PrintRecords) == 0x000030, "Wrong size on DelMarRunRecordPlayerComponent_PrintRecords");
static_assert(offsetof(DelMarRunRecordPlayerComponent_PrintRecords, RunRecord) == 0x000000, "Member 'DelMarRunRecordPlayerComponent_PrintRecords::RunRecord' has a wrong offset!");
static_assert(offsetof(DelMarRunRecordPlayerComponent_PrintRecords, Name_0) == 0x000020, "Member 'DelMarRunRecordPlayerComponent_PrintRecords::Name_0' has a wrong offset!");

// Function DelMarCore.DelMarRunRecordPlayerComponent.NetMulticast_LapRecorded
// 0x0030 (0x0030 - 0x0000)
struct DelMarRunRecordPlayerComponent_NetMulticast_LapRecorded final
{
public:
	struct FDelMarEvent_LapRecorded               InLapRecordedEvent;                                // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRunRecordPlayerComponent_NetMulticast_LapRecorded) == 0x000008, "Wrong alignment on DelMarRunRecordPlayerComponent_NetMulticast_LapRecorded");
static_assert(sizeof(DelMarRunRecordPlayerComponent_NetMulticast_LapRecorded) == 0x000030, "Wrong size on DelMarRunRecordPlayerComponent_NetMulticast_LapRecorded");
static_assert(offsetof(DelMarRunRecordPlayerComponent_NetMulticast_LapRecorded, InLapRecordedEvent) == 0x000000, "Member 'DelMarRunRecordPlayerComponent_NetMulticast_LapRecorded::InLapRecordedEvent' has a wrong offset!");

// Function DelMarCore.DelMarRunRecordPlayerComponent.NetMulticast_RunRecorded
// 0x0050 (0x0050 - 0x0000)
struct DelMarRunRecordPlayerComponent_NetMulticast_RunRecorded final
{
public:
	struct FDelMarEvent_RunRecorded               InRunRecordedEvent;                                // 0x0000(0x0050)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRunRecordPlayerComponent_NetMulticast_RunRecorded) == 0x000008, "Wrong alignment on DelMarRunRecordPlayerComponent_NetMulticast_RunRecorded");
static_assert(sizeof(DelMarRunRecordPlayerComponent_NetMulticast_RunRecorded) == 0x000050, "Wrong size on DelMarRunRecordPlayerComponent_NetMulticast_RunRecorded");
static_assert(offsetof(DelMarRunRecordPlayerComponent_NetMulticast_RunRecorded, InRunRecordedEvent) == 0x000000, "Member 'DelMarRunRecordPlayerComponent_NetMulticast_RunRecorded::InRunRecordedEvent' has a wrong offset!");

// Function DelMarCore.DelMarRunRecordPlayerComponent.NetMulticast_SectionRecorded
// 0x0050 (0x0050 - 0x0000)
struct DelMarRunRecordPlayerComponent_NetMulticast_SectionRecorded final
{
public:
	struct FDelMarEvent_SectionRecorded           InSectionRecordedEvent;                            // 0x0000(0x0050)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRunRecordPlayerComponent_NetMulticast_SectionRecorded) == 0x000008, "Wrong alignment on DelMarRunRecordPlayerComponent_NetMulticast_SectionRecorded");
static_assert(sizeof(DelMarRunRecordPlayerComponent_NetMulticast_SectionRecorded) == 0x000050, "Wrong size on DelMarRunRecordPlayerComponent_NetMulticast_SectionRecorded");
static_assert(offsetof(DelMarRunRecordPlayerComponent_NetMulticast_SectionRecorded, InSectionRecordedEvent) == 0x000000, "Member 'DelMarRunRecordPlayerComponent_NetMulticast_SectionRecorded::InSectionRecordedEvent' has a wrong offset!");

// Function DelMarCore.DelMarTutorialRequestComponent.Server_RequestSection
// 0x0004 (0x0004 - 0x0000)
struct DelMarTutorialRequestComponent_Server_RequestSection final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialRequestComponent_Server_RequestSection) == 0x000004, "Wrong alignment on DelMarTutorialRequestComponent_Server_RequestSection");
static_assert(sizeof(DelMarTutorialRequestComponent_Server_RequestSection) == 0x000004, "Wrong size on DelMarTutorialRequestComponent_Server_RequestSection");
static_assert(offsetof(DelMarTutorialRequestComponent_Server_RequestSection, SectionIndex) == 0x000000, "Member 'DelMarTutorialRequestComponent_Server_RequestSection::SectionIndex' has a wrong offset!");

// Function DelMarCore.DelMarTutorialRequestComponent.Server_RequestStartRace
// 0x0001 (0x0001 - 0x0000)
struct DelMarTutorialRequestComponent_Server_RequestStartRace final
{
public:
	bool                                          bSkipCountdown;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTutorialRequestComponent_Server_RequestStartRace) == 0x000001, "Wrong alignment on DelMarTutorialRequestComponent_Server_RequestStartRace");
static_assert(sizeof(DelMarTutorialRequestComponent_Server_RequestStartRace) == 0x000001, "Wrong size on DelMarTutorialRequestComponent_Server_RequestStartRace");
static_assert(offsetof(DelMarTutorialRequestComponent_Server_RequestStartRace, bSkipCountdown) == 0x000000, "Member 'DelMarTutorialRequestComponent_Server_RequestStartRace::bSkipCountdown' has a wrong offset!");

// Function DelMarCore.DelMarLevelManagerComponent.RequestLevelLoad
// 0x0020 (0x0020 - 0x0000)
struct DelMarLevelManagerComponent_RequestLevelLoad final
{
public:
	struct FGameplayTagContainer                  DesiredMap;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarLevelManagerComponent_RequestLevelLoad) == 0x000008, "Wrong alignment on DelMarLevelManagerComponent_RequestLevelLoad");
static_assert(sizeof(DelMarLevelManagerComponent_RequestLevelLoad) == 0x000020, "Wrong size on DelMarLevelManagerComponent_RequestLevelLoad");
static_assert(offsetof(DelMarLevelManagerComponent_RequestLevelLoad, DesiredMap) == 0x000000, "Member 'DelMarLevelManagerComponent_RequestLevelLoad::DesiredMap' has a wrong offset!");

// Function DelMarCore.DelMarLevelManagerComponent.ServerRequestLevel
// 0x0020 (0x0020 - 0x0000)
struct DelMarLevelManagerComponent_ServerRequestLevel final
{
public:
	struct FGameplayTagContainer                  DesiredMap;                                        // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarLevelManagerComponent_ServerRequestLevel) == 0x000008, "Wrong alignment on DelMarLevelManagerComponent_ServerRequestLevel");
static_assert(sizeof(DelMarLevelManagerComponent_ServerRequestLevel) == 0x000020, "Wrong size on DelMarLevelManagerComponent_ServerRequestLevel");
static_assert(offsetof(DelMarLevelManagerComponent_ServerRequestLevel, DesiredMap) == 0x000000, "Member 'DelMarLevelManagerComponent_ServerRequestLevel::DesiredMap' has a wrong offset!");

// Function DelMarCore.DelMarPlayspace.ServerRequestLoadingLevel
// 0x0020 (0x0020 - 0x0000)
struct DelMarPlayspace_ServerRequestLoadingLevel final
{
public:
	struct FGameplayTagContainer                  DesiredMap;                                        // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayspace_ServerRequestLoadingLevel) == 0x000008, "Wrong alignment on DelMarPlayspace_ServerRequestLoadingLevel");
static_assert(sizeof(DelMarPlayspace_ServerRequestLoadingLevel) == 0x000020, "Wrong size on DelMarPlayspace_ServerRequestLoadingLevel");
static_assert(offsetof(DelMarPlayspace_ServerRequestLoadingLevel, DesiredMap) == 0x000000, "Member 'DelMarPlayspace_ServerRequestLoadingLevel::DesiredMap' has a wrong offset!");

// Function DelMarCore.DelMarPlayspace.ServerRequestLoadingLevelWithLinkCode
// 0x0018 (0x0018 - 0x0000)
struct DelMarPlayspace_ServerRequestLoadingLevelWithLinkCode final
{
public:
	struct FOnlineLinkId                          DesiredMap;                                        // 0x0000(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayspace_ServerRequestLoadingLevelWithLinkCode) == 0x000008, "Wrong alignment on DelMarPlayspace_ServerRequestLoadingLevelWithLinkCode");
static_assert(sizeof(DelMarPlayspace_ServerRequestLoadingLevelWithLinkCode) == 0x000018, "Wrong size on DelMarPlayspace_ServerRequestLoadingLevelWithLinkCode");
static_assert(offsetof(DelMarPlayspace_ServerRequestLoadingLevelWithLinkCode, DesiredMap) == 0x000000, "Member 'DelMarPlayspace_ServerRequestLoadingLevelWithLinkCode::DesiredMap' has a wrong offset!");

// Function DelMarCore.DelMarPlayspace.ServerReturnToSetup
// 0x0020 (0x0020 - 0x0000)
struct DelMarPlayspace_ServerReturnToSetup final
{
public:
	struct FGameplayTagContainer                  OptionalMapToForceLoad;                            // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayspace_ServerReturnToSetup) == 0x000008, "Wrong alignment on DelMarPlayspace_ServerReturnToSetup");
static_assert(sizeof(DelMarPlayspace_ServerReturnToSetup) == 0x000020, "Wrong size on DelMarPlayspace_ServerReturnToSetup");
static_assert(offsetof(DelMarPlayspace_ServerReturnToSetup, OptionalMapToForceLoad) == 0x000000, "Member 'DelMarPlayspace_ServerReturnToSetup::OptionalMapToForceLoad' has a wrong offset!");

// Function DelMarCore.DelMarPlayspace.ServerReturnToSetupWithLinkCode
// 0x0018 (0x0018 - 0x0000)
struct DelMarPlayspace_ServerReturnToSetupWithLinkCode final
{
public:
	struct FOnlineLinkId                          OptionalMapToForceLoad;                            // 0x0000(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayspace_ServerReturnToSetupWithLinkCode) == 0x000008, "Wrong alignment on DelMarPlayspace_ServerReturnToSetupWithLinkCode");
static_assert(sizeof(DelMarPlayspace_ServerReturnToSetupWithLinkCode) == 0x000018, "Wrong size on DelMarPlayspace_ServerReturnToSetupWithLinkCode");
static_assert(offsetof(DelMarPlayspace_ServerReturnToSetupWithLinkCode, OptionalMapToForceLoad) == 0x000000, "Member 'DelMarPlayspace_ServerReturnToSetupWithLinkCode::OptionalMapToForceLoad' has a wrong offset!");

// Function DelMarCore.DelMarPlayspace.SetLoadingScreenVisibiliy
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayspace_SetLoadingScreenVisibiliy final
{
public:
	bool                                          bInShouldShowLoadingScreen;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayspace_SetLoadingScreenVisibiliy) == 0x000001, "Wrong alignment on DelMarPlayspace_SetLoadingScreenVisibiliy");
static_assert(sizeof(DelMarPlayspace_SetLoadingScreenVisibiliy) == 0x000001, "Wrong size on DelMarPlayspace_SetLoadingScreenVisibiliy");
static_assert(offsetof(DelMarPlayspace_SetLoadingScreenVisibiliy, bInShouldShowLoadingScreen) == 0x000000, "Member 'DelMarPlayspace_SetLoadingScreenVisibiliy::bInShouldShowLoadingScreen' has a wrong offset!");

// Function DelMarCore.DelMarPlayspace.ShouldShowLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct DelMarPlayspace_ShouldShowLoadingScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPlayspace_ShouldShowLoadingScreen) == 0x000001, "Wrong alignment on DelMarPlayspace_ShouldShowLoadingScreen");
static_assert(sizeof(DelMarPlayspace_ShouldShowLoadingScreen) == 0x000001, "Wrong size on DelMarPlayspace_ShouldShowLoadingScreen");
static_assert(offsetof(DelMarPlayspace_ShouldShowLoadingScreen, ReturnValue) == 0x000000, "Member 'DelMarPlayspace_ShouldShowLoadingScreen::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarPreRaceControllerComponent.ServerSetViewTarget
// 0x0008 (0x0008 - 0x0000)
struct DelMarPreRaceControllerComponent_ServerSetViewTarget final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarPreRaceControllerComponent_ServerSetViewTarget) == 0x000008, "Wrong alignment on DelMarPreRaceControllerComponent_ServerSetViewTarget");
static_assert(sizeof(DelMarPreRaceControllerComponent_ServerSetViewTarget) == 0x000008, "Wrong size on DelMarPreRaceControllerComponent_ServerSetViewTarget");
static_assert(offsetof(DelMarPreRaceControllerComponent_ServerSetViewTarget, PlayerState) == 0x000000, "Member 'DelMarPreRaceControllerComponent_ServerSetViewTarget::PlayerState' has a wrong offset!");

// Function DelMarCore.DelMarCheckpointManagerComponent.HandleRaceFinished
// 0x0008 (0x0008 - 0x0000)
struct DelMarCheckpointManagerComponent_HandleRaceFinished final
{
public:
	struct FDelMarEvent_RaceFinished              Event;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpointManagerComponent_HandleRaceFinished) == 0x000008, "Wrong alignment on DelMarCheckpointManagerComponent_HandleRaceFinished");
static_assert(sizeof(DelMarCheckpointManagerComponent_HandleRaceFinished) == 0x000008, "Wrong size on DelMarCheckpointManagerComponent_HandleRaceFinished");
static_assert(offsetof(DelMarCheckpointManagerComponent_HandleRaceFinished, Event) == 0x000000, "Member 'DelMarCheckpointManagerComponent_HandleRaceFinished::Event' has a wrong offset!");

// Function DelMarCore.DelMarCheckpointManagerComponent.HandleResetRace
// 0x0001 (0x0001 - 0x0000)
struct DelMarCheckpointManagerComponent_HandleResetRace final
{
public:
	struct FDelMarEvent_ResetRace                 Event;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCheckpointManagerComponent_HandleResetRace) == 0x000001, "Wrong alignment on DelMarCheckpointManagerComponent_HandleResetRace");
static_assert(sizeof(DelMarCheckpointManagerComponent_HandleResetRace) == 0x000001, "Wrong size on DelMarCheckpointManagerComponent_HandleResetRace");
static_assert(offsetof(DelMarCheckpointManagerComponent_HandleResetRace, Event) == 0x000000, "Member 'DelMarCheckpointManagerComponent_HandleResetRace::Event' has a wrong offset!");

// Function DelMarCore.DelMarDeathRaceManager.GetPointsAwardForPlacement
// 0x0008 (0x0008 - 0x0000)
struct DelMarDeathRaceManager_GetPointsAwardForPlacement final
{
public:
	int32                                         InPlacement;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDeathRaceManager_GetPointsAwardForPlacement) == 0x000004, "Wrong alignment on DelMarDeathRaceManager_GetPointsAwardForPlacement");
static_assert(sizeof(DelMarDeathRaceManager_GetPointsAwardForPlacement) == 0x000008, "Wrong size on DelMarDeathRaceManager_GetPointsAwardForPlacement");
static_assert(offsetof(DelMarDeathRaceManager_GetPointsAwardForPlacement, InPlacement) == 0x000000, "Member 'DelMarDeathRaceManager_GetPointsAwardForPlacement::InPlacement' has a wrong offset!");
static_assert(offsetof(DelMarDeathRaceManager_GetPointsAwardForPlacement, ReturnValue) == 0x000004, "Member 'DelMarDeathRaceManager_GetPointsAwardForPlacement::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarDeathRaceManager.GetScoreThresholdToEndMatch
// 0x0004 (0x0004 - 0x0000)
struct DelMarDeathRaceManager_GetScoreThresholdToEndMatch final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarDeathRaceManager_GetScoreThresholdToEndMatch) == 0x000004, "Wrong alignment on DelMarDeathRaceManager_GetScoreThresholdToEndMatch");
static_assert(sizeof(DelMarDeathRaceManager_GetScoreThresholdToEndMatch) == 0x000004, "Wrong size on DelMarDeathRaceManager_GetScoreThresholdToEndMatch");
static_assert(offsetof(DelMarDeathRaceManager_GetScoreThresholdToEndMatch, ReturnValue) == 0x000000, "Member 'DelMarDeathRaceManager_GetScoreThresholdToEndMatch::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRaceConfigComponent.OnRep_VehicleAbilityConfig
// 0x0011 (0x0011 - 0x0000)
struct DelMarRaceConfigComponent_OnRep_VehicleAbilityConfig final
{
public:
	struct FDelMarVehicleAbilityConfig            OldConfig;                                         // 0x0000(0x0011)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRaceConfigComponent_OnRep_VehicleAbilityConfig) == 0x000001, "Wrong alignment on DelMarRaceConfigComponent_OnRep_VehicleAbilityConfig");
static_assert(sizeof(DelMarRaceConfigComponent_OnRep_VehicleAbilityConfig) == 0x000011, "Wrong size on DelMarRaceConfigComponent_OnRep_VehicleAbilityConfig");
static_assert(offsetof(DelMarRaceConfigComponent_OnRep_VehicleAbilityConfig, OldConfig) == 0x000000, "Member 'DelMarRaceConfigComponent_OnRep_VehicleAbilityConfig::OldConfig' has a wrong offset!");

// Function DelMarCore.DelMarRespawnManagerComponent.RequestRespawnPawnAndVehicle
// 0x0010 (0x0010 - 0x0000)
struct DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADelMarVehicle*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle) == 0x000008, "Wrong alignment on DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle");
static_assert(sizeof(DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle) == 0x000010, "Wrong size on DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle");
static_assert(offsetof(DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle, InController) == 0x000000, "Member 'DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle::InController' has a wrong offset!");
static_assert(offsetof(DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle, ReturnValue) == 0x000008, "Member 'DelMarRespawnManagerComponent_RequestRespawnPawnAndVehicle::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarRespawnManagerComponent.RequestRespawnVehicleForPawn
// 0x0010 (0x0010 - 0x0000)
struct DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn final
{
public:
	class AFortPlayerPawn*                        InPlayerPawn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADelMarVehicle*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn) == 0x000008, "Wrong alignment on DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn");
static_assert(sizeof(DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn) == 0x000010, "Wrong size on DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn");
static_assert(offsetof(DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn, InPlayerPawn) == 0x000000, "Member 'DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn::InPlayerPawn' has a wrong offset!");
static_assert(offsetof(DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn, ReturnValue) == 0x000008, "Member 'DelMarRespawnManagerComponent_RequestRespawnVehicleForPawn::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarCameraShakeComponent.OnCameraShakeIntensitySettingsChanged
// 0x0008 (0x0008 - 0x0000)
struct DelMarCameraShakeComponent_OnCameraShakeIntensitySettingsChanged final
{
public:
	class UFortClientSettingsRecord*              Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCameraShakeComponent_OnCameraShakeIntensitySettingsChanged) == 0x000008, "Wrong alignment on DelMarCameraShakeComponent_OnCameraShakeIntensitySettingsChanged");
static_assert(sizeof(DelMarCameraShakeComponent_OnCameraShakeIntensitySettingsChanged) == 0x000008, "Wrong size on DelMarCameraShakeComponent_OnCameraShakeIntensitySettingsChanged");
static_assert(offsetof(DelMarCameraShakeComponent_OnCameraShakeIntensitySettingsChanged, Settings) == 0x000000, "Member 'DelMarCameraShakeComponent_OnCameraShakeIntensitySettingsChanged::Settings' has a wrong offset!");

// Function DelMarCore.DelMarCameraShakeComponent.OnVehicleHitVehicle
// 0x0020 (0x0020 - 0x0000)
struct DelMarCameraShakeComponent_OnVehicleHitVehicle final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarCameraShakeComponent_OnVehicleHitVehicle) == 0x000008, "Wrong alignment on DelMarCameraShakeComponent_OnVehicleHitVehicle");
static_assert(sizeof(DelMarCameraShakeComponent_OnVehicleHitVehicle) == 0x000020, "Wrong size on DelMarCameraShakeComponent_OnVehicleHitVehicle");
static_assert(offsetof(DelMarCameraShakeComponent_OnVehicleHitVehicle, Magnitude) == 0x000000, "Member 'DelMarCameraShakeComponent_OnVehicleHitVehicle::Magnitude' has a wrong offset!");
static_assert(offsetof(DelMarCameraShakeComponent_OnVehicleHitVehicle, WorldLocation) == 0x000008, "Member 'DelMarCameraShakeComponent_OnVehicleHitVehicle::WorldLocation' has a wrong offset!");

// Function DelMarCore.DelMarCameraShakeComponent.OnVehicleHitWall
// 0x0028 (0x0028 - 0x0000)
struct DelMarCameraShakeComponent_OnVehicleHitWall final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardRotationDegrees;                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCameraShakeComponent_OnVehicleHitWall) == 0x000008, "Wrong alignment on DelMarCameraShakeComponent_OnVehicleHitWall");
static_assert(sizeof(DelMarCameraShakeComponent_OnVehicleHitWall) == 0x000028, "Wrong size on DelMarCameraShakeComponent_OnVehicleHitWall");
static_assert(offsetof(DelMarCameraShakeComponent_OnVehicleHitWall, Magnitude) == 0x000000, "Member 'DelMarCameraShakeComponent_OnVehicleHitWall::Magnitude' has a wrong offset!");
static_assert(offsetof(DelMarCameraShakeComponent_OnVehicleHitWall, WorldLocation) == 0x000008, "Member 'DelMarCameraShakeComponent_OnVehicleHitWall::WorldLocation' has a wrong offset!");
static_assert(offsetof(DelMarCameraShakeComponent_OnVehicleHitWall, ForwardRotationDegrees) == 0x000020, "Member 'DelMarCameraShakeComponent_OnVehicleHitWall::ForwardRotationDegrees' has a wrong offset!");

// Function DelMarCore.DelMarCameraShakeComponent.OnVehicleLanded
// 0x0008 (0x0008 - 0x0000)
struct DelMarCameraShakeComponent_OnVehicleLanded final
{
public:
	float                                         LandingForce;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandedKickflip;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarCameraShakeComponent_OnVehicleLanded) == 0x000004, "Wrong alignment on DelMarCameraShakeComponent_OnVehicleLanded");
static_assert(sizeof(DelMarCameraShakeComponent_OnVehicleLanded) == 0x000008, "Wrong size on DelMarCameraShakeComponent_OnVehicleLanded");
static_assert(offsetof(DelMarCameraShakeComponent_OnVehicleLanded, LandingForce) == 0x000000, "Member 'DelMarCameraShakeComponent_OnVehicleLanded::LandingForce' has a wrong offset!");
static_assert(offsetof(DelMarCameraShakeComponent_OnVehicleLanded, bLandedKickflip) == 0x000004, "Member 'DelMarCameraShakeComponent_OnVehicleLanded::bLandedKickflip' has a wrong offset!");

// Function DelMarCore.DelMarVehicleCosmeticComponent.GetCosmeticActor
// 0x0018 (0x0018 - 0x0000)
struct DelMarVehicleCosmeticComponent_GetCosmeticActor final
{
public:
	TSubclassOf<class ADelMarCosmeticActor>       CosmeticClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookForChildClasses;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADelMarCosmeticActor*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleCosmeticComponent_GetCosmeticActor) == 0x000008, "Wrong alignment on DelMarVehicleCosmeticComponent_GetCosmeticActor");
static_assert(sizeof(DelMarVehicleCosmeticComponent_GetCosmeticActor) == 0x000018, "Wrong size on DelMarVehicleCosmeticComponent_GetCosmeticActor");
static_assert(offsetof(DelMarVehicleCosmeticComponent_GetCosmeticActor, CosmeticClass) == 0x000000, "Member 'DelMarVehicleCosmeticComponent_GetCosmeticActor::CosmeticClass' has a wrong offset!");
static_assert(offsetof(DelMarVehicleCosmeticComponent_GetCosmeticActor, bLookForChildClasses) == 0x000008, "Member 'DelMarVehicleCosmeticComponent_GetCosmeticActor::bLookForChildClasses' has a wrong offset!");
static_assert(offsetof(DelMarVehicleCosmeticComponent_GetCosmeticActor, ReturnValue) == 0x000010, "Member 'DelMarVehicleCosmeticComponent_GetCosmeticActor::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleCosmeticComponent.GetCosmeticActors
// 0x0020 (0x0020 - 0x0000)
struct DelMarVehicleCosmeticComponent_GetCosmeticActors final
{
public:
	TSubclassOf<class ADelMarCosmeticActor>       CosmeticClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookForChildClasses;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADelMarCosmeticActor*>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleCosmeticComponent_GetCosmeticActors) == 0x000008, "Wrong alignment on DelMarVehicleCosmeticComponent_GetCosmeticActors");
static_assert(sizeof(DelMarVehicleCosmeticComponent_GetCosmeticActors) == 0x000020, "Wrong size on DelMarVehicleCosmeticComponent_GetCosmeticActors");
static_assert(offsetof(DelMarVehicleCosmeticComponent_GetCosmeticActors, CosmeticClass) == 0x000000, "Member 'DelMarVehicleCosmeticComponent_GetCosmeticActors::CosmeticClass' has a wrong offset!");
static_assert(offsetof(DelMarVehicleCosmeticComponent_GetCosmeticActors, bLookForChildClasses) == 0x000008, "Member 'DelMarVehicleCosmeticComponent_GetCosmeticActors::bLookForChildClasses' has a wrong offset!");
static_assert(offsetof(DelMarVehicleCosmeticComponent_GetCosmeticActors, ReturnValue) == 0x000010, "Member 'DelMarVehicleCosmeticComponent_GetCosmeticActors::ReturnValue' has a wrong offset!");

// Function DelMarCore.DelMarVehicleForceFeedbackComponent.HandleLoadingScreenVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleForceFeedbackComponent_HandleLoadingScreenVisibilityChanged final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleForceFeedbackComponent_HandleLoadingScreenVisibilityChanged) == 0x000001, "Wrong alignment on DelMarVehicleForceFeedbackComponent_HandleLoadingScreenVisibilityChanged");
static_assert(sizeof(DelMarVehicleForceFeedbackComponent_HandleLoadingScreenVisibilityChanged) == 0x000001, "Wrong size on DelMarVehicleForceFeedbackComponent_HandleLoadingScreenVisibilityChanged");
static_assert(offsetof(DelMarVehicleForceFeedbackComponent_HandleLoadingScreenVisibilityChanged, bVisibility) == 0x000000, "Member 'DelMarVehicleForceFeedbackComponent_HandleLoadingScreenVisibilityChanged::bVisibility' has a wrong offset!");

// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnDriftControlChanged
// 0x0001 (0x0001 - 0x0000)
struct DelMarVehicleForceFeedbackComponent_OnDriftControlChanged final
{
public:
	bool                                          bIsDriftControlled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleForceFeedbackComponent_OnDriftControlChanged) == 0x000001, "Wrong alignment on DelMarVehicleForceFeedbackComponent_OnDriftControlChanged");
static_assert(sizeof(DelMarVehicleForceFeedbackComponent_OnDriftControlChanged) == 0x000001, "Wrong size on DelMarVehicleForceFeedbackComponent_OnDriftControlChanged");
static_assert(offsetof(DelMarVehicleForceFeedbackComponent_OnDriftControlChanged, bIsDriftControlled) == 0x000000, "Member 'DelMarVehicleForceFeedbackComponent_OnDriftControlChanged::bIsDriftControlled' has a wrong offset!");

// Function DelMarCore.DelMarVehicleForceFeedbackComponent.OnVehicleLanded
// 0x0008 (0x0008 - 0x0000)
struct DelMarVehicleForceFeedbackComponent_OnVehicleLanded final
{
public:
	float                                         LandingForce;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandedKickflip;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarVehicleForceFeedbackComponent_OnVehicleLanded) == 0x000004, "Wrong alignment on DelMarVehicleForceFeedbackComponent_OnVehicleLanded");
static_assert(sizeof(DelMarVehicleForceFeedbackComponent_OnVehicleLanded) == 0x000008, "Wrong size on DelMarVehicleForceFeedbackComponent_OnVehicleLanded");
static_assert(offsetof(DelMarVehicleForceFeedbackComponent_OnVehicleLanded, LandingForce) == 0x000000, "Member 'DelMarVehicleForceFeedbackComponent_OnVehicleLanded::LandingForce' has a wrong offset!");
static_assert(offsetof(DelMarVehicleForceFeedbackComponent_OnVehicleLanded, bLandedKickflip) == 0x000004, "Member 'DelMarVehicleForceFeedbackComponent_OnVehicleLanded::bLandedKickflip' has a wrong offset!");

// Function DelMarCore.DelMarVehicleMovementSet.OnRep_AccelMultiplier
// 0x0028 (0x0028 - 0x0000)
struct DelMarVehicleMovementSet_OnRep_AccelMultiplier final
{
public:
	struct FFortGameplayAttributeData             OldSpeedMultiplier;                                // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleMovementSet_OnRep_AccelMultiplier) == 0x000008, "Wrong alignment on DelMarVehicleMovementSet_OnRep_AccelMultiplier");
static_assert(sizeof(DelMarVehicleMovementSet_OnRep_AccelMultiplier) == 0x000028, "Wrong size on DelMarVehicleMovementSet_OnRep_AccelMultiplier");
static_assert(offsetof(DelMarVehicleMovementSet_OnRep_AccelMultiplier, OldSpeedMultiplier) == 0x000000, "Member 'DelMarVehicleMovementSet_OnRep_AccelMultiplier::OldSpeedMultiplier' has a wrong offset!");

// Function DelMarCore.DelMarVehicleMovementSet.OnRep_BonusSpeed
// 0x0028 (0x0028 - 0x0000)
struct DelMarVehicleMovementSet_OnRep_BonusSpeed final
{
public:
	struct FFortGameplayAttributeData             OldBonusSpeed;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleMovementSet_OnRep_BonusSpeed) == 0x000008, "Wrong alignment on DelMarVehicleMovementSet_OnRep_BonusSpeed");
static_assert(sizeof(DelMarVehicleMovementSet_OnRep_BonusSpeed) == 0x000028, "Wrong size on DelMarVehicleMovementSet_OnRep_BonusSpeed");
static_assert(offsetof(DelMarVehicleMovementSet_OnRep_BonusSpeed, OldBonusSpeed) == 0x000000, "Member 'DelMarVehicleMovementSet_OnRep_BonusSpeed::OldBonusSpeed' has a wrong offset!");

// Function DelMarCore.DelMarVehicleMovementSet.OnRep_VehicleThrottleDisabled
// 0x0028 (0x0028 - 0x0000)
struct DelMarVehicleMovementSet_OnRep_VehicleThrottleDisabled final
{
public:
	struct FFortGameplayAttributeData             OldInputDisabled;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarVehicleMovementSet_OnRep_VehicleThrottleDisabled) == 0x000008, "Wrong alignment on DelMarVehicleMovementSet_OnRep_VehicleThrottleDisabled");
static_assert(sizeof(DelMarVehicleMovementSet_OnRep_VehicleThrottleDisabled) == 0x000028, "Wrong size on DelMarVehicleMovementSet_OnRep_VehicleThrottleDisabled");
static_assert(offsetof(DelMarVehicleMovementSet_OnRep_VehicleThrottleDisabled, OldInputDisabled) == 0x000000, "Member 'DelMarVehicleMovementSet_OnRep_VehicleThrottleDisabled::OldInputDisabled' has a wrong offset!");

}

