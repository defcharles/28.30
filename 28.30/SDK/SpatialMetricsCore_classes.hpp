#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpatialMetricsCore

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "SpatialMetricsCore_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SpatialMetricsCore.SpatialMetricsActorIndexerSubscriber
// 0x0000 (0x0028 - 0x0028)
class ISpatialMetricsActorIndexerSubscriber final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpatialMetricsActorIndexerSubscriber">();
	}
	static class ISpatialMetricsActorIndexerSubscriber* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISpatialMetricsActorIndexerSubscriber>();
	}
};
static_assert(alignof(ISpatialMetricsActorIndexerSubscriber) == 0x000008, "Wrong alignment on ISpatialMetricsActorIndexerSubscriber");
static_assert(sizeof(ISpatialMetricsActorIndexerSubscriber) == 0x000028, "Wrong size on ISpatialMetricsActorIndexerSubscriber");

// Class SpatialMetricsCore.SpatialMetricsActorTrackerSubscriber
// 0x0000 (0x0028 - 0x0028)
class ISpatialMetricsActorTrackerSubscriber final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpatialMetricsActorTrackerSubscriber">();
	}
	static class ISpatialMetricsActorTrackerSubscriber* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISpatialMetricsActorTrackerSubscriber>();
	}
};
static_assert(alignof(ISpatialMetricsActorTrackerSubscriber) == 0x000008, "Wrong alignment on ISpatialMetricsActorTrackerSubscriber");
static_assert(sizeof(ISpatialMetricsActorTrackerSubscriber) == 0x000028, "Wrong size on ISpatialMetricsActorTrackerSubscriber");

// Class SpatialMetricsCore.SpatialMetricsSubsystemExtension
// 0x0058 (0x0080 - 0x0028)
class USpatialMetricsSubsystemExtension : public UObject
{
public:
	uint8                                         Pad_28[0x58];                                      // 0x0028(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpatialMetricsSubsystemExtension">();
	}
	static class USpatialMetricsSubsystemExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpatialMetricsSubsystemExtension>();
	}
};
static_assert(alignof(USpatialMetricsSubsystemExtension) == 0x000008, "Wrong alignment on USpatialMetricsSubsystemExtension");
static_assert(sizeof(USpatialMetricsSubsystemExtension) == 0x000080, "Wrong size on USpatialMetricsSubsystemExtension");

// Class SpatialMetricsCore.TestExtension
// 0x0018 (0x0098 - 0x0080)
class UTestExtension final : public USpatialMetricsSubsystemExtension
{
public:
	uint8                                         Pad_80[0x18];                                      // 0x0080(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestExtension">();
	}
	static class UTestExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestExtension>();
	}
};
static_assert(alignof(UTestExtension) == 0x000008, "Wrong alignment on UTestExtension");
static_assert(sizeof(UTestExtension) == 0x000098, "Wrong size on UTestExtension");

// Class SpatialMetricsCore.SpatialMetricInterface
// 0x0030 (0x0058 - 0x0028)
class USpatialMetricInterface : public UObject
{
public:
	struct FSpatialMetricProperties               Properties;                                        // 0x0028(0x0030)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpatialMetricInterface">();
	}
	static class USpatialMetricInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpatialMetricInterface>();
	}
};
static_assert(alignof(USpatialMetricInterface) == 0x000008, "Wrong alignment on USpatialMetricInterface");
static_assert(sizeof(USpatialMetricInterface) == 0x000058, "Wrong size on USpatialMetricInterface");
static_assert(offsetof(USpatialMetricInterface, Properties) == 0x000028, "Member 'USpatialMetricInterface::Properties' has a wrong offset!");

// Class SpatialMetricsCore.SpatialMetricBase
// 0x0058 (0x00B0 - 0x0058)
class USpatialMetricBase : public USpatialMetricInterface
{
public:
	uint8                                         Pad_58[0x58];                                      // 0x0058(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpatialMetricBase">();
	}
	static class USpatialMetricBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpatialMetricBase>();
	}
};
static_assert(alignof(USpatialMetricBase) == 0x000008, "Wrong alignment on USpatialMetricBase");
static_assert(sizeof(USpatialMetricBase) == 0x0000B0, "Wrong size on USpatialMetricBase");

// Class SpatialMetricsCore.SpatialMetricsActorIndexer
// 0x0138 (0x01B8 - 0x0080)
class USpatialMetricsActorIndexer final : public USpatialMetricsSubsystemExtension
{
public:
	uint8                                         Pad_80[0x134];                                     // 0x0080(0x0134)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexCacheSize;                                    // 0x01B4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpatialMetricsActorIndexer">();
	}
	static class USpatialMetricsActorIndexer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpatialMetricsActorIndexer>();
	}
};
static_assert(alignof(USpatialMetricsActorIndexer) == 0x000008, "Wrong alignment on USpatialMetricsActorIndexer");
static_assert(sizeof(USpatialMetricsActorIndexer) == 0x0001B8, "Wrong size on USpatialMetricsActorIndexer");
static_assert(offsetof(USpatialMetricsActorIndexer, IndexCacheSize) == 0x0001B4, "Member 'USpatialMetricsActorIndexer::IndexCacheSize' has a wrong offset!");

// Class SpatialMetricsCore.SpatialMetricsActorTracker
// 0x0070 (0x00F0 - 0x0080)
class USpatialMetricsActorTracker final : public USpatialMetricsSubsystemExtension
{
public:
	uint8                                         Pad_80[0x70];                                      // 0x0080(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpatialMetricsActorTracker">();
	}
	static class USpatialMetricsActorTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpatialMetricsActorTracker>();
	}
};
static_assert(alignof(USpatialMetricsActorTracker) == 0x000008, "Wrong alignment on USpatialMetricsActorTracker");
static_assert(sizeof(USpatialMetricsActorTracker) == 0x0000F0, "Wrong size on USpatialMetricsActorTracker");

// Class SpatialMetricsCore.SpatialMetricsSubsystem
// 0x0040 (0x0070 - 0x0030)
class USpatialMetricsSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USpatialMetricInterface*>        Metrics;                                           // 0x0040(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class USpatialMetricsSubsystemExtension*> Extensions;                                        // 0x0050(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	float                                         UpdateRateInSeconds;                               // 0x0060(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WarmUpFrames;                                      // 0x0064(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpatialMetricsSubsystem">();
	}
	static class USpatialMetricsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpatialMetricsSubsystem>();
	}
};
static_assert(alignof(USpatialMetricsSubsystem) == 0x000008, "Wrong alignment on USpatialMetricsSubsystem");
static_assert(sizeof(USpatialMetricsSubsystem) == 0x000070, "Wrong size on USpatialMetricsSubsystem");
static_assert(offsetof(USpatialMetricsSubsystem, Metrics) == 0x000040, "Member 'USpatialMetricsSubsystem::Metrics' has a wrong offset!");
static_assert(offsetof(USpatialMetricsSubsystem, Extensions) == 0x000050, "Member 'USpatialMetricsSubsystem::Extensions' has a wrong offset!");
static_assert(offsetof(USpatialMetricsSubsystem, UpdateRateInSeconds) == 0x000060, "Member 'USpatialMetricsSubsystem::UpdateRateInSeconds' has a wrong offset!");
static_assert(offsetof(USpatialMetricsSubsystem, WarmUpFrames) == 0x000064, "Member 'USpatialMetricsSubsystem::WarmUpFrames' has a wrong offset!");

// Class SpatialMetricsCore.TestMetric
// 0x0080 (0x00D8 - 0x0058)
class UTestMetric final : public USpatialMetricInterface
{
public:
	uint8                                         Pad_58[0x74];                                      // 0x0058(0x0074)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SamplingDistance;                                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSamplingFactor;                               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestMetric">();
	}
	static class UTestMetric* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestMetric>();
	}
};
static_assert(alignof(UTestMetric) == 0x000008, "Wrong alignment on UTestMetric");
static_assert(sizeof(UTestMetric) == 0x0000D8, "Wrong size on UTestMetric");
static_assert(offsetof(UTestMetric, SamplingDistance) == 0x0000CC, "Member 'UTestMetric::SamplingDistance' has a wrong offset!");
static_assert(offsetof(UTestMetric, WorldSamplingFactor) == 0x0000D0, "Member 'UTestMetric::WorldSamplingFactor' has a wrong offset!");

}

