#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HarmonixMidi

#include "Basic.hpp"

#include "HarmonixMidi_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class HarmonixMidi.MidiFile
// 0x0110 (0x0138 - 0x0028)
class UMidiFile final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bLengthRoundedDown;                                // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLengthRoundedUp;                                  // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLengthRoundedToNearest;                           // 0x0032(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMidiFileData                          TheMidiData;                                       // 0x0038(0x00F0)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_128[0x10];                                     // 0x0128(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MidiFile">();
	}
	static class UMidiFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMidiFile>();
	}
};
static_assert(alignof(UMidiFile) == 0x000008, "Wrong alignment on UMidiFile");
static_assert(sizeof(UMidiFile) == 0x000138, "Wrong size on UMidiFile");
static_assert(offsetof(UMidiFile, bLengthRoundedDown) == 0x000030, "Member 'UMidiFile::bLengthRoundedDown' has a wrong offset!");
static_assert(offsetof(UMidiFile, bLengthRoundedUp) == 0x000031, "Member 'UMidiFile::bLengthRoundedUp' has a wrong offset!");
static_assert(offsetof(UMidiFile, bLengthRoundedToNearest) == 0x000032, "Member 'UMidiFile::bLengthRoundedToNearest' has a wrong offset!");
static_assert(offsetof(UMidiFile, TheMidiData) == 0x000038, "Member 'UMidiFile::TheMidiData' has a wrong offset!");

// Class HarmonixMidi.MidiNoteFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UMidiNoteFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FMidiNote ByteToMidiNote(uint8 InByte);
	static struct FMidiNote GetMaxMidiNote();
	static uint8 GetMaxNoteNumber();
	static uint8 GetMaxNoteVelocity();
	static int32 GetMaxNumNotes();
	static struct FMidiNote GetMinMidiNote();
	static uint8 GetMinNoteNumber();
	static uint8 GetMinNoteVelocity();
	static struct FMidiNote IntToMidiNote(int32 inInt);
	static struct FMidiNote MakeLiteralMidiNote(const struct FMidiNote& Value);
	static uint8 MidiNoteToByte(const struct FMidiNote& InMidiNote);
	static int32 MidiNoteToInt(const struct FMidiNote& InMidiNote);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MidiNoteFunctionLibrary">();
	}
	static class UMidiNoteFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMidiNoteFunctionLibrary>();
	}
};
static_assert(alignof(UMidiNoteFunctionLibrary) == 0x000008, "Wrong alignment on UMidiNoteFunctionLibrary");
static_assert(sizeof(UMidiNoteFunctionLibrary) == 0x000028, "Wrong size on UMidiNoteFunctionLibrary");

// Class HarmonixMidi.MusicalTickFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UMusicalTickFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetQuarterNotesPerTick();
	static float GetTicksPerQuarterNote();
	static int32 GetTicksPerQuarterNoteInt();
	static float QuarterNoteToTick(float InQuarterNote);
	static float TickToQuarterNote(float InTick);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MusicalTickFunctionLibrary">();
	}
	static class UMusicalTickFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMusicalTickFunctionLibrary>();
	}
};
static_assert(alignof(UMusicalTickFunctionLibrary) == 0x000008, "Wrong alignment on UMusicalTickFunctionLibrary");
static_assert(sizeof(UMusicalTickFunctionLibrary) == 0x000028, "Wrong size on UMusicalTickFunctionLibrary");

}

