#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JunoGameNative

#include "Basic.hpp"

#include "AtomRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MassEntity_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayGraph_structs.hpp"
#include "NetCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "AssembledMeshSystem_structs.hpp"
#include "StructUtils_structs.hpp"
#include "GeometryCollectionEngine_structs.hpp"
#include "DataflowCore_structs.hpp"
#include "WorldConditions_structs.hpp"
#include "JsonUtilities_structs.hpp"
#include "JunoWorldManagement_structs.hpp"
#include "FortGameplayGraph_structs.hpp"
#include "GameplayInteractionsModule_structs.hpp"
#include "StateTreeModule_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// Enum JunoGameNative.EJunoBuildingPlacementType
// NumValues: 0x0005
enum class EJunoBuildingPlacementType : uint8
{
	GuidedSnapping                           = 0,
	Connectivity                             = 1,
	SnapPlacement                            = 2,
	NoTarget                                 = 3,
	MAX                                      = 4,
};

// Enum JunoGameNative.EJunoBuildingBehaviorState
// NumValues: 0x0006
enum class EJunoBuildingBehaviorState : uint8
{
	Uninitialized                            = 0,
	Pending                                  = 1,
	Ready                                    = 2,
	Invalid                                  = 3,
	Disabled                                 = 4,
	MAX                                      = 5,
};

// Enum JunoGameNative.EJunoBiomeHabitat
// NumValues: 0x0010
enum class EJunoBiomeHabitat : uint8
{
	Unknown                                  = 0,
	POI                                      = 1,
	Cave                                     = 2,
	Stone                                    = 3,
	Asphalt                                  = 4,
	Snow                                     = 5,
	Dirt                                     = 6,
	Sand                                     = 7,
	Grass                                    = 8,
	Flowers                                  = 9,
	Heather                                  = 10,
	Moss                                     = 11,
	Ocean                                    = 12,
	Lake                                     = 13,
	River                                    = 14,
	Max                                      = 15,
};

// Enum JunoGameNative.EJunoBiome
// NumValues: 0x0009
enum class EJunoBiome : uint8
{
	Unknown                                  = 0,
	Grasslands                               = 1,
	DarkForest                               = 2,
	Desert                                   = 3,
	Tropical                                 = 4,
	Alpine                                   = 5,
	Water                                    = 6,
	Reserved                                 = 7,
	Max                                      = 8,
};

// Enum JunoGameNative.EJunoAwesomePointModificationContext
// NumValues: 0x0005
enum class EJunoAwesomePointModificationContext : uint8
{
	Cheat                                    = 0,
	Interaction                              = 1,
	ActorPlacement                           = 2,
	ActorRemoval                             = 3,
	QuestCompletion                          = 4,
};

// Enum JunoGameNative.EJunoPawnEmotionalState
// NumValues: 0x0004
enum class EJunoPawnEmotionalState : uint8
{
	Default                                  = 0,
	Happy                                    = 1,
	Sad                                      = 2,
	MAX                                      = 3,
};

// Enum JunoGameNative.EPassiveCraftingDoneReason
// NumValues: 0x0004
enum class EPassiveCraftingDoneReason : uint8
{
	UnexpectedError                          = 0,
	PlayerStopped                            = 1,
	NoOutputSpace                            = 2,
	MissingIngredients                       = 3,
};

// Enum JunoGameNative.EJunoCaveType
// NumValues: 0x000B
enum class EJunoCaveType : uint8
{
	Unknown                                  = 0,
	Surface                                  = 1,
	Lava                                     = 2,
	Rift                                     = 3,
	Ruins                                    = 4,
	SurfaceMines                             = 5,
	Pirate                                   = 6,
	Bear                                     = 7,
	Treasure                                 = 8,
	BossRoom                                 = 9,
	Max                                      = 10,
};

// Enum JunoGameNative.EJunoCompassDirection
// NumValues: 0x000A
enum class EJunoCompassDirection : uint8
{
	Unknown                                  = 0,
	North                                    = 1,
	NorthEast                                = 2,
	East                                     = 3,
	SouthEast                                = 4,
	South                                    = 5,
	SouthWest                                = 6,
	West                                     = 7,
	NorthWest                                = 8,
	Max                                      = 9,
};

// Enum JunoGameNative.EJunoTrackedActorRefreshReason
// NumValues: 0x0004
enum class EJunoTrackedActorRefreshReason : uint8
{
	LocationChanged                          = 0,
	NetRelDistanceChanged                    = 1,
	NumberOfRelevantActorsChanged            = 2,
	Unknown                                  = 3,
};

// Enum JunoGameNative.EChaosEventSize
// NumValues: 0x0005
enum class EChaosEventSize : uint8
{
	Single                                   = 0,
	Small                                    = 1,
	Medium                                   = 2,
	Large                                    = 3,
	Default                                  = 1,
};

// Enum JunoGameNative.EJunoContactDirection
// NumValues: 0x0006
enum class EJunoContactDirection : uint8
{
	PosX                                     = 0,
	NegX                                     = 1,
	PosY                                     = 2,
	NegY                                     = 3,
	PosZ                                     = 4,
	NegZ                                     = 5,
};

// Enum JunoGameNative.EJunoDumpWorldPersistentContentsVerbosity
// NumValues: 0x0003
enum class EJunoDumpWorldPersistentContentsVerbosity : uint8
{
	Compact                                  = 0,
	Default                                  = 1,
	Verbose                                  = 2,
};

// Enum JunoGameNative.EJunoGeneratePersistenceAssetsReportCommandletAction
// NumValues: 0x0003
enum class EJunoGeneratePersistenceAssetsReportCommandletAction : uint8
{
	None                                     = 0,
	GeneratePersistenceAssetsReport          = 1,
	GeneratePersistenceAssetsBackwardCompatibiliyReport = 2,
};

// Enum JunoGameNative.EJunoGeometryCollectionAssemblerDurationType
// NumValues: 0x0003
enum class EJunoGeometryCollectionAssemblerDurationType : uint32
{
	Default                                  = 0,
	CalculateLayerCount                      = 1,
	SpecifyLayerCount                        = 2,
};

// Enum JunoGameNative.EJunoKnowledgeState
// NumValues: 0x0003
enum class EJunoKnowledgeState : uint8
{
	Hidden                                   = 0,
	Revealed                                 = 1,
	Acquired                                 = 2,
};

// Enum JunoGameNative.EJunoPersistenceAssetBackwardCompatibilityIssueType
// NumValues: 0x0004
enum class EJunoPersistenceAssetBackwardCompatibilityIssueType : uint8
{
	None                                     = 0,
	Missing                                  = 1,
	NoLongerCooked                           = 2,
	IncompatibleContents                     = 3,
};

// Enum JunoGameNative.EJunoWorldSaveDataState
// NumValues: 0x0005
enum class EJunoWorldSaveDataState : uint8
{
	Uninitialized                            = 0,
	Loading                                  = 1,
	Loaded                                   = 2,
	CheckingIn                               = 3,
	CheckedIn                                = 4,
};

// Enum JunoGameNative.EJunoLevelSaveDataState
// NumValues: 0x0004
enum class EJunoLevelSaveDataState : uint8
{
	None                                     = 0,
	CheckedOut                               = 1,
	Applied                                  = 2,
	CheckedIn                                = 3,
};

// Enum JunoGameNative.EJunoPersistenceFeatureCheckoutState
// NumValues: 0x0003
enum class EJunoPersistenceFeatureCheckoutState : uint32
{
	None                                     = 0,
	CheckedOut                               = 1,
	CheckedIn                                = 2,
};

// Enum JunoGameNative.EJunoBuildModeType
// NumValues: 0x0004
enum class EJunoBuildModeType : uint8
{
	BuildMode                                = 0,
	GuidedBuildingMode                       = 1,
	NumOfBuildModes                          = 2,
	ActionMode                               = 3,
};

// Enum JunoGameNative.EJunoPersistenceReportOptions
// NumValues: 0x000E
enum class EJunoPersistenceReportOptions : uint16
{
	None                                     = 0,
	ActorTemplateDataEnabled                 = 1,
	ActorInstanceDataEnabled                 = 2,
	JunoUpdateActionDataEnabled              = 4,
	JunoDeleteActionDataEnabled              = 8,
	JunoPersistenceFeaturesDataEnabled       = 16,
	DataEnabledDefaultFlags                  = 31,
	ShowReportHeader                         = 32,
	ShowPlayspaceHeaders                     = 64,
	ShowSubreportsHeaders                    = 128,
	ShowTablesHeaders                        = 256,
	ShowIndividualItemsStats                 = 512,
	ShowAggregatedStats                      = 1024,
	ShowDefaultFlags                         = 1504,
};

// Enum JunoGameNative.EJunoWorldConditionAICampChecksIsAssigned
// NumValues: 0x0003
enum class EJunoWorldConditionAICampChecksIsAssigned : uint8
{
	None                                     = 0,
	Assigned                                 = 1,
	Unassigned                               = 2,
};

// Enum JunoGameNative.EJunoWorldConditionMustHaveLastUsedGatheringActor
// NumValues: 0x0003
enum class EJunoWorldConditionMustHaveLastUsedGatheringActor : uint8
{
	None                                     = 0,
	IsValid                                  = 1,
	IsNotValid                               = 2,
};

// Enum JunoGameNative.EJunoWorldConditionAssignmentState
// NumValues: 0x0004
enum class EJunoWorldConditionAssignmentState : uint8
{
	None                                     = 0,
	AssignedToUserActor                      = 1,
	Assigned                                 = 2,
	Unassigned                               = 3,
};

// Enum JunoGameNative.EJunoWorldConditionPawnType
// NumValues: 0x0004
enum class EJunoWorldConditionPawnType : uint8
{
	None                                     = 0,
	Player                                   = 1,
	Villager                                 = 2,
	EnemyMinifig                             = 4,
};

// Enum JunoGameNative.EJunoWorldConditionHasFollower
// NumValues: 0x0003
enum class EJunoWorldConditionHasFollower : uint8
{
	Unset                                    = 0,
	Zero                                     = 1,
	OneOrMore                                = 2,
};

// Enum JunoGameNative.EPhysicalStrainHealthMode
// NumValues: 0x0004
enum class EPhysicalStrainHealthMode : uint8
{
	Disabled                                 = 0,
	FullIntegrityPercentageMapping           = 1,
	ZeroIntegrity                            = 2,
	FullIntegrityFatigueThresholdMapping     = 3,
};

// Enum JunoGameNative.EJunoAwesomeThresholdTestMode
// NumValues: 0x0003
enum class EJunoAwesomeThresholdTestMode : uint32
{
	LessOrEqual                              = 0,
	GreaterOrEqual                           = 1,
	Range                                    = 2,
};

// Enum JunoGameNative.EJunoAwesomePlacementConfigType
// NumValues: 0x0002
enum class EJunoAwesomePlacementConfigType : uint8
{
	ItemDefinition                           = 0,
	CraftingRowName                          = 1,
};

// Enum JunoGameNative.EJunoAwesomeLevelUpgradeQueryResult
// NumValues: 0x0003
enum class EJunoAwesomeLevelUpgradeQueryResult : uint8
{
	Fail_LackingAwesomePoints                = 0,
	Fail_LackingPlayerResources              = 1,
	Pass                                     = 2,
};

// Enum JunoGameNative.EJunoAwesomeLevelIncrementType
// NumValues: 0x0002
enum class EJunoAwesomeLevelIncrementType : uint8
{
	LevelDelta                               = 0,
	CurrentLevel                             = 1,
};

// Enum JunoGameNative.EImpactOrDamage_ExecutionPin
// NumValues: 0x0003
enum class EImpactOrDamage_ExecutionPin : uint8
{
	LocalImpact                              = 0,
	LocalDamage                              = 1,
	OtherDamage                              = 2,
};

// Enum JunoGameNative.EUpdateAnimationTimer_ExecutionPin
// NumValues: 0x0002
enum class EUpdateAnimationTimer_ExecutionPin : uint8
{
	Active                                   = 0,
	Expired                                  = 1,
};

// Enum JunoGameNative.EJunoMinifigRotationMode
// NumValues: 0x0004
enum class EJunoMinifigRotationMode : uint8
{
	NoRotation                               = 0,
	ContinuousRotateToTarget                 = 1,
	CurveRotateToMovingTarget                = 2,
	CurveRotateToStaticTarget                = 3,
};

// Enum JunoGameNative.EJunoBedAssignmentProcessingState
// NumValues: 0x0002
enum class EJunoBedAssignmentProcessingState : uint8
{
	Processing                               = 0,
	Ready                                    = 1,
};

// Enum JunoGameNative.EJunoResourceScale
// NumValues: 0x0006
enum class EJunoResourceScale : uint8
{
	Invalid                                  = 0,
	Small                                    = 1,
	Medium                                   = 2,
	Large                                    = 3,
	VerySmall                                = 4,
	VeryLarge                                = 5,
};

// Enum JunoGameNative.EWorldDataAvailable
// NumValues: 0x0003
enum class EWorldDataAvailable : uint8
{
	Undefined                                = 0,
	WasLoadedFromPersistentData              = 1,
	WasInitializedFromWorldMetadata          = 2,
};

// Enum JunoGameNative.EJunoItemChangeType
// NumValues: 0x0005
enum class EJunoItemChangeType : uint8
{
	Added                                    = 0,
	Removed                                  = 1,
	ItemChanged                              = 2,
	SlotChanged                              = 3,
	Swapped                                  = 4,
};

// Enum JunoGameNative.EJunoInventoryAcquisitionResult
// NumValues: 0x0004
enum class EJunoInventoryAcquisitionResult : uint8
{
	Failure                                  = 0,
	SystemNotReady                           = 1,
	InventoryCreated                         = 2,
	InventoryRestored                        = 3,
};

// Enum JunoGameNative.EJunoBuildingSnapEntryState
// NumValues: 0x0005
enum class EJunoBuildingSnapEntryState : uint8
{
	Incompatible                             = 0,
	Compatible                               = 1,
	InRangeRejected                          = 2,
	InRangeValid                             = 3,
	Connected                                = 4,
};

// Enum JunoGameNative.EOnPlacementAction
// NumValues: 0x0002
enum class EOnPlacementAction : uint8
{
	IgnoreOnly                               = 0,
	IgnoreAndDestroy                         = 1,
};

// Enum JunoGameNative.EJunoGuidedBuildingState
// NumValues: 0x0004
enum class EJunoGuidedBuildingState : uint8
{
	Default                                  = 0,
	Hidden                                   = 1,
	Unfilled                                 = 2,
	Filled                                   = 3,
};

// Enum JunoGameNative.EJunoLandscapeVisualModifierType
// NumValues: 0x0002
enum class EJunoLandscapeVisualModifierType : uint8
{
	None                                     = 0,
	DirtPatch                                = 1,
};

// Enum JunoGameNative.EJunoAutomaticConnectionMethod
// NumValues: 0x0003
enum class EJunoAutomaticConnectionMethod : uint8
{
	Full                                     = 0,
	Below                                    = 1,
	Custom                                   = 2,
};

// Enum JunoGameNative.EJunoDeltaActionTypes
// NumValues: 0x0004
enum class EJunoDeltaActionTypes : uint8
{
	None                                     = 0,
	Add                                      = 1,
	Update                                   = 2,
	Delete                                   = 4,
};

// Enum JunoGameNative.EJunoQuickbarSelectionDirection
// NumValues: 0x0002
enum class EJunoQuickbarSelectionDirection : uint8
{
	Next                                     = 0,
	Prev                                     = 1,
};

// Enum JunoGameNative.EJunoPawnEmotionalStateMappingTest
// NumValues: 0x0002
enum class EJunoPawnEmotionalStateMappingTest : uint32
{
	LessOrEqual                              = 0,
	GreaterOrEqual                           = 1,
};

// Enum JunoGameNative.EJunoActionExecutionConfig
// NumValues: 0x0003
enum class EJunoActionExecutionConfig : uint8
{
	ExecuteEveryTime                         = 0,
	ExecuteFirstTimeOnly                     = 1,
	ExecuteReloadOnly                        = 2,
};

// Enum JunoGameNative.EMeshAuditFailureReason
// NumValues: 0x000B
enum class EMeshAuditFailureReason : uint32
{
	MAFR_None                                = 0,
	MAFR_NeverStream                         = 1,
	MAFR_HighTriRatioInLODs                  = 2,
	MAFR_SimplestLODTooComplex               = 4,
	MAFR_TriDensityTooHigh                   = 8,
	MAFR_PhysicsTriDensityHigh               = 256,
	MAFR_PhysicsComplexAsSimple              = 512,
	MAFR_PhysicsMeshIsHighLOD                = 1024,
	MAFR_PhysicsSimpleShapeTooComplex        = 2048,
	MAFR_PhysicsTooDetailedForSmallObject    = 4096,
	MAFR_PhysicsCollideAll                   = 8192,
};

// ScriptStruct JunoGameNative.JunoBuildingFloatingResult
// 0x0010 (0x0010 - 0x0000)
struct FJunoBuildingFloatingResult final
{
public:
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> SupportingComponents;                              // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingFloatingResult) == 0x000008, "Wrong alignment on FJunoBuildingFloatingResult");
static_assert(sizeof(FJunoBuildingFloatingResult) == 0x000010, "Wrong size on FJunoBuildingFloatingResult");
static_assert(offsetof(FJunoBuildingFloatingResult, SupportingComponents) == 0x000000, "Member 'FJunoBuildingFloatingResult::SupportingComponents' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingSupportedComponent
// 0x0018 (0x0018 - 0x0000)
struct FJunoBuildingSupportedComponent final
{
public:
	TWeakObjectPtr<class UPrimitiveComponent>     Component;                                         // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoBuildingFloatingResult            Result;                                            // 0x0008(0x0010)(Edit, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingSupportedComponent) == 0x000008, "Wrong alignment on FJunoBuildingSupportedComponent");
static_assert(sizeof(FJunoBuildingSupportedComponent) == 0x000018, "Wrong size on FJunoBuildingSupportedComponent");
static_assert(offsetof(FJunoBuildingSupportedComponent, Component) == 0x000000, "Member 'FJunoBuildingSupportedComponent::Component' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSupportedComponent, Result) == 0x000008, "Member 'FJunoBuildingSupportedComponent::Result' has a wrong offset!");

// ScriptStruct JunoGameNative.SoundBreakEvent
// 0x0040 (0x0040 - 0x0000)
struct FSoundBreakEvent final
{
public:
	struct FGuid                                  UniqueID;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakEventNum;                                     // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedMass;                                   // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundBreakEvent) == 0x000008, "Wrong alignment on FSoundBreakEvent");
static_assert(sizeof(FSoundBreakEvent) == 0x000040, "Wrong size on FSoundBreakEvent");
static_assert(offsetof(FSoundBreakEvent, UniqueID) == 0x000000, "Member 'FSoundBreakEvent::UniqueID' has a wrong offset!");
static_assert(offsetof(FSoundBreakEvent, Location) == 0x000010, "Member 'FSoundBreakEvent::Location' has a wrong offset!");
static_assert(offsetof(FSoundBreakEvent, BreakEventNum) == 0x000028, "Member 'FSoundBreakEvent::BreakEventNum' has a wrong offset!");
static_assert(offsetof(FSoundBreakEvent, AccumulatedMass) == 0x00002C, "Member 'FSoundBreakEvent::AccumulatedMass' has a wrong offset!");
static_assert(offsetof(FSoundBreakEvent, PhysMaterial) == 0x000030, "Member 'FSoundBreakEvent::PhysMaterial' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_QuickBuildSelectionData
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_QuickBuildSelectionData final
{
public:
	class UJunoQuickBuildSelectionData*           QuickBuildSelectionData;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_QuickBuildSelectionData) == 0x000008, "Wrong alignment on FJunoEvent_QuickBuildSelectionData");
static_assert(sizeof(FJunoEvent_QuickBuildSelectionData) == 0x000008, "Wrong size on FJunoEvent_QuickBuildSelectionData");
static_assert(offsetof(FJunoEvent_QuickBuildSelectionData, QuickBuildSelectionData) == 0x000000, "Member 'FJunoEvent_QuickBuildSelectionData::QuickBuildSelectionData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoTemperatureChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct FJunoTemperatureChangedEvent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OldTemperature;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewTemperature;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoTemperatureChangedEvent) == 0x000008, "Wrong alignment on FJunoTemperatureChangedEvent");
static_assert(sizeof(FJunoTemperatureChangedEvent) == 0x000010, "Wrong size on FJunoTemperatureChangedEvent");
static_assert(offsetof(FJunoTemperatureChangedEvent, Actor) == 0x000000, "Member 'FJunoTemperatureChangedEvent::Actor' has a wrong offset!");
static_assert(offsetof(FJunoTemperatureChangedEvent, OldTemperature) == 0x000008, "Member 'FJunoTemperatureChangedEvent::OldTemperature' has a wrong offset!");
static_assert(offsetof(FJunoTemperatureChangedEvent, NewTemperature) == 0x00000C, "Member 'FJunoTemperatureChangedEvent::NewTemperature' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_BuildingPrebuild
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_BuildingPrebuild final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_BuildingPrebuild) == 0x000001, "Wrong alignment on FJunoEvent_BuildingPrebuild");
static_assert(sizeof(FJunoEvent_BuildingPrebuild) == 0x000001, "Wrong size on FJunoEvent_BuildingPrebuild");

// ScriptStruct JunoGameNative.SoundCollisionEvent
// 0x0058 (0x0058 - 0x0000)
struct FSoundCollisionEvent final
{
public:
	struct FGuid                                  UniqueID;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollisionEventNum;                                 // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedMass;                                   // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaVelocity;                                     // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundCollisionEvent) == 0x000008, "Wrong alignment on FSoundCollisionEvent");
static_assert(sizeof(FSoundCollisionEvent) == 0x000058, "Wrong size on FSoundCollisionEvent");
static_assert(offsetof(FSoundCollisionEvent, UniqueID) == 0x000000, "Member 'FSoundCollisionEvent::UniqueID' has a wrong offset!");
static_assert(offsetof(FSoundCollisionEvent, Location) == 0x000010, "Member 'FSoundCollisionEvent::Location' has a wrong offset!");
static_assert(offsetof(FSoundCollisionEvent, CollisionEventNum) == 0x000028, "Member 'FSoundCollisionEvent::CollisionEventNum' has a wrong offset!");
static_assert(offsetof(FSoundCollisionEvent, AccumulatedMass) == 0x00002C, "Member 'FSoundCollisionEvent::AccumulatedMass' has a wrong offset!");
static_assert(offsetof(FSoundCollisionEvent, DeltaVelocity) == 0x000030, "Member 'FSoundCollisionEvent::DeltaVelocity' has a wrong offset!");
static_assert(offsetof(FSoundCollisionEvent, PhysMaterial) == 0x000048, "Member 'FSoundCollisionEvent::PhysMaterial' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMoodReactionPayload
// 0x000C (0x000C - 0x0000)
struct FJunoMoodReactionPayload final
{
public:
	struct FGameplayTag                           MoodReactionTag;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SoundLibraryTag;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        GameplayCueTag;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMoodReactionPayload) == 0x000004, "Wrong alignment on FJunoMoodReactionPayload");
static_assert(sizeof(FJunoMoodReactionPayload) == 0x00000C, "Wrong size on FJunoMoodReactionPayload");
static_assert(offsetof(FJunoMoodReactionPayload, MoodReactionTag) == 0x000000, "Member 'FJunoMoodReactionPayload::MoodReactionTag' has a wrong offset!");
static_assert(offsetof(FJunoMoodReactionPayload, SoundLibraryTag) == 0x000004, "Member 'FJunoMoodReactionPayload::SoundLibraryTag' has a wrong offset!");
static_assert(offsetof(FJunoMoodReactionPayload, GameplayCueTag) == 0x000008, "Member 'FJunoMoodReactionPayload::GameplayCueTag' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_EnterBuildModePreview
// 0x0010 (0x0010 - 0x0000)
struct FJunoEvent_EnterBuildModePreview final
{
public:
	class AFortPlayerController*                  SourceController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJunoBuilderTool*                       BuilderTool;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_EnterBuildModePreview) == 0x000008, "Wrong alignment on FJunoEvent_EnterBuildModePreview");
static_assert(sizeof(FJunoEvent_EnterBuildModePreview) == 0x000010, "Wrong size on FJunoEvent_EnterBuildModePreview");
static_assert(offsetof(FJunoEvent_EnterBuildModePreview, SourceController) == 0x000000, "Member 'FJunoEvent_EnterBuildModePreview::SourceController' has a wrong offset!");
static_assert(offsetof(FJunoEvent_EnterBuildModePreview, BuilderTool) == 0x000008, "Member 'FJunoEvent_EnterBuildModePreview::BuilderTool' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_PrimaryContentPushedMessage
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_PrimaryContentPushedMessage final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_PrimaryContentPushedMessage) == 0x000001, "Wrong alignment on FJunoEvent_PrimaryContentPushedMessage");
static_assert(sizeof(FJunoEvent_PrimaryContentPushedMessage) == 0x000001, "Wrong size on FJunoEvent_PrimaryContentPushedMessage");

// ScriptStruct JunoGameNative.JunoBuildingBehaviorStateContext
// 0x0030 (0x0030 - 0x0000)
struct FJunoBuildingBehaviorStateContext final
{
public:
	TWeakObjectPtr<class UPrimitiveComponent>     OverlappedPreviewComponent;                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoBuildingMultiOverlapResult        OverlapResult;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FJunoBuildingSupportedComponent> SupportedComponents;                               // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bBlockedByAssembly;                                // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuidedBuildMisplacement;                          // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockedByActorCount;                              // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingBehaviorStateContext) == 0x000008, "Wrong alignment on FJunoBuildingBehaviorStateContext");
static_assert(sizeof(FJunoBuildingBehaviorStateContext) == 0x000030, "Wrong size on FJunoBuildingBehaviorStateContext");
static_assert(offsetof(FJunoBuildingBehaviorStateContext, OverlappedPreviewComponent) == 0x000000, "Member 'FJunoBuildingBehaviorStateContext::OverlappedPreviewComponent' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorStateContext, OverlapResult) == 0x000008, "Member 'FJunoBuildingBehaviorStateContext::OverlapResult' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorStateContext, SupportedComponents) == 0x000018, "Member 'FJunoBuildingBehaviorStateContext::SupportedComponents' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorStateContext, bBlockedByAssembly) == 0x000028, "Member 'FJunoBuildingBehaviorStateContext::bBlockedByAssembly' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorStateContext, bGuidedBuildMisplacement) == 0x000029, "Member 'FJunoBuildingBehaviorStateContext::bGuidedBuildMisplacement' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorStateContext, bBlockedByActorCount) == 0x00002A, "Member 'FJunoBuildingBehaviorStateContext::bBlockedByActorCount' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_OpenBedAssignmentMenuMessage
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_OpenBedAssignmentMenuMessage final
{
public:
	class AActor*                                 BedActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_OpenBedAssignmentMenuMessage) == 0x000008, "Wrong alignment on FJunoEvent_OpenBedAssignmentMenuMessage");
static_assert(sizeof(FJunoEvent_OpenBedAssignmentMenuMessage) == 0x000008, "Wrong size on FJunoEvent_OpenBedAssignmentMenuMessage");
static_assert(offsetof(FJunoEvent_OpenBedAssignmentMenuMessage, BedActor) == 0x000000, "Member 'FJunoEvent_OpenBedAssignmentMenuMessage::BedActor' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_ToggleFreeCrafting
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_ToggleFreeCrafting final
{
public:
	bool                                          bIsFreeCrafting;                                   // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_ToggleFreeCrafting) == 0x000001, "Wrong alignment on FJunoEvent_ToggleFreeCrafting");
static_assert(sizeof(FJunoEvent_ToggleFreeCrafting) == 0x000001, "Wrong size on FJunoEvent_ToggleFreeCrafting");
static_assert(offsetof(FJunoEvent_ToggleFreeCrafting, bIsFreeCrafting) == 0x000000, "Member 'FJunoEvent_ToggleFreeCrafting::bIsFreeCrafting' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_ExitBuildModePreview
// 0x0010 (0x0010 - 0x0000)
struct FJunoEvent_ExitBuildModePreview final
{
public:
	class AFortPlayerController*                  SourceController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJunoBuilderTool*                       BuilderTool;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_ExitBuildModePreview) == 0x000008, "Wrong alignment on FJunoEvent_ExitBuildModePreview");
static_assert(sizeof(FJunoEvent_ExitBuildModePreview) == 0x000010, "Wrong size on FJunoEvent_ExitBuildModePreview");
static_assert(offsetof(FJunoEvent_ExitBuildModePreview, SourceController) == 0x000000, "Member 'FJunoEvent_ExitBuildModePreview::SourceController' has a wrong offset!");
static_assert(offsetof(FJunoEvent_ExitBuildModePreview, BuilderTool) == 0x000008, "Member 'FJunoEvent_ExitBuildModePreview::BuilderTool' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_OpenHudMessage
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_OpenHudMessage final
{
public:
	class AFortPlayerController*                  SourceController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_OpenHudMessage) == 0x000008, "Wrong alignment on FJunoEvent_OpenHudMessage");
static_assert(sizeof(FJunoEvent_OpenHudMessage) == 0x000008, "Wrong size on FJunoEvent_OpenHudMessage");
static_assert(offsetof(FJunoEvent_OpenHudMessage, SourceController) == 0x000000, "Member 'FJunoEvent_OpenHudMessage::SourceController' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionIsInCave
// 0x0008 (0x0018 - 0x0010)
struct FJunoWorldConditionIsInCave final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          ActorRef;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldConditionIsInCave) == 0x000008, "Wrong alignment on FJunoWorldConditionIsInCave");
static_assert(sizeof(FJunoWorldConditionIsInCave) == 0x000018, "Wrong size on FJunoWorldConditionIsInCave");
static_assert(offsetof(FJunoWorldConditionIsInCave, ActorRef) == 0x000010, "Member 'FJunoWorldConditionIsInCave::ActorRef' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoItemSlot
// 0x0044 (0x0050 - 0x000C)
struct FJunoItemSlot final : public FFastArraySerializerItem
{
public:
	struct FGameplayTag                           GroupTag;                                          // 0x000C(0x0004)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SlotTags;                                          // 0x0010(0x0020)(NativeAccessSpecifierPublic)
	int32                                         RowIndex;                                          // 0x0030(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnIndex;                                       // 0x0034(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemGuid;                                          // 0x0038(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortItem*                              Item;                                              // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoItemSlot) == 0x000008, "Wrong alignment on FJunoItemSlot");
static_assert(sizeof(FJunoItemSlot) == 0x000050, "Wrong size on FJunoItemSlot");
static_assert(offsetof(FJunoItemSlot, GroupTag) == 0x00000C, "Member 'FJunoItemSlot::GroupTag' has a wrong offset!");
static_assert(offsetof(FJunoItemSlot, SlotTags) == 0x000010, "Member 'FJunoItemSlot::SlotTags' has a wrong offset!");
static_assert(offsetof(FJunoItemSlot, RowIndex) == 0x000030, "Member 'FJunoItemSlot::RowIndex' has a wrong offset!");
static_assert(offsetof(FJunoItemSlot, ColumnIndex) == 0x000034, "Member 'FJunoItemSlot::ColumnIndex' has a wrong offset!");
static_assert(offsetof(FJunoItemSlot, ItemGuid) == 0x000038, "Member 'FJunoItemSlot::ItemGuid' has a wrong offset!");
static_assert(offsetof(FJunoItemSlot, Item) == 0x000048, "Member 'FJunoItemSlot::Item' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoReplicatedItemSlotList
// 0x0020 (0x0128 - 0x0108)
struct FJunoReplicatedItemSlotList final : public FFastArraySerializer
{
public:
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoItemSlot>                  ItemSlots;                                         // 0x0118(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoReplicatedItemSlotList) == 0x000008, "Wrong alignment on FJunoReplicatedItemSlotList");
static_assert(sizeof(FJunoReplicatedItemSlotList) == 0x000128, "Wrong size on FJunoReplicatedItemSlotList");
static_assert(offsetof(FJunoReplicatedItemSlotList, ItemSlots) == 0x000118, "Member 'FJunoReplicatedItemSlotList::ItemSlots' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoActorAttributeOverrideData
// 0x0010 (0x0018 - 0x0008)
struct FJunoActorAttributeOverrideData final : public FTableRowBase
{
public:
	class FName                                   PrimaryLootTier;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondaryLootTier;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DamageSurfaceTypeTag;                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoActorAttributeOverrideData) == 0x000008, "Wrong alignment on FJunoActorAttributeOverrideData");
static_assert(sizeof(FJunoActorAttributeOverrideData) == 0x000018, "Wrong size on FJunoActorAttributeOverrideData");
static_assert(offsetof(FJunoActorAttributeOverrideData, PrimaryLootTier) == 0x000008, "Member 'FJunoActorAttributeOverrideData::PrimaryLootTier' has a wrong offset!");
static_assert(offsetof(FJunoActorAttributeOverrideData, SecondaryLootTier) == 0x00000C, "Member 'FJunoActorAttributeOverrideData::SecondaryLootTier' has a wrong offset!");
static_assert(offsetof(FJunoActorAttributeOverrideData, DamageSurfaceTypeTag) == 0x000010, "Member 'FJunoActorAttributeOverrideData::DamageSurfaceTypeTag' has a wrong offset!");
static_assert(offsetof(FJunoActorAttributeOverrideData, Health) == 0x000014, "Member 'FJunoActorAttributeOverrideData::Health' has a wrong offset!");

// ScriptStruct JunoGameNative.TemperatureRange
// 0x0014 (0x0014 - 0x0000)
struct FTemperatureRange final
{
public:
	struct FGameplayTag                           tag;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            Range;                                             // 0x0004(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTemperatureRange) == 0x000004, "Wrong alignment on FTemperatureRange");
static_assert(sizeof(FTemperatureRange) == 0x000014, "Wrong size on FTemperatureRange");
static_assert(offsetof(FTemperatureRange, tag) == 0x000000, "Member 'FTemperatureRange::tag' has a wrong offset!");
static_assert(offsetof(FTemperatureRange, Range) == 0x000004, "Member 'FTemperatureRange::Range' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoTemperatureRangesChangedEvent
// 0x0018 (0x0018 - 0x0000)
struct FJunoTemperatureRangesChangedEvent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTemperatureRange>              NewTemperatureRanges;                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoTemperatureRangesChangedEvent) == 0x000008, "Wrong alignment on FJunoTemperatureRangesChangedEvent");
static_assert(sizeof(FJunoTemperatureRangesChangedEvent) == 0x000018, "Wrong size on FJunoTemperatureRangesChangedEvent");
static_assert(offsetof(FJunoTemperatureRangesChangedEvent, Actor) == 0x000000, "Member 'FJunoTemperatureRangesChangedEvent::Actor' has a wrong offset!");
static_assert(offsetof(FJunoTemperatureRangesChangedEvent, NewTemperatureRanges) == 0x000008, "Member 'FJunoTemperatureRangesChangedEvent::NewTemperatureRanges' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_EnableBuildModeWithRecipe
// 0x0030 (0x0030 - 0x0000)
struct FJunoEvent_EnableBuildModeWithRecipe final
{
public:
	EJunoBuildModeType                            BuildModeType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RecipeName;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromRecents;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0010(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_EnableBuildModeWithRecipe) == 0x000008, "Wrong alignment on FJunoEvent_EnableBuildModeWithRecipe");
static_assert(sizeof(FJunoEvent_EnableBuildModeWithRecipe) == 0x000030, "Wrong size on FJunoEvent_EnableBuildModeWithRecipe");
static_assert(offsetof(FJunoEvent_EnableBuildModeWithRecipe, BuildModeType) == 0x000000, "Member 'FJunoEvent_EnableBuildModeWithRecipe::BuildModeType' has a wrong offset!");
static_assert(offsetof(FJunoEvent_EnableBuildModeWithRecipe, RecipeName) == 0x000004, "Member 'FJunoEvent_EnableBuildModeWithRecipe::RecipeName' has a wrong offset!");
static_assert(offsetof(FJunoEvent_EnableBuildModeWithRecipe, bFromRecents) == 0x000008, "Member 'FJunoEvent_EnableBuildModeWithRecipe::bFromRecents' has a wrong offset!");
static_assert(offsetof(FJunoEvent_EnableBuildModeWithRecipe, Tags) == 0x000010, "Member 'FJunoEvent_EnableBuildModeWithRecipe::Tags' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoItemSlotGroup
// 0x0018 (0x0018 - 0x0000)
struct FJunoItemSlotGroup final
{
public:
	struct FGameplayTag                           GroupType;                                         // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoItemSlot>                  SlotList;                                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoItemSlotGroup) == 0x000008, "Wrong alignment on FJunoItemSlotGroup");
static_assert(sizeof(FJunoItemSlotGroup) == 0x000018, "Wrong size on FJunoItemSlotGroup");
static_assert(offsetof(FJunoItemSlotGroup, GroupType) == 0x000000, "Member 'FJunoItemSlotGroup::GroupType' has a wrong offset!");
static_assert(offsetof(FJunoItemSlotGroup, SlotList) == 0x000008, "Member 'FJunoItemSlotGroup::SlotList' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRidingAnimationData
// 0x0014 (0x0014 - 0x0000)
struct FJunoRidingAnimationData final
{
public:
	bool                                          bIsRidden;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurningInPlace;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSprinting;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBeingPetted;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovingBackwards;                                // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnInPlaceRotationSpeed;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnInPlaceAngleDelta;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderReferentialYaw;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRidingAnimationData) == 0x000004, "Wrong alignment on FJunoRidingAnimationData");
static_assert(sizeof(FJunoRidingAnimationData) == 0x000014, "Wrong size on FJunoRidingAnimationData");
static_assert(offsetof(FJunoRidingAnimationData, bIsRidden) == 0x000000, "Member 'FJunoRidingAnimationData::bIsRidden' has a wrong offset!");
static_assert(offsetof(FJunoRidingAnimationData, bIsTurningInPlace) == 0x000001, "Member 'FJunoRidingAnimationData::bIsTurningInPlace' has a wrong offset!");
static_assert(offsetof(FJunoRidingAnimationData, bIsSprinting) == 0x000002, "Member 'FJunoRidingAnimationData::bIsSprinting' has a wrong offset!");
static_assert(offsetof(FJunoRidingAnimationData, bIsBeingPetted) == 0x000003, "Member 'FJunoRidingAnimationData::bIsBeingPetted' has a wrong offset!");
static_assert(offsetof(FJunoRidingAnimationData, bIsMovingBackwards) == 0x000004, "Member 'FJunoRidingAnimationData::bIsMovingBackwards' has a wrong offset!");
static_assert(offsetof(FJunoRidingAnimationData, TurnInPlaceRotationSpeed) == 0x000008, "Member 'FJunoRidingAnimationData::TurnInPlaceRotationSpeed' has a wrong offset!");
static_assert(offsetof(FJunoRidingAnimationData, TurnInPlaceAngleDelta) == 0x00000C, "Member 'FJunoRidingAnimationData::TurnInPlaceAngleDelta' has a wrong offset!");
static_assert(offsetof(FJunoRidingAnimationData, RiderReferentialYaw) == 0x000010, "Member 'FJunoRidingAnimationData::RiderReferentialYaw' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInventoryGroupConfig
// 0x0060 (0x0060 - 0x0000)
struct FJunoInventoryGroupConfig final
{
public:
	struct FGameplayTag                           GroupType;                                         // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumItemRows;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumItemColumns;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FGameplayTagContainer>     SlotTagMap;                                        // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoInventoryGroupConfig) == 0x000008, "Wrong alignment on FJunoInventoryGroupConfig");
static_assert(sizeof(FJunoInventoryGroupConfig) == 0x000060, "Wrong size on FJunoInventoryGroupConfig");
static_assert(offsetof(FJunoInventoryGroupConfig, GroupType) == 0x000000, "Member 'FJunoInventoryGroupConfig::GroupType' has a wrong offset!");
static_assert(offsetof(FJunoInventoryGroupConfig, NumItemRows) == 0x000004, "Member 'FJunoInventoryGroupConfig::NumItemRows' has a wrong offset!");
static_assert(offsetof(FJunoInventoryGroupConfig, NumItemColumns) == 0x000008, "Member 'FJunoInventoryGroupConfig::NumItemColumns' has a wrong offset!");
static_assert(offsetof(FJunoInventoryGroupConfig, SlotTagMap) == 0x000010, "Member 'FJunoInventoryGroupConfig::SlotTagMap' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWeatherLocation
// 0x0002 (0x0002 - 0x0000)
struct FJunoWeatherLocation final
{
public:
	EJunoBiome                                    Biome;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBiomeHabitat                             Habitat;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWeatherLocation) == 0x000001, "Wrong alignment on FJunoWeatherLocation");
static_assert(sizeof(FJunoWeatherLocation) == 0x000002, "Wrong size on FJunoWeatherLocation");
static_assert(offsetof(FJunoWeatherLocation, Biome) == 0x000000, "Member 'FJunoWeatherLocation::Biome' has a wrong offset!");
static_assert(offsetof(FJunoWeatherLocation, Habitat) == 0x000001, "Member 'FJunoWeatherLocation::Habitat' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_TemperatureChanged
// 0x000C (0x000C - 0x0000)
struct FJunoEvent_TemperatureChanged final
{
public:
	struct FJunoWeatherLocation                   Location;                                          // 0x0000(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NewTemperature;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewFloatTemperature;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_TemperatureChanged) == 0x000004, "Wrong alignment on FJunoEvent_TemperatureChanged");
static_assert(sizeof(FJunoEvent_TemperatureChanged) == 0x00000C, "Wrong size on FJunoEvent_TemperatureChanged");
static_assert(offsetof(FJunoEvent_TemperatureChanged, Location) == 0x000000, "Member 'FJunoEvent_TemperatureChanged::Location' has a wrong offset!");
static_assert(offsetof(FJunoEvent_TemperatureChanged, NewTemperature) == 0x000004, "Member 'FJunoEvent_TemperatureChanged::NewTemperature' has a wrong offset!");
static_assert(offsetof(FJunoEvent_TemperatureChanged, NewFloatTemperature) == 0x000008, "Member 'FJunoEvent_TemperatureChanged::NewFloatTemperature' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWeatherPhase
// 0x0038 (0x0038 - 0x0000)
struct FJunoWeatherPhase final
{
public:
	struct FGameplayTag                           WeatherTypeName;                                   // 0x0000(0x0004)(BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionIn;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionOut;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirectionDegree;                               // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherIntensity;                                  // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSpeed;                                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GameTimeWeatherEnds;                               // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MorningTemperature;                                // 0x0028(0x0004)(BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DayTemperature;                                    // 0x002C(0x0004)(BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EveningTemperature;                                // 0x0030(0x0004)(BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NightTemperature;                                  // 0x0034(0x0004)(BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWeatherPhase) == 0x000008, "Wrong alignment on FJunoWeatherPhase");
static_assert(sizeof(FJunoWeatherPhase) == 0x000038, "Wrong size on FJunoWeatherPhase");
static_assert(offsetof(FJunoWeatherPhase, WeatherTypeName) == 0x000000, "Member 'FJunoWeatherPhase::WeatherTypeName' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, TransitionIn) == 0x000004, "Member 'FJunoWeatherPhase::TransitionIn' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, TransitionOut) == 0x000008, "Member 'FJunoWeatherPhase::TransitionOut' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, WindDirectionDegree) == 0x00000C, "Member 'FJunoWeatherPhase::WindDirectionDegree' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, duration) == 0x000010, "Member 'FJunoWeatherPhase::duration' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, WeatherIntensity) == 0x000014, "Member 'FJunoWeatherPhase::WeatherIntensity' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, WindSpeed) == 0x000018, "Member 'FJunoWeatherPhase::WindSpeed' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, GameTimeWeatherEnds) == 0x000020, "Member 'FJunoWeatherPhase::GameTimeWeatherEnds' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, MorningTemperature) == 0x000028, "Member 'FJunoWeatherPhase::MorningTemperature' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, DayTemperature) == 0x00002C, "Member 'FJunoWeatherPhase::DayTemperature' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, EveningTemperature) == 0x000030, "Member 'FJunoWeatherPhase::EveningTemperature' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhase, NightTemperature) == 0x000034, "Member 'FJunoWeatherPhase::NightTemperature' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_WeatherPhaseChanged
// 0x0078 (0x0078 - 0x0000)
struct FJunoEvent_WeatherPhaseChanged final
{
public:
	struct FJunoWeatherLocation                   Location;                                          // 0x0000(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoWeatherPhase                      NewWeatherPhase;                                   // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoWeatherPhase                      NextWeatherPhase;                                  // 0x0040(0x0038)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_WeatherPhaseChanged) == 0x000008, "Wrong alignment on FJunoEvent_WeatherPhaseChanged");
static_assert(sizeof(FJunoEvent_WeatherPhaseChanged) == 0x000078, "Wrong size on FJunoEvent_WeatherPhaseChanged");
static_assert(offsetof(FJunoEvent_WeatherPhaseChanged, Location) == 0x000000, "Member 'FJunoEvent_WeatherPhaseChanged::Location' has a wrong offset!");
static_assert(offsetof(FJunoEvent_WeatherPhaseChanged, NewWeatherPhase) == 0x000008, "Member 'FJunoEvent_WeatherPhaseChanged::NewWeatherPhase' has a wrong offset!");
static_assert(offsetof(FJunoEvent_WeatherPhaseChanged, NextWeatherPhase) == 0x000040, "Member 'FJunoEvent_WeatherPhaseChanged::NextWeatherPhase' has a wrong offset!");

// ScriptStruct JunoGameNative.NewCraftingObjectMessage
// 0x0008 (0x0008 - 0x0000)
struct FNewCraftingObjectMessage final
{
public:
	class AActor*                                 CraftingObject;                                    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewCraftingObjectMessage) == 0x000008, "Wrong alignment on FNewCraftingObjectMessage");
static_assert(sizeof(FNewCraftingObjectMessage) == 0x000008, "Wrong size on FNewCraftingObjectMessage");
static_assert(offsetof(FNewCraftingObjectMessage, CraftingObject) == 0x000000, "Member 'FNewCraftingObjectMessage::CraftingObject' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIData_BaseType
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FSavedAIData_BaseType
{
};
#pragma pack(pop)
static_assert(alignof(FSavedAIData_BaseType) == 0x000001, "Wrong alignment on FSavedAIData_BaseType");
static_assert(sizeof(FSavedAIData_BaseType) == 0x000001, "Wrong size on FSavedAIData_BaseType");

// ScriptStruct JunoGameNative.SavedAIData_Merchant_StockEntry
// 0x000C (0x000C - 0x0000)
struct FSavedAIData_Merchant_StockEntry final
{
public:
	int32                                         StockQuantity;                                     // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        StockSaleItemId;                                   // 0x0004(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedAIData_Merchant_StockEntry) == 0x000004, "Wrong alignment on FSavedAIData_Merchant_StockEntry");
static_assert(sizeof(FSavedAIData_Merchant_StockEntry) == 0x00000C, "Wrong size on FSavedAIData_Merchant_StockEntry");
static_assert(offsetof(FSavedAIData_Merchant_StockEntry, StockQuantity) == 0x000000, "Member 'FSavedAIData_Merchant_StockEntry::StockQuantity' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Merchant_StockEntry, StockSaleItemId) == 0x000004, "Member 'FSavedAIData_Merchant_StockEntry::StockSaleItemId' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIData_Merchant
// 0x0020 (0x0020 - 0x0000)
struct FSavedAIData_Merchant final : public FSavedAIData_BaseType
{
public:
	struct FPrimaryAssetId                        WantItemId;                                        // 0x0000(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSavedAIData_Merchant_StockEntry> StockEntries;                                      // 0x0008(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	float                                         StockRefreshTimeRemaining;                         // 0x0018(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedAIData_Merchant) == 0x000008, "Wrong alignment on FSavedAIData_Merchant");
static_assert(sizeof(FSavedAIData_Merchant) == 0x000020, "Wrong size on FSavedAIData_Merchant");
static_assert(offsetof(FSavedAIData_Merchant, WantItemId) == 0x000000, "Member 'FSavedAIData_Merchant::WantItemId' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Merchant, StockEntries) == 0x000008, "Member 'FSavedAIData_Merchant::StockEntries' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Merchant, StockRefreshTimeRemaining) == 0x000018, "Member 'FSavedAIData_Merchant::StockRefreshTimeRemaining' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCampAwesomeStatsData
// 0x0014 (0x0014 - 0x0000)
struct FJunoCampAwesomeStatsData final
{
public:
	int32                                         CurrentAwesomePoints;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwesomeLevelFloor;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwesomeLevel;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAwesomeLevel;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromPersistence;                                // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoCampAwesomeStatsData) == 0x000004, "Wrong alignment on FJunoCampAwesomeStatsData");
static_assert(sizeof(FJunoCampAwesomeStatsData) == 0x000014, "Wrong size on FJunoCampAwesomeStatsData");
static_assert(offsetof(FJunoCampAwesomeStatsData, CurrentAwesomePoints) == 0x000000, "Member 'FJunoCampAwesomeStatsData::CurrentAwesomePoints' has a wrong offset!");
static_assert(offsetof(FJunoCampAwesomeStatsData, AwesomeLevelFloor) == 0x000004, "Member 'FJunoCampAwesomeStatsData::AwesomeLevelFloor' has a wrong offset!");
static_assert(offsetof(FJunoCampAwesomeStatsData, AwesomeLevel) == 0x000008, "Member 'FJunoCampAwesomeStatsData::AwesomeLevel' has a wrong offset!");
static_assert(offsetof(FJunoCampAwesomeStatsData, MaxAwesomeLevel) == 0x00000C, "Member 'FJunoCampAwesomeStatsData::MaxAwesomeLevel' has a wrong offset!");
static_assert(offsetof(FJunoCampAwesomeStatsData, bIsFromPersistence) == 0x000010, "Member 'FJunoCampAwesomeStatsData::bIsFromPersistence' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoFreeBuildToggleEvent
// 0x0004 (0x0004 - 0x0000)
struct FJunoFreeBuildToggleEvent final
{
public:
	bool                                          bIsFreeBuildEnabled;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsItemSpawnerEnabled;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerAllowedToFly;                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFreeBuildCostFilteringEnabled;                  // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoFreeBuildToggleEvent) == 0x000001, "Wrong alignment on FJunoFreeBuildToggleEvent");
static_assert(sizeof(FJunoFreeBuildToggleEvent) == 0x000004, "Wrong size on FJunoFreeBuildToggleEvent");
static_assert(offsetof(FJunoFreeBuildToggleEvent, bIsFreeBuildEnabled) == 0x000000, "Member 'FJunoFreeBuildToggleEvent::bIsFreeBuildEnabled' has a wrong offset!");
static_assert(offsetof(FJunoFreeBuildToggleEvent, bIsItemSpawnerEnabled) == 0x000001, "Member 'FJunoFreeBuildToggleEvent::bIsItemSpawnerEnabled' has a wrong offset!");
static_assert(offsetof(FJunoFreeBuildToggleEvent, bIsPlayerAllowedToFly) == 0x000002, "Member 'FJunoFreeBuildToggleEvent::bIsPlayerAllowedToFly' has a wrong offset!");
static_assert(offsetof(FJunoFreeBuildToggleEvent, bIsFreeBuildCostFilteringEnabled) == 0x000003, "Member 'FJunoFreeBuildToggleEvent::bIsFreeBuildCostFilteringEnabled' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAwesomeLevelChangeData
// 0x0018 (0x0018 - 0x0000)
struct FJunoAwesomeLevelChangeData final
{
public:
	int32                                         NewAwesomeLevel;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldAwesomeLevel;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentAwesomePoints;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AJunoCampActor*                         OwningCamp;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAwesomeLevelChangeData) == 0x000008, "Wrong alignment on FJunoAwesomeLevelChangeData");
static_assert(sizeof(FJunoAwesomeLevelChangeData) == 0x000018, "Wrong size on FJunoAwesomeLevelChangeData");
static_assert(offsetof(FJunoAwesomeLevelChangeData, NewAwesomeLevel) == 0x000000, "Member 'FJunoAwesomeLevelChangeData::NewAwesomeLevel' has a wrong offset!");
static_assert(offsetof(FJunoAwesomeLevelChangeData, OldAwesomeLevel) == 0x000004, "Member 'FJunoAwesomeLevelChangeData::OldAwesomeLevel' has a wrong offset!");
static_assert(offsetof(FJunoAwesomeLevelChangeData, CurrentAwesomePoints) == 0x000008, "Member 'FJunoAwesomeLevelChangeData::CurrentAwesomePoints' has a wrong offset!");
static_assert(offsetof(FJunoAwesomeLevelChangeData, OwningCamp) == 0x000010, "Member 'FJunoAwesomeLevelChangeData::OwningCamp' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_OpenInventoryMenuMessage
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_OpenInventoryMenuMessage final
{
public:
	class AFortPlayerController*                  SourceController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_OpenInventoryMenuMessage) == 0x000008, "Wrong alignment on FJunoEvent_OpenInventoryMenuMessage");
static_assert(sizeof(FJunoEvent_OpenInventoryMenuMessage) == 0x000008, "Wrong size on FJunoEvent_OpenInventoryMenuMessage");
static_assert(offsetof(FJunoEvent_OpenInventoryMenuMessage, SourceController) == 0x000000, "Member 'FJunoEvent_OpenInventoryMenuMessage::SourceController' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAwesomePointModificationData
// 0x0028 (0x0028 - 0x0000)
struct FJunoAwesomePointModificationData final
{
public:
	int32                                         AwesomePointAmount;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwesomePointsPostModification;                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoAwesomePointModificationContext          ModificationContext;                               // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AJunoCampActor*                         OwningCamp;                                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAwesomePointModificationData) == 0x000008, "Wrong alignment on FJunoAwesomePointModificationData");
static_assert(sizeof(FJunoAwesomePointModificationData) == 0x000028, "Wrong size on FJunoAwesomePointModificationData");
static_assert(offsetof(FJunoAwesomePointModificationData, AwesomePointAmount) == 0x000000, "Member 'FJunoAwesomePointModificationData::AwesomePointAmount' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePointModificationData, AwesomePointsPostModification) == 0x000004, "Member 'FJunoAwesomePointModificationData::AwesomePointsPostModification' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePointModificationData, SourceActor) == 0x000008, "Member 'FJunoAwesomePointModificationData::SourceActor' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePointModificationData, TargetActor) == 0x000010, "Member 'FJunoAwesomePointModificationData::TargetActor' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePointModificationData, ModificationContext) == 0x000018, "Member 'FJunoAwesomePointModificationData::ModificationContext' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePointModificationData, OwningCamp) == 0x000020, "Member 'FJunoAwesomePointModificationData::OwningCamp' has a wrong offset!");

// ScriptStruct JunoGameNative.CampRemovalEntry
// 0x0018 (0x0018 - 0x0000)
struct FCampRemovalEntry final
{
public:
	TWeakObjectPtr<class AJunoCampActor>          CampActor;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCampRemovalEntry) == 0x000004, "Wrong alignment on FCampRemovalEntry");
static_assert(sizeof(FCampRemovalEntry) == 0x000018, "Wrong size on FCampRemovalEntry");
static_assert(offsetof(FCampRemovalEntry, CampActor) == 0x000000, "Member 'FCampRemovalEntry::CampActor' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPlayerStats
// 0x0008 (0x0008 - 0x0000)
struct FJunoPlayerStats final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hunger;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPlayerStats) == 0x000004, "Wrong alignment on FJunoPlayerStats");
static_assert(sizeof(FJunoPlayerStats) == 0x000008, "Wrong size on FJunoPlayerStats");
static_assert(offsetof(FJunoPlayerStats, Health) == 0x000000, "Member 'FJunoPlayerStats::Health' has a wrong offset!");
static_assert(offsetof(FJunoPlayerStats, Hunger) == 0x000004, "Member 'FJunoPlayerStats::Hunger' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCampRemovalStatusData
// 0x000C (0x000C - 0x0000)
struct FJunoCampRemovalStatusData final
{
public:
	bool                                          bIsSoftRemoved;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingRealSecondsBeforeHardRemoval;             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialized;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoCampRemovalStatusData) == 0x000004, "Wrong alignment on FJunoCampRemovalStatusData");
static_assert(sizeof(FJunoCampRemovalStatusData) == 0x00000C, "Wrong size on FJunoCampRemovalStatusData");
static_assert(offsetof(FJunoCampRemovalStatusData, bIsSoftRemoved) == 0x000000, "Member 'FJunoCampRemovalStatusData::bIsSoftRemoved' has a wrong offset!");
static_assert(offsetof(FJunoCampRemovalStatusData, RemainingRealSecondsBeforeHardRemoval) == 0x000004, "Member 'FJunoCampRemovalStatusData::RemainingRealSecondsBeforeHardRemoval' has a wrong offset!");
static_assert(offsetof(FJunoCampRemovalStatusData, bIsInitialized) == 0x000008, "Member 'FJunoCampRemovalStatusData::bIsInitialized' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMoodStateData
// 0x0004 (0x0004 - 0x0000)
struct FJunoMoodStateData final
{
public:
	struct FGameplayTag                           MoodTag;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMoodStateData) == 0x000004, "Wrong alignment on FJunoMoodStateData");
static_assert(sizeof(FJunoMoodStateData) == 0x000004, "Wrong size on FJunoMoodStateData");
static_assert(offsetof(FJunoMoodStateData, MoodTag) == 0x000000, "Member 'FJunoMoodStateData::MoodTag' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRecruitmentObjectAssignedData
// 0x0080 (0x0080 - 0x0000)
struct FJunoRecruitmentObjectAssignedData final
{
public:
	struct FGuid                                  CampGuid;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           UniqueAIIdentifier;                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       PlayerNetId;                                       // 0x0018(0x0030)(BlueprintVisible, BlueprintReadOnly, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, SaveGame, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              NPCPortrait;                                       // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRecruitmentObjectAssignedData) == 0x000008, "Wrong alignment on FJunoRecruitmentObjectAssignedData");
static_assert(sizeof(FJunoRecruitmentObjectAssignedData) == 0x000080, "Wrong size on FJunoRecruitmentObjectAssignedData");
static_assert(offsetof(FJunoRecruitmentObjectAssignedData, CampGuid) == 0x000000, "Member 'FJunoRecruitmentObjectAssignedData::CampGuid' has a wrong offset!");
static_assert(offsetof(FJunoRecruitmentObjectAssignedData, UniqueAIIdentifier) == 0x000010, "Member 'FJunoRecruitmentObjectAssignedData::UniqueAIIdentifier' has a wrong offset!");
static_assert(offsetof(FJunoRecruitmentObjectAssignedData, PlayerNetId) == 0x000018, "Member 'FJunoRecruitmentObjectAssignedData::PlayerNetId' has a wrong offset!");
static_assert(offsetof(FJunoRecruitmentObjectAssignedData, DisplayText) == 0x000048, "Member 'FJunoRecruitmentObjectAssignedData::DisplayText' has a wrong offset!");
static_assert(offsetof(FJunoRecruitmentObjectAssignedData, NPCPortrait) == 0x000060, "Member 'FJunoRecruitmentObjectAssignedData::NPCPortrait' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAwesomeUpgradeResourceCost
// 0x0028 (0x0028 - 0x0000)
struct FJunoAwesomeUpgradeResourceCost final
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     ResourceCostItemDefinition;                        // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAwesomeUpgradeResourceCost) == 0x000008, "Wrong alignment on FJunoAwesomeUpgradeResourceCost");
static_assert(sizeof(FJunoAwesomeUpgradeResourceCost) == 0x000028, "Wrong size on FJunoAwesomeUpgradeResourceCost");
static_assert(offsetof(FJunoAwesomeUpgradeResourceCost, ResourceCostItemDefinition) == 0x000000, "Member 'FJunoAwesomeUpgradeResourceCost::ResourceCostItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoAwesomeUpgradeResourceCost, ItemAmount) == 0x000020, "Member 'FJunoAwesomeUpgradeResourceCost::ItemAmount' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWeatherLocationChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct FJunoWeatherLocationChangedEvent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoWeatherLocation                   OldLocation;                                       // 0x0008(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoWeatherLocation                   NewLocation;                                       // 0x000A(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWeatherLocationChangedEvent) == 0x000008, "Wrong alignment on FJunoWeatherLocationChangedEvent");
static_assert(sizeof(FJunoWeatherLocationChangedEvent) == 0x000010, "Wrong size on FJunoWeatherLocationChangedEvent");
static_assert(offsetof(FJunoWeatherLocationChangedEvent, Actor) == 0x000000, "Member 'FJunoWeatherLocationChangedEvent::Actor' has a wrong offset!");
static_assert(offsetof(FJunoWeatherLocationChangedEvent, OldLocation) == 0x000008, "Member 'FJunoWeatherLocationChangedEvent::OldLocation' has a wrong offset!");
static_assert(offsetof(FJunoWeatherLocationChangedEvent, NewLocation) == 0x00000A, "Member 'FJunoWeatherLocationChangedEvent::NewLocation' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMCPItemPlacementStatusAlertData
// 0x0008 (0x0008 - 0x0000)
struct FJunoMCPItemPlacementStatusAlertData final
{
public:
	class UFortUINotification*                    Notification;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMCPItemPlacementStatusAlertData) == 0x000008, "Wrong alignment on FJunoMCPItemPlacementStatusAlertData");
static_assert(sizeof(FJunoMCPItemPlacementStatusAlertData) == 0x000008, "Wrong size on FJunoMCPItemPlacementStatusAlertData");
static_assert(offsetof(FJunoMCPItemPlacementStatusAlertData, Notification) == 0x000000, "Member 'FJunoMCPItemPlacementStatusAlertData::Notification' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoItemTransferRequest
// 0x00B8 (0x00B8 - 0x0000)
struct FJunoItemTransferRequest final
{
public:
	struct FJunoItemSlot                          SourceItemSlot;                                    // 0x0000(0x0050)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoItemSlot                          DestinationItemSlot;                               // 0x0050(0x0050)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoInventoryComponent*                SourceInventoryComponent;                          // 0x00A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoInventoryComponent*                DestinationInventoryComponent;                     // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTopOffExistingStacks;                             // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoItemTransferRequest) == 0x000008, "Wrong alignment on FJunoItemTransferRequest");
static_assert(sizeof(FJunoItemTransferRequest) == 0x0000B8, "Wrong size on FJunoItemTransferRequest");
static_assert(offsetof(FJunoItemTransferRequest, SourceItemSlot) == 0x000000, "Member 'FJunoItemTransferRequest::SourceItemSlot' has a wrong offset!");
static_assert(offsetof(FJunoItemTransferRequest, DestinationItemSlot) == 0x000050, "Member 'FJunoItemTransferRequest::DestinationItemSlot' has a wrong offset!");
static_assert(offsetof(FJunoItemTransferRequest, SourceInventoryComponent) == 0x0000A0, "Member 'FJunoItemTransferRequest::SourceInventoryComponent' has a wrong offset!");
static_assert(offsetof(FJunoItemTransferRequest, DestinationInventoryComponent) == 0x0000A8, "Member 'FJunoItemTransferRequest::DestinationInventoryComponent' has a wrong offset!");
static_assert(offsetof(FJunoItemTransferRequest, Count) == 0x0000B0, "Member 'FJunoItemTransferRequest::Count' has a wrong offset!");
static_assert(offsetof(FJunoItemTransferRequest, bTopOffExistingStacks) == 0x0000B4, "Member 'FJunoItemTransferRequest::bTopOffExistingStacks' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAwesomePlacementConfigTableRow
// 0x0030 (0x0038 - 0x0008)
struct FJunoAwesomePlacementConfigTableRow final : public FTableRowBase
{
public:
	EJunoAwesomePlacementConfigType               PlacementConfigType;                               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UJunoBuildInstructionsItemDefinition> ItemDefinition;                                    // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CraftingRowName;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwesomePointsToContribute;                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAwesomePlacementConfigTableRow) == 0x000008, "Wrong alignment on FJunoAwesomePlacementConfigTableRow");
static_assert(sizeof(FJunoAwesomePlacementConfigTableRow) == 0x000038, "Wrong size on FJunoAwesomePlacementConfigTableRow");
static_assert(offsetof(FJunoAwesomePlacementConfigTableRow, PlacementConfigType) == 0x000008, "Member 'FJunoAwesomePlacementConfigTableRow::PlacementConfigType' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePlacementConfigTableRow, ItemDefinition) == 0x000010, "Member 'FJunoAwesomePlacementConfigTableRow::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePlacementConfigTableRow, CraftingRowName) == 0x000030, "Member 'FJunoAwesomePlacementConfigTableRow::CraftingRowName' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePlacementConfigTableRow, AwesomePointsToContribute) == 0x000034, "Member 'FJunoAwesomePlacementConfigTableRow::AwesomePointsToContribute' has a wrong offset!");

// ScriptStruct JunoGameNative.GuidedBuildingMessageBase
// 0x0008 (0x0008 - 0x0000)
struct FGuidedBuildingMessageBase
{
public:
	TWeakObjectPtr<class AJunoGuidedBuildingActor> GuidedBuildingActor;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuidedBuildingMessageBase) == 0x000004, "Wrong alignment on FGuidedBuildingMessageBase");
static_assert(sizeof(FGuidedBuildingMessageBase) == 0x000008, "Wrong size on FGuidedBuildingMessageBase");
static_assert(offsetof(FGuidedBuildingMessageBase, GuidedBuildingActor) == 0x000000, "Member 'FGuidedBuildingMessageBase::GuidedBuildingActor' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoStageKey
// 0x0008 (0x0008 - 0x0000)
struct FJunoStageKey final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageIndex;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoStageKey) == 0x000004, "Wrong alignment on FJunoStageKey");
static_assert(sizeof(FJunoStageKey) == 0x000008, "Wrong size on FJunoStageKey");
static_assert(offsetof(FJunoStageKey, SectionIndex) == 0x000000, "Member 'FJunoStageKey::SectionIndex' has a wrong offset!");
static_assert(offsetof(FJunoStageKey, StageIndex) == 0x000004, "Member 'FJunoStageKey::StageIndex' has a wrong offset!");

// ScriptStruct JunoGameNative.GuidedBuildingUpdate
// 0x0038 (0x0040 - 0x0008)
struct FGuidedBuildingUpdate final : public FGuidedBuildingMessageBase
{
public:
	struct FJunoStageKey                          StageKey;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoStageKey                          CurrentStageKey;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TotalNumberOfStagesInSection;                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumberOfSections;                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentStageInSet;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumberOfStagesInSet;                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentNumberOfSnapsInStage;                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumberOfSnapsInStage;                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentNumberOfSnapsInSection;                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumberOfSnapsInSection;                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentNumberOfSnapsInSet;                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumberOfSnapsInSet;                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuidedBuildingUpdate) == 0x000004, "Wrong alignment on FGuidedBuildingUpdate");
static_assert(sizeof(FGuidedBuildingUpdate) == 0x000040, "Wrong size on FGuidedBuildingUpdate");
static_assert(offsetof(FGuidedBuildingUpdate, StageKey) == 0x000008, "Member 'FGuidedBuildingUpdate::StageKey' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, CurrentStageKey) == 0x000010, "Member 'FGuidedBuildingUpdate::CurrentStageKey' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, TotalNumberOfStagesInSection) == 0x000018, "Member 'FGuidedBuildingUpdate::TotalNumberOfStagesInSection' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, TotalNumberOfSections) == 0x00001C, "Member 'FGuidedBuildingUpdate::TotalNumberOfSections' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, CurrentStageInSet) == 0x000020, "Member 'FGuidedBuildingUpdate::CurrentStageInSet' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, TotalNumberOfStagesInSet) == 0x000024, "Member 'FGuidedBuildingUpdate::TotalNumberOfStagesInSet' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, CurrentNumberOfSnapsInStage) == 0x000028, "Member 'FGuidedBuildingUpdate::CurrentNumberOfSnapsInStage' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, TotalNumberOfSnapsInStage) == 0x00002C, "Member 'FGuidedBuildingUpdate::TotalNumberOfSnapsInStage' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, CurrentNumberOfSnapsInSection) == 0x000030, "Member 'FGuidedBuildingUpdate::CurrentNumberOfSnapsInSection' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, TotalNumberOfSnapsInSection) == 0x000034, "Member 'FGuidedBuildingUpdate::TotalNumberOfSnapsInSection' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, CurrentNumberOfSnapsInSet) == 0x000038, "Member 'FGuidedBuildingUpdate::CurrentNumberOfSnapsInSet' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingUpdate, TotalNumberOfSnapsInSet) == 0x00003C, "Member 'FGuidedBuildingUpdate::TotalNumberOfSnapsInSet' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_QuickbuildRecipeChanged
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_QuickbuildRecipeChanged final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_QuickbuildRecipeChanged) == 0x000001, "Wrong alignment on FJunoEvent_QuickbuildRecipeChanged");
static_assert(sizeof(FJunoEvent_QuickbuildRecipeChanged) == 0x000001, "Wrong size on FJunoEvent_QuickbuildRecipeChanged");

// ScriptStruct JunoGameNative.JunoPersistentPlayspaceLevelRegistryEntry
// 0x0024 (0x0024 - 0x0000)
struct FJunoPersistentPlayspaceLevelRegistryEntry final
{
public:
	TWeakObjectPtr<class AJunoPersistentPlayspace> PersistentPlayspaceWeakPtr;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x1C];                                       // 0x0008(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoPersistentPlayspaceLevelRegistryEntry) == 0x000004, "Wrong alignment on FJunoPersistentPlayspaceLevelRegistryEntry");
static_assert(sizeof(FJunoPersistentPlayspaceLevelRegistryEntry) == 0x000024, "Wrong size on FJunoPersistentPlayspaceLevelRegistryEntry");
static_assert(offsetof(FJunoPersistentPlayspaceLevelRegistryEntry, PersistentPlayspaceWeakPtr) == 0x000000, "Member 'FJunoPersistentPlayspaceLevelRegistryEntry::PersistentPlayspaceWeakPtr' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_InventoryItemSelected
// 0x001C (0x001C - 0x0000)
struct FJunoEvent_InventoryItemSelected final
{
public:
	struct FGuid                                  ItemSelected;                                      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0xC];                                       // 0x0010(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_InventoryItemSelected) == 0x000004, "Wrong alignment on FJunoEvent_InventoryItemSelected");
static_assert(sizeof(FJunoEvent_InventoryItemSelected) == 0x00001C, "Wrong size on FJunoEvent_InventoryItemSelected");
static_assert(offsetof(FJunoEvent_InventoryItemSelected, ItemSelected) == 0x000000, "Member 'FJunoEvent_InventoryItemSelected::ItemSelected' has a wrong offset!");

// ScriptStruct JunoGameNative.AssembledMeshSchemaData_AnimDataAssets
// 0x0050 (0x0050 - 0x0000)
struct FAssembledMeshSchemaData_AnimDataAssets final : public FAssembledMeshSchemaData
{
public:
	TMap<class FName, class UPrimaryDataAsset*>   DataAssetMap;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssembledMeshSchemaData_AnimDataAssets) == 0x000008, "Wrong alignment on FAssembledMeshSchemaData_AnimDataAssets");
static_assert(sizeof(FAssembledMeshSchemaData_AnimDataAssets) == 0x000050, "Wrong size on FAssembledMeshSchemaData_AnimDataAssets");
static_assert(offsetof(FAssembledMeshSchemaData_AnimDataAssets, DataAssetMap) == 0x000000, "Member 'FAssembledMeshSchemaData_AnimDataAssets::DataAssetMap' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBiomeInfoQueryResult
// 0x0028 (0x0028 - 0x0000)
struct FJunoBiomeInfoQueryResult final
{
public:
	EJunoBiome                                    PrimaryBiome;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBiome                                    SecondaryBiome;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBiomeHabitat                             PrimaryHabitat;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBiomeHabitat                             SecondaryHabitat;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoCaveType                                 CaveType;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BiomeMix;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HabitatMix;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWater;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaterDepth;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterSurfaceHeight;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterBody*                             WaterBody;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBiomeInfoQueryResult) == 0x000008, "Wrong alignment on FJunoBiomeInfoQueryResult");
static_assert(sizeof(FJunoBiomeInfoQueryResult) == 0x000028, "Wrong size on FJunoBiomeInfoQueryResult");
static_assert(offsetof(FJunoBiomeInfoQueryResult, PrimaryBiome) == 0x000000, "Member 'FJunoBiomeInfoQueryResult::PrimaryBiome' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, SecondaryBiome) == 0x000001, "Member 'FJunoBiomeInfoQueryResult::SecondaryBiome' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, PrimaryHabitat) == 0x000002, "Member 'FJunoBiomeInfoQueryResult::PrimaryHabitat' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, SecondaryHabitat) == 0x000003, "Member 'FJunoBiomeInfoQueryResult::SecondaryHabitat' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, CaveType) == 0x000004, "Member 'FJunoBiomeInfoQueryResult::CaveType' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, BiomeMix) == 0x000008, "Member 'FJunoBiomeInfoQueryResult::BiomeMix' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, HabitatMix) == 0x00000C, "Member 'FJunoBiomeInfoQueryResult::HabitatMix' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, bIsWater) == 0x000010, "Member 'FJunoBiomeInfoQueryResult::bIsWater' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, WaterDepth) == 0x000014, "Member 'FJunoBiomeInfoQueryResult::WaterDepth' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, WaterSurfaceHeight) == 0x000018, "Member 'FJunoBiomeInfoQueryResult::WaterSurfaceHeight' has a wrong offset!");
static_assert(offsetof(FJunoBiomeInfoQueryResult, WaterBody) == 0x000020, "Member 'FJunoBiomeInfoQueryResult::WaterBody' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_InventoryMenuOpen
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_InventoryMenuOpen final
{
public:
	class AActor*                                 InventoryObject;                                   // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_InventoryMenuOpen) == 0x000008, "Wrong alignment on FJunoEvent_InventoryMenuOpen");
static_assert(sizeof(FJunoEvent_InventoryMenuOpen) == 0x000008, "Wrong size on FJunoEvent_InventoryMenuOpen");
static_assert(offsetof(FJunoEvent_InventoryMenuOpen, InventoryObject) == 0x000000, "Member 'FJunoEvent_InventoryMenuOpen::InventoryObject' has a wrong offset!");

// ScriptStruct JunoGameNative.POIEncounterDataForCamps
// 0x0040 (0x0040 - 0x0000)
struct FPOIEncounterDataForCamps final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   Bounds;                                            // 0x0008(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPOIEncounterDataForCamps) == 0x000008, "Wrong alignment on FPOIEncounterDataForCamps");
static_assert(sizeof(FPOIEncounterDataForCamps) == 0x000040, "Wrong size on FPOIEncounterDataForCamps");
static_assert(offsetof(FPOIEncounterDataForCamps, Bounds) == 0x000008, "Member 'FPOIEncounterDataForCamps::Bounds' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInventoryHandle
// 0x0024 (0x0024 - 0x0000)
struct FJunoInventoryHandle final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AJunoInventory>          Inventory;                                         // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0xC];                                       // 0x0018(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoInventoryHandle) == 0x000004, "Wrong alignment on FJunoInventoryHandle");
static_assert(sizeof(FJunoInventoryHandle) == 0x000024, "Wrong size on FJunoInventoryHandle");
static_assert(offsetof(FJunoInventoryHandle, Guid) == 0x000000, "Member 'FJunoInventoryHandle::Guid' has a wrong offset!");
static_assert(offsetof(FJunoInventoryHandle, Inventory) == 0x000010, "Member 'FJunoInventoryHandle::Inventory' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPlayerCheckpoint
// 0x0038 (0x0038 - 0x0000)
struct FJunoPlayerCheckpoint final
{
public:
	struct FGuid                                  CheckpointGUID;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 CheckpointActor;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CheckpointLocation;                                // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCheckpointActor;                               // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoPlayerCheckpoint) == 0x000008, "Wrong alignment on FJunoPlayerCheckpoint");
static_assert(sizeof(FJunoPlayerCheckpoint) == 0x000038, "Wrong size on FJunoPlayerCheckpoint");
static_assert(offsetof(FJunoPlayerCheckpoint, CheckpointGUID) == 0x000000, "Member 'FJunoPlayerCheckpoint::CheckpointGUID' has a wrong offset!");
static_assert(offsetof(FJunoPlayerCheckpoint, CheckpointActor) == 0x000010, "Member 'FJunoPlayerCheckpoint::CheckpointActor' has a wrong offset!");
static_assert(offsetof(FJunoPlayerCheckpoint, CheckpointLocation) == 0x000018, "Member 'FJunoPlayerCheckpoint::CheckpointLocation' has a wrong offset!");
static_assert(offsetof(FJunoPlayerCheckpoint, bHasCheckpointActor) == 0x000030, "Member 'FJunoPlayerCheckpoint::bHasCheckpointActor' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPlayerSaveData
// 0x00E8 (0x00E8 - 0x0000)
struct FJunoPlayerSaveData final
{
public:
	struct FVector                                SpawnPosition;                                     // 0x0000(0x0018)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginalSpawnPosition;                             // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoInventoryHandle                   InventoryHandle;                                   // 0x0048(0x0024)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CompletedFirstTimeConversationNPCIdentifiers;      // 0x0070(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	int32                                         WorldVisitCount;                                   // 0x0080(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoPlayerStats                       PlayerStats;                                       // 0x0084(0x0008)(BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoPlayerCheckpoint                  CheckpointInfo;                                    // 0x0090(0x0038)(BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CampCreatedCount;                                  // 0x00C8(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastCaveTeleporterLocation;                        // 0x00D0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPlayerSaveData) == 0x000008, "Wrong alignment on FJunoPlayerSaveData");
static_assert(sizeof(FJunoPlayerSaveData) == 0x0000E8, "Wrong size on FJunoPlayerSaveData");
static_assert(offsetof(FJunoPlayerSaveData, SpawnPosition) == 0x000000, "Member 'FJunoPlayerSaveData::SpawnPosition' has a wrong offset!");
static_assert(offsetof(FJunoPlayerSaveData, OriginalSpawnPosition) == 0x000018, "Member 'FJunoPlayerSaveData::OriginalSpawnPosition' has a wrong offset!");
static_assert(offsetof(FJunoPlayerSaveData, Rotation) == 0x000030, "Member 'FJunoPlayerSaveData::Rotation' has a wrong offset!");
static_assert(offsetof(FJunoPlayerSaveData, InventoryHandle) == 0x000048, "Member 'FJunoPlayerSaveData::InventoryHandle' has a wrong offset!");
static_assert(offsetof(FJunoPlayerSaveData, CompletedFirstTimeConversationNPCIdentifiers) == 0x000070, "Member 'FJunoPlayerSaveData::CompletedFirstTimeConversationNPCIdentifiers' has a wrong offset!");
static_assert(offsetof(FJunoPlayerSaveData, WorldVisitCount) == 0x000080, "Member 'FJunoPlayerSaveData::WorldVisitCount' has a wrong offset!");
static_assert(offsetof(FJunoPlayerSaveData, PlayerStats) == 0x000084, "Member 'FJunoPlayerSaveData::PlayerStats' has a wrong offset!");
static_assert(offsetof(FJunoPlayerSaveData, CheckpointInfo) == 0x000090, "Member 'FJunoPlayerSaveData::CheckpointInfo' has a wrong offset!");
static_assert(offsetof(FJunoPlayerSaveData, CampCreatedCount) == 0x0000C8, "Member 'FJunoPlayerSaveData::CampCreatedCount' has a wrong offset!");
static_assert(offsetof(FJunoPlayerSaveData, LastCaveTeleporterLocation) == 0x0000D0, "Member 'FJunoPlayerSaveData::LastCaveTeleporterLocation' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_PrimaryContentPoppedMessage
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_PrimaryContentPoppedMessage final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_PrimaryContentPoppedMessage) == 0x000001, "Wrong alignment on FJunoEvent_PrimaryContentPoppedMessage");
static_assert(sizeof(FJunoEvent_PrimaryContentPoppedMessage) == 0x000001, "Wrong size on FJunoEvent_PrimaryContentPoppedMessage");

// ScriptStruct JunoGameNative.JunoWorldConditionPawnType
// 0x0010 (0x0020 - 0x0010)
struct FJunoWorldConditionPawnType final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          PawnRef;                                           // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         AnyPawnType;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldConditionPawnType) == 0x000008, "Wrong alignment on FJunoWorldConditionPawnType");
static_assert(sizeof(FJunoWorldConditionPawnType) == 0x000020, "Wrong size on FJunoWorldConditionPawnType");
static_assert(offsetof(FJunoWorldConditionPawnType, PawnRef) == 0x000010, "Member 'FJunoWorldConditionPawnType::PawnRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionPawnType, AnyPawnType) == 0x000018, "Member 'FJunoWorldConditionPawnType::AnyPawnType' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_CloseHudMessage
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_CloseHudMessage final
{
public:
	class AFortPlayerController*                  SourceController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_CloseHudMessage) == 0x000008, "Wrong alignment on FJunoEvent_CloseHudMessage");
static_assert(sizeof(FJunoEvent_CloseHudMessage) == 0x000008, "Wrong size on FJunoEvent_CloseHudMessage");
static_assert(offsetof(FJunoEvent_CloseHudMessage, SourceController) == 0x000000, "Member 'FJunoEvent_CloseHudMessage::SourceController' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_RootPlayspaceReady
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_RootPlayspaceReady final
{
public:
	class AJunoRootPlayspace*                     Playspace;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_RootPlayspaceReady) == 0x000008, "Wrong alignment on FJunoEvent_RootPlayspaceReady");
static_assert(sizeof(FJunoEvent_RootPlayspaceReady) == 0x000008, "Wrong size on FJunoEvent_RootPlayspaceReady");
static_assert(offsetof(FJunoEvent_RootPlayspaceReady, Playspace) == 0x000000, "Member 'FJunoEvent_RootPlayspaceReady::Playspace' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_BuildingExited
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_BuildingExited final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_BuildingExited) == 0x000001, "Wrong alignment on FJunoEvent_BuildingExited");
static_assert(sizeof(FJunoEvent_BuildingExited) == 0x000001, "Wrong size on FJunoEvent_BuildingExited");

// ScriptStruct JunoGameNative.JunoEvent_OnInventoryFull
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_OnInventoryFull final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_OnInventoryFull) == 0x000001, "Wrong alignment on FJunoEvent_OnInventoryFull");
static_assert(sizeof(FJunoEvent_OnInventoryFull) == 0x000001, "Wrong size on FJunoEvent_OnInventoryFull");

// ScriptStruct JunoGameNative.JunoTakeItemRequest
// 0x0078 (0x0078 - 0x0000)
struct FJunoTakeItemRequest final
{
public:
	struct FJunoItemSlot                          SourceItemSlot;                                    // 0x0000(0x0050)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoInventoryComponent*                SourceInventoryComponent;                          // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoInventoryComponent*                DestinationInventoryComponent;                     // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   PreferredDestinationGroupOrder;                    // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoTakeItemRequest) == 0x000008, "Wrong alignment on FJunoTakeItemRequest");
static_assert(sizeof(FJunoTakeItemRequest) == 0x000078, "Wrong size on FJunoTakeItemRequest");
static_assert(offsetof(FJunoTakeItemRequest, SourceItemSlot) == 0x000000, "Member 'FJunoTakeItemRequest::SourceItemSlot' has a wrong offset!");
static_assert(offsetof(FJunoTakeItemRequest, SourceInventoryComponent) == 0x000050, "Member 'FJunoTakeItemRequest::SourceInventoryComponent' has a wrong offset!");
static_assert(offsetof(FJunoTakeItemRequest, DestinationInventoryComponent) == 0x000058, "Member 'FJunoTakeItemRequest::DestinationInventoryComponent' has a wrong offset!");
static_assert(offsetof(FJunoTakeItemRequest, Count) == 0x000060, "Member 'FJunoTakeItemRequest::Count' has a wrong offset!");
static_assert(offsetof(FJunoTakeItemRequest, PreferredDestinationGroupOrder) == 0x000068, "Member 'FJunoTakeItemRequest::PreferredDestinationGroupOrder' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct FJunoSlotIndex final
{
public:
	EJunoBuildModeType                            BuildModeType;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoSlotIndex) == 0x000004, "Wrong alignment on FJunoSlotIndex");
static_assert(sizeof(FJunoSlotIndex) == 0x000008, "Wrong size on FJunoSlotIndex");
static_assert(offsetof(FJunoSlotIndex, BuildModeType) == 0x000000, "Member 'FJunoSlotIndex::BuildModeType' has a wrong offset!");
static_assert(offsetof(FJunoSlotIndex, Index) == 0x000004, "Member 'FJunoSlotIndex::Index' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoSelectedSlotData
// 0x000C (0x000C - 0x0000)
struct FJunoSelectedSlotData final
{
public:
	struct FGameplayTag                           GroupTag;                                          // 0x0000(0x0004)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowIndex;                                          // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnIndex;                                       // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoSelectedSlotData) == 0x000004, "Wrong alignment on FJunoSelectedSlotData");
static_assert(sizeof(FJunoSelectedSlotData) == 0x00000C, "Wrong size on FJunoSelectedSlotData");
static_assert(offsetof(FJunoSelectedSlotData, GroupTag) == 0x000000, "Member 'FJunoSelectedSlotData::GroupTag' has a wrong offset!");
static_assert(offsetof(FJunoSelectedSlotData, RowIndex) == 0x000004, "Member 'FJunoSelectedSlotData::RowIndex' has a wrong offset!");
static_assert(offsetof(FJunoSelectedSlotData, ColumnIndex) == 0x000008, "Member 'FJunoSelectedSlotData::ColumnIndex' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoConnectivityGraphPFW_PersistentInfo
// 0x0108 (0x0108 - 0x0000)
struct FJunoConnectivityGraphPFW_PersistentInfo final
{
public:
	struct FSerializableConnectivityGraph         SavedConnectivityData;                             // 0x0000(0x0108)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoConnectivityGraphPFW_PersistentInfo) == 0x000008, "Wrong alignment on FJunoConnectivityGraphPFW_PersistentInfo");
static_assert(sizeof(FJunoConnectivityGraphPFW_PersistentInfo) == 0x000108, "Wrong size on FJunoConnectivityGraphPFW_PersistentInfo");
static_assert(offsetof(FJunoConnectivityGraphPFW_PersistentInfo, SavedConnectivityData) == 0x000000, "Member 'FJunoConnectivityGraphPFW_PersistentInfo::SavedConnectivityData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRecipeMessageData
// 0x0010 (0x0010 - 0x0000)
struct FJunoRecipeMessageData final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       DiscoveredByPlayerState;                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRecipeMessageData) == 0x000008, "Wrong alignment on FJunoRecipeMessageData");
static_assert(sizeof(FJunoRecipeMessageData) == 0x000010, "Wrong size on FJunoRecipeMessageData");
static_assert(offsetof(FJunoRecipeMessageData, RowName) == 0x000000, "Member 'FJunoRecipeMessageData::RowName' has a wrong offset!");
static_assert(offsetof(FJunoRecipeMessageData, DiscoveredByPlayerState) == 0x000008, "Member 'FJunoRecipeMessageData::DiscoveredByPlayerState' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRecipeVisibleMessage
// 0x0010 (0x0010 - 0x0000)
struct FJunoRecipeVisibleMessage final
{
public:
	TArray<struct FJunoRecipeMessageData>         VisibleRecipes;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRecipeVisibleMessage) == 0x000008, "Wrong alignment on FJunoRecipeVisibleMessage");
static_assert(sizeof(FJunoRecipeVisibleMessage) == 0x000010, "Wrong size on FJunoRecipeVisibleMessage");
static_assert(offsetof(FJunoRecipeVisibleMessage, VisibleRecipes) == 0x000000, "Member 'FJunoRecipeVisibleMessage::VisibleRecipes' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInventoryConfig
// 0x0018 (0x0018 - 0x0000)
struct FJunoInventoryConfig final
{
public:
	TArray<struct FJunoInventoryGroupConfig>      InventoryGroupConfigs;                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0010(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPersistent;                                     // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoInventoryConfig) == 0x000008, "Wrong alignment on FJunoInventoryConfig");
static_assert(sizeof(FJunoInventoryConfig) == 0x000018, "Wrong size on FJunoInventoryConfig");
static_assert(offsetof(FJunoInventoryConfig, InventoryGroupConfigs) == 0x000000, "Member 'FJunoInventoryConfig::InventoryGroupConfigs' has a wrong offset!");
static_assert(offsetof(FJunoInventoryConfig, GameplayTag) == 0x000010, "Member 'FJunoInventoryConfig::GameplayTag' has a wrong offset!");
static_assert(offsetof(FJunoInventoryConfig, bIsPersistent) == 0x000014, "Member 'FJunoInventoryConfig::bIsPersistent' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_PlacementData
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_PlacementData final
{
public:
	bool                                          bQuickBuild;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_PlacementData) == 0x000001, "Wrong alignment on FJunoEvent_PlacementData");
static_assert(sizeof(FJunoEvent_PlacementData) == 0x000001, "Wrong size on FJunoEvent_PlacementData");
static_assert(offsetof(FJunoEvent_PlacementData, bQuickBuild) == 0x000000, "Member 'FJunoEvent_PlacementData::bQuickBuild' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_PlacementStarted
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_PlacementStarted final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_PlacementStarted) == 0x000001, "Wrong alignment on FJunoEvent_PlacementStarted");
static_assert(sizeof(FJunoEvent_PlacementStarted) == 0x000001, "Wrong size on FJunoEvent_PlacementStarted");

// ScriptStruct JunoGameNative.JunoEvent_QuickBuildSelectionResult
// 0x0004 (0x0004 - 0x0000)
struct FJunoEvent_QuickBuildSelectionResult final
{
public:
	class FName                                   SelectedRecipe;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_QuickBuildSelectionResult) == 0x000004, "Wrong alignment on FJunoEvent_QuickBuildSelectionResult");
static_assert(sizeof(FJunoEvent_QuickBuildSelectionResult) == 0x000004, "Wrong size on FJunoEvent_QuickBuildSelectionResult");
static_assert(offsetof(FJunoEvent_QuickBuildSelectionResult, SelectedRecipe) == 0x000000, "Member 'FJunoEvent_QuickBuildSelectionResult::SelectedRecipe' has a wrong offset!");

// ScriptStruct JunoGameNative.BuildingRecipeListItemSelected
// 0x0008 (0x0008 - 0x0000)
struct FBuildingRecipeListItemSelected final
{
public:
	class FName                                   RecipeName;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCraft;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingRecipeListItemSelected) == 0x000004, "Wrong alignment on FBuildingRecipeListItemSelected");
static_assert(sizeof(FBuildingRecipeListItemSelected) == 0x000008, "Wrong size on FBuildingRecipeListItemSelected");
static_assert(offsetof(FBuildingRecipeListItemSelected, RecipeName) == 0x000000, "Member 'FBuildingRecipeListItemSelected::RecipeName' has a wrong offset!");
static_assert(offsetof(FBuildingRecipeListItemSelected, bCanCraft) == 0x000004, "Member 'FBuildingRecipeListItemSelected::bCanCraft' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_MCPItemPlacedInNewWorld
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_MCPItemPlacedInNewWorld final
{
public:
	int32                                         RemainingWorlds;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalAllowedWorlds;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_MCPItemPlacedInNewWorld) == 0x000004, "Wrong alignment on FJunoEvent_MCPItemPlacedInNewWorld");
static_assert(sizeof(FJunoEvent_MCPItemPlacedInNewWorld) == 0x000008, "Wrong size on FJunoEvent_MCPItemPlacedInNewWorld");
static_assert(offsetof(FJunoEvent_MCPItemPlacedInNewWorld, RemainingWorlds) == 0x000000, "Member 'FJunoEvent_MCPItemPlacedInNewWorld::RemainingWorlds' has a wrong offset!");
static_assert(offsetof(FJunoEvent_MCPItemPlacedInNewWorld, TotalAllowedWorlds) == 0x000004, "Member 'FJunoEvent_MCPItemPlacedInNewWorld::TotalAllowedWorlds' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_InputMessage
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_InputMessage final
{
public:
	class AFortPlayerController*                  SourceController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_InputMessage) == 0x000008, "Wrong alignment on FJunoEvent_InputMessage");
static_assert(sizeof(FJunoEvent_InputMessage) == 0x000008, "Wrong size on FJunoEvent_InputMessage");
static_assert(offsetof(FJunoEvent_InputMessage, SourceController) == 0x000000, "Member 'FJunoEvent_InputMessage::SourceController' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_OpenBuildingMenuMessage
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_OpenBuildingMenuMessage final
{
public:
	class AFortPlayerController*                  SourceController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_OpenBuildingMenuMessage) == 0x000008, "Wrong alignment on FJunoEvent_OpenBuildingMenuMessage");
static_assert(sizeof(FJunoEvent_OpenBuildingMenuMessage) == 0x000008, "Wrong size on FJunoEvent_OpenBuildingMenuMessage");
static_assert(offsetof(FJunoEvent_OpenBuildingMenuMessage, SourceController) == 0x000000, "Member 'FJunoEvent_OpenBuildingMenuMessage::SourceController' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_OpenMapMenuMessage
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_OpenMapMenuMessage final
{
public:
	class AFortPlayerController*                  SourceController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_OpenMapMenuMessage) == 0x000008, "Wrong alignment on FJunoEvent_OpenMapMenuMessage");
static_assert(sizeof(FJunoEvent_OpenMapMenuMessage) == 0x000008, "Wrong size on FJunoEvent_OpenMapMenuMessage");
static_assert(offsetof(FJunoEvent_OpenMapMenuMessage, SourceController) == 0x000000, "Member 'FJunoEvent_OpenMapMenuMessage::SourceController' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_OpenShopMenuMessage
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_OpenShopMenuMessage final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_OpenShopMenuMessage) == 0x000001, "Wrong alignment on FJunoEvent_OpenShopMenuMessage");
static_assert(sizeof(FJunoEvent_OpenShopMenuMessage) == 0x000001, "Wrong size on FJunoEvent_OpenShopMenuMessage");

// ScriptStruct JunoGameNative.JunoEvent_CloseShopMenuMessage
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_CloseShopMenuMessage final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_CloseShopMenuMessage) == 0x000001, "Wrong alignment on FJunoEvent_CloseShopMenuMessage");
static_assert(sizeof(FJunoEvent_CloseShopMenuMessage) == 0x000001, "Wrong size on FJunoEvent_CloseShopMenuMessage");

// ScriptStruct JunoGameNative.JunoEvent_OpenEngagementMenuMessage
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_OpenEngagementMenuMessage final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_OpenEngagementMenuMessage) == 0x000001, "Wrong alignment on FJunoEvent_OpenEngagementMenuMessage");
static_assert(sizeof(FJunoEvent_OpenEngagementMenuMessage) == 0x000001, "Wrong size on FJunoEvent_OpenEngagementMenuMessage");

// ScriptStruct JunoGameNative.JunoEvent_OpenEscapeMenuMessage
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_OpenEscapeMenuMessage final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_OpenEscapeMenuMessage) == 0x000001, "Wrong alignment on FJunoEvent_OpenEscapeMenuMessage");
static_assert(sizeof(FJunoEvent_OpenEscapeMenuMessage) == 0x000001, "Wrong size on FJunoEvent_OpenEscapeMenuMessage");

// ScriptStruct JunoGameNative.JunoEvent_KnowledgeComponentReadyOnClient
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_KnowledgeComponentReadyOnClient final
{
public:
	class UJunoKnowledgeComponent*                KnowledgeComponent;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_KnowledgeComponentReadyOnClient) == 0x000008, "Wrong alignment on FJunoEvent_KnowledgeComponentReadyOnClient");
static_assert(sizeof(FJunoEvent_KnowledgeComponentReadyOnClient) == 0x000008, "Wrong size on FJunoEvent_KnowledgeComponentReadyOnClient");
static_assert(offsetof(FJunoEvent_KnowledgeComponentReadyOnClient, KnowledgeComponent) == 0x000000, "Member 'FJunoEvent_KnowledgeComponentReadyOnClient::KnowledgeComponent' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_InventoryItemExecuted
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_InventoryItemExecuted final
{
public:
	class UFortItem*                              ItemExecuted;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_InventoryItemExecuted) == 0x000008, "Wrong alignment on FJunoEvent_InventoryItemExecuted");
static_assert(sizeof(FJunoEvent_InventoryItemExecuted) == 0x000008, "Wrong size on FJunoEvent_InventoryItemExecuted");
static_assert(offsetof(FJunoEvent_InventoryItemExecuted, ItemExecuted) == 0x000000, "Member 'FJunoEvent_InventoryItemExecuted::ItemExecuted' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_InventoryMenuClose
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_InventoryMenuClose final
{
public:
	class AActor*                                 InventoryObject;                                   // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_InventoryMenuClose) == 0x000008, "Wrong alignment on FJunoEvent_InventoryMenuClose");
static_assert(sizeof(FJunoEvent_InventoryMenuClose) == 0x000008, "Wrong size on FJunoEvent_InventoryMenuClose");
static_assert(offsetof(FJunoEvent_InventoryMenuClose, InventoryObject) == 0x000000, "Member 'FJunoEvent_InventoryMenuClose::InventoryObject' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_EmptyHands
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJunoEvent_EmptyHands final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_EmptyHands) == 0x000004, "Wrong alignment on FJunoEvent_EmptyHands");
static_assert(sizeof(FJunoEvent_EmptyHands) == 0x00000C, "Wrong size on FJunoEvent_EmptyHands");

// ScriptStruct JunoGameNative.JunoEvent_FreeBuildItemSpawned
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_FreeBuildItemSpawned final
{
public:
	class UFortItemDefinition*                    SpawnedItemDefinition;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_FreeBuildItemSpawned) == 0x000008, "Wrong alignment on FJunoEvent_FreeBuildItemSpawned");
static_assert(sizeof(FJunoEvent_FreeBuildItemSpawned) == 0x000008, "Wrong size on FJunoEvent_FreeBuildItemSpawned");
static_assert(offsetof(FJunoEvent_FreeBuildItemSpawned, SpawnedItemDefinition) == 0x000000, "Member 'FJunoEvent_FreeBuildItemSpawned::SpawnedItemDefinition' has a wrong offset!");

// ScriptStruct JunoGameNative.PushMontageData
// 0x00D8 (0x00D8 - 0x0000)
struct FPushMontageData final
{
public:
	struct FGameplayTagRequirements               MontageDataRequirement;                            // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
	TMap<EFortPhysicsSimSize, class UAnimMontage*> SizeToMontageMap;                                  // 0x0088(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPushMontageData) == 0x000008, "Wrong alignment on FPushMontageData");
static_assert(sizeof(FPushMontageData) == 0x0000D8, "Wrong size on FPushMontageData");
static_assert(offsetof(FPushMontageData, MontageDataRequirement) == 0x000000, "Member 'FPushMontageData::MontageDataRequirement' has a wrong offset!");
static_assert(offsetof(FPushMontageData, SizeToMontageMap) == 0x000088, "Member 'FPushMontageData::SizeToMontageMap' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAccountItemDefinitionOverride
// 0x0010 (0x0010 - 0x0000)
struct FJunoAccountItemDefinitionOverride final
{
public:
	class UFortAccountItemDefinition*             OverridenAccountItemDefinition;                    // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAccountItemDefinitionOverride) == 0x000008, "Wrong alignment on FJunoAccountItemDefinitionOverride");
static_assert(sizeof(FJunoAccountItemDefinitionOverride) == 0x000010, "Wrong size on FJunoAccountItemDefinitionOverride");
static_assert(offsetof(FJunoAccountItemDefinitionOverride, OverridenAccountItemDefinition) == 0x000000, "Member 'FJunoAccountItemDefinitionOverride::OverridenAccountItemDefinition' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoDeltasStorage_Index_PFW
// 0x0058 (0x0058 - 0x0000)
struct FJunoDeltasStorage_Index_PFW final
{
public:
	int32                                         WorldCompatibilityVersion;                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FJsonObjectWrapper> DeltasMetadata;                                    // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoDeltasStorage_Index_PFW) == 0x000008, "Wrong alignment on FJunoDeltasStorage_Index_PFW");
static_assert(sizeof(FJunoDeltasStorage_Index_PFW) == 0x000058, "Wrong size on FJunoDeltasStorage_Index_PFW");
static_assert(offsetof(FJunoDeltasStorage_Index_PFW, WorldCompatibilityVersion) == 0x000000, "Member 'FJunoDeltasStorage_Index_PFW::WorldCompatibilityVersion' has a wrong offset!");
static_assert(offsetof(FJunoDeltasStorage_Index_PFW, DeltasMetadata) == 0x000008, "Member 'FJunoDeltasStorage_Index_PFW::DeltasMetadata' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAccountItemConversionRow
// 0x0080 (0x0088 - 0x0008)
struct FJunoAccountItemConversionRow : public FTableRowBase
{
public:
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTagsToAdd;                                 // 0x0010(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bOverrideFrontendTransform;                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrontendPreviewScale;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FrontendPreviewPivotOffset;                        // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FrontendPreviewInitialRotation;                    // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PreviewActorClass;                                 // 0x0068(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAccountItemConversionRow) == 0x000008, "Wrong alignment on FJunoAccountItemConversionRow");
static_assert(sizeof(FJunoAccountItemConversionRow) == 0x000088, "Wrong size on FJunoAccountItemConversionRow");
static_assert(offsetof(FJunoAccountItemConversionRow, bEnabled) == 0x000008, "Member 'FJunoAccountItemConversionRow::bEnabled' has a wrong offset!");
static_assert(offsetof(FJunoAccountItemConversionRow, GameplayTagsToAdd) == 0x000010, "Member 'FJunoAccountItemConversionRow::GameplayTagsToAdd' has a wrong offset!");
static_assert(offsetof(FJunoAccountItemConversionRow, bOverrideFrontendTransform) == 0x000030, "Member 'FJunoAccountItemConversionRow::bOverrideFrontendTransform' has a wrong offset!");
static_assert(offsetof(FJunoAccountItemConversionRow, FrontendPreviewScale) == 0x000034, "Member 'FJunoAccountItemConversionRow::FrontendPreviewScale' has a wrong offset!");
static_assert(offsetof(FJunoAccountItemConversionRow, FrontendPreviewPivotOffset) == 0x000038, "Member 'FJunoAccountItemConversionRow::FrontendPreviewPivotOffset' has a wrong offset!");
static_assert(offsetof(FJunoAccountItemConversionRow, FrontendPreviewInitialRotation) == 0x000050, "Member 'FJunoAccountItemConversionRow::FrontendPreviewInitialRotation' has a wrong offset!");
static_assert(offsetof(FJunoAccountItemConversionRow, PreviewActorClass) == 0x000068, "Member 'FJunoAccountItemConversionRow::PreviewActorClass' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEmoteConversionRow
// 0x00C8 (0x0150 - 0x0088)
struct FJunoEmoteConversionRow final : public FJunoAccountItemConversionRow
{
public:
	TSoftObjectPtr<class UAnimMontage>            Animation;                                         // 0x0088(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimationFemaleOverride;                           // 0x00A8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortEmoteMapping>              AnimationOverrides;                                // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            FrontEndAnimation;                                 // 0x00D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            FrontEndAnimationFemaleOverride;                   // 0x00F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortEmoteMapping>              FrontEndAnimationOverrides;                        // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                GroupEmotePositionOffset;                          // 0x0128(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroupEmotePositionOffsetTolerance;                 // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroupEmoteFollowDistance;                          // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkForwardSpeed;                                  // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEmoteConversionRow) == 0x000008, "Wrong alignment on FJunoEmoteConversionRow");
static_assert(sizeof(FJunoEmoteConversionRow) == 0x000150, "Wrong size on FJunoEmoteConversionRow");
static_assert(offsetof(FJunoEmoteConversionRow, Animation) == 0x000088, "Member 'FJunoEmoteConversionRow::Animation' has a wrong offset!");
static_assert(offsetof(FJunoEmoteConversionRow, AnimationFemaleOverride) == 0x0000A8, "Member 'FJunoEmoteConversionRow::AnimationFemaleOverride' has a wrong offset!");
static_assert(offsetof(FJunoEmoteConversionRow, AnimationOverrides) == 0x0000C8, "Member 'FJunoEmoteConversionRow::AnimationOverrides' has a wrong offset!");
static_assert(offsetof(FJunoEmoteConversionRow, FrontEndAnimation) == 0x0000D8, "Member 'FJunoEmoteConversionRow::FrontEndAnimation' has a wrong offset!");
static_assert(offsetof(FJunoEmoteConversionRow, FrontEndAnimationFemaleOverride) == 0x0000F8, "Member 'FJunoEmoteConversionRow::FrontEndAnimationFemaleOverride' has a wrong offset!");
static_assert(offsetof(FJunoEmoteConversionRow, FrontEndAnimationOverrides) == 0x000118, "Member 'FJunoEmoteConversionRow::FrontEndAnimationOverrides' has a wrong offset!");
static_assert(offsetof(FJunoEmoteConversionRow, GroupEmotePositionOffset) == 0x000128, "Member 'FJunoEmoteConversionRow::GroupEmotePositionOffset' has a wrong offset!");
static_assert(offsetof(FJunoEmoteConversionRow, GroupEmotePositionOffsetTolerance) == 0x000140, "Member 'FJunoEmoteConversionRow::GroupEmotePositionOffsetTolerance' has a wrong offset!");
static_assert(offsetof(FJunoEmoteConversionRow, GroupEmoteFollowDistance) == 0x000144, "Member 'FJunoEmoteConversionRow::GroupEmoteFollowDistance' has a wrong offset!");
static_assert(offsetof(FJunoEmoteConversionRow, WalkForwardSpeed) == 0x000148, "Member 'FJunoEmoteConversionRow::WalkForwardSpeed' has a wrong offset!");

// ScriptStruct JunoGameNative.ProjectPlayResourceData
// 0x0030 (0x0038 - 0x0008)
struct FProjectPlayResourceData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortWorldItemDefinition> ItemDefinition;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   ResourceAmount;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectPlayResourceData) == 0x000008, "Wrong alignment on FProjectPlayResourceData");
static_assert(sizeof(FProjectPlayResourceData) == 0x000038, "Wrong size on FProjectPlayResourceData");
static_assert(offsetof(FProjectPlayResourceData, ItemDefinition) == 0x000008, "Member 'FProjectPlayResourceData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FProjectPlayResourceData, ResourceAmount) == 0x000028, "Member 'FProjectPlayResourceData::ResourceAmount' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCharacterConversionRow
// 0x0048 (0x00D0 - 0x0088)
struct FJunoCharacterConversionRow final : public FJunoAccountItemConversionRow
{
public:
	TSoftObjectPtr<class UAssembledMeshSchema>    AssembledMeshSchema;                               // 0x0088(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            FrontendAnimMontageIdleOverride;                   // 0x00A8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewPawnScale;                                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoCharacterConversionRow) == 0x000008, "Wrong alignment on FJunoCharacterConversionRow");
static_assert(sizeof(FJunoCharacterConversionRow) == 0x0000D0, "Wrong size on FJunoCharacterConversionRow");
static_assert(offsetof(FJunoCharacterConversionRow, AssembledMeshSchema) == 0x000088, "Member 'FJunoCharacterConversionRow::AssembledMeshSchema' has a wrong offset!");
static_assert(offsetof(FJunoCharacterConversionRow, FrontendAnimMontageIdleOverride) == 0x0000A8, "Member 'FJunoCharacterConversionRow::FrontendAnimMontageIdleOverride' has a wrong offset!");
static_assert(offsetof(FJunoCharacterConversionRow, PreviewPawnScale) == 0x0000C8, "Member 'FJunoCharacterConversionRow::PreviewPawnScale' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIData_Tokens
// 0x0020 (0x0020 - 0x0000)
struct FSavedAIData_Tokens final : public FSavedAIData_BaseType
{
public:
	struct FGameplayTagContainer                  SavedTokens;                                       // 0x0000(0x0020)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedAIData_Tokens) == 0x000008, "Wrong alignment on FSavedAIData_Tokens");
static_assert(sizeof(FSavedAIData_Tokens) == 0x000020, "Wrong size on FSavedAIData_Tokens");
static_assert(offsetof(FSavedAIData_Tokens, SavedTokens) == 0x000000, "Member 'FSavedAIData_Tokens::SavedTokens' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIData_Camp
// 0x0060 (0x0060 - 0x0000)
struct FSavedAIData_Camp final : public FSavedAIData_BaseType
{
public:
	struct FGuid                                  UniqueGuid;                                        // 0x0000(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AssignedJunoGameTime;                              // 0x0010(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasRecruitedRemotely;                             // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Role;                                              // 0x001C(0x0004)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       AttachedPlayerNetId;                               // 0x0020(0x0030)(SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LastSpawnTime;                                     // 0x0050(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBiome                                    AttachedBiome;                                     // 0x0058(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedAIData_Camp) == 0x000008, "Wrong alignment on FSavedAIData_Camp");
static_assert(sizeof(FSavedAIData_Camp) == 0x000060, "Wrong size on FSavedAIData_Camp");
static_assert(offsetof(FSavedAIData_Camp, UniqueGuid) == 0x000000, "Member 'FSavedAIData_Camp::UniqueGuid' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Camp, AssignedJunoGameTime) == 0x000010, "Member 'FSavedAIData_Camp::AssignedJunoGameTime' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Camp, bWasRecruitedRemotely) == 0x000018, "Member 'FSavedAIData_Camp::bWasRecruitedRemotely' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Camp, Role) == 0x00001C, "Member 'FSavedAIData_Camp::Role' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Camp, AttachedPlayerNetId) == 0x000020, "Member 'FSavedAIData_Camp::AttachedPlayerNetId' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Camp, LastSpawnTime) == 0x000050, "Member 'FSavedAIData_Camp::LastSpawnTime' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Camp, AttachedBiome) == 0x000058, "Member 'FSavedAIData_Camp::AttachedBiome' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIData_SoftRemoval
// 0x0030 (0x0030 - 0x0000)
struct FSavedAIData_SoftRemoval final : public FSavedAIData_BaseType
{
public:
	struct FGameplayTagContainer                  SoftRemovedReasons;                                // 0x0000(0x0020)(SaveGame, NativeAccessSpecifierPublic)
	int64                                         SoftRemovedElapsedJunoGameTime;                    // 0x0020(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         NoInteractionsElapsedJunoGameTime;                 // 0x0028(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedAIData_SoftRemoval) == 0x000008, "Wrong alignment on FSavedAIData_SoftRemoval");
static_assert(sizeof(FSavedAIData_SoftRemoval) == 0x000030, "Wrong size on FSavedAIData_SoftRemoval");
static_assert(offsetof(FSavedAIData_SoftRemoval, SoftRemovedReasons) == 0x000000, "Member 'FSavedAIData_SoftRemoval::SoftRemovedReasons' has a wrong offset!");
static_assert(offsetof(FSavedAIData_SoftRemoval, SoftRemovedElapsedJunoGameTime) == 0x000020, "Member 'FSavedAIData_SoftRemoval::SoftRemovedElapsedJunoGameTime' has a wrong offset!");
static_assert(offsetof(FSavedAIData_SoftRemoval, NoInteractionsElapsedJunoGameTime) == 0x000028, "Member 'FSavedAIData_SoftRemoval::NoInteractionsElapsedJunoGameTime' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIData_Resources_GeneratedItem
// 0x000C (0x000C - 0x0000)
struct FSavedAIData_Resources_GeneratedItem final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedAIData_Resources_GeneratedItem) == 0x000004, "Wrong alignment on FSavedAIData_Resources_GeneratedItem");
static_assert(sizeof(FSavedAIData_Resources_GeneratedItem) == 0x00000C, "Wrong size on FSavedAIData_Resources_GeneratedItem");
static_assert(offsetof(FSavedAIData_Resources_GeneratedItem, PrimaryAssetId) == 0x000000, "Member 'FSavedAIData_Resources_GeneratedItem::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Resources_GeneratedItem, Count) == 0x000008, "Member 'FSavedAIData_Resources_GeneratedItem::Count' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIData_Resources
// 0x0098 (0x0098 - 0x0000)
struct FSavedAIData_Resources final : public FSavedAIData_BaseType
{
public:
	TMap<class FName, double>                     GeneratingLootTierGroups;                          // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FSavedAIData_Resources_GeneratedItem> GeneratedItems;                                    // 0x0050(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	int32                                         GeneratedLootCallsSinceLastRefresh;                // 0x0060(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        LastUsedGatheringActorItemId;                      // 0x0064(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastGeneratedLootTier;                             // 0x006C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoInventoryHandle                   SavedFullInventoryHandle;                          // 0x0070(0x0024)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedAIData_Resources) == 0x000008, "Wrong alignment on FSavedAIData_Resources");
static_assert(sizeof(FSavedAIData_Resources) == 0x000098, "Wrong size on FSavedAIData_Resources");
static_assert(offsetof(FSavedAIData_Resources, GeneratingLootTierGroups) == 0x000000, "Member 'FSavedAIData_Resources::GeneratingLootTierGroups' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Resources, GeneratedItems) == 0x000050, "Member 'FSavedAIData_Resources::GeneratedItems' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Resources, GeneratedLootCallsSinceLastRefresh) == 0x000060, "Member 'FSavedAIData_Resources::GeneratedLootCallsSinceLastRefresh' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Resources, LastUsedGatheringActorItemId) == 0x000064, "Member 'FSavedAIData_Resources::LastUsedGatheringActorItemId' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Resources, LastGeneratedLootTier) == 0x00006C, "Member 'FSavedAIData_Resources::LastGeneratedLootTier' has a wrong offset!");
static_assert(offsetof(FSavedAIData_Resources, SavedFullInventoryHandle) == 0x000070, "Member 'FSavedAIData_Resources::SavedFullInventoryHandle' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIData_WorldSpawn
// 0x0028 (0x0028 - 0x0000)
struct FSavedAIData_WorldSpawn final : public FSavedAIData_BaseType
{
public:
	struct FGuid                                  PointProviderGuid;                                 // 0x0000(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AssignationEndGameTime;                            // 0x0010(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventDataPath;                                     // 0x0018(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedAIData_WorldSpawn) == 0x000008, "Wrong alignment on FSavedAIData_WorldSpawn");
static_assert(sizeof(FSavedAIData_WorldSpawn) == 0x000028, "Wrong size on FSavedAIData_WorldSpawn");
static_assert(offsetof(FSavedAIData_WorldSpawn, PointProviderGuid) == 0x000000, "Member 'FSavedAIData_WorldSpawn::PointProviderGuid' has a wrong offset!");
static_assert(offsetof(FSavedAIData_WorldSpawn, AssignationEndGameTime) == 0x000010, "Member 'FSavedAIData_WorldSpawn::AssignationEndGameTime' has a wrong offset!");
static_assert(offsetof(FSavedAIData_WorldSpawn, EventDataPath) == 0x000018, "Member 'FSavedAIData_WorldSpawn::EventDataPath' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIData
// 0x0190 (0x0190 - 0x0000)
struct FSavedAIData final
{
public:
	struct FSavedAIData_Tokens                    Tokens;                                            // 0x0000(0x0020)(SaveGame, NativeAccessSpecifierPublic)
	struct FSavedAIData_Camp                      Camp;                                              // 0x0020(0x0060)(SaveGame, NativeAccessSpecifierPublic)
	struct FSavedAIData_SoftRemoval               SoftRemoval;                                       // 0x0080(0x0030)(SaveGame, NativeAccessSpecifierPublic)
	struct FSavedAIData_Resources                 Resources;                                         // 0x00B0(0x0098)(SaveGame, NativeAccessSpecifierPublic)
	struct FSavedAIData_Merchant                  Merchant;                                          // 0x0148(0x0020)(SaveGame, NativeAccessSpecifierPublic)
	struct FSavedAIData_WorldSpawn                WorldSpawn;                                        // 0x0168(0x0028)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedAIData) == 0x000008, "Wrong alignment on FSavedAIData");
static_assert(sizeof(FSavedAIData) == 0x000190, "Wrong size on FSavedAIData");
static_assert(offsetof(FSavedAIData, Tokens) == 0x000000, "Member 'FSavedAIData::Tokens' has a wrong offset!");
static_assert(offsetof(FSavedAIData, Camp) == 0x000020, "Member 'FSavedAIData::Camp' has a wrong offset!");
static_assert(offsetof(FSavedAIData, SoftRemoval) == 0x000080, "Member 'FSavedAIData::SoftRemoval' has a wrong offset!");
static_assert(offsetof(FSavedAIData, Resources) == 0x0000B0, "Member 'FSavedAIData::Resources' has a wrong offset!");
static_assert(offsetof(FSavedAIData, Merchant) == 0x000148, "Member 'FSavedAIData::Merchant' has a wrong offset!");
static_assert(offsetof(FSavedAIData, WorldSpawn) == 0x000168, "Member 'FSavedAIData::WorldSpawn' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedGlobalAIData_FTUE
// 0x0028 (0x0028 - 0x0000)
struct FSavedGlobalAIData_FTUE final : public FSavedAIData_BaseType
{
public:
	struct FGameplayTag                           PickedFTUENPC;                                     // 0x0000(0x0004)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FTUEStartLocation;                                 // 0x0008(0x0018)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFTUEWasEverCompleted;                             // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedGlobalAIData_FTUE) == 0x000008, "Wrong alignment on FSavedGlobalAIData_FTUE");
static_assert(sizeof(FSavedGlobalAIData_FTUE) == 0x000028, "Wrong size on FSavedGlobalAIData_FTUE");
static_assert(offsetof(FSavedGlobalAIData_FTUE, PickedFTUENPC) == 0x000000, "Member 'FSavedGlobalAIData_FTUE::PickedFTUENPC' has a wrong offset!");
static_assert(offsetof(FSavedGlobalAIData_FTUE, FTUEStartLocation) == 0x000008, "Member 'FSavedGlobalAIData_FTUE::FTUEStartLocation' has a wrong offset!");
static_assert(offsetof(FSavedGlobalAIData_FTUE, bFTUEWasEverCompleted) == 0x000020, "Member 'FSavedGlobalAIData_FTUE::bFTUEWasEverCompleted' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedGlobalAIData_Rewards
// 0x0050 (0x0050 - 0x0000)
struct FSavedGlobalAIData_Rewards final : public FSavedAIData_BaseType
{
public:
	TMap<class FName, int32>                      CountOfRewardedLootTierGroups;                     // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedGlobalAIData_Rewards) == 0x000008, "Wrong alignment on FSavedGlobalAIData_Rewards");
static_assert(sizeof(FSavedGlobalAIData_Rewards) == 0x000050, "Wrong size on FSavedGlobalAIData_Rewards");
static_assert(offsetof(FSavedGlobalAIData_Rewards, CountOfRewardedLootTierGroups) == 0x000000, "Member 'FSavedGlobalAIData_Rewards::CountOfRewardedLootTierGroups' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedGlobalAIData_WorldSettings
// 0x0003 (0x0003 - 0x0000)
struct FSavedGlobalAIData_WorldSettings final : public FSavedAIData_BaseType
{
public:
	bool                                          bEnableFriendlyCreatures;                          // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHostileCreatures;                           // 0x0001(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFriendlyNPCs;                               // 0x0002(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedGlobalAIData_WorldSettings) == 0x000001, "Wrong alignment on FSavedGlobalAIData_WorldSettings");
static_assert(sizeof(FSavedGlobalAIData_WorldSettings) == 0x000003, "Wrong size on FSavedGlobalAIData_WorldSettings");
static_assert(offsetof(FSavedGlobalAIData_WorldSettings, bEnableFriendlyCreatures) == 0x000000, "Member 'FSavedGlobalAIData_WorldSettings::bEnableFriendlyCreatures' has a wrong offset!");
static_assert(offsetof(FSavedGlobalAIData_WorldSettings, bEnableHostileCreatures) == 0x000001, "Member 'FSavedGlobalAIData_WorldSettings::bEnableHostileCreatures' has a wrong offset!");
static_assert(offsetof(FSavedGlobalAIData_WorldSettings, bEnableFriendlyNPCs) == 0x000002, "Member 'FSavedGlobalAIData_WorldSettings::bEnableFriendlyNPCs' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedGlobalAIData_RecruitmentObjectData
// 0x0050 (0x0050 - 0x0000)
struct FSavedGlobalAIData_RecruitmentObjectData final : public FSavedAIData_BaseType
{
public:
	TMap<struct FGuid, struct FJunoRecruitmentObjectAssignedData> RecruitmentObjectToAssignedData;                   // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedGlobalAIData_RecruitmentObjectData) == 0x000008, "Wrong alignment on FSavedGlobalAIData_RecruitmentObjectData");
static_assert(sizeof(FSavedGlobalAIData_RecruitmentObjectData) == 0x000050, "Wrong size on FSavedGlobalAIData_RecruitmentObjectData");
static_assert(offsetof(FSavedGlobalAIData_RecruitmentObjectData, RecruitmentObjectToAssignedData) == 0x000000, "Member 'FSavedGlobalAIData_RecruitmentObjectData::RecruitmentObjectToAssignedData' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedGlobalAIData
// 0x00D0 (0x00D0 - 0x0000)
struct FSavedGlobalAIData final
{
public:
	struct FSavedGlobalAIData_FTUE                FTUE;                                              // 0x0000(0x0028)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	struct FSavedGlobalAIData_Rewards             Rewards;                                           // 0x0028(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	struct FSavedGlobalAIData_WorldSettings       WorldSettings;                                     // 0x0078(0x0003)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSavedGlobalAIData_RecruitmentObjectData RecruitmentObjectData;                             // 0x0080(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedGlobalAIData) == 0x000008, "Wrong alignment on FSavedGlobalAIData");
static_assert(sizeof(FSavedGlobalAIData) == 0x0000D0, "Wrong size on FSavedGlobalAIData");
static_assert(offsetof(FSavedGlobalAIData, FTUE) == 0x000000, "Member 'FSavedGlobalAIData::FTUE' has a wrong offset!");
static_assert(offsetof(FSavedGlobalAIData, Rewards) == 0x000028, "Member 'FSavedGlobalAIData::Rewards' has a wrong offset!");
static_assert(offsetof(FSavedGlobalAIData, WorldSettings) == 0x000078, "Member 'FSavedGlobalAIData::WorldSettings' has a wrong offset!");
static_assert(offsetof(FSavedGlobalAIData, RecruitmentObjectData) == 0x000080, "Member 'FSavedGlobalAIData::RecruitmentObjectData' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedAIDataManager
// 0x0120 (0x0120 - 0x0000)
struct FSavedAIDataManager final
{
public:
	TMap<struct FGameplayTag, struct FSavedAIData> SavedAIDataPerUniqueAIIdentifier;                  // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPrivate)
	struct FSavedGlobalAIData                     SavedGlobalAIData;                                 // 0x0050(0x00D0)(SaveGame, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSavedAIDataManager) == 0x000008, "Wrong alignment on FSavedAIDataManager");
static_assert(sizeof(FSavedAIDataManager) == 0x000120, "Wrong size on FSavedAIDataManager");
static_assert(offsetof(FSavedAIDataManager, SavedAIDataPerUniqueAIIdentifier) == 0x000000, "Member 'FSavedAIDataManager::SavedAIDataPerUniqueAIIdentifier' has a wrong offset!");
static_assert(offsetof(FSavedAIDataManager, SavedGlobalAIData) == 0x000050, "Member 'FSavedAIDataManager::SavedGlobalAIData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAIPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0120 (0x0120 - 0x0000)
struct FJunoAIPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FSavedAIDataManager                    SavedAIData;                                       // 0x0000(0x0120)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAIPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoAIPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoAIPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000120, "Wrong size on FJunoAIPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoAIPersistenceFeatureData_InGameClass_PersistentInfo, SavedAIData) == 0x000000, "Member 'FJunoAIPersistenceFeatureData_InGameClass_PersistentInfo::SavedAIData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCollisionChannelResponsePair
// 0x0002 (0x0002 - 0x0000)
struct FJunoCollisionChannelResponsePair final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            Response;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoCollisionChannelResponsePair) == 0x000001, "Wrong alignment on FJunoCollisionChannelResponsePair");
static_assert(sizeof(FJunoCollisionChannelResponsePair) == 0x000002, "Wrong size on FJunoCollisionChannelResponsePair");
static_assert(offsetof(FJunoCollisionChannelResponsePair, Channel) == 0x000000, "Member 'FJunoCollisionChannelResponsePair::Channel' has a wrong offset!");
static_assert(offsetof(FJunoCollisionChannelResponsePair, Response) == 0x000001, "Member 'FJunoCollisionChannelResponsePair::Response' has a wrong offset!");

// ScriptStruct JunoGameNative.ConnectivityRemovalStreamPendingData
// 0x0010 (0x0010 - 0x0000)
struct FConnectivityRemovalStreamPendingData final
{
public:
	class UJunoConnectivityComponent*             Component;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConnectivityRemovalStreamPendingData) == 0x000008, "Wrong alignment on FConnectivityRemovalStreamPendingData");
static_assert(sizeof(FConnectivityRemovalStreamPendingData) == 0x000010, "Wrong size on FConnectivityRemovalStreamPendingData");
static_assert(offsetof(FConnectivityRemovalStreamPendingData, Component) == 0x000000, "Member 'FConnectivityRemovalStreamPendingData::Component' has a wrong offset!");
static_assert(offsetof(FConnectivityRemovalStreamPendingData, Z) == 0x000008, "Member 'FConnectivityRemovalStreamPendingData::Z' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingStageData
// 0x0040 (0x0040 - 0x0000)
struct FJunoGuidedBuildingStageData
{
public:
	class FText                                   StageDisplayName;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 ActorIndexes;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AutoCompleteIndexes;                               // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumCompleted;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStageEverCompleted;                               // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoGuidedBuildingStageData) == 0x000008, "Wrong alignment on FJunoGuidedBuildingStageData");
static_assert(sizeof(FJunoGuidedBuildingStageData) == 0x000040, "Wrong size on FJunoGuidedBuildingStageData");
static_assert(offsetof(FJunoGuidedBuildingStageData, StageDisplayName) == 0x000000, "Member 'FJunoGuidedBuildingStageData::StageDisplayName' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingStageData, ActorIndexes) == 0x000018, "Member 'FJunoGuidedBuildingStageData::ActorIndexes' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingStageData, AutoCompleteIndexes) == 0x000028, "Member 'FJunoGuidedBuildingStageData::AutoCompleteIndexes' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingStageData, NumCompleted) == 0x000038, "Member 'FJunoGuidedBuildingStageData::NumCompleted' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingStageData, bStageEverCompleted) == 0x00003C, "Member 'FJunoGuidedBuildingStageData::bStageEverCompleted' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingStageEditorData
// 0x0028 (0x0068 - 0x0040)
struct FJunoGuidedBuildingStageEditorData final : public FJunoGuidedBuildingStageData
{
public:
	struct FGameplayTag                           StageTag;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActorNames;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AutoCompleteActorNames;                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGuidedBuildingStageEditorData) == 0x000008, "Wrong alignment on FJunoGuidedBuildingStageEditorData");
static_assert(sizeof(FJunoGuidedBuildingStageEditorData) == 0x000068, "Wrong size on FJunoGuidedBuildingStageEditorData");
static_assert(offsetof(FJunoGuidedBuildingStageEditorData, StageTag) == 0x000040, "Member 'FJunoGuidedBuildingStageEditorData::StageTag' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingStageEditorData, ActorNames) == 0x000048, "Member 'FJunoGuidedBuildingStageEditorData::ActorNames' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingStageEditorData, AutoCompleteActorNames) == 0x000058, "Member 'FJunoGuidedBuildingStageEditorData::AutoCompleteActorNames' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWeaponEssenceData
// 0x0028 (0x0030 - 0x0008)
struct FJunoWeaponEssenceData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     WeaponDefinition;                                  // 0x0008(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EssenceSlotCount;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWeaponEssenceData) == 0x000008, "Wrong alignment on FJunoWeaponEssenceData");
static_assert(sizeof(FJunoWeaponEssenceData) == 0x000030, "Wrong size on FJunoWeaponEssenceData");
static_assert(offsetof(FJunoWeaponEssenceData, WeaponDefinition) == 0x000008, "Member 'FJunoWeaponEssenceData::WeaponDefinition' has a wrong offset!");
static_assert(offsetof(FJunoWeaponEssenceData, EssenceSlotCount) == 0x000028, "Member 'FJunoWeaponEssenceData::EssenceSlotCount' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAwesomeInteractionConfigTableRow
// 0x0008 (0x0010 - 0x0008)
struct FJunoAwesomeInteractionConfigTableRow final : public FTableRowBase
{
public:
	int32                                         AwesomePointAdjustment;                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAwesomeInteractionConfigTableRow) == 0x000008, "Wrong alignment on FJunoAwesomeInteractionConfigTableRow");
static_assert(sizeof(FJunoAwesomeInteractionConfigTableRow) == 0x000010, "Wrong size on FJunoAwesomeInteractionConfigTableRow");
static_assert(offsetof(FJunoAwesomeInteractionConfigTableRow, AwesomePointAdjustment) == 0x000008, "Member 'FJunoAwesomeInteractionConfigTableRow::AwesomePointAdjustment' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAwesomePlacementCategoryConfigTableRow
// 0x0008 (0x0010 - 0x0008)
struct FJunoAwesomePlacementCategoryConfigTableRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           BuildingCategory;                                  // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwesomePointsToContribute;                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAwesomePlacementCategoryConfigTableRow) == 0x000008, "Wrong alignment on FJunoAwesomePlacementCategoryConfigTableRow");
static_assert(sizeof(FJunoAwesomePlacementCategoryConfigTableRow) == 0x000010, "Wrong size on FJunoAwesomePlacementCategoryConfigTableRow");
static_assert(offsetof(FJunoAwesomePlacementCategoryConfigTableRow, BuildingCategory) == 0x000008, "Member 'FJunoAwesomePlacementCategoryConfigTableRow::BuildingCategory' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePlacementCategoryConfigTableRow, AwesomePointsToContribute) == 0x00000C, "Member 'FJunoAwesomePlacementCategoryConfigTableRow::AwesomePointsToContribute' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAwesomeUpgradeResourceCostList
// 0x0010 (0x0010 - 0x0000)
struct FJunoAwesomeUpgradeResourceCostList final
{
public:
	TArray<struct FJunoAwesomeUpgradeResourceCost> ResourceCostList;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAwesomeUpgradeResourceCostList) == 0x000008, "Wrong alignment on FJunoAwesomeUpgradeResourceCostList");
static_assert(sizeof(FJunoAwesomeUpgradeResourceCostList) == 0x000010, "Wrong size on FJunoAwesomeUpgradeResourceCostList");
static_assert(offsetof(FJunoAwesomeUpgradeResourceCostList, ResourceCostList) == 0x000000, "Member 'FJunoAwesomeUpgradeResourceCostList::ResourceCostList' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAwesomePoiConfigTableRow
// 0x0020 (0x0028 - 0x0008)
struct FJunoAwesomePoiConfigTableRow final : public FTableRowBase
{
public:
	TArray<int32>                                 AwesomePointGoals;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoAwesomeUpgradeResourceCostList> UpgradeResourceCosts;                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAwesomePoiConfigTableRow) == 0x000008, "Wrong alignment on FJunoAwesomePoiConfigTableRow");
static_assert(sizeof(FJunoAwesomePoiConfigTableRow) == 0x000028, "Wrong size on FJunoAwesomePoiConfigTableRow");
static_assert(offsetof(FJunoAwesomePoiConfigTableRow, AwesomePointGoals) == 0x000008, "Member 'FJunoAwesomePoiConfigTableRow::AwesomePointGoals' has a wrong offset!");
static_assert(offsetof(FJunoAwesomePoiConfigTableRow, UpgradeResourceCosts) == 0x000018, "Member 'FJunoAwesomePoiConfigTableRow::UpgradeResourceCosts' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBarterSaleItemData
// 0x0028 (0x0028 - 0x0000)
struct FJunoBarterSaleItemData final
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     SaleItemDefinition;                                // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaleItemBulkQuantity;                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WantItemQuantity;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBarterSaleItemData) == 0x000008, "Wrong alignment on FJunoBarterSaleItemData");
static_assert(sizeof(FJunoBarterSaleItemData) == 0x000028, "Wrong size on FJunoBarterSaleItemData");
static_assert(offsetof(FJunoBarterSaleItemData, SaleItemDefinition) == 0x000000, "Member 'FJunoBarterSaleItemData::SaleItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoBarterSaleItemData, SaleItemBulkQuantity) == 0x000020, "Member 'FJunoBarterSaleItemData::SaleItemBulkQuantity' has a wrong offset!");
static_assert(offsetof(FJunoBarterSaleItemData, WantItemQuantity) == 0x000024, "Member 'FJunoBarterSaleItemData::WantItemQuantity' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBarterPricingData
// 0x0030 (0x0038 - 0x0008)
struct FJunoBarterPricingData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     WantItemDefinition;                                // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoBarterSaleItemData>        SaleItemDatas;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBarterPricingData) == 0x000008, "Wrong alignment on FJunoBarterPricingData");
static_assert(sizeof(FJunoBarterPricingData) == 0x000038, "Wrong size on FJunoBarterPricingData");
static_assert(offsetof(FJunoBarterPricingData, WantItemDefinition) == 0x000008, "Member 'FJunoBarterPricingData::WantItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoBarterPricingData, SaleItemDatas) == 0x000028, "Member 'FJunoBarterPricingData::SaleItemDatas' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingStateEntry
// 0x0014 (0x0020 - 0x000C)
struct FJunoGuidedBuildingStateEntry final : public FFastArraySerializerItem
{
public:
	EJunoGuidedBuildingState                      CurrentState;                                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  FilledActor;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingDataIndex;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoGuidedBuildingStateEntry) == 0x000004, "Wrong alignment on FJunoGuidedBuildingStateEntry");
static_assert(sizeof(FJunoGuidedBuildingStateEntry) == 0x000020, "Wrong size on FJunoGuidedBuildingStateEntry");
static_assert(offsetof(FJunoGuidedBuildingStateEntry, CurrentState) == 0x00000C, "Member 'FJunoGuidedBuildingStateEntry::CurrentState' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingStateEntry, FilledActor) == 0x000010, "Member 'FJunoGuidedBuildingStateEntry::FilledActor' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingStateEntry, BuildingDataIndex) == 0x000018, "Member 'FJunoGuidedBuildingStateEntry::BuildingDataIndex' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWaterLocationResult
// 0x0050 (0x0050 - 0x0000)
struct FJunoWaterLocationResult final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBiomeHabitat                             WaterType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DirectionMaskIndex;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundWater;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterBody*                             WaterBody;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWaterLocationResult) == 0x000008, "Wrong alignment on FJunoWaterLocationResult");
static_assert(sizeof(FJunoWaterLocationResult) == 0x000050, "Wrong size on FJunoWaterLocationResult");
static_assert(offsetof(FJunoWaterLocationResult, Location) == 0x000000, "Member 'FJunoWaterLocationResult::Location' has a wrong offset!");
static_assert(offsetof(FJunoWaterLocationResult, WaterType) == 0x000018, "Member 'FJunoWaterLocationResult::WaterType' has a wrong offset!");
static_assert(offsetof(FJunoWaterLocationResult, Direction) == 0x000020, "Member 'FJunoWaterLocationResult::Direction' has a wrong offset!");
static_assert(offsetof(FJunoWaterLocationResult, Distance) == 0x000038, "Member 'FJunoWaterLocationResult::Distance' has a wrong offset!");
static_assert(offsetof(FJunoWaterLocationResult, DirectionMaskIndex) == 0x00003C, "Member 'FJunoWaterLocationResult::DirectionMaskIndex' has a wrong offset!");
static_assert(offsetof(FJunoWaterLocationResult, bFoundWater) == 0x000040, "Member 'FJunoWaterLocationResult::bFoundWater' has a wrong offset!");
static_assert(offsetof(FJunoWaterLocationResult, WaterBody) == 0x000048, "Member 'FJunoWaterLocationResult::WaterBody' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoDebugWorldInfoResult
// 0x0060 (0x0060 - 0x0000)
struct FJunoDebugWorldInfoResult final
{
public:
	class FText                                   AdventureSeed;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TileSet;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TileName;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   BiomeName;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoDebugWorldInfoResult) == 0x000008, "Wrong alignment on FJunoDebugWorldInfoResult");
static_assert(sizeof(FJunoDebugWorldInfoResult) == 0x000060, "Wrong size on FJunoDebugWorldInfoResult");
static_assert(offsetof(FJunoDebugWorldInfoResult, AdventureSeed) == 0x000000, "Member 'FJunoDebugWorldInfoResult::AdventureSeed' has a wrong offset!");
static_assert(offsetof(FJunoDebugWorldInfoResult, TileSet) == 0x000018, "Member 'FJunoDebugWorldInfoResult::TileSet' has a wrong offset!");
static_assert(offsetof(FJunoDebugWorldInfoResult, TileName) == 0x000030, "Member 'FJunoDebugWorldInfoResult::TileName' has a wrong offset!");
static_assert(offsetof(FJunoDebugWorldInfoResult, BiomeName) == 0x000048, "Member 'FJunoDebugWorldInfoResult::BiomeName' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldAnalyticsInfoResult
// 0x0028 (0x0028 - 0x0000)
struct FJunoWorldAnalyticsInfoResult final
{
public:
	class FString                                 TileName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalizedTileLocation;                            // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldAnalyticsInfoResult) == 0x000008, "Wrong alignment on FJunoWorldAnalyticsInfoResult");
static_assert(sizeof(FJunoWorldAnalyticsInfoResult) == 0x000028, "Wrong size on FJunoWorldAnalyticsInfoResult");
static_assert(offsetof(FJunoWorldAnalyticsInfoResult, TileName) == 0x000000, "Member 'FJunoWorldAnalyticsInfoResult::TileName' has a wrong offset!");
static_assert(offsetof(FJunoWorldAnalyticsInfoResult, NormalizedTileLocation) == 0x000010, "Member 'FJunoWorldAnalyticsInfoResult::NormalizedTileLocation' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoTrackedActorKey
// 0x000C (0x000C - 0x0000)
struct FJunoTrackedActorKey final
{
public:
	struct FIntVector                             LocationKey;                                       // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoTrackedActorKey) == 0x000004, "Wrong alignment on FJunoTrackedActorKey");
static_assert(sizeof(FJunoTrackedActorKey) == 0x00000C, "Wrong size on FJunoTrackedActorKey");
static_assert(offsetof(FJunoTrackedActorKey, LocationKey) == 0x000000, "Member 'FJunoTrackedActorKey::LocationKey' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoTrackedActor
// 0x001C (0x001C - 0x0000)
struct FJunoTrackedActor final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoTrackedActorKey                   ActorKey;                                          // 0x0008(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialNetRelevanceDistance;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfRelevantActors;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoTrackedActor) == 0x000004, "Wrong alignment on FJunoTrackedActor");
static_assert(sizeof(FJunoTrackedActor) == 0x00001C, "Wrong size on FJunoTrackedActor");
static_assert(offsetof(FJunoTrackedActor, Actor) == 0x000000, "Member 'FJunoTrackedActor::Actor' has a wrong offset!");
static_assert(offsetof(FJunoTrackedActor, ActorKey) == 0x000008, "Member 'FJunoTrackedActor::ActorKey' has a wrong offset!");
static_assert(offsetof(FJunoTrackedActor, InitialNetRelevanceDistance) == 0x000014, "Member 'FJunoTrackedActor::InitialNetRelevanceDistance' has a wrong offset!");
static_assert(offsetof(FJunoTrackedActor, NumberOfRelevantActors) == 0x000018, "Member 'FJunoTrackedActor::NumberOfRelevantActors' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingMetricQuery
// 0x0018 (0x0018 - 0x0000)
struct FJunoBuildingMetricQuery final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingMetricQuery) == 0x000008, "Wrong alignment on FJunoBuildingMetricQuery");
static_assert(sizeof(FJunoBuildingMetricQuery) == 0x000018, "Wrong size on FJunoBuildingMetricQuery");
static_assert(offsetof(FJunoBuildingMetricQuery, Location) == 0x000000, "Member 'FJunoBuildingMetricQuery::Location' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoTrackedActorRefreshmentOptions
// 0x000C (0x000C - 0x0000)
struct FJunoTrackedActorRefreshmentOptions final
{
public:
	EJunoTrackedActorRefreshReason                Reason;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  ActorRequiringRefresh;                             // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoTrackedActorRefreshmentOptions) == 0x000004, "Wrong alignment on FJunoTrackedActorRefreshmentOptions");
static_assert(sizeof(FJunoTrackedActorRefreshmentOptions) == 0x00000C, "Wrong size on FJunoTrackedActorRefreshmentOptions");
static_assert(offsetof(FJunoTrackedActorRefreshmentOptions, Reason) == 0x000000, "Member 'FJunoTrackedActorRefreshmentOptions::Reason' has a wrong offset!");
static_assert(offsetof(FJunoTrackedActorRefreshmentOptions, ActorRequiringRefresh) == 0x000004, "Member 'FJunoTrackedActorRefreshmentOptions::ActorRequiringRefresh' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingConnectivityComponentEntry
// 0x0058 (0x0058 - 0x0000)
struct FJunoBuildingConnectivityComponentEntry final
{
public:
	TWeakObjectPtr<class USceneComponent>         Component;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<int32>                                   IDs;                                               // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingConnectivityComponentEntry) == 0x000008, "Wrong alignment on FJunoBuildingConnectivityComponentEntry");
static_assert(sizeof(FJunoBuildingConnectivityComponentEntry) == 0x000058, "Wrong size on FJunoBuildingConnectivityComponentEntry");
static_assert(offsetof(FJunoBuildingConnectivityComponentEntry, Component) == 0x000000, "Member 'FJunoBuildingConnectivityComponentEntry::Component' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectivityComponentEntry, IDs) == 0x000008, "Member 'FJunoBuildingConnectivityComponentEntry::IDs' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingRegisteredPlayer
// 0x0008 (0x0014 - 0x000C)
struct FJunoGuidedBuildingRegisteredPlayer final : public FFastArraySerializerItem
{
public:
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGuidedBuildingRegisteredPlayer) == 0x000004, "Wrong alignment on FJunoGuidedBuildingRegisteredPlayer");
static_assert(sizeof(FJunoGuidedBuildingRegisteredPlayer) == 0x000014, "Wrong size on FJunoGuidedBuildingRegisteredPlayer");
static_assert(offsetof(FJunoGuidedBuildingRegisteredPlayer, PlayerState) == 0x00000C, "Member 'FJunoGuidedBuildingRegisteredPlayer::PlayerState' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingRegisteredPlayerArray
// 0x0040 (0x0148 - 0x0108)
struct FJunoGuidedBuildingRegisteredPlayerArray final : public FFastArraySerializer
{
public:
	uint8                                         Pad_108[0x30];                                     // 0x0108(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoGuidedBuildingRegisteredPlayer> Entries;                                           // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGuidedBuildingRegisteredPlayerArray) == 0x000008, "Wrong alignment on FJunoGuidedBuildingRegisteredPlayerArray");
static_assert(sizeof(FJunoGuidedBuildingRegisteredPlayerArray) == 0x000148, "Wrong size on FJunoGuidedBuildingRegisteredPlayerArray");
static_assert(offsetof(FJunoGuidedBuildingRegisteredPlayerArray, Entries) == 0x000138, "Member 'FJunoGuidedBuildingRegisteredPlayerArray::Entries' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingConnectionPoint
// 0x00E0 (0x00E0 - 0x0000)
struct FJunoBuildingConnectionPoint final
{
public:
	struct FTransform                             FieldToObject;                                     // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             PointToObject;                                     // 0x0060(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FieldSize;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         Component;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectId;                                          // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConnectionPointType                          PointType;                                         // 0x00DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvailable;                                        // 0x00DD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingConnectionPoint) == 0x000010, "Wrong alignment on FJunoBuildingConnectionPoint");
static_assert(sizeof(FJunoBuildingConnectionPoint) == 0x0000E0, "Wrong size on FJunoBuildingConnectionPoint");
static_assert(offsetof(FJunoBuildingConnectionPoint, FieldToObject) == 0x000000, "Member 'FJunoBuildingConnectionPoint::FieldToObject' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectionPoint, PointToObject) == 0x000060, "Member 'FJunoBuildingConnectionPoint::PointToObject' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectionPoint, FieldSize) == 0x0000C0, "Member 'FJunoBuildingConnectionPoint::FieldSize' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectionPoint, Component) == 0x0000D0, "Member 'FJunoBuildingConnectionPoint::Component' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectionPoint, ObjectId) == 0x0000D8, "Member 'FJunoBuildingConnectionPoint::ObjectId' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectionPoint, PointType) == 0x0000DC, "Member 'FJunoBuildingConnectionPoint::PointType' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectionPoint, bAvailable) == 0x0000DD, "Member 'FJunoBuildingConnectionPoint::bAvailable' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingConnectionPoints
// 0x0010 (0x0010 - 0x0000)
struct FJunoBuildingConnectionPoints final
{
public:
	TArray<struct FJunoBuildingConnectionPoint>   Value;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingConnectionPoints) == 0x000008, "Wrong alignment on FJunoBuildingConnectionPoints");
static_assert(sizeof(FJunoBuildingConnectionPoints) == 0x000010, "Wrong size on FJunoBuildingConnectionPoints");
static_assert(offsetof(FJunoBuildingConnectionPoints, Value) == 0x000000, "Member 'FJunoBuildingConnectionPoints::Value' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingFloatingParams
// 0x0160 (0x0160 - 0x0000)
struct alignas(0x10) FJunoBuildingFloatingParams final
{
public:
	uint8                                         Pad_0[0x160];                                      // 0x0000(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingFloatingParams) == 0x000010, "Wrong alignment on FJunoBuildingFloatingParams");
static_assert(sizeof(FJunoBuildingFloatingParams) == 0x000160, "Wrong size on FJunoBuildingFloatingParams");

// ScriptStruct JunoGameNative.JunoBuildingConnectionPointsResult
// 0x0050 (0x0050 - 0x0000)
struct FJunoBuildingConnectionPointsResult final
{
public:
	TMap<EConnectionFieldGender, struct FJunoBuildingConnectionPoints> PointsMap;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingConnectionPointsResult) == 0x000008, "Wrong alignment on FJunoBuildingConnectionPointsResult");
static_assert(sizeof(FJunoBuildingConnectionPointsResult) == 0x000050, "Wrong size on FJunoBuildingConnectionPointsResult");
static_assert(offsetof(FJunoBuildingConnectionPointsResult, PointsMap) == 0x000000, "Member 'FJunoBuildingConnectionPointsResult::PointsMap' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingConnection
// 0x01D0 (0x01D0 - 0x0000)
struct FJunoBuildingConnection final
{
public:
	struct FJunoBuildingConnectionPoint           Candidate;                                         // 0x0000(0x00E0)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FJunoBuildingConnectionPoint           Target;                                            // 0x00E0(0x00E0)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Locations;                                         // 0x01C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingConnection) == 0x000010, "Wrong alignment on FJunoBuildingConnection");
static_assert(sizeof(FJunoBuildingConnection) == 0x0001D0, "Wrong size on FJunoBuildingConnection");
static_assert(offsetof(FJunoBuildingConnection, Candidate) == 0x000000, "Member 'FJunoBuildingConnection::Candidate' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnection, Target) == 0x0000E0, "Member 'FJunoBuildingConnection::Target' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnection, Locations) == 0x0001C0, "Member 'FJunoBuildingConnection::Locations' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_CampCenterCreated
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FJunoEvent_CampCenterCreated final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_CampCenterCreated) == 0x000004, "Wrong alignment on FJunoEvent_CampCenterCreated");
static_assert(sizeof(FJunoEvent_CampCenterCreated) == 0x000010, "Wrong size on FJunoEvent_CampCenterCreated");

// ScriptStruct JunoGameNative.JunoEvent_CampCenterDestroyed
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJunoEvent_CampCenterDestroyed final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_CampCenterDestroyed) == 0x000004, "Wrong alignment on FJunoEvent_CampCenterDestroyed");
static_assert(sizeof(FJunoEvent_CampCenterDestroyed) == 0x000008, "Wrong size on FJunoEvent_CampCenterDestroyed");

// ScriptStruct JunoGameNative.JunoEvent_CampCenterActivated
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJunoEvent_CampCenterActivated final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_CampCenterActivated) == 0x000004, "Wrong alignment on FJunoEvent_CampCenterActivated");
static_assert(sizeof(FJunoEvent_CampCenterActivated) == 0x000008, "Wrong size on FJunoEvent_CampCenterActivated");

// ScriptStruct JunoGameNative.JunoEvent_CampCenterDeactivated
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJunoEvent_CampCenterDeactivated final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_CampCenterDeactivated) == 0x000004, "Wrong alignment on FJunoEvent_CampCenterDeactivated");
static_assert(sizeof(FJunoEvent_CampCenterDeactivated) == 0x000008, "Wrong size on FJunoEvent_CampCenterDeactivated");

// ScriptStruct JunoGameNative.JunoVerbFilter_GuidedBuildCompleted
// 0x0098 (0x0138 - 0x00A0)
struct FJunoVerbFilter_GuidedBuildCompleted final : public FObjectiveFilter
{
public:
	struct FObjectiveSubjectTags                  GuidedBuilding;                                    // 0x00A0(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FObjectiveSubjectTags_Progressible     BuildContributors;                                 // 0x00E8(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoVerbFilter_GuidedBuildCompleted) == 0x000008, "Wrong alignment on FJunoVerbFilter_GuidedBuildCompleted");
static_assert(sizeof(FJunoVerbFilter_GuidedBuildCompleted) == 0x000138, "Wrong size on FJunoVerbFilter_GuidedBuildCompleted");
static_assert(offsetof(FJunoVerbFilter_GuidedBuildCompleted, GuidedBuilding) == 0x0000A0, "Member 'FJunoVerbFilter_GuidedBuildCompleted::GuidedBuilding' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_GuidedBuildCompleted, BuildContributors) == 0x0000E8, "Member 'FJunoVerbFilter_GuidedBuildCompleted::BuildContributors' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_CampActorActivated
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJunoEvent_CampActorActivated final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_CampActorActivated) == 0x000004, "Wrong alignment on FJunoEvent_CampActorActivated");
static_assert(sizeof(FJunoEvent_CampActorActivated) == 0x000008, "Wrong size on FJunoEvent_CampActorActivated");

// ScriptStruct JunoGameNative.JunoEvent_CampActorDeactivated
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FJunoEvent_CampActorDeactivated final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_CampActorDeactivated) == 0x000004, "Wrong alignment on FJunoEvent_CampActorDeactivated");
static_assert(sizeof(FJunoEvent_CampActorDeactivated) == 0x000008, "Wrong size on FJunoEvent_CampActorDeactivated");

// ScriptStruct JunoGameNative.JunoGuidedBuildingComponentData
// 0x0070 (0x0070 - 0x0000)
struct FJunoGuidedBuildingComponentData final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGuidedBuildingComponentData) == 0x000010, "Wrong alignment on FJunoGuidedBuildingComponentData");
static_assert(sizeof(FJunoGuidedBuildingComponentData) == 0x000070, "Wrong size on FJunoGuidedBuildingComponentData");
static_assert(offsetof(FJunoGuidedBuildingComponentData, StaticMesh) == 0x000000, "Member 'FJunoGuidedBuildingComponentData::StaticMesh' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingComponentData, Transform) == 0x000010, "Member 'FJunoGuidedBuildingComponentData::Transform' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingEditorActorEntry
// 0x00A0 (0x00A0 - 0x0000)
struct FJunoBuildingEditorActorEntry final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoGuidedBuildingComponentData> CompData;                                          // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ConnectedActors;                                   // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingEditorActorEntry) == 0x000010, "Wrong alignment on FJunoBuildingEditorActorEntry");
static_assert(sizeof(FJunoBuildingEditorActorEntry) == 0x0000A0, "Wrong size on FJunoBuildingEditorActorEntry");
static_assert(offsetof(FJunoBuildingEditorActorEntry, ActorName) == 0x000000, "Member 'FJunoBuildingEditorActorEntry::ActorName' has a wrong offset!");
static_assert(offsetof(FJunoBuildingEditorActorEntry, Actor) == 0x000008, "Member 'FJunoBuildingEditorActorEntry::Actor' has a wrong offset!");
static_assert(offsetof(FJunoBuildingEditorActorEntry, ActorClass) == 0x000010, "Member 'FJunoBuildingEditorActorEntry::ActorClass' has a wrong offset!");
static_assert(offsetof(FJunoBuildingEditorActorEntry, Transform) == 0x000020, "Member 'FJunoBuildingEditorActorEntry::Transform' has a wrong offset!");
static_assert(offsetof(FJunoBuildingEditorActorEntry, CompData) == 0x000080, "Member 'FJunoBuildingEditorActorEntry::CompData' has a wrong offset!");
static_assert(offsetof(FJunoBuildingEditorActorEntry, ConnectedActors) == 0x000090, "Member 'FJunoBuildingEditorActorEntry::ConnectedActors' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_CampAwesomeLevelChanged
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FJunoEvent_CampAwesomeLevelChanged final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_CampAwesomeLevelChanged) == 0x000008, "Wrong alignment on FJunoEvent_CampAwesomeLevelChanged");
static_assert(sizeof(FJunoEvent_CampAwesomeLevelChanged) == 0x000028, "Wrong size on FJunoEvent_CampAwesomeLevelChanged");

// ScriptStruct JunoGameNative.JunoEvent_CampAwesomePointsModified
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FJunoEvent_CampAwesomePointsModified final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_CampAwesomePointsModified) == 0x000008, "Wrong alignment on FJunoEvent_CampAwesomePointsModified");
static_assert(sizeof(FJunoEvent_CampAwesomePointsModified) == 0x000038, "Wrong size on FJunoEvent_CampAwesomePointsModified");

// ScriptStruct JunoGameNative.AwesomeLevelSaveData
// 0x0058 (0x0058 - 0x0000)
struct FAwesomeLevelSaveData final
{
public:
	int32                                         AwesomePoints;                                     // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwesomeLevel;                                      // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FGuid>                            AwesomePrefabIDs;                                  // 0x0008(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAwesomeLevelSaveData) == 0x000008, "Wrong alignment on FAwesomeLevelSaveData");
static_assert(sizeof(FAwesomeLevelSaveData) == 0x000058, "Wrong size on FAwesomeLevelSaveData");
static_assert(offsetof(FAwesomeLevelSaveData, AwesomePoints) == 0x000000, "Member 'FAwesomeLevelSaveData::AwesomePoints' has a wrong offset!");
static_assert(offsetof(FAwesomeLevelSaveData, AwesomeLevel) == 0x000004, "Member 'FAwesomeLevelSaveData::AwesomeLevel' has a wrong offset!");
static_assert(offsetof(FAwesomeLevelSaveData, AwesomePrefabIDs) == 0x000008, "Member 'FAwesomeLevelSaveData::AwesomePrefabIDs' has a wrong offset!");

// ScriptStruct JunoGameNative.AICampManagementSaveData
// 0x0020 (0x0020 - 0x0000)
struct FAICampManagementSaveData final
{
public:
	int64                                         LastPassiveResourceGatheringSimulatedJunoRealTime; // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CampCreationTime;                                  // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         FirstRecruitedNPCTime;                             // 0x0010(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LastVisitorsUpdateTime;                            // 0x0018(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAICampManagementSaveData) == 0x000008, "Wrong alignment on FAICampManagementSaveData");
static_assert(sizeof(FAICampManagementSaveData) == 0x000020, "Wrong size on FAICampManagementSaveData");
static_assert(offsetof(FAICampManagementSaveData, LastPassiveResourceGatheringSimulatedJunoRealTime) == 0x000000, "Member 'FAICampManagementSaveData::LastPassiveResourceGatheringSimulatedJunoRealTime' has a wrong offset!");
static_assert(offsetof(FAICampManagementSaveData, CampCreationTime) == 0x000008, "Member 'FAICampManagementSaveData::CampCreationTime' has a wrong offset!");
static_assert(offsetof(FAICampManagementSaveData, FirstRecruitedNPCTime) == 0x000010, "Member 'FAICampManagementSaveData::FirstRecruitedNPCTime' has a wrong offset!");
static_assert(offsetof(FAICampManagementSaveData, LastVisitorsUpdateTime) == 0x000018, "Member 'FAICampManagementSaveData::LastVisitorsUpdateTime' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMarker
// 0x0098 (0x0098 - 0x0000)
struct FJunoMarker final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Icon;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideColor;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMarkerCustomization;                        // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLeft;                                          // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       AttachedPlayerNetId;                               // 0x0030(0x0030)(SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VolumeId;                                          // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SettingsName;                                      // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MaterialInstanceDynamic;                           // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IconParamName;                                     // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorParamName;                                    // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    CustomizationOptionsHandle;                        // 0x0088(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoMarker) == 0x000008, "Wrong alignment on FJunoMarker");
static_assert(sizeof(FJunoMarker) == 0x000098, "Wrong size on FJunoMarker");
static_assert(offsetof(FJunoMarker, Location) == 0x000000, "Member 'FJunoMarker::Location' has a wrong offset!");
static_assert(offsetof(FJunoMarker, Icon) == 0x000018, "Member 'FJunoMarker::Icon' has a wrong offset!");
static_assert(offsetof(FJunoMarker, Color) == 0x000020, "Member 'FJunoMarker::Color' has a wrong offset!");
static_assert(offsetof(FJunoMarker, bOverrideColor) == 0x000024, "Member 'FJunoMarker::bOverrideColor' has a wrong offset!");
static_assert(offsetof(FJunoMarker, bEnableMarkerCustomization) == 0x000025, "Member 'FJunoMarker::bEnableMarkerCustomization' has a wrong offset!");
static_assert(offsetof(FJunoMarker, TimeLeft) == 0x000028, "Member 'FJunoMarker::TimeLeft' has a wrong offset!");
static_assert(offsetof(FJunoMarker, AttachedPlayerNetId) == 0x000030, "Member 'FJunoMarker::AttachedPlayerNetId' has a wrong offset!");
static_assert(offsetof(FJunoMarker, VolumeId) == 0x000060, "Member 'FJunoMarker::VolumeId' has a wrong offset!");
static_assert(offsetof(FJunoMarker, SettingsName) == 0x000070, "Member 'FJunoMarker::SettingsName' has a wrong offset!");
static_assert(offsetof(FJunoMarker, MaterialInstanceDynamic) == 0x000078, "Member 'FJunoMarker::MaterialInstanceDynamic' has a wrong offset!");
static_assert(offsetof(FJunoMarker, IconParamName) == 0x000080, "Member 'FJunoMarker::IconParamName' has a wrong offset!");
static_assert(offsetof(FJunoMarker, ColorParamName) == 0x000084, "Member 'FJunoMarker::ColorParamName' has a wrong offset!");
static_assert(offsetof(FJunoMarker, CustomizationOptionsHandle) == 0x000088, "Member 'FJunoMarker::CustomizationOptionsHandle' has a wrong offset!");

// ScriptStruct JunoGameNative.NamedPOISaveData
// 0x00B0 (0x00B0 - 0x0000)
struct FNamedPOISaveData final
{
public:
	class FText                                   POIName;                                           // 0x0000(0x0018)(SaveGame, NativeAccessSpecifierPublic)
	struct FJunoMarker                            Marker;                                            // 0x0018(0x0098)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNamedPOISaveData) == 0x000008, "Wrong alignment on FNamedPOISaveData");
static_assert(sizeof(FNamedPOISaveData) == 0x0000B0, "Wrong size on FNamedPOISaveData");
static_assert(offsetof(FNamedPOISaveData, POIName) == 0x000000, "Member 'FNamedPOISaveData::POIName' has a wrong offset!");
static_assert(offsetof(FNamedPOISaveData, Marker) == 0x000018, "Member 'FNamedPOISaveData::Marker' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCampRewardRecipeResult
// 0x0028 (0x0028 - 0x0000)
struct FJunoCampRewardRecipeResult final
{
public:
	TSoftObjectPtr<class UJunoBuildInstructionsItemDefinition> KnowledgeItemDefinition;                           // 0x0000(0x0020)(SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoKnowledgeState                           NewState;                                          // 0x0020(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoCampRewardRecipeResult) == 0x000008, "Wrong alignment on FJunoCampRewardRecipeResult");
static_assert(sizeof(FJunoCampRewardRecipeResult) == 0x000028, "Wrong size on FJunoCampRewardRecipeResult");
static_assert(offsetof(FJunoCampRewardRecipeResult, KnowledgeItemDefinition) == 0x000000, "Member 'FJunoCampRewardRecipeResult::KnowledgeItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoCampRewardRecipeResult, NewState) == 0x000020, "Member 'FJunoCampRewardRecipeResult::NewState' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCampRewardResults
// 0x0020 (0x0020 - 0x0000)
struct FJunoCampRewardResults final
{
public:
	TArray<struct FFortItemEntry>                 Items;                                             // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FJunoCampRewardRecipeResult>    Recipes;                                           // 0x0010(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoCampRewardResults) == 0x000008, "Wrong alignment on FJunoCampRewardResults");
static_assert(sizeof(FJunoCampRewardResults) == 0x000020, "Wrong size on FJunoCampRewardResults");
static_assert(offsetof(FJunoCampRewardResults, Items) == 0x000000, "Member 'FJunoCampRewardResults::Items' has a wrong offset!");
static_assert(offsetof(FJunoCampRewardResults, Recipes) == 0x000010, "Member 'FJunoCampRewardResults::Recipes' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCampSaveData
// 0x00A0 (0x00A0 - 0x0000)
struct FJunoCampSaveData final
{
public:
	struct FGuid                                  CampCenterID;                                      // 0x0000(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        CampCenterAssetID;                                 // 0x0010(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CampActorID;                                       // 0x0018(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CampBounds;                                        // 0x0028(0x0038)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         SoftRemovedElapsedJunoGameTime;                    // 0x0060(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LastRewardsRollInJunoGameTime;                     // 0x0068(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoCampRewardResults                 LastRewardResults;                                 // 0x0070(0x0020)(SaveGame, NativeAccessSpecifierPublic)
	class FName                                   LastRewardsRollLootTierGroupToSave;                // 0x0090(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastAwesomenessLevel;                              // 0x0094(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBiome                                    CampBiome;                                         // 0x0098(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoCampSaveData) == 0x000008, "Wrong alignment on FJunoCampSaveData");
static_assert(sizeof(FJunoCampSaveData) == 0x0000A0, "Wrong size on FJunoCampSaveData");
static_assert(offsetof(FJunoCampSaveData, CampCenterID) == 0x000000, "Member 'FJunoCampSaveData::CampCenterID' has a wrong offset!");
static_assert(offsetof(FJunoCampSaveData, CampCenterAssetID) == 0x000010, "Member 'FJunoCampSaveData::CampCenterAssetID' has a wrong offset!");
static_assert(offsetof(FJunoCampSaveData, CampActorID) == 0x000018, "Member 'FJunoCampSaveData::CampActorID' has a wrong offset!");
static_assert(offsetof(FJunoCampSaveData, CampBounds) == 0x000028, "Member 'FJunoCampSaveData::CampBounds' has a wrong offset!");
static_assert(offsetof(FJunoCampSaveData, SoftRemovedElapsedJunoGameTime) == 0x000060, "Member 'FJunoCampSaveData::SoftRemovedElapsedJunoGameTime' has a wrong offset!");
static_assert(offsetof(FJunoCampSaveData, LastRewardsRollInJunoGameTime) == 0x000068, "Member 'FJunoCampSaveData::LastRewardsRollInJunoGameTime' has a wrong offset!");
static_assert(offsetof(FJunoCampSaveData, LastRewardResults) == 0x000070, "Member 'FJunoCampSaveData::LastRewardResults' has a wrong offset!");
static_assert(offsetof(FJunoCampSaveData, LastRewardsRollLootTierGroupToSave) == 0x000090, "Member 'FJunoCampSaveData::LastRewardsRollLootTierGroupToSave' has a wrong offset!");
static_assert(offsetof(FJunoCampSaveData, LastAwesomenessLevel) == 0x000094, "Member 'FJunoCampSaveData::LastAwesomenessLevel' has a wrong offset!");
static_assert(offsetof(FJunoCampSaveData, CampBiome) == 0x000098, "Member 'FJunoCampSaveData::CampBiome' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAllCampsSaveData
// 0x0010 (0x0010 - 0x0000)
struct FJunoAllCampsSaveData final
{
public:
	TArray<struct FJunoCampSaveData>              Camps;                                             // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAllCampsSaveData) == 0x000008, "Wrong alignment on FJunoAllCampsSaveData");
static_assert(sizeof(FJunoAllCampsSaveData) == 0x000010, "Wrong size on FJunoAllCampsSaveData");
static_assert(offsetof(FJunoAllCampsSaveData, Camps) == 0x000000, "Member 'FJunoAllCampsSaveData::Camps' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCampPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0010 (0x0010 - 0x0000)
struct FJunoCampPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoAllCampsSaveData                  SavedAllCamps;                                     // 0x0000(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoCampPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoCampPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoCampPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000010, "Wrong size on FJunoCampPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoCampPersistenceFeatureData_InGameClass_PersistentInfo, SavedAllCamps) == 0x000000, "Member 'FJunoCampPersistenceFeatureData_InGameClass_PersistentInfo::SavedAllCamps' has a wrong offset!");

// ScriptStruct JunoGameNative.ActiveCampNPCEntry
// 0x0088 (0x0088 - 0x0000)
struct FActiveCampNPCEntry final
{
public:
	struct FGameplayTag                           UniqueAIIdentifier;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RoleTag;                                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              NPCIconSmall;                                      // 0x0028(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              NPCIconLarge;                                      // 0x0048(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              NPCIconWide;                                       // 0x0068(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveCampNPCEntry) == 0x000008, "Wrong alignment on FActiveCampNPCEntry");
static_assert(sizeof(FActiveCampNPCEntry) == 0x000088, "Wrong size on FActiveCampNPCEntry");
static_assert(offsetof(FActiveCampNPCEntry, UniqueAIIdentifier) == 0x000000, "Member 'FActiveCampNPCEntry::UniqueAIIdentifier' has a wrong offset!");
static_assert(offsetof(FActiveCampNPCEntry, DisplayName) == 0x000008, "Member 'FActiveCampNPCEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FActiveCampNPCEntry, RoleTag) == 0x000020, "Member 'FActiveCampNPCEntry::RoleTag' has a wrong offset!");
static_assert(offsetof(FActiveCampNPCEntry, NPCIconSmall) == 0x000028, "Member 'FActiveCampNPCEntry::NPCIconSmall' has a wrong offset!");
static_assert(offsetof(FActiveCampNPCEntry, NPCIconLarge) == 0x000048, "Member 'FActiveCampNPCEntry::NPCIconLarge' has a wrong offset!");
static_assert(offsetof(FActiveCampNPCEntry, NPCIconWide) == 0x000068, "Member 'FActiveCampNPCEntry::NPCIconWide' has a wrong offset!");

// ScriptStruct JunoGameNative.ChaosAudioEventSizeSounds
// 0x0020 (0x0020 - 0x0000)
struct FChaosAudioEventSizeSounds final
{
public:
	class USoundBase*                             Single;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Small;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Medium;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Large;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChaosAudioEventSizeSounds) == 0x000008, "Wrong alignment on FChaosAudioEventSizeSounds");
static_assert(sizeof(FChaosAudioEventSizeSounds) == 0x000020, "Wrong size on FChaosAudioEventSizeSounds");
static_assert(offsetof(FChaosAudioEventSizeSounds, Single) == 0x000000, "Member 'FChaosAudioEventSizeSounds::Single' has a wrong offset!");
static_assert(offsetof(FChaosAudioEventSizeSounds, Small) == 0x000008, "Member 'FChaosAudioEventSizeSounds::Small' has a wrong offset!");
static_assert(offsetof(FChaosAudioEventSizeSounds, Medium) == 0x000010, "Member 'FChaosAudioEventSizeSounds::Medium' has a wrong offset!");
static_assert(offsetof(FChaosAudioEventSizeSounds, Large) == 0x000018, "Member 'FChaosAudioEventSizeSounds::Large' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoConnectivityDebugVertexData
// 0x0050 (0x0050 - 0x0000)
struct FJunoConnectivityDebugVertexData final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawColorIndex;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIndependentlySupported;                         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AdjacentVerticesIndices;                           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoConnectivityDebugVertexData) == 0x000008, "Wrong alignment on FJunoConnectivityDebugVertexData");
static_assert(sizeof(FJunoConnectivityDebugVertexData) == 0x000050, "Wrong size on FJunoConnectivityDebugVertexData");
static_assert(offsetof(FJunoConnectivityDebugVertexData, Position) == 0x000000, "Member 'FJunoConnectivityDebugVertexData::Position' has a wrong offset!");
static_assert(offsetof(FJunoConnectivityDebugVertexData, DrawColorIndex) == 0x000018, "Member 'FJunoConnectivityDebugVertexData::DrawColorIndex' has a wrong offset!");
static_assert(offsetof(FJunoConnectivityDebugVertexData, bIsIndependentlySupported) == 0x00001C, "Member 'FJunoConnectivityDebugVertexData::bIsIndependentlySupported' has a wrong offset!");
static_assert(offsetof(FJunoConnectivityDebugVertexData, AdjacentVerticesIndices) == 0x000020, "Member 'FJunoConnectivityDebugVertexData::AdjacentVerticesIndices' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoConnectivityDebugData
// 0x0038 (0x0038 - 0x0000)
struct FJunoConnectivityDebugData final
{
public:
	TArray<struct FJunoConnectivityDebugVertexData> VertexDataToDraw;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawEnabled;                                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x27];                                      // 0x0011(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoConnectivityDebugData) == 0x000008, "Wrong alignment on FJunoConnectivityDebugData");
static_assert(sizeof(FJunoConnectivityDebugData) == 0x000038, "Wrong size on FJunoConnectivityDebugData");
static_assert(offsetof(FJunoConnectivityDebugData, VertexDataToDraw) == 0x000000, "Member 'FJunoConnectivityDebugData::VertexDataToDraw' has a wrong offset!");
static_assert(offsetof(FJunoConnectivityDebugData, bDebugDrawEnabled) == 0x000010, "Member 'FJunoConnectivityDebugData::bDebugDrawEnabled' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoTableRow_AFKEvent
// 0x0018 (0x0020 - 0x0008)
struct FJunoTableRow_AFKEvent final : public FTableRowBase
{
public:
	int32                                         EventWeight;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInstancedStruct>               EventFilters;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoTableRow_AFKEvent) == 0x000008, "Wrong alignment on FJunoTableRow_AFKEvent");
static_assert(sizeof(FJunoTableRow_AFKEvent) == 0x000020, "Wrong size on FJunoTableRow_AFKEvent");
static_assert(offsetof(FJunoTableRow_AFKEvent, EventWeight) == 0x000008, "Member 'FJunoTableRow_AFKEvent::EventWeight' has a wrong offset!");
static_assert(offsetof(FJunoTableRow_AFKEvent, EventFilters) == 0x000010, "Member 'FJunoTableRow_AFKEvent::EventFilters' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoIndicatorVisibilityQueryEntry
// 0x0010 (0x0010 - 0x0000)
struct FJunoIndicatorVisibilityQueryEntry final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              Pawn;                                              // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoIndicatorVisibilityQueryEntry) == 0x000008, "Wrong alignment on FJunoIndicatorVisibilityQueryEntry");
static_assert(sizeof(FJunoIndicatorVisibilityQueryEntry) == 0x000010, "Wrong size on FJunoIndicatorVisibilityQueryEntry");
static_assert(offsetof(FJunoIndicatorVisibilityQueryEntry, Pawn) == 0x000008, "Member 'FJunoIndicatorVisibilityQueryEntry::Pawn' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_CraftingObjectPlaced
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_CraftingObjectPlaced final
{
public:
	class AActor*                                 CraftingObject;                                    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_CraftingObjectPlaced) == 0x000008, "Wrong alignment on FJunoEvent_CraftingObjectPlaced");
static_assert(sizeof(FJunoEvent_CraftingObjectPlaced) == 0x000008, "Wrong size on FJunoEvent_CraftingObjectPlaced");
static_assert(offsetof(FJunoEvent_CraftingObjectPlaced, CraftingObject) == 0x000000, "Member 'FJunoEvent_CraftingObjectPlaced::CraftingObject' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoDestructionMaterialReplacementDataTable
// 0x0038 (0x0040 - 0x0008)
struct FJunoDestructionMaterialReplacementDataTable final : public FTableRowBase
{
public:
	class FString                                 SearchString;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseMaterialSearchString;                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialReplacement;                               // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Annotations;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoDestructionMaterialReplacementDataTable) == 0x000008, "Wrong alignment on FJunoDestructionMaterialReplacementDataTable");
static_assert(sizeof(FJunoDestructionMaterialReplacementDataTable) == 0x000040, "Wrong size on FJunoDestructionMaterialReplacementDataTable");
static_assert(offsetof(FJunoDestructionMaterialReplacementDataTable, SearchString) == 0x000008, "Member 'FJunoDestructionMaterialReplacementDataTable::SearchString' has a wrong offset!");
static_assert(offsetof(FJunoDestructionMaterialReplacementDataTable, BaseMaterialSearchString) == 0x000018, "Member 'FJunoDestructionMaterialReplacementDataTable::BaseMaterialSearchString' has a wrong offset!");
static_assert(offsetof(FJunoDestructionMaterialReplacementDataTable, MaterialReplacement) == 0x000028, "Member 'FJunoDestructionMaterialReplacementDataTable::MaterialReplacement' has a wrong offset!");
static_assert(offsetof(FJunoDestructionMaterialReplacementDataTable, Annotations) == 0x000030, "Member 'FJunoDestructionMaterialReplacementDataTable::Annotations' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoDestructionFixISMMaterialsDataflowNode
// 0x0020 (0x0108 - 0x00E8)
struct FJunoDestructionFixISMMaterialsDataflowNode final : public FDataflowNode
{
public:
	class UGeometryCollection*                    GCAsset;                                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGeometryCollectionAutoInstanceMesh> InstancedMeshes;                                   // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             ISMMaterialDataTable;                              // 0x0100(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoDestructionFixISMMaterialsDataflowNode) == 0x000008, "Wrong alignment on FJunoDestructionFixISMMaterialsDataflowNode");
static_assert(sizeof(FJunoDestructionFixISMMaterialsDataflowNode) == 0x000108, "Wrong size on FJunoDestructionFixISMMaterialsDataflowNode");
static_assert(offsetof(FJunoDestructionFixISMMaterialsDataflowNode, GCAsset) == 0x0000E8, "Member 'FJunoDestructionFixISMMaterialsDataflowNode::GCAsset' has a wrong offset!");
static_assert(offsetof(FJunoDestructionFixISMMaterialsDataflowNode, InstancedMeshes) == 0x0000F0, "Member 'FJunoDestructionFixISMMaterialsDataflowNode::InstancedMeshes' has a wrong offset!");
static_assert(offsetof(FJunoDestructionFixISMMaterialsDataflowNode, ISMMaterialDataTable) == 0x000100, "Member 'FJunoDestructionFixISMMaterialsDataflowNode::ISMMaterialDataTable' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoLivingWorldPointProviderEventLimiter
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FJunoLivingWorldPointProviderEventLimiter final
{
public:
	bool                                          bCanLimitBasedOnEvent;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFortAthenaLivingWorldEventData> EventData;                                         // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x14];                                       // 0x000C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoLivingWorldPointProviderEventLimiter) == 0x000008, "Wrong alignment on FJunoLivingWorldPointProviderEventLimiter");
static_assert(sizeof(FJunoLivingWorldPointProviderEventLimiter) == 0x000020, "Wrong size on FJunoLivingWorldPointProviderEventLimiter");
static_assert(offsetof(FJunoLivingWorldPointProviderEventLimiter, bCanLimitBasedOnEvent) == 0x000000, "Member 'FJunoLivingWorldPointProviderEventLimiter::bCanLimitBasedOnEvent' has a wrong offset!");
static_assert(offsetof(FJunoLivingWorldPointProviderEventLimiter, EventData) == 0x000004, "Member 'FJunoLivingWorldPointProviderEventLimiter::EventData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoExampleMacroGenerated_InGameClass_PersistentInfo
// 0x0004 (0x0004 - 0x0000)
struct FJunoExampleMacroGenerated_InGameClass_PersistentInfo final
{
public:
	int32                                         PersistentData_InStorage;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoExampleMacroGenerated_InGameClass_PersistentInfo) == 0x000004, "Wrong alignment on FJunoExampleMacroGenerated_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoExampleMacroGenerated_InGameClass_PersistentInfo) == 0x000004, "Wrong size on FJunoExampleMacroGenerated_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoExampleMacroGenerated_InGameClass_PersistentInfo, PersistentData_InStorage) == 0x000000, "Member 'FJunoExampleMacroGenerated_InGameClass_PersistentInfo::PersistentData_InStorage' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoExample_InGameClass_PersistentInfo
// 0x0004 (0x0004 - 0x0000)
struct FJunoExample_InGameClass_PersistentInfo final
{
public:
	int32                                         PersistentData_InStorage;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoExample_InGameClass_PersistentInfo) == 0x000004, "Wrong alignment on FJunoExample_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoExample_InGameClass_PersistentInfo) == 0x000004, "Wrong size on FJunoExample_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoExample_InGameClass_PersistentInfo, PersistentData_InStorage) == 0x000000, "Member 'FJunoExample_InGameClass_PersistentInfo::PersistentData_InStorage' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoFogOfWar
// 0x0018 (0x0018 - 0x0000)
struct FJunoFogOfWar final
{
public:
	int32                                         ClearedPixelCount;                                 // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ExplorationMask;                                   // 0x0008(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoFogOfWar) == 0x000008, "Wrong alignment on FJunoFogOfWar");
static_assert(sizeof(FJunoFogOfWar) == 0x000018, "Wrong size on FJunoFogOfWar");
static_assert(offsetof(FJunoFogOfWar, ClearedPixelCount) == 0x000000, "Member 'FJunoFogOfWar::ClearedPixelCount' has a wrong offset!");
static_assert(offsetof(FJunoFogOfWar, ExplorationMask) == 0x000008, "Member 'FJunoFogOfWar::ExplorationMask' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoFogOfWarSaveData
// 0x0010 (0x0010 - 0x0000)
struct FJunoFogOfWarSaveData final
{
public:
	TArray<struct FJunoFogOfWar>                  TileDatas;                                         // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoFogOfWarSaveData) == 0x000008, "Wrong alignment on FJunoFogOfWarSaveData");
static_assert(sizeof(FJunoFogOfWarSaveData) == 0x000010, "Wrong size on FJunoFogOfWarSaveData");
static_assert(offsetof(FJunoFogOfWarSaveData, TileDatas) == 0x000000, "Member 'FJunoFogOfWarSaveData::TileDatas' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoFogOfWarPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0010 (0x0010 - 0x0000)
struct FJunoFogOfWarPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoFogOfWarSaveData                  FogOfWarSaveData;                                  // 0x0000(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoFogOfWarPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoFogOfWarPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoFogOfWarPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000010, "Wrong size on FJunoFogOfWarPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoFogOfWarPersistenceFeatureData_InGameClass_PersistentInfo, FogOfWarSaveData) == 0x000000, "Member 'FJunoFogOfWarPersistenceFeatureData_InGameClass_PersistentInfo::FogOfWarSaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoFreeBuildSaveData
// 0x0002 (0x0002 - 0x0000)
struct FJunoFreeBuildSaveData final
{
public:
	bool                                          bIsFreeBuildSaved;                                 // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFreeBuildEverSaved;                            // 0x0001(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoFreeBuildSaveData) == 0x000001, "Wrong alignment on FJunoFreeBuildSaveData");
static_assert(sizeof(FJunoFreeBuildSaveData) == 0x000002, "Wrong size on FJunoFreeBuildSaveData");
static_assert(offsetof(FJunoFreeBuildSaveData, bIsFreeBuildSaved) == 0x000000, "Member 'FJunoFreeBuildSaveData::bIsFreeBuildSaved' has a wrong offset!");
static_assert(offsetof(FJunoFreeBuildSaveData, bWasFreeBuildEverSaved) == 0x000001, "Member 'FJunoFreeBuildSaveData::bWasFreeBuildEverSaved' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoFreeBuildPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0002 (0x0002 - 0x0000)
struct FJunoFreeBuildPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoFreeBuildSaveData                 FreeBuildSaveData;                                 // 0x0000(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoFreeBuildPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000001, "Wrong alignment on FJunoFreeBuildPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoFreeBuildPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000002, "Wrong size on FJunoFreeBuildPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoFreeBuildPersistenceFeatureData_InGameClass_PersistentInfo, FreeBuildSaveData) == 0x000000, "Member 'FJunoFreeBuildPersistenceFeatureData_InGameClass_PersistentInfo::FreeBuildSaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingPlacementResult
// 0x0280 (0x0280 - 0x0000)
struct FJunoBuildingPlacementResult final
{
public:
	struct FTransform                             CameraViewPoint;                                   // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             TargetTraceResult;                                 // 0x0060(0x00E8)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EJunoBuildingPlacementType                    PlacementType;                                     // 0x0148(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             UnsnappedTargetTransform;                          // 0x0150(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TargetTransform;                                   // 0x01B0(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             CoordinateBasis;                                   // 0x0210(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  AttachmentActor;                                   // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingPlacementResult) == 0x000010, "Wrong alignment on FJunoBuildingPlacementResult");
static_assert(sizeof(FJunoBuildingPlacementResult) == 0x000280, "Wrong size on FJunoBuildingPlacementResult");
static_assert(offsetof(FJunoBuildingPlacementResult, CameraViewPoint) == 0x000000, "Member 'FJunoBuildingPlacementResult::CameraViewPoint' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPlacementResult, TargetTraceResult) == 0x000060, "Member 'FJunoBuildingPlacementResult::TargetTraceResult' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPlacementResult, PlacementType) == 0x000148, "Member 'FJunoBuildingPlacementResult::PlacementType' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPlacementResult, UnsnappedTargetTransform) == 0x000150, "Member 'FJunoBuildingPlacementResult::UnsnappedTargetTransform' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPlacementResult, TargetTransform) == 0x0001B0, "Member 'FJunoBuildingPlacementResult::TargetTransform' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPlacementResult, CoordinateBasis) == 0x000210, "Member 'FJunoBuildingPlacementResult::CoordinateBasis' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPlacementResult, AttachmentActor) == 0x000270, "Member 'FJunoBuildingPlacementResult::AttachmentActor' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoFreeBuildEverUsedEvent
// 0x0001 (0x0001 - 0x0000)
struct FJunoFreeBuildEverUsedEvent final
{
public:
	bool                                          bWasFreeBuildEverEnabled;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoFreeBuildEverUsedEvent) == 0x000001, "Wrong alignment on FJunoFreeBuildEverUsedEvent");
static_assert(sizeof(FJunoFreeBuildEverUsedEvent) == 0x000001, "Wrong size on FJunoFreeBuildEverUsedEvent");
static_assert(offsetof(FJunoFreeBuildEverUsedEvent, bWasFreeBuildEverEnabled) == 0x000000, "Member 'FJunoFreeBuildEverUsedEvent::bWasFreeBuildEverEnabled' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoFreeBuildSpawnable
// 0x0000 (0x0008 - 0x0008)
struct FJunoFreeBuildSpawnable : public FTableRowBase
{
};
static_assert(alignof(FJunoFreeBuildSpawnable) == 0x000008, "Wrong alignment on FJunoFreeBuildSpawnable");
static_assert(sizeof(FJunoFreeBuildSpawnable) == 0x000008, "Wrong size on FJunoFreeBuildSpawnable");

// ScriptStruct JunoGameNative.JunoFreeBuildSpawnableItem
// 0x0020 (0x0028 - 0x0008)
struct FJunoFreeBuildSpawnableItem final : public FJunoFreeBuildSpawnable
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     Item;                                              // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoFreeBuildSpawnableItem) == 0x000008, "Wrong alignment on FJunoFreeBuildSpawnableItem");
static_assert(sizeof(FJunoFreeBuildSpawnableItem) == 0x000028, "Wrong size on FJunoFreeBuildSpawnableItem");
static_assert(offsetof(FJunoFreeBuildSpawnableItem, Item) == 0x000008, "Member 'FJunoFreeBuildSpawnableItem::Item' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGeometryCollectionAssemblerGCInfo
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FJunoGeometryCollectionAssemblerGCInfo final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoGeometryCollectionAssemblerGCInfo) == 0x000008, "Wrong alignment on FJunoGeometryCollectionAssemblerGCInfo");
static_assert(sizeof(FJunoGeometryCollectionAssemblerGCInfo) == 0x000040, "Wrong size on FJunoGeometryCollectionAssemblerGCInfo");

// ScriptStruct JunoGameNative.JunoGeometryCollectionAssemblerTargetData
// 0x0008 (0x0008 - 0x0000)
struct FJunoGeometryCollectionAssemblerTargetData final
{
public:
	float                                         TargetRatio;                                       // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForcedStartRatio;                                  // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGeometryCollectionAssemblerTargetData) == 0x000004, "Wrong alignment on FJunoGeometryCollectionAssemblerTargetData");
static_assert(sizeof(FJunoGeometryCollectionAssemblerTargetData) == 0x000008, "Wrong size on FJunoGeometryCollectionAssemblerTargetData");
static_assert(offsetof(FJunoGeometryCollectionAssemblerTargetData, TargetRatio) == 0x000000, "Member 'FJunoGeometryCollectionAssemblerTargetData::TargetRatio' has a wrong offset!");
static_assert(offsetof(FJunoGeometryCollectionAssemblerTargetData, ForcedStartRatio) == 0x000004, "Member 'FJunoGeometryCollectionAssemblerTargetData::ForcedStartRatio' has a wrong offset!");

// ScriptStruct JunoGameNative.GuidedBuildingNewFocus
// 0x0008 (0x0008 - 0x0000)
struct FGuidedBuildingNewFocus final
{
public:
	TWeakObjectPtr<class AJunoGuidedBuildingActor> GuidedBuildingActor;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuidedBuildingNewFocus) == 0x000004, "Wrong alignment on FGuidedBuildingNewFocus");
static_assert(sizeof(FGuidedBuildingNewFocus) == 0x000008, "Wrong size on FGuidedBuildingNewFocus");
static_assert(offsetof(FGuidedBuildingNewFocus, GuidedBuildingActor) == 0x000000, "Member 'FGuidedBuildingNewFocus::GuidedBuildingActor' has a wrong offset!");

// ScriptStruct JunoGameNative.GuidedBuildBarUpdate
// 0x0010 (0x0018 - 0x0008)
struct FGuidedBuildBarUpdate final : public FGuidedBuildingMessageBase
{
public:
	TArray<class FName>                           GuidedBuildBarRecipes;                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuidedBuildBarUpdate) == 0x000008, "Wrong alignment on FGuidedBuildBarUpdate");
static_assert(sizeof(FGuidedBuildBarUpdate) == 0x000018, "Wrong size on FGuidedBuildBarUpdate");
static_assert(offsetof(FGuidedBuildBarUpdate, GuidedBuildBarRecipes) == 0x000008, "Member 'FGuidedBuildBarUpdate::GuidedBuildBarRecipes' has a wrong offset!");

// ScriptStruct JunoGameNative.GuidedBuildingRegistrationEvent
// 0x0014 (0x0014 - 0x0000)
struct FGuidedBuildingRegistrationEvent final
{
public:
	TWeakObjectPtr<class AJunoGuidedBuildingActor> GuidedBuild;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRegistering;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGuidedBuildingRegistrationEvent) == 0x000004, "Wrong alignment on FGuidedBuildingRegistrationEvent");
static_assert(sizeof(FGuidedBuildingRegistrationEvent) == 0x000014, "Wrong size on FGuidedBuildingRegistrationEvent");
static_assert(offsetof(FGuidedBuildingRegistrationEvent, GuidedBuild) == 0x000000, "Member 'FGuidedBuildingRegistrationEvent::GuidedBuild' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingRegistrationEvent, PlayerState) == 0x000008, "Member 'FGuidedBuildingRegistrationEvent::PlayerState' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingRegistrationEvent, bIsRegistering) == 0x000010, "Member 'FGuidedBuildingRegistrationEvent::bIsRegistering' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldStreamingSources
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FJunoWorldStreamingSources final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldStreamingSources) == 0x000008, "Wrong alignment on FJunoWorldStreamingSources");
static_assert(sizeof(FJunoWorldStreamingSources) == 0x000060, "Wrong size on FJunoWorldStreamingSources");

// ScriptStruct JunoGameNative.JunoIndexedSerializedEdgeData
// 0x0008 (0x0008 - 0x0000)
struct FJunoIndexedSerializedEdgeData final
{
public:
	uint32                                        Node1;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Node2;                                             // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoIndexedSerializedEdgeData) == 0x000004, "Wrong alignment on FJunoIndexedSerializedEdgeData");
static_assert(sizeof(FJunoIndexedSerializedEdgeData) == 0x000008, "Wrong size on FJunoIndexedSerializedEdgeData");
static_assert(offsetof(FJunoIndexedSerializedEdgeData, Node1) == 0x000000, "Member 'FJunoIndexedSerializedEdgeData::Node1' has a wrong offset!");
static_assert(offsetof(FJunoIndexedSerializedEdgeData, Node2) == 0x000004, "Member 'FJunoIndexedSerializedEdgeData::Node2' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoIndexedSerializedIslandData
// 0x0010 (0x0010 - 0x0000)
struct FJunoIndexedSerializedIslandData final
{
public:
	TArray<uint32>                                Vertices;                                          // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoIndexedSerializedIslandData) == 0x000008, "Wrong alignment on FJunoIndexedSerializedIslandData");
static_assert(sizeof(FJunoIndexedSerializedIslandData) == 0x000010, "Wrong size on FJunoIndexedSerializedIslandData");
static_assert(offsetof(FJunoIndexedSerializedIslandData, Vertices) == 0x000000, "Member 'FJunoIndexedSerializedIslandData::Vertices' has a wrong offset!");

// ScriptStruct JunoGameNative.PCGJunoPossibleWorld
// 0x0038 (0x0040 - 0x0008)
struct FPCGJunoPossibleWorld final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UWorld>                  PersistentLevel;                                   // 0x0008(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          OverlayLevels;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bCanBeRandomlySelected;                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeprecated;                                     // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPCGJunoPossibleWorld) == 0x000008, "Wrong alignment on FPCGJunoPossibleWorld");
static_assert(sizeof(FPCGJunoPossibleWorld) == 0x000040, "Wrong size on FPCGJunoPossibleWorld");
static_assert(offsetof(FPCGJunoPossibleWorld, PersistentLevel) == 0x000008, "Member 'FPCGJunoPossibleWorld::PersistentLevel' has a wrong offset!");
static_assert(offsetof(FPCGJunoPossibleWorld, OverlayLevels) == 0x000028, "Member 'FPCGJunoPossibleWorld::OverlayLevels' has a wrong offset!");
static_assert(offsetof(FPCGJunoPossibleWorld, bCanBeRandomlySelected) == 0x000038, "Member 'FPCGJunoPossibleWorld::bCanBeRandomlySelected' has a wrong offset!");
static_assert(offsetof(FPCGJunoPossibleWorld, bIsDeprecated) == 0x000039, "Member 'FPCGJunoPossibleWorld::bIsDeprecated' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoIndexedSavedConnectivityData
// 0x0088 (0x0088 - 0x0000)
struct FJunoIndexedSavedConnectivityData final
{
public:
	struct FGraphProperties                       Properties;                                        // 0x0000(0x0001)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGraphVertexHandle>             Vertices;                                          // 0x0008(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FJunoIndexedSerializedEdgeData> Edges;                                             // 0x0018(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TMap<struct FGraphIslandHandle, struct FJunoIndexedSerializedIslandData> Islands;                                           // 0x0028(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  ConnectivityVertexData;                            // 0x0078(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoIndexedSavedConnectivityData) == 0x000008, "Wrong alignment on FJunoIndexedSavedConnectivityData");
static_assert(sizeof(FJunoIndexedSavedConnectivityData) == 0x000088, "Wrong size on FJunoIndexedSavedConnectivityData");
static_assert(offsetof(FJunoIndexedSavedConnectivityData, Properties) == 0x000000, "Member 'FJunoIndexedSavedConnectivityData::Properties' has a wrong offset!");
static_assert(offsetof(FJunoIndexedSavedConnectivityData, Vertices) == 0x000008, "Member 'FJunoIndexedSavedConnectivityData::Vertices' has a wrong offset!");
static_assert(offsetof(FJunoIndexedSavedConnectivityData, Edges) == 0x000018, "Member 'FJunoIndexedSavedConnectivityData::Edges' has a wrong offset!");
static_assert(offsetof(FJunoIndexedSavedConnectivityData, Islands) == 0x000028, "Member 'FJunoIndexedSavedConnectivityData::Islands' has a wrong offset!");
static_assert(offsetof(FJunoIndexedSavedConnectivityData, ConnectivityVertexData) == 0x000078, "Member 'FJunoIndexedSavedConnectivityData::ConnectivityVertexData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInputMapping
// 0x0010 (0x0010 - 0x0000)
struct FJunoInputMapping final
{
public:
	class UInputMappingContext*                   Context;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoInputMapping) == 0x000008, "Wrong alignment on FJunoInputMapping");
static_assert(sizeof(FJunoInputMapping) == 0x000010, "Wrong size on FJunoInputMapping");
static_assert(offsetof(FJunoInputMapping, Context) == 0x000000, "Member 'FJunoInputMapping::Context' has a wrong offset!");
static_assert(offsetof(FJunoInputMapping, Priority) == 0x000008, "Member 'FJunoInputMapping::Priority' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_LastGuidedBuildingActorChanged
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_LastGuidedBuildingActorChanged final
{
public:
	TWeakObjectPtr<class AJunoGuidedBuildingActor> NewActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_LastGuidedBuildingActorChanged) == 0x000004, "Wrong alignment on FJunoEvent_LastGuidedBuildingActorChanged");
static_assert(sizeof(FJunoEvent_LastGuidedBuildingActorChanged) == 0x000008, "Wrong size on FJunoEvent_LastGuidedBuildingActorChanged");
static_assert(offsetof(FJunoEvent_LastGuidedBuildingActorChanged, NewActor) == 0x000000, "Member 'FJunoEvent_LastGuidedBuildingActorChanged::NewActor' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInputAlternateDisplayText
// 0x0028 (0x0028 - 0x0000)
struct FJunoInputAlternateDisplayText final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoInputAlternateDisplayText) == 0x000008, "Wrong alignment on FJunoInputAlternateDisplayText");
static_assert(sizeof(FJunoInputAlternateDisplayText) == 0x000028, "Wrong size on FJunoInputAlternateDisplayText");
static_assert(offsetof(FJunoInputAlternateDisplayText, InputAction) == 0x000000, "Member 'FJunoInputAlternateDisplayText::InputAction' has a wrong offset!");
static_assert(offsetof(FJunoInputAlternateDisplayText, ActionName) == 0x000008, "Member 'FJunoInputAlternateDisplayText::ActionName' has a wrong offset!");
static_assert(offsetof(FJunoInputAlternateDisplayText, DisplayText) == 0x000010, "Member 'FJunoInputAlternateDisplayText::DisplayText' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInputMappingChangedMessage
// 0x0008 (0x0008 - 0x0000)
struct FJunoInputMappingChangedMessage final
{
public:
	class UJunoInputMappingComponent*             JunoInputMappingComponent;                         // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoInputMappingChangedMessage) == 0x000008, "Wrong alignment on FJunoInputMappingChangedMessage");
static_assert(sizeof(FJunoInputMappingChangedMessage) == 0x000008, "Wrong size on FJunoInputMappingChangedMessage");
static_assert(offsetof(FJunoInputMappingChangedMessage, JunoInputMappingComponent) == 0x000000, "Member 'FJunoInputMappingChangedMessage::JunoInputMappingComponent' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingSectionData
// 0x0038 (0x0038 - 0x0000)
struct FJunoGuidedBuildingSectionData
{
public:
	class FText                                   SectionDisplayName;                                // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         NumCompleted;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumberOfSnapsInSection;                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSectionEverCompleted;                             // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoGuidedBuildingStageData>   Stages;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FJunoGuidedBuildingSectionData) == 0x000008, "Wrong alignment on FJunoGuidedBuildingSectionData");
static_assert(sizeof(FJunoGuidedBuildingSectionData) == 0x000038, "Wrong size on FJunoGuidedBuildingSectionData");
static_assert(offsetof(FJunoGuidedBuildingSectionData, SectionDisplayName) == 0x000000, "Member 'FJunoGuidedBuildingSectionData::SectionDisplayName' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSectionData, NumCompleted) == 0x000018, "Member 'FJunoGuidedBuildingSectionData::NumCompleted' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSectionData, TotalNumberOfSnapsInSection) == 0x00001C, "Member 'FJunoGuidedBuildingSectionData::TotalNumberOfSnapsInSection' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSectionData, bSectionEverCompleted) == 0x000020, "Member 'FJunoGuidedBuildingSectionData::bSectionEverCompleted' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSectionData, Stages) == 0x000028, "Member 'FJunoGuidedBuildingSectionData::Stages' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingSectionEditorData
// 0x0018 (0x0050 - 0x0038)
struct FJunoGuidedBuildingSectionEditorData final : public FJunoGuidedBuildingSectionData
{
public:
	double                                        ZSortValue;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoGuidedBuildingStageEditorData> EditorStages;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGuidedBuildingSectionEditorData) == 0x000008, "Wrong alignment on FJunoGuidedBuildingSectionEditorData");
static_assert(sizeof(FJunoGuidedBuildingSectionEditorData) == 0x000050, "Wrong size on FJunoGuidedBuildingSectionEditorData");
static_assert(offsetof(FJunoGuidedBuildingSectionEditorData, ZSortValue) == 0x000038, "Member 'FJunoGuidedBuildingSectionEditorData::ZSortValue' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSectionEditorData, EditorStages) == 0x000040, "Member 'FJunoGuidedBuildingSectionEditorData::EditorStages' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInventoriesSaveData
// 0x0010 (0x0010 - 0x0000)
struct FJunoInventoriesSaveData final
{
public:
	TArray<class AJunoInventory*>                 Inventories;                                       // 0x0000(0x0010)(ZeroConstructor, SaveGame, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoInventoriesSaveData) == 0x000008, "Wrong alignment on FJunoInventoriesSaveData");
static_assert(sizeof(FJunoInventoriesSaveData) == 0x000010, "Wrong size on FJunoInventoriesSaveData");
static_assert(offsetof(FJunoInventoriesSaveData, Inventories) == 0x000000, "Member 'FJunoInventoriesSaveData::Inventories' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInventoryPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0010 (0x0010 - 0x0000)
struct FJunoInventoryPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	TArray<struct FPersistenceFrameworkLevelSaveSpawnablePtr> Inventories;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoInventoryPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoInventoryPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoInventoryPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000010, "Wrong size on FJunoInventoryPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoInventoryPersistenceFeatureData_InGameClass_PersistentInfo, Inventories) == 0x000000, "Member 'FJunoInventoryPersistenceFeatureData_InGameClass_PersistentInfo::Inventories' has a wrong offset!");

// ScriptStruct JunoGameNative.GeometryCollectionAuditData
// 0x00B8 (0x00B8 - 0x0000)
struct FGeometryCollectionAuditData final
{
public:
	struct FSoftObjectPath                        AssetPath;                                         // 0x0000(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        RestCollection_ManagedArraysSize;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ComponentInstanceCount;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DynamicCollectionCount;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        DynamicCollectionsTotalSize;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRigidsAllInstances;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSimulatedParticlesAllInstances;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReservedUnusedParticles;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxClusterLevelRequested;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimulatedClusterLevelRequested;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCalculatedClusterLevel;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxActualClusterLevel;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        RenderDataSize;                                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumExemplars;                                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        NaniteDataSize;                                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    RootProxyMeshes;                                   // 0x0068(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint64                                        NumAutoInstancedMeshes;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    AutoInstancedMeshes;                               // 0x0080(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint64                                        SizeSpecificDataSize;                              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DynamicCollectionGroupsAndSizes;                   // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RestCollectionGroupsAndSizes;                      // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryCollectionAuditData) == 0x000008, "Wrong alignment on FGeometryCollectionAuditData");
static_assert(sizeof(FGeometryCollectionAuditData) == 0x0000B8, "Wrong size on FGeometryCollectionAuditData");
static_assert(offsetof(FGeometryCollectionAuditData, AssetPath) == 0x000000, "Member 'FGeometryCollectionAuditData::AssetPath' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, RestCollection_ManagedArraysSize) == 0x000018, "Member 'FGeometryCollectionAuditData::RestCollection_ManagedArraysSize' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, ComponentInstanceCount) == 0x000020, "Member 'FGeometryCollectionAuditData::ComponentInstanceCount' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, DynamicCollectionCount) == 0x000024, "Member 'FGeometryCollectionAuditData::DynamicCollectionCount' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, DynamicCollectionsTotalSize) == 0x000028, "Member 'FGeometryCollectionAuditData::DynamicCollectionsTotalSize' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, NumRigidsAllInstances) == 0x000030, "Member 'FGeometryCollectionAuditData::NumRigidsAllInstances' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, NumSimulatedParticlesAllInstances) == 0x000034, "Member 'FGeometryCollectionAuditData::NumSimulatedParticlesAllInstances' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, ReservedUnusedParticles) == 0x000038, "Member 'FGeometryCollectionAuditData::ReservedUnusedParticles' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, MaxClusterLevelRequested) == 0x00003C, "Member 'FGeometryCollectionAuditData::MaxClusterLevelRequested' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, MaxSimulatedClusterLevelRequested) == 0x000040, "Member 'FGeometryCollectionAuditData::MaxSimulatedClusterLevelRequested' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, MaxCalculatedClusterLevel) == 0x000044, "Member 'FGeometryCollectionAuditData::MaxCalculatedClusterLevel' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, MaxActualClusterLevel) == 0x000048, "Member 'FGeometryCollectionAuditData::MaxActualClusterLevel' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, RenderDataSize) == 0x000050, "Member 'FGeometryCollectionAuditData::RenderDataSize' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, NumExemplars) == 0x000058, "Member 'FGeometryCollectionAuditData::NumExemplars' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, NaniteDataSize) == 0x000060, "Member 'FGeometryCollectionAuditData::NaniteDataSize' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, RootProxyMeshes) == 0x000068, "Member 'FGeometryCollectionAuditData::RootProxyMeshes' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, NumAutoInstancedMeshes) == 0x000078, "Member 'FGeometryCollectionAuditData::NumAutoInstancedMeshes' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, AutoInstancedMeshes) == 0x000080, "Member 'FGeometryCollectionAuditData::AutoInstancedMeshes' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, SizeSpecificDataSize) == 0x000090, "Member 'FGeometryCollectionAuditData::SizeSpecificDataSize' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, DynamicCollectionGroupsAndSizes) == 0x000098, "Member 'FGeometryCollectionAuditData::DynamicCollectionGroupsAndSizes' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionAuditData, RestCollectionGroupsAndSizes) == 0x0000A8, "Member 'FGeometryCollectionAuditData::RestCollectionGroupsAndSizes' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoSavedInventoryUIData
// 0x0030 (0x0030 - 0x0000)
struct FJunoSavedInventoryUIData final
{
public:
	struct FGuid                                  InventoryHandleNewGuid;                            // 0x0000(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoItemSlot>                  AllSlotData;                                       // 0x0010(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FJunoSelectedSlotData>          SelectedItemGroupSlot;                             // 0x0020(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoSavedInventoryUIData) == 0x000008, "Wrong alignment on FJunoSavedInventoryUIData");
static_assert(sizeof(FJunoSavedInventoryUIData) == 0x000030, "Wrong size on FJunoSavedInventoryUIData");
static_assert(offsetof(FJunoSavedInventoryUIData, InventoryHandleNewGuid) == 0x000000, "Member 'FJunoSavedInventoryUIData::InventoryHandleNewGuid' has a wrong offset!");
static_assert(offsetof(FJunoSavedInventoryUIData, AllSlotData) == 0x000010, "Member 'FJunoSavedInventoryUIData::AllSlotData' has a wrong offset!");
static_assert(offsetof(FJunoSavedInventoryUIData, SelectedItemGroupSlot) == 0x000020, "Member 'FJunoSavedInventoryUIData::SelectedItemGroupSlot' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInventoryUISaveData
// 0x0050 (0x0050 - 0x0000)
struct FJunoInventoryUISaveData final
{
public:
	TMap<struct FGuid, struct FJunoSavedInventoryUIData> InventoryUIData;                                   // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoInventoryUISaveData) == 0x000008, "Wrong alignment on FJunoInventoryUISaveData");
static_assert(sizeof(FJunoInventoryUISaveData) == 0x000050, "Wrong size on FJunoInventoryUISaveData");
static_assert(offsetof(FJunoInventoryUISaveData, InventoryUIData) == 0x000000, "Member 'FJunoInventoryUISaveData::InventoryUIData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoInventoryUIPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0050 (0x0050 - 0x0000)
struct FJunoInventoryUIPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoInventoryUISaveData               SavedInventoryUI;                                  // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoInventoryUIPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoInventoryUIPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoInventoryUIPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000050, "Wrong size on FJunoInventoryUIPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoInventoryUIPersistenceFeatureData_InGameClass_PersistentInfo, SavedInventoryUI) == 0x000000, "Member 'FJunoInventoryUIPersistenceFeatureData_InGameClass_PersistentInfo::SavedInventoryUI' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuilderToolInteractionActorClassSet
// 0x00A0 (0x00A0 - 0x0000)
struct FJunoBuilderToolInteractionActorClassSet final
{
public:
	TSet<TSoftClassPtr<class UClass>>             Classes;                                           // 0x0000(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<TSoftClassPtr<class UClass>>             ExcludedSubclasses;                                // 0x0050(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuilderToolInteractionActorClassSet) == 0x000008, "Wrong alignment on FJunoBuilderToolInteractionActorClassSet");
static_assert(sizeof(FJunoBuilderToolInteractionActorClassSet) == 0x0000A0, "Wrong size on FJunoBuilderToolInteractionActorClassSet");
static_assert(offsetof(FJunoBuilderToolInteractionActorClassSet, Classes) == 0x000000, "Member 'FJunoBuilderToolInteractionActorClassSet::Classes' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolInteractionActorClassSet, ExcludedSubclasses) == 0x000050, "Member 'FJunoBuilderToolInteractionActorClassSet::ExcludedSubclasses' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgeBundleTableRow
// 0x0008 (0x0010 - 0x0008)
struct FJunoKnowledgeBundleTableRow final : public FTableRowBase
{
public:
	class FName                                   CraftingRecipeIdentifier;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoKnowledgeBundleTableRow) == 0x000008, "Wrong alignment on FJunoKnowledgeBundleTableRow");
static_assert(sizeof(FJunoKnowledgeBundleTableRow) == 0x000010, "Wrong size on FJunoKnowledgeBundleTableRow");
static_assert(offsetof(FJunoKnowledgeBundleTableRow, CraftingRecipeIdentifier) == 0x000008, "Member 'FJunoKnowledgeBundleTableRow::CraftingRecipeIdentifier' has a wrong offset!");

// ScriptStruct JunoGameNative.PlayerAwesomeUpgradeResourceData
// 0x0018 (0x0018 - 0x0000)
struct FPlayerAwesomeUpgradeResourceData final
{
public:
	TArray<class UFortItem*>                      ResourceInstances;                                 // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerAwesomeUpgradeResourceData) == 0x000008, "Wrong alignment on FPlayerAwesomeUpgradeResourceData");
static_assert(sizeof(FPlayerAwesomeUpgradeResourceData) == 0x000018, "Wrong size on FPlayerAwesomeUpgradeResourceData");
static_assert(offsetof(FPlayerAwesomeUpgradeResourceData, ResourceInstances) == 0x000000, "Member 'FPlayerAwesomeUpgradeResourceData::ResourceInstances' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgeItemStateEntry
// 0x0058 (0x0058 - 0x0000)
struct FJunoKnowledgeItemStateEntry final
{
public:
	struct FDateTime                              DateFound;                                         // 0x0000(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FUniqueNetIdRepl>                 ViewedPlayerIds;                                   // 0x0008(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoKnowledgeItemStateEntry) == 0x000008, "Wrong alignment on FJunoKnowledgeItemStateEntry");
static_assert(sizeof(FJunoKnowledgeItemStateEntry) == 0x000058, "Wrong size on FJunoKnowledgeItemStateEntry");
static_assert(offsetof(FJunoKnowledgeItemStateEntry, DateFound) == 0x000000, "Member 'FJunoKnowledgeItemStateEntry::DateFound' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeItemStateEntry, ViewedPlayerIds) == 0x000008, "Member 'FJunoKnowledgeItemStateEntry::ViewedPlayerIds' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgeRecipeStateEntry
// 0x00A8 (0x00A8 - 0x0000)
struct FJunoKnowledgeRecipeStateEntry final
{
public:
	EJunoKnowledgeState                           KnowledgeState;                                    // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FUniqueNetIdRepl>                 ViewedPlayerIds;                                   // 0x0008(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	TSet<struct FUniqueNetIdRepl>                 EverAcquiredPlayerIds;                             // 0x0058(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoKnowledgeRecipeStateEntry) == 0x000008, "Wrong alignment on FJunoKnowledgeRecipeStateEntry");
static_assert(sizeof(FJunoKnowledgeRecipeStateEntry) == 0x0000A8, "Wrong size on FJunoKnowledgeRecipeStateEntry");
static_assert(offsetof(FJunoKnowledgeRecipeStateEntry, KnowledgeState) == 0x000000, "Member 'FJunoKnowledgeRecipeStateEntry::KnowledgeState' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateEntry, ViewedPlayerIds) == 0x000008, "Member 'FJunoKnowledgeRecipeStateEntry::ViewedPlayerIds' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateEntry, EverAcquiredPlayerIds) == 0x000058, "Member 'FJunoKnowledgeRecipeStateEntry::EverAcquiredPlayerIds' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgeSaveRecord
// 0x00E8 (0x00E8 - 0x0000)
struct FJunoKnowledgeSaveRecord final
{
public:
	struct FGameplayTagContainer                  CraftingObjectTags;                                // 0x0000(0x0020)(SaveGame, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ClaimedBundleIdentifiers;                          // 0x0020(0x0020)(SaveGame, Protected, NativeAccessSpecifierProtected)
	TMap<class UItemDefinitionBase*, struct FJunoKnowledgeItemStateEntry> ItemStates;                                        // 0x0040(0x0050)(SaveGame, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FJunoKnowledgeRecipeStateEntry> RecipeStates;                                      // 0x0090(0x0050)(SaveGame, Protected, NativeAccessSpecifierProtected)
	bool                                          bMCPRecipesBlocked;                                // 0x00E0(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoKnowledgeSaveRecord) == 0x000008, "Wrong alignment on FJunoKnowledgeSaveRecord");
static_assert(sizeof(FJunoKnowledgeSaveRecord) == 0x0000E8, "Wrong size on FJunoKnowledgeSaveRecord");
static_assert(offsetof(FJunoKnowledgeSaveRecord, CraftingObjectTags) == 0x000000, "Member 'FJunoKnowledgeSaveRecord::CraftingObjectTags' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeSaveRecord, ClaimedBundleIdentifiers) == 0x000020, "Member 'FJunoKnowledgeSaveRecord::ClaimedBundleIdentifiers' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeSaveRecord, ItemStates) == 0x000040, "Member 'FJunoKnowledgeSaveRecord::ItemStates' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeSaveRecord, RecipeStates) == 0x000090, "Member 'FJunoKnowledgeSaveRecord::RecipeStates' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeSaveRecord, bMCPRecipesBlocked) == 0x0000E0, "Member 'FJunoKnowledgeSaveRecord::bMCPRecipesBlocked' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgeSaveData
// 0x00E8 (0x00E8 - 0x0000)
struct FJunoKnowledgeSaveData final
{
public:
	struct FJunoKnowledgeSaveRecord               WorldKnowledgeRecord;                              // 0x0000(0x00E8)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoKnowledgeSaveData) == 0x000008, "Wrong alignment on FJunoKnowledgeSaveData");
static_assert(sizeof(FJunoKnowledgeSaveData) == 0x0000E8, "Wrong size on FJunoKnowledgeSaveData");
static_assert(offsetof(FJunoKnowledgeSaveData, WorldKnowledgeRecord) == 0x000000, "Member 'FJunoKnowledgeSaveData::WorldKnowledgeRecord' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgePersistenceFeatureData_InGameClass_PersistentInfo
// 0x00E8 (0x00E8 - 0x0000)
struct FJunoKnowledgePersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoKnowledgeSaveData                 KnowledgeSaveData;                                 // 0x0000(0x00E8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoKnowledgePersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoKnowledgePersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoKnowledgePersistenceFeatureData_InGameClass_PersistentInfo) == 0x0000E8, "Wrong size on FJunoKnowledgePersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoKnowledgePersistenceFeatureData_InGameClass_PersistentInfo, KnowledgeSaveData) == 0x000000, "Member 'FJunoKnowledgePersistenceFeatureData_InGameClass_PersistentInfo::KnowledgeSaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingUpdateData
// 0x0050 (0x0050 - 0x0000)
struct FJunoGuidedBuildingUpdateData final
{
public:
	TArray<int32>                                 UpdatedSnaps;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoStageKey>                  UpdatedStages;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoStageKey>                  CompletedStages;                                   // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoStageKey>                  CompletedSections;                                 // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSetComplete;                                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  FinishingPlayer;                                   // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoGuidedBuildingUpdateData) == 0x000008, "Wrong alignment on FJunoGuidedBuildingUpdateData");
static_assert(sizeof(FJunoGuidedBuildingUpdateData) == 0x000050, "Wrong size on FJunoGuidedBuildingUpdateData");
static_assert(offsetof(FJunoGuidedBuildingUpdateData, UpdatedSnaps) == 0x000000, "Member 'FJunoGuidedBuildingUpdateData::UpdatedSnaps' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingUpdateData, UpdatedStages) == 0x000010, "Member 'FJunoGuidedBuildingUpdateData::UpdatedStages' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingUpdateData, CompletedStages) == 0x000020, "Member 'FJunoGuidedBuildingUpdateData::CompletedStages' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingUpdateData, CompletedSections) == 0x000030, "Member 'FJunoGuidedBuildingUpdateData::CompletedSections' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingUpdateData, bSetComplete) == 0x000040, "Member 'FJunoGuidedBuildingUpdateData::bSetComplete' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingUpdateData, FinishingPlayer) == 0x000044, "Member 'FJunoGuidedBuildingUpdateData::FinishingPlayer' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoTileInfo
// 0x0018 (0x0018 - 0x0000)
struct FJunoTileInfo final
{
public:
	int32                                         TileId;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              WorldLocation;                                     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoTileInfo) == 0x000008, "Wrong alignment on FJunoTileInfo");
static_assert(sizeof(FJunoTileInfo) == 0x000018, "Wrong size on FJunoTileInfo");
static_assert(offsetof(FJunoTileInfo, TileId) == 0x000000, "Member 'FJunoTileInfo::TileId' has a wrong offset!");
static_assert(offsetof(FJunoTileInfo, WorldLocation) == 0x000008, "Member 'FJunoTileInfo::WorldLocation' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoSinglePhysicsToySaveData
// 0x0080 (0x0080 - 0x0000)
struct FJunoSinglePhysicsToySaveData final
{
public:
	struct FPersistenceFrameworkLevelSaveSpawnablePtr AttachedActor;                                     // 0x0000(0x0020)(SaveGame, NativeAccessSpecifierPublic)
	struct FTransform                             RelativeOffset;                                    // 0x0020(0x0060)(SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoSinglePhysicsToySaveData) == 0x000010, "Wrong alignment on FJunoSinglePhysicsToySaveData");
static_assert(sizeof(FJunoSinglePhysicsToySaveData) == 0x000080, "Wrong size on FJunoSinglePhysicsToySaveData");
static_assert(offsetof(FJunoSinglePhysicsToySaveData, AttachedActor) == 0x000000, "Member 'FJunoSinglePhysicsToySaveData::AttachedActor' has a wrong offset!");
static_assert(offsetof(FJunoSinglePhysicsToySaveData, RelativeOffset) == 0x000020, "Member 'FJunoSinglePhysicsToySaveData::RelativeOffset' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPhysicsToySaveData
// 0x0050 (0x0050 - 0x0000)
struct FJunoPhysicsToySaveData final
{
public:
	TMap<struct FGuid, struct FJunoSinglePhysicsToySaveData> PerToyData;                                        // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPhysicsToySaveData) == 0x000008, "Wrong alignment on FJunoPhysicsToySaveData");
static_assert(sizeof(FJunoPhysicsToySaveData) == 0x000050, "Wrong size on FJunoPhysicsToySaveData");
static_assert(offsetof(FJunoPhysicsToySaveData, PerToyData) == 0x000000, "Member 'FJunoPhysicsToySaveData::PerToyData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoExploredTile
// 0x0024 (0x0030 - 0x000C)
struct FJunoExploredTile final : public FFastArraySerializerItem
{
public:
	int32                                         TileId;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClearedPixelCount;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 PackedTileMask;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoExploredTile) == 0x000008, "Wrong alignment on FJunoExploredTile");
static_assert(sizeof(FJunoExploredTile) == 0x000030, "Wrong size on FJunoExploredTile");
static_assert(offsetof(FJunoExploredTile, TileId) == 0x00000C, "Member 'FJunoExploredTile::TileId' has a wrong offset!");
static_assert(offsetof(FJunoExploredTile, ClearedPixelCount) == 0x000010, "Member 'FJunoExploredTile::ClearedPixelCount' has a wrong offset!");
static_assert(offsetof(FJunoExploredTile, PackedTileMask) == 0x000018, "Member 'FJunoExploredTile::PackedTileMask' has a wrong offset!");

// ScriptStruct JunoGameNative.MapExplorationData
// 0x0018 (0x0120 - 0x0108)
struct FMapExplorationData final : public FFastArraySerializer
{
public:
	TArray<struct FJunoExploredTile>              ExploredTiles;                                     // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         KnownClearedPixelCount;                            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapExplorationData) == 0x000008, "Wrong alignment on FMapExplorationData");
static_assert(sizeof(FMapExplorationData) == 0x000120, "Wrong size on FMapExplorationData");
static_assert(offsetof(FMapExplorationData, ExploredTiles) == 0x000108, "Member 'FMapExplorationData::ExploredTiles' has a wrong offset!");
static_assert(offsetof(FMapExplorationData, KnownClearedPixelCount) == 0x000118, "Member 'FMapExplorationData::KnownClearedPixelCount' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMinifigLayeringParameters
// 0x0014 (0x0014 - 0x0000)
struct FJunoMinifigLayeringParameters final
{
public:
	float                                         Prop1;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Prop2;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddLocomotion;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddSecondary;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshSpace;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMinifigLayeringParameters) == 0x000004, "Wrong alignment on FJunoMinifigLayeringParameters");
static_assert(sizeof(FJunoMinifigLayeringParameters) == 0x000014, "Wrong size on FJunoMinifigLayeringParameters");
static_assert(offsetof(FJunoMinifigLayeringParameters, Prop1) == 0x000000, "Member 'FJunoMinifigLayeringParameters::Prop1' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringParameters, Prop2) == 0x000004, "Member 'FJunoMinifigLayeringParameters::Prop2' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringParameters, AddLocomotion) == 0x000008, "Member 'FJunoMinifigLayeringParameters::AddLocomotion' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringParameters, AddSecondary) == 0x00000C, "Member 'FJunoMinifigLayeringParameters::AddSecondary' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringParameters, MeshSpace) == 0x000010, "Member 'FJunoMinifigLayeringParameters::MeshSpace' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMarkerSettingsRow
// 0x0060 (0x0068 - 0x0008)
struct FJunoMarkerSettingsRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UObject>                 Icon;                                              // 0x0008(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 CompassIcon;                                       // 0x0028(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0048(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnchorOnEdges;                                    // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Size;                                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUnderground;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOnlyForOwner;                                 // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsContainer;                                      // 0x0062(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasLimitedDuration;                               // 0x0063(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         duration;                                          // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMarkerSettingsRow) == 0x000008, "Wrong alignment on FJunoMarkerSettingsRow");
static_assert(sizeof(FJunoMarkerSettingsRow) == 0x000068, "Wrong size on FJunoMarkerSettingsRow");
static_assert(offsetof(FJunoMarkerSettingsRow, Icon) == 0x000008, "Member 'FJunoMarkerSettingsRow::Icon' has a wrong offset!");
static_assert(offsetof(FJunoMarkerSettingsRow, CompassIcon) == 0x000028, "Member 'FJunoMarkerSettingsRow::CompassIcon' has a wrong offset!");
static_assert(offsetof(FJunoMarkerSettingsRow, Color) == 0x000048, "Member 'FJunoMarkerSettingsRow::Color' has a wrong offset!");
static_assert(offsetof(FJunoMarkerSettingsRow, bAnchorOnEdges) == 0x000058, "Member 'FJunoMarkerSettingsRow::bAnchorOnEdges' has a wrong offset!");
static_assert(offsetof(FJunoMarkerSettingsRow, Size) == 0x00005C, "Member 'FJunoMarkerSettingsRow::Size' has a wrong offset!");
static_assert(offsetof(FJunoMarkerSettingsRow, bShowUnderground) == 0x000060, "Member 'FJunoMarkerSettingsRow::bShowUnderground' has a wrong offset!");
static_assert(offsetof(FJunoMarkerSettingsRow, bShowOnlyForOwner) == 0x000061, "Member 'FJunoMarkerSettingsRow::bShowOnlyForOwner' has a wrong offset!");
static_assert(offsetof(FJunoMarkerSettingsRow, bIsContainer) == 0x000062, "Member 'FJunoMarkerSettingsRow::bIsContainer' has a wrong offset!");
static_assert(offsetof(FJunoMarkerSettingsRow, bHasLimitedDuration) == 0x000063, "Member 'FJunoMarkerSettingsRow::bHasLimitedDuration' has a wrong offset!");
static_assert(offsetof(FJunoMarkerSettingsRow, duration) == 0x000064, "Member 'FJunoMarkerSettingsRow::duration' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMarkerCustomizationOptionsRow
// 0x0020 (0x0028 - 0x0008)
struct FJunoMarkerCustomizationOptionsRow final : public FTableRowBase
{
public:
	TArray<TSoftObjectPtr<class UTexture>>        Icons;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   Colors;                                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMarkerCustomizationOptionsRow) == 0x000008, "Wrong alignment on FJunoMarkerCustomizationOptionsRow");
static_assert(sizeof(FJunoMarkerCustomizationOptionsRow) == 0x000028, "Wrong size on FJunoMarkerCustomizationOptionsRow");
static_assert(offsetof(FJunoMarkerCustomizationOptionsRow, Icons) == 0x000008, "Member 'FJunoMarkerCustomizationOptionsRow::Icons' has a wrong offset!");
static_assert(offsetof(FJunoMarkerCustomizationOptionsRow, Colors) == 0x000018, "Member 'FJunoMarkerCustomizationOptionsRow::Colors' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCommonPartsSettings
// 0x0020 (0x0020 - 0x0000)
struct FJunoCommonPartsSettings final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLogo;                                         // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PlaneQuadrant;                                     // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoCommonPartsSettings) == 0x000008, "Wrong alignment on FJunoCommonPartsSettings");
static_assert(sizeof(FJunoCommonPartsSettings) == 0x000020, "Wrong size on FJunoCommonPartsSettings");
static_assert(offsetof(FJunoCommonPartsSettings, Mesh) == 0x000000, "Member 'FJunoCommonPartsSettings::Mesh' has a wrong offset!");
static_assert(offsetof(FJunoCommonPartsSettings, Material) == 0x000008, "Member 'FJunoCommonPartsSettings::Material' has a wrong offset!");
static_assert(offsetof(FJunoCommonPartsSettings, Height) == 0x000010, "Member 'FJunoCommonPartsSettings::Height' has a wrong offset!");
static_assert(offsetof(FJunoCommonPartsSettings, Radius) == 0x000014, "Member 'FJunoCommonPartsSettings::Radius' has a wrong offset!");
static_assert(offsetof(FJunoCommonPartsSettings, InnerRadius) == 0x000018, "Member 'FJunoCommonPartsSettings::InnerRadius' has a wrong offset!");
static_assert(offsetof(FJunoCommonPartsSettings, bShowLogo) == 0x00001C, "Member 'FJunoCommonPartsSettings::bShowLogo' has a wrong offset!");
static_assert(offsetof(FJunoCommonPartsSettings, PlaneQuadrant) == 0x00001D, "Member 'FJunoCommonPartsSettings::PlaneQuadrant' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMarkersSaveData
// 0x0020 (0x0020 - 0x0000)
struct FJunoMarkersSaveData final
{
public:
	TArray<struct FJunoMarker>                    MarkersData;                                       // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          MarkersIds;                                        // 0x0010(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMarkersSaveData) == 0x000008, "Wrong alignment on FJunoMarkersSaveData");
static_assert(sizeof(FJunoMarkersSaveData) == 0x000020, "Wrong size on FJunoMarkersSaveData");
static_assert(offsetof(FJunoMarkersSaveData, MarkersData) == 0x000000, "Member 'FJunoMarkersSaveData::MarkersData' has a wrong offset!");
static_assert(offsetof(FJunoMarkersSaveData, MarkersIds) == 0x000010, "Member 'FJunoMarkersSaveData::MarkersIds' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMarkersPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0020 (0x0020 - 0x0000)
struct FJunoMarkersPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoMarkersSaveData                   MarkersSaveData;                                   // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMarkersPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoMarkersPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoMarkersPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000020, "Wrong size on FJunoMarkersPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoMarkersPersistenceFeatureData_InGameClass_PersistentInfo, MarkersSaveData) == 0x000000, "Member 'FJunoMarkersPersistenceFeatureData_InGameClass_PersistentInfo::MarkersSaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoComponentActorMapEntry
// 0x0010 (0x0010 - 0x0000)
struct FJunoComponentActorMapEntry final
{
public:
	TWeakObjectPtr<class UPrimitiveComponent>     Component;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     SelectedActorClass;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoComponentActorMapEntry) == 0x000008, "Wrong alignment on FJunoComponentActorMapEntry");
static_assert(sizeof(FJunoComponentActorMapEntry) == 0x000010, "Wrong size on FJunoComponentActorMapEntry");
static_assert(offsetof(FJunoComponentActorMapEntry, Component) == 0x000000, "Member 'FJunoComponentActorMapEntry::Component' has a wrong offset!");
static_assert(offsetof(FJunoComponentActorMapEntry, SelectedActorClass) == 0x000008, "Member 'FJunoComponentActorMapEntry::SelectedActorClass' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMassCommonStateFragment
// 0x0004 (0x0004 - 0x0000)
struct FJunoMassCommonStateFragment final : public FMassFragment
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMassCommonStateFragment) == 0x000004, "Wrong alignment on FJunoMassCommonStateFragment");
static_assert(sizeof(FJunoMassCommonStateFragment) == 0x000004, "Wrong size on FJunoMassCommonStateFragment");
static_assert(offsetof(FJunoMassCommonStateFragment, Health) == 0x000000, "Member 'FJunoMassCommonStateFragment::Health' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMerchantPricingLevel
// 0x0010 (0x0010 - 0x0000)
struct FJunoMerchantPricingLevel final
{
public:
	class UDataTable*                             BarterPricingData;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TierGroup;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPackagesForSale;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMerchantPricingLevel) == 0x000008, "Wrong alignment on FJunoMerchantPricingLevel");
static_assert(sizeof(FJunoMerchantPricingLevel) == 0x000010, "Wrong size on FJunoMerchantPricingLevel");
static_assert(offsetof(FJunoMerchantPricingLevel, BarterPricingData) == 0x000000, "Member 'FJunoMerchantPricingLevel::BarterPricingData' has a wrong offset!");
static_assert(offsetof(FJunoMerchantPricingLevel, TierGroup) == 0x000008, "Member 'FJunoMerchantPricingLevel::TierGroup' has a wrong offset!");
static_assert(offsetof(FJunoMerchantPricingLevel, NumberOfPackagesForSale) == 0x00000C, "Member 'FJunoMerchantPricingLevel::NumberOfPackagesForSale' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_PawnEmotion
// 0x0010 (0x0010 - 0x0000)
struct FJunoEvent_PawnEmotion final
{
public:
	class AFortPlayerPawnAthena*                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoPawnEmotionalState                       CurrentEmotionalState;                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmotionPercent;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_PawnEmotion) == 0x000008, "Wrong alignment on FJunoEvent_PawnEmotion");
static_assert(sizeof(FJunoEvent_PawnEmotion) == 0x000010, "Wrong size on FJunoEvent_PawnEmotion");
static_assert(offsetof(FJunoEvent_PawnEmotion, Pawn) == 0x000000, "Member 'FJunoEvent_PawnEmotion::Pawn' has a wrong offset!");
static_assert(offsetof(FJunoEvent_PawnEmotion, CurrentEmotionalState) == 0x000008, "Member 'FJunoEvent_PawnEmotion::CurrentEmotionalState' has a wrong offset!");
static_assert(offsetof(FJunoEvent_PawnEmotion, EmotionPercent) == 0x00000C, "Member 'FJunoEvent_PawnEmotion::EmotionPercent' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMerchantWantedItemData
// 0x0028 (0x0028 - 0x0000)
struct FJunoMerchantWantedItemData final
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     WantItemDefinition;                                // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WantItemWeight;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoMerchantWantedItemData) == 0x000008, "Wrong alignment on FJunoMerchantWantedItemData");
static_assert(sizeof(FJunoMerchantWantedItemData) == 0x000028, "Wrong size on FJunoMerchantWantedItemData");
static_assert(offsetof(FJunoMerchantWantedItemData, WantItemDefinition) == 0x000000, "Member 'FJunoMerchantWantedItemData::WantItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoMerchantWantedItemData, WantItemWeight) == 0x000020, "Member 'FJunoMerchantWantedItemData::WantItemWeight' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMerchantSalesData
// 0x0030 (0x0038 - 0x0008)
struct FJunoMerchantSalesData final : public FTableRowBase
{
public:
	struct FGameplayTag                           MerchantTag;                                       // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialPricingLevel;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoMerchantPricingLevel>      PricingLevels;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoMerchantWantedItemData>    WantedItemDatas;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RefreshTimeInHours;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoMerchantSalesData) == 0x000008, "Wrong alignment on FJunoMerchantSalesData");
static_assert(sizeof(FJunoMerchantSalesData) == 0x000038, "Wrong size on FJunoMerchantSalesData");
static_assert(offsetof(FJunoMerchantSalesData, MerchantTag) == 0x000008, "Member 'FJunoMerchantSalesData::MerchantTag' has a wrong offset!");
static_assert(offsetof(FJunoMerchantSalesData, InitialPricingLevel) == 0x00000C, "Member 'FJunoMerchantSalesData::InitialPricingLevel' has a wrong offset!");
static_assert(offsetof(FJunoMerchantSalesData, PricingLevels) == 0x000010, "Member 'FJunoMerchantSalesData::PricingLevels' has a wrong offset!");
static_assert(offsetof(FJunoMerchantSalesData, WantedItemDatas) == 0x000020, "Member 'FJunoMerchantSalesData::WantedItemDatas' has a wrong offset!");
static_assert(offsetof(FJunoMerchantSalesData, RefreshTimeInHours) == 0x000030, "Member 'FJunoMerchantSalesData::RefreshTimeInHours' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_WorldLoadedOrCreated
// 0x0088 (0x0088 - 0x0000)
struct FJunoEvent_WorldLoadedOrCreated final
{
public:
	struct FJunoWorldMetadata                     WorldMetadata;                                     // 0x0000(0x0088)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_WorldLoadedOrCreated) == 0x000008, "Wrong alignment on FJunoEvent_WorldLoadedOrCreated");
static_assert(sizeof(FJunoEvent_WorldLoadedOrCreated) == 0x000088, "Wrong size on FJunoEvent_WorldLoadedOrCreated");
static_assert(offsetof(FJunoEvent_WorldLoadedOrCreated, WorldMetadata) == 0x000000, "Member 'FJunoEvent_WorldLoadedOrCreated::WorldMetadata' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoSynchronizedWeatherState
// 0x0078 (0x0078 - 0x0000)
struct FJunoSynchronizedWeatherState final
{
public:
	struct FJunoWeatherLocation                   Location;                                          // 0x0000(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoWeatherPhase                      CurrentWeatherPhase;                               // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoWeatherPhase                      NextWeatherPhase;                                  // 0x0040(0x0038)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoSynchronizedWeatherState) == 0x000008, "Wrong alignment on FJunoSynchronizedWeatherState");
static_assert(sizeof(FJunoSynchronizedWeatherState) == 0x000078, "Wrong size on FJunoSynchronizedWeatherState");
static_assert(offsetof(FJunoSynchronizedWeatherState, Location) == 0x000000, "Member 'FJunoSynchronizedWeatherState::Location' has a wrong offset!");
static_assert(offsetof(FJunoSynchronizedWeatherState, CurrentWeatherPhase) == 0x000008, "Member 'FJunoSynchronizedWeatherState::CurrentWeatherPhase' has a wrong offset!");
static_assert(offsetof(FJunoSynchronizedWeatherState, NextWeatherPhase) == 0x000040, "Member 'FJunoSynchronizedWeatherState::NextWeatherPhase' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoModeratorModeToggleEvent
// 0x0002 (0x0002 - 0x0000)
struct FJunoModeratorModeToggleEvent final
{
public:
	bool                                          bIsModeratorModeEnabled;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerAllowedToFly;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoModeratorModeToggleEvent) == 0x000001, "Wrong alignment on FJunoModeratorModeToggleEvent");
static_assert(sizeof(FJunoModeratorModeToggleEvent) == 0x000002, "Wrong size on FJunoModeratorModeToggleEvent");
static_assert(offsetof(FJunoModeratorModeToggleEvent, bIsModeratorModeEnabled) == 0x000000, "Member 'FJunoModeratorModeToggleEvent::bIsModeratorModeEnabled' has a wrong offset!");
static_assert(offsetof(FJunoModeratorModeToggleEvent, bIsPlayerAllowedToFly) == 0x000001, "Member 'FJunoModeratorModeToggleEvent::bIsPlayerAllowedToFly' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoVerbFilter_RecruitNPC
// 0x0090 (0x0130 - 0x00A0)
struct FJunoVerbFilter_RecruitNPC final : public FObjectiveFilter
{
public:
	struct FObjectiveSubjectTags                  UniqueAIIdentifier;                                // 0x00A0(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FObjectiveSubjectTags                  AIRole;                                            // 0x00E8(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoVerbFilter_RecruitNPC) == 0x000008, "Wrong alignment on FJunoVerbFilter_RecruitNPC");
static_assert(sizeof(FJunoVerbFilter_RecruitNPC) == 0x000130, "Wrong size on FJunoVerbFilter_RecruitNPC");
static_assert(offsetof(FJunoVerbFilter_RecruitNPC, UniqueAIIdentifier) == 0x0000A0, "Member 'FJunoVerbFilter_RecruitNPC::UniqueAIIdentifier' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_RecruitNPC, AIRole) == 0x0000E8, "Member 'FJunoVerbFilter_RecruitNPC::AIRole' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMoodReactionConfigTableRow
// 0x0008 (0x0010 - 0x0008)
struct FJunoMoodReactionConfigTableRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           SoundLibraryTag;                                   // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        GameplayCueTag;                                    // 0x000C(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMoodReactionConfigTableRow) == 0x000008, "Wrong alignment on FJunoMoodReactionConfigTableRow");
static_assert(sizeof(FJunoMoodReactionConfigTableRow) == 0x000010, "Wrong size on FJunoMoodReactionConfigTableRow");
static_assert(offsetof(FJunoMoodReactionConfigTableRow, SoundLibraryTag) == 0x000008, "Member 'FJunoMoodReactionConfigTableRow::SoundLibraryTag' has a wrong offset!");
static_assert(offsetof(FJunoMoodReactionConfigTableRow, GameplayCueTag) == 0x00000C, "Member 'FJunoMoodReactionConfigTableRow::GameplayCueTag' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPassiveCraftingContributorAnalytics
// 0x0028 (0x0028 - 0x0000)
struct FJunoPassiveCraftingContributorAnalytics final
{
public:
	class FString                                 AccountId;                                         // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0010(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SessionTime;                                       // 0x0020(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPassiveCraftingContributorAnalytics) == 0x000008, "Wrong alignment on FJunoPassiveCraftingContributorAnalytics");
static_assert(sizeof(FJunoPassiveCraftingContributorAnalytics) == 0x000028, "Wrong size on FJunoPassiveCraftingContributorAnalytics");
static_assert(offsetof(FJunoPassiveCraftingContributorAnalytics, AccountId) == 0x000000, "Member 'FJunoPassiveCraftingContributorAnalytics::AccountId' has a wrong offset!");
static_assert(offsetof(FJunoPassiveCraftingContributorAnalytics, SessionId) == 0x000010, "Member 'FJunoPassiveCraftingContributorAnalytics::SessionId' has a wrong offset!");
static_assert(offsetof(FJunoPassiveCraftingContributorAnalytics, SessionTime) == 0x000020, "Member 'FJunoPassiveCraftingContributorAnalytics::SessionTime' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingResourceData
// 0x0018 (0x0020 - 0x0008)
struct FJunoBuildingResourceData final : public FTableRowBase
{
public:
	struct FDataTableRowHandle                    ResourceItemHandle;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EJunoResourceScale                            ResourceScale;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingResourceData) == 0x000008, "Wrong alignment on FJunoBuildingResourceData");
static_assert(sizeof(FJunoBuildingResourceData) == 0x000020, "Wrong size on FJunoBuildingResourceData");
static_assert(offsetof(FJunoBuildingResourceData, ResourceItemHandle) == 0x000008, "Member 'FJunoBuildingResourceData::ResourceItemHandle' has a wrong offset!");
static_assert(offsetof(FJunoBuildingResourceData, ResourceScale) == 0x000018, "Member 'FJunoBuildingResourceData::ResourceScale' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPassiveCraftingItemAndCount
// 0x0010 (0x0010 - 0x0000)
struct FJunoPassiveCraftingItemAndCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemDefinitionBase*                    Item;                                              // 0x0008(0x0008)(ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPassiveCraftingItemAndCount) == 0x000008, "Wrong alignment on FJunoPassiveCraftingItemAndCount");
static_assert(sizeof(FJunoPassiveCraftingItemAndCount) == 0x000010, "Wrong size on FJunoPassiveCraftingItemAndCount");
static_assert(offsetof(FJunoPassiveCraftingItemAndCount, Count) == 0x000000, "Member 'FJunoPassiveCraftingItemAndCount::Count' has a wrong offset!");
static_assert(offsetof(FJunoPassiveCraftingItemAndCount, Item) == 0x000008, "Member 'FJunoPassiveCraftingItemAndCount::Item' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoSortTagData
// 0x0008 (0x0008 - 0x0000)
struct FJunoSortTagData final
{
public:
	struct FGameplayTag                           SortTag;                                           // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStageSize;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoSortTagData) == 0x000004, "Wrong alignment on FJunoSortTagData");
static_assert(sizeof(FJunoSortTagData) == 0x000008, "Wrong size on FJunoSortTagData");
static_assert(offsetof(FJunoSortTagData, SortTag) == 0x000000, "Member 'FJunoSortTagData::SortTag' has a wrong offset!");
static_assert(offsetof(FJunoSortTagData, MaxStageSize) == 0x000004, "Member 'FJunoSortTagData::MaxStageSize' has a wrong offset!");

// ScriptStruct JunoGameNative.PassiveResourcesGathererRow
// 0x0010 (0x0018 - 0x0008)
struct FPassiveResourcesGathererRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           RequiredRole;                                      // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinutesToGenerate;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLootCalls;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPassiveResourcesGathererRow) == 0x000008, "Wrong alignment on FPassiveResourcesGathererRow");
static_assert(sizeof(FPassiveResourcesGathererRow) == 0x000018, "Wrong size on FPassiveResourcesGathererRow");
static_assert(offsetof(FPassiveResourcesGathererRow, RequiredRole) == 0x000008, "Member 'FPassiveResourcesGathererRow::RequiredRole' has a wrong offset!");
static_assert(offsetof(FPassiveResourcesGathererRow, MinutesToGenerate) == 0x00000C, "Member 'FPassiveResourcesGathererRow::MinutesToGenerate' has a wrong offset!");
static_assert(offsetof(FPassiveResourcesGathererRow, MaxLootCalls) == 0x000010, "Member 'FPassiveResourcesGathererRow::MaxLootCalls' has a wrong offset!");

// ScriptStruct JunoGameNative.PassiveResourcesGatheringRow
// 0x0020 (0x0028 - 0x0008)
struct FPassiveResourcesGatheringRow final : public FTableRowBase
{
public:
	class FName                                   LootTierGroup;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldConditionQueryDefinition         SelectionPreconditions;                            // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPassiveResourcesGatheringRow) == 0x000008, "Wrong alignment on FPassiveResourcesGatheringRow");
static_assert(sizeof(FPassiveResourcesGatheringRow) == 0x000028, "Wrong size on FPassiveResourcesGatheringRow");
static_assert(offsetof(FPassiveResourcesGatheringRow, LootTierGroup) == 0x000008, "Member 'FPassiveResourcesGatheringRow::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FPassiveResourcesGatheringRow, SelectionPreconditions) == 0x000010, "Member 'FPassiveResourcesGatheringRow::SelectionPreconditions' has a wrong offset!");

// ScriptStruct JunoGameNative.PassiveResourcesGatheringSimulationConfigurationRow
// 0x0008 (0x0010 - 0x0008)
struct FPassiveResourcesGatheringSimulationConfigurationRow final : public FTableRowBase
{
public:
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverridenMultiplierForSimulatedGeneration;         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPassiveResourcesGatheringSimulationConfigurationRow) == 0x000008, "Wrong alignment on FPassiveResourcesGatheringSimulationConfigurationRow");
static_assert(sizeof(FPassiveResourcesGatheringSimulationConfigurationRow) == 0x000010, "Wrong size on FPassiveResourcesGatheringSimulationConfigurationRow");
static_assert(offsetof(FPassiveResourcesGatheringSimulationConfigurationRow, Weight) == 0x000008, "Member 'FPassiveResourcesGatheringSimulationConfigurationRow::Weight' has a wrong offset!");
static_assert(offsetof(FPassiveResourcesGatheringSimulationConfigurationRow, OverridenMultiplierForSimulatedGeneration) == 0x00000C, "Member 'FPassiveResourcesGatheringSimulationConfigurationRow::OverridenMultiplierForSimulatedGeneration' has a wrong offset!");

// ScriptStruct JunoGameNative.PassiveResourcesGatheringRowRuntime
// 0x0058 (0x0058 - 0x0000)
struct FPassiveResourcesGatheringRowRuntime final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldConditionQueryState              SelectionPreconditionsQueryState;                  // 0x0028(0x0030)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPassiveResourcesGatheringRowRuntime) == 0x000008, "Wrong alignment on FPassiveResourcesGatheringRowRuntime");
static_assert(sizeof(FPassiveResourcesGatheringRowRuntime) == 0x000058, "Wrong size on FPassiveResourcesGatheringRowRuntime");
static_assert(offsetof(FPassiveResourcesGatheringRowRuntime, SelectionPreconditionsQueryState) == 0x000028, "Member 'FPassiveResourcesGatheringRowRuntime::SelectionPreconditionsQueryState' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPersistenceAssetSourceControlInfo
// 0x0030 (0x0030 - 0x0000)
struct FJunoPersistenceAssetSourceControlInfo final
{
public:
	class FString                                 CurrentRevisionCheckInIdentifier;                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentRevisionAction;                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentRevisionUser;                               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPersistenceAssetSourceControlInfo) == 0x000008, "Wrong alignment on FJunoPersistenceAssetSourceControlInfo");
static_assert(sizeof(FJunoPersistenceAssetSourceControlInfo) == 0x000030, "Wrong size on FJunoPersistenceAssetSourceControlInfo");
static_assert(offsetof(FJunoPersistenceAssetSourceControlInfo, CurrentRevisionCheckInIdentifier) == 0x000000, "Member 'FJunoPersistenceAssetSourceControlInfo::CurrentRevisionCheckInIdentifier' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetSourceControlInfo, CurrentRevisionAction) == 0x000010, "Member 'FJunoPersistenceAssetSourceControlInfo::CurrentRevisionAction' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetSourceControlInfo, CurrentRevisionUser) == 0x000020, "Member 'FJunoPersistenceAssetSourceControlInfo::CurrentRevisionUser' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPersistenceAssetInfo
// 0x0080 (0x0080 - 0x0000)
struct FJunoPersistenceAssetInfo final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTopLevelAssetPath                     AssetClassPath;                                    // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInCook;                                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     CustomDump;                                        // 0x0030(0x0020)(NativeAccessSpecifierPublic)
	struct FJunoPersistenceAssetSourceControlInfo SourceControlInfo;                                 // 0x0050(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPersistenceAssetInfo) == 0x000008, "Wrong alignment on FJunoPersistenceAssetInfo");
static_assert(sizeof(FJunoPersistenceAssetInfo) == 0x000080, "Wrong size on FJunoPersistenceAssetInfo");
static_assert(offsetof(FJunoPersistenceAssetInfo, PackageName) == 0x000000, "Member 'FJunoPersistenceAssetInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetInfo, AssetClassPath) == 0x000010, "Member 'FJunoPersistenceAssetInfo::AssetClassPath' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetInfo, FilePath) == 0x000018, "Member 'FJunoPersistenceAssetInfo::FilePath' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetInfo, bIsInCook) == 0x000028, "Member 'FJunoPersistenceAssetInfo::bIsInCook' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetInfo, CustomDump) == 0x000030, "Member 'FJunoPersistenceAssetInfo::CustomDump' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetInfo, SourceControlInfo) == 0x000050, "Member 'FJunoPersistenceAssetInfo::SourceControlInfo' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoItemChangedMessage
// 0x0060 (0x0060 - 0x0000)
struct FJunoItemChangedMessage final
{
public:
	class UJunoInventoryComponent*                OwningInventoryComponent;                          // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoItemSlot                          ChangedSlot;                                       // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoItemChangeType                           ItemChangeType;                                    // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoItemChangedMessage) == 0x000008, "Wrong alignment on FJunoItemChangedMessage");
static_assert(sizeof(FJunoItemChangedMessage) == 0x000060, "Wrong size on FJunoItemChangedMessage");
static_assert(offsetof(FJunoItemChangedMessage, OwningInventoryComponent) == 0x000000, "Member 'FJunoItemChangedMessage::OwningInventoryComponent' has a wrong offset!");
static_assert(offsetof(FJunoItemChangedMessage, ChangedSlot) == 0x000008, "Member 'FJunoItemChangedMessage::ChangedSlot' has a wrong offset!");
static_assert(offsetof(FJunoItemChangedMessage, ItemChangeType) == 0x000058, "Member 'FJunoItemChangedMessage::ItemChangeType' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPersistenceAssetBackwardCompatibilityIssue
// 0x0080 (0x0080 - 0x0000)
struct FJunoPersistenceAssetBackwardCompatibilityIssue final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTopLevelAssetPath                     AssetClassPath;                                    // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoPersistenceAssetBackwardCompatibilityIssueType IssueType;                                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     IssueData;                                         // 0x0020(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 AssetSourceControlInfoVersion;                     // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoPersistenceAssetSourceControlInfo AssetSourceControlInfo;                            // 0x0050(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPersistenceAssetBackwardCompatibilityIssue) == 0x000008, "Wrong alignment on FJunoPersistenceAssetBackwardCompatibilityIssue");
static_assert(sizeof(FJunoPersistenceAssetBackwardCompatibilityIssue) == 0x000080, "Wrong size on FJunoPersistenceAssetBackwardCompatibilityIssue");
static_assert(offsetof(FJunoPersistenceAssetBackwardCompatibilityIssue, PackageName) == 0x000000, "Member 'FJunoPersistenceAssetBackwardCompatibilityIssue::PackageName' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetBackwardCompatibilityIssue, AssetClassPath) == 0x000010, "Member 'FJunoPersistenceAssetBackwardCompatibilityIssue::AssetClassPath' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetBackwardCompatibilityIssue, IssueType) == 0x000018, "Member 'FJunoPersistenceAssetBackwardCompatibilityIssue::IssueType' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetBackwardCompatibilityIssue, IssueData) == 0x000020, "Member 'FJunoPersistenceAssetBackwardCompatibilityIssue::IssueData' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetBackwardCompatibilityIssue, AssetSourceControlInfoVersion) == 0x000040, "Member 'FJunoPersistenceAssetBackwardCompatibilityIssue::AssetSourceControlInfoVersion' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetBackwardCompatibilityIssue, AssetSourceControlInfo) == 0x000050, "Member 'FJunoPersistenceAssetBackwardCompatibilityIssue::AssetSourceControlInfo' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPersistenceAssetsReportSettings
// 0x0028 (0x0028 - 0x0000)
struct FJunoPersistenceAssetsReportSettings final
{
public:
	class FString                                 PreviousVersionPersistenceAssetsReportPath;        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentVersionPersistenceAssetsReportPath;         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCookOnly;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateSourceControlInfo;                        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateAssetCustomDump;                          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoPersistenceAssetsReportSettings) == 0x000008, "Wrong alignment on FJunoPersistenceAssetsReportSettings");
static_assert(sizeof(FJunoPersistenceAssetsReportSettings) == 0x000028, "Wrong size on FJunoPersistenceAssetsReportSettings");
static_assert(offsetof(FJunoPersistenceAssetsReportSettings, PreviousVersionPersistenceAssetsReportPath) == 0x000000, "Member 'FJunoPersistenceAssetsReportSettings::PreviousVersionPersistenceAssetsReportPath' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsReportSettings, CurrentVersionPersistenceAssetsReportPath) == 0x000010, "Member 'FJunoPersistenceAssetsReportSettings::CurrentVersionPersistenceAssetsReportPath' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsReportSettings, bInCookOnly) == 0x000020, "Member 'FJunoPersistenceAssetsReportSettings::bInCookOnly' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsReportSettings, bGenerateSourceControlInfo) == 0x000021, "Member 'FJunoPersistenceAssetsReportSettings::bGenerateSourceControlInfo' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsReportSettings, bGenerateAssetCustomDump) == 0x000022, "Member 'FJunoPersistenceAssetsReportSettings::bGenerateAssetCustomDump' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPersistenceAssetsBackwardCompatibilityReport
// 0x0060 (0x0060 - 0x0000)
struct FJunoPersistenceAssetsBackwardCompatibilityReport final
{
public:
	class FString                                 CurrentVersion;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviousVersion;                                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReportDate;                                        // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoPersistenceAssetsReportSettings   Settings;                                          // 0x0028(0x0028)(NativeAccessSpecifierPublic)
	TArray<struct FJunoPersistenceAssetBackwardCompatibilityIssue> Issues;                                            // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPersistenceAssetsBackwardCompatibilityReport) == 0x000008, "Wrong alignment on FJunoPersistenceAssetsBackwardCompatibilityReport");
static_assert(sizeof(FJunoPersistenceAssetsBackwardCompatibilityReport) == 0x000060, "Wrong size on FJunoPersistenceAssetsBackwardCompatibilityReport");
static_assert(offsetof(FJunoPersistenceAssetsBackwardCompatibilityReport, CurrentVersion) == 0x000000, "Member 'FJunoPersistenceAssetsBackwardCompatibilityReport::CurrentVersion' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsBackwardCompatibilityReport, PreviousVersion) == 0x000010, "Member 'FJunoPersistenceAssetsBackwardCompatibilityReport::PreviousVersion' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsBackwardCompatibilityReport, ReportDate) == 0x000020, "Member 'FJunoPersistenceAssetsBackwardCompatibilityReport::ReportDate' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsBackwardCompatibilityReport, Settings) == 0x000028, "Member 'FJunoPersistenceAssetsBackwardCompatibilityReport::Settings' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsBackwardCompatibilityReport, Issues) == 0x000050, "Member 'FJunoPersistenceAssetsBackwardCompatibilityReport::Issues' has a wrong offset!");

// ScriptStruct JunoGameNative.AutoCompleteData
// 0x0020 (0x0020 - 0x0000)
struct FAutoCompleteData final
{
public:
	int32                                         BuildingDataIndex;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Instigator;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ServerSpawnTime;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAutoCompleteData) == 0x000008, "Wrong alignment on FAutoCompleteData");
static_assert(sizeof(FAutoCompleteData) == 0x000020, "Wrong size on FAutoCompleteData");
static_assert(offsetof(FAutoCompleteData, BuildingDataIndex) == 0x000000, "Member 'FAutoCompleteData::BuildingDataIndex' has a wrong offset!");
static_assert(offsetof(FAutoCompleteData, Instigator) == 0x000008, "Member 'FAutoCompleteData::Instigator' has a wrong offset!");
static_assert(offsetof(FAutoCompleteData, ServerSpawnTime) == 0x000010, "Member 'FAutoCompleteData::ServerSpawnTime' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPersistenceAssetsReport
// 0x0050 (0x0050 - 0x0000)
struct FJunoPersistenceAssetsReport final
{
public:
	class FString                                 BuildVersion;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReportDate;                                        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoPersistenceAssetsReportSettings   Settings;                                          // 0x0018(0x0028)(NativeAccessSpecifierPublic)
	TArray<struct FJunoPersistenceAssetInfo>      PersistenceAssetInfos;                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPersistenceAssetsReport) == 0x000008, "Wrong alignment on FJunoPersistenceAssetsReport");
static_assert(sizeof(FJunoPersistenceAssetsReport) == 0x000050, "Wrong size on FJunoPersistenceAssetsReport");
static_assert(offsetof(FJunoPersistenceAssetsReport, BuildVersion) == 0x000000, "Member 'FJunoPersistenceAssetsReport::BuildVersion' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsReport, ReportDate) == 0x000010, "Member 'FJunoPersistenceAssetsReport::ReportDate' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsReport, Settings) == 0x000018, "Member 'FJunoPersistenceAssetsReport::Settings' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceAssetsReport, PersistenceAssetInfos) == 0x000040, "Member 'FJunoPersistenceAssetsReport::PersistenceAssetInfos' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingSnapEntryContext
// 0x0080 (0x0080 - 0x0000)
struct FJunoBuildingSnapEntryContext final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EJunoBuildingSnapEntryState                   State;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ToWorld;                                           // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingSnapEntryContext) == 0x000010, "Wrong alignment on FJunoBuildingSnapEntryContext");
static_assert(sizeof(FJunoBuildingSnapEntryContext) == 0x000080, "Wrong size on FJunoBuildingSnapEntryContext");
static_assert(offsetof(FJunoBuildingSnapEntryContext, State) == 0x000008, "Member 'FJunoBuildingSnapEntryContext::State' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntryContext, ToWorld) == 0x000010, "Member 'FJunoBuildingSnapEntryContext::ToWorld' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingSnapContext
// 0x0050 (0x0050 - 0x0000)
struct FJunoBuildingSnapContext final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoBuildingSnapEntryContext>  TargetEntries;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FQuat                                  RotationOffset;                                    // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingSnapContext) == 0x000010, "Wrong alignment on FJunoBuildingSnapContext");
static_assert(sizeof(FJunoBuildingSnapContext) == 0x000050, "Wrong size on FJunoBuildingSnapContext");
static_assert(offsetof(FJunoBuildingSnapContext, TargetEntries) == 0x000020, "Member 'FJunoBuildingSnapContext::TargetEntries' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapContext, RotationOffset) == 0x000030, "Member 'FJunoBuildingSnapContext::RotationOffset' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPickupManagementSettingsRow
// 0x0018 (0x0020 - 0x0008)
struct FJunoPickupManagementSettingsRow final : public FTableRowBase
{
public:
	int32                                         PickupsAllowedMax;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickupsDesiredSlack;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PickupDespawnDelaySeconds;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugPickupManagement;                            // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePickupManagement;                           // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   NotJunkPickupThreshold;                            // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   ImportantPickupThreshold;                          // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlagPlayerDropsAsImportant;                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoPickupManagementSettingsRow) == 0x000008, "Wrong alignment on FJunoPickupManagementSettingsRow");
static_assert(sizeof(FJunoPickupManagementSettingsRow) == 0x000020, "Wrong size on FJunoPickupManagementSettingsRow");
static_assert(offsetof(FJunoPickupManagementSettingsRow, PickupsAllowedMax) == 0x000008, "Member 'FJunoPickupManagementSettingsRow::PickupsAllowedMax' has a wrong offset!");
static_assert(offsetof(FJunoPickupManagementSettingsRow, PickupsDesiredSlack) == 0x00000C, "Member 'FJunoPickupManagementSettingsRow::PickupsDesiredSlack' has a wrong offset!");
static_assert(offsetof(FJunoPickupManagementSettingsRow, PickupDespawnDelaySeconds) == 0x000010, "Member 'FJunoPickupManagementSettingsRow::PickupDespawnDelaySeconds' has a wrong offset!");
static_assert(offsetof(FJunoPickupManagementSettingsRow, bDebugPickupManagement) == 0x000014, "Member 'FJunoPickupManagementSettingsRow::bDebugPickupManagement' has a wrong offset!");
static_assert(offsetof(FJunoPickupManagementSettingsRow, bEnablePickupManagement) == 0x000015, "Member 'FJunoPickupManagementSettingsRow::bEnablePickupManagement' has a wrong offset!");
static_assert(offsetof(FJunoPickupManagementSettingsRow, NotJunkPickupThreshold) == 0x000016, "Member 'FJunoPickupManagementSettingsRow::NotJunkPickupThreshold' has a wrong offset!");
static_assert(offsetof(FJunoPickupManagementSettingsRow, ImportantPickupThreshold) == 0x000017, "Member 'FJunoPickupManagementSettingsRow::ImportantPickupThreshold' has a wrong offset!");
static_assert(offsetof(FJunoPickupManagementSettingsRow, bFlagPlayerDropsAsImportant) == 0x000018, "Member 'FJunoPickupManagementSettingsRow::bFlagPlayerDropsAsImportant' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingSlotData
// 0x0034 (0x0040 - 0x000C)
struct FJunoBuildingSlotData final : public FFastArraySerializerItem
{
public:
	class FName                                   AssociatedRecipe;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultingQuantity;                                 // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemDefinitionBase*                    ResultingItemDefintion;                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCraft;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPinned;                                         // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           InputAction;                                       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingSlotData) == 0x000008, "Wrong alignment on FJunoBuildingSlotData");
static_assert(sizeof(FJunoBuildingSlotData) == 0x000040, "Wrong size on FJunoBuildingSlotData");
static_assert(offsetof(FJunoBuildingSlotData, AssociatedRecipe) == 0x00000C, "Member 'FJunoBuildingSlotData::AssociatedRecipe' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSlotData, ResultingQuantity) == 0x000010, "Member 'FJunoBuildingSlotData::ResultingQuantity' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSlotData, ResultingItemDefintion) == 0x000018, "Member 'FJunoBuildingSlotData::ResultingItemDefintion' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSlotData, bCanCraft) == 0x000020, "Member 'FJunoBuildingSlotData::bCanCraft' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSlotData, bIsPinned) == 0x000021, "Member 'FJunoBuildingSlotData::bIsPinned' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSlotData, InputAction) == 0x000028, "Member 'FJunoBuildingSlotData::InputAction' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingSlotDataArray
// 0x0030 (0x0138 - 0x0108)
struct FJunoBuildingSlotDataArray final : public FFastArraySerializer
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoBuildingSlotData>          Entries;                                           // 0x0120(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EJunoBuildModeType                            BuildModeType;                                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastSelectedIndex;                                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingSlotDataArray) == 0x000008, "Wrong alignment on FJunoBuildingSlotDataArray");
static_assert(sizeof(FJunoBuildingSlotDataArray) == 0x000138, "Wrong size on FJunoBuildingSlotDataArray");
static_assert(offsetof(FJunoBuildingSlotDataArray, Entries) == 0x000120, "Member 'FJunoBuildingSlotDataArray::Entries' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSlotDataArray, BuildModeType) == 0x000130, "Member 'FJunoBuildingSlotDataArray::BuildModeType' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSlotDataArray, LastSelectedIndex) == 0x000134, "Member 'FJunoBuildingSlotDataArray::LastSelectedIndex' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_BuildingSlotPinned
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_BuildingSlotPinned final
{
public:
	int32                                         UpdatedSlot;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPinned;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_BuildingSlotPinned) == 0x000004, "Wrong alignment on FJunoEvent_BuildingSlotPinned");
static_assert(sizeof(FJunoEvent_BuildingSlotPinned) == 0x000008, "Wrong size on FJunoEvent_BuildingSlotPinned");
static_assert(offsetof(FJunoEvent_BuildingSlotPinned, UpdatedSlot) == 0x000000, "Member 'FJunoEvent_BuildingSlotPinned::UpdatedSlot' has a wrong offset!");
static_assert(offsetof(FJunoEvent_BuildingSlotPinned, bIsPinned) == 0x000004, "Member 'FJunoEvent_BuildingSlotPinned::bIsPinned' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuilderToolSelectedActor
// 0x0070 (0x0070 - 0x0000)
struct FJunoBuilderToolSelectedActor final
{
public:
	TSubclassOf<class AActor>                     Class;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ToSelection;                                       // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuilderToolSelectedActor) == 0x000010, "Wrong alignment on FJunoBuilderToolSelectedActor");
static_assert(sizeof(FJunoBuilderToolSelectedActor) == 0x000070, "Wrong size on FJunoBuilderToolSelectedActor");
static_assert(offsetof(FJunoBuilderToolSelectedActor, Class) == 0x000000, "Member 'FJunoBuilderToolSelectedActor::Class' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSelectedActor, ToSelection) == 0x000010, "Member 'FJunoBuilderToolSelectedActor::ToSelection' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuilderToolSupportCandidate
// 0x0010 (0x0010 - 0x0000)
struct FJunoBuilderToolSupportCandidate final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     Component;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuilderToolSupportCandidate) == 0x000004, "Wrong alignment on FJunoBuilderToolSupportCandidate");
static_assert(sizeof(FJunoBuilderToolSupportCandidate) == 0x000010, "Wrong size on FJunoBuilderToolSupportCandidate");
static_assert(offsetof(FJunoBuilderToolSupportCandidate, Actor) == 0x000000, "Member 'FJunoBuilderToolSupportCandidate::Actor' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSupportCandidate, Component) == 0x000008, "Member 'FJunoBuilderToolSupportCandidate::Component' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuilderToolSelectionSpawnParams
// 0x0100 (0x0100 - 0x0000)
struct FJunoBuilderToolSelectionSpawnParams final
{
public:
	TArray<struct FJunoBuilderToolSelectedActor>  SelectedActors;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             SelectionTransform;                                // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  AttachmentActor;                                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoBuilderToolSupportCandidate> SupportCandidates;                                 // 0x0078(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class APawn*                                  Instigator;                                        // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeName;                                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StableNames;                                       // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x00A8(0x0020)(NativeAccessSpecifierPublic)
	struct FBox                                   WorldSpaceBoundingBox;                             // 0x00C8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuilderToolSelectionSpawnParams) == 0x000010, "Wrong alignment on FJunoBuilderToolSelectionSpawnParams");
static_assert(sizeof(FJunoBuilderToolSelectionSpawnParams) == 0x000100, "Wrong size on FJunoBuilderToolSelectionSpawnParams");
static_assert(offsetof(FJunoBuilderToolSelectionSpawnParams, SelectedActors) == 0x000000, "Member 'FJunoBuilderToolSelectionSpawnParams::SelectedActors' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSelectionSpawnParams, SelectionTransform) == 0x000010, "Member 'FJunoBuilderToolSelectionSpawnParams::SelectionTransform' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSelectionSpawnParams, AttachmentActor) == 0x000070, "Member 'FJunoBuilderToolSelectionSpawnParams::AttachmentActor' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSelectionSpawnParams, SupportCandidates) == 0x000078, "Member 'FJunoBuilderToolSelectionSpawnParams::SupportCandidates' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSelectionSpawnParams, Instigator) == 0x000088, "Member 'FJunoBuilderToolSelectionSpawnParams::Instigator' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSelectionSpawnParams, RecipeName) == 0x000090, "Member 'FJunoBuilderToolSelectionSpawnParams::RecipeName' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSelectionSpawnParams, StableNames) == 0x000098, "Member 'FJunoBuilderToolSelectionSpawnParams::StableNames' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSelectionSpawnParams, GameplayTags) == 0x0000A8, "Member 'FJunoBuilderToolSelectionSpawnParams::GameplayTags' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSelectionSpawnParams, WorldSpaceBoundingBox) == 0x0000C8, "Member 'FJunoBuilderToolSelectionSpawnParams::WorldSpaceBoundingBox' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_BuildingSlotUpdate
// 0x0010 (0x0010 - 0x0000)
struct FJunoEvent_BuildingSlotUpdate final
{
public:
	class UJunoPlayerBuildingComponent*           BuildingComp;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBuildModeType                            BuildModeType;                                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UpdatedSlot;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_BuildingSlotUpdate) == 0x000008, "Wrong alignment on FJunoEvent_BuildingSlotUpdate");
static_assert(sizeof(FJunoEvent_BuildingSlotUpdate) == 0x000010, "Wrong size on FJunoEvent_BuildingSlotUpdate");
static_assert(offsetof(FJunoEvent_BuildingSlotUpdate, BuildingComp) == 0x000000, "Member 'FJunoEvent_BuildingSlotUpdate::BuildingComp' has a wrong offset!");
static_assert(offsetof(FJunoEvent_BuildingSlotUpdate, BuildModeType) == 0x000008, "Member 'FJunoEvent_BuildingSlotUpdate::BuildModeType' has a wrong offset!");
static_assert(offsetof(FJunoEvent_BuildingSlotUpdate, UpdatedSlot) == 0x00000C, "Member 'FJunoEvent_BuildingSlotUpdate::UpdatedSlot' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_SelectedSlotIndexUpdate
// 0x0018 (0x0018 - 0x0000)
struct FJunoEvent_SelectedSlotIndexUpdate final
{
public:
	class UJunoPlayerBuildingComponent*           BuildingComp;                                      // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBuildModeType                            BuildModeType;                                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewSelectedSlot;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInBuildMode;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentRecipe;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_SelectedSlotIndexUpdate) == 0x000008, "Wrong alignment on FJunoEvent_SelectedSlotIndexUpdate");
static_assert(sizeof(FJunoEvent_SelectedSlotIndexUpdate) == 0x000018, "Wrong size on FJunoEvent_SelectedSlotIndexUpdate");
static_assert(offsetof(FJunoEvent_SelectedSlotIndexUpdate, BuildingComp) == 0x000000, "Member 'FJunoEvent_SelectedSlotIndexUpdate::BuildingComp' has a wrong offset!");
static_assert(offsetof(FJunoEvent_SelectedSlotIndexUpdate, BuildModeType) == 0x000008, "Member 'FJunoEvent_SelectedSlotIndexUpdate::BuildModeType' has a wrong offset!");
static_assert(offsetof(FJunoEvent_SelectedSlotIndexUpdate, NewSelectedSlot) == 0x00000C, "Member 'FJunoEvent_SelectedSlotIndexUpdate::NewSelectedSlot' has a wrong offset!");
static_assert(offsetof(FJunoEvent_SelectedSlotIndexUpdate, bIsInBuildMode) == 0x000010, "Member 'FJunoEvent_SelectedSlotIndexUpdate::bIsInBuildMode' has a wrong offset!");
static_assert(offsetof(FJunoEvent_SelectedSlotIndexUpdate, CurrentRecipe) == 0x000014, "Member 'FJunoEvent_SelectedSlotIndexUpdate::CurrentRecipe' has a wrong offset!");

// ScriptStruct JunoGameNative.AwesomePerkReward
// 0x0050 (0x0050 - 0x0000)
struct FAwesomePerkReward final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAwesomePerkReward) == 0x000008, "Wrong alignment on FAwesomePerkReward");
static_assert(sizeof(FAwesomePerkReward) == 0x000050, "Wrong size on FAwesomePerkReward");
static_assert(offsetof(FAwesomePerkReward, Title) == 0x000000, "Member 'FAwesomePerkReward::Title' has a wrong offset!");
static_assert(offsetof(FAwesomePerkReward, Description) == 0x000018, "Member 'FAwesomePerkReward::Description' has a wrong offset!");
static_assert(offsetof(FAwesomePerkReward, GameplayTags) == 0x000030, "Member 'FAwesomePerkReward::GameplayTags' has a wrong offset!");

// ScriptStruct JunoGameNative.AwesomeLevelRewardEntry
// 0x0028 (0x0028 - 0x0000)
struct FAwesomeLevelRewardEntry final
{
public:
	int32                                         MaxVillagerCapacity;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAwesomePerkReward>             PlayerPerkRewards;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FAwesomePerkReward>             NPCPerkRewards;                                    // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAwesomeLevelRewardEntry) == 0x000008, "Wrong alignment on FAwesomeLevelRewardEntry");
static_assert(sizeof(FAwesomeLevelRewardEntry) == 0x000028, "Wrong size on FAwesomeLevelRewardEntry");
static_assert(offsetof(FAwesomeLevelRewardEntry, MaxVillagerCapacity) == 0x000000, "Member 'FAwesomeLevelRewardEntry::MaxVillagerCapacity' has a wrong offset!");
static_assert(offsetof(FAwesomeLevelRewardEntry, PlayerPerkRewards) == 0x000008, "Member 'FAwesomeLevelRewardEntry::PlayerPerkRewards' has a wrong offset!");
static_assert(offsetof(FAwesomeLevelRewardEntry, NPCPerkRewards) == 0x000018, "Member 'FAwesomeLevelRewardEntry::NPCPerkRewards' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_BuildingModeChanged
// 0x0018 (0x0018 - 0x0000)
struct FJunoEvent_BuildingModeChanged final
{
public:
	class UJunoPlayerBuildingComponent*           BuildingComp;                                      // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBuildModeType                            BuildModeType;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedSlot;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurrentRecipe;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInBuildMode;                                    // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_BuildingModeChanged) == 0x000008, "Wrong alignment on FJunoEvent_BuildingModeChanged");
static_assert(sizeof(FJunoEvent_BuildingModeChanged) == 0x000018, "Wrong size on FJunoEvent_BuildingModeChanged");
static_assert(offsetof(FJunoEvent_BuildingModeChanged, BuildingComp) == 0x000000, "Member 'FJunoEvent_BuildingModeChanged::BuildingComp' has a wrong offset!");
static_assert(offsetof(FJunoEvent_BuildingModeChanged, BuildModeType) == 0x000008, "Member 'FJunoEvent_BuildingModeChanged::BuildModeType' has a wrong offset!");
static_assert(offsetof(FJunoEvent_BuildingModeChanged, SelectedSlot) == 0x00000C, "Member 'FJunoEvent_BuildingModeChanged::SelectedSlot' has a wrong offset!");
static_assert(offsetof(FJunoEvent_BuildingModeChanged, CurrentRecipe) == 0x000010, "Member 'FJunoEvent_BuildingModeChanged::CurrentRecipe' has a wrong offset!");
static_assert(offsetof(FJunoEvent_BuildingModeChanged, bIsInBuildMode) == 0x000014, "Member 'FJunoEvent_BuildingModeChanged::bIsInBuildMode' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingSnapEntryBase
// 0x0028 (0x0028 - 0x0000)
struct FJunoBuildingSnapEntryBase final
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingSnapEntryBase) == 0x000008, "Wrong alignment on FJunoBuildingSnapEntryBase");
static_assert(sizeof(FJunoBuildingSnapEntryBase) == 0x000028, "Wrong size on FJunoBuildingSnapEntryBase");
static_assert(offsetof(FJunoBuildingSnapEntryBase, RequiredTags) == 0x000000, "Member 'FJunoBuildingSnapEntryBase::RequiredTags' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntryBase, Radius) == 0x000020, "Member 'FJunoBuildingSnapEntryBase::Radius' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoLastLoadedRecipeData
// 0x0008 (0x0008 - 0x0000)
struct FJunoLastLoadedRecipeData final
{
public:
	EJunoBuildModeType                            BuildModeType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RecipeName;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoLastLoadedRecipeData) == 0x000004, "Wrong alignment on FJunoLastLoadedRecipeData");
static_assert(sizeof(FJunoLastLoadedRecipeData) == 0x000008, "Wrong size on FJunoLastLoadedRecipeData");
static_assert(offsetof(FJunoLastLoadedRecipeData, BuildModeType) == 0x000000, "Member 'FJunoLastLoadedRecipeData::BuildModeType' has a wrong offset!");
static_assert(offsetof(FJunoLastLoadedRecipeData, RecipeName) == 0x000004, "Member 'FJunoLastLoadedRecipeData::RecipeName' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoSelectedSlot
// 0x0030 (0x0030 - 0x0000)
struct FJunoSelectedSlot final
{
public:
	struct FJunoSlotIndex                         Slot;                                              // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	class FName                                   ForcedRecipe;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0010(0x0020)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoSelectedSlot) == 0x000008, "Wrong alignment on FJunoSelectedSlot");
static_assert(sizeof(FJunoSelectedSlot) == 0x000030, "Wrong size on FJunoSelectedSlot");
static_assert(offsetof(FJunoSelectedSlot, Slot) == 0x000000, "Member 'FJunoSelectedSlot::Slot' has a wrong offset!");
static_assert(offsetof(FJunoSelectedSlot, ForcedRecipe) == 0x000008, "Member 'FJunoSelectedSlot::ForcedRecipe' has a wrong offset!");
static_assert(offsetof(FJunoSelectedSlot, Tags) == 0x000010, "Member 'FJunoSelectedSlot::Tags' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingSessionEntry
// 0x0040 (0x0040 - 0x0000)
struct FJunoBuildingSessionEntry final
{
public:
	TWeakObjectPtr<class AActor>                  SpawnedActor;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SpawnTime;                                         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UItemDefinitionBase>     ItemDef;                                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Recipe;                                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingSessionEntry) == 0x000008, "Wrong alignment on FJunoBuildingSessionEntry");
static_assert(sizeof(FJunoBuildingSessionEntry) == 0x000040, "Wrong size on FJunoBuildingSessionEntry");
static_assert(offsetof(FJunoBuildingSessionEntry, SpawnedActor) == 0x000000, "Member 'FJunoBuildingSessionEntry::SpawnedActor' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSessionEntry, SpawnLocation) == 0x000008, "Member 'FJunoBuildingSessionEntry::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSessionEntry, SpawnTime) == 0x000020, "Member 'FJunoBuildingSessionEntry::SpawnTime' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSessionEntry, ActorClass) == 0x000028, "Member 'FJunoBuildingSessionEntry::ActorClass' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSessionEntry, ItemDef) == 0x000030, "Member 'FJunoBuildingSessionEntry::ItemDef' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSessionEntry, Recipe) == 0x000038, "Member 'FJunoBuildingSessionEntry::Recipe' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_OnDeathUI
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_OnDeathUI final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_OnDeathUI) == 0x000001, "Wrong alignment on FJunoEvent_OnDeathUI");
static_assert(sizeof(FJunoEvent_OnDeathUI) == 0x000001, "Wrong size on FJunoEvent_OnDeathUI");

// ScriptStruct JunoGameNative.JunoBuildingSessionInfo
// 0x0028 (0x0028 - 0x0000)
struct FJunoBuildingSessionInfo final
{
public:
	TArray<struct FJunoBuildingSessionEntry>      Entries;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  SessionId;                                         // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingSessionInfo) == 0x000008, "Wrong alignment on FJunoBuildingSessionInfo");
static_assert(sizeof(FJunoBuildingSessionInfo) == 0x000028, "Wrong size on FJunoBuildingSessionInfo");
static_assert(offsetof(FJunoBuildingSessionInfo, Entries) == 0x000000, "Member 'FJunoBuildingSessionInfo::Entries' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSessionInfo, SessionId) == 0x000010, "Member 'FJunoBuildingSessionInfo::SessionId' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingMetricsClientPermissions
// 0x0010 (0x0010 - 0x0000)
struct FJunoBuildingMetricsClientPermissions final
{
public:
	struct FInt32Vector                           Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          BuildBudgetUsagePercent;                           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingMetricsClientPermissions) == 0x000004, "Wrong alignment on FJunoBuildingMetricsClientPermissions");
static_assert(sizeof(FJunoBuildingMetricsClientPermissions) == 0x000010, "Wrong size on FJunoBuildingMetricsClientPermissions");
static_assert(offsetof(FJunoBuildingMetricsClientPermissions, Location) == 0x000000, "Member 'FJunoBuildingMetricsClientPermissions::Location' has a wrong offset!");
static_assert(offsetof(FJunoBuildingMetricsClientPermissions, BuildBudgetUsagePercent) == 0x00000C, "Member 'FJunoBuildingMetricsClientPermissions::BuildBudgetUsagePercent' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBedAssignmentCharacterInfo
// 0x0048 (0x0048 - 0x0000)
struct FJunoBedAssignmentCharacterInfo final
{
public:
	struct FGameplayTag                           AICharacterGameplayTag;                            // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AICharacterDisplayName;                            // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AICharacterIcon;                                   // 0x0020(0x0020)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBed;                                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBedAssignmentCharacterInfo) == 0x000008, "Wrong alignment on FJunoBedAssignmentCharacterInfo");
static_assert(sizeof(FJunoBedAssignmentCharacterInfo) == 0x000048, "Wrong size on FJunoBedAssignmentCharacterInfo");
static_assert(offsetof(FJunoBedAssignmentCharacterInfo, AICharacterGameplayTag) == 0x000000, "Member 'FJunoBedAssignmentCharacterInfo::AICharacterGameplayTag' has a wrong offset!");
static_assert(offsetof(FJunoBedAssignmentCharacterInfo, AICharacterDisplayName) == 0x000008, "Member 'FJunoBedAssignmentCharacterInfo::AICharacterDisplayName' has a wrong offset!");
static_assert(offsetof(FJunoBedAssignmentCharacterInfo, AICharacterIcon) == 0x000020, "Member 'FJunoBedAssignmentCharacterInfo::AICharacterIcon' has a wrong offset!");
static_assert(offsetof(FJunoBedAssignmentCharacterInfo, bHasBed) == 0x000040, "Member 'FJunoBedAssignmentCharacterInfo::bHasBed' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMCPItemPlacementStatus
// 0x000C (0x000C - 0x0000)
struct FJunoMCPItemPlacementStatus final
{
public:
	int32                                         NumOfMCPItemWorlds;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPlacedMCPItemThisSession;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x7];                                        // 0x0005(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoMCPItemPlacementStatus) == 0x000004, "Wrong alignment on FJunoMCPItemPlacementStatus");
static_assert(sizeof(FJunoMCPItemPlacementStatus) == 0x00000C, "Wrong size on FJunoMCPItemPlacementStatus");
static_assert(offsetof(FJunoMCPItemPlacementStatus, NumOfMCPItemWorlds) == 0x000000, "Member 'FJunoMCPItemPlacementStatus::NumOfMCPItemWorlds' has a wrong offset!");
static_assert(offsetof(FJunoMCPItemPlacementStatus, bHasPlacedMCPItemThisSession) == 0x000004, "Member 'FJunoMCPItemPlacementStatus::bHasPlacedMCPItemThisSession' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingSetData
// 0x0070 (0x0070 - 0x0000)
struct FJunoGuidedBuildingSetData
{
public:
	class FText                                   SetDisplayName;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TotalNumberOfSnapsInSet;                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoGuidedBuildingStageData           FoundationStage;                                   // 0x0020(0x0040)(NativeAccessSpecifierPublic)
	TArray<struct FJunoGuidedBuildingSectionData> Sections;                                          // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FJunoGuidedBuildingSetData) == 0x000008, "Wrong alignment on FJunoGuidedBuildingSetData");
static_assert(sizeof(FJunoGuidedBuildingSetData) == 0x000070, "Wrong size on FJunoGuidedBuildingSetData");
static_assert(offsetof(FJunoGuidedBuildingSetData, SetDisplayName) == 0x000000, "Member 'FJunoGuidedBuildingSetData::SetDisplayName' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSetData, TotalNumberOfSnapsInSet) == 0x000018, "Member 'FJunoGuidedBuildingSetData::TotalNumberOfSnapsInSet' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSetData, FoundationStage) == 0x000020, "Member 'FJunoGuidedBuildingSetData::FoundationStage' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSetData, Sections) == 0x000060, "Member 'FJunoGuidedBuildingSetData::Sections' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingSetEditorData
// 0x0010 (0x0080 - 0x0070)
struct FJunoGuidedBuildingSetEditorData final : public FJunoGuidedBuildingSetData
{
public:
	TArray<struct FJunoGuidedBuildingSectionEditorData> EditorSections;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGuidedBuildingSetEditorData) == 0x000008, "Wrong alignment on FJunoGuidedBuildingSetEditorData");
static_assert(sizeof(FJunoGuidedBuildingSetEditorData) == 0x000080, "Wrong size on FJunoGuidedBuildingSetEditorData");
static_assert(offsetof(FJunoGuidedBuildingSetEditorData, EditorSections) == 0x000070, "Member 'FJunoGuidedBuildingSetEditorData::EditorSections' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPlayspaceAccountantSaveData
// 0x0050 (0x0050 - 0x0000)
struct FJunoPlayspaceAccountantSaveData final
{
public:
	TMap<class FName, int32>                      PersistentValueTable;                              // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPlayspaceAccountantSaveData) == 0x000008, "Wrong alignment on FJunoPlayspaceAccountantSaveData");
static_assert(sizeof(FJunoPlayspaceAccountantSaveData) == 0x000050, "Wrong size on FJunoPlayspaceAccountantSaveData");
static_assert(offsetof(FJunoPlayspaceAccountantSaveData, PersistentValueTable) == 0x000000, "Member 'FJunoPlayspaceAccountantSaveData::PersistentValueTable' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPlayspaceAccountantFeatureData_InGameClass_PersistentInfo
// 0x0050 (0x0050 - 0x0000)
struct FJunoPlayspaceAccountantFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoPlayspaceAccountantSaveData       PlayspaceAccountantSaveData;                       // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPlayspaceAccountantFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoPlayspaceAccountantFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoPlayspaceAccountantFeatureData_InGameClass_PersistentInfo) == 0x000050, "Wrong size on FJunoPlayspaceAccountantFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoPlayspaceAccountantFeatureData_InGameClass_PersistentInfo, PlayspaceAccountantSaveData) == 0x000000, "Member 'FJunoPlayspaceAccountantFeatureData_InGameClass_PersistentInfo::PlayspaceAccountantSaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuilderToolInteractionRow
// 0x00A0 (0x00A8 - 0x0008)
struct FJunoBuilderToolInteractionRow : public FTableRowBase
{
public:
	struct FJunoBuilderToolInteractionActorClassSet SupportedClasses;                                  // 0x0008(0x00A0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuilderToolInteractionRow) == 0x000008, "Wrong alignment on FJunoBuilderToolInteractionRow");
static_assert(sizeof(FJunoBuilderToolInteractionRow) == 0x0000A8, "Wrong size on FJunoBuilderToolInteractionRow");
static_assert(offsetof(FJunoBuilderToolInteractionRow, SupportedClasses) == 0x000008, "Member 'FJunoBuilderToolInteractionRow::SupportedClasses' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingBehaviorInteractionRow
// 0x0140 (0x01E8 - 0x00A8)
struct FJunoBuildingBehaviorInteractionRow final : public FJunoBuilderToolInteractionRow
{
public:
	struct FJunoBuilderToolInteractionActorClassSet OverlappableClasses;                               // 0x00A8(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FJunoBuilderToolInteractionActorClassSet PlacementSupportingClasses;                        // 0x0148(0x00A0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingBehaviorInteractionRow) == 0x000008, "Wrong alignment on FJunoBuildingBehaviorInteractionRow");
static_assert(sizeof(FJunoBuildingBehaviorInteractionRow) == 0x0001E8, "Wrong size on FJunoBuildingBehaviorInteractionRow");
static_assert(offsetof(FJunoBuildingBehaviorInteractionRow, OverlappableClasses) == 0x0000A8, "Member 'FJunoBuildingBehaviorInteractionRow::OverlappableClasses' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorInteractionRow, PlacementSupportingClasses) == 0x000148, "Member 'FJunoBuildingBehaviorInteractionRow::PlacementSupportingClasses' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPlayspaceIndexNode
// 0x0030 (0x0030 - 0x0000)
struct FJunoPlayspaceIndexNode final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ParentID;                                          // 0x0010(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          ChildrenIds;                                       // 0x0020(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPlayspaceIndexNode) == 0x000008, "Wrong alignment on FJunoPlayspaceIndexNode");
static_assert(sizeof(FJunoPlayspaceIndexNode) == 0x000030, "Wrong size on FJunoPlayspaceIndexNode");
static_assert(offsetof(FJunoPlayspaceIndexNode, ID) == 0x000000, "Member 'FJunoPlayspaceIndexNode::ID' has a wrong offset!");
static_assert(offsetof(FJunoPlayspaceIndexNode, ParentID) == 0x000010, "Member 'FJunoPlayspaceIndexNode::ParentID' has a wrong offset!");
static_assert(offsetof(FJunoPlayspaceIndexNode, ChildrenIds) == 0x000020, "Member 'FJunoPlayspaceIndexNode::ChildrenIds' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPlayspaceIndexSaveData
// 0x0050 (0x0050 - 0x0000)
struct FJunoPlayspaceIndexSaveData final
{
public:
	TMap<struct FGuid, struct FJunoPlayspaceIndexNode> PlayspaceNodes;                                    // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPlayspaceIndexSaveData) == 0x000008, "Wrong alignment on FJunoPlayspaceIndexSaveData");
static_assert(sizeof(FJunoPlayspaceIndexSaveData) == 0x000050, "Wrong size on FJunoPlayspaceIndexSaveData");
static_assert(offsetof(FJunoPlayspaceIndexSaveData, PlayspaceNodes) == 0x000000, "Member 'FJunoPlayspaceIndexSaveData::PlayspaceNodes' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPlayspaceIndexPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0050 (0x0050 - 0x0000)
struct FJunoPlayspaceIndexPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoPlayspaceIndexSaveData            PlayspaceIndexSaveData;                            // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPlayspaceIndexPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoPlayspaceIndexPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoPlayspaceIndexPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000050, "Wrong size on FJunoPlayspaceIndexPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoPlayspaceIndexPersistenceFeatureData_InGameClass_PersistentInfo, PlayspaceIndexSaveData) == 0x000000, "Member 'FJunoPlayspaceIndexPersistenceFeatureData_InGameClass_PersistentInfo::PlayspaceIndexSaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRollbackBadCheckpointRange
// 0x0028 (0x0028 - 0x0000)
struct FJunoRollbackBadCheckpointRange final
{
public:
	int32                                         StartCL;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndCL;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartTimestamp;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndTimestamp;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRollbackBadCheckpointRange) == 0x000008, "Wrong alignment on FJunoRollbackBadCheckpointRange");
static_assert(sizeof(FJunoRollbackBadCheckpointRange) == 0x000028, "Wrong size on FJunoRollbackBadCheckpointRange");
static_assert(offsetof(FJunoRollbackBadCheckpointRange, StartCL) == 0x000000, "Member 'FJunoRollbackBadCheckpointRange::StartCL' has a wrong offset!");
static_assert(offsetof(FJunoRollbackBadCheckpointRange, EndCL) == 0x000004, "Member 'FJunoRollbackBadCheckpointRange::EndCL' has a wrong offset!");
static_assert(offsetof(FJunoRollbackBadCheckpointRange, StartTimestamp) == 0x000008, "Member 'FJunoRollbackBadCheckpointRange::StartTimestamp' has a wrong offset!");
static_assert(offsetof(FJunoRollbackBadCheckpointRange, EndTimestamp) == 0x000018, "Member 'FJunoRollbackBadCheckpointRange::EndTimestamp' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgeRecipeStateFastEntry
// 0x009C (0x00A8 - 0x000C)
struct FJunoKnowledgeRecipeStateFastEntry final : public FFastArraySerializerItem
{
public:
	EJunoKnowledgeState                           CurrentState;                                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RowName;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       DiscoveredByPlayerState;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               ViewedPlayerIds;                                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               EverAcquiredPlayerIds;                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMissingMpcProfileOwnership;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  McpProfileOwnershipTags;                           // 0x0058(0x0020)(NativeAccessSpecifierPublic)
	TArray<bool>                                  IngredientSatisfied;                               // 0x0078(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTagContainer>          IngredientTags;                                    // 0x0088(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	class UItemDefinitionBase*                    ResultItem;                                        // 0x0098(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResultAcquired;                                   // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreIngredientsForReveal;                       // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoKnowledgeRecipeStateFastEntry) == 0x000008, "Wrong alignment on FJunoKnowledgeRecipeStateFastEntry");
static_assert(sizeof(FJunoKnowledgeRecipeStateFastEntry) == 0x0000A8, "Wrong size on FJunoKnowledgeRecipeStateFastEntry");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, CurrentState) == 0x00000C, "Member 'FJunoKnowledgeRecipeStateFastEntry::CurrentState' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, RowName) == 0x000010, "Member 'FJunoKnowledgeRecipeStateFastEntry::RowName' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, Guid) == 0x000014, "Member 'FJunoKnowledgeRecipeStateFastEntry::Guid' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, DiscoveredByPlayerState) == 0x000028, "Member 'FJunoKnowledgeRecipeStateFastEntry::DiscoveredByPlayerState' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, ViewedPlayerIds) == 0x000030, "Member 'FJunoKnowledgeRecipeStateFastEntry::ViewedPlayerIds' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, EverAcquiredPlayerIds) == 0x000040, "Member 'FJunoKnowledgeRecipeStateFastEntry::EverAcquiredPlayerIds' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, bMissingMpcProfileOwnership) == 0x000050, "Member 'FJunoKnowledgeRecipeStateFastEntry::bMissingMpcProfileOwnership' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, McpProfileOwnershipTags) == 0x000058, "Member 'FJunoKnowledgeRecipeStateFastEntry::McpProfileOwnershipTags' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, IngredientSatisfied) == 0x000078, "Member 'FJunoKnowledgeRecipeStateFastEntry::IngredientSatisfied' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, IngredientTags) == 0x000088, "Member 'FJunoKnowledgeRecipeStateFastEntry::IngredientTags' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, ResultItem) == 0x000098, "Member 'FJunoKnowledgeRecipeStateFastEntry::ResultItem' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, bResultAcquired) == 0x0000A0, "Member 'FJunoKnowledgeRecipeStateFastEntry::bResultAcquired' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastEntry, bIgnoreIngredientsForReveal) == 0x0000A1, "Member 'FJunoKnowledgeRecipeStateFastEntry::bIgnoreIngredientsForReveal' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoSyncWeatherCache
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FJunoSyncWeatherCache final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoSyncWeatherCache) == 0x000008, "Wrong alignment on FJunoSyncWeatherCache");
static_assert(sizeof(FJunoSyncWeatherCache) == 0x000018, "Wrong size on FJunoSyncWeatherCache");

// ScriptStruct JunoGameNative.JunoHUDVehicleAmmoInfo
// 0x0010 (0x0010 - 0x0000)
struct FJunoHUDVehicleAmmoInfo final
{
public:
	int32                                         AmmoCount;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    AmmoItemDefinition;                                // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoHUDVehicleAmmoInfo) == 0x000008, "Wrong alignment on FJunoHUDVehicleAmmoInfo");
static_assert(sizeof(FJunoHUDVehicleAmmoInfo) == 0x000010, "Wrong size on FJunoHUDVehicleAmmoInfo");
static_assert(offsetof(FJunoHUDVehicleAmmoInfo, AmmoCount) == 0x000000, "Member 'FJunoHUDVehicleAmmoInfo::AmmoCount' has a wrong offset!");
static_assert(offsetof(FJunoHUDVehicleAmmoInfo, AmmoItemDefinition) == 0x000008, "Member 'FJunoHUDVehicleAmmoInfo::AmmoItemDefinition' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoHUDVehicleEnterEvent
// 0x0018 (0x0018 - 0x0000)
struct FJunoHUDVehicleEnterEvent final
{
public:
	struct FJunoHUDVehicleAmmoInfo                AmmoInfo;                                          // 0x0000(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentCooldownPercent;                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentCooldownDuration;                           // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoHUDVehicleEnterEvent) == 0x000008, "Wrong alignment on FJunoHUDVehicleEnterEvent");
static_assert(sizeof(FJunoHUDVehicleEnterEvent) == 0x000018, "Wrong size on FJunoHUDVehicleEnterEvent");
static_assert(offsetof(FJunoHUDVehicleEnterEvent, AmmoInfo) == 0x000000, "Member 'FJunoHUDVehicleEnterEvent::AmmoInfo' has a wrong offset!");
static_assert(offsetof(FJunoHUDVehicleEnterEvent, CurrentCooldownPercent) == 0x000010, "Member 'FJunoHUDVehicleEnterEvent::CurrentCooldownPercent' has a wrong offset!");
static_assert(offsetof(FJunoHUDVehicleEnterEvent, CurrentCooldownDuration) == 0x000014, "Member 'FJunoHUDVehicleEnterEvent::CurrentCooldownDuration' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoHUDVehicleExitEvent
// 0x0001 (0x0001 - 0x0000)
struct FJunoHUDVehicleExitEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoHUDVehicleExitEvent) == 0x000001, "Wrong alignment on FJunoHUDVehicleExitEvent");
static_assert(sizeof(FJunoHUDVehicleExitEvent) == 0x000001, "Wrong size on FJunoHUDVehicleExitEvent");

// ScriptStruct JunoGameNative.JunoBuildLimitPool
// 0x0020 (0x0028 - 0x0008)
struct FJunoBuildLimitPool final : public FTableRowBase
{
public:
	TArray<class UClass*>                         Classes;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxInstanceCount;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UJunoBuildLimitGetter>      BuildLimitGetterClass;                             // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildLimitPool) == 0x000008, "Wrong alignment on FJunoBuildLimitPool");
static_assert(sizeof(FJunoBuildLimitPool) == 0x000028, "Wrong size on FJunoBuildLimitPool");
static_assert(offsetof(FJunoBuildLimitPool, Classes) == 0x000008, "Member 'FJunoBuildLimitPool::Classes' has a wrong offset!");
static_assert(offsetof(FJunoBuildLimitPool, MaxInstanceCount) == 0x000018, "Member 'FJunoBuildLimitPool::MaxInstanceCount' has a wrong offset!");
static_assert(offsetof(FJunoBuildLimitPool, BuildLimitGetterClass) == 0x000020, "Member 'FJunoBuildLimitPool::BuildLimitGetterClass' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoHUDVehicleFireEvent
// 0x0018 (0x0018 - 0x0000)
struct FJunoHUDVehicleFireEvent final
{
public:
	struct FJunoHUDVehicleAmmoInfo                AmmoInfo;                                          // 0x0000(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CooldownDuration;                                  // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoHUDVehicleFireEvent) == 0x000008, "Wrong alignment on FJunoHUDVehicleFireEvent");
static_assert(sizeof(FJunoHUDVehicleFireEvent) == 0x000018, "Wrong size on FJunoHUDVehicleFireEvent");
static_assert(offsetof(FJunoHUDVehicleFireEvent, AmmoInfo) == 0x000000, "Member 'FJunoHUDVehicleFireEvent::AmmoInfo' has a wrong offset!");
static_assert(offsetof(FJunoHUDVehicleFireEvent, CooldownDuration) == 0x000010, "Member 'FJunoHUDVehicleFireEvent::CooldownDuration' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoHUDVehicleCooldownUpdateEvent
// 0x0004 (0x0004 - 0x0000)
struct FJunoHUDVehicleCooldownUpdateEvent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoHUDVehicleCooldownUpdateEvent) == 0x000004, "Wrong alignment on FJunoHUDVehicleCooldownUpdateEvent");
static_assert(sizeof(FJunoHUDVehicleCooldownUpdateEvent) == 0x000004, "Wrong size on FJunoHUDVehicleCooldownUpdateEvent");
static_assert(offsetof(FJunoHUDVehicleCooldownUpdateEvent, Percent) == 0x000000, "Member 'FJunoHUDVehicleCooldownUpdateEvent::Percent' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoHUDGliderCanDeployEvent
// 0x0001 (0x0001 - 0x0000)
struct FJunoHUDGliderCanDeployEvent final
{
public:
	bool                                          bCanDeploy;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoHUDGliderCanDeployEvent) == 0x000001, "Wrong alignment on FJunoHUDGliderCanDeployEvent");
static_assert(sizeof(FJunoHUDGliderCanDeployEvent) == 0x000001, "Wrong size on FJunoHUDGliderCanDeployEvent");
static_assert(offsetof(FJunoHUDGliderCanDeployEvent, bCanDeploy) == 0x000000, "Member 'FJunoHUDGliderCanDeployEvent::bCanDeploy' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoHUDMenuVillageInteractEvent
// 0x0010 (0x0010 - 0x0000)
struct FJunoHUDMenuVillageInteractEvent final
{
public:
	class AJunoCampActor*                         CampActor;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoCampMembershipActorComponent*      CampActorMembershipActorComponent;                 // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoHUDMenuVillageInteractEvent) == 0x000008, "Wrong alignment on FJunoHUDMenuVillageInteractEvent");
static_assert(sizeof(FJunoHUDMenuVillageInteractEvent) == 0x000010, "Wrong size on FJunoHUDMenuVillageInteractEvent");
static_assert(offsetof(FJunoHUDMenuVillageInteractEvent, CampActor) == 0x000000, "Member 'FJunoHUDMenuVillageInteractEvent::CampActor' has a wrong offset!");
static_assert(offsetof(FJunoHUDMenuVillageInteractEvent, CampActorMembershipActorComponent) == 0x000008, "Member 'FJunoHUDMenuVillageInteractEvent::CampActorMembershipActorComponent' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPFWDeltaContentBase64
// 0x0010 (0x0010 - 0x0000)
struct FJunoPFWDeltaContentBase64 final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPFWDeltaContentBase64) == 0x000008, "Wrong alignment on FJunoPFWDeltaContentBase64");
static_assert(sizeof(FJunoPFWDeltaContentBase64) == 0x000010, "Wrong size on FJunoPFWDeltaContentBase64");
static_assert(offsetof(FJunoPFWDeltaContentBase64, Content) == 0x000000, "Member 'FJunoPFWDeltaContentBase64::Content' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoVerbMessage_AwesomeLevelIncreased
// 0x0048 (0x00C0 - 0x0078)
struct FJunoVerbMessage_AwesomeLevelIncreased final : public FVerbMessage
{
public:
	struct FSubjectTagsPair                       SourceActor;                                       // 0x0078(0x0038)(Edit, EditConst, NativeAccessSpecifierPrivate)
	int32                                         NewAwesomeLevel;                                   // 0x00B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PrevAwesomeLevel;                                  // 0x00B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RemainingAwesomePoints;                            // 0x00B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoVerbMessage_AwesomeLevelIncreased) == 0x000008, "Wrong alignment on FJunoVerbMessage_AwesomeLevelIncreased");
static_assert(sizeof(FJunoVerbMessage_AwesomeLevelIncreased) == 0x0000C0, "Wrong size on FJunoVerbMessage_AwesomeLevelIncreased");
static_assert(offsetof(FJunoVerbMessage_AwesomeLevelIncreased, SourceActor) == 0x000078, "Member 'FJunoVerbMessage_AwesomeLevelIncreased::SourceActor' has a wrong offset!");
static_assert(offsetof(FJunoVerbMessage_AwesomeLevelIncreased, NewAwesomeLevel) == 0x0000B0, "Member 'FJunoVerbMessage_AwesomeLevelIncreased::NewAwesomeLevel' has a wrong offset!");
static_assert(offsetof(FJunoVerbMessage_AwesomeLevelIncreased, PrevAwesomeLevel) == 0x0000B4, "Member 'FJunoVerbMessage_AwesomeLevelIncreased::PrevAwesomeLevel' has a wrong offset!");
static_assert(offsetof(FJunoVerbMessage_AwesomeLevelIncreased, RemainingAwesomePoints) == 0x0000B8, "Member 'FJunoVerbMessage_AwesomeLevelIncreased::RemainingAwesomePoints' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoVerbMessage_GuidedBuildCompleted
// 0x0048 (0x00C0 - 0x0078)
struct FJunoVerbMessage_GuidedBuildCompleted final : public FVerbMessage
{
public:
	struct FSubjectTagsPair                       GuidedBuilding;                                    // 0x0078(0x0038)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FSubjectTagsPair>               BuildContributors;                                 // 0x00B0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoVerbMessage_GuidedBuildCompleted) == 0x000008, "Wrong alignment on FJunoVerbMessage_GuidedBuildCompleted");
static_assert(sizeof(FJunoVerbMessage_GuidedBuildCompleted) == 0x0000C0, "Wrong size on FJunoVerbMessage_GuidedBuildCompleted");
static_assert(offsetof(FJunoVerbMessage_GuidedBuildCompleted, GuidedBuilding) == 0x000078, "Member 'FJunoVerbMessage_GuidedBuildCompleted::GuidedBuilding' has a wrong offset!");
static_assert(offsetof(FJunoVerbMessage_GuidedBuildCompleted, BuildContributors) == 0x0000B0, "Member 'FJunoVerbMessage_GuidedBuildCompleted::BuildContributors' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingTagData
// 0x0028 (0x0030 - 0x0008)
struct FJunoBuildingTagData final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   BlueprintClass;                                    // 0x0008(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0028(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingTagData) == 0x000008, "Wrong alignment on FJunoBuildingTagData");
static_assert(sizeof(FJunoBuildingTagData) == 0x000030, "Wrong size on FJunoBuildingTagData");
static_assert(offsetof(FJunoBuildingTagData, BlueprintClass) == 0x000008, "Member 'FJunoBuildingTagData::BlueprintClass' has a wrong offset!");
static_assert(offsetof(FJunoBuildingTagData, tag) == 0x000028, "Member 'FJunoBuildingTagData::tag' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoVerbMessage_GuidedBuildStageCompleted
// 0x0040 (0x00B8 - 0x0078)
struct FJunoVerbMessage_GuidedBuildStageCompleted final : public FVerbMessage
{
public:
	struct FSubjectTagsPair                       GuidedBuilding;                                    // 0x0078(0x0038)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FJunoStageKey                          StageKey;                                          // 0x00B0(0x0008)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoVerbMessage_GuidedBuildStageCompleted) == 0x000008, "Wrong alignment on FJunoVerbMessage_GuidedBuildStageCompleted");
static_assert(sizeof(FJunoVerbMessage_GuidedBuildStageCompleted) == 0x0000B8, "Wrong size on FJunoVerbMessage_GuidedBuildStageCompleted");
static_assert(offsetof(FJunoVerbMessage_GuidedBuildStageCompleted, GuidedBuilding) == 0x000078, "Member 'FJunoVerbMessage_GuidedBuildStageCompleted::GuidedBuilding' has a wrong offset!");
static_assert(offsetof(FJunoVerbMessage_GuidedBuildStageCompleted, StageKey) == 0x0000B0, "Member 'FJunoVerbMessage_GuidedBuildStageCompleted::StageKey' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoVerbMessage_RecruitNPC
// 0x0070 (0x00E8 - 0x0078)
struct FJunoVerbMessage_RecruitNPC final : public FVerbMessage
{
public:
	struct FSubjectTagsPair                       UniqueAIIdentifier;                                // 0x0078(0x0038)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FSubjectTagsPair                       AIRole;                                            // 0x00B0(0x0038)(Edit, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoVerbMessage_RecruitNPC) == 0x000008, "Wrong alignment on FJunoVerbMessage_RecruitNPC");
static_assert(sizeof(FJunoVerbMessage_RecruitNPC) == 0x0000E8, "Wrong size on FJunoVerbMessage_RecruitNPC");
static_assert(offsetof(FJunoVerbMessage_RecruitNPC, UniqueAIIdentifier) == 0x000078, "Member 'FJunoVerbMessage_RecruitNPC::UniqueAIIdentifier' has a wrong offset!");
static_assert(offsetof(FJunoVerbMessage_RecruitNPC, AIRole) == 0x0000B0, "Member 'FJunoVerbMessage_RecruitNPC::AIRole' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionActorWeather
// 0x0050 (0x0060 - 0x0010)
struct FJunoWorldConditionActorWeather final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          ActorRef;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      AllowedWeather;                                    // 0x0018(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldConditionActorWeather) == 0x000008, "Wrong alignment on FJunoWorldConditionActorWeather");
static_assert(sizeof(FJunoWorldConditionActorWeather) == 0x000060, "Wrong size on FJunoWorldConditionActorWeather");
static_assert(offsetof(FJunoWorldConditionActorWeather, ActorRef) == 0x000010, "Member 'FJunoWorldConditionActorWeather::ActorRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionActorWeather, AllowedWeather) == 0x000018, "Member 'FJunoWorldConditionActorWeather::AllowedWeather' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoVerbMessage_TemperatureUpdated
// 0x0070 (0x00E8 - 0x0078)
struct FJunoVerbMessage_TemperatureUpdated final : public FVerbMessage
{
public:
	struct FSubjectTagsPair                       PreviousTemperature;                               // 0x0078(0x0038)(Edit, EditConst, NativeAccessSpecifierPrivate)
	struct FSubjectTagsPair                       NewTemperature;                                    // 0x00B0(0x0038)(Edit, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FJunoVerbMessage_TemperatureUpdated) == 0x000008, "Wrong alignment on FJunoVerbMessage_TemperatureUpdated");
static_assert(sizeof(FJunoVerbMessage_TemperatureUpdated) == 0x0000E8, "Wrong size on FJunoVerbMessage_TemperatureUpdated");
static_assert(offsetof(FJunoVerbMessage_TemperatureUpdated, PreviousTemperature) == 0x000078, "Member 'FJunoVerbMessage_TemperatureUpdated::PreviousTemperature' has a wrong offset!");
static_assert(offsetof(FJunoVerbMessage_TemperatureUpdated, NewTemperature) == 0x0000B0, "Member 'FJunoVerbMessage_TemperatureUpdated::NewTemperature' has a wrong offset!");

// ScriptStruct JunoGameNative.SavedWeather
// 0x0090 (0x0090 - 0x0000)
struct FSavedWeather final
{
public:
	struct FJunoWeatherLocation                   Location;                                          // 0x0000(0x0002)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         EndUnixTime;                                       // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoWeatherPhase                      CurrentPhase;                                      // 0x0010(0x0038)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoWeatherPhase                      NextPhase;                                         // 0x0048(0x0038)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoWeatherPhase>              NextPhaseQueue;                                    // 0x0080(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedWeather) == 0x000008, "Wrong alignment on FSavedWeather");
static_assert(sizeof(FSavedWeather) == 0x000090, "Wrong size on FSavedWeather");
static_assert(offsetof(FSavedWeather, Location) == 0x000000, "Member 'FSavedWeather::Location' has a wrong offset!");
static_assert(offsetof(FSavedWeather, EndUnixTime) == 0x000008, "Member 'FSavedWeather::EndUnixTime' has a wrong offset!");
static_assert(offsetof(FSavedWeather, CurrentPhase) == 0x000010, "Member 'FSavedWeather::CurrentPhase' has a wrong offset!");
static_assert(offsetof(FSavedWeather, NextPhase) == 0x000048, "Member 'FSavedWeather::NextPhase' has a wrong offset!");
static_assert(offsetof(FSavedWeather, NextPhaseQueue) == 0x000080, "Member 'FSavedWeather::NextPhaseQueue' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWeatherSaveData
// 0x0010 (0x0010 - 0x0000)
struct FJunoWeatherSaveData final
{
public:
	TArray<struct FSavedWeather>                  SavedWeathers;                                     // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWeatherSaveData) == 0x000008, "Wrong alignment on FJunoWeatherSaveData");
static_assert(sizeof(FJunoWeatherSaveData) == 0x000010, "Wrong size on FJunoWeatherSaveData");
static_assert(offsetof(FJunoWeatherSaveData, SavedWeathers) == 0x000000, "Member 'FJunoWeatherSaveData::SavedWeathers' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWeatherPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0010 (0x0010 - 0x0000)
struct FJunoWeatherPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoWeatherSaveData                   WeatherSaveData;                                   // 0x0000(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWeatherPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoWeatherPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoWeatherPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000010, "Wrong size on FJunoWeatherPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoWeatherPersistenceFeatureData_InGameClass_PersistentInfo, WeatherSaveData) == 0x000000, "Member 'FJunoWeatherPersistenceFeatureData_InGameClass_PersistentInfo::WeatherSaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWeatherPhaseForecast
// 0x0064 (0x0064 - 0x0000)
struct FJunoWeatherPhaseForecast final
{
public:
	struct FGameplayTag                           WeatherTypeName;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            WeatherTypeWeight;                                 // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            duration;                                          // 0x0014(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionIn;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionOut;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            WindSpeedRange;                                    // 0x002C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRandomWindDirection;                            // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDirectionDegree;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MorningTemperature;                                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DayTemperature;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EveningTemperature;                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NightTemperature;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            WeatherIntensityRange;                             // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWeatherPhaseForecast) == 0x000004, "Wrong alignment on FJunoWeatherPhaseForecast");
static_assert(sizeof(FJunoWeatherPhaseForecast) == 0x000064, "Wrong size on FJunoWeatherPhaseForecast");
static_assert(offsetof(FJunoWeatherPhaseForecast, WeatherTypeName) == 0x000000, "Member 'FJunoWeatherPhaseForecast::WeatherTypeName' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, WeatherTypeWeight) == 0x000004, "Member 'FJunoWeatherPhaseForecast::WeatherTypeWeight' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, duration) == 0x000014, "Member 'FJunoWeatherPhaseForecast::duration' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, TransitionIn) == 0x000024, "Member 'FJunoWeatherPhaseForecast::TransitionIn' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, TransitionOut) == 0x000028, "Member 'FJunoWeatherPhaseForecast::TransitionOut' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, WindSpeedRange) == 0x00002C, "Member 'FJunoWeatherPhaseForecast::WindSpeedRange' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, UseRandomWindDirection) == 0x00003C, "Member 'FJunoWeatherPhaseForecast::UseRandomWindDirection' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, WindDirectionDegree) == 0x000040, "Member 'FJunoWeatherPhaseForecast::WindDirectionDegree' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, MorningTemperature) == 0x000044, "Member 'FJunoWeatherPhaseForecast::MorningTemperature' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, DayTemperature) == 0x000048, "Member 'FJunoWeatherPhaseForecast::DayTemperature' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, EveningTemperature) == 0x00004C, "Member 'FJunoWeatherPhaseForecast::EveningTemperature' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, NightTemperature) == 0x000050, "Member 'FJunoWeatherPhaseForecast::NightTemperature' has a wrong offset!");
static_assert(offsetof(FJunoWeatherPhaseForecast, WeatherIntensityRange) == 0x000054, "Member 'FJunoWeatherPhaseForecast::WeatherIntensityRange' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWeatherLocalizedForecasts
// 0x0018 (0x0018 - 0x0000)
struct FJunoWeatherLocalizedForecasts final
{
public:
	struct FJunoWeatherLocation                   Location;                                          // 0x0000(0x0002)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoWeatherPhaseForecast>      WeatherTypes;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWeatherLocalizedForecasts) == 0x000008, "Wrong alignment on FJunoWeatherLocalizedForecasts");
static_assert(sizeof(FJunoWeatherLocalizedForecasts) == 0x000018, "Wrong size on FJunoWeatherLocalizedForecasts");
static_assert(offsetof(FJunoWeatherLocalizedForecasts, Location) == 0x000000, "Member 'FJunoWeatherLocalizedForecasts::Location' has a wrong offset!");
static_assert(offsetof(FJunoWeatherLocalizedForecasts, WeatherTypes) == 0x000008, "Member 'FJunoWeatherLocalizedForecasts::WeatherTypes' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingPreviewParams
// 0x0018 (0x0018 - 0x0000)
struct FJunoBuildingPreviewParams final
{
public:
	TArray<struct FJunoCollisionChannelResponsePair> CollisionResponses;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowFoundationPieces;                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingPreviewParams) == 0x000008, "Wrong alignment on FJunoBuildingPreviewParams");
static_assert(sizeof(FJunoBuildingPreviewParams) == 0x000018, "Wrong size on FJunoBuildingPreviewParams");
static_assert(offsetof(FJunoBuildingPreviewParams, CollisionResponses) == 0x000000, "Member 'FJunoBuildingPreviewParams::CollisionResponses' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPreviewParams, bShowFoundationPieces) == 0x000010, "Member 'FJunoBuildingPreviewParams::bShowFoundationPieces' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWeatherSeasonRow
// 0x0018 (0x0020 - 0x0008)
struct FJunoWeatherSeasonRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           Season;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoWeatherLocalizedForecasts> LocalizedForecasts;                                // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWeatherSeasonRow) == 0x000008, "Wrong alignment on FJunoWeatherSeasonRow");
static_assert(sizeof(FJunoWeatherSeasonRow) == 0x000020, "Wrong size on FJunoWeatherSeasonRow");
static_assert(offsetof(FJunoWeatherSeasonRow, Season) == 0x000008, "Member 'FJunoWeatherSeasonRow::Season' has a wrong offset!");
static_assert(offsetof(FJunoWeatherSeasonRow, LocalizedForecasts) == 0x000010, "Member 'FJunoWeatherSeasonRow::LocalizedForecasts' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionAICampChecks
// 0x00B8 (0x00C8 - 0x0010)
struct FJunoWorldConditionAICampChecks final : public FWorldConditionCommonBase
{
public:
	struct FWorldConditionContextDataRef          EventDataRef;                                      // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FWorldConditionContextDataRef          AIRef;                                             // 0x0018(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EJunoWorldConditionAICampChecksIsAssigned     MustBeAssignedToACamp;                             // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoWorldConditionAICampChecksIsAssigned     MustBeAssignedToPlayer;                            // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldConditionContextDataRef          PlayerControllerRef;                               // 0x0024(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      RoleMustMatchQuery;                                // 0x0030(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SoftRemovedReasonsMustMatchQuery;                  // 0x0078(0x0048)(Edit, NativeAccessSpecifierPublic)
	EJunoWorldConditionMustHaveLastUsedGatheringActor MustHaveLastUsedGatheringActor;                    // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldConditionAICampChecks) == 0x000008, "Wrong alignment on FJunoWorldConditionAICampChecks");
static_assert(sizeof(FJunoWorldConditionAICampChecks) == 0x0000C8, "Wrong size on FJunoWorldConditionAICampChecks");
static_assert(offsetof(FJunoWorldConditionAICampChecks, EventDataRef) == 0x000010, "Member 'FJunoWorldConditionAICampChecks::EventDataRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAICampChecks, AIRef) == 0x000018, "Member 'FJunoWorldConditionAICampChecks::AIRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAICampChecks, MustBeAssignedToACamp) == 0x000020, "Member 'FJunoWorldConditionAICampChecks::MustBeAssignedToACamp' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAICampChecks, MustBeAssignedToPlayer) == 0x000021, "Member 'FJunoWorldConditionAICampChecks::MustBeAssignedToPlayer' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAICampChecks, PlayerControllerRef) == 0x000024, "Member 'FJunoWorldConditionAICampChecks::PlayerControllerRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAICampChecks, RoleMustMatchQuery) == 0x000030, "Member 'FJunoWorldConditionAICampChecks::RoleMustMatchQuery' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAICampChecks, SoftRemovedReasonsMustMatchQuery) == 0x000078, "Member 'FJunoWorldConditionAICampChecks::SoftRemovedReasonsMustMatchQuery' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAICampChecks, MustHaveLastUsedGatheringActor) == 0x0000C0, "Member 'FJunoWorldConditionAICampChecks::MustHaveLastUsedGatheringActor' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionBed
// 0x0018 (0x0028 - 0x0010)
struct FJunoWorldConditionBed final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          BedActorRef;                                       // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FWorldConditionContextDataRef          UserActorRef;                                      // 0x0018(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EJunoWorldConditionAssignmentState            AssignmentState;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldConditionBed) == 0x000008, "Wrong alignment on FJunoWorldConditionBed");
static_assert(sizeof(FJunoWorldConditionBed) == 0x000028, "Wrong size on FJunoWorldConditionBed");
static_assert(offsetof(FJunoWorldConditionBed, BedActorRef) == 0x000010, "Member 'FJunoWorldConditionBed::BedActorRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionBed, UserActorRef) == 0x000018, "Member 'FJunoWorldConditionBed::UserActorRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionBed, AssignmentState) == 0x000020, "Member 'FJunoWorldConditionBed::AssignmentState' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionIsSpatiallyInCamp
// 0x0008 (0x0018 - 0x0010)
struct FJunoWorldConditionIsSpatiallyInCamp final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          ActorRef;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldConditionIsSpatiallyInCamp) == 0x000008, "Wrong alignment on FJunoWorldConditionIsSpatiallyInCamp");
static_assert(sizeof(FJunoWorldConditionIsSpatiallyInCamp) == 0x000018, "Wrong size on FJunoWorldConditionIsSpatiallyInCamp");
static_assert(offsetof(FJunoWorldConditionIsSpatiallyInCamp, ActorRef) == 0x000010, "Member 'FJunoWorldConditionIsSpatiallyInCamp::ActorRef' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionLocalCampChecks
// 0x0010 (0x0020 - 0x0010)
struct FJunoWorldConditionLocalCampChecks final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          ActorRef;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMustHaveFreeRecruitmentObject;                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumRemainingSoftRemovalTimeInJunoHours;        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldConditionLocalCampChecks) == 0x000008, "Wrong alignment on FJunoWorldConditionLocalCampChecks");
static_assert(sizeof(FJunoWorldConditionLocalCampChecks) == 0x000020, "Wrong size on FJunoWorldConditionLocalCampChecks");
static_assert(offsetof(FJunoWorldConditionLocalCampChecks, ActorRef) == 0x000010, "Member 'FJunoWorldConditionLocalCampChecks::ActorRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionLocalCampChecks, bMustHaveFreeRecruitmentObject) == 0x000018, "Member 'FJunoWorldConditionLocalCampChecks::bMustHaveFreeRecruitmentObject' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionLocalCampChecks, MinimumRemainingSoftRemovalTimeInJunoHours) == 0x00001C, "Member 'FJunoWorldConditionLocalCampChecks::MinimumRemainingSoftRemovalTimeInJunoHours' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionPlayerCampChecks
// 0x0010 (0x0020 - 0x0010)
struct FJunoWorldConditionPlayerCampChecks final : public FWorldConditionCommonBase
{
public:
	struct FWorldConditionContextDataRef          PlayerControllerRef;                               // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EJunoWorldConditionHasFollower                PlayerHasFollowersCheck;                           // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldConditionPlayerCampChecks) == 0x000008, "Wrong alignment on FJunoWorldConditionPlayerCampChecks");
static_assert(sizeof(FJunoWorldConditionPlayerCampChecks) == 0x000020, "Wrong size on FJunoWorldConditionPlayerCampChecks");
static_assert(offsetof(FJunoWorldConditionPlayerCampChecks, PlayerControllerRef) == 0x000010, "Member 'FJunoWorldConditionPlayerCampChecks::PlayerControllerRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionPlayerCampChecks, PlayerHasFollowersCheck) == 0x000018, "Member 'FJunoWorldConditionPlayerCampChecks::PlayerHasFollowersCheck' has a wrong offset!");

// ScriptStruct JunoGameNative.ConnectivityRemovalStreamPendingContainer
// 0x0010 (0x0010 - 0x0000)
struct FConnectivityRemovalStreamPendingContainer final
{
public:
	TArray<struct FConnectivityRemovalStreamPendingData> Data;                                              // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConnectivityRemovalStreamPendingContainer) == 0x000008, "Wrong alignment on FConnectivityRemovalStreamPendingContainer");
static_assert(sizeof(FConnectivityRemovalStreamPendingContainer) == 0x000010, "Wrong size on FConnectivityRemovalStreamPendingContainer");
static_assert(offsetof(FConnectivityRemovalStreamPendingContainer, Data) == 0x000000, "Member 'FConnectivityRemovalStreamPendingContainer::Data' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionQuantityInAIResourcesInventory
// 0x0010 (0x0020 - 0x0010)
struct FJunoWorldConditionQuantityInAIResourcesInventory final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          AIRef;                                             // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RequiredResourcesCount;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldConditionQuantityInAIResourcesInventory) == 0x000008, "Wrong alignment on FJunoWorldConditionQuantityInAIResourcesInventory");
static_assert(sizeof(FJunoWorldConditionQuantityInAIResourcesInventory) == 0x000020, "Wrong size on FJunoWorldConditionQuantityInAIResourcesInventory");
static_assert(offsetof(FJunoWorldConditionQuantityInAIResourcesInventory, AIRef) == 0x000010, "Member 'FJunoWorldConditionQuantityInAIResourcesInventory::AIRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionQuantityInAIResourcesInventory, RequiredResourcesCount) == 0x000018, "Member 'FJunoWorldConditionQuantityInAIResourcesInventory::RequiredResourcesCount' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionSandboxChecks
// 0x0000 (0x0010 - 0x0010)
struct FJunoWorldConditionSandboxChecks final : public FWorldConditionCommonBase
{
};
static_assert(alignof(FJunoWorldConditionSandboxChecks) == 0x000008, "Wrong alignment on FJunoWorldConditionSandboxChecks");
static_assert(sizeof(FJunoWorldConditionSandboxChecks) == 0x000010, "Wrong size on FJunoWorldConditionSandboxChecks");

// ScriptStruct JunoGameNative.JunoBuildingPreviewerRequestData
// 0x0110 (0x0110 - 0x0000)
struct alignas(0x10) FJunoBuildingPreviewerRequestData final
{
public:
	TMap<class UActorComponent*, class USceneComponent*> AttachParents;                                     // 0x0000(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0xC0];                                      // 0x0050(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingPreviewerRequestData) == 0x000010, "Wrong alignment on FJunoBuildingPreviewerRequestData");
static_assert(sizeof(FJunoBuildingPreviewerRequestData) == 0x000110, "Wrong size on FJunoBuildingPreviewerRequestData");
static_assert(offsetof(FJunoBuildingPreviewerRequestData, AttachParents) == 0x000000, "Member 'FJunoBuildingPreviewerRequestData::AttachParents' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingSnapEntryPreview
// 0x00C0 (0x00C0 - 0x0000)
struct FJunoBuildingSnapEntryPreview final
{
public:
	EJunoBuildingSnapEntryState                   State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ToWorld;                                           // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   TargetingArea;                                     // 0x0070(0x0038)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        FadePercentage;                                    // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnPrimaryActor;                                   // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0xF];                                       // 0x00B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingSnapEntryPreview) == 0x000010, "Wrong alignment on FJunoBuildingSnapEntryPreview");
static_assert(sizeof(FJunoBuildingSnapEntryPreview) == 0x0000C0, "Wrong size on FJunoBuildingSnapEntryPreview");
static_assert(offsetof(FJunoBuildingSnapEntryPreview, State) == 0x000000, "Member 'FJunoBuildingSnapEntryPreview::State' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntryPreview, ToWorld) == 0x000010, "Member 'FJunoBuildingSnapEntryPreview::ToWorld' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntryPreview, TargetingArea) == 0x000070, "Member 'FJunoBuildingSnapEntryPreview::TargetingArea' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntryPreview, FadePercentage) == 0x0000A8, "Member 'FJunoBuildingSnapEntryPreview::FadePercentage' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntryPreview, bOnPrimaryActor) == 0x0000B0, "Member 'FJunoBuildingSnapEntryPreview::bOnPrimaryActor' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingSelectionPreview
// 0x0118 (0x0118 - 0x0000)
struct FJunoBuildingSelectionPreview final
{
public:
	TArray<class UJunoBuildingPreviewComponent*>  PreviewComponents;                                 // 0x0000(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            CollisionComponents;                               // 0x0010(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UMeshComponent*>                 MeshComponents;                                    // 0x0020(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FJunoBuildingSnapEntryPreview>  SnapEntryPreviews;                                 // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJunoComponentActorMapEntry>    ComponentToClassMap;                               // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBox                                   LocalCollisionBounds;                              // 0x0050(0x0038)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   FoundationCollisionBounds;                         // 0x0088(0x0038)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   NonFoundationCollisionBounds;                      // 0x00C0(0x0038)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UBoxComponent*                          NoTargetPlacementCollisionGBA;                     // 0x00F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          FoundationPlacementCollisionGBA;                   // 0x0100(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingSelectionPreview) == 0x000008, "Wrong alignment on FJunoBuildingSelectionPreview");
static_assert(sizeof(FJunoBuildingSelectionPreview) == 0x000118, "Wrong size on FJunoBuildingSelectionPreview");
static_assert(offsetof(FJunoBuildingSelectionPreview, PreviewComponents) == 0x000000, "Member 'FJunoBuildingSelectionPreview::PreviewComponents' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSelectionPreview, CollisionComponents) == 0x000010, "Member 'FJunoBuildingSelectionPreview::CollisionComponents' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSelectionPreview, MeshComponents) == 0x000020, "Member 'FJunoBuildingSelectionPreview::MeshComponents' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSelectionPreview, SnapEntryPreviews) == 0x000030, "Member 'FJunoBuildingSelectionPreview::SnapEntryPreviews' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSelectionPreview, ComponentToClassMap) == 0x000040, "Member 'FJunoBuildingSelectionPreview::ComponentToClassMap' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSelectionPreview, LocalCollisionBounds) == 0x000050, "Member 'FJunoBuildingSelectionPreview::LocalCollisionBounds' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSelectionPreview, FoundationCollisionBounds) == 0x000088, "Member 'FJunoBuildingSelectionPreview::FoundationCollisionBounds' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSelectionPreview, NonFoundationCollisionBounds) == 0x0000C0, "Member 'FJunoBuildingSelectionPreview::NonFoundationCollisionBounds' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSelectionPreview, NoTargetPlacementCollisionGBA) == 0x0000F8, "Member 'FJunoBuildingSelectionPreview::NoTargetPlacementCollisionGBA' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSelectionPreview, FoundationPlacementCollisionGBA) == 0x000100, "Member 'FJunoBuildingSelectionPreview::FoundationPlacementCollisionGBA' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingPreviewerWorkingData
// 0x0240 (0x0240 - 0x0000)
struct FJunoBuildingPreviewerWorkingData final
{
public:
	TArray<class UActorComponent*>                DefaultComponents;                                 // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FJunoBuildingPreviewerRequestData      RequestData;                                       // 0x0010(0x0110)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FJunoBuildingSelectionPreview          Result;                                            // 0x0120(0x0118)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingPreviewerWorkingData) == 0x000010, "Wrong alignment on FJunoBuildingPreviewerWorkingData");
static_assert(sizeof(FJunoBuildingPreviewerWorkingData) == 0x000240, "Wrong size on FJunoBuildingPreviewerWorkingData");
static_assert(offsetof(FJunoBuildingPreviewerWorkingData, DefaultComponents) == 0x000000, "Member 'FJunoBuildingPreviewerWorkingData::DefaultComponents' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPreviewerWorkingData, RequestData) == 0x000010, "Member 'FJunoBuildingPreviewerWorkingData::RequestData' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPreviewerWorkingData, Result) == 0x000120, "Member 'FJunoBuildingPreviewerWorkingData::Result' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingPreviewerWorkingDataAsync
// 0x0260 (0x0260 - 0x0000)
struct FJunoBuildingPreviewerWorkingDataAsync final
{
public:
	struct FJunoBuildingPreviewerWorkingData      WorkingData;                                       // 0x0000(0x0240)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_240[0x20];                                     // 0x0240(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingPreviewerWorkingDataAsync) == 0x000010, "Wrong alignment on FJunoBuildingPreviewerWorkingDataAsync");
static_assert(sizeof(FJunoBuildingPreviewerWorkingDataAsync) == 0x000260, "Wrong size on FJunoBuildingPreviewerWorkingDataAsync");
static_assert(offsetof(FJunoBuildingPreviewerWorkingDataAsync, WorkingData) == 0x000000, "Member 'FJunoBuildingPreviewerWorkingDataAsync::WorkingData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldRandomSeed
// 0x0014 (0x0014 - 0x0000)
struct FJunoWorldRandomSeed final
{
public:
	int32                                         RootSeed;                                          // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Version;                                           // 0x0004(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldRandomSeed) == 0x000004, "Wrong alignment on FJunoWorldRandomSeed");
static_assert(sizeof(FJunoWorldRandomSeed) == 0x000014, "Wrong size on FJunoWorldRandomSeed");
static_assert(offsetof(FJunoWorldRandomSeed, RootSeed) == 0x000000, "Member 'FJunoWorldRandomSeed::RootSeed' has a wrong offset!");
static_assert(offsetof(FJunoWorldRandomSeed, Version) == 0x000004, "Member 'FJunoWorldRandomSeed::Version' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldSaveData
// 0x0050 (0x0050 - 0x0000)
struct FJunoWorldSaveData final
{
public:
	uint32                                        WorldPersistenceVersion;                           // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreationTime;                                      // 0x0008(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoWorldRandomSeed                   RandomSeed;                                        // 0x0010(0x0014)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialPlayerStartLocation;                        // 0x0028(0x0018)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LatestSessionId;                                   // 0x0040(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldSaveData) == 0x000008, "Wrong alignment on FJunoWorldSaveData");
static_assert(sizeof(FJunoWorldSaveData) == 0x000050, "Wrong size on FJunoWorldSaveData");
static_assert(offsetof(FJunoWorldSaveData, WorldPersistenceVersion) == 0x000000, "Member 'FJunoWorldSaveData::WorldPersistenceVersion' has a wrong offset!");
static_assert(offsetof(FJunoWorldSaveData, CreationTime) == 0x000008, "Member 'FJunoWorldSaveData::CreationTime' has a wrong offset!");
static_assert(offsetof(FJunoWorldSaveData, RandomSeed) == 0x000010, "Member 'FJunoWorldSaveData::RandomSeed' has a wrong offset!");
static_assert(offsetof(FJunoWorldSaveData, InitialPlayerStartLocation) == 0x000028, "Member 'FJunoWorldSaveData::InitialPlayerStartLocation' has a wrong offset!");
static_assert(offsetof(FJunoWorldSaveData, LatestSessionId) == 0x000040, "Member 'FJunoWorldSaveData::LatestSessionId' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0050 (0x0050 - 0x0000)
struct FJunoWorldPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoWorldSaveData                     WorldSaveData;                                     // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoWorldPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoWorldPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000050, "Wrong size on FJunoWorldPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoWorldPersistenceFeatureData_InGameClass_PersistentInfo, WorldSaveData) == 0x000000, "Member 'FJunoWorldPersistenceFeatureData_InGameClass_PersistentInfo::WorldSaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildInstructionsItemData
// 0x0058 (0x0058 - 0x0000)
struct FJunoBuildInstructionsItemData final
{
public:
	bool                                          bGiveResourcesOnDestroy;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SelfCraftingFormulaName;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActorClassToBuild;                                 // 0x0008(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SizeDescription;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SetDescription;                                    // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildInstructionsItemData) == 0x000008, "Wrong alignment on FJunoBuildInstructionsItemData");
static_assert(sizeof(FJunoBuildInstructionsItemData) == 0x000058, "Wrong size on FJunoBuildInstructionsItemData");
static_assert(offsetof(FJunoBuildInstructionsItemData, bGiveResourcesOnDestroy) == 0x000000, "Member 'FJunoBuildInstructionsItemData::bGiveResourcesOnDestroy' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsItemData, SelfCraftingFormulaName) == 0x000004, "Member 'FJunoBuildInstructionsItemData::SelfCraftingFormulaName' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsItemData, ActorClassToBuild) == 0x000008, "Member 'FJunoBuildInstructionsItemData::ActorClassToBuild' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsItemData, SizeDescription) == 0x000028, "Member 'FJunoBuildInstructionsItemData::SizeDescription' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsItemData, SetDescription) == 0x000040, "Member 'FJunoBuildInstructionsItemData::SetDescription' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldSettingRepState
// 0x0008 (0x0008 - 0x0000)
struct FJunoWorldSettingRepState final
{
public:
	struct FGameplayTag                           SettingName;                                       // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSettingOn;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSettingTainted;                                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldSettingRepState) == 0x000004, "Wrong alignment on FJunoWorldSettingRepState");
static_assert(sizeof(FJunoWorldSettingRepState) == 0x000008, "Wrong size on FJunoWorldSettingRepState");
static_assert(offsetof(FJunoWorldSettingRepState, SettingName) == 0x000000, "Member 'FJunoWorldSettingRepState::SettingName' has a wrong offset!");
static_assert(offsetof(FJunoWorldSettingRepState, bIsSettingOn) == 0x000004, "Member 'FJunoWorldSettingRepState::bIsSettingOn' has a wrong offset!");
static_assert(offsetof(FJunoWorldSettingRepState, bIsSettingTainted) == 0x000005, "Member 'FJunoWorldSettingRepState::bIsSettingTainted' has a wrong offset!");

// ScriptStruct JunoGameNative.MeshAuditInfo
// 0x0080 (0x0080 - 0x0000)
struct FMeshAuditInfo final
{
public:
	struct FSoftObjectPath                        AssetPath;                                         // 0x0000(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshAuditFailureReason                       FailureReason;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumConvexShapes;                                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumConvexShapePointsTotal;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollisionLOD;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTrianglesInPhysicsMesh;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumNonStreamingLODs;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumInlineLODs;                                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLODs;                                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionTraceFlag                           CollisionTraceFlag;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TriCounts;                                         // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         RenderResourceSystemSize;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BodySetupResourceSize;                             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorstTriRatio;                                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshBoundingBoxAreaMeters;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RouteToAsset;                                      // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomizedCollision;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeshCollideAll;                                   // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeverStream;                                      // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeshAuditInfo) == 0x000008, "Wrong alignment on FMeshAuditInfo");
static_assert(sizeof(FMeshAuditInfo) == 0x000080, "Wrong size on FMeshAuditInfo");
static_assert(offsetof(FMeshAuditInfo, AssetPath) == 0x000000, "Member 'FMeshAuditInfo::AssetPath' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, FailureReason) == 0x000018, "Member 'FMeshAuditInfo::FailureReason' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, NumConvexShapes) == 0x00001C, "Member 'FMeshAuditInfo::NumConvexShapes' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, NumConvexShapePointsTotal) == 0x000020, "Member 'FMeshAuditInfo::NumConvexShapePointsTotal' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, CollisionLOD) == 0x000024, "Member 'FMeshAuditInfo::CollisionLOD' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, NumTrianglesInPhysicsMesh) == 0x000028, "Member 'FMeshAuditInfo::NumTrianglesInPhysicsMesh' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, NumNonStreamingLODs) == 0x00002C, "Member 'FMeshAuditInfo::NumNonStreamingLODs' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, NumInlineLODs) == 0x000030, "Member 'FMeshAuditInfo::NumInlineLODs' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, NumLODs) == 0x000034, "Member 'FMeshAuditInfo::NumLODs' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, CollisionTraceFlag) == 0x000038, "Member 'FMeshAuditInfo::CollisionTraceFlag' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, TriCounts) == 0x000040, "Member 'FMeshAuditInfo::TriCounts' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, RenderResourceSystemSize) == 0x000050, "Member 'FMeshAuditInfo::RenderResourceSystemSize' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, BodySetupResourceSize) == 0x000058, "Member 'FMeshAuditInfo::BodySetupResourceSize' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, WorstTriRatio) == 0x000060, "Member 'FMeshAuditInfo::WorstTriRatio' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, MeshBoundingBoxAreaMeters) == 0x000064, "Member 'FMeshAuditInfo::MeshBoundingBoxAreaMeters' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, RouteToAsset) == 0x000068, "Member 'FMeshAuditInfo::RouteToAsset' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, bCustomizedCollision) == 0x000078, "Member 'FMeshAuditInfo::bCustomizedCollision' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, bMeshCollideAll) == 0x000079, "Member 'FMeshAuditInfo::bMeshCollideAll' has a wrong offset!");
static_assert(offsetof(FMeshAuditInfo, bNeverStream) == 0x00007A, "Member 'FMeshAuditInfo::bNeverStream' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldSettingMapping
// 0x0008 (0x0008 - 0x0000)
struct FJunoWorldSettingMapping final
{
public:
	struct FGameplayTag                           TagName;                                           // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SavedName;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldSettingMapping) == 0x000004, "Wrong alignment on FJunoWorldSettingMapping");
static_assert(sizeof(FJunoWorldSettingMapping) == 0x000008, "Wrong size on FJunoWorldSettingMapping");
static_assert(offsetof(FJunoWorldSettingMapping, TagName) == 0x000000, "Member 'FJunoWorldSettingMapping::TagName' has a wrong offset!");
static_assert(offsetof(FJunoWorldSettingMapping, SavedName) == 0x000004, "Member 'FJunoWorldSettingMapping::SavedName' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldSettingsSaveData
// 0x0010 (0x0010 - 0x0000)
struct FJunoWorldSettingsSaveData final
{
public:
	TArray<class FName>                           TaintedSettings;                                   // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldSettingsSaveData) == 0x000008, "Wrong alignment on FJunoWorldSettingsSaveData");
static_assert(sizeof(FJunoWorldSettingsSaveData) == 0x000010, "Wrong size on FJunoWorldSettingsSaveData");
static_assert(offsetof(FJunoWorldSettingsSaveData, TaintedSettings) == 0x000000, "Member 'FJunoWorldSettingsSaveData::TaintedSettings' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldSettingsPersistenceFeatureData_InGameClass_PersistentInfo
// 0x0010 (0x0010 - 0x0000)
struct FJunoWorldSettingsPersistenceFeatureData_InGameClass_PersistentInfo final
{
public:
	struct FJunoWorldSettingsSaveData             WorldSettingsSaveData;                             // 0x0000(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldSettingsPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000008, "Wrong alignment on FJunoWorldSettingsPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(sizeof(FJunoWorldSettingsPersistenceFeatureData_InGameClass_PersistentInfo) == 0x000010, "Wrong size on FJunoWorldSettingsPersistenceFeatureData_InGameClass_PersistentInfo");
static_assert(offsetof(FJunoWorldSettingsPersistenceFeatureData_InGameClass_PersistentInfo, WorldSettingsSaveData) == 0x000000, "Member 'FJunoWorldSettingsPersistenceFeatureData_InGameClass_PersistentInfo::WorldSettingsSaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldSettingBoolToggleEvent
// 0x0008 (0x0008 - 0x0000)
struct FJunoWorldSettingBoolToggleEvent final
{
public:
	struct FGameplayTag                           SettingName;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSettingOn;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldSettingBoolToggleEvent) == 0x000004, "Wrong alignment on FJunoWorldSettingBoolToggleEvent");
static_assert(sizeof(FJunoWorldSettingBoolToggleEvent) == 0x000008, "Wrong size on FJunoWorldSettingBoolToggleEvent");
static_assert(offsetof(FJunoWorldSettingBoolToggleEvent, SettingName) == 0x000000, "Member 'FJunoWorldSettingBoolToggleEvent::SettingName' has a wrong offset!");
static_assert(offsetof(FJunoWorldSettingBoolToggleEvent, bIsSettingOn) == 0x000004, "Member 'FJunoWorldSettingBoolToggleEvent::bIsSettingOn' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoResourceData
// 0x0070 (0x0078 - 0x0008)
struct FJunoResourceData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortWorldItemDefinition> ItemDefinition;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EJunoResourceScale, int32>               Amount;                                            // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoResourceData) == 0x000008, "Wrong alignment on FJunoResourceData");
static_assert(sizeof(FJunoResourceData) == 0x000078, "Wrong size on FJunoResourceData");
static_assert(offsetof(FJunoResourceData, ItemDefinition) == 0x000008, "Member 'FJunoResourceData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoResourceData, Amount) == 0x000028, "Member 'FJunoResourceData::Amount' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldSettingTaintedEvent
// 0x0008 (0x0008 - 0x0000)
struct FJunoWorldSettingTaintedEvent final
{
public:
	struct FGameplayTag                           SettingName;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSettingTainted;                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldSettingTaintedEvent) == 0x000004, "Wrong alignment on FJunoWorldSettingTaintedEvent");
static_assert(sizeof(FJunoWorldSettingTaintedEvent) == 0x000008, "Wrong size on FJunoWorldSettingTaintedEvent");
static_assert(offsetof(FJunoWorldSettingTaintedEvent, SettingName) == 0x000000, "Member 'FJunoWorldSettingTaintedEvent::SettingName' has a wrong offset!");
static_assert(offsetof(FJunoWorldSettingTaintedEvent, bIsSettingTainted) == 0x000004, "Member 'FJunoWorldSettingTaintedEvent::bIsSettingTainted' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoItemDiscoveredMessage
// 0x0010 (0x0010 - 0x0000)
struct FJunoItemDiscoveredMessage final
{
public:
	class UFortItemDefinition*                    NewItemDefinition;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       InstigatorPlayerState;                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoItemDiscoveredMessage) == 0x000008, "Wrong alignment on FJunoItemDiscoveredMessage");
static_assert(sizeof(FJunoItemDiscoveredMessage) == 0x000010, "Wrong size on FJunoItemDiscoveredMessage");
static_assert(offsetof(FJunoItemDiscoveredMessage, NewItemDefinition) == 0x000000, "Member 'FJunoItemDiscoveredMessage::NewItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoItemDiscoveredMessage, InstigatorPlayerState) == 0x000008, "Member 'FJunoItemDiscoveredMessage::InstigatorPlayerState' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgeItemStateFastEntry
// 0x002C (0x0038 - 0x000C)
struct FJunoKnowledgeItemStateFastEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DateFound;                                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemDefinitionBase*                    ItemDefinition;                                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       InstigatorPlayerState;                             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               ViewedPlayerIds;                                   // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoKnowledgeItemStateFastEntry) == 0x000008, "Wrong alignment on FJunoKnowledgeItemStateFastEntry");
static_assert(sizeof(FJunoKnowledgeItemStateFastEntry) == 0x000038, "Wrong size on FJunoKnowledgeItemStateFastEntry");
static_assert(offsetof(FJunoKnowledgeItemStateFastEntry, DateFound) == 0x000010, "Member 'FJunoKnowledgeItemStateFastEntry::DateFound' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeItemStateFastEntry, ItemDefinition) == 0x000018, "Member 'FJunoKnowledgeItemStateFastEntry::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeItemStateFastEntry, InstigatorPlayerState) == 0x000020, "Member 'FJunoKnowledgeItemStateFastEntry::InstigatorPlayerState' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeItemStateFastEntry, ViewedPlayerIds) == 0x000028, "Member 'FJunoKnowledgeItemStateFastEntry::ViewedPlayerIds' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoItemViewStateChanged
// 0x0018 (0x0018 - 0x0000)
struct FJunoItemViewStateChanged final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsViewed;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoItemViewStateChanged) == 0x000008, "Wrong alignment on FJunoItemViewStateChanged");
static_assert(sizeof(FJunoItemViewStateChanged) == 0x000018, "Wrong size on FJunoItemViewStateChanged");
static_assert(offsetof(FJunoItemViewStateChanged, PlayerState) == 0x000000, "Member 'FJunoItemViewStateChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(FJunoItemViewStateChanged, ItemDefinition) == 0x000008, "Member 'FJunoItemViewStateChanged::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoItemViewStateChanged, bIsViewed) == 0x000010, "Member 'FJunoItemViewStateChanged::bIsViewed' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRecipeViewStateChanged
// 0x0010 (0x0010 - 0x0000)
struct FJunoRecipeViewStateChanged final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeName;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsViewed;                                         // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoRecipeViewStateChanged) == 0x000008, "Wrong alignment on FJunoRecipeViewStateChanged");
static_assert(sizeof(FJunoRecipeViewStateChanged) == 0x000010, "Wrong size on FJunoRecipeViewStateChanged");
static_assert(offsetof(FJunoRecipeViewStateChanged, PlayerState) == 0x000000, "Member 'FJunoRecipeViewStateChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(FJunoRecipeViewStateChanged, RecipeName) == 0x000008, "Member 'FJunoRecipeViewStateChanged::RecipeName' has a wrong offset!");
static_assert(offsetof(FJunoRecipeViewStateChanged, bIsViewed) == 0x00000C, "Member 'FJunoRecipeViewStateChanged::bIsViewed' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRecipeRevealedMessage
// 0x0010 (0x0010 - 0x0000)
struct FJunoRecipeRevealedMessage final
{
public:
	TArray<struct FJunoRecipeMessageData>         FoundRecipes;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRecipeRevealedMessage) == 0x000008, "Wrong alignment on FJunoRecipeRevealedMessage");
static_assert(sizeof(FJunoRecipeRevealedMessage) == 0x000010, "Wrong size on FJunoRecipeRevealedMessage");
static_assert(offsetof(FJunoRecipeRevealedMessage, FoundRecipes) == 0x000000, "Member 'FJunoRecipeRevealedMessage::FoundRecipes' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_RequestMapMarkerCustomization
// 0x0008 (0x0008 - 0x0000)
struct FJunoEvent_RequestMapMarkerCustomization final
{
public:
	class UJunoMapMarkerCustomizationInitData*    InitData;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_RequestMapMarkerCustomization) == 0x000008, "Wrong alignment on FJunoEvent_RequestMapMarkerCustomization");
static_assert(sizeof(FJunoEvent_RequestMapMarkerCustomization) == 0x000008, "Wrong size on FJunoEvent_RequestMapMarkerCustomization");
static_assert(offsetof(FJunoEvent_RequestMapMarkerCustomization, InitData) == 0x000000, "Member 'FJunoEvent_RequestMapMarkerCustomization::InitData' has a wrong offset!");

// ScriptStruct JunoGameNative.ServerSpawnedActorPair
// 0x000C (0x000C - 0x0000)
struct FServerSpawnedActorPair final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StableName;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSpawnedActorPair) == 0x000004, "Wrong alignment on FServerSpawnedActorPair");
static_assert(sizeof(FServerSpawnedActorPair) == 0x00000C, "Wrong size on FServerSpawnedActorPair");
static_assert(offsetof(FServerSpawnedActorPair, Actor) == 0x000000, "Member 'FServerSpawnedActorPair::Actor' has a wrong offset!");
static_assert(offsetof(FServerSpawnedActorPair, StableName) == 0x000008, "Member 'FServerSpawnedActorPair::StableName' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_OpenPlayerManagement
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_OpenPlayerManagement final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEvent_OpenPlayerManagement) == 0x000001, "Wrong alignment on FJunoEvent_OpenPlayerManagement");
static_assert(sizeof(FJunoEvent_OpenPlayerManagement) == 0x000001, "Wrong size on FJunoEvent_OpenPlayerManagement");

// ScriptStruct JunoGameNative.JunoPersistenceFeature
// 0x00B0 (0x00B0 - 0x0000)
struct FJunoPersistenceFeature final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    Class;                                             // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoPersistenceFeatureCheckoutState          CurrentCheckoutState;                              // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoPersistenceFeatureCheckoutState          TargetCheckoutState;                               // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CheckoutStateChangeRequestKey;                     // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4C];                                      // 0x001C(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ImplementationCustomStateObject;                   // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IJunoPersistenceFeatureData> Data;                                              // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    SourceImplementationDataClass;                     // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IJunoPersistenceFeatureData> DifferentImplementationData;                       // 0x0088(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x18];                                      // 0x0098(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoPersistenceFeature) == 0x000008, "Wrong alignment on FJunoPersistenceFeature");
static_assert(sizeof(FJunoPersistenceFeature) == 0x0000B0, "Wrong size on FJunoPersistenceFeature");
static_assert(offsetof(FJunoPersistenceFeature, Name) == 0x000000, "Member 'FJunoPersistenceFeature::Name' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceFeature, Class) == 0x000008, "Member 'FJunoPersistenceFeature::Class' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceFeature, CurrentCheckoutState) == 0x000010, "Member 'FJunoPersistenceFeature::CurrentCheckoutState' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceFeature, TargetCheckoutState) == 0x000014, "Member 'FJunoPersistenceFeature::TargetCheckoutState' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceFeature, CheckoutStateChangeRequestKey) == 0x000018, "Member 'FJunoPersistenceFeature::CheckoutStateChangeRequestKey' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceFeature, ImplementationCustomStateObject) == 0x000068, "Member 'FJunoPersistenceFeature::ImplementationCustomStateObject' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceFeature, Data) == 0x000070, "Member 'FJunoPersistenceFeature::Data' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceFeature, SourceImplementationDataClass) == 0x000080, "Member 'FJunoPersistenceFeature::SourceImplementationDataClass' has a wrong offset!");
static_assert(offsetof(FJunoPersistenceFeature, DifferentImplementationData) == 0x000088, "Member 'FJunoPersistenceFeature::DifferentImplementationData' has a wrong offset!");

// ScriptStruct JunoGameNative.ReplicatedCampData
// 0x0058 (0x0058 - 0x0000)
struct FReplicatedCampData final
{
public:
	struct FGuid                                  CampActorID;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        CampCenterAssetID;                                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CampBounds;                                        // 0x0018(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsSoftRemoved;                                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedCampData) == 0x000008, "Wrong alignment on FReplicatedCampData");
static_assert(sizeof(FReplicatedCampData) == 0x000058, "Wrong size on FReplicatedCampData");
static_assert(offsetof(FReplicatedCampData, CampActorID) == 0x000000, "Member 'FReplicatedCampData::CampActorID' has a wrong offset!");
static_assert(offsetof(FReplicatedCampData, CampCenterAssetID) == 0x000010, "Member 'FReplicatedCampData::CampCenterAssetID' has a wrong offset!");
static_assert(offsetof(FReplicatedCampData, CampBounds) == 0x000018, "Member 'FReplicatedCampData::CampBounds' has a wrong offset!");
static_assert(offsetof(FReplicatedCampData, bIsSoftRemoved) == 0x000050, "Member 'FReplicatedCampData::bIsSoftRemoved' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCampManagementPerk
// 0x0060 (0x0068 - 0x0008)
struct FJunoCampManagementPerk : public FTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0038(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    GEsToApply;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoCampManagementPerk) == 0x000008, "Wrong alignment on FJunoCampManagementPerk");
static_assert(sizeof(FJunoCampManagementPerk) == 0x000068, "Wrong size on FJunoCampManagementPerk");
static_assert(offsetof(FJunoCampManagementPerk, Title) == 0x000008, "Member 'FJunoCampManagementPerk::Title' has a wrong offset!");
static_assert(offsetof(FJunoCampManagementPerk, Description) == 0x000020, "Member 'FJunoCampManagementPerk::Description' has a wrong offset!");
static_assert(offsetof(FJunoCampManagementPerk, GameplayTags) == 0x000038, "Member 'FJunoCampManagementPerk::GameplayTags' has a wrong offset!");
static_assert(offsetof(FJunoCampManagementPerk, GEsToApply) == 0x000058, "Member 'FJunoCampManagementPerk::GEsToApply' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCampManagementPlayerPerk
// 0x0018 (0x0080 - 0x0068)
struct FJunoCampManagementPlayerPerk final : public FJunoCampManagementPerk
{
public:
	struct FWorldConditionQueryDefinition         SelectionPreconditions;                            // 0x0068(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoCampManagementPlayerPerk) == 0x000008, "Wrong alignment on FJunoCampManagementPlayerPerk");
static_assert(sizeof(FJunoCampManagementPlayerPerk) == 0x000080, "Wrong size on FJunoCampManagementPlayerPerk");
static_assert(offsetof(FJunoCampManagementPlayerPerk, SelectionPreconditions) == 0x000068, "Member 'FJunoCampManagementPlayerPerk::SelectionPreconditions' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEnhancedInputActionToGameplayEvent
// 0x0010 (0x0010 - 0x0000)
struct FJunoEnhancedInputActionToGameplayEvent final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayEventTag;                                  // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEnhancedInputActionToGameplayEvent) == 0x000008, "Wrong alignment on FJunoEnhancedInputActionToGameplayEvent");
static_assert(sizeof(FJunoEnhancedInputActionToGameplayEvent) == 0x000010, "Wrong size on FJunoEnhancedInputActionToGameplayEvent");
static_assert(offsetof(FJunoEnhancedInputActionToGameplayEvent, InputAction) == 0x000000, "Member 'FJunoEnhancedInputActionToGameplayEvent::InputAction' has a wrong offset!");
static_assert(offsetof(FJunoEnhancedInputActionToGameplayEvent, GameplayEventTag) == 0x000008, "Member 'FJunoEnhancedInputActionToGameplayEvent::GameplayEventTag' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoCampManagementNPCPerk
// 0x0000 (0x0068 - 0x0068)
struct FJunoCampManagementNPCPerk final : public FJunoCampManagementPerk
{
};
static_assert(alignof(FJunoCampManagementNPCPerk) == 0x000008, "Wrong alignment on FJunoCampManagementNPCPerk");
static_assert(sizeof(FJunoCampManagementNPCPerk) == 0x000068, "Wrong size on FJunoCampManagementNPCPerk");

// ScriptStruct JunoGameNative.JunoCampManagementNPCPerkPerBiome
// 0x0000 (0x0068 - 0x0068)
struct FJunoCampManagementNPCPerkPerBiome final : public FJunoCampManagementPerk
{
};
static_assert(alignof(FJunoCampManagementNPCPerkPerBiome) == 0x000008, "Wrong alignment on FJunoCampManagementNPCPerkPerBiome");
static_assert(sizeof(FJunoCampManagementNPCPerkPerBiome) == 0x000068, "Wrong size on FJunoCampManagementNPCPerkPerBiome");

// ScriptStruct JunoGameNative.JunoBuildingSnapEntry
// 0x0100 (0x0100 - 0x0000)
struct FJunoBuildingSnapEntry final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ToActor;                                           // 0x0030(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviewOffset;                                     // 0x0090(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ConnectableTags;                                   // 0x00A8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FBox                                   TargetingArea;                                     // 0x00C8(0x0038)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingSnapEntry) == 0x000010, "Wrong alignment on FJunoBuildingSnapEntry");
static_assert(sizeof(FJunoBuildingSnapEntry) == 0x000100, "Wrong size on FJunoBuildingSnapEntry");
static_assert(offsetof(FJunoBuildingSnapEntry, Label) == 0x000000, "Member 'FJunoBuildingSnapEntry::Label' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntry, Tags) == 0x000008, "Member 'FJunoBuildingSnapEntry::Tags' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntry, ToActor) == 0x000030, "Member 'FJunoBuildingSnapEntry::ToActor' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntry, PreviewOffset) == 0x000090, "Member 'FJunoBuildingSnapEntry::PreviewOffset' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntry, ConnectableTags) == 0x0000A8, "Member 'FJunoBuildingSnapEntry::ConnectableTags' has a wrong offset!");
static_assert(offsetof(FJunoBuildingSnapEntry, TargetingArea) == 0x0000C8, "Member 'FJunoBuildingSnapEntry::TargetingArea' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoStudGunSelected
// 0x0001 (0x0001 - 0x0000)
struct FJunoStudGunSelected final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoStudGunSelected) == 0x000001, "Wrong alignment on FJunoStudGunSelected");
static_assert(sizeof(FJunoStudGunSelected) == 0x000001, "Wrong size on FJunoStudGunSelected");

// ScriptStruct JunoGameNative.JunoStudGunAttachModeEntered
// 0x0001 (0x0001 - 0x0000)
struct FJunoStudGunAttachModeEntered final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoStudGunAttachModeEntered) == 0x000001, "Wrong alignment on FJunoStudGunAttachModeEntered");
static_assert(sizeof(FJunoStudGunAttachModeEntered) == 0x000001, "Wrong size on FJunoStudGunAttachModeEntered");

// ScriptStruct JunoGameNative.JunoStudGunAttachModeExited
// 0x0001 (0x0001 - 0x0000)
struct FJunoStudGunAttachModeExited final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoStudGunAttachModeExited) == 0x000001, "Wrong alignment on FJunoStudGunAttachModeExited");
static_assert(sizeof(FJunoStudGunAttachModeExited) == 0x000001, "Wrong size on FJunoStudGunAttachModeExited");

// ScriptStruct JunoGameNative.JunoStudGunUnselected
// 0x0001 (0x0001 - 0x0000)
struct FJunoStudGunUnselected final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoStudGunUnselected) == 0x000001, "Wrong alignment on FJunoStudGunUnselected");
static_assert(sizeof(FJunoStudGunUnselected) == 0x000001, "Wrong size on FJunoStudGunUnselected");

// ScriptStruct JunoGameNative.JunoBuildInstructionsDisplayData
// 0x0080 (0x0080 - 0x0000)
struct FJunoBuildInstructionsDisplayData final
{
public:
	EFortItemType                                 ItemType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemTypeNameOverride;                              // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   QuantityDisplayName;                               // 0x0038(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ShortDescription;                                  // 0x0050(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0068(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildInstructionsDisplayData) == 0x000008, "Wrong alignment on FJunoBuildInstructionsDisplayData");
static_assert(sizeof(FJunoBuildInstructionsDisplayData) == 0x000080, "Wrong size on FJunoBuildInstructionsDisplayData");
static_assert(offsetof(FJunoBuildInstructionsDisplayData, ItemType) == 0x000000, "Member 'FJunoBuildInstructionsDisplayData::ItemType' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsDisplayData, ItemTypeNameOverride) == 0x000008, "Member 'FJunoBuildInstructionsDisplayData::ItemTypeNameOverride' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsDisplayData, DisplayName) == 0x000020, "Member 'FJunoBuildInstructionsDisplayData::DisplayName' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsDisplayData, QuantityDisplayName) == 0x000038, "Member 'FJunoBuildInstructionsDisplayData::QuantityDisplayName' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsDisplayData, ShortDescription) == 0x000050, "Member 'FJunoBuildInstructionsDisplayData::ShortDescription' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsDisplayData, Description) == 0x000068, "Member 'FJunoBuildInstructionsDisplayData::Description' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoAwesomeThresholdMapping
// 0x0090 (0x0090 - 0x0000)
struct FJunoAwesomeThresholdMapping final
{
public:
	TArray<class UJunoActionConfig*>              ThresholdActionConfigs;                            // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AwesomeLevelThreshold;                             // 0x0010(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AwesomeLevelRangeMinThreshold;                     // 0x0038(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AwesomeLevelRangeMaxThreshold;                     // 0x0060(0x0028)(Edit, NativeAccessSpecifierPublic)
	EJunoAwesomeThresholdTestMode                 ThresholdTestMode;                                 // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAwesomeThresholdMapping) == 0x000008, "Wrong alignment on FJunoAwesomeThresholdMapping");
static_assert(sizeof(FJunoAwesomeThresholdMapping) == 0x000090, "Wrong size on FJunoAwesomeThresholdMapping");
static_assert(offsetof(FJunoAwesomeThresholdMapping, ThresholdActionConfigs) == 0x000000, "Member 'FJunoAwesomeThresholdMapping::ThresholdActionConfigs' has a wrong offset!");
static_assert(offsetof(FJunoAwesomeThresholdMapping, AwesomeLevelThreshold) == 0x000010, "Member 'FJunoAwesomeThresholdMapping::AwesomeLevelThreshold' has a wrong offset!");
static_assert(offsetof(FJunoAwesomeThresholdMapping, AwesomeLevelRangeMinThreshold) == 0x000038, "Member 'FJunoAwesomeThresholdMapping::AwesomeLevelRangeMinThreshold' has a wrong offset!");
static_assert(offsetof(FJunoAwesomeThresholdMapping, AwesomeLevelRangeMaxThreshold) == 0x000060, "Member 'FJunoAwesomeThresholdMapping::AwesomeLevelRangeMaxThreshold' has a wrong offset!");
static_assert(offsetof(FJunoAwesomeThresholdMapping, ThresholdTestMode) == 0x000088, "Member 'FJunoAwesomeThresholdMapping::ThresholdTestMode' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoProcessAwesomenessInteractionStateTreeTaskInstanceData
// 0x0018 (0x0018 - 0x0000)
struct FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InteractionTypeTag;                                // 0x0010(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData");
static_assert(sizeof(FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData) == 0x000018, "Wrong size on FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData");
static_assert(offsetof(FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData, Actor) == 0x000000, "Member 'FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData::Actor' has a wrong offset!");
static_assert(offsetof(FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData, TargetActor) == 0x000008, "Member 'FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData::TargetActor' has a wrong offset!");
static_assert(offsetof(FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData, InteractionTypeTag) == 0x000010, "Member 'FJunoProcessAwesomenessInteractionStateTreeTaskInstanceData::InteractionTypeTag' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRecipeUnlockType
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FJunoRecipeUnlockType
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoRecipeUnlockType) == 0x000008, "Wrong alignment on FJunoRecipeUnlockType");
static_assert(sizeof(FJunoRecipeUnlockType) == 0x000008, "Wrong size on FJunoRecipeUnlockType");

// ScriptStruct JunoGameNative.JunoRecipeUnlockType_BuildInstructions
// 0x0010 (0x0018 - 0x0008)
struct FJunoRecipeUnlockType_BuildInstructions final : public FJunoRecipeUnlockType
{
public:
	TArray<TSoftObjectPtr<class UJunoBuildInstructionsItemDefinition>> BuildInstructions;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRecipeUnlockType_BuildInstructions) == 0x000008, "Wrong alignment on FJunoRecipeUnlockType_BuildInstructions");
static_assert(sizeof(FJunoRecipeUnlockType_BuildInstructions) == 0x000018, "Wrong size on FJunoRecipeUnlockType_BuildInstructions");
static_assert(offsetof(FJunoRecipeUnlockType_BuildInstructions, BuildInstructions) == 0x000008, "Member 'FJunoRecipeUnlockType_BuildInstructions::BuildInstructions' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_TransitionUIState
// 0x0001 (0x0001 - 0x0000)
struct FJunoEvent_TransitionUIState final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_TransitionUIState) == 0x000001, "Wrong alignment on FJunoEvent_TransitionUIState");
static_assert(sizeof(FJunoEvent_TransitionUIState) == 0x000001, "Wrong size on FJunoEvent_TransitionUIState");
static_assert(offsetof(FJunoEvent_TransitionUIState, bEnabled) == 0x000000, "Member 'FJunoEvent_TransitionUIState::bEnabled' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRecipeUnlockType_CraftingRowNames
// 0x0010 (0x0018 - 0x0008)
struct FJunoRecipeUnlockType_CraftingRowNames final : public FJunoRecipeUnlockType
{
public:
	TArray<class FName>                           CraftingRowNames;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRecipeUnlockType_CraftingRowNames) == 0x000008, "Wrong alignment on FJunoRecipeUnlockType_CraftingRowNames");
static_assert(sizeof(FJunoRecipeUnlockType_CraftingRowNames) == 0x000018, "Wrong size on FJunoRecipeUnlockType_CraftingRowNames");
static_assert(offsetof(FJunoRecipeUnlockType_CraftingRowNames, CraftingRowNames) == 0x000008, "Member 'FJunoRecipeUnlockType_CraftingRowNames::CraftingRowNames' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRecipeUnlockType_KnowledgeBundle
// 0x0008 (0x0010 - 0x0008)
struct FJunoRecipeUnlockType_KnowledgeBundle final : public FJunoRecipeUnlockType
{
public:
	class UJunoKnowledgeBundle*                   KnowledgeBundle;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRecipeUnlockType_KnowledgeBundle) == 0x000008, "Wrong alignment on FJunoRecipeUnlockType_KnowledgeBundle");
static_assert(sizeof(FJunoRecipeUnlockType_KnowledgeBundle) == 0x000010, "Wrong size on FJunoRecipeUnlockType_KnowledgeBundle");
static_assert(offsetof(FJunoRecipeUnlockType_KnowledgeBundle, KnowledgeBundle) == 0x000008, "Member 'FJunoRecipeUnlockType_KnowledgeBundle::KnowledgeBundle' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEventReaction_RecipeKnowledgeState
// 0x0018 (0x0020 - 0x0008)
struct FJunoEventReaction_RecipeKnowledgeState final : public FEventReactionBase
{
public:
	TArray<struct FInstancedStruct>               RecipeUnlockTypes;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EJunoKnowledgeState                           NewState;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEventReaction_RecipeKnowledgeState) == 0x000008, "Wrong alignment on FJunoEventReaction_RecipeKnowledgeState");
static_assert(sizeof(FJunoEventReaction_RecipeKnowledgeState) == 0x000020, "Wrong size on FJunoEventReaction_RecipeKnowledgeState");
static_assert(offsetof(FJunoEventReaction_RecipeKnowledgeState, RecipeUnlockTypes) == 0x000008, "Member 'FJunoEventReaction_RecipeKnowledgeState::RecipeUnlockTypes' has a wrong offset!");
static_assert(offsetof(FJunoEventReaction_RecipeKnowledgeState, NewState) == 0x000018, "Member 'FJunoEventReaction_RecipeKnowledgeState::NewState' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoVerbFilter_AwesomeLevelIncreased
// 0x0090 (0x0130 - 0x00A0)
struct FJunoVerbFilter_AwesomeLevelIncreased final : public FObjectiveFilter
{
public:
	struct FObjectiveSubjectTags_Progressible     SourceActor;                                       // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bUseNewLevelRequirement;                           // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Range                            RequiredNewLevel;                                  // 0x00F4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePrevLevelRequirement;                          // 0x0104(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Range                            RequiredPrevLevel;                                 // 0x0108(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRemainingPointsLevelRequirement;               // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Range                            RequiredRemainingPoints;                           // 0x011C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoAwesomeLevelIncrementType                IncrementBy;                                       // 0x012C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoVerbFilter_AwesomeLevelIncreased) == 0x000008, "Wrong alignment on FJunoVerbFilter_AwesomeLevelIncreased");
static_assert(sizeof(FJunoVerbFilter_AwesomeLevelIncreased) == 0x000130, "Wrong size on FJunoVerbFilter_AwesomeLevelIncreased");
static_assert(offsetof(FJunoVerbFilter_AwesomeLevelIncreased, SourceActor) == 0x0000A0, "Member 'FJunoVerbFilter_AwesomeLevelIncreased::SourceActor' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_AwesomeLevelIncreased, bUseNewLevelRequirement) == 0x0000F0, "Member 'FJunoVerbFilter_AwesomeLevelIncreased::bUseNewLevelRequirement' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_AwesomeLevelIncreased, RequiredNewLevel) == 0x0000F4, "Member 'FJunoVerbFilter_AwesomeLevelIncreased::RequiredNewLevel' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_AwesomeLevelIncreased, bUsePrevLevelRequirement) == 0x000104, "Member 'FJunoVerbFilter_AwesomeLevelIncreased::bUsePrevLevelRequirement' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_AwesomeLevelIncreased, RequiredPrevLevel) == 0x000108, "Member 'FJunoVerbFilter_AwesomeLevelIncreased::RequiredPrevLevel' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_AwesomeLevelIncreased, bUseRemainingPointsLevelRequirement) == 0x000118, "Member 'FJunoVerbFilter_AwesomeLevelIncreased::bUseRemainingPointsLevelRequirement' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_AwesomeLevelIncreased, RequiredRemainingPoints) == 0x00011C, "Member 'FJunoVerbFilter_AwesomeLevelIncreased::RequiredRemainingPoints' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_AwesomeLevelIncreased, IncrementBy) == 0x00012C, "Member 'FJunoVerbFilter_AwesomeLevelIncreased::IncrementBy' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoVerbFilter_GuidedBuildStageCompleted
// 0x0050 (0x00F0 - 0x00A0)
struct FJunoVerbFilter_GuidedBuildStageCompleted final : public FObjectiveFilter
{
public:
	struct FObjectiveSubjectTags                  GuidedBuilding;                                    // 0x00A0(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FJunoStageKey                          StageKey;                                          // 0x00E8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoVerbFilter_GuidedBuildStageCompleted) == 0x000008, "Wrong alignment on FJunoVerbFilter_GuidedBuildStageCompleted");
static_assert(sizeof(FJunoVerbFilter_GuidedBuildStageCompleted) == 0x0000F0, "Wrong size on FJunoVerbFilter_GuidedBuildStageCompleted");
static_assert(offsetof(FJunoVerbFilter_GuidedBuildStageCompleted, GuidedBuilding) == 0x0000A0, "Member 'FJunoVerbFilter_GuidedBuildStageCompleted::GuidedBuilding' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_GuidedBuildStageCompleted, StageKey) == 0x0000E8, "Member 'FJunoVerbFilter_GuidedBuildStageCompleted::StageKey' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoVerbFilter_TemperatureUpdated
// 0x0090 (0x0130 - 0x00A0)
struct FJunoVerbFilter_TemperatureUpdated final : public FObjectiveFilter
{
public:
	struct FObjectiveSubjectTags                  PreviousTemperature;                               // 0x00A0(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FObjectiveSubjectTags                  NewTemperature;                                    // 0x00E8(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoVerbFilter_TemperatureUpdated) == 0x000008, "Wrong alignment on FJunoVerbFilter_TemperatureUpdated");
static_assert(sizeof(FJunoVerbFilter_TemperatureUpdated) == 0x000130, "Wrong size on FJunoVerbFilter_TemperatureUpdated");
static_assert(offsetof(FJunoVerbFilter_TemperatureUpdated, PreviousTemperature) == 0x0000A0, "Member 'FJunoVerbFilter_TemperatureUpdated::PreviousTemperature' has a wrong offset!");
static_assert(offsetof(FJunoVerbFilter_TemperatureUpdated, NewTemperature) == 0x0000E8, "Member 'FJunoVerbFilter_TemperatureUpdated::NewTemperature' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoMinifigLayeringMask
// 0x00A0 (0x00A0 - 0x0000)
struct FJunoMinifigLayeringMask final
{
public:
	struct FJunoMinifigLayeringParameters         head;                                              // 0x0000(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoMinifigLayeringParameters         Torso;                                             // 0x0014(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoMinifigLayeringParameters         ArmL;                                              // 0x0028(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoMinifigLayeringParameters         ArmR;                                              // 0x003C(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoMinifigLayeringParameters         HandL;                                             // 0x0050(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoMinifigLayeringParameters         HandR;                                             // 0x0064(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoMinifigLayeringParameters         pelvis;                                            // 0x0078(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FJunoMinifigLayeringParameters         Legs;                                              // 0x008C(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoMinifigLayeringMask) == 0x000004, "Wrong alignment on FJunoMinifigLayeringMask");
static_assert(sizeof(FJunoMinifigLayeringMask) == 0x0000A0, "Wrong size on FJunoMinifigLayeringMask");
static_assert(offsetof(FJunoMinifigLayeringMask, head) == 0x000000, "Member 'FJunoMinifigLayeringMask::head' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringMask, Torso) == 0x000014, "Member 'FJunoMinifigLayeringMask::Torso' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringMask, ArmL) == 0x000028, "Member 'FJunoMinifigLayeringMask::ArmL' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringMask, ArmR) == 0x00003C, "Member 'FJunoMinifigLayeringMask::ArmR' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringMask, HandL) == 0x000050, "Member 'FJunoMinifigLayeringMask::HandL' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringMask, HandR) == 0x000064, "Member 'FJunoMinifigLayeringMask::HandR' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringMask, pelvis) == 0x000078, "Member 'FJunoMinifigLayeringMask::pelvis' has a wrong offset!");
static_assert(offsetof(FJunoMinifigLayeringMask, Legs) == 0x00008C, "Member 'FJunoMinifigLayeringMask::Legs' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoReplicatedCharacterData
// 0x0028 (0x0028 - 0x0000)
struct FJunoReplicatedCharacterData final
{
public:
	int32                                         ForceRepNumber;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoBedAssignmentProcessingState             ProcessingState;                                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJunoBedAssignmentCharacterInfo> AssignedCharacterInfo;                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               PlayerNetIds;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoReplicatedCharacterData) == 0x000008, "Wrong alignment on FJunoReplicatedCharacterData");
static_assert(sizeof(FJunoReplicatedCharacterData) == 0x000028, "Wrong size on FJunoReplicatedCharacterData");
static_assert(offsetof(FJunoReplicatedCharacterData, ForceRepNumber) == 0x000000, "Member 'FJunoReplicatedCharacterData::ForceRepNumber' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedCharacterData, ProcessingState) == 0x000004, "Member 'FJunoReplicatedCharacterData::ProcessingState' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedCharacterData, AssignedCharacterInfo) == 0x000008, "Member 'FJunoReplicatedCharacterData::AssignedCharacterInfo' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedCharacterData, PlayerNetIds) == 0x000018, "Member 'FJunoReplicatedCharacterData::PlayerNetIds' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingHitData
// 0x0010 (0x0010 - 0x0000)
struct FJunoBuildingHitData final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           HealthRegenHandle;                                 // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingHitData) == 0x000008, "Wrong alignment on FJunoBuildingHitData");
static_assert(sizeof(FJunoBuildingHitData) == 0x000010, "Wrong size on FJunoBuildingHitData");
static_assert(offsetof(FJunoBuildingHitData, BuildingActor) == 0x000000, "Member 'FJunoBuildingHitData::BuildingActor' has a wrong offset!");
static_assert(offsetof(FJunoBuildingHitData, HealthRegenHandle) == 0x000008, "Member 'FJunoBuildingHitData::HealthRegenHandle' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoReplicatedWorldMetadata
// 0x00E0 (0x00E0 - 0x0000)
struct FJunoReplicatedWorldMetadata final
{
public:
	struct FJunoWorldMetadata                     MetaData;                                          // 0x0000(0x0088)(NativeAccessSpecifierPublic)
	class FString                                 OwnerId;                                           // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerName;                                         // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Keyholders;                                        // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Occupants;                                         // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        WorldOwnerGuestReservationExpiration;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastPlayed;                                        // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoReplicatedWorldMetadata) == 0x000008, "Wrong alignment on FJunoReplicatedWorldMetadata");
static_assert(sizeof(FJunoReplicatedWorldMetadata) == 0x0000E0, "Wrong size on FJunoReplicatedWorldMetadata");
static_assert(offsetof(FJunoReplicatedWorldMetadata, MetaData) == 0x000000, "Member 'FJunoReplicatedWorldMetadata::MetaData' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedWorldMetadata, OwnerId) == 0x000088, "Member 'FJunoReplicatedWorldMetadata::OwnerId' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedWorldMetadata, OwnerName) == 0x000098, "Member 'FJunoReplicatedWorldMetadata::OwnerName' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedWorldMetadata, Keyholders) == 0x0000A8, "Member 'FJunoReplicatedWorldMetadata::Keyholders' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedWorldMetadata, Occupants) == 0x0000B8, "Member 'FJunoReplicatedWorldMetadata::Occupants' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedWorldMetadata, WorldOwnerGuestReservationExpiration) == 0x0000C8, "Member 'FJunoReplicatedWorldMetadata::WorldOwnerGuestReservationExpiration' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedWorldMetadata, CreatedAt) == 0x0000D0, "Member 'FJunoReplicatedWorldMetadata::CreatedAt' has a wrong offset!");
static_assert(offsetof(FJunoReplicatedWorldMetadata, LastPlayed) == 0x0000D8, "Member 'FJunoReplicatedWorldMetadata::LastPlayed' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoItemSlotPrediction
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FJunoItemSlotPrediction final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoItemSlotPrediction) == 0x000008, "Wrong alignment on FJunoItemSlotPrediction");
static_assert(sizeof(FJunoItemSlotPrediction) == 0x000030, "Wrong size on FJunoItemSlotPrediction");

// ScriptStruct JunoGameNative.JunoBuilderToolSupportActorComponentPair
// 0x0010 (0x0010 - 0x0000)
struct FJunoBuilderToolSupportActorComponentPair final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuilderToolSupportActorComponentPair) == 0x000008, "Wrong alignment on FJunoBuilderToolSupportActorComponentPair");
static_assert(sizeof(FJunoBuilderToolSupportActorComponentPair) == 0x000010, "Wrong size on FJunoBuilderToolSupportActorComponentPair");
static_assert(offsetof(FJunoBuilderToolSupportActorComponentPair, Actor) == 0x000000, "Member 'FJunoBuilderToolSupportActorComponentPair::Actor' has a wrong offset!");
static_assert(offsetof(FJunoBuilderToolSupportActorComponentPair, Component) == 0x000008, "Member 'FJunoBuilderToolSupportActorComponentPair::Component' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuilderToolTimedActors
// 0x0018 (0x0018 - 0x0000)
struct FJunoBuilderToolTimedActors final
{
public:
	TArray<TWeakObjectPtr<class AActor>>          Actors;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuilderToolTimedActors) == 0x000008, "Wrong alignment on FJunoBuilderToolTimedActors");
static_assert(sizeof(FJunoBuilderToolTimedActors) == 0x000018, "Wrong size on FJunoBuilderToolTimedActors");
static_assert(offsetof(FJunoBuilderToolTimedActors, Actors) == 0x000000, "Member 'FJunoBuilderToolTimedActors::Actors' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingConnectivityContext
// 0x02A0 (0x02A0 - 0x0000)
struct FJunoBuildingConnectivityContext final
{
public:
	struct FJunoBuildingConnectionPointsResult    PreviewConnectionPoints;                           // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                TargetTraceToActorLocation;                        // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x18];                                      // 0x0068(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJunoBuildingConnectionPointsResult    TargetConnectionPoints;                            // 0x0080(0x0050)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FJunoBuildingConnection                Connection;                                        // 0x00D0(0x01D0)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingConnectivityContext) == 0x000010, "Wrong alignment on FJunoBuildingConnectivityContext");
static_assert(sizeof(FJunoBuildingConnectivityContext) == 0x0002A0, "Wrong size on FJunoBuildingConnectivityContext");
static_assert(offsetof(FJunoBuildingConnectivityContext, PreviewConnectionPoints) == 0x000000, "Member 'FJunoBuildingConnectivityContext::PreviewConnectionPoints' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectivityContext, TargetTraceToActorLocation) == 0x000050, "Member 'FJunoBuildingConnectivityContext::TargetTraceToActorLocation' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectivityContext, TargetConnectionPoints) == 0x000080, "Member 'FJunoBuildingConnectivityContext::TargetConnectionPoints' has a wrong offset!");
static_assert(offsetof(FJunoBuildingConnectivityContext, Connection) == 0x0000D0, "Member 'FJunoBuildingConnectivityContext::Connection' has a wrong offset!");

// ScriptStruct JunoGameNative.OnPlacementAction
// 0x000C (0x000C - 0x0000)
struct FOnPlacementAction final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnPlacementAction                            Action;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnPlacementAction) == 0x000004, "Wrong alignment on FOnPlacementAction");
static_assert(sizeof(FOnPlacementAction) == 0x00000C, "Wrong size on FOnPlacementAction");
static_assert(offsetof(FOnPlacementAction, Actor) == 0x000000, "Member 'FOnPlacementAction::Actor' has a wrong offset!");
static_assert(offsetof(FOnPlacementAction, Action) == 0x000008, "Member 'FOnPlacementAction::Action' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingBehaviorGridLimits
// 0x0010 (0x0010 - 0x0000)
struct FJunoBuildingBehaviorGridLimits final
{
public:
	struct FIntPoint                              Min;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Max;                                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildingBehaviorGridLimits) == 0x000004, "Wrong alignment on FJunoBuildingBehaviorGridLimits");
static_assert(sizeof(FJunoBuildingBehaviorGridLimits) == 0x000010, "Wrong size on FJunoBuildingBehaviorGridLimits");
static_assert(offsetof(FJunoBuildingBehaviorGridLimits, Min) == 0x000000, "Member 'FJunoBuildingBehaviorGridLimits::Min' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorGridLimits, Max) == 0x000008, "Member 'FJunoBuildingBehaviorGridLimits::Max' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingBehaviorOverrides
// 0x0260 (0x0260 - 0x0000)
struct FJunoBuildingBehaviorOverrides final
{
public:
	struct FJunoBuildingBehaviorInteractionRow    ConfigData;                                        // 0x0000(0x01E8)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                GridSize;                                          // 0x01E8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0200(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PivotOffset;                                       // 0x0218(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GridSnapOffset;                                    // 0x0230(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJunoBuildingBehaviorGridLimits        GridOffsetLimits;                                  // 0x0248(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDistance;                                       // 0x0258(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMinDistanceIncludesBounds;                        // 0x025C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingBehaviorOverrides) == 0x000008, "Wrong alignment on FJunoBuildingBehaviorOverrides");
static_assert(sizeof(FJunoBuildingBehaviorOverrides) == 0x000260, "Wrong size on FJunoBuildingBehaviorOverrides");
static_assert(offsetof(FJunoBuildingBehaviorOverrides, ConfigData) == 0x000000, "Member 'FJunoBuildingBehaviorOverrides::ConfigData' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorOverrides, GridSize) == 0x0001E8, "Member 'FJunoBuildingBehaviorOverrides::GridSize' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorOverrides, RotationOffset) == 0x000200, "Member 'FJunoBuildingBehaviorOverrides::RotationOffset' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorOverrides, PivotOffset) == 0x000218, "Member 'FJunoBuildingBehaviorOverrides::PivotOffset' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorOverrides, GridSnapOffset) == 0x000230, "Member 'FJunoBuildingBehaviorOverrides::GridSnapOffset' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorOverrides, GridOffsetLimits) == 0x000248, "Member 'FJunoBuildingBehaviorOverrides::GridOffsetLimits' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorOverrides, MinDistance) == 0x000258, "Member 'FJunoBuildingBehaviorOverrides::MinDistance' has a wrong offset!");
static_assert(offsetof(FJunoBuildingBehaviorOverrides, bMinDistanceIncludesBounds) == 0x00025C, "Member 'FJunoBuildingBehaviorOverrides::bMinDistanceIncludesBounds' has a wrong offset!");

// ScriptStruct JunoGameNative.GuidedBuildingCachedEditorData
// 0x00C8 (0x00C8 - 0x0000)
struct FGuidedBuildingCachedEditorData final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AJunoGuidedBuildingSettings*            SettingsActor;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoBuildingEditorActorEntry>  ActorEntries;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 BaseName;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuidedBuildingBlueprintName;                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuidedBuildingPreviewMeshName;                     // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuidedBuildingPluginName;                          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuidedBuildingBlueprintPath;                       // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuidedBuildingPreviewMeshPath;                     // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OldBPPath;                                         // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaylistName;                                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PluginsToActivate;                                 // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ParentClass;                                       // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    NewBPClass;                                        // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoStageKey>                  AllStageKeys;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGuidedBuildingCachedEditorData) == 0x000008, "Wrong alignment on FGuidedBuildingCachedEditorData");
static_assert(sizeof(FGuidedBuildingCachedEditorData) == 0x0000C8, "Wrong size on FGuidedBuildingCachedEditorData");
static_assert(offsetof(FGuidedBuildingCachedEditorData, World) == 0x000000, "Member 'FGuidedBuildingCachedEditorData::World' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, SettingsActor) == 0x000008, "Member 'FGuidedBuildingCachedEditorData::SettingsActor' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, ActorEntries) == 0x000010, "Member 'FGuidedBuildingCachedEditorData::ActorEntries' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, BaseName) == 0x000020, "Member 'FGuidedBuildingCachedEditorData::BaseName' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, GuidedBuildingBlueprintName) == 0x000030, "Member 'FGuidedBuildingCachedEditorData::GuidedBuildingBlueprintName' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, GuidedBuildingPreviewMeshName) == 0x000040, "Member 'FGuidedBuildingCachedEditorData::GuidedBuildingPreviewMeshName' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, GuidedBuildingPluginName) == 0x000050, "Member 'FGuidedBuildingCachedEditorData::GuidedBuildingPluginName' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, GuidedBuildingBlueprintPath) == 0x000060, "Member 'FGuidedBuildingCachedEditorData::GuidedBuildingBlueprintPath' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, GuidedBuildingPreviewMeshPath) == 0x000070, "Member 'FGuidedBuildingCachedEditorData::GuidedBuildingPreviewMeshPath' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, OldBPPath) == 0x000080, "Member 'FGuidedBuildingCachedEditorData::OldBPPath' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, PlaylistName) == 0x000090, "Member 'FGuidedBuildingCachedEditorData::PlaylistName' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, PluginsToActivate) == 0x000098, "Member 'FGuidedBuildingCachedEditorData::PluginsToActivate' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, ParentClass) == 0x0000A8, "Member 'FGuidedBuildingCachedEditorData::ParentClass' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, NewBPClass) == 0x0000B0, "Member 'FGuidedBuildingCachedEditorData::NewBPClass' has a wrong offset!");
static_assert(offsetof(FGuidedBuildingCachedEditorData, AllStageKeys) == 0x0000B8, "Member 'FGuidedBuildingCachedEditorData::AllStageKeys' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingData
// 0x0058 (0x0058 - 0x0000)
struct FJunoGuidedBuildingData final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Recipe;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FComponentReference>            ComponentReferences;                               // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            Components;                                        // 0x0038(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FJunoStageKey                          StageKey;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BuildingStateIndex;                                // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsInstantAutoComplete : 1;                        // 0x0054(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAutoComplete : 1;                               // 0x0054(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFoundation : 1;                                 // 0x0054(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceIndependentlySupported : 1;                  // 0x0054(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoGuidedBuildingData) == 0x000008, "Wrong alignment on FJunoGuidedBuildingData");
static_assert(sizeof(FJunoGuidedBuildingData) == 0x000058, "Wrong size on FJunoGuidedBuildingData");
static_assert(offsetof(FJunoGuidedBuildingData, ActorName) == 0x000000, "Member 'FJunoGuidedBuildingData::ActorName' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingData, Recipe) == 0x000004, "Member 'FJunoGuidedBuildingData::Recipe' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingData, ComponentReferences) == 0x000008, "Member 'FJunoGuidedBuildingData::ComponentReferences' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingData, ActorClass) == 0x000018, "Member 'FJunoGuidedBuildingData::ActorClass' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingData, Components) == 0x000038, "Member 'FJunoGuidedBuildingData::Components' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingData, StageKey) == 0x000048, "Member 'FJunoGuidedBuildingData::StageKey' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingData, BuildingStateIndex) == 0x000050, "Member 'FJunoGuidedBuildingData::BuildingStateIndex' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingStateArray
// 0x0018 (0x0120 - 0x0108)
struct FJunoGuidedBuildingStateArray final : public FFastArraySerializer
{
public:
	TArray<struct FJunoGuidedBuildingStateEntry>  Entries;                                           // 0x0108(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class AJunoGuidedBuildingActor*               Parent;                                            // 0x0118(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGuidedBuildingStateArray) == 0x000008, "Wrong alignment on FJunoGuidedBuildingStateArray");
static_assert(sizeof(FJunoGuidedBuildingStateArray) == 0x000120, "Wrong size on FJunoGuidedBuildingStateArray");
static_assert(offsetof(FJunoGuidedBuildingStateArray, Entries) == 0x000108, "Member 'FJunoGuidedBuildingStateArray::Entries' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingStateArray, Parent) == 0x000118, "Member 'FJunoGuidedBuildingStateArray::Parent' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildRemainingPartsInfo
// 0x000C (0x000C - 0x0000)
struct FJunoGuidedBuildRemainingPartsInfo final
{
public:
	class FName                                   Recipe;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Remaining;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGuidedBuildRemainingPartsInfo) == 0x000004, "Wrong alignment on FJunoGuidedBuildRemainingPartsInfo");
static_assert(sizeof(FJunoGuidedBuildRemainingPartsInfo) == 0x00000C, "Wrong size on FJunoGuidedBuildRemainingPartsInfo");
static_assert(offsetof(FJunoGuidedBuildRemainingPartsInfo, Recipe) == 0x000000, "Member 'FJunoGuidedBuildRemainingPartsInfo::Recipe' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildRemainingPartsInfo, Remaining) == 0x000004, "Member 'FJunoGuidedBuildRemainingPartsInfo::Remaining' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildRemainingPartsInfo, Total) == 0x000008, "Member 'FJunoGuidedBuildRemainingPartsInfo::Total' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingSetCompleteState
// 0x0010 (0x0010 - 0x0000)
struct FJunoGuidedBuildingSetCompleteState final
{
public:
	bool                                          bSetComplete;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  FinishingPlayer;                                   // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetUnfinished;                                    // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoGuidedBuildingSetCompleteState) == 0x000004, "Wrong alignment on FJunoGuidedBuildingSetCompleteState");
static_assert(sizeof(FJunoGuidedBuildingSetCompleteState) == 0x000010, "Wrong size on FJunoGuidedBuildingSetCompleteState");
static_assert(offsetof(FJunoGuidedBuildingSetCompleteState, bSetComplete) == 0x000000, "Member 'FJunoGuidedBuildingSetCompleteState::bSetComplete' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSetCompleteState, FinishingPlayer) == 0x000004, "Member 'FJunoGuidedBuildingSetCompleteState::FinishingPlayer' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingSetCompleteState, bSetUnfinished) == 0x00000C, "Member 'FJunoGuidedBuildingSetCompleteState::bSetUnfinished' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoGuidedBuildingBrushState
// 0x0018 (0x0018 - 0x0000)
struct FJunoGuidedBuildingBrushState final
{
public:
	bool                                          bIsGuidedBuildSelected;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            Comps;                                             // 0x0008(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoGuidedBuildingBrushState) == 0x000008, "Wrong alignment on FJunoGuidedBuildingBrushState");
static_assert(sizeof(FJunoGuidedBuildingBrushState) == 0x000018, "Wrong size on FJunoGuidedBuildingBrushState");
static_assert(offsetof(FJunoGuidedBuildingBrushState, bIsGuidedBuildSelected) == 0x000000, "Member 'FJunoGuidedBuildingBrushState::bIsGuidedBuildSelected' has a wrong offset!");
static_assert(offsetof(FJunoGuidedBuildingBrushState, Comps) == 0x000008, "Member 'FJunoGuidedBuildingBrushState::Comps' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildingPlacementPreview
// 0x00C0 (0x00C0 - 0x0000)
struct FJunoBuildingPlacementPreview final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMeshComponent*>                 MeshComponents;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FTransform                             ToWorld;                                           // 0x0020(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x0080(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoBuildingPlacementPreview) == 0x000010, "Wrong alignment on FJunoBuildingPlacementPreview");
static_assert(sizeof(FJunoBuildingPlacementPreview) == 0x0000C0, "Wrong size on FJunoBuildingPlacementPreview");
static_assert(offsetof(FJunoBuildingPlacementPreview, Guid) == 0x000000, "Member 'FJunoBuildingPlacementPreview::Guid' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPlacementPreview, MeshComponents) == 0x000010, "Member 'FJunoBuildingPlacementPreview::MeshComponents' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPlacementPreview, ToWorld) == 0x000020, "Member 'FJunoBuildingPlacementPreview::ToWorld' has a wrong offset!");
static_assert(offsetof(FJunoBuildingPlacementPreview, Bounds) == 0x000080, "Member 'FJunoBuildingPlacementPreview::Bounds' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildInstructionsPickupData
// 0x0100 (0x0100 - 0x0000)
struct FJunoBuildInstructionsPickupData final
{
public:
	TSoftObjectPtr<class UStaticMesh>             PickupStaticMesh;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           PickupSkeletalMesh;                                // 0x0020(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PickupEffectOverride;                              // 0x0040(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              PickupSound;                                       // 0x0060(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              PickupByNearbyPawnSound;                           // 0x0080(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              DropSound;                                         // 0x00A0(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              DroppedLoopSound;                                  // 0x00C0(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              LandedSound;                                       // 0x00E0(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildInstructionsPickupData) == 0x000008, "Wrong alignment on FJunoBuildInstructionsPickupData");
static_assert(sizeof(FJunoBuildInstructionsPickupData) == 0x000100, "Wrong size on FJunoBuildInstructionsPickupData");
static_assert(offsetof(FJunoBuildInstructionsPickupData, PickupStaticMesh) == 0x000000, "Member 'FJunoBuildInstructionsPickupData::PickupStaticMesh' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsPickupData, PickupSkeletalMesh) == 0x000020, "Member 'FJunoBuildInstructionsPickupData::PickupSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsPickupData, PickupEffectOverride) == 0x000040, "Member 'FJunoBuildInstructionsPickupData::PickupEffectOverride' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsPickupData, PickupSound) == 0x000060, "Member 'FJunoBuildInstructionsPickupData::PickupSound' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsPickupData, PickupByNearbyPawnSound) == 0x000080, "Member 'FJunoBuildInstructionsPickupData::PickupByNearbyPawnSound' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsPickupData, DropSound) == 0x0000A0, "Member 'FJunoBuildInstructionsPickupData::DropSound' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsPickupData, DroppedLoopSound) == 0x0000C0, "Member 'FJunoBuildInstructionsPickupData::DroppedLoopSound' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsPickupData, LandedSound) == 0x0000E0, "Member 'FJunoBuildInstructionsPickupData::LandedSound' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoBuildInstructionsInitializationParams
// 0x01F8 (0x01F8 - 0x0000)
struct FJunoBuildInstructionsInitializationParams final
{
public:
	struct FJunoBuildInstructionsDisplayData      Display;                                           // 0x0000(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0080(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJunoBuildInstructionsPickupData       Pickup;                                            // 0x00A0(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FJunoBuildInstructionsItemData         BuildInstructions;                                 // 0x01A0(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoBuildInstructionsInitializationParams) == 0x000008, "Wrong alignment on FJunoBuildInstructionsInitializationParams");
static_assert(sizeof(FJunoBuildInstructionsInitializationParams) == 0x0001F8, "Wrong size on FJunoBuildInstructionsInitializationParams");
static_assert(offsetof(FJunoBuildInstructionsInitializationParams, Display) == 0x000000, "Member 'FJunoBuildInstructionsInitializationParams::Display' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsInitializationParams, GameplayTags) == 0x000080, "Member 'FJunoBuildInstructionsInitializationParams::GameplayTags' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsInitializationParams, Pickup) == 0x0000A0, "Member 'FJunoBuildInstructionsInitializationParams::Pickup' has a wrong offset!");
static_assert(offsetof(FJunoBuildInstructionsInitializationParams, BuildInstructions) == 0x0001A0, "Member 'FJunoBuildInstructionsInitializationParams::BuildInstructions' has a wrong offset!");

// ScriptStruct JunoGameNative.ActorUpgradeInfo
// 0x00D0 (0x00D0 - 0x0000)
struct FActorUpgradeInfo final
{
public:
	class FString                                 FlowName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  ActorToUpgrade;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  CraftingObject;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AJunoPersistentPlayspace> Playspace;                                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecipeName;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJunoBuildInstructionsItemDefinition*   OldItemDef;                                        // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJunoBuildInstructionsItemDefinition*   ItemDef;                                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ActorTransform;                                    // 0x0040(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemEntry>                 ConsumedIngredients;                               // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x20];                                      // 0x00B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorUpgradeInfo) == 0x000010, "Wrong alignment on FActorUpgradeInfo");
static_assert(sizeof(FActorUpgradeInfo) == 0x0000D0, "Wrong size on FActorUpgradeInfo");
static_assert(offsetof(FActorUpgradeInfo, FlowName) == 0x000000, "Member 'FActorUpgradeInfo::FlowName' has a wrong offset!");
static_assert(offsetof(FActorUpgradeInfo, ActorToUpgrade) == 0x000010, "Member 'FActorUpgradeInfo::ActorToUpgrade' has a wrong offset!");
static_assert(offsetof(FActorUpgradeInfo, CraftingObject) == 0x000018, "Member 'FActorUpgradeInfo::CraftingObject' has a wrong offset!");
static_assert(offsetof(FActorUpgradeInfo, Playspace) == 0x000020, "Member 'FActorUpgradeInfo::Playspace' has a wrong offset!");
static_assert(offsetof(FActorUpgradeInfo, RecipeName) == 0x000028, "Member 'FActorUpgradeInfo::RecipeName' has a wrong offset!");
static_assert(offsetof(FActorUpgradeInfo, OldItemDef) == 0x000030, "Member 'FActorUpgradeInfo::OldItemDef' has a wrong offset!");
static_assert(offsetof(FActorUpgradeInfo, ItemDef) == 0x000038, "Member 'FActorUpgradeInfo::ItemDef' has a wrong offset!");
static_assert(offsetof(FActorUpgradeInfo, ActorTransform) == 0x000040, "Member 'FActorUpgradeInfo::ActorTransform' has a wrong offset!");
static_assert(offsetof(FActorUpgradeInfo, ConsumedIngredients) == 0x0000A0, "Member 'FActorUpgradeInfo::ConsumedIngredients' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgeRecipeStateFastArray
// 0x0018 (0x0120 - 0x0108)
struct FJunoKnowledgeRecipeStateFastArray final : public FFastArraySerializer
{
public:
	TArray<struct FJunoKnowledgeRecipeStateFastEntry> Entries;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UJunoKnowledgeComponent*                ParentComp;                                        // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoKnowledgeRecipeStateFastArray) == 0x000008, "Wrong alignment on FJunoKnowledgeRecipeStateFastArray");
static_assert(sizeof(FJunoKnowledgeRecipeStateFastArray) == 0x000120, "Wrong size on FJunoKnowledgeRecipeStateFastArray");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastArray, Entries) == 0x000108, "Member 'FJunoKnowledgeRecipeStateFastArray::Entries' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeRecipeStateFastArray, ParentComp) == 0x000118, "Member 'FJunoKnowledgeRecipeStateFastArray::ParentComp' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoKnowledgeItemStateFastArray
// 0x0018 (0x0120 - 0x0108)
struct FJunoKnowledgeItemStateFastArray final : public FFastArraySerializer
{
public:
	TArray<struct FJunoKnowledgeItemStateFastEntry> Entries;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UJunoKnowledgeComponent*                ParentComp;                                        // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoKnowledgeItemStateFastArray) == 0x000008, "Wrong alignment on FJunoKnowledgeItemStateFastArray");
static_assert(sizeof(FJunoKnowledgeItemStateFastArray) == 0x000120, "Wrong size on FJunoKnowledgeItemStateFastArray");
static_assert(offsetof(FJunoKnowledgeItemStateFastArray, Entries) == 0x000108, "Member 'FJunoKnowledgeItemStateFastArray::Entries' has a wrong offset!");
static_assert(offsetof(FJunoKnowledgeItemStateFastArray, ParentComp) == 0x000118, "Member 'FJunoKnowledgeItemStateFastArray::ParentComp' has a wrong offset!");

// ScriptStruct JunoGameNative.UniqueMarkerSettings
// 0x0020 (0x0020 - 0x0000)
struct FUniqueMarkerSettings final
{
public:
	struct FDataTableRowHandle                    OriginalSettings;                                  // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ReplacementSettings;                               // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUniqueMarkerSettings) == 0x000008, "Wrong alignment on FUniqueMarkerSettings");
static_assert(sizeof(FUniqueMarkerSettings) == 0x000020, "Wrong size on FUniqueMarkerSettings");
static_assert(offsetof(FUniqueMarkerSettings, OriginalSettings) == 0x000000, "Member 'FUniqueMarkerSettings::OriginalSettings' has a wrong offset!");
static_assert(offsetof(FUniqueMarkerSettings, ReplacementSettings) == 0x000010, "Member 'FUniqueMarkerSettings::ReplacementSettings' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoUpdateAction
// 0x00A0 (0x00A0 - 0x0000)
struct FJunoUpdateAction final
{
public:
	struct FActorInstanceRecord                   ActorInstanceRecord;                               // 0x0000(0x00A0)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoUpdateAction) == 0x000010, "Wrong alignment on FJunoUpdateAction");
static_assert(sizeof(FJunoUpdateAction) == 0x0000A0, "Wrong size on FJunoUpdateAction");
static_assert(offsetof(FJunoUpdateAction, ActorInstanceRecord) == 0x000000, "Member 'FJunoUpdateAction::ActorInstanceRecord' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoDeltasStorage_Index_Dss
// 0x0058 (0x0058 - 0x0000)
struct FJunoDeltasStorage_Index_Dss final
{
public:
	int32                                         WorldCompatibilityVersion;                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            PackageDeltaFiles;                                 // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoDeltasStorage_Index_Dss) == 0x000008, "Wrong alignment on FJunoDeltasStorage_Index_Dss");
static_assert(sizeof(FJunoDeltasStorage_Index_Dss) == 0x000058, "Wrong size on FJunoDeltasStorage_Index_Dss");
static_assert(offsetof(FJunoDeltasStorage_Index_Dss, WorldCompatibilityVersion) == 0x000000, "Member 'FJunoDeltasStorage_Index_Dss::WorldCompatibilityVersion' has a wrong offset!");
static_assert(offsetof(FJunoDeltasStorage_Index_Dss, PackageDeltaFiles) == 0x000008, "Member 'FJunoDeltasStorage_Index_Dss::PackageDeltaFiles' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoSingleClusterUnionSaveData
// 0x0060 (0x0060 - 0x0000)
struct FJunoSingleClusterUnionSaveData final
{
public:
	struct FTransform                             WorldTransform;                                    // 0x0000(0x0060)(SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoSingleClusterUnionSaveData) == 0x000010, "Wrong alignment on FJunoSingleClusterUnionSaveData");
static_assert(sizeof(FJunoSingleClusterUnionSaveData) == 0x000060, "Wrong size on FJunoSingleClusterUnionSaveData");
static_assert(offsetof(FJunoSingleClusterUnionSaveData, WorldTransform) == 0x000000, "Member 'FJunoSingleClusterUnionSaveData::WorldTransform' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoClusterUnionSaveData
// 0x0050 (0x0050 - 0x0000)
struct FJunoClusterUnionSaveData final
{
public:
	TMap<struct FGraphIslandHandle, struct FJunoSingleClusterUnionSaveData> PerClusterUnionData;                               // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoClusterUnionSaveData) == 0x000008, "Wrong alignment on FJunoClusterUnionSaveData");
static_assert(sizeof(FJunoClusterUnionSaveData) == 0x000050, "Wrong size on FJunoClusterUnionSaveData");
static_assert(offsetof(FJunoClusterUnionSaveData, PerClusterUnionData) == 0x000000, "Member 'FJunoClusterUnionSaveData::PerClusterUnionData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoClusterUnionPersistenceFeatureData_PersistentInfo
// 0x0050 (0x0050 - 0x0000)
struct FJunoClusterUnionPersistenceFeatureData_PersistentInfo final
{
public:
	struct FJunoClusterUnionSaveData              SaveData;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoClusterUnionPersistenceFeatureData_PersistentInfo) == 0x000008, "Wrong alignment on FJunoClusterUnionPersistenceFeatureData_PersistentInfo");
static_assert(sizeof(FJunoClusterUnionPersistenceFeatureData_PersistentInfo) == 0x000050, "Wrong size on FJunoClusterUnionPersistenceFeatureData_PersistentInfo");
static_assert(offsetof(FJunoClusterUnionPersistenceFeatureData_PersistentInfo, SaveData) == 0x000000, "Member 'FJunoClusterUnionPersistenceFeatureData_PersistentInfo::SaveData' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPhysicsToyPersistenceFeatureData_PersistentInfo
// 0x0050 (0x0050 - 0x0000)
struct FJunoPhysicsToyPersistenceFeatureData_PersistentInfo final
{
public:
	struct FJunoPhysicsToySaveData                Container;                                         // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPhysicsToyPersistenceFeatureData_PersistentInfo) == 0x000008, "Wrong alignment on FJunoPhysicsToyPersistenceFeatureData_PersistentInfo");
static_assert(sizeof(FJunoPhysicsToyPersistenceFeatureData_PersistentInfo) == 0x000050, "Wrong size on FJunoPhysicsToyPersistenceFeatureData_PersistentInfo");
static_assert(offsetof(FJunoPhysicsToyPersistenceFeatureData_PersistentInfo, Container) == 0x000000, "Member 'FJunoPhysicsToyPersistenceFeatureData_PersistentInfo::Container' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEvent_CheckPointRemoved
// 0x0010 (0x0010 - 0x0000)
struct FJunoEvent_CheckPointRemoved final
{
public:
	struct FGuid                                  CheckpointGUID;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoEvent_CheckPointRemoved) == 0x000004, "Wrong alignment on FJunoEvent_CheckPointRemoved");
static_assert(sizeof(FJunoEvent_CheckPointRemoved) == 0x000010, "Wrong size on FJunoEvent_CheckPointRemoved");
static_assert(offsetof(FJunoEvent_CheckPointRemoved, CheckpointGUID) == 0x000000, "Member 'FJunoEvent_CheckPointRemoved::CheckpointGUID' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoEmotionalStateData
// 0x0010 (0x0010 - 0x0000)
struct FJunoEmotionalStateData final
{
public:
	EJunoPawnEmotionalState                       EmotionalState;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmotionPercent;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmotionSetRate;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          ForceRepCounter;                                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoEmotionalStateData) == 0x000004, "Wrong alignment on FJunoEmotionalStateData");
static_assert(sizeof(FJunoEmotionalStateData) == 0x000010, "Wrong size on FJunoEmotionalStateData");
static_assert(offsetof(FJunoEmotionalStateData, EmotionalState) == 0x000000, "Member 'FJunoEmotionalStateData::EmotionalState' has a wrong offset!");
static_assert(offsetof(FJunoEmotionalStateData, EmotionPercent) == 0x000004, "Member 'FJunoEmotionalStateData::EmotionPercent' has a wrong offset!");
static_assert(offsetof(FJunoEmotionalStateData, EmotionSetRate) == 0x000008, "Member 'FJunoEmotionalStateData::EmotionSetRate' has a wrong offset!");
static_assert(offsetof(FJunoEmotionalStateData, ForceRepCounter) == 0x00000C, "Member 'FJunoEmotionalStateData::ForceRepCounter' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoPawnEmotionalStateMappingFromAwesomeLevel
// 0x000C (0x000C - 0x0000)
struct FJunoPawnEmotionalStateMappingFromAwesomeLevel final
{
public:
	EJunoPawnEmotionalState                       EmotionalState;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumericalTestValue;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoPawnEmotionalStateMappingTest            NumericalTestMode;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoPawnEmotionalStateMappingFromAwesomeLevel) == 0x000004, "Wrong alignment on FJunoPawnEmotionalStateMappingFromAwesomeLevel");
static_assert(sizeof(FJunoPawnEmotionalStateMappingFromAwesomeLevel) == 0x00000C, "Wrong size on FJunoPawnEmotionalStateMappingFromAwesomeLevel");
static_assert(offsetof(FJunoPawnEmotionalStateMappingFromAwesomeLevel, EmotionalState) == 0x000000, "Member 'FJunoPawnEmotionalStateMappingFromAwesomeLevel::EmotionalState' has a wrong offset!");
static_assert(offsetof(FJunoPawnEmotionalStateMappingFromAwesomeLevel, NumericalTestValue) == 0x000004, "Member 'FJunoPawnEmotionalStateMappingFromAwesomeLevel::NumericalTestValue' has a wrong offset!");
static_assert(offsetof(FJunoPawnEmotionalStateMappingFromAwesomeLevel, NumericalTestMode) == 0x000008, "Member 'FJunoPawnEmotionalStateMappingFromAwesomeLevel::NumericalTestMode' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoActionTargetPayload
// 0x0008 (0x0008 - 0x0000)
struct FJunoActionTargetPayload final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoActionTargetPayload) == 0x000008, "Wrong alignment on FJunoActionTargetPayload");
static_assert(sizeof(FJunoActionTargetPayload) == 0x000008, "Wrong size on FJunoActionTargetPayload");
static_assert(offsetof(FJunoActionTargetPayload, Target) == 0x000000, "Member 'FJunoActionTargetPayload::Target' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoRelevantActorTrackingData
// 0x0004 (0x0004 - 0x0000)
struct FJunoRelevantActorTrackingData final
{
public:
	int32                                         NetRelevantActorCount;                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoRelevantActorTrackingData) == 0x000004, "Wrong alignment on FJunoRelevantActorTrackingData");
static_assert(sizeof(FJunoRelevantActorTrackingData) == 0x000004, "Wrong size on FJunoRelevantActorTrackingData");
static_assert(offsetof(FJunoRelevantActorTrackingData, NetRelevantActorCount) == 0x000000, "Member 'FJunoRelevantActorTrackingData::NetRelevantActorCount' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoProcessAwesomenessInteractionStateTreeTask
// 0x0008 (0x0028 - 0x0020)
struct FJunoProcessAwesomenessInteractionStateTreeTask final : public FStateTreeTaskCommonBase
{
public:
	EGameplayInteractionTaskTrigger               InteractionTrigger;                                // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoProcessAwesomenessInteractionStateTreeTask) == 0x000008, "Wrong alignment on FJunoProcessAwesomenessInteractionStateTreeTask");
static_assert(sizeof(FJunoProcessAwesomenessInteractionStateTreeTask) == 0x000028, "Wrong size on FJunoProcessAwesomenessInteractionStateTreeTask");
static_assert(offsetof(FJunoProcessAwesomenessInteractionStateTreeTask, InteractionTrigger) == 0x000020, "Member 'FJunoProcessAwesomenessInteractionStateTreeTask::InteractionTrigger' has a wrong offset!");

// ScriptStruct JunoGameNative.SkeletalMeshAuditInfo
// 0x0060 (0x0060 - 0x0000)
struct FSkeletalMeshAuditInfo final
{
public:
	struct FSoftObjectPath                        AssetPath;                                         // 0x0000(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshAuditFailureReason                       FailureReason;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RenderResourceSystemSize;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumNonOptionalLODs;                                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumInlineLODs;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLODs;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TriCounts;                                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumBoneInfluencesPerVertex;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBonesInSkeleton;                                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorstTriRatio;                                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshBoundingBoxAreaMeters;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeverStream;                                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkeletalMeshAuditInfo) == 0x000008, "Wrong alignment on FSkeletalMeshAuditInfo");
static_assert(sizeof(FSkeletalMeshAuditInfo) == 0x000060, "Wrong size on FSkeletalMeshAuditInfo");
static_assert(offsetof(FSkeletalMeshAuditInfo, AssetPath) == 0x000000, "Member 'FSkeletalMeshAuditInfo::AssetPath' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, FailureReason) == 0x000018, "Member 'FSkeletalMeshAuditInfo::FailureReason' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, RenderResourceSystemSize) == 0x000020, "Member 'FSkeletalMeshAuditInfo::RenderResourceSystemSize' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, NumNonOptionalLODs) == 0x000028, "Member 'FSkeletalMeshAuditInfo::NumNonOptionalLODs' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, NumInlineLODs) == 0x00002C, "Member 'FSkeletalMeshAuditInfo::NumInlineLODs' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, NumLODs) == 0x000030, "Member 'FSkeletalMeshAuditInfo::NumLODs' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, TriCounts) == 0x000038, "Member 'FSkeletalMeshAuditInfo::TriCounts' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, NumBoneInfluencesPerVertex) == 0x000048, "Member 'FSkeletalMeshAuditInfo::NumBoneInfluencesPerVertex' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, NumBonesInSkeleton) == 0x00004C, "Member 'FSkeletalMeshAuditInfo::NumBonesInSkeleton' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, WorstTriRatio) == 0x000050, "Member 'FSkeletalMeshAuditInfo::WorstTriRatio' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, MeshBoundingBoxAreaMeters) == 0x000054, "Member 'FSkeletalMeshAuditInfo::MeshBoundingBoxAreaMeters' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshAuditInfo, bNeverStream) == 0x000058, "Member 'FSkeletalMeshAuditInfo::bNeverStream' has a wrong offset!");

// ScriptStruct JunoGameNative.JunoWorldConditionWeather
// 0x0048 (0x0058 - 0x0010)
struct FJunoWorldConditionWeather final : public FWorldConditionCommonBase
{
public:
	struct FGameplayTagQuery                      AllowedWeather;                                    // 0x0010(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldConditionWeather) == 0x000008, "Wrong alignment on FJunoWorldConditionWeather");
static_assert(sizeof(FJunoWorldConditionWeather) == 0x000058, "Wrong size on FJunoWorldConditionWeather");
static_assert(offsetof(FJunoWorldConditionWeather, AllowedWeather) == 0x000010, "Member 'FJunoWorldConditionWeather::AllowedWeather' has a wrong offset!");

}

