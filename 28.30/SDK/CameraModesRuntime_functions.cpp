#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraModesRuntime

#include "Basic.hpp"

#include "CameraModesRuntime_classes.hpp"
#include "CameraModesRuntime_parameters.hpp"


namespace SDK
{

// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.ClearFovOverride
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACameraModes_FirstPersonCameraController::ClearFovOverride(float TransitionTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ClearFovOverride");

	Params::CameraModes_FirstPersonCameraController_ClearFovOverride Parms{};

	Parms.TransitionTime = TransitionTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.HandleWeaponEquipped
// (Final, Native, Private)
// Parameters:
// class AFortWeapon*                      NewWeapon                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      PrevWeapon                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACameraModes_FirstPersonCameraController::HandleWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("HandleWeaponEquipped");

	Params::CameraModes_FirstPersonCameraController_HandleWeaponEquipped Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.PrevWeapon = PrevWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.OnLocalPlayerVisibilityChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldBeVisible                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACameraModes_FirstPersonCameraController::OnLocalPlayerVisibilityChanged(const bool bShouldBeVisible)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnLocalPlayerVisibilityChanged");

	Params::CameraModes_FirstPersonCameraController_OnLocalPlayerVisibilityChanged Parms{};

	Parms.bShouldBeVisible = bShouldBeVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.SetFovOverride
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FOV                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACameraModes_FirstPersonCameraController::SetFovOverride(float FOV, float TransitionTime)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetFovOverride");

	Params::CameraModes_FirstPersonCameraController_SetFovOverride Parms{};

	Parms.FOV = FOV;
	Parms.TransitionTime = TransitionTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CameraModesRuntime.CameraModes_FirstPersonCameraController.UpdateFirstPersonFOV
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FOV                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACameraModes_FirstPersonCameraController::UpdateFirstPersonFOV(const float FOV)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("UpdateFirstPersonFOV");

	Params::CameraModes_FirstPersonCameraController_UpdateFirstPersonFOV Parms{};

	Parms.FOV = FOV;

	UObject::ProcessEvent(Func, &Parms);
}

}

