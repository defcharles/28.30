#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VaultingCodeRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "VaultingCodeRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function VaultingCodeRuntime.FortMovementMode_ExtLogicHurdle.BP_DestroyProp
// 0x0008 (0x0008 - 0x0000)
struct FortMovementMode_ExtLogicHurdle_BP_DestroyProp final
{
public:
	class ABuildingProp*                          BuildPropToDestroy;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicHurdle_BP_DestroyProp) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicHurdle_BP_DestroyProp");
static_assert(sizeof(FortMovementMode_ExtLogicHurdle_BP_DestroyProp) == 0x000008, "Wrong size on FortMovementMode_ExtLogicHurdle_BP_DestroyProp");
static_assert(offsetof(FortMovementMode_ExtLogicHurdle_BP_DestroyProp, BuildPropToDestroy) == 0x000000, "Member 'FortMovementMode_ExtLogicHurdle_BP_DestroyProp::BuildPropToDestroy' has a wrong offset!");

// Function VaultingCodeRuntime.FortMovementMode_ExtLogicHurdle.BP_GetAnimationMontageInformation
// 0x0048 (0x0048 - 0x0000)
struct FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation final
{
public:
	struct FSynchedActionInfo                     SynchedActionInfo;                                 // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EHurdleType                                   Type;                                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNarrowOpening;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrouched;                                       // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimMontage;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSectionName;                                  // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MontageMiddleSectionName;                          // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation) == 0x000008, "Wrong alignment on FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation");
static_assert(sizeof(FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation) == 0x000048, "Wrong size on FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation");
static_assert(offsetof(FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation, SynchedActionInfo) == 0x000000, "Member 'FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation::SynchedActionInfo' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation, Type) == 0x000030, "Member 'FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation::Type' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation, bIsNarrowOpening) == 0x000031, "Member 'FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation::bIsNarrowOpening' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation, bIsCrouched) == 0x000032, "Member 'FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation::bIsCrouched' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation, AnimMontage) == 0x000038, "Member 'FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation::AnimMontage' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation, StartSectionName) == 0x000040, "Member 'FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation::StartSectionName' has a wrong offset!");
static_assert(offsetof(FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation, MontageMiddleSectionName) == 0x000044, "Member 'FortMovementMode_ExtLogicHurdle_BP_GetAnimationMontageInformation::MontageMiddleSectionName' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.BP_HandleHurdleStarted
// 0x0160 (0x0160 - 0x0000)
struct HurdleComponent_BP_HandleHurdleStarted final
{
public:
	struct FHurdleTargetingData                   TargetingData;                                     // 0x0000(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSynchedActionInfo                     SynchedActionInfo;                                 // 0x0130(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_BP_HandleHurdleStarted) == 0x000008, "Wrong alignment on HurdleComponent_BP_HandleHurdleStarted");
static_assert(sizeof(HurdleComponent_BP_HandleHurdleStarted) == 0x000160, "Wrong size on HurdleComponent_BP_HandleHurdleStarted");
static_assert(offsetof(HurdleComponent_BP_HandleHurdleStarted, TargetingData) == 0x000000, "Member 'HurdleComponent_BP_HandleHurdleStarted::TargetingData' has a wrong offset!");
static_assert(offsetof(HurdleComponent_BP_HandleHurdleStarted, SynchedActionInfo) == 0x000130, "Member 'HurdleComponent_BP_HandleHurdleStarted::SynchedActionInfo' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.HandleNavLinkMoveStarted
// 0x0018 (0x0018 - 0x0000)
struct HurdleComponent_HandleNavLinkMoveStarted final
{
public:
	struct FVector                                LinkEndPoint;                                      // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_HandleNavLinkMoveStarted) == 0x000008, "Wrong alignment on HurdleComponent_HandleNavLinkMoveStarted");
static_assert(sizeof(HurdleComponent_HandleNavLinkMoveStarted) == 0x000018, "Wrong size on HurdleComponent_HandleNavLinkMoveStarted");
static_assert(offsetof(HurdleComponent_HandleNavLinkMoveStarted, LinkEndPoint) == 0x000000, "Member 'HurdleComponent_HandleNavLinkMoveStarted::LinkEndPoint' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.HandleOwnerJumpInput
// 0x0001 (0x0001 - 0x0000)
struct HurdleComponent_HandleOwnerJumpInput final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_HandleOwnerJumpInput) == 0x000001, "Wrong alignment on HurdleComponent_HandleOwnerJumpInput");
static_assert(sizeof(HurdleComponent_HandleOwnerJumpInput) == 0x000001, "Wrong size on HurdleComponent_HandleOwnerJumpInput");
static_assert(offsetof(HurdleComponent_HandleOwnerJumpInput, bPressed) == 0x000000, "Member 'HurdleComponent_HandleOwnerJumpInput::bPressed' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.HandleOwnerMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct HurdleComponent_HandleOwnerMovementModeChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PreviousMovementMode;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HurdleComponent_HandleOwnerMovementModeChanged) == 0x000008, "Wrong alignment on HurdleComponent_HandleOwnerMovementModeChanged");
static_assert(sizeof(HurdleComponent_HandleOwnerMovementModeChanged) == 0x000010, "Wrong size on HurdleComponent_HandleOwnerMovementModeChanged");
static_assert(offsetof(HurdleComponent_HandleOwnerMovementModeChanged, Character) == 0x000000, "Member 'HurdleComponent_HandleOwnerMovementModeChanged::Character' has a wrong offset!");
static_assert(offsetof(HurdleComponent_HandleOwnerMovementModeChanged, PreviousMovementMode) == 0x000008, "Member 'HurdleComponent_HandleOwnerMovementModeChanged::PreviousMovementMode' has a wrong offset!");
static_assert(offsetof(HurdleComponent_HandleOwnerMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'HurdleComponent_HandleOwnerMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.HandleOwnerTeleported
// 0x0008 (0x0008 - 0x0000)
struct HurdleComponent_HandleOwnerTeleported final
{
public:
	class AFortPawn*                              TeleportedOwner;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_HandleOwnerTeleported) == 0x000008, "Wrong alignment on HurdleComponent_HandleOwnerTeleported");
static_assert(sizeof(HurdleComponent_HandleOwnerTeleported) == 0x000008, "Wrong size on HurdleComponent_HandleOwnerTeleported");
static_assert(offsetof(HurdleComponent_HandleOwnerTeleported, TeleportedOwner) == 0x000000, "Member 'HurdleComponent_HandleOwnerTeleported::TeleportedOwner' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.HandleTargetingDataInvalid
// 0x0130 (0x0130 - 0x0000)
struct HurdleComponent_HandleTargetingDataInvalid final
{
public:
	struct FHurdleTargetingData                   TargetingData;                                     // 0x0000(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_HandleTargetingDataInvalid) == 0x000008, "Wrong alignment on HurdleComponent_HandleTargetingDataInvalid");
static_assert(sizeof(HurdleComponent_HandleTargetingDataInvalid) == 0x000130, "Wrong size on HurdleComponent_HandleTargetingDataInvalid");
static_assert(offsetof(HurdleComponent_HandleTargetingDataInvalid, TargetingData) == 0x000000, "Member 'HurdleComponent_HandleTargetingDataInvalid::TargetingData' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.HandleTargetingDataValid
// 0x0130 (0x0130 - 0x0000)
struct HurdleComponent_HandleTargetingDataValid final
{
public:
	struct FHurdleTargetingData                   TargetingData;                                     // 0x0000(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_HandleTargetingDataValid) == 0x000008, "Wrong alignment on HurdleComponent_HandleTargetingDataValid");
static_assert(sizeof(HurdleComponent_HandleTargetingDataValid) == 0x000130, "Wrong size on HurdleComponent_HandleTargetingDataValid");
static_assert(offsetof(HurdleComponent_HandleTargetingDataValid, TargetingData) == 0x000000, "Member 'HurdleComponent_HandleTargetingDataValid::TargetingData' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.OnPlayerStatePawnSet
// 0x0018 (0x0018 - 0x0000)
struct HurdleComponent_OnPlayerStatePawnSet final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  OldPawn;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_OnPlayerStatePawnSet) == 0x000008, "Wrong alignment on HurdleComponent_OnPlayerStatePawnSet");
static_assert(sizeof(HurdleComponent_OnPlayerStatePawnSet) == 0x000018, "Wrong size on HurdleComponent_OnPlayerStatePawnSet");
static_assert(offsetof(HurdleComponent_OnPlayerStatePawnSet, Player) == 0x000000, "Member 'HurdleComponent_OnPlayerStatePawnSet::Player' has a wrong offset!");
static_assert(offsetof(HurdleComponent_OnPlayerStatePawnSet, NewPawn) == 0x000008, "Member 'HurdleComponent_OnPlayerStatePawnSet::NewPawn' has a wrong offset!");
static_assert(offsetof(HurdleComponent_OnPlayerStatePawnSet, OldPawn) == 0x000010, "Member 'HurdleComponent_OnPlayerStatePawnSet::OldPawn' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.RegisterMutatorUpdatedDelegate
// 0x0008 (0x0008 - 0x0000)
struct HurdleComponent_RegisterMutatorUpdatedDelegate final
{
public:
	class APawn*                                  AffectedPawn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_RegisterMutatorUpdatedDelegate) == 0x000008, "Wrong alignment on HurdleComponent_RegisterMutatorUpdatedDelegate");
static_assert(sizeof(HurdleComponent_RegisterMutatorUpdatedDelegate) == 0x000008, "Wrong size on HurdleComponent_RegisterMutatorUpdatedDelegate");
static_assert(offsetof(HurdleComponent_RegisterMutatorUpdatedDelegate, AffectedPawn) == 0x000000, "Member 'HurdleComponent_RegisterMutatorUpdatedDelegate::AffectedPawn' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.ServerStartHurdle
// 0x0078 (0x0078 - 0x0000)
struct HurdleComponent_ServerStartHurdle final
{
public:
	struct FReplicatedHurdleTargetingData         InReplicatedTargetingData;                         // 0x0000(0x0070)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	double                                        ClientLastTeleportTime;                            // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_ServerStartHurdle) == 0x000008, "Wrong alignment on HurdleComponent_ServerStartHurdle");
static_assert(sizeof(HurdleComponent_ServerStartHurdle) == 0x000078, "Wrong size on HurdleComponent_ServerStartHurdle");
static_assert(offsetof(HurdleComponent_ServerStartHurdle, InReplicatedTargetingData) == 0x000000, "Member 'HurdleComponent_ServerStartHurdle::InReplicatedTargetingData' has a wrong offset!");
static_assert(offsetof(HurdleComponent_ServerStartHurdle, ClientLastTeleportTime) == 0x000070, "Member 'HurdleComponent_ServerStartHurdle::ClientLastTeleportTime' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.BP_CanStartHurdle
// 0x0001 (0x0001 - 0x0000)
struct HurdleComponent_BP_CanStartHurdle final
{
public:
	bool                                          OutCanStartHurdle;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_BP_CanStartHurdle) == 0x000001, "Wrong alignment on HurdleComponent_BP_CanStartHurdle");
static_assert(sizeof(HurdleComponent_BP_CanStartHurdle) == 0x000001, "Wrong size on HurdleComponent_BP_CanStartHurdle");
static_assert(offsetof(HurdleComponent_BP_CanStartHurdle, OutCanStartHurdle) == 0x000000, "Member 'HurdleComponent_BP_CanStartHurdle::OutCanStartHurdle' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.BP_IsTacticalSprinting
// 0x0001 (0x0001 - 0x0000)
struct HurdleComponent_BP_IsTacticalSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_BP_IsTacticalSprinting) == 0x000001, "Wrong alignment on HurdleComponent_BP_IsTacticalSprinting");
static_assert(sizeof(HurdleComponent_BP_IsTacticalSprinting) == 0x000001, "Wrong size on HurdleComponent_BP_IsTacticalSprinting");
static_assert(offsetof(HurdleComponent_BP_IsTacticalSprinting, ReturnValue) == 0x000000, "Member 'HurdleComponent_BP_IsTacticalSprinting::ReturnValue' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.BP_UseAutoHurdle
// 0x0001 (0x0001 - 0x0000)
struct HurdleComponent_BP_UseAutoHurdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_BP_UseAutoHurdle) == 0x000001, "Wrong alignment on HurdleComponent_BP_UseAutoHurdle");
static_assert(sizeof(HurdleComponent_BP_UseAutoHurdle) == 0x000001, "Wrong size on HurdleComponent_BP_UseAutoHurdle");
static_assert(offsetof(HurdleComponent_BP_UseAutoHurdle, ReturnValue) == 0x000000, "Member 'HurdleComponent_BP_UseAutoHurdle::ReturnValue' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.GetHurdleHighlightTransform
// 0x0060 (0x0060 - 0x0000)
struct HurdleComponent_GetHurdleHighlightTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_GetHurdleHighlightTransform) == 0x000010, "Wrong alignment on HurdleComponent_GetHurdleHighlightTransform");
static_assert(sizeof(HurdleComponent_GetHurdleHighlightTransform) == 0x000060, "Wrong size on HurdleComponent_GetHurdleHighlightTransform");
static_assert(offsetof(HurdleComponent_GetHurdleHighlightTransform, ReturnValue) == 0x000000, "Member 'HurdleComponent_GetHurdleHighlightTransform::ReturnValue' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct HurdleComponent_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_IsUsingGamepad) == 0x000001, "Wrong alignment on HurdleComponent_IsUsingGamepad");
static_assert(sizeof(HurdleComponent_IsUsingGamepad) == 0x000001, "Wrong size on HurdleComponent_IsUsingGamepad");
static_assert(offsetof(HurdleComponent_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'HurdleComponent_IsUsingGamepad::ReturnValue' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleComponent.ShouldShowHurdleIndicator
// 0x0001 (0x0001 - 0x0000)
struct HurdleComponent_ShouldShowHurdleIndicator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HurdleComponent_ShouldShowHurdleIndicator) == 0x000001, "Wrong alignment on HurdleComponent_ShouldShowHurdleIndicator");
static_assert(sizeof(HurdleComponent_ShouldShowHurdleIndicator) == 0x000001, "Wrong size on HurdleComponent_ShouldShowHurdleIndicator");
static_assert(offsetof(HurdleComponent_ShouldShowHurdleIndicator, ReturnValue) == 0x000000, "Member 'HurdleComponent_ShouldShowHurdleIndicator::ReturnValue' has a wrong offset!");

// Function VaultingCodeRuntime.HurdleLibrary.PerformHurdleTargeting
// 0x0200 (0x0200 - 0x0000)
struct HurdleLibrary_PerformHurdleTargeting final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHurdleInputConfigCache                HurdleInputConfig;                                 // 0x0008(0x00A0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FHurdleTargetingData                   OutTargetingData;                                  // 0x00A8(0x0130)(Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsAutoHurdle;                                     // 0x01D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideAimDirection;                              // 0x01E0(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HurdleLibrary_PerformHurdleTargeting) == 0x000008, "Wrong alignment on HurdleLibrary_PerformHurdleTargeting");
static_assert(sizeof(HurdleLibrary_PerformHurdleTargeting) == 0x000200, "Wrong size on HurdleLibrary_PerformHurdleTargeting");
static_assert(offsetof(HurdleLibrary_PerformHurdleTargeting, Character) == 0x000000, "Member 'HurdleLibrary_PerformHurdleTargeting::Character' has a wrong offset!");
static_assert(offsetof(HurdleLibrary_PerformHurdleTargeting, HurdleInputConfig) == 0x000008, "Member 'HurdleLibrary_PerformHurdleTargeting::HurdleInputConfig' has a wrong offset!");
static_assert(offsetof(HurdleLibrary_PerformHurdleTargeting, OutTargetingData) == 0x0000A8, "Member 'HurdleLibrary_PerformHurdleTargeting::OutTargetingData' has a wrong offset!");
static_assert(offsetof(HurdleLibrary_PerformHurdleTargeting, bIsAutoHurdle) == 0x0001D8, "Member 'HurdleLibrary_PerformHurdleTargeting::bIsAutoHurdle' has a wrong offset!");
static_assert(offsetof(HurdleLibrary_PerformHurdleTargeting, OverrideAimDirection) == 0x0001E0, "Member 'HurdleLibrary_PerformHurdleTargeting::OverrideAimDirection' has a wrong offset!");
static_assert(offsetof(HurdleLibrary_PerformHurdleTargeting, ReturnValue) == 0x0001F8, "Member 'HurdleLibrary_PerformHurdleTargeting::ReturnValue' has a wrong offset!");

}

