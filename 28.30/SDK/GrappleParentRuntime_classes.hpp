#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrappleParentRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GrappleParentRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class GrappleParentRuntime.FortCameraModifier_Swinging
// 0x0240 (0x0288 - 0x0048)
class UFortCameraModifier_Swinging final : public UCameraModifier
{
public:
	float                                         MaxVelocityDeltaPerSecond;                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BlendInCurve;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BlendOutCurve;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpeedScaledAxisOffsetData             ForwardOffsetData;                                 // 0x0060(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              TotalForwardOffsetBounds;                          // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpeedScaledAxisOffsetData             RightOffsetData;                                   // 0x00D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              RightForwardOffsetMultiplierBounds;                // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpeedScaledAxisOffsetData             UpOffsetData;                                      // 0x0140(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              UpPositiveForwardOffsetMultiplierBounds;           // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UpNegativeForwardOffsetMultiplierBounds;           // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVInterpSpeed;                                    // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FOVBounds;                                         // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BoostCurve;                                        // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         BoostModifier;                                     // 0x01E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         AttachBoostDuration;                               // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachBoostMagnitude;                              // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetachBoostDuration;                               // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetachBoostMagnitude;                              // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SlidingHeightCurve;                                // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SlidingGameplayTag;                                // 0x0220(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideHeightTransitionDuration;                     // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlidingSpeedMultiplierOffset;                   // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  CachedPlayer;                                      // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortWeaponRangedDualSwing*             CachedWeapon;                                      // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x48];                                     // 0x0240(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RemoveSelfFromCameraManager();

	void CalculateDynamicMultipliers(float* OutFOVBoundsMultiplier, float* OutBoostOffsetMultiplier) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraModifier_Swinging">();
	}
	static class UFortCameraModifier_Swinging* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraModifier_Swinging>();
	}
};
static_assert(alignof(UFortCameraModifier_Swinging) == 0x000008, "Wrong alignment on UFortCameraModifier_Swinging");
static_assert(sizeof(UFortCameraModifier_Swinging) == 0x000288, "Wrong size on UFortCameraModifier_Swinging");
static_assert(offsetof(UFortCameraModifier_Swinging, MaxVelocityDeltaPerSecond) == 0x000048, "Member 'UFortCameraModifier_Swinging::MaxVelocityDeltaPerSecond' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, BlendInCurve) == 0x000050, "Member 'UFortCameraModifier_Swinging::BlendInCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, BlendOutCurve) == 0x000058, "Member 'UFortCameraModifier_Swinging::BlendOutCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, ForwardOffsetData) == 0x000060, "Member 'UFortCameraModifier_Swinging::ForwardOffsetData' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, TotalForwardOffsetBounds) == 0x0000C0, "Member 'UFortCameraModifier_Swinging::TotalForwardOffsetBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, RightOffsetData) == 0x0000D0, "Member 'UFortCameraModifier_Swinging::RightOffsetData' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, RightForwardOffsetMultiplierBounds) == 0x000130, "Member 'UFortCameraModifier_Swinging::RightForwardOffsetMultiplierBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, UpOffsetData) == 0x000140, "Member 'UFortCameraModifier_Swinging::UpOffsetData' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, UpPositiveForwardOffsetMultiplierBounds) == 0x0001A0, "Member 'UFortCameraModifier_Swinging::UpPositiveForwardOffsetMultiplierBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, UpNegativeForwardOffsetMultiplierBounds) == 0x0001B0, "Member 'UFortCameraModifier_Swinging::UpNegativeForwardOffsetMultiplierBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, FOVInterpSpeed) == 0x0001C0, "Member 'UFortCameraModifier_Swinging::FOVInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, FOVBounds) == 0x0001C8, "Member 'UFortCameraModifier_Swinging::FOVBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, BoostCurve) == 0x0001D8, "Member 'UFortCameraModifier_Swinging::BoostCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, BoostModifier) == 0x0001E0, "Member 'UFortCameraModifier_Swinging::BoostModifier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, AttachBoostDuration) == 0x000208, "Member 'UFortCameraModifier_Swinging::AttachBoostDuration' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, AttachBoostMagnitude) == 0x00020C, "Member 'UFortCameraModifier_Swinging::AttachBoostMagnitude' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, DetachBoostDuration) == 0x000210, "Member 'UFortCameraModifier_Swinging::DetachBoostDuration' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, DetachBoostMagnitude) == 0x000214, "Member 'UFortCameraModifier_Swinging::DetachBoostMagnitude' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, SlidingHeightCurve) == 0x000218, "Member 'UFortCameraModifier_Swinging::SlidingHeightCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, SlidingGameplayTag) == 0x000220, "Member 'UFortCameraModifier_Swinging::SlidingGameplayTag' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, SlideHeightTransitionDuration) == 0x000224, "Member 'UFortCameraModifier_Swinging::SlideHeightTransitionDuration' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, MaxSlidingSpeedMultiplierOffset) == 0x000228, "Member 'UFortCameraModifier_Swinging::MaxSlidingSpeedMultiplierOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, CachedPlayer) == 0x000230, "Member 'UFortCameraModifier_Swinging::CachedPlayer' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_Swinging, CachedWeapon) == 0x000238, "Member 'UFortCameraModifier_Swinging::CachedWeapon' has a wrong offset!");

// Class GrappleParentRuntime.FortSwingingLayerAnimInstance
// 0x01A0 (0x0610 - 0x0470)
class UFortSwingingLayerAnimInstance final : public UFortBaseLayerAnimInstance
{
public:
	class UAnimInstance*                          MainAnimBP;                                        // 0x0468(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawnAthena*                  Player;                                            // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGroundSwing;                                     // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFemale;                                          // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47A[0x2];                                      // 0x047A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerDistanceToGround;                            // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateRotation;                                 // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ForwardInfluenceOnRotation;                        // 0x0488(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TimeForMaxRotationSpeed;                           // 0x04B0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxRotationSpeed;                                  // 0x04D8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RotationSpeedWhileNotAttached;                     // 0x0500(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RotationSpeedWhileNotRotated;                      // 0x0528(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class AActor*                                 GetAttachedActor;                                  // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFreeFalling;                                     // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAttached;                                        // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNotAttachedToCliff;                              // 0x055A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55B[0x5];                                      // 0x055B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0560(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                XYVelocity;                                        // 0x0578(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VecFromPlayerToAttachPoint;                        // 0x0590(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngleFromAttachPoint;                         // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollAngle;                                         // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawAngleToAttachTarget;                            // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName_SwingPhase;                              // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName_BlendOut;                                // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingPhase;                                        // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CurrentRootRotation;                               // 0x05C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CurrentRootTranslation;                            // 0x05D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease1;                                   // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease2;                                   // 0x05F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease3;                                   // 0x05F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease4;                                   // 0x05F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease5;                                   // 0x05F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingReleaseSkid;                                // 0x05F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMovingAttachPoint;                               // 0x05F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlendOut;                                        // 0x05F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WebCastAttachDirection;                            // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWebCastDown;                                     // 0x05FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingOneHand;                                    // 0x05FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandomHandBool;                                  // 0x05FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandomSwingReleaseBool;                          // 0x05FF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandomeReleaseBool;                              // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWithin100UnitsOfGround;                          // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHanging;                                         // 0x0602(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFallRelease;                                     // 0x0603(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnGroundWebCast;                                 // 0x0604(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingNearGroundToSkid;                           // 0x0605(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHangToSwingInAir;                                // 0x0606(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHangToSwingNearGround;                           // 0x0607(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetAttachVectorInPlayerSpace(const struct FVector& InPlayerToAttachPoint);
	void GetPlayerAnglesFromAttachPoint(float* pitch, float* Roll, float* Yaw);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSwingingLayerAnimInstance">();
	}
	static class UFortSwingingLayerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSwingingLayerAnimInstance>();
	}
};
static_assert(alignof(UFortSwingingLayerAnimInstance) == 0x000010, "Wrong alignment on UFortSwingingLayerAnimInstance");
static_assert(sizeof(UFortSwingingLayerAnimInstance) == 0x000610, "Wrong size on UFortSwingingLayerAnimInstance");
static_assert(offsetof(UFortSwingingLayerAnimInstance, MainAnimBP) == 0x000468, "Member 'UFortSwingingLayerAnimInstance::MainAnimBP' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, Player) == 0x000470, "Member 'UFortSwingingLayerAnimInstance::Player' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsGroundSwing) == 0x000478, "Member 'UFortSwingingLayerAnimInstance::IsGroundSwing' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsFemale) == 0x000479, "Member 'UFortSwingingLayerAnimInstance::IsFemale' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, PlayerDistanceToGround) == 0x00047C, "Member 'UFortSwingingLayerAnimInstance::PlayerDistanceToGround' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CalculateRotation) == 0x000480, "Member 'UFortSwingingLayerAnimInstance::CalculateRotation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, ForwardInfluenceOnRotation) == 0x000488, "Member 'UFortSwingingLayerAnimInstance::ForwardInfluenceOnRotation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, TimeForMaxRotationSpeed) == 0x0004B0, "Member 'UFortSwingingLayerAnimInstance::TimeForMaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, MaxRotationSpeed) == 0x0004D8, "Member 'UFortSwingingLayerAnimInstance::MaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, RotationSpeedWhileNotAttached) == 0x000500, "Member 'UFortSwingingLayerAnimInstance::RotationSpeedWhileNotAttached' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, RotationSpeedWhileNotRotated) == 0x000528, "Member 'UFortSwingingLayerAnimInstance::RotationSpeedWhileNotRotated' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, GetAttachedActor) == 0x000550, "Member 'UFortSwingingLayerAnimInstance::GetAttachedActor' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsFreeFalling) == 0x000558, "Member 'UFortSwingingLayerAnimInstance::IsFreeFalling' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsAttached) == 0x000559, "Member 'UFortSwingingLayerAnimInstance::IsAttached' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsNotAttachedToCliff) == 0x00055A, "Member 'UFortSwingingLayerAnimInstance::IsNotAttachedToCliff' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, Velocity) == 0x000560, "Member 'UFortSwingingLayerAnimInstance::Velocity' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, XYVelocity) == 0x000578, "Member 'UFortSwingingLayerAnimInstance::XYVelocity' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, VecFromPlayerToAttachPoint) == 0x000590, "Member 'UFortSwingingLayerAnimInstance::VecFromPlayerToAttachPoint' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, PitchAngleFromAttachPoint) == 0x0005A8, "Member 'UFortSwingingLayerAnimInstance::PitchAngleFromAttachPoint' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, RollAngle) == 0x0005AC, "Member 'UFortSwingingLayerAnimInstance::RollAngle' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, YawAngleToAttachTarget) == 0x0005B0, "Member 'UFortSwingingLayerAnimInstance::YawAngleToAttachTarget' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurveName_SwingPhase) == 0x0005B4, "Member 'UFortSwingingLayerAnimInstance::CurveName_SwingPhase' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurveName_BlendOut) == 0x0005B8, "Member 'UFortSwingingLayerAnimInstance::CurveName_BlendOut' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, SwingPhase) == 0x0005BC, "Member 'UFortSwingingLayerAnimInstance::SwingPhase' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurrentRootRotation) == 0x0005C0, "Member 'UFortSwingingLayerAnimInstance::CurrentRootRotation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurrentRootTranslation) == 0x0005D8, "Member 'UFortSwingingLayerAnimInstance::CurrentRootTranslation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease1) == 0x0005F0, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease1' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease2) == 0x0005F1, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease2' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease3) == 0x0005F2, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease3' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease4) == 0x0005F3, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease4' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease5) == 0x0005F4, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease5' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingReleaseSkid) == 0x0005F5, "Member 'UFortSwingingLayerAnimInstance::IsSwingReleaseSkid' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsMovingAttachPoint) == 0x0005F6, "Member 'UFortSwingingLayerAnimInstance::IsMovingAttachPoint' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsBlendOut) == 0x0005F7, "Member 'UFortSwingingLayerAnimInstance::IsBlendOut' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, WebCastAttachDirection) == 0x0005F8, "Member 'UFortSwingingLayerAnimInstance::WebCastAttachDirection' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsWebCastDown) == 0x0005FC, "Member 'UFortSwingingLayerAnimInstance::IsWebCastDown' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingOneHand) == 0x0005FD, "Member 'UFortSwingingLayerAnimInstance::IsSwingOneHand' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsRandomHandBool) == 0x0005FE, "Member 'UFortSwingingLayerAnimInstance::IsRandomHandBool' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsRandomSwingReleaseBool) == 0x0005FF, "Member 'UFortSwingingLayerAnimInstance::IsRandomSwingReleaseBool' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsRandomeReleaseBool) == 0x000600, "Member 'UFortSwingingLayerAnimInstance::IsRandomeReleaseBool' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsWithin100UnitsOfGround) == 0x000601, "Member 'UFortSwingingLayerAnimInstance::IsWithin100UnitsOfGround' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsHanging) == 0x000602, "Member 'UFortSwingingLayerAnimInstance::IsHanging' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsFallRelease) == 0x000603, "Member 'UFortSwingingLayerAnimInstance::IsFallRelease' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsOnGroundWebCast) == 0x000604, "Member 'UFortSwingingLayerAnimInstance::IsOnGroundWebCast' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingNearGroundToSkid) == 0x000605, "Member 'UFortSwingingLayerAnimInstance::IsSwingNearGroundToSkid' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsHangToSwingInAir) == 0x000606, "Member 'UFortSwingingLayerAnimInstance::IsHangToSwingInAir' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsHangToSwingNearGround) == 0x000607, "Member 'UFortSwingingLayerAnimInstance::IsHangToSwingNearGround' has a wrong offset!");

}

