#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RidingCodeRuntime

#include "Basic.hpp"

#include "ModularGameplay_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "RidingCodeRuntime_structs.hpp"
#include "FortniteAI_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class RidingCodeRuntime.FortVehicleLayerAnimInstance_Riding
// 0x02C0 (0x0AF0 - 0x0830)
class UFortVehicleLayerAnimInstance_Riding : public UFortVehicleOccupantAnimInstance
{
public:
	struct FCachedAnimRelevancyData               IntoVehicleCachedData;                             // 0x0830(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimRelevancyData               OutOfVehicleCachedData;                            // 0x0844(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0858(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTime;                                           // 0x085C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyYawOffset;                                     // 0x0860(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_864[0x4];                                      // 0x0864(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BodyCounterRotation;                               // 0x0868(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BodyCounterRotationAlpha;                          // 0x0880(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReloading;                                      // 0x0884(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargeting;                                      // 0x0885(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFiring;                                         // 0x0886(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingConsumable;                                // 0x0887(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAction;                                       // 0x0888(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsThrowConsumable;                                // 0x0889(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargetingOrThrowingConsumable;                  // 0x088A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurningInPlace;                                 // 0x088B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRidingSprinting;                                // 0x088C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRidingPetting;                                  // 0x088D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88E[0x2];                                      // 0x088E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnInPlaceRotationSpeed;                          // 0x0890(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnInPlaceAngleDelta;                             // 0x0894(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRidingMovingBackward;                           // 0x0898(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlopeSliding;                                   // 0x0899(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89A[0x2];                                      // 0x089A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlopeSlidingPitch;                                 // 0x089C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeSlidingRoll;                                  // 0x08A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderReferentialRidableYaw;                        // 0x08A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawDegreesCoverage;                             // 0x08A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothedAimYaw;                                    // 0x08AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustEntered;                                      // 0x08B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRidableMoving;                                  // 0x08B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRideMode;                                       // 0x08B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B3[0x1];                                      // 0x08B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RidableVelocity;                                   // 0x08B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyYaw;                                           // 0x08B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostPlayRate;                                     // 0x08BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RidingMovePlayRate;                                // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FalseBlendTime;                                    // 0x08C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatToRideYaw;                                   // 0x08C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlaceYaw;                                        // 0x08CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadAOAlpha;                                       // 0x08D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D4[0x4];                                      // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MeleeTwistRot;                                     // 0x08D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsDualWield;                                      // 0x08F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOneHandedDualWield;                             // 0x08F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTwoHandedSword;                                 // 0x08F2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAdjustBodyTwistForMelee;                    // 0x08F3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F4[0x4];                                      // 0x08F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerOffset;                                      // 0x08F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseAlpha;                                        // 0x0910(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLobsterBlockActive;                             // 0x0914(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_915[0x3];                                      // 0x0915(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlopePitch;                                        // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderHeightAdjustmentSpringConstant;               // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlopePitchForRiderHeightAdjustment;             // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlopePitchForRiderHeightAdjustment;             // 0x0924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderHeightAdjustmentForMinSlopePitch;             // 0x0928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderHeightAdjustmentForMaxSlopePitch;             // 0x092C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PettingRotAlpha;                                   // 0x0930(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_934[0x4];                                      // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               PettingRot;                                        // 0x0938(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PettingPitchFactor;                                // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PettingRollFactor;                                 // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachLeft;                                    // 0x0958(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachRight;                                   // 0x0970(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandAttachAlpha;                                   // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERidingFootPhase                              FootPhase;                                         // 0x098C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_FeetInAir;                            // 0x098D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_FrontFeetPlanted;                     // 0x098E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_BackFeetPlanted;                      // 0x098F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_LeftBackFeetForward;                  // 0x0990(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_RightBackFeetForward;                 // 0x0991(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_LeftPlantedRightPass;                 // 0x0992(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_RightPlantedLeftPass;                 // 0x0993(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnInPlaceModulatedSpeed;                         // 0x0994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurnInPlaceAngleDeltaPositive;                  // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_999[0x3];                                      // 0x0999(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlopeRoll;                                         // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingVelocityLowerBound;                          // 0x09A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JustEnteredDelayTimeSec;                           // 0x09A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FalseBlendTime_Moving;                             // 0x09A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FalseBlendTime_NotMoving;                          // 0x09AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerOffsetMale;                                  // 0x09B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerOffsetFemale;                                // 0x09C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ScytheMontage;                                     // 0x09E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        BRSwordMontage;                                    // 0x09F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortWeaponCoreAnimation                      MeleeDualWieldCoreAnimation;                       // 0x0A10(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A11[0x7];                                      // 0x0A11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SlopePitchTraceStart;                              // 0x0A18(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SlopePitchTraceEnd;                                // 0x0A30(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachLocationLeftMale;                        // 0x0A48(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachLocationRightMale;                       // 0x0A60(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachLocationLeftFemale;                      // 0x0A78(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachLocationRightFemale;                     // 0x0A90(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerHandAttachLeft;                              // 0x0AA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerHandAttachRight;                             // 0x0AAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisableHandAttachCurveName;                        // 0x0AB0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AllowRidingNoiseAdditiveCurveName;                 // 0x0AB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB8[0x38];                                     // 0x0AB8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintCollectRidableAnimBPData(const class UAnimInstance* RidableAnimInstance);
	void PlaceHandIKTargets();
	void SetFootPhase(const ERidingFootPhase InFootPhase);
	void UpdateBoostPlayRate();
	void UpdateSlopePitchForRiding();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleLayerAnimInstance_Riding">();
	}
	static class UFortVehicleLayerAnimInstance_Riding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleLayerAnimInstance_Riding>();
	}
};
static_assert(alignof(UFortVehicleLayerAnimInstance_Riding) == 0x000010, "Wrong alignment on UFortVehicleLayerAnimInstance_Riding");
static_assert(sizeof(UFortVehicleLayerAnimInstance_Riding) == 0x000AF0, "Wrong size on UFortVehicleLayerAnimInstance_Riding");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, IntoVehicleCachedData) == 0x000830, "Member 'UFortVehicleLayerAnimInstance_Riding::IntoVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, OutOfVehicleCachedData) == 0x000844, "Member 'UFortVehicleLayerAnimInstance_Riding::OutOfVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, InTime) == 0x000858, "Member 'UFortVehicleLayerAnimInstance_Riding::InTime' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, OutTime) == 0x00085C, "Member 'UFortVehicleLayerAnimInstance_Riding::OutTime' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BodyYawOffset) == 0x000860, "Member 'UFortVehicleLayerAnimInstance_Riding::BodyYawOffset' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BodyCounterRotation) == 0x000868, "Member 'UFortVehicleLayerAnimInstance_Riding::BodyCounterRotation' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BodyCounterRotationAlpha) == 0x000880, "Member 'UFortVehicleLayerAnimInstance_Riding::BodyCounterRotationAlpha' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsReloading) == 0x000884, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsReloading' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTargeting) == 0x000885, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTargeting' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFiring) == 0x000886, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFiring' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsUsingConsumable) == 0x000887, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsUsingConsumable' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsInAction) == 0x000888, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsInAction' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsThrowConsumable) == 0x000889, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsThrowConsumable' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTargetingOrThrowingConsumable) == 0x00088A, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTargetingOrThrowingConsumable' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTurningInPlace) == 0x00088B, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTurningInPlace' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsRidingSprinting) == 0x00088C, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsRidingSprinting' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsRidingPetting) == 0x00088D, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsRidingPetting' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, TurnInPlaceRotationSpeed) == 0x000890, "Member 'UFortVehicleLayerAnimInstance_Riding::TurnInPlaceRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, TurnInPlaceAngleDelta) == 0x000894, "Member 'UFortVehicleLayerAnimInstance_Riding::TurnInPlaceAngleDelta' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsRidingMovingBackward) == 0x000898, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsRidingMovingBackward' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsSlopeSliding) == 0x000899, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsSlopeSliding' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopeSlidingPitch) == 0x00089C, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopeSlidingPitch' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopeSlidingRoll) == 0x0008A0, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopeSlidingRoll' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, RiderReferentialRidableYaw) == 0x0008A4, "Member 'UFortVehicleLayerAnimInstance_Riding::RiderReferentialRidableYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, AimYawDegreesCoverage) == 0x0008A8, "Member 'UFortVehicleLayerAnimInstance_Riding::AimYawDegreesCoverage' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SmoothedAimYaw) == 0x0008AC, "Member 'UFortVehicleLayerAnimInstance_Riding::SmoothedAimYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bJustEntered) == 0x0008B0, "Member 'UFortVehicleLayerAnimInstance_Riding::bJustEntered' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsRidableMoving) == 0x0008B1, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsRidableMoving' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsRideMode) == 0x0008B2, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsRideMode' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, RidableVelocity) == 0x0008B4, "Member 'UFortVehicleLayerAnimInstance_Riding::RidableVelocity' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BodyYaw) == 0x0008B8, "Member 'UFortVehicleLayerAnimInstance_Riding::BodyYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BoostPlayRate) == 0x0008BC, "Member 'UFortVehicleLayerAnimInstance_Riding::BoostPlayRate' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, RidingMovePlayRate) == 0x0008C0, "Member 'UFortVehicleLayerAnimInstance_Riding::RidingMovePlayRate' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, FalseBlendTime) == 0x0008C4, "Member 'UFortVehicleLayerAnimInstance_Riding::FalseBlendTime' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, CombatToRideYaw) == 0x0008C8, "Member 'UFortVehicleLayerAnimInstance_Riding::CombatToRideYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, InPlaceYaw) == 0x0008CC, "Member 'UFortVehicleLayerAnimInstance_Riding::InPlaceYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HeadAOAlpha) == 0x0008D0, "Member 'UFortVehicleLayerAnimInstance_Riding::HeadAOAlpha' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, MeleeTwistRot) == 0x0008D8, "Member 'UFortVehicleLayerAnimInstance_Riding::MeleeTwistRot' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsDualWield) == 0x0008F0, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsDualWield' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsOneHandedDualWield) == 0x0008F1, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsOneHandedDualWield' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTwoHandedSword) == 0x0008F2, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTwoHandedSword' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bShouldAdjustBodyTwistForMelee) == 0x0008F3, "Member 'UFortVehicleLayerAnimInstance_Riding::bShouldAdjustBodyTwistForMelee' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerOffset) == 0x0008F8, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerOffset' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, NoiseAlpha) == 0x000910, "Member 'UFortVehicleLayerAnimInstance_Riding::NoiseAlpha' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsLobsterBlockActive) == 0x000914, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsLobsterBlockActive' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopePitch) == 0x000918, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopePitch' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, RiderHeightAdjustmentSpringConstant) == 0x00091C, "Member 'UFortVehicleLayerAnimInstance_Riding::RiderHeightAdjustmentSpringConstant' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, MinSlopePitchForRiderHeightAdjustment) == 0x000920, "Member 'UFortVehicleLayerAnimInstance_Riding::MinSlopePitchForRiderHeightAdjustment' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, MaxSlopePitchForRiderHeightAdjustment) == 0x000924, "Member 'UFortVehicleLayerAnimInstance_Riding::MaxSlopePitchForRiderHeightAdjustment' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, RiderHeightAdjustmentForMinSlopePitch) == 0x000928, "Member 'UFortVehicleLayerAnimInstance_Riding::RiderHeightAdjustmentForMinSlopePitch' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, RiderHeightAdjustmentForMaxSlopePitch) == 0x00092C, "Member 'UFortVehicleLayerAnimInstance_Riding::RiderHeightAdjustmentForMaxSlopePitch' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PettingRotAlpha) == 0x000930, "Member 'UFortVehicleLayerAnimInstance_Riding::PettingRotAlpha' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PettingRot) == 0x000938, "Member 'UFortVehicleLayerAnimInstance_Riding::PettingRot' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PettingPitchFactor) == 0x000950, "Member 'UFortVehicleLayerAnimInstance_Riding::PettingPitchFactor' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PettingRollFactor) == 0x000954, "Member 'UFortVehicleLayerAnimInstance_Riding::PettingRollFactor' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLeft) == 0x000958, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLeft' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachRight) == 0x000970, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachRight' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachAlpha) == 0x000988, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachAlpha' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, FootPhase) == 0x00098C, "Member 'UFortVehicleLayerAnimInstance_Riding::FootPhase' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_FeetInAir) == 0x00098D, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_FeetInAir' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_FrontFeetPlanted) == 0x00098E, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_FrontFeetPlanted' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_BackFeetPlanted) == 0x00098F, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_BackFeetPlanted' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_LeftBackFeetForward) == 0x000990, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_LeftBackFeetForward' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_RightBackFeetForward) == 0x000991, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_RightBackFeetForward' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_LeftPlantedRightPass) == 0x000992, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_LeftPlantedRightPass' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_RightPlantedLeftPass) == 0x000993, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_RightPlantedLeftPass' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, TurnInPlaceModulatedSpeed) == 0x000994, "Member 'UFortVehicleLayerAnimInstance_Riding::TurnInPlaceModulatedSpeed' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTurnInPlaceAngleDeltaPositive) == 0x000998, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTurnInPlaceAngleDeltaPositive' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopeRoll) == 0x00099C, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopeRoll' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, MovingVelocityLowerBound) == 0x0009A0, "Member 'UFortVehicleLayerAnimInstance_Riding::MovingVelocityLowerBound' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, JustEnteredDelayTimeSec) == 0x0009A4, "Member 'UFortVehicleLayerAnimInstance_Riding::JustEnteredDelayTimeSec' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, FalseBlendTime_Moving) == 0x0009A8, "Member 'UFortVehicleLayerAnimInstance_Riding::FalseBlendTime_Moving' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, FalseBlendTime_NotMoving) == 0x0009AC, "Member 'UFortVehicleLayerAnimInstance_Riding::FalseBlendTime_NotMoving' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerOffsetMale) == 0x0009B0, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerOffsetMale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerOffsetFemale) == 0x0009C8, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerOffsetFemale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, ScytheMontage) == 0x0009E0, "Member 'UFortVehicleLayerAnimInstance_Riding::ScytheMontage' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BRSwordMontage) == 0x0009F8, "Member 'UFortVehicleLayerAnimInstance_Riding::BRSwordMontage' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, MeleeDualWieldCoreAnimation) == 0x000A10, "Member 'UFortVehicleLayerAnimInstance_Riding::MeleeDualWieldCoreAnimation' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopePitchTraceStart) == 0x000A18, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopePitchTraceStart' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopePitchTraceEnd) == 0x000A30, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopePitchTraceEnd' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLocationLeftMale) == 0x000A48, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLocationLeftMale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLocationRightMale) == 0x000A60, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLocationRightMale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLocationLeftFemale) == 0x000A78, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLocationLeftFemale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLocationRightFemale) == 0x000A90, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLocationRightFemale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerHandAttachLeft) == 0x000AA8, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerHandAttachLeft' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerHandAttachRight) == 0x000AAC, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerHandAttachRight' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, DisableHandAttachCurveName) == 0x000AB0, "Member 'UFortVehicleLayerAnimInstance_Riding::DisableHandAttachCurveName' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, AllowRidingNoiseAdditiveCurveName) == 0x000AB4, "Member 'UFortVehicleLayerAnimInstance_Riding::AllowRidingNoiseAdditiveCurveName' has a wrong offset!");

// Class RidingCodeRuntime.RidingGameStateMutator
// 0x0000 (0x0338 - 0x0338)
class ARidingGameStateMutator final : public AFortAthenaMutator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RidingGameStateMutator">();
	}
	static class ARidingGameStateMutator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARidingGameStateMutator>();
	}
};
static_assert(alignof(ARidingGameStateMutator) == 0x000008, "Wrong alignment on ARidingGameStateMutator");
static_assert(sizeof(ARidingGameStateMutator) == 0x000338, "Wrong size on ARidingGameStateMutator");

// Class RidingCodeRuntime.RidingCheatManager
// 0x0000 (0x0028 - 0x0028)
class URidingCheatManager final : public UChildCheatManager
{
public:
	void RidingSetStaminaPercent(const float StaminaPercent);
	void StartRidingActor();
	void StopRidingActor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RidingCheatManager">();
	}
	static class URidingCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<URidingCheatManager>();
	}
};
static_assert(alignof(URidingCheatManager) == 0x000008, "Wrong alignment on URidingCheatManager");
static_assert(sizeof(URidingCheatManager) == 0x000028, "Wrong size on URidingCheatManager");

// Class RidingCodeRuntime.RidableComponent
// 0x0348 (0x03E8 - 0x00A0)
class URidableComponent : public UGameFrameworkComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class URidableComponent* Ridable, class URiderComponent* Rider)> OnRiderStartedRiding;                              // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class URidableComponent* Ridable, class URiderComponent* Rider)> OnRiderStoppedRiding;                              // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              RiderAnimLayerOverlayClass;                        // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AttachSocket;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachLocationOffset;                              // 0x00D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               AttachRotationOffset;                              // 0x00F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   ClientAttachGuideSocket;                           // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClientAttachGuideLocationOffset;                   // 0x0110(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RidablePropAttachSocket;                           // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RidablePropAttachLocationOffset;                   // 0x0130(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               RidablePropAttachRotationOffset;                   // 0x0148(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         RidablePropAttachScale;                            // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidablePropAttachRiderVerticalBuffer;              // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRidingAttachmentBoundsOverride        RiderPropAttachBoundsOverride;                     // 0x0168(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bOverrideNoiseGeneration;                          // 0x01A0(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortPlayerPawnAthenaMovementNoiseOverride RiderMovementNoiseOverride;                        // 0x01A4(0x000C)(Edit, Config, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bUsesCameraOverride;                               // 0x01B0(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortCameraMode_Riding>     CameraModeClassOverride;                           // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode_Riding>     SprintCameraModeClassOverride;                     // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         UseTargetingAdditionalViewTargetSpaceViewOffsetOverride; // 0x01C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FInterpOffset                          TargetingAdditionalViewTargetSpaceViewOffsetOverride; // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector                                WeaponTargetingSourceOffsetModifier;               // 0x0200(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RidableTag;                                        // 0x0218(0x0004)(Edit, Config, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           EnergyDepletedTag;                                 // 0x021C(0x0004)(Edit, Config, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PlaylistTagBlacklistRowHandle;                     // 0x0220(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class URiderComponent*                        ActiveRider;                                       // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URiderComponent*                        LastRider;                                         // 0x0238(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        RidableProp;                                       // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OriginalCapsuleRadius;                             // 0x0248(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OriginalCapsuleHalfHeight;                         // 0x024C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidingCapsuleRadius;                               // 0x0250(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidingCapsuleHalfHeight;                           // 0x0254(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOriginalClientPositionSmoothingThrottlingSetting; // 0x0258(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          LockRotationToRidableActor;                        // 0x0259(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxHalfAimingAngle;                                // 0x0260(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPrimaryFireAnimMontageAnimCoreTypeOverride> PrimaryFireMontageAnimCoreTypeOverrides;           // 0x0288(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPrimaryFireAnimMontageTagOverride> PrimaryFireMontageTagOverrides;                    // 0x0298(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FRidingPettingData                     PettingData;                                       // 0x02A8(0x0110)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                           RestoreCollisionHandle;                            // 0x03B8(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C0[0x10];                                     // 0x03C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSprinting;                                      // 0x03D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D1[0x17];                                     // 0x03D1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheatSetStaminaPercent(const float StaminaPercent);
	void HandleRiderEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void HandleRiderStartedRiding(class URiderComponent* Rider);
	void HandleRiderStoppedRiding(class URiderComponent* Rider);
	void OnRep_ActiveRider();

	bool CanBePet(class URiderComponent* Rider) const;
	bool CanBeRiddenBP(class URiderComponent* Rider) const;
	bool CanRiderPlayEmote(const class URiderComponent* Rider) const;
	struct FVector GetDismountLaunchVectorOverride(class URiderComponent* Rider) const;
	const struct FRidingPettingData GetPettingData() const;
	class USceneComponent* GetRidingAttachComponent() const;
	void GetRidingCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const;
	void GetRidingEmoteCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const;
	bool IsBeingRidden() const;
	bool IsFlying() const;
	bool IsSprinting() const;
	bool ShouldCameraFocusOnRidable(const class URiderComponent* Rider) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RidableComponent">();
	}
	static class URidableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URidableComponent>();
	}
};
static_assert(alignof(URidableComponent) == 0x000008, "Wrong alignment on URidableComponent");
static_assert(sizeof(URidableComponent) == 0x0003E8, "Wrong size on URidableComponent");
static_assert(offsetof(URidableComponent, OnRiderStartedRiding) == 0x0000A8, "Member 'URidableComponent::OnRiderStartedRiding' has a wrong offset!");
static_assert(offsetof(URidableComponent, OnRiderStoppedRiding) == 0x0000B8, "Member 'URidableComponent::OnRiderStoppedRiding' has a wrong offset!");
static_assert(offsetof(URidableComponent, RiderAnimLayerOverlayClass) == 0x0000C8, "Member 'URidableComponent::RiderAnimLayerOverlayClass' has a wrong offset!");
static_assert(offsetof(URidableComponent, AttachSocket) == 0x0000D0, "Member 'URidableComponent::AttachSocket' has a wrong offset!");
static_assert(offsetof(URidableComponent, AttachLocationOffset) == 0x0000D8, "Member 'URidableComponent::AttachLocationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, AttachRotationOffset) == 0x0000F0, "Member 'URidableComponent::AttachRotationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, ClientAttachGuideSocket) == 0x000108, "Member 'URidableComponent::ClientAttachGuideSocket' has a wrong offset!");
static_assert(offsetof(URidableComponent, ClientAttachGuideLocationOffset) == 0x000110, "Member 'URidableComponent::ClientAttachGuideLocationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachSocket) == 0x000128, "Member 'URidableComponent::RidablePropAttachSocket' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachLocationOffset) == 0x000130, "Member 'URidableComponent::RidablePropAttachLocationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachRotationOffset) == 0x000148, "Member 'URidableComponent::RidablePropAttachRotationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachScale) == 0x000160, "Member 'URidableComponent::RidablePropAttachScale' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachRiderVerticalBuffer) == 0x000164, "Member 'URidableComponent::RidablePropAttachRiderVerticalBuffer' has a wrong offset!");
static_assert(offsetof(URidableComponent, RiderPropAttachBoundsOverride) == 0x000168, "Member 'URidableComponent::RiderPropAttachBoundsOverride' has a wrong offset!");
static_assert(offsetof(URidableComponent, bOverrideNoiseGeneration) == 0x0001A0, "Member 'URidableComponent::bOverrideNoiseGeneration' has a wrong offset!");
static_assert(offsetof(URidableComponent, RiderMovementNoiseOverride) == 0x0001A4, "Member 'URidableComponent::RiderMovementNoiseOverride' has a wrong offset!");
static_assert(offsetof(URidableComponent, bUsesCameraOverride) == 0x0001B0, "Member 'URidableComponent::bUsesCameraOverride' has a wrong offset!");
static_assert(offsetof(URidableComponent, CameraModeClassOverride) == 0x0001B8, "Member 'URidableComponent::CameraModeClassOverride' has a wrong offset!");
static_assert(offsetof(URidableComponent, SprintCameraModeClassOverride) == 0x0001C0, "Member 'URidableComponent::SprintCameraModeClassOverride' has a wrong offset!");
static_assert(offsetof(URidableComponent, UseTargetingAdditionalViewTargetSpaceViewOffsetOverride) == 0x0001C8, "Member 'URidableComponent::UseTargetingAdditionalViewTargetSpaceViewOffsetOverride' has a wrong offset!");
static_assert(offsetof(URidableComponent, TargetingAdditionalViewTargetSpaceViewOffsetOverride) == 0x0001F0, "Member 'URidableComponent::TargetingAdditionalViewTargetSpaceViewOffsetOverride' has a wrong offset!");
static_assert(offsetof(URidableComponent, WeaponTargetingSourceOffsetModifier) == 0x000200, "Member 'URidableComponent::WeaponTargetingSourceOffsetModifier' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidableTag) == 0x000218, "Member 'URidableComponent::RidableTag' has a wrong offset!");
static_assert(offsetof(URidableComponent, EnergyDepletedTag) == 0x00021C, "Member 'URidableComponent::EnergyDepletedTag' has a wrong offset!");
static_assert(offsetof(URidableComponent, PlaylistTagBlacklistRowHandle) == 0x000220, "Member 'URidableComponent::PlaylistTagBlacklistRowHandle' has a wrong offset!");
static_assert(offsetof(URidableComponent, ActiveRider) == 0x000230, "Member 'URidableComponent::ActiveRider' has a wrong offset!");
static_assert(offsetof(URidableComponent, LastRider) == 0x000238, "Member 'URidableComponent::LastRider' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidableProp) == 0x000240, "Member 'URidableComponent::RidableProp' has a wrong offset!");
static_assert(offsetof(URidableComponent, OriginalCapsuleRadius) == 0x000248, "Member 'URidableComponent::OriginalCapsuleRadius' has a wrong offset!");
static_assert(offsetof(URidableComponent, OriginalCapsuleHalfHeight) == 0x00024C, "Member 'URidableComponent::OriginalCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidingCapsuleRadius) == 0x000250, "Member 'URidableComponent::RidingCapsuleRadius' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidingCapsuleHalfHeight) == 0x000254, "Member 'URidableComponent::RidingCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(URidableComponent, bOriginalClientPositionSmoothingThrottlingSetting) == 0x000258, "Member 'URidableComponent::bOriginalClientPositionSmoothingThrottlingSetting' has a wrong offset!");
static_assert(offsetof(URidableComponent, LockRotationToRidableActor) == 0x000259, "Member 'URidableComponent::LockRotationToRidableActor' has a wrong offset!");
static_assert(offsetof(URidableComponent, MaxHalfAimingAngle) == 0x000260, "Member 'URidableComponent::MaxHalfAimingAngle' has a wrong offset!");
static_assert(offsetof(URidableComponent, PrimaryFireMontageAnimCoreTypeOverrides) == 0x000288, "Member 'URidableComponent::PrimaryFireMontageAnimCoreTypeOverrides' has a wrong offset!");
static_assert(offsetof(URidableComponent, PrimaryFireMontageTagOverrides) == 0x000298, "Member 'URidableComponent::PrimaryFireMontageTagOverrides' has a wrong offset!");
static_assert(offsetof(URidableComponent, PettingData) == 0x0002A8, "Member 'URidableComponent::PettingData' has a wrong offset!");
static_assert(offsetof(URidableComponent, RestoreCollisionHandle) == 0x0003B8, "Member 'URidableComponent::RestoreCollisionHandle' has a wrong offset!");
static_assert(offsetof(URidableComponent, bIsSprinting) == 0x0003D0, "Member 'URidableComponent::bIsSprinting' has a wrong offset!");

// Class RidingCodeRuntime.ControllableRidableComponent
// 0x0320 (0x0708 - 0x03E8)
class UControllableRidableComponent : public URidableComponent
{
public:
	bool                                          bUseGravityJump;                                   // 0x03E8(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      IgnoreGravityJumpTagQuery;                         // 0x03F0(0x0048)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsControllable;                                   // 0x0438(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasAbility;                                       // 0x0439(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_43A[0x6];                                      // 0x043A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AbilityDisplayText;                                // 0x0440(0x0018)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bCanJump;                                          // 0x0458(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysMoveForward;                                // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_45A[0x2];                                      // 0x045A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardMoveSpeedMultiplier;                        // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BackwardMoveSpeedMultiplier;                       // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SidewaysMoveRotationOffset;                        // 0x0464(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortMovementUrgency                          MovementUrgency;                                   // 0x0468(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBeingControlled;                                // 0x0469(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_46A[0x1E];                                     // 0x046A(0x001E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRidableControlParams                  RidableControlParams;                              // 0x0488(0x0208)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_690[0x28];                                     // 0x0690(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         JumpUpwardGravityScale;                            // 0x06B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         JumpDownwardGravityScale;                          // 0x06E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void CancelBuildBar();
	void HandleAbilityHeld();
	void HandleAbilityStarted();
	void HandleAbilityStopped();
	void HandleCancelSprint(const bool bAbilityInputHeld, const bool bForceCancel);
	void HandleJumpHeld();
	void HandleJumpStarted();
	void HandleJumpStopped();
	void OnCapsuleBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_IsBeingControlled();
	void ServerDoJumpExit();

	bool CanBeControlled(class URiderComponent* Rider) const;
	bool CanStartSprinting() const;
	const class FText GetAbilityDisplayText() const;
	bool IsSprintToggleable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControllableRidableComponent">();
	}
	static class UControllableRidableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControllableRidableComponent>();
	}
};
static_assert(alignof(UControllableRidableComponent) == 0x000008, "Wrong alignment on UControllableRidableComponent");
static_assert(sizeof(UControllableRidableComponent) == 0x000708, "Wrong size on UControllableRidableComponent");
static_assert(offsetof(UControllableRidableComponent, bUseGravityJump) == 0x0003E8, "Member 'UControllableRidableComponent::bUseGravityJump' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, IgnoreGravityJumpTagQuery) == 0x0003F0, "Member 'UControllableRidableComponent::IgnoreGravityJumpTagQuery' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, bIsControllable) == 0x000438, "Member 'UControllableRidableComponent::bIsControllable' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, bHasAbility) == 0x000439, "Member 'UControllableRidableComponent::bHasAbility' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, AbilityDisplayText) == 0x000440, "Member 'UControllableRidableComponent::AbilityDisplayText' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, bCanJump) == 0x000458, "Member 'UControllableRidableComponent::bCanJump' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, bAlwaysMoveForward) == 0x000459, "Member 'UControllableRidableComponent::bAlwaysMoveForward' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, ForwardMoveSpeedMultiplier) == 0x00045C, "Member 'UControllableRidableComponent::ForwardMoveSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, BackwardMoveSpeedMultiplier) == 0x000460, "Member 'UControllableRidableComponent::BackwardMoveSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, SidewaysMoveRotationOffset) == 0x000464, "Member 'UControllableRidableComponent::SidewaysMoveRotationOffset' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, MovementUrgency) == 0x000468, "Member 'UControllableRidableComponent::MovementUrgency' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, bIsBeingControlled) == 0x000469, "Member 'UControllableRidableComponent::bIsBeingControlled' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, RidableControlParams) == 0x000488, "Member 'UControllableRidableComponent::RidableControlParams' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, JumpUpwardGravityScale) == 0x0006B8, "Member 'UControllableRidableComponent::JumpUpwardGravityScale' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, JumpDownwardGravityScale) == 0x0006E0, "Member 'UControllableRidableComponent::JumpDownwardGravityScale' has a wrong offset!");

// Class RidingCodeRuntime.RiderComponent
// 0x05C8 (0x0670 - 0x00A8)
class URiderComponent : public UFortPawnOverrideComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class URiderComponent* Rider, class URidableComponent* Ridable)> OnStartedRiding;                                   // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class URiderComponent* Rider, class URidableComponent* Ridable)> OnStoppedRiding;                                   // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode_Riding>     RidingCameraModeClass;                             // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode_Riding>     RidingSprintCameraModeClass;                       // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidingCameraModeBlendTime;                         // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInterpOffset                          TargetingAdditionalViewTargetSpaceViewOffset;      // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class USceneComponent>            RiderPropClass;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USceneComponent>            RidablePropClass;                                  // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RiderPropAttachLocationOffset;                     // 0x0108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               RiderPropAttachRotationOffset;                     // 0x0120(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachScale;                              // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RiderPropAttachSocket;                             // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseClientAttachGuideSocket;                       // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RiderPropAttachSoftBounds;                         // 0x0148(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachSoftBoundsScalar;                   // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RiderPropAttachHardBounds;                         // 0x0168(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachSoftBoundsTargetingScalar;          // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachHardBoundsTargetingScalar;          // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachVerticalBufferTargetingScalar;      // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidingExitHoldTime;                                // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         TimeBeforeReenteringRiding;                        // 0x0190(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RidingExitStartedEventTag;                         // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RidingExitStoppedEventTag;                         // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortInputMappingContext*               RidingInputContext;                                // 0x01C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           RidingExit;                                        // 0x01C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           GamepadRidingExit;                                 // 0x01D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemAsset*                         ConnectorFXAsset;                                  // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ConnectorPropSourceMeshParameterName;              // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ConnectorPropTargetMeshParameterName;              // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SimulatedSmoothedRotationSpeed;                    // 0x01E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ExcludedEmoteTags;                                 // 0x01F0(0x0020)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_210[0x8];                                      // 0x0210(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URidableComponent*                      ActiveRidable;                                     // 0x0218(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URidableComponent*                      LastRidable;                                       // 0x0220(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        RiderProp;                                         // 0x0228(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemComponent*                     ConnectorProp;                                     // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PropAttachSeparation;                              // 0x0238(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                AdditionalAttachOffset;                            // 0x0250(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SoftBoundsAttachmentOffset;                        // 0x0268(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HardBoundsAttachmentOffset;                        // 0x0280(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PlaylistTagDenylistRowHandle;                      // 0x0298(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UFortInputComponent*                    RiderInputComponent;                               // 0x02A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  PendingFailedEmoteErrorTags;                       // 0x02B0(0x0020)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FRiderDismountLaunchVelocity           ExitLaunchVelocity;                                // 0x02D0(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FRiderDismountLaunchVelocity           JumpExitLaunchVelocity;                            // 0x0378(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_420[0x8];                                      // 0x0420(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRidingAnalyticsData_Stopped           ActiveAnaltyicsData;                               // 0x0428(0x0080)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FVector                                RidableLocationLastFrame;                          // 0x04A8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C0[0x8];                                      // 0x04C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RestoreCollisionHandle;                            // 0x04C8(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRidableControlRuntimeData             RidableControlRuntimeData;                         // 0x04D0(0x0040)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                         bIsSprintingReplay : 1;                            // 0x0510(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_511[0x3];                                      // 0x0511(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortPlayerController>   ClampedController;                                 // 0x0514(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPetting;                                        // 0x051C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RidingCapsuleHalfHeight;                           // 0x0520(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RidingCapsuleRadius;                               // 0x0548(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_570[0x10];                                     // 0x0570(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollisionProfileName                  CollisionProfileName;                              // 0x0580(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_584[0x4];                                      // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         TraceRadius;                                       // 0x0588(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         TraceLength;                                       // 0x05B0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bPreventExitRidingFromInput;                       // 0x05D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D9[0x97];                                     // 0x05D9(0x0097)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientHandleFinishedCharacterCustomization(class AFortPlayerPawn* PlayerPawn);
	void ClientNotifyEmoteFailure(const struct FGameplayTagContainer& ErrorTags);
	void HandleActorEndPlayWhileRiding(class AActor* Actor, EEndPlayReason EndPlayReason);
	void HandleDBNOWhileRiding();
	void HandleDeferredExitVelocity(const struct FVector& ExitVelocity);
	void HandleGamepadRidingExitReleased();
	void HandleOnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void HandlePawnDiedWhileRiding(class AFortPawn* DeadPawn);
	void HandlePawnTeleported(class AFortPawn* TeleportedPawn);
	void HandleRidableFound(const struct FHitResult& HitResult);
	void HandleRidableMovementModeChanged(class ACharacter* InCharacter, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void HandleRiderDidDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& Momentum);
	void HandleRiderTakenDamage(class AActor* DamageOnOwnerPawnDamageddActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void HandleRidingExitPressed();
	void HandleRidingExitReleased();
	void HandleStartedRiding(class URidableComponent* Ridable);
	void HandleStoppedRiding(class URidableComponent* Ridable);
	void OnMovementModeChanged(class ACharacter* InCharacter, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnRep_ActiveRidable();
	void OnRep_IsSprintingReplay();
	void OnRep_RidableControlRuntimeUpdated();
	void ServerRidingExit();
	void SetRidingInputEnabled(bool bEnabled);
	bool StartRidingActor(class AActor* TargetActor);
	bool StopRidingActor(bool bLaunchRider, bool bFindDismountLocation, bool bIsJumpExit);

	bool IsRidingActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RiderComponent">();
	}
	static class URiderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URiderComponent>();
	}
};
static_assert(alignof(URiderComponent) == 0x000008, "Wrong alignment on URiderComponent");
static_assert(sizeof(URiderComponent) == 0x000670, "Wrong size on URiderComponent");
static_assert(offsetof(URiderComponent, OnStartedRiding) == 0x0000B0, "Member 'URiderComponent::OnStartedRiding' has a wrong offset!");
static_assert(offsetof(URiderComponent, OnStoppedRiding) == 0x0000C0, "Member 'URiderComponent::OnStoppedRiding' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingCameraModeClass) == 0x0000D0, "Member 'URiderComponent::RidingCameraModeClass' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingSprintCameraModeClass) == 0x0000D8, "Member 'URiderComponent::RidingSprintCameraModeClass' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingCameraModeBlendTime) == 0x0000E0, "Member 'URiderComponent::RidingCameraModeBlendTime' has a wrong offset!");
static_assert(offsetof(URiderComponent, TargetingAdditionalViewTargetSpaceViewOffset) == 0x0000E8, "Member 'URiderComponent::TargetingAdditionalViewTargetSpaceViewOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropClass) == 0x0000F8, "Member 'URiderComponent::RiderPropClass' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidablePropClass) == 0x000100, "Member 'URiderComponent::RidablePropClass' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachLocationOffset) == 0x000108, "Member 'URiderComponent::RiderPropAttachLocationOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachRotationOffset) == 0x000120, "Member 'URiderComponent::RiderPropAttachRotationOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachScale) == 0x000138, "Member 'URiderComponent::RiderPropAttachScale' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachSocket) == 0x00013C, "Member 'URiderComponent::RiderPropAttachSocket' has a wrong offset!");
static_assert(offsetof(URiderComponent, bUseClientAttachGuideSocket) == 0x000140, "Member 'URiderComponent::bUseClientAttachGuideSocket' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachSoftBounds) == 0x000148, "Member 'URiderComponent::RiderPropAttachSoftBounds' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachSoftBoundsScalar) == 0x000160, "Member 'URiderComponent::RiderPropAttachSoftBoundsScalar' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachHardBounds) == 0x000168, "Member 'URiderComponent::RiderPropAttachHardBounds' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachSoftBoundsTargetingScalar) == 0x000180, "Member 'URiderComponent::RiderPropAttachSoftBoundsTargetingScalar' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachHardBoundsTargetingScalar) == 0x000184, "Member 'URiderComponent::RiderPropAttachHardBoundsTargetingScalar' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachVerticalBufferTargetingScalar) == 0x000188, "Member 'URiderComponent::RiderPropAttachVerticalBufferTargetingScalar' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingExitHoldTime) == 0x00018C, "Member 'URiderComponent::RidingExitHoldTime' has a wrong offset!");
static_assert(offsetof(URiderComponent, TimeBeforeReenteringRiding) == 0x000190, "Member 'URiderComponent::TimeBeforeReenteringRiding' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingExitStartedEventTag) == 0x0001B8, "Member 'URiderComponent::RidingExitStartedEventTag' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingExitStoppedEventTag) == 0x0001BC, "Member 'URiderComponent::RidingExitStoppedEventTag' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingInputContext) == 0x0001C0, "Member 'URiderComponent::RidingInputContext' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingExit) == 0x0001C8, "Member 'URiderComponent::RidingExit' has a wrong offset!");
static_assert(offsetof(URiderComponent, GamepadRidingExit) == 0x0001D0, "Member 'URiderComponent::GamepadRidingExit' has a wrong offset!");
static_assert(offsetof(URiderComponent, ConnectorFXAsset) == 0x0001D8, "Member 'URiderComponent::ConnectorFXAsset' has a wrong offset!");
static_assert(offsetof(URiderComponent, ConnectorPropSourceMeshParameterName) == 0x0001E0, "Member 'URiderComponent::ConnectorPropSourceMeshParameterName' has a wrong offset!");
static_assert(offsetof(URiderComponent, ConnectorPropTargetMeshParameterName) == 0x0001E4, "Member 'URiderComponent::ConnectorPropTargetMeshParameterName' has a wrong offset!");
static_assert(offsetof(URiderComponent, SimulatedSmoothedRotationSpeed) == 0x0001E8, "Member 'URiderComponent::SimulatedSmoothedRotationSpeed' has a wrong offset!");
static_assert(offsetof(URiderComponent, ExcludedEmoteTags) == 0x0001F0, "Member 'URiderComponent::ExcludedEmoteTags' has a wrong offset!");
static_assert(offsetof(URiderComponent, ActiveRidable) == 0x000218, "Member 'URiderComponent::ActiveRidable' has a wrong offset!");
static_assert(offsetof(URiderComponent, LastRidable) == 0x000220, "Member 'URiderComponent::LastRidable' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderProp) == 0x000228, "Member 'URiderComponent::RiderProp' has a wrong offset!");
static_assert(offsetof(URiderComponent, ConnectorProp) == 0x000230, "Member 'URiderComponent::ConnectorProp' has a wrong offset!");
static_assert(offsetof(URiderComponent, PropAttachSeparation) == 0x000238, "Member 'URiderComponent::PropAttachSeparation' has a wrong offset!");
static_assert(offsetof(URiderComponent, AdditionalAttachOffset) == 0x000250, "Member 'URiderComponent::AdditionalAttachOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, SoftBoundsAttachmentOffset) == 0x000268, "Member 'URiderComponent::SoftBoundsAttachmentOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, HardBoundsAttachmentOffset) == 0x000280, "Member 'URiderComponent::HardBoundsAttachmentOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, PlaylistTagDenylistRowHandle) == 0x000298, "Member 'URiderComponent::PlaylistTagDenylistRowHandle' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderInputComponent) == 0x0002A8, "Member 'URiderComponent::RiderInputComponent' has a wrong offset!");
static_assert(offsetof(URiderComponent, PendingFailedEmoteErrorTags) == 0x0002B0, "Member 'URiderComponent::PendingFailedEmoteErrorTags' has a wrong offset!");
static_assert(offsetof(URiderComponent, ExitLaunchVelocity) == 0x0002D0, "Member 'URiderComponent::ExitLaunchVelocity' has a wrong offset!");
static_assert(offsetof(URiderComponent, JumpExitLaunchVelocity) == 0x000378, "Member 'URiderComponent::JumpExitLaunchVelocity' has a wrong offset!");
static_assert(offsetof(URiderComponent, ActiveAnaltyicsData) == 0x000428, "Member 'URiderComponent::ActiveAnaltyicsData' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidableLocationLastFrame) == 0x0004A8, "Member 'URiderComponent::RidableLocationLastFrame' has a wrong offset!");
static_assert(offsetof(URiderComponent, RestoreCollisionHandle) == 0x0004C8, "Member 'URiderComponent::RestoreCollisionHandle' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidableControlRuntimeData) == 0x0004D0, "Member 'URiderComponent::RidableControlRuntimeData' has a wrong offset!");
static_assert(offsetof(URiderComponent, ClampedController) == 0x000514, "Member 'URiderComponent::ClampedController' has a wrong offset!");
static_assert(offsetof(URiderComponent, bIsPetting) == 0x00051C, "Member 'URiderComponent::bIsPetting' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingCapsuleHalfHeight) == 0x000520, "Member 'URiderComponent::RidingCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingCapsuleRadius) == 0x000548, "Member 'URiderComponent::RidingCapsuleRadius' has a wrong offset!");
static_assert(offsetof(URiderComponent, CollisionProfileName) == 0x000580, "Member 'URiderComponent::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(URiderComponent, TraceRadius) == 0x000588, "Member 'URiderComponent::TraceRadius' has a wrong offset!");
static_assert(offsetof(URiderComponent, TraceLength) == 0x0005B0, "Member 'URiderComponent::TraceLength' has a wrong offset!");
static_assert(offsetof(URiderComponent, bPreventExitRidingFromInput) == 0x0005D8, "Member 'URiderComponent::bPreventExitRidingFromInput' has a wrong offset!");

// Class RidingCodeRuntime.FortCameraMode_Riding
// 0x0020 (0x1BC0 - 0x1BA0)
class UFortCameraMode_Riding : public UFortCameraMode_ThirdPerson
{
public:
	struct FVector                                OriginOffset;                                      // 0x1BA0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB8[0x8];                                     // 0x1BB8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_Riding">();
	}
	static class UFortCameraMode_Riding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_Riding>();
	}
};
static_assert(alignof(UFortCameraMode_Riding) == 0x000010, "Wrong alignment on UFortCameraMode_Riding");
static_assert(sizeof(UFortCameraMode_Riding) == 0x001BC0, "Wrong size on UFortCameraMode_Riding");
static_assert(offsetof(UFortCameraMode_Riding, OriginOffset) == 0x001BA0, "Member 'UFortCameraMode_Riding::OriginOffset' has a wrong offset!");

// Class RidingCodeRuntime.ControllingRiderComponent
// 0x0058 (0x06C8 - 0x0670)
class UControllingRiderComponent : public URiderComponent
{
public:
	class UFortInputMappingContext*               ControllingRidingInputContext;                     // 0x0670(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           RidingAbility;                                     // 0x0678(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           GamepadRidingAbility;                              // 0x0680(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanControlRidable;                                // 0x0688(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsControllingRidable;                             // 0x0689(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERidingControlInputStyle                      ControlInputStyle;                                 // 0x068A(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68B[0xD];                                      // 0x068B(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRidingControlInputState               ReplicatedControlInputState;                       // 0x0698(0x000C)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRidingControlInputStateReliable       ReplicatedControlInputStateReliable;               // 0x06A4(0x0001)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRidingControlInputStateUnreliable     ReplicatedControlInputStateUnreliable;             // 0x06A5(0x0002)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A7[0x1];                                      // 0x06A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInputComponent*                    ControllingRiderInputComponent;                    // 0x06A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B0[0x10];                                     // 0x06B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoRunDoubleTapTimestamp;                         // 0x06C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBePet;                                         // 0x06C4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C5[0x3];                                      // 0x06C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ControllingActor_OnJumpInput(bool bPressed);
	void ControllingActor_OnMoveForward(float Val);
	void ControllingActor_OnMoveRight(float Val);
	void HandleGamepadRidingAbilityPressed();
	void HandlePettingAbilityPressed();
	void HandleRequestPettingStart();
	void HandleRequestPettingStop();
	void HandleRidingAbilityPressed();
	void HandleRidingAbilityReleased();
	void HandleSpotActorOrPettingAbilityPressed();
	void HandleSpotActorOrPettingAbilityReleased();
	void OnRep_ControlInputReliable();
	void OnRep_ControlInputUnreliable();
	void OnRep_IsControllingRidable();
	void OnSprintCanceled();
	void ReloadPressed();
	void ServerCancelPetting();
	void ServerUpdateControlInputStateReliable(const struct FRidingControlInputStateReliable& InputState);
	void ServerUpdateControlInputStateUnreliable(const struct FRidingControlInputStateUnreliable& InputState);
	void UpdateFromInput(float DeltaTime, const struct FRidingControlInputState& InputState);

	const struct FRidingControlInputState GetControlInputState() const;
	bool IsTryingToMove(float Tolerance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControllingRiderComponent">();
	}
	static class UControllingRiderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControllingRiderComponent>();
	}
};
static_assert(alignof(UControllingRiderComponent) == 0x000008, "Wrong alignment on UControllingRiderComponent");
static_assert(sizeof(UControllingRiderComponent) == 0x0006C8, "Wrong size on UControllingRiderComponent");
static_assert(offsetof(UControllingRiderComponent, ControllingRidingInputContext) == 0x000670, "Member 'UControllingRiderComponent::ControllingRidingInputContext' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, RidingAbility) == 0x000678, "Member 'UControllingRiderComponent::RidingAbility' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, GamepadRidingAbility) == 0x000680, "Member 'UControllingRiderComponent::GamepadRidingAbility' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, bCanControlRidable) == 0x000688, "Member 'UControllingRiderComponent::bCanControlRidable' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, bIsControllingRidable) == 0x000689, "Member 'UControllingRiderComponent::bIsControllingRidable' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ControlInputStyle) == 0x00068A, "Member 'UControllingRiderComponent::ControlInputStyle' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ReplicatedControlInputState) == 0x000698, "Member 'UControllingRiderComponent::ReplicatedControlInputState' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ReplicatedControlInputStateReliable) == 0x0006A4, "Member 'UControllingRiderComponent::ReplicatedControlInputStateReliable' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ReplicatedControlInputStateUnreliable) == 0x0006A5, "Member 'UControllingRiderComponent::ReplicatedControlInputStateUnreliable' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ControllingRiderInputComponent) == 0x0006A8, "Member 'UControllingRiderComponent::ControllingRiderInputComponent' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, AutoRunDoubleTapTimestamp) == 0x0006C0, "Member 'UControllingRiderComponent::AutoRunDoubleTapTimestamp' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, bCanBePet) == 0x0006C4, "Member 'UControllingRiderComponent::bCanBePet' has a wrong offset!");

// Class RidingCodeRuntime.RidingAnalytics
// 0x0000 (0x0028 - 0x0028)
class URidingAnalytics final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RidingAnalytics">();
	}
	static class URidingAnalytics* GetDefaultObj()
	{
		return GetDefaultObjImpl<URidingAnalytics>();
	}
};
static_assert(alignof(URidingAnalytics) == 0x000008, "Wrong alignment on URidingAnalytics");
static_assert(sizeof(URidingAnalytics) == 0x000028, "Wrong size on URidingAnalytics");

// Class RidingCodeRuntime.FortAthenaPettingWildlifeTelemetryData
// 0x0008 (0x0030 - 0x0028)
class UFortAthenaPettingWildlifeTelemetryData final : public UFortAthenaAITelemetryData
{
public:
	int32                                         PetCount;                                          // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPetted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaPettingWildlifeTelemetryData">();
	}
	static class UFortAthenaPettingWildlifeTelemetryData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaPettingWildlifeTelemetryData>();
	}
};
static_assert(alignof(UFortAthenaPettingWildlifeTelemetryData) == 0x000008, "Wrong alignment on UFortAthenaPettingWildlifeTelemetryData");
static_assert(sizeof(UFortAthenaPettingWildlifeTelemetryData) == 0x000030, "Wrong size on UFortAthenaPettingWildlifeTelemetryData");
static_assert(offsetof(UFortAthenaPettingWildlifeTelemetryData, PetCount) == 0x000028, "Member 'UFortAthenaPettingWildlifeTelemetryData::PetCount' has a wrong offset!");

}

