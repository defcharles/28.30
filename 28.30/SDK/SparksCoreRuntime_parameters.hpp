#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksCoreRuntime

#include "Basic.hpp"

#include "SparksCoreRuntime_structs.hpp"


namespace SDK::Params
{

// Function SparksCoreRuntime.SparksClientSettingRecordPartition.SetGameplayMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct SparksClientSettingRecordPartition_SetGameplayMusicVolume final
{
public:
	float                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksClientSettingRecordPartition_SetGameplayMusicVolume) == 0x000004, "Wrong alignment on SparksClientSettingRecordPartition_SetGameplayMusicVolume");
static_assert(sizeof(SparksClientSettingRecordPartition_SetGameplayMusicVolume) == 0x000004, "Wrong size on SparksClientSettingRecordPartition_SetGameplayMusicVolume");
static_assert(offsetof(SparksClientSettingRecordPartition_SetGameplayMusicVolume, NewVolume) == 0x000000, "Member 'SparksClientSettingRecordPartition_SetGameplayMusicVolume::NewVolume' has a wrong offset!");

// Function SparksCoreRuntime.SparksClientSettingRecordPartition.GetGameplayMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct SparksClientSettingRecordPartition_GetGameplayMusicVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksClientSettingRecordPartition_GetGameplayMusicVolume) == 0x000004, "Wrong alignment on SparksClientSettingRecordPartition_GetGameplayMusicVolume");
static_assert(sizeof(SparksClientSettingRecordPartition_GetGameplayMusicVolume) == 0x000004, "Wrong size on SparksClientSettingRecordPartition_GetGameplayMusicVolume");
static_assert(offsetof(SparksClientSettingRecordPartition_GetGameplayMusicVolume, ReturnValue) == 0x000000, "Member 'SparksClientSettingRecordPartition_GetGameplayMusicVolume::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.CosmeticSubtypeToInstrumentType
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_CosmeticSubtypeToInstrumentType final
{
public:
	ESparksAccountItemSubtype                     Subtype;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_CosmeticSubtypeToInstrumentType) == 0x000001, "Wrong alignment on SparksCore_BPFL_CosmeticSubtypeToInstrumentType");
static_assert(sizeof(SparksCore_BPFL_CosmeticSubtypeToInstrumentType) == 0x000002, "Wrong size on SparksCore_BPFL_CosmeticSubtypeToInstrumentType");
static_assert(offsetof(SparksCore_BPFL_CosmeticSubtypeToInstrumentType, Subtype) == 0x000000, "Member 'SparksCore_BPFL_CosmeticSubtypeToInstrumentType::Subtype' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_CosmeticSubtypeToInstrumentType, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_CosmeticSubtypeToInstrumentType::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllBassMidiNoteEnums
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllBassMidiNoteEnums final
{
public:
	TArray<EBassMidiNoteEvent>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllBassMidiNoteEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllBassMidiNoteEnums");
static_assert(sizeof(SparksCore_BPFL_GetAllBassMidiNoteEnums) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllBassMidiNoteEnums");
static_assert(offsetof(SparksCore_BPFL_GetAllBassMidiNoteEnums, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllBassMidiNoteEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllBassMidiNoteIntegers
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllBassMidiNoteIntegers final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllBassMidiNoteIntegers) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllBassMidiNoteIntegers");
static_assert(sizeof(SparksCore_BPFL_GetAllBassMidiNoteIntegers) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllBassMidiNoteIntegers");
static_assert(offsetof(SparksCore_BPFL_GetAllBassMidiNoteIntegers, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllBassMidiNoteIntegers::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllBassMidiTextEnums
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllBassMidiTextEnums final
{
public:
	TArray<EBassMidiTextEvent>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllBassMidiTextEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllBassMidiTextEnums");
static_assert(sizeof(SparksCore_BPFL_GetAllBassMidiTextEnums) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllBassMidiTextEnums");
static_assert(offsetof(SparksCore_BPFL_GetAllBassMidiTextEnums, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllBassMidiTextEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllBassMidiTextStrings
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllBassMidiTextStrings final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllBassMidiTextStrings) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllBassMidiTextStrings");
static_assert(sizeof(SparksCore_BPFL_GetAllBassMidiTextStrings) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllBassMidiTextStrings");
static_assert(offsetof(SparksCore_BPFL_GetAllBassMidiTextStrings, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllBassMidiTextStrings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllDrumMidiNoteEnums
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllDrumMidiNoteEnums final
{
public:
	TArray<EDrumMidiNoteEvent>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllDrumMidiNoteEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllDrumMidiNoteEnums");
static_assert(sizeof(SparksCore_BPFL_GetAllDrumMidiNoteEnums) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllDrumMidiNoteEnums");
static_assert(offsetof(SparksCore_BPFL_GetAllDrumMidiNoteEnums, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllDrumMidiNoteEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllDrumMidiNoteIntegers
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllDrumMidiNoteIntegers final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllDrumMidiNoteIntegers) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllDrumMidiNoteIntegers");
static_assert(sizeof(SparksCore_BPFL_GetAllDrumMidiNoteIntegers) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllDrumMidiNoteIntegers");
static_assert(offsetof(SparksCore_BPFL_GetAllDrumMidiNoteIntegers, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllDrumMidiNoteIntegers::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllDrumMidiTextEnums
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllDrumMidiTextEnums final
{
public:
	TArray<EDrumMidiTextEvent>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllDrumMidiTextEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllDrumMidiTextEnums");
static_assert(sizeof(SparksCore_BPFL_GetAllDrumMidiTextEnums) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllDrumMidiTextEnums");
static_assert(offsetof(SparksCore_BPFL_GetAllDrumMidiTextEnums, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllDrumMidiTextEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllDrumMidiTextStrings
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllDrumMidiTextStrings final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllDrumMidiTextStrings) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllDrumMidiTextStrings");
static_assert(sizeof(SparksCore_BPFL_GetAllDrumMidiTextStrings) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllDrumMidiTextStrings");
static_assert(offsetof(SparksCore_BPFL_GetAllDrumMidiTextStrings, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllDrumMidiTextStrings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllGuitarMidiNoteEnums
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllGuitarMidiNoteEnums final
{
public:
	TArray<EGuitarMidiNoteEvent>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllGuitarMidiNoteEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllGuitarMidiNoteEnums");
static_assert(sizeof(SparksCore_BPFL_GetAllGuitarMidiNoteEnums) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllGuitarMidiNoteEnums");
static_assert(offsetof(SparksCore_BPFL_GetAllGuitarMidiNoteEnums, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllGuitarMidiNoteEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllGuitarMidiNoteIntegers
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllGuitarMidiNoteIntegers final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllGuitarMidiNoteIntegers) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllGuitarMidiNoteIntegers");
static_assert(sizeof(SparksCore_BPFL_GetAllGuitarMidiNoteIntegers) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllGuitarMidiNoteIntegers");
static_assert(offsetof(SparksCore_BPFL_GetAllGuitarMidiNoteIntegers, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllGuitarMidiNoteIntegers::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllGuitarMidiTextEnums
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllGuitarMidiTextEnums final
{
public:
	TArray<EGuitarMidiTextEvent>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllGuitarMidiTextEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllGuitarMidiTextEnums");
static_assert(sizeof(SparksCore_BPFL_GetAllGuitarMidiTextEnums) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllGuitarMidiTextEnums");
static_assert(offsetof(SparksCore_BPFL_GetAllGuitarMidiTextEnums, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllGuitarMidiTextEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllGuitarMidiTextStrings
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllGuitarMidiTextStrings final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllGuitarMidiTextStrings) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllGuitarMidiTextStrings");
static_assert(sizeof(SparksCore_BPFL_GetAllGuitarMidiTextStrings) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllGuitarMidiTextStrings");
static_assert(offsetof(SparksCore_BPFL_GetAllGuitarMidiTextStrings, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllGuitarMidiTextStrings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllInstrumentSwapEventStrings
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllInstrumentSwapEventStrings final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllInstrumentSwapEventStrings) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllInstrumentSwapEventStrings");
static_assert(sizeof(SparksCore_BPFL_GetAllInstrumentSwapEventStrings) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllInstrumentSwapEventStrings");
static_assert(offsetof(SparksCore_BPFL_GetAllInstrumentSwapEventStrings, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllInstrumentSwapEventStrings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllVocalsMidiNoteEnums
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllVocalsMidiNoteEnums final
{
public:
	TArray<EVocalsMidiNoteEvent>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllVocalsMidiNoteEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllVocalsMidiNoteEnums");
static_assert(sizeof(SparksCore_BPFL_GetAllVocalsMidiNoteEnums) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllVocalsMidiNoteEnums");
static_assert(offsetof(SparksCore_BPFL_GetAllVocalsMidiNoteEnums, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllVocalsMidiNoteEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllVocalsMidiNoteIntegers
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllVocalsMidiNoteIntegers final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllVocalsMidiNoteIntegers) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllVocalsMidiNoteIntegers");
static_assert(sizeof(SparksCore_BPFL_GetAllVocalsMidiNoteIntegers) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllVocalsMidiNoteIntegers");
static_assert(offsetof(SparksCore_BPFL_GetAllVocalsMidiNoteIntegers, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllVocalsMidiNoteIntegers::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllVocalsMidiTextEnums
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllVocalsMidiTextEnums final
{
public:
	TArray<EVocalsMidiTextEvent>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllVocalsMidiTextEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllVocalsMidiTextEnums");
static_assert(sizeof(SparksCore_BPFL_GetAllVocalsMidiTextEnums) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllVocalsMidiTextEnums");
static_assert(offsetof(SparksCore_BPFL_GetAllVocalsMidiTextEnums, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllVocalsMidiTextEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetAllVocalsMidiTextStrings
// 0x0010 (0x0010 - 0x0000)
struct SparksCore_BPFL_GetAllVocalsMidiTextStrings final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetAllVocalsMidiTextStrings) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetAllVocalsMidiTextStrings");
static_assert(sizeof(SparksCore_BPFL_GetAllVocalsMidiTextStrings) == 0x000010, "Wrong size on SparksCore_BPFL_GetAllVocalsMidiTextStrings");
static_assert(offsetof(SparksCore_BPFL_GetAllVocalsMidiTextStrings, ReturnValue) == 0x000000, "Member 'SparksCore_BPFL_GetAllVocalsMidiTextStrings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetBassMidiNoteEnumFromInteger
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_GetBassMidiNoteEnumFromInteger final
{
public:
	uint8                                         MidiNoteEventInt;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBassMidiNoteEvent                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetBassMidiNoteEnumFromInteger) == 0x000001, "Wrong alignment on SparksCore_BPFL_GetBassMidiNoteEnumFromInteger");
static_assert(sizeof(SparksCore_BPFL_GetBassMidiNoteEnumFromInteger) == 0x000002, "Wrong size on SparksCore_BPFL_GetBassMidiNoteEnumFromInteger");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiNoteEnumFromInteger, MidiNoteEventInt) == 0x000000, "Member 'SparksCore_BPFL_GetBassMidiNoteEnumFromInteger::MidiNoteEventInt' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiNoteEnumFromInteger, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_GetBassMidiNoteEnumFromInteger::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetBassMidiNoteEnumsFromIntegers
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetBassMidiNoteEnumsFromIntegers final
{
public:
	TArray<uint8>                                 MidiNoteEventInts;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EBassMidiNoteEvent>                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetBassMidiNoteEnumsFromIntegers) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetBassMidiNoteEnumsFromIntegers");
static_assert(sizeof(SparksCore_BPFL_GetBassMidiNoteEnumsFromIntegers) == 0x000020, "Wrong size on SparksCore_BPFL_GetBassMidiNoteEnumsFromIntegers");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiNoteEnumsFromIntegers, MidiNoteEventInts) == 0x000000, "Member 'SparksCore_BPFL_GetBassMidiNoteEnumsFromIntegers::MidiNoteEventInts' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiNoteEnumsFromIntegers, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetBassMidiNoteEnumsFromIntegers::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetBassMidiNoteIntegerFromEnum
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_GetBassMidiNoteIntegerFromEnum final
{
public:
	EBassMidiNoteEvent                            MidiNoteEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetBassMidiNoteIntegerFromEnum) == 0x000001, "Wrong alignment on SparksCore_BPFL_GetBassMidiNoteIntegerFromEnum");
static_assert(sizeof(SparksCore_BPFL_GetBassMidiNoteIntegerFromEnum) == 0x000002, "Wrong size on SparksCore_BPFL_GetBassMidiNoteIntegerFromEnum");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiNoteIntegerFromEnum, MidiNoteEvent) == 0x000000, "Member 'SparksCore_BPFL_GetBassMidiNoteIntegerFromEnum::MidiNoteEvent' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiNoteIntegerFromEnum, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_GetBassMidiNoteIntegerFromEnum::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetBassMidiNoteIntegersFromEnums
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetBassMidiNoteIntegersFromEnums final
{
public:
	TArray<EBassMidiNoteEvent>                    MidiNoteEvents;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetBassMidiNoteIntegersFromEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetBassMidiNoteIntegersFromEnums");
static_assert(sizeof(SparksCore_BPFL_GetBassMidiNoteIntegersFromEnums) == 0x000020, "Wrong size on SparksCore_BPFL_GetBassMidiNoteIntegersFromEnums");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiNoteIntegersFromEnums, MidiNoteEvents) == 0x000000, "Member 'SparksCore_BPFL_GetBassMidiNoteIntegersFromEnums::MidiNoteEvents' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiNoteIntegersFromEnums, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetBassMidiNoteIntegersFromEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetBassMidiTextEnumFromString
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetBassMidiTextEnumFromString final
{
public:
	class FString                                 MidiTextEventString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBassMidiTextEvent                            ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCore_BPFL_GetBassMidiTextEnumFromString) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetBassMidiTextEnumFromString");
static_assert(sizeof(SparksCore_BPFL_GetBassMidiTextEnumFromString) == 0x000018, "Wrong size on SparksCore_BPFL_GetBassMidiTextEnumFromString");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiTextEnumFromString, MidiTextEventString) == 0x000000, "Member 'SparksCore_BPFL_GetBassMidiTextEnumFromString::MidiTextEventString' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiTextEnumFromString, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetBassMidiTextEnumFromString::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetBassMidiTextEnumsFromStrings
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetBassMidiTextEnumsFromStrings final
{
public:
	TArray<class FString>                         MidiTextEventStrings;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EBassMidiTextEvent>                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetBassMidiTextEnumsFromStrings) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetBassMidiTextEnumsFromStrings");
static_assert(sizeof(SparksCore_BPFL_GetBassMidiTextEnumsFromStrings) == 0x000020, "Wrong size on SparksCore_BPFL_GetBassMidiTextEnumsFromStrings");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiTextEnumsFromStrings, MidiTextEventStrings) == 0x000000, "Member 'SparksCore_BPFL_GetBassMidiTextEnumsFromStrings::MidiTextEventStrings' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiTextEnumsFromStrings, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetBassMidiTextEnumsFromStrings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetBassMidiTextStringFromEnum
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetBassMidiTextStringFromEnum final
{
public:
	EBassMidiTextEvent                            MidiTextEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetBassMidiTextStringFromEnum) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetBassMidiTextStringFromEnum");
static_assert(sizeof(SparksCore_BPFL_GetBassMidiTextStringFromEnum) == 0x000018, "Wrong size on SparksCore_BPFL_GetBassMidiTextStringFromEnum");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiTextStringFromEnum, MidiTextEvent) == 0x000000, "Member 'SparksCore_BPFL_GetBassMidiTextStringFromEnum::MidiTextEvent' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiTextStringFromEnum, ReturnValue) == 0x000008, "Member 'SparksCore_BPFL_GetBassMidiTextStringFromEnum::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetBassMidiTextStringsFromEnums
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetBassMidiTextStringsFromEnums final
{
public:
	TArray<EBassMidiTextEvent>                    MidiTextEvents;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetBassMidiTextStringsFromEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetBassMidiTextStringsFromEnums");
static_assert(sizeof(SparksCore_BPFL_GetBassMidiTextStringsFromEnums) == 0x000020, "Wrong size on SparksCore_BPFL_GetBassMidiTextStringsFromEnums");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiTextStringsFromEnums, MidiTextEvents) == 0x000000, "Member 'SparksCore_BPFL_GetBassMidiTextStringsFromEnums::MidiTextEvents' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetBassMidiTextStringsFromEnums, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetBassMidiTextStringsFromEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetDrumMidiNoteEnumFromInteger
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_GetDrumMidiNoteEnumFromInteger final
{
public:
	uint8                                         MidiNoteEventInt;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrumMidiNoteEvent                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetDrumMidiNoteEnumFromInteger) == 0x000001, "Wrong alignment on SparksCore_BPFL_GetDrumMidiNoteEnumFromInteger");
static_assert(sizeof(SparksCore_BPFL_GetDrumMidiNoteEnumFromInteger) == 0x000002, "Wrong size on SparksCore_BPFL_GetDrumMidiNoteEnumFromInteger");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiNoteEnumFromInteger, MidiNoteEventInt) == 0x000000, "Member 'SparksCore_BPFL_GetDrumMidiNoteEnumFromInteger::MidiNoteEventInt' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiNoteEnumFromInteger, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_GetDrumMidiNoteEnumFromInteger::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetDrumMidiNoteEnumsFromIntegers
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetDrumMidiNoteEnumsFromIntegers final
{
public:
	TArray<uint8>                                 MidiNoteEventInts;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EDrumMidiNoteEvent>                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetDrumMidiNoteEnumsFromIntegers) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetDrumMidiNoteEnumsFromIntegers");
static_assert(sizeof(SparksCore_BPFL_GetDrumMidiNoteEnumsFromIntegers) == 0x000020, "Wrong size on SparksCore_BPFL_GetDrumMidiNoteEnumsFromIntegers");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiNoteEnumsFromIntegers, MidiNoteEventInts) == 0x000000, "Member 'SparksCore_BPFL_GetDrumMidiNoteEnumsFromIntegers::MidiNoteEventInts' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiNoteEnumsFromIntegers, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetDrumMidiNoteEnumsFromIntegers::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetDrumMidiNoteIntegerFromEnum
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_GetDrumMidiNoteIntegerFromEnum final
{
public:
	EDrumMidiNoteEvent                            MidiNoteEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetDrumMidiNoteIntegerFromEnum) == 0x000001, "Wrong alignment on SparksCore_BPFL_GetDrumMidiNoteIntegerFromEnum");
static_assert(sizeof(SparksCore_BPFL_GetDrumMidiNoteIntegerFromEnum) == 0x000002, "Wrong size on SparksCore_BPFL_GetDrumMidiNoteIntegerFromEnum");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiNoteIntegerFromEnum, MidiNoteEvent) == 0x000000, "Member 'SparksCore_BPFL_GetDrumMidiNoteIntegerFromEnum::MidiNoteEvent' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiNoteIntegerFromEnum, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_GetDrumMidiNoteIntegerFromEnum::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetDrumMidiNoteIntegersFromEnums
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetDrumMidiNoteIntegersFromEnums final
{
public:
	TArray<EDrumMidiNoteEvent>                    MidiNoteEvents;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetDrumMidiNoteIntegersFromEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetDrumMidiNoteIntegersFromEnums");
static_assert(sizeof(SparksCore_BPFL_GetDrumMidiNoteIntegersFromEnums) == 0x000020, "Wrong size on SparksCore_BPFL_GetDrumMidiNoteIntegersFromEnums");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiNoteIntegersFromEnums, MidiNoteEvents) == 0x000000, "Member 'SparksCore_BPFL_GetDrumMidiNoteIntegersFromEnums::MidiNoteEvents' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiNoteIntegersFromEnums, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetDrumMidiNoteIntegersFromEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetDrumMidiTextEnumFromString
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetDrumMidiTextEnumFromString final
{
public:
	class FString                                 MidiTextEventString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrumMidiTextEvent                            ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCore_BPFL_GetDrumMidiTextEnumFromString) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetDrumMidiTextEnumFromString");
static_assert(sizeof(SparksCore_BPFL_GetDrumMidiTextEnumFromString) == 0x000018, "Wrong size on SparksCore_BPFL_GetDrumMidiTextEnumFromString");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiTextEnumFromString, MidiTextEventString) == 0x000000, "Member 'SparksCore_BPFL_GetDrumMidiTextEnumFromString::MidiTextEventString' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiTextEnumFromString, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetDrumMidiTextEnumFromString::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetDrumMidiTextEnumsFromStrings
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetDrumMidiTextEnumsFromStrings final
{
public:
	TArray<class FString>                         MidiTextEventStrings;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EDrumMidiTextEvent>                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetDrumMidiTextEnumsFromStrings) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetDrumMidiTextEnumsFromStrings");
static_assert(sizeof(SparksCore_BPFL_GetDrumMidiTextEnumsFromStrings) == 0x000020, "Wrong size on SparksCore_BPFL_GetDrumMidiTextEnumsFromStrings");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiTextEnumsFromStrings, MidiTextEventStrings) == 0x000000, "Member 'SparksCore_BPFL_GetDrumMidiTextEnumsFromStrings::MidiTextEventStrings' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiTextEnumsFromStrings, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetDrumMidiTextEnumsFromStrings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetDrumMidiTextStringFromEnum
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetDrumMidiTextStringFromEnum final
{
public:
	EDrumMidiTextEvent                            MidiTextEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetDrumMidiTextStringFromEnum) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetDrumMidiTextStringFromEnum");
static_assert(sizeof(SparksCore_BPFL_GetDrumMidiTextStringFromEnum) == 0x000018, "Wrong size on SparksCore_BPFL_GetDrumMidiTextStringFromEnum");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiTextStringFromEnum, MidiTextEvent) == 0x000000, "Member 'SparksCore_BPFL_GetDrumMidiTextStringFromEnum::MidiTextEvent' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiTextStringFromEnum, ReturnValue) == 0x000008, "Member 'SparksCore_BPFL_GetDrumMidiTextStringFromEnum::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetDrumMidiTextStringsFromEnums
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetDrumMidiTextStringsFromEnums final
{
public:
	TArray<EDrumMidiTextEvent>                    MidiTextEvents;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetDrumMidiTextStringsFromEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetDrumMidiTextStringsFromEnums");
static_assert(sizeof(SparksCore_BPFL_GetDrumMidiTextStringsFromEnums) == 0x000020, "Wrong size on SparksCore_BPFL_GetDrumMidiTextStringsFromEnums");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiTextStringsFromEnums, MidiTextEvents) == 0x000000, "Member 'SparksCore_BPFL_GetDrumMidiTextStringsFromEnums::MidiTextEvents' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetDrumMidiTextStringsFromEnums, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetDrumMidiTextStringsFromEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetGuitarMidiNoteEnumFromInteger
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_GetGuitarMidiNoteEnumFromInteger final
{
public:
	uint8                                         MidiNoteEventInt;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuitarMidiNoteEvent                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetGuitarMidiNoteEnumFromInteger) == 0x000001, "Wrong alignment on SparksCore_BPFL_GetGuitarMidiNoteEnumFromInteger");
static_assert(sizeof(SparksCore_BPFL_GetGuitarMidiNoteEnumFromInteger) == 0x000002, "Wrong size on SparksCore_BPFL_GetGuitarMidiNoteEnumFromInteger");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiNoteEnumFromInteger, MidiNoteEventInt) == 0x000000, "Member 'SparksCore_BPFL_GetGuitarMidiNoteEnumFromInteger::MidiNoteEventInt' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiNoteEnumFromInteger, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_GetGuitarMidiNoteEnumFromInteger::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetGuitarMidiNoteEnumsFromIntegers
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetGuitarMidiNoteEnumsFromIntegers final
{
public:
	TArray<uint8>                                 MidiNoteEventInts;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EGuitarMidiNoteEvent>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetGuitarMidiNoteEnumsFromIntegers) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetGuitarMidiNoteEnumsFromIntegers");
static_assert(sizeof(SparksCore_BPFL_GetGuitarMidiNoteEnumsFromIntegers) == 0x000020, "Wrong size on SparksCore_BPFL_GetGuitarMidiNoteEnumsFromIntegers");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiNoteEnumsFromIntegers, MidiNoteEventInts) == 0x000000, "Member 'SparksCore_BPFL_GetGuitarMidiNoteEnumsFromIntegers::MidiNoteEventInts' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiNoteEnumsFromIntegers, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetGuitarMidiNoteEnumsFromIntegers::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetGuitarMidiNoteIntegerFromEnum
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_GetGuitarMidiNoteIntegerFromEnum final
{
public:
	EGuitarMidiNoteEvent                          MidiNoteEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetGuitarMidiNoteIntegerFromEnum) == 0x000001, "Wrong alignment on SparksCore_BPFL_GetGuitarMidiNoteIntegerFromEnum");
static_assert(sizeof(SparksCore_BPFL_GetGuitarMidiNoteIntegerFromEnum) == 0x000002, "Wrong size on SparksCore_BPFL_GetGuitarMidiNoteIntegerFromEnum");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiNoteIntegerFromEnum, MidiNoteEvent) == 0x000000, "Member 'SparksCore_BPFL_GetGuitarMidiNoteIntegerFromEnum::MidiNoteEvent' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiNoteIntegerFromEnum, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_GetGuitarMidiNoteIntegerFromEnum::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetGuitarMidiNoteIntegersFromEnums
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetGuitarMidiNoteIntegersFromEnums final
{
public:
	TArray<EGuitarMidiNoteEvent>                  MidiNoteEvents;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetGuitarMidiNoteIntegersFromEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetGuitarMidiNoteIntegersFromEnums");
static_assert(sizeof(SparksCore_BPFL_GetGuitarMidiNoteIntegersFromEnums) == 0x000020, "Wrong size on SparksCore_BPFL_GetGuitarMidiNoteIntegersFromEnums");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiNoteIntegersFromEnums, MidiNoteEvents) == 0x000000, "Member 'SparksCore_BPFL_GetGuitarMidiNoteIntegersFromEnums::MidiNoteEvents' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiNoteIntegersFromEnums, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetGuitarMidiNoteIntegersFromEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetGuitarMidiTextEnumFromString
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetGuitarMidiTextEnumFromString final
{
public:
	class FString                                 MidiTextEventString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuitarMidiTextEvent                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCore_BPFL_GetGuitarMidiTextEnumFromString) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetGuitarMidiTextEnumFromString");
static_assert(sizeof(SparksCore_BPFL_GetGuitarMidiTextEnumFromString) == 0x000018, "Wrong size on SparksCore_BPFL_GetGuitarMidiTextEnumFromString");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiTextEnumFromString, MidiTextEventString) == 0x000000, "Member 'SparksCore_BPFL_GetGuitarMidiTextEnumFromString::MidiTextEventString' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiTextEnumFromString, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetGuitarMidiTextEnumFromString::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetGuitarMidiTextEnumsFromStrings
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetGuitarMidiTextEnumsFromStrings final
{
public:
	TArray<class FString>                         MidiTextEventStrings;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EGuitarMidiTextEvent>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetGuitarMidiTextEnumsFromStrings) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetGuitarMidiTextEnumsFromStrings");
static_assert(sizeof(SparksCore_BPFL_GetGuitarMidiTextEnumsFromStrings) == 0x000020, "Wrong size on SparksCore_BPFL_GetGuitarMidiTextEnumsFromStrings");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiTextEnumsFromStrings, MidiTextEventStrings) == 0x000000, "Member 'SparksCore_BPFL_GetGuitarMidiTextEnumsFromStrings::MidiTextEventStrings' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiTextEnumsFromStrings, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetGuitarMidiTextEnumsFromStrings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetGuitarMidiTextStringFromEnum
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetGuitarMidiTextStringFromEnum final
{
public:
	EGuitarMidiTextEvent                          MidiTextEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetGuitarMidiTextStringFromEnum) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetGuitarMidiTextStringFromEnum");
static_assert(sizeof(SparksCore_BPFL_GetGuitarMidiTextStringFromEnum) == 0x000018, "Wrong size on SparksCore_BPFL_GetGuitarMidiTextStringFromEnum");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiTextStringFromEnum, MidiTextEvent) == 0x000000, "Member 'SparksCore_BPFL_GetGuitarMidiTextStringFromEnum::MidiTextEvent' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiTextStringFromEnum, ReturnValue) == 0x000008, "Member 'SparksCore_BPFL_GetGuitarMidiTextStringFromEnum::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetGuitarMidiTextStringsFromEnums
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetGuitarMidiTextStringsFromEnums final
{
public:
	TArray<EGuitarMidiTextEvent>                  MidiTextEvents;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetGuitarMidiTextStringsFromEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetGuitarMidiTextStringsFromEnums");
static_assert(sizeof(SparksCore_BPFL_GetGuitarMidiTextStringsFromEnums) == 0x000020, "Wrong size on SparksCore_BPFL_GetGuitarMidiTextStringsFromEnums");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiTextStringsFromEnums, MidiTextEvents) == 0x000000, "Member 'SparksCore_BPFL_GetGuitarMidiTextStringsFromEnums::MidiTextEvents' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetGuitarMidiTextStringsFromEnums, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetGuitarMidiTextStringsFromEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetInstrumentSwapStringFromType
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetInstrumentSwapStringFromType final
{
public:
	ESparksInstrumentType                         InstrumentType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetInstrumentSwapStringFromType) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetInstrumentSwapStringFromType");
static_assert(sizeof(SparksCore_BPFL_GetInstrumentSwapStringFromType) == 0x000018, "Wrong size on SparksCore_BPFL_GetInstrumentSwapStringFromType");
static_assert(offsetof(SparksCore_BPFL_GetInstrumentSwapStringFromType, InstrumentType) == 0x000000, "Member 'SparksCore_BPFL_GetInstrumentSwapStringFromType::InstrumentType' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetInstrumentSwapStringFromType, ReturnValue) == 0x000008, "Member 'SparksCore_BPFL_GetInstrumentSwapStringFromType::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetInstrumentTypeFromSwapString
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetInstrumentTypeFromSwapString final
{
public:
	class FString                                 InstrumentSwapString;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCore_BPFL_GetInstrumentTypeFromSwapString) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetInstrumentTypeFromSwapString");
static_assert(sizeof(SparksCore_BPFL_GetInstrumentTypeFromSwapString) == 0x000018, "Wrong size on SparksCore_BPFL_GetInstrumentTypeFromSwapString");
static_assert(offsetof(SparksCore_BPFL_GetInstrumentTypeFromSwapString, InstrumentSwapString) == 0x000000, "Member 'SparksCore_BPFL_GetInstrumentTypeFromSwapString::InstrumentSwapString' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetInstrumentTypeFromSwapString, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetInstrumentTypeFromSwapString::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetVocalsMidiNoteEnumFromInteger
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_GetVocalsMidiNoteEnumFromInteger final
{
public:
	uint8                                         MidiNoteEventInt;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVocalsMidiNoteEvent                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetVocalsMidiNoteEnumFromInteger) == 0x000001, "Wrong alignment on SparksCore_BPFL_GetVocalsMidiNoteEnumFromInteger");
static_assert(sizeof(SparksCore_BPFL_GetVocalsMidiNoteEnumFromInteger) == 0x000002, "Wrong size on SparksCore_BPFL_GetVocalsMidiNoteEnumFromInteger");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiNoteEnumFromInteger, MidiNoteEventInt) == 0x000000, "Member 'SparksCore_BPFL_GetVocalsMidiNoteEnumFromInteger::MidiNoteEventInt' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiNoteEnumFromInteger, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_GetVocalsMidiNoteEnumFromInteger::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetVocalsMidiNoteEnumsFromIntegers
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetVocalsMidiNoteEnumsFromIntegers final
{
public:
	TArray<uint8>                                 MidiNoteEventInts;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EVocalsMidiNoteEvent>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetVocalsMidiNoteEnumsFromIntegers) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetVocalsMidiNoteEnumsFromIntegers");
static_assert(sizeof(SparksCore_BPFL_GetVocalsMidiNoteEnumsFromIntegers) == 0x000020, "Wrong size on SparksCore_BPFL_GetVocalsMidiNoteEnumsFromIntegers");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiNoteEnumsFromIntegers, MidiNoteEventInts) == 0x000000, "Member 'SparksCore_BPFL_GetVocalsMidiNoteEnumsFromIntegers::MidiNoteEventInts' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiNoteEnumsFromIntegers, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetVocalsMidiNoteEnumsFromIntegers::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetVocalsMidiNoteIntegerFromEnum
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_GetVocalsMidiNoteIntegerFromEnum final
{
public:
	EVocalsMidiNoteEvent                          MidiNoteEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetVocalsMidiNoteIntegerFromEnum) == 0x000001, "Wrong alignment on SparksCore_BPFL_GetVocalsMidiNoteIntegerFromEnum");
static_assert(sizeof(SparksCore_BPFL_GetVocalsMidiNoteIntegerFromEnum) == 0x000002, "Wrong size on SparksCore_BPFL_GetVocalsMidiNoteIntegerFromEnum");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiNoteIntegerFromEnum, MidiNoteEvent) == 0x000000, "Member 'SparksCore_BPFL_GetVocalsMidiNoteIntegerFromEnum::MidiNoteEvent' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiNoteIntegerFromEnum, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_GetVocalsMidiNoteIntegerFromEnum::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetVocalsMidiNoteIntegersFromEnums
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetVocalsMidiNoteIntegersFromEnums final
{
public:
	TArray<EVocalsMidiNoteEvent>                  MidiNoteEvents;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetVocalsMidiNoteIntegersFromEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetVocalsMidiNoteIntegersFromEnums");
static_assert(sizeof(SparksCore_BPFL_GetVocalsMidiNoteIntegersFromEnums) == 0x000020, "Wrong size on SparksCore_BPFL_GetVocalsMidiNoteIntegersFromEnums");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiNoteIntegersFromEnums, MidiNoteEvents) == 0x000000, "Member 'SparksCore_BPFL_GetVocalsMidiNoteIntegersFromEnums::MidiNoteEvents' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiNoteIntegersFromEnums, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetVocalsMidiNoteIntegersFromEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetVocalsMidiTextEnumFromString
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetVocalsMidiTextEnumFromString final
{
public:
	class FString                                 MidiTextEventString;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVocalsMidiTextEvent                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SparksCore_BPFL_GetVocalsMidiTextEnumFromString) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetVocalsMidiTextEnumFromString");
static_assert(sizeof(SparksCore_BPFL_GetVocalsMidiTextEnumFromString) == 0x000018, "Wrong size on SparksCore_BPFL_GetVocalsMidiTextEnumFromString");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiTextEnumFromString, MidiTextEventString) == 0x000000, "Member 'SparksCore_BPFL_GetVocalsMidiTextEnumFromString::MidiTextEventString' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiTextEnumFromString, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetVocalsMidiTextEnumFromString::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetVocalsMidiTextEnumsFromStrings
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetVocalsMidiTextEnumsFromStrings final
{
public:
	TArray<class FString>                         MidiTextEventStrings;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EVocalsMidiTextEvent>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetVocalsMidiTextEnumsFromStrings) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetVocalsMidiTextEnumsFromStrings");
static_assert(sizeof(SparksCore_BPFL_GetVocalsMidiTextEnumsFromStrings) == 0x000020, "Wrong size on SparksCore_BPFL_GetVocalsMidiTextEnumsFromStrings");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiTextEnumsFromStrings, MidiTextEventStrings) == 0x000000, "Member 'SparksCore_BPFL_GetVocalsMidiTextEnumsFromStrings::MidiTextEventStrings' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiTextEnumsFromStrings, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetVocalsMidiTextEnumsFromStrings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetVocalsMidiTextStringFromEnum
// 0x0018 (0x0018 - 0x0000)
struct SparksCore_BPFL_GetVocalsMidiTextStringFromEnum final
{
public:
	EVocalsMidiTextEvent                          MidiTextEvent;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetVocalsMidiTextStringFromEnum) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetVocalsMidiTextStringFromEnum");
static_assert(sizeof(SparksCore_BPFL_GetVocalsMidiTextStringFromEnum) == 0x000018, "Wrong size on SparksCore_BPFL_GetVocalsMidiTextStringFromEnum");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiTextStringFromEnum, MidiTextEvent) == 0x000000, "Member 'SparksCore_BPFL_GetVocalsMidiTextStringFromEnum::MidiTextEvent' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiTextStringFromEnum, ReturnValue) == 0x000008, "Member 'SparksCore_BPFL_GetVocalsMidiTextStringFromEnum::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.GetVocalsMidiTextStringsFromEnums
// 0x0020 (0x0020 - 0x0000)
struct SparksCore_BPFL_GetVocalsMidiTextStringsFromEnums final
{
public:
	TArray<EVocalsMidiTextEvent>                  MidiTextEvents;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_GetVocalsMidiTextStringsFromEnums) == 0x000008, "Wrong alignment on SparksCore_BPFL_GetVocalsMidiTextStringsFromEnums");
static_assert(sizeof(SparksCore_BPFL_GetVocalsMidiTextStringsFromEnums) == 0x000020, "Wrong size on SparksCore_BPFL_GetVocalsMidiTextStringsFromEnums");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiTextStringsFromEnums, MidiTextEvents) == 0x000000, "Member 'SparksCore_BPFL_GetVocalsMidiTextStringsFromEnums::MidiTextEvents' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_GetVocalsMidiTextStringsFromEnums, ReturnValue) == 0x000010, "Member 'SparksCore_BPFL_GetVocalsMidiTextStringsFromEnums::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksCore_BPFL.InstrumentTypeToCosmeticSubtype
// 0x0002 (0x0002 - 0x0000)
struct SparksCore_BPFL_InstrumentTypeToCosmeticSubtype final
{
public:
	ESparksInstrumentType                         Instrument;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksAccountItemSubtype                     ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksCore_BPFL_InstrumentTypeToCosmeticSubtype) == 0x000001, "Wrong alignment on SparksCore_BPFL_InstrumentTypeToCosmeticSubtype");
static_assert(sizeof(SparksCore_BPFL_InstrumentTypeToCosmeticSubtype) == 0x000002, "Wrong size on SparksCore_BPFL_InstrumentTypeToCosmeticSubtype");
static_assert(offsetof(SparksCore_BPFL_InstrumentTypeToCosmeticSubtype, Instrument) == 0x000000, "Member 'SparksCore_BPFL_InstrumentTypeToCosmeticSubtype::Instrument' has a wrong offset!");
static_assert(offsetof(SparksCore_BPFL_InstrumentTypeToCosmeticSubtype, ReturnValue) == 0x000001, "Member 'SparksCore_BPFL_InstrumentTypeToCosmeticSubtype::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_CowbellHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_CowbellHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_CowbellHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_CowbellHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_CowbellHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_CowbellHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_CowbellHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_CowbellHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_Crash1_Choke
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_Crash1_Choke final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_Crash1_Choke) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_Crash1_Choke");
static_assert(sizeof(SparksDrumEventsInterface_Bind_Crash1_Choke) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_Crash1_Choke");
static_assert(offsetof(SparksDrumEventsInterface_Bind_Crash1_Choke, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_Crash1_Choke::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_Crash1_HardHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_Crash1_HardHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_Crash1_HardHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_Crash1_HardHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_Crash1_HardHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_Crash1_HardHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_Crash1_HardHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_Crash1_HardHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_Crash1_SoftHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_Crash1_SoftHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_Crash1_SoftHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_Crash1_SoftHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_Crash1_SoftHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_Crash1_SoftHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_Crash1_SoftHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_Crash1_SoftHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_Crash2_Choke
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_Crash2_Choke final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_Crash2_Choke) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_Crash2_Choke");
static_assert(sizeof(SparksDrumEventsInterface_Bind_Crash2_Choke) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_Crash2_Choke");
static_assert(offsetof(SparksDrumEventsInterface_Bind_Crash2_Choke, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_Crash2_Choke::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_Crash2_HardHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_Crash2_HardHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_Crash2_HardHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_Crash2_HardHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_Crash2_HardHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_Crash2_HardHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_Crash2_HardHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_Crash2_HardHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_Crash2_SoftHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_Crash2_SoftHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_Crash2_SoftHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_Crash2_SoftHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_Crash2_SoftHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_Crash2_SoftHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_Crash2_SoftHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_Crash2_SoftHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_FloorTomHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_FloorTomHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_FloorTomHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_FloorTomHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_FloorTomHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_FloorTomHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_FloorTomHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_FloorTomHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_HiHatHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_HiHatHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_HiHatHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_HiHatHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_HiHatHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_HiHatHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_HiHatHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_HiHatHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_HiHatPedalUp
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_HiHatPedalUp final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_HiHatPedalUp) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_HiHatPedalUp");
static_assert(sizeof(SparksDrumEventsInterface_Bind_HiHatPedalUp) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_HiHatPedalUp");
static_assert(offsetof(SparksDrumEventsInterface_Bind_HiHatPedalUp, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_HiHatPedalUp::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_KickHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_KickHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_KickHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_KickHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_KickHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_KickHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_KickHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_KickHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_RideHardHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_RideHardHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_RideHardHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_RideHardHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_RideHardHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_RideHardHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_RideHardHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_RideHardHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_SnareHit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_SnareHit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_SnareHit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_SnareHit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_SnareHit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_SnareHit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_SnareHit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_SnareHit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_Tom1_Hit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_Tom1_Hit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_Tom1_Hit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_Tom1_Hit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_Tom1_Hit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_Tom1_Hit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_Tom1_Hit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_Tom1_Hit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksDrumEventsInterface.Bind_Tom2_Hit
// 0x000C (0x000C - 0x0000)
struct SparksDrumEventsInterface_Bind_Tom2_Hit final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksDrumEventsInterface_Bind_Tom2_Hit) == 0x000004, "Wrong alignment on SparksDrumEventsInterface_Bind_Tom2_Hit");
static_assert(sizeof(SparksDrumEventsInterface_Bind_Tom2_Hit) == 0x00000C, "Wrong size on SparksDrumEventsInterface_Bind_Tom2_Hit");
static_assert(offsetof(SparksDrumEventsInterface_Bind_Tom2_Hit, Callback) == 0x000000, "Member 'SparksDrumEventsInterface_Bind_Tom2_Hit::Callback' has a wrong offset!");

// Function SparksCoreRuntime.SparksSettingsControllerComponent.GetSparksGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct SparksSettingsControllerComponent_GetSparksGameUserSettings final
{
public:
	class USparksGameUserSettings*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksSettingsControllerComponent_GetSparksGameUserSettings) == 0x000008, "Wrong alignment on SparksSettingsControllerComponent_GetSparksGameUserSettings");
static_assert(sizeof(SparksSettingsControllerComponent_GetSparksGameUserSettings) == 0x000008, "Wrong size on SparksSettingsControllerComponent_GetSparksGameUserSettings");
static_assert(offsetof(SparksSettingsControllerComponent_GetSparksGameUserSettings, ReturnValue) == 0x000000, "Member 'SparksSettingsControllerComponent_GetSparksGameUserSettings::ReturnValue' has a wrong offset!");

// Function SparksCoreRuntime.SparksSettingsControllerComponent.GetSparksClientSettingRecordPartition
// 0x0008 (0x0008 - 0x0000)
struct SparksSettingsControllerComponent_GetSparksClientSettingRecordPartition final
{
public:
	class USparksClientSettingRecordPartition*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksSettingsControllerComponent_GetSparksClientSettingRecordPartition) == 0x000008, "Wrong alignment on SparksSettingsControllerComponent_GetSparksClientSettingRecordPartition");
static_assert(sizeof(SparksSettingsControllerComponent_GetSparksClientSettingRecordPartition) == 0x000008, "Wrong size on SparksSettingsControllerComponent_GetSparksClientSettingRecordPartition");
static_assert(offsetof(SparksSettingsControllerComponent_GetSparksClientSettingRecordPartition, ReturnValue) == 0x000000, "Member 'SparksSettingsControllerComponent_GetSparksClientSettingRecordPartition::ReturnValue' has a wrong offset!");

}

