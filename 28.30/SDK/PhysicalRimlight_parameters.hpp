#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicalRimlight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PhysicalRimlight.PhysicalRimlight_C.Day Phase Update
// 0x0003 (0x0003 - 0x0000)
struct PhysicalRimlight_C_Day_Phase_Update final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PhysicalRimlight_C_Day_Phase_Update) == 0x000001, "Wrong alignment on PhysicalRimlight_C_Day_Phase_Update");
static_assert(sizeof(PhysicalRimlight_C_Day_Phase_Update) == 0x000003, "Wrong size on PhysicalRimlight_C_Day_Phase_Update");
static_assert(offsetof(PhysicalRimlight_C_Day_Phase_Update, CurrentDayPhase) == 0x000000, "Member 'PhysicalRimlight_C_Day_Phase_Update::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Day_Phase_Update, PreviousDayPhase) == 0x000001, "Member 'PhysicalRimlight_C_Day_Phase_Update::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Day_Phase_Update, bAtCreation) == 0x000002, "Member 'PhysicalRimlight_C_Day_Phase_Update::bAtCreation' has a wrong offset!");

// Function PhysicalRimlight.PhysicalRimlight_C.ExecuteUbergraph_PhysicalRimlight
// 0x0060 (0x0060 - 0x0000)
struct PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_RimlightIntensity;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerPawn_Athena_C*                   K2Node_DynamicCast_AsPlayer_Pawn_Athena;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortTimeOfDayManagerInterface> CallFunc_GetContextualTimeOfDayManager_ReturnValue; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TDelegate<void(const class FString& CVarName)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0040(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataDrivenCVarEngineSubsystem*         CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortDayPhase                                 K2Node_CustomEvent_CurrentDayPhase;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortDayPhase                                 K2Node_CustomEvent_PreviousDayPhase;               // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bAtCreation;                    // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight) == 0x000008, "Wrong alignment on PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight");
static_assert(sizeof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight) == 0x000060, "Wrong size on PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, EntryPoint) == 0x000000, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::EntryPoint' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, K2Node_CustomEvent_RimlightIntensity) == 0x000010, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::K2Node_CustomEvent_RimlightIntensity' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, CallFunc_GetPlayerPawn_ReturnValue) == 0x000018, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, K2Node_DynamicCast_AsPlayer_Pawn_Athena) == 0x000020, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::K2Node_DynamicCast_AsPlayer_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, CallFunc_GetContextualTimeOfDayManager_ReturnValue) == 0x000030, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::CallFunc_GetContextualTimeOfDayManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, K2Node_CreateDelegate_OutputDelegate_1) == 0x000040, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000050, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, K2Node_Event_DeltaSeconds) == 0x000058, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, K2Node_CustomEvent_CurrentDayPhase) == 0x00005C, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::K2Node_CustomEvent_CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, K2Node_CustomEvent_PreviousDayPhase) == 0x00005D, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::K2Node_CustomEvent_PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight, K2Node_CustomEvent_bAtCreation) == 0x00005E, "Member 'PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight::K2Node_CustomEvent_bAtCreation' has a wrong offset!");

// Function PhysicalRimlight.PhysicalRimlight_C.InitRim
// 0x0008 (0x0008 - 0x0000)
struct PhysicalRimlight_C_InitRim final
{
public:
	double                                        RimlightIntensity_0;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PhysicalRimlight_C_InitRim) == 0x000008, "Wrong alignment on PhysicalRimlight_C_InitRim");
static_assert(sizeof(PhysicalRimlight_C_InitRim) == 0x000008, "Wrong size on PhysicalRimlight_C_InitRim");
static_assert(offsetof(PhysicalRimlight_C_InitRim, RimlightIntensity_0) == 0x000000, "Member 'PhysicalRimlight_C_InitRim::RimlightIntensity_0' has a wrong offset!");

// Function PhysicalRimlight.PhysicalRimlight_C.PhysicalRimlight_AutoGenFunc
// 0x0010 (0x0010 - 0x0000)
struct PhysicalRimlight_C_PhysicalRimlight_AutoGenFunc final
{
public:
	class FString                                 CVarName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PhysicalRimlight_C_PhysicalRimlight_AutoGenFunc) == 0x000008, "Wrong alignment on PhysicalRimlight_C_PhysicalRimlight_AutoGenFunc");
static_assert(sizeof(PhysicalRimlight_C_PhysicalRimlight_AutoGenFunc) == 0x000010, "Wrong size on PhysicalRimlight_C_PhysicalRimlight_AutoGenFunc");
static_assert(offsetof(PhysicalRimlight_C_PhysicalRimlight_AutoGenFunc, CVarName) == 0x000000, "Member 'PhysicalRimlight_C_PhysicalRimlight_AutoGenFunc::CVarName' has a wrong offset!");

// Function PhysicalRimlight.PhysicalRimlight_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct PhysicalRimlight_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PhysicalRimlight_C_ReceiveTick) == 0x000004, "Wrong alignment on PhysicalRimlight_C_ReceiveTick");
static_assert(sizeof(PhysicalRimlight_C_ReceiveTick) == 0x000004, "Wrong size on PhysicalRimlight_C_ReceiveTick");
static_assert(offsetof(PhysicalRimlight_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'PhysicalRimlight_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function PhysicalRimlight.PhysicalRimlight_C.RimlightAttemptValidation
// 0x0001 (0x0001 - 0x0000)
struct PhysicalRimlight_C_RimlightAttemptValidation final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PhysicalRimlight_C_RimlightAttemptValidation) == 0x000001, "Wrong alignment on PhysicalRimlight_C_RimlightAttemptValidation");
static_assert(sizeof(PhysicalRimlight_C_RimlightAttemptValidation) == 0x000001, "Wrong size on PhysicalRimlight_C_RimlightAttemptValidation");
static_assert(offsetof(PhysicalRimlight_C_RimlightAttemptValidation, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'PhysicalRimlight_C_RimlightAttemptValidation::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function PhysicalRimlight.PhysicalRimlight_C.Set Rim Light Location And Color
// 0x02F0 (0x02F0 - 0x0000)
struct PhysicalRimlight_C_Set_Rim_Light_Location_And_Color final
{
public:
	double                                        Intensity;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00F8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x01F8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color) == 0x000010, "Wrong alignment on PhysicalRimlight_C_Set_Rim_Light_Location_And_Color");
static_assert(sizeof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color) == 0x0002F0, "Wrong size on PhysicalRimlight_C_Set_Rim_Light_Location_And_Color");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, Intensity) == 0x000000, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::Intensity' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_IsDedicatedServer_ReturnValue) == 0x000040, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000048, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_GetCameraRotation_ReturnValue) == 0x000050, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_GetCameraLocation_ReturnValue) == 0x000068, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_TransformLocation_ReturnValue) == 0x0000E0, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000F8, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_FindLookAtRotation_ReturnValue) == 0x0001E0, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0001F8, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rim_Light_Location_And_Color, CallFunc_IsLocallyControlled_ReturnValue) == 0x0002E0, "Member 'PhysicalRimlight_C_Set_Rim_Light_Location_And_Color::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function PhysicalRimlight.PhysicalRimlight_C.Set Rimlight Color and Intensity
// 0x00B0 (0x00B0 - 0x0000)
struct PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity final
{
public:
	double                                        Rimlight_Intensity;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortDayPhase                                 Temp_byte_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortDayPhase                                 Temp_byte_Variable_1;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortDayPhase                                 CallFunc_GetCurrentDayPhase_ReturnValue;           // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IFortTimeOfDayManagerInterface> CallFunc_GetContextualTimeOfDayManager_ReturnValue; // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EFortDayPhase                                 CallFunc_GetCurrentDayPhase_ReturnValue_1;         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast_1; // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity) == 0x000008, "Wrong alignment on PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity");
static_assert(sizeof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity) == 0x0000B0, "Wrong size on PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, Rimlight_Intensity) == 0x000000, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::Rimlight_Intensity' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, Temp_struct_Variable) == 0x000008, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, Temp_struct_Variable_1) == 0x000018, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, Temp_struct_Variable_2) == 0x000028, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, Temp_struct_Variable_3) == 0x000038, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, Temp_byte_Variable) == 0x000048, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, Temp_byte_Variable_1) == 0x000049, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_GetCurrentDayPhase_ReturnValue) == 0x00004A, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_GetCurrentDayPhase_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000050, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, K2Node_Select_Default) == 0x000058, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_GetContextualTimeOfDayManager_ReturnValue) == 0x000068, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_GetContextualTimeOfDayManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000078, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_GetCurrentDayPhase_ReturnValue_1) == 0x000080, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_GetCurrentDayPhase_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_IsValid_ReturnValue) == 0x000081, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000090, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, K2Node_Select_Default_1) == 0x000098, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000A0, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x0000A8, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity, CallFunc_SetIntensity_NewIntensity_ImplicitCast_1) == 0x0000AC, "Member 'PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity::CallFunc_SetIntensity_NewIntensity_ImplicitCast_1' has a wrong offset!");

}

