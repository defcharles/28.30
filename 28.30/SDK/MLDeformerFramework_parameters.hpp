#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MLDeformerFramework

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MLDeformerFramework.MLDeformerComponent.SetDeformerAsset
// 0x0008 (0x0008 - 0x0000)
struct MLDeformerComponent_SetDeformerAsset final
{
public:
	class UMLDeformerAsset*                       InDeformerAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerComponent_SetDeformerAsset) == 0x000008, "Wrong alignment on MLDeformerComponent_SetDeformerAsset");
static_assert(sizeof(MLDeformerComponent_SetDeformerAsset) == 0x000008, "Wrong size on MLDeformerComponent_SetDeformerAsset");
static_assert(offsetof(MLDeformerComponent_SetDeformerAsset, InDeformerAsset) == 0x000000, "Member 'MLDeformerComponent_SetDeformerAsset::InDeformerAsset' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerComponent.SetQualityLevel
// 0x0004 (0x0004 - 0x0000)
struct MLDeformerComponent_SetQualityLevel final
{
public:
	int32                                         InQualityLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerComponent_SetQualityLevel) == 0x000004, "Wrong alignment on MLDeformerComponent_SetQualityLevel");
static_assert(sizeof(MLDeformerComponent_SetQualityLevel) == 0x000004, "Wrong size on MLDeformerComponent_SetQualityLevel");
static_assert(offsetof(MLDeformerComponent_SetQualityLevel, InQualityLevel) == 0x000000, "Member 'MLDeformerComponent_SetQualityLevel::InQualityLevel' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerComponent.SetWeight
// 0x0004 (0x0004 - 0x0000)
struct MLDeformerComponent_SetWeight final
{
public:
	float                                         NormalizedWeightValue;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerComponent_SetWeight) == 0x000004, "Wrong alignment on MLDeformerComponent_SetWeight");
static_assert(sizeof(MLDeformerComponent_SetWeight) == 0x000004, "Wrong size on MLDeformerComponent_SetWeight");
static_assert(offsetof(MLDeformerComponent_SetWeight, NormalizedWeightValue) == 0x000000, "Member 'MLDeformerComponent_SetWeight::NormalizedWeightValue' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerComponent.FindSkeletalMeshComponent
// 0x0010 (0x0010 - 0x0000)
struct MLDeformerComponent_FindSkeletalMeshComponent final
{
public:
	const class UMLDeformerAsset*                 Asset;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerComponent_FindSkeletalMeshComponent) == 0x000008, "Wrong alignment on MLDeformerComponent_FindSkeletalMeshComponent");
static_assert(sizeof(MLDeformerComponent_FindSkeletalMeshComponent) == 0x000010, "Wrong size on MLDeformerComponent_FindSkeletalMeshComponent");
static_assert(offsetof(MLDeformerComponent_FindSkeletalMeshComponent, Asset) == 0x000000, "Member 'MLDeformerComponent_FindSkeletalMeshComponent::Asset' has a wrong offset!");
static_assert(offsetof(MLDeformerComponent_FindSkeletalMeshComponent, ReturnValue) == 0x000008, "Member 'MLDeformerComponent_FindSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerComponent.GetDeformerAsset
// 0x0008 (0x0008 - 0x0000)
struct MLDeformerComponent_GetDeformerAsset final
{
public:
	class UMLDeformerAsset*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerComponent_GetDeformerAsset) == 0x000008, "Wrong alignment on MLDeformerComponent_GetDeformerAsset");
static_assert(sizeof(MLDeformerComponent_GetDeformerAsset) == 0x000008, "Wrong size on MLDeformerComponent_GetDeformerAsset");
static_assert(offsetof(MLDeformerComponent_GetDeformerAsset, ReturnValue) == 0x000000, "Member 'MLDeformerComponent_GetDeformerAsset::ReturnValue' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerComponent.GetQualityLevel
// 0x0004 (0x0004 - 0x0000)
struct MLDeformerComponent_GetQualityLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerComponent_GetQualityLevel) == 0x000004, "Wrong alignment on MLDeformerComponent_GetQualityLevel");
static_assert(sizeof(MLDeformerComponent_GetQualityLevel) == 0x000004, "Wrong size on MLDeformerComponent_GetQualityLevel");
static_assert(offsetof(MLDeformerComponent_GetQualityLevel, ReturnValue) == 0x000000, "Member 'MLDeformerComponent_GetQualityLevel::ReturnValue' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerComponent.GetSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct MLDeformerComponent_GetSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerComponent_GetSkeletalMeshComponent) == 0x000008, "Wrong alignment on MLDeformerComponent_GetSkeletalMeshComponent");
static_assert(sizeof(MLDeformerComponent_GetSkeletalMeshComponent) == 0x000008, "Wrong size on MLDeformerComponent_GetSkeletalMeshComponent");
static_assert(offsetof(MLDeformerComponent_GetSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'MLDeformerComponent_GetSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerComponent.GetWeight
// 0x0004 (0x0004 - 0x0000)
struct MLDeformerComponent_GetWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerComponent_GetWeight) == 0x000004, "Wrong alignment on MLDeformerComponent_GetWeight");
static_assert(sizeof(MLDeformerComponent_GetWeight) == 0x000004, "Wrong size on MLDeformerComponent_GetWeight");
static_assert(offsetof(MLDeformerComponent_GetWeight, ReturnValue) == 0x000000, "Member 'MLDeformerComponent_GetWeight::ReturnValue' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerMorphModel.SetMorphTargetDeltaFloats
// 0x0010 (0x0010 - 0x0000)
struct MLDeformerMorphModel_SetMorphTargetDeltaFloats final
{
public:
	TArray<float>                                 Deltas;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerMorphModel_SetMorphTargetDeltaFloats) == 0x000008, "Wrong alignment on MLDeformerMorphModel_SetMorphTargetDeltaFloats");
static_assert(sizeof(MLDeformerMorphModel_SetMorphTargetDeltaFloats) == 0x000010, "Wrong size on MLDeformerMorphModel_SetMorphTargetDeltaFloats");
static_assert(offsetof(MLDeformerMorphModel_SetMorphTargetDeltaFloats, Deltas) == 0x000000, "Member 'MLDeformerMorphModel_SetMorphTargetDeltaFloats::Deltas' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerMorphModel.SetMorphTargetDeltas
// 0x0010 (0x0010 - 0x0000)
struct MLDeformerMorphModel_SetMorphTargetDeltas final
{
public:
	TArray<struct FVector3f>                      Deltas;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerMorphModel_SetMorphTargetDeltas) == 0x000008, "Wrong alignment on MLDeformerMorphModel_SetMorphTargetDeltas");
static_assert(sizeof(MLDeformerMorphModel_SetMorphTargetDeltas) == 0x000010, "Wrong size on MLDeformerMorphModel_SetMorphTargetDeltas");
static_assert(offsetof(MLDeformerMorphModel_SetMorphTargetDeltas, Deltas) == 0x000000, "Member 'MLDeformerMorphModel_SetMorphTargetDeltas::Deltas' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerMorphModel.SetMorphTargetsErrorOrder
// 0x0020 (0x0020 - 0x0000)
struct MLDeformerMorphModel_SetMorphTargetsErrorOrder final
{
public:
	TArray<int32>                                 MorphTargetOrder;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 ErrorValues;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerMorphModel_SetMorphTargetsErrorOrder) == 0x000008, "Wrong alignment on MLDeformerMorphModel_SetMorphTargetsErrorOrder");
static_assert(sizeof(MLDeformerMorphModel_SetMorphTargetsErrorOrder) == 0x000020, "Wrong size on MLDeformerMorphModel_SetMorphTargetsErrorOrder");
static_assert(offsetof(MLDeformerMorphModel_SetMorphTargetsErrorOrder, MorphTargetOrder) == 0x000000, "Member 'MLDeformerMorphModel_SetMorphTargetsErrorOrder::MorphTargetOrder' has a wrong offset!");
static_assert(offsetof(MLDeformerMorphModel_SetMorphTargetsErrorOrder, ErrorValues) == 0x000010, "Member 'MLDeformerMorphModel_SetMorphTargetsErrorOrder::ErrorValues' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerMorphModel.SetMorphTargetsMaxWeights
// 0x0010 (0x0010 - 0x0000)
struct MLDeformerMorphModel_SetMorphTargetsMaxWeights final
{
public:
	TArray<float>                                 MaxWeights;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerMorphModel_SetMorphTargetsMaxWeights) == 0x000008, "Wrong alignment on MLDeformerMorphModel_SetMorphTargetsMaxWeights");
static_assert(sizeof(MLDeformerMorphModel_SetMorphTargetsMaxWeights) == 0x000010, "Wrong size on MLDeformerMorphModel_SetMorphTargetsMaxWeights");
static_assert(offsetof(MLDeformerMorphModel_SetMorphTargetsMaxWeights, MaxWeights) == 0x000000, "Member 'MLDeformerMorphModel_SetMorphTargetsMaxWeights::MaxWeights' has a wrong offset!");

// Function MLDeformerFramework.MLDeformerMorphModel.SetMorphTargetsMinMaxWeights
// 0x0020 (0x0020 - 0x0000)
struct MLDeformerMorphModel_SetMorphTargetsMinMaxWeights final
{
public:
	TArray<float>                                 MinValues;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 MaxValues;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MLDeformerMorphModel_SetMorphTargetsMinMaxWeights) == 0x000008, "Wrong alignment on MLDeformerMorphModel_SetMorphTargetsMinMaxWeights");
static_assert(sizeof(MLDeformerMorphModel_SetMorphTargetsMinMaxWeights) == 0x000020, "Wrong size on MLDeformerMorphModel_SetMorphTargetsMinMaxWeights");
static_assert(offsetof(MLDeformerMorphModel_SetMorphTargetsMinMaxWeights, MinValues) == 0x000000, "Member 'MLDeformerMorphModel_SetMorphTargetsMinMaxWeights::MinValues' has a wrong offset!");
static_assert(offsetof(MLDeformerMorphModel_SetMorphTargetsMinMaxWeights, MaxValues) == 0x000010, "Member 'MLDeformerMorphModel_SetMorphTargetsMinMaxWeights::MaxValues' has a wrong offset!");

}

