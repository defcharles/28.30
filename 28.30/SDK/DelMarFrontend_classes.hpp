#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarFrontend

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "CosmeticsFrameworkLoadouts_structs.hpp"


namespace SDK
{

// Class DelMarFrontend.DelMarFrontendCheatManager
// 0x0000 (0x0028 - 0x0028)
class UDelMarFrontendCheatManager final : public UChildCheatManager
{
public:
	void DelMarMarkTutorialPlayed();
	void DelMarResetNux();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarFrontendCheatManager">();
	}
	static class UDelMarFrontendCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarFrontendCheatManager>();
	}
};
static_assert(alignof(UDelMarFrontendCheatManager) == 0x000008, "Wrong alignment on UDelMarFrontendCheatManager");
static_assert(sizeof(UDelMarFrontendCheatManager) == 0x000028, "Wrong size on UDelMarFrontendCheatManager");

// Class DelMarFrontend.DelMarFrontendExperienceFlow
// 0x0128 (0x0150 - 0x0028)
class UDelMarFrontendExperienceFlow final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  CachedPlayerController;                            // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortStreamMediaSource*                 VideoStream_Source;                                // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   VideoPlayerClass;                                  // 0x0040(0x0020)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UAthenaConfirmationWindow>  ConfirmationWindowClass;                           // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TutorialPromptTitle;                               // 0x0068(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   TutorialPromptDescription;                         // 0x0080(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   TutorialPromptConfirmButtonText;                   // 0x0098(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   TutorialPromptDeclineButtonText;                   // 0x00B0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class UDelMarGameUserSettings*                DelMarUserSettings;                                // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            NUXTrailerRating;                                  // 0x00D8(0x0050)(Config, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x28];                                     // 0x0128(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarFrontendExperienceFlow">();
	}
	static class UDelMarFrontendExperienceFlow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarFrontendExperienceFlow>();
	}
};
static_assert(alignof(UDelMarFrontendExperienceFlow) == 0x000008, "Wrong alignment on UDelMarFrontendExperienceFlow");
static_assert(sizeof(UDelMarFrontendExperienceFlow) == 0x000150, "Wrong size on UDelMarFrontendExperienceFlow");
static_assert(offsetof(UDelMarFrontendExperienceFlow, CachedPlayerController) == 0x000030, "Member 'UDelMarFrontendExperienceFlow::CachedPlayerController' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendExperienceFlow, VideoStream_Source) == 0x000038, "Member 'UDelMarFrontendExperienceFlow::VideoStream_Source' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendExperienceFlow, VideoPlayerClass) == 0x000040, "Member 'UDelMarFrontendExperienceFlow::VideoPlayerClass' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendExperienceFlow, ConfirmationWindowClass) == 0x000060, "Member 'UDelMarFrontendExperienceFlow::ConfirmationWindowClass' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendExperienceFlow, TutorialPromptTitle) == 0x000068, "Member 'UDelMarFrontendExperienceFlow::TutorialPromptTitle' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendExperienceFlow, TutorialPromptDescription) == 0x000080, "Member 'UDelMarFrontendExperienceFlow::TutorialPromptDescription' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendExperienceFlow, TutorialPromptConfirmButtonText) == 0x000098, "Member 'UDelMarFrontendExperienceFlow::TutorialPromptConfirmButtonText' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendExperienceFlow, TutorialPromptDeclineButtonText) == 0x0000B0, "Member 'UDelMarFrontendExperienceFlow::TutorialPromptDeclineButtonText' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendExperienceFlow, DelMarUserSettings) == 0x0000C8, "Member 'UDelMarFrontendExperienceFlow::DelMarUserSettings' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendExperienceFlow, NUXTrailerRating) == 0x0000D8, "Member 'UDelMarFrontendExperienceFlow::NUXTrailerRating' has a wrong offset!");

// Class DelMarFrontend.DelMarFrontendSubsystem
// 0x00C0 (0x00F0 - 0x0030)
class UDelMarFrontendSubsystem final : public UFortLocalPlayerSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AVehicleCosmeticsPreviewVehicle*        PreviewVehicle;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFrontendLobbyActor                    LobbyVehicleActorData;                             // 0x0040(0x0070)(Edit, NativeAccessSpecifierPrivate)
	struct FCosmeticLoadoutSlot                   LobbyVehicleDefaultBody;                           // 0x00B0(0x0020)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x20];                                      // 0x00D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarFrontendSubsystem">();
	}
	static class UDelMarFrontendSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarFrontendSubsystem>();
	}
};
static_assert(alignof(UDelMarFrontendSubsystem) == 0x000008, "Wrong alignment on UDelMarFrontendSubsystem");
static_assert(sizeof(UDelMarFrontendSubsystem) == 0x0000F0, "Wrong size on UDelMarFrontendSubsystem");
static_assert(offsetof(UDelMarFrontendSubsystem, PreviewVehicle) == 0x000038, "Member 'UDelMarFrontendSubsystem::PreviewVehicle' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendSubsystem, LobbyVehicleActorData) == 0x000040, "Member 'UDelMarFrontendSubsystem::LobbyVehicleActorData' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendSubsystem, LobbyVehicleDefaultBody) == 0x0000B0, "Member 'UDelMarFrontendSubsystem::LobbyVehicleDefaultBody' has a wrong offset!");

// Class DelMarFrontend.DelMarMatchmakingWidgetExtension
// 0x0038 (0x0060 - 0x0028)
class UDelMarMatchmakingWidgetExtension final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ModeSetButtonPrimaryText;                          // 0x0030(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortActivityModeSetSelectionModalBase> GameSelectionOverride;                             // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayGameSelectionOnContentStack;               // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                CustomHeadingWidget;                               // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarMatchmakingWidgetExtension">();
	}
	static class UDelMarMatchmakingWidgetExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarMatchmakingWidgetExtension>();
	}
};
static_assert(alignof(UDelMarMatchmakingWidgetExtension) == 0x000008, "Wrong alignment on UDelMarMatchmakingWidgetExtension");
static_assert(sizeof(UDelMarMatchmakingWidgetExtension) == 0x000060, "Wrong size on UDelMarMatchmakingWidgetExtension");
static_assert(offsetof(UDelMarMatchmakingWidgetExtension, ModeSetButtonPrimaryText) == 0x000030, "Member 'UDelMarMatchmakingWidgetExtension::ModeSetButtonPrimaryText' has a wrong offset!");
static_assert(offsetof(UDelMarMatchmakingWidgetExtension, GameSelectionOverride) == 0x000048, "Member 'UDelMarMatchmakingWidgetExtension::GameSelectionOverride' has a wrong offset!");
static_assert(offsetof(UDelMarMatchmakingWidgetExtension, bDisplayGameSelectionOnContentStack) == 0x000050, "Member 'UDelMarMatchmakingWidgetExtension::bDisplayGameSelectionOnContentStack' has a wrong offset!");
static_assert(offsetof(UDelMarMatchmakingWidgetExtension, CustomHeadingWidget) == 0x000058, "Member 'UDelMarMatchmakingWidgetExtension::CustomHeadingWidget' has a wrong offset!");

// Class DelMarFrontend.DelMarRankedWidgetExtension
// 0x0028 (0x0050 - 0x0028)
class UDelMarRankedWidgetExtension final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   RankInfoModalOverride;                             // 0x0030(0x0020)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarRankedWidgetExtension">();
	}
	static class UDelMarRankedWidgetExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarRankedWidgetExtension>();
	}
};
static_assert(alignof(UDelMarRankedWidgetExtension) == 0x000008, "Wrong alignment on UDelMarRankedWidgetExtension");
static_assert(sizeof(UDelMarRankedWidgetExtension) == 0x000050, "Wrong size on UDelMarRankedWidgetExtension");
static_assert(offsetof(UDelMarRankedWidgetExtension, RankInfoModalOverride) == 0x000030, "Member 'UDelMarRankedWidgetExtension::RankInfoModalOverride' has a wrong offset!");

// Class DelMarFrontend.DelMarTrackSelectModal
// 0x0040 (0x0458 - 0x0418)
class UDelMarTrackSelectModal final : public UFortActivityModeSetSelectionModalBase
{
public:
	class UFortActivityPrivacyButton*             Button_ActivityPrivacy;                            // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseTouch;                                 // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_430[0x28];                                     // 0x0430(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTrackSelectModal">();
	}
	static class UDelMarTrackSelectModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTrackSelectModal>();
	}
};
static_assert(alignof(UDelMarTrackSelectModal) == 0x000008, "Wrong alignment on UDelMarTrackSelectModal");
static_assert(sizeof(UDelMarTrackSelectModal) == 0x000458, "Wrong size on UDelMarTrackSelectModal");
static_assert(offsetof(UDelMarTrackSelectModal, Button_ActivityPrivacy) == 0x000418, "Member 'UDelMarTrackSelectModal::Button_ActivityPrivacy' has a wrong offset!");
static_assert(offsetof(UDelMarTrackSelectModal, Button_CloseTouch) == 0x000420, "Member 'UDelMarTrackSelectModal::Button_CloseTouch' has a wrong offset!");
static_assert(offsetof(UDelMarTrackSelectModal, Button_Back) == 0x000428, "Member 'UDelMarTrackSelectModal::Button_Back' has a wrong offset!");

// Class DelMarFrontend.DelMarFrontendRuntimeOptions
// 0x0050 (0x0088 - 0x0038)
class UDelMarFrontendRuntimeOptions final : public URuntimeOptionsBase
{
public:
	class FString                                 FrontendNuxVideoKey;                               // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FrontendNuxVideoName;                              // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FrontendNuxVideoId;                                // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableFrontendNuxFlow;                           // 0x0060(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DelMarTutorialLinkCode;                            // 0x0068(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DelMarDefaultLinkCode;                             // 0x0078(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UDelMarFrontendRuntimeOptions* GetDelMarFrontendRuntimeOptions();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarFrontendRuntimeOptions">();
	}
	static class UDelMarFrontendRuntimeOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarFrontendRuntimeOptions>();
	}
};
static_assert(alignof(UDelMarFrontendRuntimeOptions) == 0x000008, "Wrong alignment on UDelMarFrontendRuntimeOptions");
static_assert(sizeof(UDelMarFrontendRuntimeOptions) == 0x000088, "Wrong size on UDelMarFrontendRuntimeOptions");
static_assert(offsetof(UDelMarFrontendRuntimeOptions, FrontendNuxVideoKey) == 0x000038, "Member 'UDelMarFrontendRuntimeOptions::FrontendNuxVideoKey' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendRuntimeOptions, FrontendNuxVideoName) == 0x000048, "Member 'UDelMarFrontendRuntimeOptions::FrontendNuxVideoName' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendRuntimeOptions, FrontendNuxVideoId) == 0x000050, "Member 'UDelMarFrontendRuntimeOptions::FrontendNuxVideoId' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendRuntimeOptions, bDisableFrontendNuxFlow) == 0x000060, "Member 'UDelMarFrontendRuntimeOptions::bDisableFrontendNuxFlow' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendRuntimeOptions, DelMarTutorialLinkCode) == 0x000068, "Member 'UDelMarFrontendRuntimeOptions::DelMarTutorialLinkCode' has a wrong offset!");
static_assert(offsetof(UDelMarFrontendRuntimeOptions, DelMarDefaultLinkCode) == 0x000078, "Member 'UDelMarFrontendRuntimeOptions::DelMarDefaultLinkCode' has a wrong offset!");

}

