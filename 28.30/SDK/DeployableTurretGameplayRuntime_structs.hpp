#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DeployableTurretGameplayRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DeployableTurretGameplayRuntime.EDeployableTurretState
// NumValues: 0x0008
enum class EDeployableTurretState : uint8
{
	Collapsed                                = 0,
	Transforming                             = 1,
	Scanning                                 = 2,
	Tracking                                 = 3,
	Attacking                                = 4,
	Deactivated                              = 5,
	WindUp                                   = 6,
	WindDown                                 = 7,
};

// ScriptStruct DeployableTurretGameplayRuntime.DeployableTurretBPAnimData
// 0x0028 (0x0028 - 0x0000)
struct FDeployableTurretBPAnimData final
{
public:
	struct FRotator                               AimRotation;                                       // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SurfaceRollDegrees;                                // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfacePitchDegrees;                               // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeployableTurretState                        State;                                             // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeployableTurretBPAnimData) == 0x000008, "Wrong alignment on FDeployableTurretBPAnimData");
static_assert(sizeof(FDeployableTurretBPAnimData) == 0x000028, "Wrong size on FDeployableTurretBPAnimData");
static_assert(offsetof(FDeployableTurretBPAnimData, AimRotation) == 0x000000, "Member 'FDeployableTurretBPAnimData::AimRotation' has a wrong offset!");
static_assert(offsetof(FDeployableTurretBPAnimData, SurfaceRollDegrees) == 0x000018, "Member 'FDeployableTurretBPAnimData::SurfaceRollDegrees' has a wrong offset!");
static_assert(offsetof(FDeployableTurretBPAnimData, SurfacePitchDegrees) == 0x00001C, "Member 'FDeployableTurretBPAnimData::SurfacePitchDegrees' has a wrong offset!");
static_assert(offsetof(FDeployableTurretBPAnimData, State) == 0x000020, "Member 'FDeployableTurretBPAnimData::State' has a wrong offset!");

}

