#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TechArt_GlobalLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "HoudiniInstanceDataLayout_structs.hpp"


namespace SDK::Params
{

// Function B_TechArt_GlobalLibrary.B_TechArt_GlobalLibrary_C.AddActorTag
// 0x0030 (0x0030 - 0x0000)
struct B_TechArt_GlobalLibrary_C_AddActorTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   tag;                                               // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ExistingActorTags;                                 // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TechArt_GlobalLibrary_C_AddActorTag) == 0x000008, "Wrong alignment on B_TechArt_GlobalLibrary_C_AddActorTag");
static_assert(sizeof(B_TechArt_GlobalLibrary_C_AddActorTag) == 0x000030, "Wrong size on B_TechArt_GlobalLibrary_C_AddActorTag");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AddActorTag, Actor) == 0x000000, "Member 'B_TechArt_GlobalLibrary_C_AddActorTag::Actor' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AddActorTag, tag) == 0x000008, "Member 'B_TechArt_GlobalLibrary_C_AddActorTag::tag' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AddActorTag, __WorldContext) == 0x000010, "Member 'B_TechArt_GlobalLibrary_C_AddActorTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AddActorTag, ExistingActorTags) == 0x000018, "Member 'B_TechArt_GlobalLibrary_C_AddActorTag::ExistingActorTags' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AddActorTag, CallFunc_Array_AddUnique_ReturnValue) == 0x000028, "Member 'B_TechArt_GlobalLibrary_C_AddActorTag::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function B_TechArt_GlobalLibrary.B_TechArt_GlobalLibrary_C.AreBoundsOverlapping?
// 0x00F0 (0x00F0 - 0x0000)
struct B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_ final
{
public:
	struct FBox                                   BoundsA;                                           // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                   BoundsB;                                           // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          BoundsOverlap_;                                    // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_4;       // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_5;       // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_) == 0x000008, "Wrong alignment on B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_");
static_assert(sizeof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_) == 0x0000F0, "Wrong size on B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, BoundsA) == 0x000000, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::BoundsA' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, BoundsB) == 0x000038, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::BoundsB' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, __WorldContext) == 0x000070, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, BoundsOverlap_) == 0x000078, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::BoundsOverlap_' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_X) == 0x000080, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_Y) == 0x000088, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_Z) == 0x000090, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_X_1) == 0x000098, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_Y_1) == 0x0000A0, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_Z_1) == 0x0000A8, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_X_2) == 0x0000B0, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_Y_2) == 0x0000B8, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_Z_2) == 0x0000C0, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_X_3) == 0x0000C8, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_Y_3) == 0x0000D0, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BreakVector_Z_3) == 0x0000D8, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000E1, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0000E2, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BooleanAND_ReturnValue) == 0x0000E3, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x0000E4, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_Greater_DoubleDouble_ReturnValue_4) == 0x0000E5, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_Greater_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_Greater_DoubleDouble_ReturnValue_5) == 0x0000E6, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_Greater_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BooleanAND_ReturnValue_1) == 0x0000E7, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BooleanAND_ReturnValue_2) == 0x0000E8, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BooleanAND_ReturnValue_3) == 0x0000E9, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_, CallFunc_BooleanAND_ReturnValue_4) == 0x0000EA, "Member 'B_TechArt_GlobalLibrary_C_AreBoundsOverlapping_::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");

// Function B_TechArt_GlobalLibrary.B_TechArt_GlobalLibrary_C.GetDynamicMaterialInstance
// 0x0040 (0x0040 - 0x0000)
struct B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Material_Instance_Dynamic;                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance) == 0x000008, "Wrong alignment on B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance");
static_assert(sizeof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance) == 0x000040, "Wrong size on B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance, MeshComponent) == 0x000000, "Member 'B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance::MeshComponent' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance, MaterialIndex) == 0x000008, "Member 'B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance::MaterialIndex' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance, __WorldContext) == 0x000010, "Member 'B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance, Material_Instance_Dynamic) == 0x000018, "Member 'B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance::Material_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance, CallFunc_GetMaterial_ReturnValue) == 0x000020, "Member 'B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000028, "Member 'B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000038, "Member 'B_TechArt_GlobalLibrary_C_GetDynamicMaterialInstance::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function B_TechArt_GlobalLibrary.B_TechArt_GlobalLibrary_C.HoudiniInstanceHISMBuilder
// 0x0200 (0x0200 - 0x0000)
struct B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder final
{
public:
	class UInstancedStaticMeshComponent*          InstancedStaticMeshComponent;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             InstanceDataTable;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        InstancesCountToImport;                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomScale;                                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RandomScaleMin;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RandomScaleMax;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomRotationZ;                                   // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RandomRotationZMin;                                // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RandomRotationZMax;                                // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseWorldSpacePositions;                            // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_SelectRotator_ReturnValue;                // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x00C8(0x0010)(ReferenceParm)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHoudiniInstanceDataLayout             CallFunc_GetDataTableRowFromName_OutRow;           // 0x00E4(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0160(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddInstance_ReturnValue;                  // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_X_ImplicitCast;                // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast;                // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast;                // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_X_ImplicitCast_1;              // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast_1;              // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast_1;              // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder) == 0x000010, "Wrong alignment on B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder");
static_assert(sizeof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder) == 0x000200, "Wrong size on B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, InstancedStaticMeshComponent) == 0x000000, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::InstancedStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, InstanceDataTable) == 0x000008, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::InstanceDataTable' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, InstancesCountToImport) == 0x000010, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::InstancesCountToImport' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, RandomScale) == 0x000018, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::RandomScale' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, RandomScaleMin) == 0x000020, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::RandomScaleMin' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, RandomScaleMax) == 0x000028, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::RandomScaleMax' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, RandomRotationZ) == 0x000030, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::RandomRotationZ' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, RandomRotationZMin) == 0x000038, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::RandomRotationZMin' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, RandomRotationZMax) == 0x000040, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::RandomRotationZMax' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, UseWorldSpacePositions) == 0x000048, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::UseWorldSpacePositions' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, __WorldContext) == 0x000050, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_IsValid_ReturnValue) == 0x00005C, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, Temp_int_Array_Index_Variable) == 0x000064, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_RandomFloatInRange_ReturnValue) == 0x000068, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeRotator_ReturnValue) == 0x000070, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_SelectRotator_ReturnValue) == 0x000088, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_SelectRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x0000A0, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeVector_ReturnValue) == 0x0000A8, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_GetDataTableRowNames_OutRowNames) == 0x0000C8, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_FTrunc_ReturnValue) == 0x0000D8, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_Array_Get_Item) == 0x0000DC, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_Percent_IntInt_ReturnValue) == 0x0000E0, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000E4, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000100, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000101, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_Array_Length_ReturnValue) == 0x000104, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeVector_ReturnValue_1) == 0x000108, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_Less_IntInt_ReturnValue) == 0x000120, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_SelectVector_ReturnValue) == 0x000128, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeVector_ReturnValue_2) == 0x000140, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeTransform_ReturnValue) == 0x000160, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_AddInstance_ReturnValue) == 0x0001C0, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_AddInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0001C4, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeVector_X_ImplicitCast) == 0x0001C8, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeVector_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeVector_Z_ImplicitCast) == 0x0001D0, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeVector_Z_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeVector_Y_ImplicitCast) == 0x0001D8, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeVector_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeVector_X_ImplicitCast_1) == 0x0001E0, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeVector_X_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeVector_Y_ImplicitCast_1) == 0x0001E8, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeVector_Y_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder, CallFunc_MakeVector_Z_ImplicitCast_1) == 0x0001F0, "Member 'B_TechArt_GlobalLibrary_C_HoudiniInstanceHISMBuilder::CallFunc_MakeVector_Z_ImplicitCast_1' has a wrong offset!");

// Function B_TechArt_GlobalLibrary.B_TechArt_GlobalLibrary_C.IsLumenEnabled
// 0x0038 (0x0038 - 0x0000)
struct B_TechArt_GlobalLibrary_C_IsLumenEnabled final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnabled;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRunningInCloud_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsErebus_ReturnValue;                     // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetConsoleVariableIntValue_ReturnValue;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TechArt_GlobalLibrary_C_IsLumenEnabled) == 0x000008, "Wrong alignment on B_TechArt_GlobalLibrary_C_IsLumenEnabled");
static_assert(sizeof(B_TechArt_GlobalLibrary_C_IsLumenEnabled) == 0x000038, "Wrong size on B_TechArt_GlobalLibrary_C_IsLumenEnabled");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, __WorldContext) == 0x000000, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, IsEnabled) == 0x000008, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::IsEnabled' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_IsRunningInCloud_ReturnValue) == 0x000009, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_IsRunningInCloud_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_IsMobileGame_ReturnValue) == 0x00000A, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_IsErebus_ReturnValue) == 0x00000B, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_IsErebus_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000D, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_BooleanOR_ReturnValue) == 0x00000E, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_GetConsoleVariableIntValue_ReturnValue) == 0x000010, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_GetConsoleVariableIntValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000014, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_BooleanAND_ReturnValue_1) == 0x000016, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_Conv_BoolToString_ReturnValue) == 0x000018, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_IsLumenEnabled, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'B_TechArt_GlobalLibrary_C_IsLumenEnabled::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function B_TechArt_GlobalLibrary.B_TechArt_GlobalLibrary_C.BindScalabilitySettings
// 0x0020 (0x0020 - 0x0000)
struct B_TechArt_GlobalLibrary_C_BindScalabilitySettings final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFortGameUserSettings*                  CallFunc_GetFortGameUserSettings_ReturnValue;      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_TechArt_GlobalLibrary_C_BindScalabilitySettings) == 0x000008, "Wrong alignment on B_TechArt_GlobalLibrary_C_BindScalabilitySettings");
static_assert(sizeof(B_TechArt_GlobalLibrary_C_BindScalabilitySettings) == 0x000020, "Wrong size on B_TechArt_GlobalLibrary_C_BindScalabilitySettings");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_BindScalabilitySettings, Delegate) == 0x000000, "Member 'B_TechArt_GlobalLibrary_C_BindScalabilitySettings::Delegate' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_BindScalabilitySettings, __WorldContext) == 0x000010, "Member 'B_TechArt_GlobalLibrary_C_BindScalabilitySettings::__WorldContext' has a wrong offset!");
static_assert(offsetof(B_TechArt_GlobalLibrary_C_BindScalabilitySettings, CallFunc_GetFortGameUserSettings_ReturnValue) == 0x000018, "Member 'B_TechArt_GlobalLibrary_C_BindScalabilitySettings::CallFunc_GetFortGameUserSettings_ReturnValue' has a wrong offset!");

}

