#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPS28_BattlePassTile

#include "Basic.hpp"

#include "BattlePassBase_structs.hpp"
#include "BattlePassBase_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BPS28_BattlePassTile.BPS28_BattlePassTile_C
// 0x0170 (0x17E0 - 0x1670)
class UBPS28_BattlePassTile_C final : public UFortBattlePassTile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1670(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Select_Premium;                                    // 0x1678(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       GrowTile;                                          // 0x1680(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hold_Completed;                                    // 0x1688(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Secondary_Hold_Progress;                           // 0x1690(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hold_Progress;                                     // 0x1698(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover_Burst;                                       // 0x16A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Reveal_Hide;                                       // 0x16A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Reveal;                                            // 0x16B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Select;                                            // 0x16B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Item_Hover;                                        // 0x16C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonVisibilitySwitcher*              Availability_Switcher;                             // 0x16C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Available_State;                                   // 0x16D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_SelectTrim;                                 // 0x16D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_SelectTrim_1;                               // 0x16E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 EmptyBackground;                                   // 0x16E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Equipped_State;                                    // 0x16F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_PriceInfo;                                      // 0x16F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Lock;                                        // 0x1700(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Preview;                                     // 0x1708(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_PriceBg;                                     // 0x1710(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_PriceBg_Tint;                                // 0x1718(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Progress;                                    // 0x1720(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFortLazyImage*                         Image_RewardItem_BG;                               // 0x1728(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 InProgressBacking;                                 // 0x1730(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               InProgressOverlay;                                 // 0x1738(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       InProgressText;                                    // 0x1740(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Locked_Overlay_Item;                               // 0x1748(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Input;                                     // 0x1750(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Owned_State;                                       // 0x1758(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_UIKit_Transference_C*              RainbowCorner;                                     // 0x1760(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_Price;                                        // 0x1768(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonVisibilitySwitcher*              VisibilitySwitcher_Included;                       // 0x1770(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          has_prerequisite;                                  // 0x1778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Selected;                                          // 0x1779(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hovered;                                           // 0x177A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPremiumTile;                                     // 0x177B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Locked;                                            // 0x177C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_177D[0x3];                                     // 0x177D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OverlayTintColor;                                  // 0x1780(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProgressCompleted;                                 // 0x1790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1791[0x7];                                     // 0x1791(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             HoldStartedSound;                                  // 0x1798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldSound;                                         // 0x17A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldInterruptedSound;                              // 0x17A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldCompletedSound;                                // 0x17B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        HoldSoundAudioComponent;                           // 0x17B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        PressedSoundAudioComponent;                        // 0x17C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        AudioLoopFadeOutTime;                              // 0x17C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AudioLoopFadeInTime;                               // 0x17D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasTrasnference;                                   // 0x17D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnFocusLost();
	void BP_OnHoldCompleted();
	void BP_OnHoldEnded(const float HoldPercentage, const bool bInUseSecondaryHoldAnimation);
	void BP_OnHoldReset();
	void BP_OnHoldStarted(const float HoldPercentage, const bool bInUseSecondaryHoldAnimation);
	void BP_OnHovered();
	void BP_OnInputMethodChanged(ECommonInputType CurrentInputType);
	void BP_OnUnhovered();
	void ExecuteUbergraph_BPS28_BattlePassTile(int32 EntryPoint);
	void FadeOutSound();
	void ForceRuntimeMaterialParams();
	void OnAffordabilityChanged(const bool bHasEnougCurrency);
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void OnHighlighted();
	void OnLockedProgressUpdated(const float Progress, const int32 CurrentlyOwnedRewards, const int32 NeededRewards);
	void OnLockedStateUpdated(const bool OwnsBattlePass, const bool ParentUnlocked, const bool HasRemainingPrerequisites, const bool bIsDelayed);
	void OnPeeked();
	void OnPreviewed();
	void OnRevealed();
	void OnSetCurrencyAndPrice(const EBattlePassCurrencyType Currency, const int32 Price);
	void OnSetTileColors();
	void OnSetTrack(const bool bIsFreeTrack, const bool bOwnsBattlePass);
	void OnStateChanged(const EBattlePassTileAvailabilityStates NewState);
	void OnUnhighlighted();
	void OnUnpreviewed();
	void PlaySoundHold();
	void PlaySoundHoldComplete();
	void PreConstruct(bool IsDesignTime);
	void StopSoundHold(double HoldPercentage);
	void UpdateTileColors();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPS28_BattlePassTile_C">();
	}
	static class UBPS28_BattlePassTile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPS28_BattlePassTile_C>();
	}
};
static_assert(alignof(UBPS28_BattlePassTile_C) == 0x000010, "Wrong alignment on UBPS28_BattlePassTile_C");
static_assert(sizeof(UBPS28_BattlePassTile_C) == 0x0017E0, "Wrong size on UBPS28_BattlePassTile_C");
static_assert(offsetof(UBPS28_BattlePassTile_C, UberGraphFrame) == 0x001670, "Member 'UBPS28_BattlePassTile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Select_Premium) == 0x001678, "Member 'UBPS28_BattlePassTile_C::Select_Premium' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, GrowTile) == 0x001680, "Member 'UBPS28_BattlePassTile_C::GrowTile' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Hold_Completed) == 0x001688, "Member 'UBPS28_BattlePassTile_C::Hold_Completed' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Secondary_Hold_Progress) == 0x001690, "Member 'UBPS28_BattlePassTile_C::Secondary_Hold_Progress' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Hold_Progress) == 0x001698, "Member 'UBPS28_BattlePassTile_C::Hold_Progress' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Hover_Burst) == 0x0016A0, "Member 'UBPS28_BattlePassTile_C::Hover_Burst' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Reveal_Hide) == 0x0016A8, "Member 'UBPS28_BattlePassTile_C::Reveal_Hide' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Reveal) == 0x0016B0, "Member 'UBPS28_BattlePassTile_C::Reveal' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Select) == 0x0016B8, "Member 'UBPS28_BattlePassTile_C::Select' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Item_Hover) == 0x0016C0, "Member 'UBPS28_BattlePassTile_C::Item_Hover' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Availability_Switcher) == 0x0016C8, "Member 'UBPS28_BattlePassTile_C::Availability_Switcher' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Available_State) == 0x0016D0, "Member 'UBPS28_BattlePassTile_C::Available_State' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Border_SelectTrim) == 0x0016D8, "Member 'UBPS28_BattlePassTile_C::Border_SelectTrim' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Border_SelectTrim_1) == 0x0016E0, "Member 'UBPS28_BattlePassTile_C::Border_SelectTrim_1' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, EmptyBackground) == 0x0016E8, "Member 'UBPS28_BattlePassTile_C::EmptyBackground' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Equipped_State) == 0x0016F0, "Member 'UBPS28_BattlePassTile_C::Equipped_State' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, HB_PriceInfo) == 0x0016F8, "Member 'UBPS28_BattlePassTile_C::HB_PriceInfo' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Image_Lock) == 0x001700, "Member 'UBPS28_BattlePassTile_C::Image_Lock' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Image_Preview) == 0x001708, "Member 'UBPS28_BattlePassTile_C::Image_Preview' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Image_PriceBg) == 0x001710, "Member 'UBPS28_BattlePassTile_C::Image_PriceBg' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Image_PriceBg_Tint) == 0x001718, "Member 'UBPS28_BattlePassTile_C::Image_PriceBg_Tint' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Image_Progress) == 0x001720, "Member 'UBPS28_BattlePassTile_C::Image_Progress' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Image_RewardItem_BG) == 0x001728, "Member 'UBPS28_BattlePassTile_C::Image_RewardItem_BG' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, InProgressBacking) == 0x001730, "Member 'UBPS28_BattlePassTile_C::InProgressBacking' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, InProgressOverlay) == 0x001738, "Member 'UBPS28_BattlePassTile_C::InProgressOverlay' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, InProgressText) == 0x001740, "Member 'UBPS28_BattlePassTile_C::InProgressText' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Locked_Overlay_Item) == 0x001748, "Member 'UBPS28_BattlePassTile_C::Locked_Overlay_Item' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Overlay_Input) == 0x001750, "Member 'UBPS28_BattlePassTile_C::Overlay_Input' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Owned_State) == 0x001758, "Member 'UBPS28_BattlePassTile_C::Owned_State' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, RainbowCorner) == 0x001760, "Member 'UBPS28_BattlePassTile_C::RainbowCorner' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Text_Price) == 0x001768, "Member 'UBPS28_BattlePassTile_C::Text_Price' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, VisibilitySwitcher_Included) == 0x001770, "Member 'UBPS28_BattlePassTile_C::VisibilitySwitcher_Included' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, has_prerequisite) == 0x001778, "Member 'UBPS28_BattlePassTile_C::has_prerequisite' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Selected) == 0x001779, "Member 'UBPS28_BattlePassTile_C::Selected' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Hovered) == 0x00177A, "Member 'UBPS28_BattlePassTile_C::Hovered' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, IsPremiumTile) == 0x00177B, "Member 'UBPS28_BattlePassTile_C::IsPremiumTile' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, Locked) == 0x00177C, "Member 'UBPS28_BattlePassTile_C::Locked' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, OverlayTintColor) == 0x001780, "Member 'UBPS28_BattlePassTile_C::OverlayTintColor' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, ProgressCompleted) == 0x001790, "Member 'UBPS28_BattlePassTile_C::ProgressCompleted' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, HoldStartedSound) == 0x001798, "Member 'UBPS28_BattlePassTile_C::HoldStartedSound' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, HoldSound) == 0x0017A0, "Member 'UBPS28_BattlePassTile_C::HoldSound' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, HoldInterruptedSound) == 0x0017A8, "Member 'UBPS28_BattlePassTile_C::HoldInterruptedSound' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, HoldCompletedSound) == 0x0017B0, "Member 'UBPS28_BattlePassTile_C::HoldCompletedSound' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, HoldSoundAudioComponent) == 0x0017B8, "Member 'UBPS28_BattlePassTile_C::HoldSoundAudioComponent' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, PressedSoundAudioComponent) == 0x0017C0, "Member 'UBPS28_BattlePassTile_C::PressedSoundAudioComponent' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, AudioLoopFadeOutTime) == 0x0017C8, "Member 'UBPS28_BattlePassTile_C::AudioLoopFadeOutTime' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, AudioLoopFadeInTime) == 0x0017D0, "Member 'UBPS28_BattlePassTile_C::AudioLoopFadeInTime' has a wrong offset!");
static_assert(offsetof(UBPS28_BattlePassTile_C, HasTrasnference) == 0x0017D8, "Member 'UBPS28_BattlePassTile_C::HasTrasnference' has a wrong offset!");

}

