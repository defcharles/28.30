#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JunoAIRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AIModule_structs.hpp"
#include "JunoGameNative_structs.hpp"
#include "StateTreeModule_structs.hpp"
#include "LagerRuntime_structs.hpp"
#include "WorldConditions_structs.hpp"
#include "FortniteAI_structs.hpp"


namespace SDK
{

// Enum JunoAIRuntime.EJunoNPCJobEndReason
// NumValues: 0x0003
enum class EJunoNPCJobEndReason : uint8
{
	ManualPlayerUnassignment                 = 0,
	AutoUnassigmentViaFollowerAssignment     = 1,
	AutoUnassignmentViaCampHardRemoval       = 2,
};

// Enum JunoAIRuntime.EJunoNPCFollowEndReason
// NumValues: 0x0003
enum class EJunoNPCFollowEndReason : uint8
{
	ManualPlayerUnassignment                 = 0,
	AutoUnassigmentViaRecruitment            = 1,
	AutoUnassignmentDueToStaleFollower       = 2,
};

// Enum JunoAIRuntime.ENPCRewardType
// NumValues: 0x0002
enum class ENPCRewardType : uint8
{
	LootTier                                 = 0,
	Recipe                                   = 1,
};

// Enum JunoAIRuntime.EJunoWorldConditionNPCSlotsLimit
// NumValues: 0x0003
enum class EJunoWorldConditionNPCSlotsLimit : uint8
{
	Unset                                    = 0,
	ReachedMaxCap                            = 1,
	CanIncrease                              = 2,
};

// Enum JunoAIRuntime.EJunoWorldCondition_AIWorldSettingsExpectedValue
// NumValues: 0x0003
enum class EJunoWorldCondition_AIWorldSettingsExpectedValue : uint32
{
	Any                                      = 0,
	On                                       = 1,
	Off                                      = 2,
};

// ScriptStruct JunoAIRuntime.JunoNPCValidItemRow
// 0x0020 (0x0028 - 0x0008)
struct FJunoNPCValidItemRow final : public FTableRowBase
{
public:
	class UFortItemDefinition*                    ValidItem;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValidItemPersistentName;                           // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeEquippedAsMainWeapon;                        // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoNPCValidItemRow) == 0x000008, "Wrong alignment on FJunoNPCValidItemRow");
static_assert(sizeof(FJunoNPCValidItemRow) == 0x000028, "Wrong size on FJunoNPCValidItemRow");
static_assert(offsetof(FJunoNPCValidItemRow, ValidItem) == 0x000008, "Member 'FJunoNPCValidItemRow::ValidItem' has a wrong offset!");
static_assert(offsetof(FJunoNPCValidItemRow, ValidItemPersistentName) == 0x000010, "Member 'FJunoNPCValidItemRow::ValidItemPersistentName' has a wrong offset!");
static_assert(offsetof(FJunoNPCValidItemRow, bCanBeEquippedAsMainWeapon) == 0x000020, "Member 'FJunoNPCValidItemRow::bCanBeEquippedAsMainWeapon' has a wrong offset!");

// ScriptStruct JunoAIRuntime.ValidItemSlotConfiguration
// 0x0010 (0x0010 - 0x0000)
struct FValidItemSlotConfiguration final
{
public:
	class UDataTable*                             ValidItemsTable;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagToApplyWhenMissingItem;                         // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValidItemSlotConfiguration) == 0x000008, "Wrong alignment on FValidItemSlotConfiguration");
static_assert(sizeof(FValidItemSlotConfiguration) == 0x000010, "Wrong size on FValidItemSlotConfiguration");
static_assert(offsetof(FValidItemSlotConfiguration, ValidItemsTable) == 0x000000, "Member 'FValidItemSlotConfiguration::ValidItemsTable' has a wrong offset!");
static_assert(offsetof(FValidItemSlotConfiguration, TagToApplyWhenMissingItem) == 0x000008, "Member 'FValidItemSlotConfiguration::TagToApplyWhenMissingItem' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoNPCValidItems
// 0x0070 (0x0070 - 0x0000)
struct FJunoNPCValidItems final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItemDefinition*>            CachedListOfUnequippableWeapons;                   // 0x0050(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoNPCValidItems) == 0x000008, "Wrong alignment on FJunoNPCValidItems");
static_assert(sizeof(FJunoNPCValidItems) == 0x000070, "Wrong size on FJunoNPCValidItems");
static_assert(offsetof(FJunoNPCValidItems, CachedListOfUnequippableWeapons) == 0x000050, "Member 'FJunoNPCValidItems::CachedListOfUnequippableWeapons' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAIFTUERuntimeConfiguration
// 0x0088 (0x0088 - 0x0000)
struct FJunoAIFTUERuntimeConfiguration final
{
public:
	struct FScalableFloat                         MaxDistanceFromCampToTeleport;                     // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDistanceFromPlayersToTeleport;                  // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TeleportToCampDelay;                               // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UEnvQuery*                              TeleportToPlayerQueryTemplate;                     // 0x0078(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvQueryRunMode                              TeleportToPlayerRunMode;                           // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAIFTUERuntimeConfiguration) == 0x000008, "Wrong alignment on FJunoAIFTUERuntimeConfiguration");
static_assert(sizeof(FJunoAIFTUERuntimeConfiguration) == 0x000088, "Wrong size on FJunoAIFTUERuntimeConfiguration");
static_assert(offsetof(FJunoAIFTUERuntimeConfiguration, MaxDistanceFromCampToTeleport) == 0x000000, "Member 'FJunoAIFTUERuntimeConfiguration::MaxDistanceFromCampToTeleport' has a wrong offset!");
static_assert(offsetof(FJunoAIFTUERuntimeConfiguration, MinDistanceFromPlayersToTeleport) == 0x000028, "Member 'FJunoAIFTUERuntimeConfiguration::MinDistanceFromPlayersToTeleport' has a wrong offset!");
static_assert(offsetof(FJunoAIFTUERuntimeConfiguration, TeleportToCampDelay) == 0x000050, "Member 'FJunoAIFTUERuntimeConfiguration::TeleportToCampDelay' has a wrong offset!");
static_assert(offsetof(FJunoAIFTUERuntimeConfiguration, TeleportToPlayerQueryTemplate) == 0x000078, "Member 'FJunoAIFTUERuntimeConfiguration::TeleportToPlayerQueryTemplate' has a wrong offset!");
static_assert(offsetof(FJunoAIFTUERuntimeConfiguration, TeleportToPlayerRunMode) == 0x000080, "Member 'FJunoAIFTUERuntimeConfiguration::TeleportToPlayerRunMode' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAIUnstuckFailsafeConfiguration
// 0x00E8 (0x00E8 - 0x0000)
struct FJunoAIUnstuckFailsafeConfiguration final
{
public:
	struct FScalableFloat                         MinimumTimeUnderLandscape;                         // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinZThresholdForLandscapeTeleport;                 // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TeleportToLandscapeDelay;                          // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UEnvQuery*                              TeleportToLandscapeQueryTemplate;                  // 0x0078(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvQueryRunMode                              TeleportToLandscapeRunMode;                        // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MinimumTimeFalling;                                // 0x0088(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TeleportToNavmeshDelay;                            // 0x00B0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UEnvQuery*                              TeleportToNavmeshQueryTemplate;                    // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvQueryRunMode                              TeleportToNavmeshRunMode;                          // 0x00E0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAIUnstuckFailsafeConfiguration) == 0x000008, "Wrong alignment on FJunoAIUnstuckFailsafeConfiguration");
static_assert(sizeof(FJunoAIUnstuckFailsafeConfiguration) == 0x0000E8, "Wrong size on FJunoAIUnstuckFailsafeConfiguration");
static_assert(offsetof(FJunoAIUnstuckFailsafeConfiguration, MinimumTimeUnderLandscape) == 0x000000, "Member 'FJunoAIUnstuckFailsafeConfiguration::MinimumTimeUnderLandscape' has a wrong offset!");
static_assert(offsetof(FJunoAIUnstuckFailsafeConfiguration, MinZThresholdForLandscapeTeleport) == 0x000028, "Member 'FJunoAIUnstuckFailsafeConfiguration::MinZThresholdForLandscapeTeleport' has a wrong offset!");
static_assert(offsetof(FJunoAIUnstuckFailsafeConfiguration, TeleportToLandscapeDelay) == 0x000050, "Member 'FJunoAIUnstuckFailsafeConfiguration::TeleportToLandscapeDelay' has a wrong offset!");
static_assert(offsetof(FJunoAIUnstuckFailsafeConfiguration, TeleportToLandscapeQueryTemplate) == 0x000078, "Member 'FJunoAIUnstuckFailsafeConfiguration::TeleportToLandscapeQueryTemplate' has a wrong offset!");
static_assert(offsetof(FJunoAIUnstuckFailsafeConfiguration, TeleportToLandscapeRunMode) == 0x000080, "Member 'FJunoAIUnstuckFailsafeConfiguration::TeleportToLandscapeRunMode' has a wrong offset!");
static_assert(offsetof(FJunoAIUnstuckFailsafeConfiguration, MinimumTimeFalling) == 0x000088, "Member 'FJunoAIUnstuckFailsafeConfiguration::MinimumTimeFalling' has a wrong offset!");
static_assert(offsetof(FJunoAIUnstuckFailsafeConfiguration, TeleportToNavmeshDelay) == 0x0000B0, "Member 'FJunoAIUnstuckFailsafeConfiguration::TeleportToNavmeshDelay' has a wrong offset!");
static_assert(offsetof(FJunoAIUnstuckFailsafeConfiguration, TeleportToNavmeshQueryTemplate) == 0x0000D8, "Member 'FJunoAIUnstuckFailsafeConfiguration::TeleportToNavmeshQueryTemplate' has a wrong offset!");
static_assert(offsetof(FJunoAIUnstuckFailsafeConfiguration, TeleportToNavmeshRunMode) == 0x0000E0, "Member 'FJunoAIUnstuckFailsafeConfiguration::TeleportToNavmeshRunMode' has a wrong offset!");

// ScriptStruct JunoAIRuntime.RandomizedMoodReactionConfig
// 0x0030 (0x0030 - 0x0000)
struct FRandomizedMoodReactionConfig final
{
public:
	struct FScalableFloat                         Weight;                                            // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MoodReactionTag;                                   // 0x0028(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRandomizedMoodReactionConfig) == 0x000008, "Wrong alignment on FRandomizedMoodReactionConfig");
static_assert(sizeof(FRandomizedMoodReactionConfig) == 0x000030, "Wrong size on FRandomizedMoodReactionConfig");
static_assert(offsetof(FRandomizedMoodReactionConfig, Weight) == 0x000000, "Member 'FRandomizedMoodReactionConfig::Weight' has a wrong offset!");
static_assert(offsetof(FRandomizedMoodReactionConfig, MoodReactionTag) == 0x000028, "Member 'FRandomizedMoodReactionConfig::MoodReactionTag' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAICampManagementLWMConfiguration
// 0x03A0 (0x03A0 - 0x0000)
struct FJunoAICampManagementLWMConfiguration final
{
public:
	struct FFortAthenaLivingWorldEvent            EventTemplate;                                     // 0x0000(0x01B0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortAthenaLivingWorldEventDataActorSpawnDescription SpawnDescriptionTemplate;                          // 0x01B0(0x0130)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPointProviderFilterEntry              FilterEntry;                                       // 0x02E0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> Encounter;                                         // 0x0368(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             PointProviderClasses;                              // 0x0388(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bRegisterReservoir;                                // 0x0398(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAICampManagementLWMConfiguration) == 0x000008, "Wrong alignment on FJunoAICampManagementLWMConfiguration");
static_assert(sizeof(FJunoAICampManagementLWMConfiguration) == 0x0003A0, "Wrong size on FJunoAICampManagementLWMConfiguration");
static_assert(offsetof(FJunoAICampManagementLWMConfiguration, EventTemplate) == 0x000000, "Member 'FJunoAICampManagementLWMConfiguration::EventTemplate' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementLWMConfiguration, SpawnDescriptionTemplate) == 0x0001B0, "Member 'FJunoAICampManagementLWMConfiguration::SpawnDescriptionTemplate' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementLWMConfiguration, FilterEntry) == 0x0002E0, "Member 'FJunoAICampManagementLWMConfiguration::FilterEntry' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementLWMConfiguration, Encounter) == 0x000368, "Member 'FJunoAICampManagementLWMConfiguration::Encounter' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementLWMConfiguration, PointProviderClasses) == 0x000388, "Member 'FJunoAICampManagementLWMConfiguration::PointProviderClasses' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementLWMConfiguration, bRegisterReservoir) == 0x000398, "Member 'FJunoAICampManagementLWMConfiguration::bRegisterReservoir' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAICampManagementVisitorsRarityConfiguration
// 0x0008 (0x0008 - 0x0000)
struct FJunoAICampManagementVisitorsRarityConfiguration final
{
public:
	struct FGameplayTag                           Rarity;                                            // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickPercentage;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAICampManagementVisitorsRarityConfiguration) == 0x000004, "Wrong alignment on FJunoAICampManagementVisitorsRarityConfiguration");
static_assert(sizeof(FJunoAICampManagementVisitorsRarityConfiguration) == 0x000008, "Wrong size on FJunoAICampManagementVisitorsRarityConfiguration");
static_assert(offsetof(FJunoAICampManagementVisitorsRarityConfiguration, Rarity) == 0x000000, "Member 'FJunoAICampManagementVisitorsRarityConfiguration::Rarity' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementVisitorsRarityConfiguration, PickPercentage) == 0x000004, "Member 'FJunoAICampManagementVisitorsRarityConfiguration::PickPercentage' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAICampManagementVisitorsPickingConfiguration
// 0x0018 (0x0020 - 0x0008)
struct FJunoAICampManagementVisitorsPickingConfiguration final : public FTableRowBase
{
public:
	TArray<struct FJunoAICampManagementVisitorsRarityConfiguration> RaritiesConfiguration;                             // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MaxRecruitableNPCs;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAICampManagementVisitorsPickingConfiguration) == 0x000008, "Wrong alignment on FJunoAICampManagementVisitorsPickingConfiguration");
static_assert(sizeof(FJunoAICampManagementVisitorsPickingConfiguration) == 0x000020, "Wrong size on FJunoAICampManagementVisitorsPickingConfiguration");
static_assert(offsetof(FJunoAICampManagementVisitorsPickingConfiguration, RaritiesConfiguration) == 0x000008, "Member 'FJunoAICampManagementVisitorsPickingConfiguration::RaritiesConfiguration' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementVisitorsPickingConfiguration, MaxRecruitableNPCs) == 0x000018, "Member 'FJunoAICampManagementVisitorsPickingConfiguration::MaxRecruitableNPCs' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAICampManagementNPCRewardRecipe
// 0x0028 (0x0028 - 0x0000)
struct FJunoAICampManagementNPCRewardRecipe final
{
public:
	TSoftObjectPtr<class UJunoBuildInstructionsItemDefinition> KnowledgeItemDefinition;                           // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoKnowledgeState                           NewState;                                          // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAICampManagementNPCRewardRecipe) == 0x000008, "Wrong alignment on FJunoAICampManagementNPCRewardRecipe");
static_assert(sizeof(FJunoAICampManagementNPCRewardRecipe) == 0x000028, "Wrong size on FJunoAICampManagementNPCRewardRecipe");
static_assert(offsetof(FJunoAICampManagementNPCRewardRecipe, KnowledgeItemDefinition) == 0x000000, "Member 'FJunoAICampManagementNPCRewardRecipe::KnowledgeItemDefinition' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementNPCRewardRecipe, NewState) == 0x000020, "Member 'FJunoAICampManagementNPCRewardRecipe::NewState' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAICampManagementNPCReward
// 0x0040 (0x0048 - 0x0008)
struct FJunoAICampManagementNPCReward final : public FTableRowBase
{
public:
	bool                                          bAlwaysPick;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PickWeight;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWorldConditionQueryDefinition         SelectionPreconditions;                            // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
	ENPCRewardType                                RewardType;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaximumPickAmount;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaximumPickSaveName;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootTierGroup;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJunoAICampManagementNPCRewardRecipe> Recipes;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAICampManagementNPCReward) == 0x000008, "Wrong alignment on FJunoAICampManagementNPCReward");
static_assert(sizeof(FJunoAICampManagementNPCReward) == 0x000048, "Wrong size on FJunoAICampManagementNPCReward");
static_assert(offsetof(FJunoAICampManagementNPCReward, bAlwaysPick) == 0x000008, "Member 'FJunoAICampManagementNPCReward::bAlwaysPick' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementNPCReward, PickWeight) == 0x00000C, "Member 'FJunoAICampManagementNPCReward::PickWeight' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementNPCReward, SelectionPreconditions) == 0x000010, "Member 'FJunoAICampManagementNPCReward::SelectionPreconditions' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementNPCReward, RewardType) == 0x000028, "Member 'FJunoAICampManagementNPCReward::RewardType' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementNPCReward, MaximumPickAmount) == 0x00002C, "Member 'FJunoAICampManagementNPCReward::MaximumPickAmount' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementNPCReward, MaximumPickSaveName) == 0x000030, "Member 'FJunoAICampManagementNPCReward::MaximumPickSaveName' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementNPCReward, LootTierGroup) == 0x000034, "Member 'FJunoAICampManagementNPCReward::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementNPCReward, Recipes) == 0x000038, "Member 'FJunoAICampManagementNPCReward::Recipes' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAICampManagementVisitorConfiguration
// 0x0020 (0x0028 - 0x0008)
struct FJunoAICampManagementVisitorConfiguration final : public FTableRowBase
{
public:
	struct FGameplayTag                           UniqueAIIdentifier;                                // 0x0008(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldConditionQueryDefinition         SelectionPreconditions;                            // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAICampManagementVisitorConfiguration) == 0x000008, "Wrong alignment on FJunoAICampManagementVisitorConfiguration");
static_assert(sizeof(FJunoAICampManagementVisitorConfiguration) == 0x000028, "Wrong size on FJunoAICampManagementVisitorConfiguration");
static_assert(offsetof(FJunoAICampManagementVisitorConfiguration, UniqueAIIdentifier) == 0x000008, "Member 'FJunoAICampManagementVisitorConfiguration::UniqueAIIdentifier' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementVisitorConfiguration, SelectionPreconditions) == 0x000010, "Member 'FJunoAICampManagementVisitorConfiguration::SelectionPreconditions' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAICampManagementVisitorConfigurationRuntime
// 0x0060 (0x0060 - 0x0000)
struct FJunoAICampManagementVisitorConfigurationRuntime final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldConditionQueryState              SelectionPreconditionsQueryState;                  // 0x0030(0x0030)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAICampManagementVisitorConfigurationRuntime) == 0x000008, "Wrong alignment on FJunoAICampManagementVisitorConfigurationRuntime");
static_assert(sizeof(FJunoAICampManagementVisitorConfigurationRuntime) == 0x000060, "Wrong size on FJunoAICampManagementVisitorConfigurationRuntime");
static_assert(offsetof(FJunoAICampManagementVisitorConfigurationRuntime, SelectionPreconditionsQueryState) == 0x000030, "Member 'FJunoAICampManagementVisitorConfigurationRuntime::SelectionPreconditionsQueryState' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAICampManagementVisitorsConfiguration
// 0x0030 (0x0030 - 0x0000)
struct FJunoAICampManagementVisitorsConfiguration final
{
public:
	class UDataTable*                             PossibleVisitorsDataTable;                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         InitialInGameHoursDelay;                           // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAICampManagementVisitorsConfiguration) == 0x000008, "Wrong alignment on FJunoAICampManagementVisitorsConfiguration");
static_assert(sizeof(FJunoAICampManagementVisitorsConfiguration) == 0x000030, "Wrong size on FJunoAICampManagementVisitorsConfiguration");
static_assert(offsetof(FJunoAICampManagementVisitorsConfiguration, PossibleVisitorsDataTable) == 0x000000, "Member 'FJunoAICampManagementVisitorsConfiguration::PossibleVisitorsDataTable' has a wrong offset!");
static_assert(offsetof(FJunoAICampManagementVisitorsConfiguration, InitialInGameHoursDelay) == 0x000008, "Member 'FJunoAICampManagementVisitorsConfiguration::InitialInGameHoursDelay' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAICampManagementVisitorsConfigurationDigested
// 0x0018 (0x0018 - 0x0000)
struct FJunoAICampManagementVisitorsConfigurationDigested final
{
public:
	TArray<struct FJunoAICampManagementVisitorConfigurationRuntime> PossibleVisitors;                                  // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAICampManagementVisitorsConfigurationDigested) == 0x000008, "Wrong alignment on FJunoAICampManagementVisitorsConfigurationDigested");
static_assert(sizeof(FJunoAICampManagementVisitorsConfigurationDigested) == 0x000018, "Wrong size on FJunoAICampManagementVisitorsConfigurationDigested");
static_assert(offsetof(FJunoAICampManagementVisitorsConfigurationDigested, PossibleVisitors) == 0x000000, "Member 'FJunoAICampManagementVisitorsConfigurationDigested::PossibleVisitors' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoIsVillagerProviderExpiredStateTreeTaskInstanceData
// 0x0018 (0x0018 - 0x0000)
struct FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData final
{
public:
	TWeakObjectPtr<class AFortAthenaLivingWorldStaticPointProvider> VillagerProvider;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExpired;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UserActor;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData");
static_assert(sizeof(FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData) == 0x000018, "Wrong size on FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData");
static_assert(offsetof(FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData, VillagerProvider) == 0x000000, "Member 'FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData::VillagerProvider' has a wrong offset!");
static_assert(offsetof(FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData, bIsExpired) == 0x000008, "Member 'FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData::bIsExpired' has a wrong offset!");
static_assert(offsetof(FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData, UserActor) == 0x000010, "Member 'FJunoIsVillagerProviderExpiredStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoIsVillagerProviderExpiredStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FJunoIsVillagerProviderExpiredStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FJunoIsVillagerProviderExpiredStateTreeTask) == 0x000008, "Wrong alignment on FJunoIsVillagerProviderExpiredStateTreeTask");
static_assert(sizeof(FJunoIsVillagerProviderExpiredStateTreeTask) == 0x000020, "Wrong size on FJunoIsVillagerProviderExpiredStateTreeTask");

// ScriptStruct JunoAIRuntime.JunoNPCVerbReactionTableRow
// 0x0008 (0x0080 - 0x0078)
struct FJunoNPCVerbReactionTableRow final : public FFortNPCVerbReactionTableRow
{
public:
	struct FGameplayTag                           MoodReactionTag;                                   // 0x0078(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoNPCVerbReactionTableRow) == 0x000008, "Wrong alignment on FJunoNPCVerbReactionTableRow");
static_assert(sizeof(FJunoNPCVerbReactionTableRow) == 0x000080, "Wrong size on FJunoNPCVerbReactionTableRow");
static_assert(offsetof(FJunoNPCVerbReactionTableRow, MoodReactionTag) == 0x000078, "Member 'FJunoNPCVerbReactionTableRow::MoodReactionTag' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoResetVillagerProviderTimerStateTreeTaskInstanceData
// 0x0040 (0x0040 - 0x0000)
struct FJunoResetVillagerProviderTimerStateTreeTaskInstanceData final
{
public:
	TWeakObjectPtr<class AFortAthenaLivingWorldStaticPointProvider> VillagerProvider;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Villager;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ResetDuration;                                     // 0x0010(0x0028)(Edit, NativeAccessSpecifierPublic)
	class AActor*                                 UserActor;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoResetVillagerProviderTimerStateTreeTaskInstanceData) == 0x000008, "Wrong alignment on FJunoResetVillagerProviderTimerStateTreeTaskInstanceData");
static_assert(sizeof(FJunoResetVillagerProviderTimerStateTreeTaskInstanceData) == 0x000040, "Wrong size on FJunoResetVillagerProviderTimerStateTreeTaskInstanceData");
static_assert(offsetof(FJunoResetVillagerProviderTimerStateTreeTaskInstanceData, VillagerProvider) == 0x000000, "Member 'FJunoResetVillagerProviderTimerStateTreeTaskInstanceData::VillagerProvider' has a wrong offset!");
static_assert(offsetof(FJunoResetVillagerProviderTimerStateTreeTaskInstanceData, Villager) == 0x000008, "Member 'FJunoResetVillagerProviderTimerStateTreeTaskInstanceData::Villager' has a wrong offset!");
static_assert(offsetof(FJunoResetVillagerProviderTimerStateTreeTaskInstanceData, ResetDuration) == 0x000010, "Member 'FJunoResetVillagerProviderTimerStateTreeTaskInstanceData::ResetDuration' has a wrong offset!");
static_assert(offsetof(FJunoResetVillagerProviderTimerStateTreeTaskInstanceData, UserActor) == 0x000038, "Member 'FJunoResetVillagerProviderTimerStateTreeTaskInstanceData::UserActor' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoResetVillagerProviderTimerStateTreeTask
// 0x0000 (0x0020 - 0x0020)
struct FJunoResetVillagerProviderTimerStateTreeTask final : public FStateTreeTaskCommonBase
{
};
static_assert(alignof(FJunoResetVillagerProviderTimerStateTreeTask) == 0x000008, "Wrong alignment on FJunoResetVillagerProviderTimerStateTreeTask");
static_assert(sizeof(FJunoResetVillagerProviderTimerStateTreeTask) == 0x000020, "Wrong size on FJunoResetVillagerProviderTimerStateTreeTask");

// ScriptStruct JunoAIRuntime.JunoWorldConditionAILocalCampChecks
// 0x0028 (0x0038 - 0x0010)
struct FJunoWorldConditionAILocalCampChecks final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          ActorRef;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RequiredNPCsSlots;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJunoWorldConditionNPCSlotsLimit              PotentialSlotCap;                                  // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumRemainingNPCSoftRemovalTimeInJunoHours;     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HasGatheringActorUsableByRole;                     // 0x0024(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWorldConditionContextDataRef          HasGatheringActorUsableByActorRef;                 // 0x0028(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRequireGatheringActorToBeActive;                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldConditionAILocalCampChecks) == 0x000008, "Wrong alignment on FJunoWorldConditionAILocalCampChecks");
static_assert(sizeof(FJunoWorldConditionAILocalCampChecks) == 0x000038, "Wrong size on FJunoWorldConditionAILocalCampChecks");
static_assert(offsetof(FJunoWorldConditionAILocalCampChecks, ActorRef) == 0x000010, "Member 'FJunoWorldConditionAILocalCampChecks::ActorRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAILocalCampChecks, RequiredNPCsSlots) == 0x000018, "Member 'FJunoWorldConditionAILocalCampChecks::RequiredNPCsSlots' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAILocalCampChecks, PotentialSlotCap) == 0x00001C, "Member 'FJunoWorldConditionAILocalCampChecks::PotentialSlotCap' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAILocalCampChecks, MinimumRemainingNPCSoftRemovalTimeInJunoHours) == 0x000020, "Member 'FJunoWorldConditionAILocalCampChecks::MinimumRemainingNPCSoftRemovalTimeInJunoHours' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAILocalCampChecks, HasGatheringActorUsableByRole) == 0x000024, "Member 'FJunoWorldConditionAILocalCampChecks::HasGatheringActorUsableByRole' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAILocalCampChecks, HasGatheringActorUsableByActorRef) == 0x000028, "Member 'FJunoWorldConditionAILocalCampChecks::HasGatheringActorUsableByActorRef' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionAILocalCampChecks, bRequireGatheringActorToBeActive) == 0x000030, "Member 'FJunoWorldConditionAILocalCampChecks::bRequireGatheringActorToBeActive' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoWorldConditionHitGlobalNPCsCap
// 0x0008 (0x0018 - 0x0010)
struct FJunoWorldConditionHitGlobalNPCsCap final : public FWorldConditionCommonBase
{
public:
	int32                                         RequiredSpaceInGlobalCap;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldConditionHitGlobalNPCsCap) == 0x000008, "Wrong alignment on FJunoWorldConditionHitGlobalNPCsCap");
static_assert(sizeof(FJunoWorldConditionHitGlobalNPCsCap) == 0x000018, "Wrong size on FJunoWorldConditionHitGlobalNPCsCap");
static_assert(offsetof(FJunoWorldConditionHitGlobalNPCsCap, RequiredSpaceInGlobalCap) == 0x000010, "Member 'FJunoWorldConditionHitGlobalNPCsCap::RequiredSpaceInGlobalCap' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoWorldConditionNearestCampChecks
// 0x0038 (0x0048 - 0x0010)
struct FJunoWorldConditionNearestCampChecks final : public FWorldConditionCommonActorBase
{
public:
	int32                                         RequiredCamps;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxDistanceFromCamp;                               // 0x0018(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FWorldConditionContextDataRef          ActorRef;                                          // 0x0040(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldConditionNearestCampChecks) == 0x000008, "Wrong alignment on FJunoWorldConditionNearestCampChecks");
static_assert(sizeof(FJunoWorldConditionNearestCampChecks) == 0x000048, "Wrong size on FJunoWorldConditionNearestCampChecks");
static_assert(offsetof(FJunoWorldConditionNearestCampChecks, RequiredCamps) == 0x000010, "Member 'FJunoWorldConditionNearestCampChecks::RequiredCamps' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionNearestCampChecks, MaxDistanceFromCamp) == 0x000018, "Member 'FJunoWorldConditionNearestCampChecks::MaxDistanceFromCamp' has a wrong offset!");
static_assert(offsetof(FJunoWorldConditionNearestCampChecks, ActorRef) == 0x000040, "Member 'FJunoWorldConditionNearestCampChecks::ActorRef' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoWorldConditionNPCCampReward
// 0x0008 (0x0018 - 0x0010)
struct FJunoWorldConditionNPCCampReward final : public FWorldConditionCommonActorBase
{
public:
	struct FWorldConditionContextDataRef          AIRef;                                             // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoWorldConditionNPCCampReward) == 0x000008, "Wrong alignment on FJunoWorldConditionNPCCampReward");
static_assert(sizeof(FJunoWorldConditionNPCCampReward) == 0x000018, "Wrong size on FJunoWorldConditionNPCCampReward");
static_assert(offsetof(FJunoWorldConditionNPCCampReward, AIRef) == 0x000010, "Member 'FJunoWorldConditionNPCCampReward::AIRef' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoWorldCondition_IsInTemporaryGlobalEncounter
// 0x0008 (0x0018 - 0x0010)
struct FJunoWorldCondition_IsInTemporaryGlobalEncounter final : public FWorldConditionCommonBase
{
public:
	struct FGameplayTag                           NPCGameplayTag;                                    // 0x0010(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldCondition_IsInTemporaryGlobalEncounter) == 0x000008, "Wrong alignment on FJunoWorldCondition_IsInTemporaryGlobalEncounter");
static_assert(sizeof(FJunoWorldCondition_IsInTemporaryGlobalEncounter) == 0x000018, "Wrong size on FJunoWorldCondition_IsInTemporaryGlobalEncounter");
static_assert(offsetof(FJunoWorldCondition_IsInTemporaryGlobalEncounter, NPCGameplayTag) == 0x000010, "Member 'FJunoWorldCondition_IsInTemporaryGlobalEncounter::NPCGameplayTag' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAIGlobalLWMConfiguration
// 0x0390 (0x0390 - 0x0000)
struct FJunoAIGlobalLWMConfiguration
{
public:
	struct FFortAthenaLivingWorldEvent            EventTemplate;                                     // 0x0000(0x01B0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortAthenaLivingWorldEventDataActorSpawnDescription SpawnDescriptionTemplate;                          // 0x01B0(0x0130)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPointProviderFilterEntry              FilterEntry;                                       // 0x02E0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> Encounter;                                         // 0x0368(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRegisterReservoir;                                // 0x0388(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAIGlobalLWMConfiguration) == 0x000008, "Wrong alignment on FJunoAIGlobalLWMConfiguration");
static_assert(sizeof(FJunoAIGlobalLWMConfiguration) == 0x000390, "Wrong size on FJunoAIGlobalLWMConfiguration");
static_assert(offsetof(FJunoAIGlobalLWMConfiguration, EventTemplate) == 0x000000, "Member 'FJunoAIGlobalLWMConfiguration::EventTemplate' has a wrong offset!");
static_assert(offsetof(FJunoAIGlobalLWMConfiguration, SpawnDescriptionTemplate) == 0x0001B0, "Member 'FJunoAIGlobalLWMConfiguration::SpawnDescriptionTemplate' has a wrong offset!");
static_assert(offsetof(FJunoAIGlobalLWMConfiguration, FilterEntry) == 0x0002E0, "Member 'FJunoAIGlobalLWMConfiguration::FilterEntry' has a wrong offset!");
static_assert(offsetof(FJunoAIGlobalLWMConfiguration, Encounter) == 0x000368, "Member 'FJunoAIGlobalLWMConfiguration::Encounter' has a wrong offset!");
static_assert(offsetof(FJunoAIGlobalLWMConfiguration, bRegisterReservoir) == 0x000388, "Member 'FJunoAIGlobalLWMConfiguration::bRegisterReservoir' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAISinglePointProviderEncounterLWMConfiguration
// 0x0008 (0x0398 - 0x0390)
struct FJunoAISinglePointProviderEncounterLWMConfiguration : public FJunoAIGlobalLWMConfiguration
{
public:
	TSubclassOf<class AActor>                     PointProviderClass;                                // 0x0390(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAISinglePointProviderEncounterLWMConfiguration) == 0x000008, "Wrong alignment on FJunoAISinglePointProviderEncounterLWMConfiguration");
static_assert(sizeof(FJunoAISinglePointProviderEncounterLWMConfiguration) == 0x000398, "Wrong size on FJunoAISinglePointProviderEncounterLWMConfiguration");
static_assert(offsetof(FJunoAISinglePointProviderEncounterLWMConfiguration, PointProviderClass) == 0x000390, "Member 'FJunoAISinglePointProviderEncounterLWMConfiguration::PointProviderClass' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAITemporaryGlobalEncounterLWMConfiguration
// 0x0000 (0x0398 - 0x0398)
struct FJunoAITemporaryGlobalEncounterLWMConfiguration final : public FJunoAISinglePointProviderEncounterLWMConfiguration
{
};
static_assert(alignof(FJunoAITemporaryGlobalEncounterLWMConfiguration) == 0x000008, "Wrong alignment on FJunoAITemporaryGlobalEncounterLWMConfiguration");
static_assert(sizeof(FJunoAITemporaryGlobalEncounterLWMConfiguration) == 0x000398, "Wrong size on FJunoAITemporaryGlobalEncounterLWMConfiguration");

// ScriptStruct JunoAIRuntime.JunoAIFTUEConfiguration
// 0x00E8 (0x0480 - 0x0398)
struct FJunoAIFTUEConfiguration final : public FJunoAISinglePointProviderEncounterLWMConfiguration
{
public:
	struct FGameplayTagQuery                      PossibleFTUEDescriptorTagQuery;                    // 0x0398(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    GEsToAddToFTUENPC;                                 // 0x03E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FWorldConditionQueryDefinition         EndConditions;                                     // 0x03F0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CustomLeashInnerRadius;                            // 0x0408(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CustomLeashOuterRadius;                            // 0x0430(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnDelay;                                        // 0x0458(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAIFTUEConfiguration) == 0x000008, "Wrong alignment on FJunoAIFTUEConfiguration");
static_assert(sizeof(FJunoAIFTUEConfiguration) == 0x000480, "Wrong size on FJunoAIFTUEConfiguration");
static_assert(offsetof(FJunoAIFTUEConfiguration, PossibleFTUEDescriptorTagQuery) == 0x000398, "Member 'FJunoAIFTUEConfiguration::PossibleFTUEDescriptorTagQuery' has a wrong offset!");
static_assert(offsetof(FJunoAIFTUEConfiguration, GEsToAddToFTUENPC) == 0x0003E0, "Member 'FJunoAIFTUEConfiguration::GEsToAddToFTUENPC' has a wrong offset!");
static_assert(offsetof(FJunoAIFTUEConfiguration, EndConditions) == 0x0003F0, "Member 'FJunoAIFTUEConfiguration::EndConditions' has a wrong offset!");
static_assert(offsetof(FJunoAIFTUEConfiguration, CustomLeashInnerRadius) == 0x000408, "Member 'FJunoAIFTUEConfiguration::CustomLeashInnerRadius' has a wrong offset!");
static_assert(offsetof(FJunoAIFTUEConfiguration, CustomLeashOuterRadius) == 0x000430, "Member 'FJunoAIFTUEConfiguration::CustomLeashOuterRadius' has a wrong offset!");
static_assert(offsetof(FJunoAIFTUEConfiguration, SpawnDelay) == 0x000458, "Member 'FJunoAIFTUEConfiguration::SpawnDelay' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAIFollowerLWMConfiguration
// 0x0010 (0x03A0 - 0x0390)
struct FJunoAIFollowerLWMConfiguration final : public FJunoAIGlobalLWMConfiguration
{
public:
	TArray<TSubclassOf<class AFortAthenaPointAroundPlayerProvider>> PointProviderClasses;                              // 0x0390(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoAIFollowerLWMConfiguration) == 0x000008, "Wrong alignment on FJunoAIFollowerLWMConfiguration");
static_assert(sizeof(FJunoAIFollowerLWMConfiguration) == 0x0003A0, "Wrong size on FJunoAIFollowerLWMConfiguration");
static_assert(offsetof(FJunoAIFollowerLWMConfiguration, PointProviderClasses) == 0x000390, "Member 'FJunoAIFollowerLWMConfiguration::PointProviderClasses' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAIFollowerManagedData
// 0x0098 (0x0098 - 0x0000)
struct FJunoAIFollowerManagedData final
{
public:
	struct FUniqueNetIdRepl                       PlayerId;                                          // 0x0000(0x0030)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaLivingWorldEncounterInstance* Encounter;                                         // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> PointProviders;                                    // 0x0038(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x50];                                      // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAIFollowerManagedData) == 0x000008, "Wrong alignment on FJunoAIFollowerManagedData");
static_assert(sizeof(FJunoAIFollowerManagedData) == 0x000098, "Wrong size on FJunoAIFollowerManagedData");
static_assert(offsetof(FJunoAIFollowerManagedData, PlayerId) == 0x000000, "Member 'FJunoAIFollowerManagedData::PlayerId' has a wrong offset!");
static_assert(offsetof(FJunoAIFollowerManagedData, Encounter) == 0x000030, "Member 'FJunoAIFollowerManagedData::Encounter' has a wrong offset!");
static_assert(offsetof(FJunoAIFollowerManagedData, PointProviders) == 0x000038, "Member 'FJunoAIFollowerManagedData::PointProviders' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoAIWorldNPCSpawningData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FJunoAIWorldNPCSpawningData final
{
public:
	TWeakObjectPtr<class UObject>                 AssignedPointProvider;                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UFortAthenaLivingWorldEventData> EventData;                                         // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoAIWorldNPCSpawningData) == 0x000008, "Wrong alignment on FJunoAIWorldNPCSpawningData");
static_assert(sizeof(FJunoAIWorldNPCSpawningData) == 0x000028, "Wrong size on FJunoAIWorldNPCSpawningData");
static_assert(offsetof(FJunoAIWorldNPCSpawningData, AssignedPointProvider) == 0x000000, "Member 'FJunoAIWorldNPCSpawningData::AssignedPointProvider' has a wrong offset!");
static_assert(offsetof(FJunoAIWorldNPCSpawningData, EventData) == 0x000018, "Member 'FJunoAIWorldNPCSpawningData::EventData' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoUniqueNPCLivingWorldPointProviderSelector
// 0x0070 (0x0078 - 0x0008)
struct FJunoUniqueNPCLivingWorldPointProviderSelector final : public FFortAthenaLivingWorldPointProviderSelector
{
public:
	struct FGameplayTag                           NPCGameplayTag;                                    // 0x0008(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         InitialPersistenceDuration;                        // 0x0010(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RespawnPersistenceDuration;                        // 0x0038(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UFortAthenaLivingWorldEventData> EventData;                                         // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPlayspaceComponent_Root_JunoAIManagement> CachedRootJunoAIManagement;                        // 0x0068(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoUniqueNPCLivingWorldPointProviderSelector) == 0x000008, "Wrong alignment on FJunoUniqueNPCLivingWorldPointProviderSelector");
static_assert(sizeof(FJunoUniqueNPCLivingWorldPointProviderSelector) == 0x000078, "Wrong size on FJunoUniqueNPCLivingWorldPointProviderSelector");
static_assert(offsetof(FJunoUniqueNPCLivingWorldPointProviderSelector, NPCGameplayTag) == 0x000008, "Member 'FJunoUniqueNPCLivingWorldPointProviderSelector::NPCGameplayTag' has a wrong offset!");
static_assert(offsetof(FJunoUniqueNPCLivingWorldPointProviderSelector, InitialPersistenceDuration) == 0x000010, "Member 'FJunoUniqueNPCLivingWorldPointProviderSelector::InitialPersistenceDuration' has a wrong offset!");
static_assert(offsetof(FJunoUniqueNPCLivingWorldPointProviderSelector, RespawnPersistenceDuration) == 0x000038, "Member 'FJunoUniqueNPCLivingWorldPointProviderSelector::RespawnPersistenceDuration' has a wrong offset!");
static_assert(offsetof(FJunoUniqueNPCLivingWorldPointProviderSelector, EventData) == 0x000060, "Member 'FJunoUniqueNPCLivingWorldPointProviderSelector::EventData' has a wrong offset!");
static_assert(offsetof(FJunoUniqueNPCLivingWorldPointProviderSelector, CachedRootJunoAIManagement) == 0x000068, "Member 'FJunoUniqueNPCLivingWorldPointProviderSelector::CachedRootJunoAIManagement' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoVillagerSpawnerDataSelector
// 0x0098 (0x00A0 - 0x0008)
struct FJunoVillagerSpawnerDataSelector final : public FFortAthenaLivingWorldSpawnerDataSelector
{
public:
	TWeakObjectPtr<class UPlayspaceComponent_JunoAIPersistence> CachedRootAIPersistence;                           // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SpawnerDataToFilter;                               // 0x0010(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      RoleMustMatchQuery;                                // 0x0058(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJunoVillagerSpawnerDataSelector) == 0x000008, "Wrong alignment on FJunoVillagerSpawnerDataSelector");
static_assert(sizeof(FJunoVillagerSpawnerDataSelector) == 0x0000A0, "Wrong size on FJunoVillagerSpawnerDataSelector");
static_assert(offsetof(FJunoVillagerSpawnerDataSelector, CachedRootAIPersistence) == 0x000008, "Member 'FJunoVillagerSpawnerDataSelector::CachedRootAIPersistence' has a wrong offset!");
static_assert(offsetof(FJunoVillagerSpawnerDataSelector, SpawnerDataToFilter) == 0x000010, "Member 'FJunoVillagerSpawnerDataSelector::SpawnerDataToFilter' has a wrong offset!");
static_assert(offsetof(FJunoVillagerSpawnerDataSelector, RoleMustMatchQuery) == 0x000058, "Member 'FJunoVillagerSpawnerDataSelector::RoleMustMatchQuery' has a wrong offset!");

// ScriptStruct JunoAIRuntime.JunoMoveConfig
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FJunoMoveConfig final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoMoveConfig) == 0x000004, "Wrong alignment on FJunoMoveConfig");
static_assert(sizeof(FJunoMoveConfig) == 0x00000C, "Wrong size on FJunoMoveConfig");

// ScriptStruct JunoAIRuntime.JunoWorldCondition_AIWorldSettings
// 0x0010 (0x0020 - 0x0010)
struct FJunoWorldCondition_AIWorldSettings final : public FWorldConditionCommonBase
{
public:
	EJunoWorldCondition_AIWorldSettingsExpectedValue FriendlyCreatures;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EJunoWorldCondition_AIWorldSettingsExpectedValue HostileCreatures;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EJunoWorldCondition_AIWorldSettingsExpectedValue FriendlyNPCs;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJunoWorldCondition_AIWorldSettings) == 0x000008, "Wrong alignment on FJunoWorldCondition_AIWorldSettings");
static_assert(sizeof(FJunoWorldCondition_AIWorldSettings) == 0x000020, "Wrong size on FJunoWorldCondition_AIWorldSettings");
static_assert(offsetof(FJunoWorldCondition_AIWorldSettings, FriendlyCreatures) == 0x000010, "Member 'FJunoWorldCondition_AIWorldSettings::FriendlyCreatures' has a wrong offset!");
static_assert(offsetof(FJunoWorldCondition_AIWorldSettings, HostileCreatures) == 0x000014, "Member 'FJunoWorldCondition_AIWorldSettings::HostileCreatures' has a wrong offset!");
static_assert(offsetof(FJunoWorldCondition_AIWorldSettings, FriendlyNPCs) == 0x000018, "Member 'FJunoWorldCondition_AIWorldSettings::FriendlyNPCs' has a wrong offset!");

}

