#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HarmonixAudioReactivity

#include "Basic.hpp"

#include "HarmonixAudioReactivity_structs.hpp"


namespace SDK::Params
{

// Function HarmonixAudioReactivity.HarmonixAudioAnalyzerResultsDispatcher.HasProvider
// 0x0008 (0x0008 - 0x0000)
struct HarmonixAudioAnalyzerResultsDispatcher_HasProvider final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixAudioAnalyzerResultsDispatcher_HasProvider) == 0x000004, "Wrong alignment on HarmonixAudioAnalyzerResultsDispatcher_HasProvider");
static_assert(sizeof(HarmonixAudioAnalyzerResultsDispatcher_HasProvider) == 0x000008, "Wrong size on HarmonixAudioAnalyzerResultsDispatcher_HasProvider");
static_assert(offsetof(HarmonixAudioAnalyzerResultsDispatcher_HasProvider, Name_0) == 0x000000, "Member 'HarmonixAudioAnalyzerResultsDispatcher_HasProvider::Name_0' has a wrong offset!");
static_assert(offsetof(HarmonixAudioAnalyzerResultsDispatcher_HasProvider, ReturnValue) == 0x000004, "Member 'HarmonixAudioAnalyzerResultsDispatcher_HasProvider::ReturnValue' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixAudioAnalyzerResultsDispatcher.TryGetResults
// 0x0070 (0x0070 - 0x0000)
struct HarmonixAudioAnalyzerResultsDispatcher_TryGetResults final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHarmonixAudioAnalyzerResults          Results;                                           // 0x0008(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HarmonixAudioAnalyzerResultsDispatcher_TryGetResults) == 0x000008, "Wrong alignment on HarmonixAudioAnalyzerResultsDispatcher_TryGetResults");
static_assert(sizeof(HarmonixAudioAnalyzerResultsDispatcher_TryGetResults) == 0x000070, "Wrong size on HarmonixAudioAnalyzerResultsDispatcher_TryGetResults");
static_assert(offsetof(HarmonixAudioAnalyzerResultsDispatcher_TryGetResults, Name_0) == 0x000000, "Member 'HarmonixAudioAnalyzerResultsDispatcher_TryGetResults::Name_0' has a wrong offset!");
static_assert(offsetof(HarmonixAudioAnalyzerResultsDispatcher_TryGetResults, Results) == 0x000008, "Member 'HarmonixAudioAnalyzerResultsDispatcher_TryGetResults::Results' has a wrong offset!");
static_assert(offsetof(HarmonixAudioAnalyzerResultsDispatcher_TryGetResults, ReturnValue) == 0x000068, "Member 'HarmonixAudioAnalyzerResultsDispatcher_TryGetResults::ReturnValue' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixAudioAnalyzerResultsProvider.CreateHarmonixAudioAnalyzerResultsProvider
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAudioAnalyzerResultsProvider_CreateHarmonixAudioAnalyzerResultsProvider final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHarmonixAudioAnalyzerResultsProvider*  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAudioAnalyzerResultsProvider_CreateHarmonixAudioAnalyzerResultsProvider) == 0x000008, "Wrong alignment on HarmonixAudioAnalyzerResultsProvider_CreateHarmonixAudioAnalyzerResultsProvider");
static_assert(sizeof(HarmonixAudioAnalyzerResultsProvider_CreateHarmonixAudioAnalyzerResultsProvider) == 0x000010, "Wrong size on HarmonixAudioAnalyzerResultsProvider_CreateHarmonixAudioAnalyzerResultsProvider");
static_assert(offsetof(HarmonixAudioAnalyzerResultsProvider_CreateHarmonixAudioAnalyzerResultsProvider, Name_0) == 0x000000, "Member 'HarmonixAudioAnalyzerResultsProvider_CreateHarmonixAudioAnalyzerResultsProvider::Name_0' has a wrong offset!");
static_assert(offsetof(HarmonixAudioAnalyzerResultsProvider_CreateHarmonixAudioAnalyzerResultsProvider, ReturnValue) == 0x000008, "Member 'HarmonixAudioAnalyzerResultsProvider_CreateHarmonixAudioAnalyzerResultsProvider::ReturnValue' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixAudioAnalyzerResultsProvider.SetArbitraryTextureData
// 0x0010 (0x0010 - 0x0000)
struct HarmonixAudioAnalyzerResultsProvider_SetArbitraryTextureData final
{
public:
	TArray<float>                                 ArbitraryTextureData;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixAudioAnalyzerResultsProvider_SetArbitraryTextureData) == 0x000008, "Wrong alignment on HarmonixAudioAnalyzerResultsProvider_SetArbitraryTextureData");
static_assert(sizeof(HarmonixAudioAnalyzerResultsProvider_SetArbitraryTextureData) == 0x000010, "Wrong size on HarmonixAudioAnalyzerResultsProvider_SetArbitraryTextureData");
static_assert(offsetof(HarmonixAudioAnalyzerResultsProvider_SetArbitraryTextureData, ArbitraryTextureData) == 0x000000, "Member 'HarmonixAudioAnalyzerResultsProvider_SetArbitraryTextureData::ArbitraryTextureData' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixTextureBase.GetCurrentTextureHeight
// 0x0004 (0x0004 - 0x0000)
struct HarmonixTextureBase_GetCurrentTextureHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTextureBase_GetCurrentTextureHeight) == 0x000004, "Wrong alignment on HarmonixTextureBase_GetCurrentTextureHeight");
static_assert(sizeof(HarmonixTextureBase_GetCurrentTextureHeight) == 0x000004, "Wrong size on HarmonixTextureBase_GetCurrentTextureHeight");
static_assert(offsetof(HarmonixTextureBase_GetCurrentTextureHeight, ReturnValue) == 0x000000, "Member 'HarmonixTextureBase_GetCurrentTextureHeight::ReturnValue' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixTextureBase.GetCurrentTextureWidth
// 0x0004 (0x0004 - 0x0000)
struct HarmonixTextureBase_GetCurrentTextureWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixTextureBase_GetCurrentTextureWidth) == 0x000004, "Wrong alignment on HarmonixTextureBase_GetCurrentTextureWidth");
static_assert(sizeof(HarmonixTextureBase_GetCurrentTextureWidth) == 0x000004, "Wrong size on HarmonixTextureBase_GetCurrentTextureWidth");
static_assert(offsetof(HarmonixTextureBase_GetCurrentTextureWidth, ReturnValue) == 0x000000, "Member 'HarmonixTextureBase_GetCurrentTextureWidth::ReturnValue' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixPeakTamer.CreateHarmonixPeakTamer
// 0x0008 (0x0008 - 0x0000)
struct HarmonixPeakTamer_CreateHarmonixPeakTamer final
{
public:
	class UHarmonixPeakTamer*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPeakTamer_CreateHarmonixPeakTamer) == 0x000008, "Wrong alignment on HarmonixPeakTamer_CreateHarmonixPeakTamer");
static_assert(sizeof(HarmonixPeakTamer_CreateHarmonixPeakTamer) == 0x000008, "Wrong size on HarmonixPeakTamer_CreateHarmonixPeakTamer");
static_assert(offsetof(HarmonixPeakTamer_CreateHarmonixPeakTamer, ReturnValue) == 0x000000, "Member 'HarmonixPeakTamer_CreateHarmonixPeakTamer::ReturnValue' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixPeakTamer.Configure
// 0x0014 (0x0014 - 0x0000)
struct HarmonixPeakTamer_Configure final
{
public:
	struct FHarmonixPeakTamerSettings             Settings;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPeakTamer_Configure) == 0x000004, "Wrong alignment on HarmonixPeakTamer_Configure");
static_assert(sizeof(HarmonixPeakTamer_Configure) == 0x000014, "Wrong size on HarmonixPeakTamer_Configure");
static_assert(offsetof(HarmonixPeakTamer_Configure, Settings) == 0x000000, "Member 'HarmonixPeakTamer_Configure::Settings' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixPeakTamer.Update
// 0x0008 (0x0008 - 0x0000)
struct HarmonixPeakTamer_Update final
{
public:
	float                                         InputValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTimeSeconds;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPeakTamer_Update) == 0x000004, "Wrong alignment on HarmonixPeakTamer_Update");
static_assert(sizeof(HarmonixPeakTamer_Update) == 0x000008, "Wrong size on HarmonixPeakTamer_Update");
static_assert(offsetof(HarmonixPeakTamer_Update, InputValue) == 0x000000, "Member 'HarmonixPeakTamer_Update::InputValue' has a wrong offset!");
static_assert(offsetof(HarmonixPeakTamer_Update, DeltaTimeSeconds) == 0x000004, "Member 'HarmonixPeakTamer_Update::DeltaTimeSeconds' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixPeakTamer.GetPeak
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPeakTamer_GetPeak final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPeakTamer_GetPeak) == 0x000004, "Wrong alignment on HarmonixPeakTamer_GetPeak");
static_assert(sizeof(HarmonixPeakTamer_GetPeak) == 0x000004, "Wrong size on HarmonixPeakTamer_GetPeak");
static_assert(offsetof(HarmonixPeakTamer_GetPeak, ReturnValue) == 0x000000, "Member 'HarmonixPeakTamer_GetPeak::ReturnValue' has a wrong offset!");

// Function HarmonixAudioReactivity.HarmonixPeakTamer.GetValue
// 0x0004 (0x0004 - 0x0000)
struct HarmonixPeakTamer_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarmonixPeakTamer_GetValue) == 0x000004, "Wrong alignment on HarmonixPeakTamer_GetValue");
static_assert(sizeof(HarmonixPeakTamer_GetValue) == 0x000004, "Wrong size on HarmonixPeakTamer_GetValue");
static_assert(offsetof(HarmonixPeakTamer_GetValue, ReturnValue) == 0x000000, "Member 'HarmonixPeakTamer_GetValue::ReturnValue' has a wrong offset!");

}

