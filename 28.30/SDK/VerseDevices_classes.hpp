#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseDevices

#include "Basic.hpp"

#include "GameFeatures_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "VerseDevices_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class VerseDevices.VerseCreativePropAsset
// 0x0068 (0x0090 - 0x0028)
class UVerseCreativePropAsset : public UObject
{
public:
	class FName                                   AssetPathName;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSaveRecord*                       LevelSaveRecord;                                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0038(0x0020)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x38];                                      // 0x0058(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseCreativePropAsset">();
	}
	static class UVerseCreativePropAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseCreativePropAsset>();
	}
};
static_assert(alignof(UVerseCreativePropAsset) == 0x000008, "Wrong alignment on UVerseCreativePropAsset");
static_assert(sizeof(UVerseCreativePropAsset) == 0x000090, "Wrong size on UVerseCreativePropAsset");
static_assert(offsetof(UVerseCreativePropAsset, AssetPathName) == 0x000028, "Member 'UVerseCreativePropAsset::AssetPathName' has a wrong offset!");
static_assert(offsetof(UVerseCreativePropAsset, LevelSaveRecord) == 0x000030, "Member 'UVerseCreativePropAsset::LevelSaveRecord' has a wrong offset!");
static_assert(offsetof(UVerseCreativePropAsset, ActorClass) == 0x000038, "Member 'UVerseCreativePropAsset::ActorClass' has a wrong offset!");

// Class VerseDevices.PlaylistUserOptionScript
// 0x0018 (0x01E8 - 0x01D0)
class UPlaylistUserOptionScript final : public UPlaylistUserOptionBase
{
public:
	TArray<struct FPlaylistOptionScriptValue>     OptionValues;                                      // 0x01D0(0x0010)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	int32                                         DefaultValueIndex;                                 // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaylistUserOptionScript">();
	}
	static class UPlaylistUserOptionScript* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaylistUserOptionScript>();
	}
};
static_assert(alignof(UPlaylistUserOptionScript) == 0x000008, "Wrong alignment on UPlaylistUserOptionScript");
static_assert(sizeof(UPlaylistUserOptionScript) == 0x0001E8, "Wrong size on UPlaylistUserOptionScript");
static_assert(offsetof(UPlaylistUserOptionScript, OptionValues) == 0x0001D0, "Member 'UPlaylistUserOptionScript::OptionValues' has a wrong offset!");
static_assert(offsetof(UPlaylistUserOptionScript, DefaultValueIndex) == 0x0001E0, "Member 'UPlaylistUserOptionScript::DefaultValueIndex' has a wrong offset!");

// Class VerseDevices.ScriptDevice
// 0x0028 (0x0BF0 - 0x0BC8)
class AScriptDevice final : public ABuildingProp
{
public:
	uint8                                         Pad_BC8[0x8];                                      // 0x0BC8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerseCreativeDevice*                   Script;                                            // 0x0BD0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, SaveGame, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerseCreativeDevice*                   ScriptInstance;                                    // 0x0BD8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BE0[0x10];                                     // 0x0BE0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetVisibility(bool bVisible);
	void SetEnabled(bool bInEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScriptDevice">();
	}
	static class AScriptDevice* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScriptDevice>();
	}
};
static_assert(alignof(AScriptDevice) == 0x000008, "Wrong alignment on AScriptDevice");
static_assert(sizeof(AScriptDevice) == 0x000BF0, "Wrong size on AScriptDevice");
static_assert(offsetof(AScriptDevice, Script) == 0x000BD0, "Member 'AScriptDevice::Script' has a wrong offset!");
static_assert(offsetof(AScriptDevice, ScriptInstance) == 0x000BD8, "Member 'AScriptDevice::ScriptInstance' has a wrong offset!");

// Class VerseDevices.VerseMovableObjectBase
// 0x0078 (0x00A0 - 0x0028)
class UVerseMovableObjectBase : public UObject
{
public:
	uint8                                         Pad_28[0x78];                                      // 0x0028(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseMovableObjectBase">();
	}
	static class UVerseMovableObjectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseMovableObjectBase>();
	}
};
static_assert(alignof(UVerseMovableObjectBase) == 0x000008, "Wrong alignment on UVerseMovableObjectBase");
static_assert(sizeof(UVerseMovableObjectBase) == 0x0000A0, "Wrong size on UVerseMovableObjectBase");

// Class VerseDevices.VerseCreativeDevice
// 0x0020 (0x00C0 - 0x00A0)
#pragma pack(push, 0x1)
class alignas(0x10) UVerseCreativeDevice : public UVerseMovableObjectBase
{
public:
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorOwner;                                        // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseCreativeDevice">();
	}
	static class UVerseCreativeDevice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseCreativeDevice>();
	}
};
#pragma pack(pop)
static_assert(alignof(UVerseCreativeDevice) == 0x000010, "Wrong alignment on UVerseCreativeDevice");
static_assert(sizeof(UVerseCreativeDevice) == 0x0000C0, "Wrong size on UVerseCreativeDevice");
static_assert(offsetof(UVerseCreativeDevice, ActorOwner) == 0x0000B0, "Member 'UVerseCreativeDevice::ActorOwner' has a wrong offset!");

// Class VerseDevices.VerseCreativeObject
// 0x0020 (0x00C0 - 0x00A0)
#pragma pack(push, 0x1)
class alignas(0x10) UVerseCreativeObject : public UVerseMovableObjectBase
{
public:
	class AActor*                                 SavedActor;                                        // 0x00A0(0x0008)(Edit, ZeroConstructor, SaveGame, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseCreativeObject">();
	}
	static class UVerseCreativeObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseCreativeObject>();
	}
};
#pragma pack(pop)
static_assert(alignof(UVerseCreativeObject) == 0x000010, "Wrong alignment on UVerseCreativeObject");
static_assert(sizeof(UVerseCreativeObject) == 0x0000C0, "Wrong size on UVerseCreativeObject");
static_assert(offsetof(UVerseCreativeObject, SavedActor) == 0x0000A0, "Member 'UVerseCreativeObject::SavedActor' has a wrong offset!");

// Class VerseDevices.VerseCreativeObjectQuotaHelperComponent
// 0x0018 (0x00B8 - 0x00A0)
class UVerseCreativeObjectQuotaHelperComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseCreativeObjectQuotaHelperComponent">();
	}
	static class UVerseCreativeObjectQuotaHelperComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseCreativeObjectQuotaHelperComponent>();
	}
};
static_assert(alignof(UVerseCreativeObjectQuotaHelperComponent) == 0x000008, "Wrong alignment on UVerseCreativeObjectQuotaHelperComponent");
static_assert(sizeof(UVerseCreativeObjectQuotaHelperComponent) == 0x0000B8, "Wrong size on UVerseCreativeObjectQuotaHelperComponent");

// Class VerseDevices.VerseDevicesFeatureAction_RegisterWrapperClasses
// 0x0028 (0x0050 - 0x0028)
class UVerseDevicesFeatureAction_RegisterWrapperClasses final : public UGameFeatureAction
{
public:
	TSoftObjectPtr<class UVerseDeviceWrapperClassMap> DeviceToWrapperClassMapAsset;                      // 0x0028(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseDevicesFeatureAction_RegisterWrapperClasses">();
	}
	static class UVerseDevicesFeatureAction_RegisterWrapperClasses* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseDevicesFeatureAction_RegisterWrapperClasses>();
	}
};
static_assert(alignof(UVerseDevicesFeatureAction_RegisterWrapperClasses) == 0x000008, "Wrong alignment on UVerseDevicesFeatureAction_RegisterWrapperClasses");
static_assert(sizeof(UVerseDevicesFeatureAction_RegisterWrapperClasses) == 0x000050, "Wrong size on UVerseDevicesFeatureAction_RegisterWrapperClasses");
static_assert(offsetof(UVerseDevicesFeatureAction_RegisterWrapperClasses, DeviceToWrapperClassMapAsset) == 0x000028, "Member 'UVerseDevicesFeatureAction_RegisterWrapperClasses::DeviceToWrapperClassMapAsset' has a wrong offset!");

// Class VerseDevices.VerseDeviceSubsystem
// 0x0118 (0x0148 - 0x0030)
class UVerseDeviceSubsystem final : public UWorldSubsystem
{
public:
	TMap<TSoftClassPtr<class UClass>, TSubclassOf<class UObject>> DeviceClassToVerseClassMap;                        // 0x0030(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0xC8];                                      // 0x0080(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseDeviceSubsystem">();
	}
	static class UVerseDeviceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseDeviceSubsystem>();
	}
};
static_assert(alignof(UVerseDeviceSubsystem) == 0x000008, "Wrong alignment on UVerseDeviceSubsystem");
static_assert(sizeof(UVerseDeviceSubsystem) == 0x000148, "Wrong size on UVerseDeviceSubsystem");
static_assert(offsetof(UVerseDeviceSubsystem, DeviceClassToVerseClassMap) == 0x000030, "Member 'UVerseDeviceSubsystem::DeviceClassToVerseClassMap' has a wrong offset!");

// Class VerseDevices.VerseDeviceWrapperClassMap
// 0x0050 (0x0080 - 0x0030)
class UVerseDeviceWrapperClassMap final : public UDataAsset
{
public:
	TMap<TSoftClassPtr<class UClass>, TSubclassOf<class UVerseCreativeObject>> DeviceClassMap;                                    // 0x0030(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseDeviceWrapperClassMap">();
	}
	static class UVerseDeviceWrapperClassMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseDeviceWrapperClassMap>();
	}
};
static_assert(alignof(UVerseDeviceWrapperClassMap) == 0x000008, "Wrong alignment on UVerseDeviceWrapperClassMap");
static_assert(sizeof(UVerseDeviceWrapperClassMap) == 0x000080, "Wrong size on UVerseDeviceWrapperClassMap");
static_assert(offsetof(UVerseDeviceWrapperClassMap, DeviceClassMap) == 0x000030, "Member 'UVerseDeviceWrapperClassMap::DeviceClassMap' has a wrong offset!");

}

