#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPS28_CustomizationCategoryRow

#include "Basic.hpp"

#include "BattlePassBase_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BPS28_CustomizationCategoryRow.BPS28_CustomizationCategoryRow_C
// 0x0050 (0x03C8 - 0x0378)
class UBPS28_CustomizationCategoryRow_C final : public UFortBattlePassCustomSkinCategoryTile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0378(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_Lock;                                        // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Progress;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Progress_Locked;                             // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_1;                                     // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonVisibilitySwitcher*              Switcher_State;                                    // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonRichTextBlock*                   Text_Progress;                                     // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonRichTextBlock*                   Text_Progress_Locked;                              // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonRichTextBlock*                   Text_UnlockCondition;                              // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         Number_to_unlock;                                  // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Locked;                                         // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPS28_CustomizationCategoryRow(int32 EntryPoint);
	void OnLockedProgressUpdated(const int32 CurrentlyOwnedBeforeCategory, const int32 TotalRewardsBeforeCategory, const float LockedProgress);
	void OnLockedStateChanged(const bool bCategoryLocked);
	void OnOwnedTilesUpdated(const int32 CurrentlyOwnedRewards, const int32 TotalRewards, const float CategoryProgress);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPS28_CustomizationCategoryRow_C">();
	}
	static class UBPS28_CustomizationCategoryRow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPS28_CustomizationCategoryRow_C>();
	}
};
static_assert(alignof(UBPS28_CustomizationCategoryRow_C) == 0x000008, "Wrong alignment on UBPS28_CustomizationCategoryRow_C");
static_assert(sizeof(UBPS28_CustomizationCategoryRow_C) == 0x0003C8, "Wrong size on UBPS28_CustomizationCategoryRow_C");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, UberGraphFrame) == 0x000378, "Member 'UBPS28_CustomizationCategoryRow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, Image_Lock) == 0x000380, "Member 'UBPS28_CustomizationCategoryRow_C::Image_Lock' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, Image_Progress) == 0x000388, "Member 'UBPS28_CustomizationCategoryRow_C::Image_Progress' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, Image_Progress_Locked) == 0x000390, "Member 'UBPS28_CustomizationCategoryRow_C::Image_Progress_Locked' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, ProgressBar_1) == 0x000398, "Member 'UBPS28_CustomizationCategoryRow_C::ProgressBar_1' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, Switcher_State) == 0x0003A0, "Member 'UBPS28_CustomizationCategoryRow_C::Switcher_State' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, Text_Progress) == 0x0003A8, "Member 'UBPS28_CustomizationCategoryRow_C::Text_Progress' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, Text_Progress_Locked) == 0x0003B0, "Member 'UBPS28_CustomizationCategoryRow_C::Text_Progress_Locked' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, Text_UnlockCondition) == 0x0003B8, "Member 'UBPS28_CustomizationCategoryRow_C::Text_UnlockCondition' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, Number_to_unlock) == 0x0003C0, "Member 'UBPS28_CustomizationCategoryRow_C::Number_to_unlock' has a wrong offset!");
static_assert(offsetof(UBPS28_CustomizationCategoryRow_C, Is_Locked) == 0x0003C4, "Member 'UBPS28_CustomizationCategoryRow_C::Is_Locked' has a wrong offset!");

}

