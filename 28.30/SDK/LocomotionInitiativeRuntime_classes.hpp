#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LocomotionInitiativeRuntime

#include "Basic.hpp"

#include "PoseSearch_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "LocomotionInitiativeRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "MotionTrajectory_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class LocomotionInitiativeRuntime.FortLocomotionLayerMaskDataAsset
// 0x0020 (0x0050 - 0x0030)
class UFortLocomotionLayerMaskDataAsset final : public UDataAsset
{
public:
	float                                         MaskingHeadTorsoAlpha;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskingLeftArmAlpha;                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskingRightArmAlpha;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskingWeaponAlpha;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MutingHeadTorsoAlpha;                              // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MutingLeftArmAlpha;                                // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MutingRightArmAlpha;                               // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MutingWeaponAlpha;                                 // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ApplyTo(struct FFortLocomotionLayerMaskDataSet* DataAsset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLocomotionLayerMaskDataAsset">();
	}
	static class UFortLocomotionLayerMaskDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLocomotionLayerMaskDataAsset>();
	}
};
static_assert(alignof(UFortLocomotionLayerMaskDataAsset) == 0x000008, "Wrong alignment on UFortLocomotionLayerMaskDataAsset");
static_assert(sizeof(UFortLocomotionLayerMaskDataAsset) == 0x000050, "Wrong size on UFortLocomotionLayerMaskDataAsset");
static_assert(offsetof(UFortLocomotionLayerMaskDataAsset, MaskingHeadTorsoAlpha) == 0x000030, "Member 'UFortLocomotionLayerMaskDataAsset::MaskingHeadTorsoAlpha' has a wrong offset!");
static_assert(offsetof(UFortLocomotionLayerMaskDataAsset, MaskingLeftArmAlpha) == 0x000034, "Member 'UFortLocomotionLayerMaskDataAsset::MaskingLeftArmAlpha' has a wrong offset!");
static_assert(offsetof(UFortLocomotionLayerMaskDataAsset, MaskingRightArmAlpha) == 0x000038, "Member 'UFortLocomotionLayerMaskDataAsset::MaskingRightArmAlpha' has a wrong offset!");
static_assert(offsetof(UFortLocomotionLayerMaskDataAsset, MaskingWeaponAlpha) == 0x00003C, "Member 'UFortLocomotionLayerMaskDataAsset::MaskingWeaponAlpha' has a wrong offset!");
static_assert(offsetof(UFortLocomotionLayerMaskDataAsset, MutingHeadTorsoAlpha) == 0x000040, "Member 'UFortLocomotionLayerMaskDataAsset::MutingHeadTorsoAlpha' has a wrong offset!");
static_assert(offsetof(UFortLocomotionLayerMaskDataAsset, MutingLeftArmAlpha) == 0x000044, "Member 'UFortLocomotionLayerMaskDataAsset::MutingLeftArmAlpha' has a wrong offset!");
static_assert(offsetof(UFortLocomotionLayerMaskDataAsset, MutingRightArmAlpha) == 0x000048, "Member 'UFortLocomotionLayerMaskDataAsset::MutingRightArmAlpha' has a wrong offset!");
static_assert(offsetof(UFortLocomotionLayerMaskDataAsset, MutingWeaponAlpha) == 0x00004C, "Member 'UFortLocomotionLayerMaskDataAsset::MutingWeaponAlpha' has a wrong offset!");

// Class LocomotionInitiativeRuntime.FortPlayerMotionMatchingLocomotionAnimInstance
// 0x0460 (0x1A80 - 0x1620)
class UFortPlayerMotionMatchingLocomotionAnimInstance final : public UFortPlayerAnimInstanceProxy
{
public:
	struct FCachedAnimStateArray                  IdleStatesData;                                    // 0x1620(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                FutureRootMotionVelocity;                          // 0x1638(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMotionMatchingLODConfig               HighEndConfig;                                     // 0x1650(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMotionMatchingLODConfig               LowEndConfig;                                      // 0x1688(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMotionMatchingLODConfig               CurrentLODConfig;                                  // 0x16C0(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SelectedIdleBreak;                                 // 0x16F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProxyAsset*                            MotionMatchingLODProxyAsset;                       // 0x1700(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionMatchingLOD;                                 // 0x1708(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMotionMatchingBlendInfo               MotionMatchingBlendInfo;                           // 0x170C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1714[0x4];                                     // 0x1714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimNotifyState>           StopBranchOutWindowNotifyClass;                    // 0x1718(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMotionMatchingLocomotionState            LocomotionState;                                   // 0x1720(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1721[0x3];                                     // 0x1721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartToLoopSearchDelaySeconds;                     // 0x1724(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotToLoopSearchDelaySeconds;                     // 0x1728(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotSpeedThreshold;                               // 0x172C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotDotProductThresholdRun;                       // 0x1730(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiagonalDetectionThreshold;                        // 0x1734(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotDotProductThresholdWalk;                      // 0x1738(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocomotionStateTime;                               // 0x173C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityDirection;                                 // 0x1740(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionMatchingWeight;                              // 0x1744(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchInterruptMode                      DatabaseSearchInterruptMode;                       // 0x1748(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOrientationWarping;                            // 0x1749(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFutureForOrientationWarping;                   // 0x174A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLowEnd;                                         // 0x174B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLocomotionBlendspace;                          // 0x174C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayIdle;                                   // 0x174D(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayIdleBreak;                              // 0x174E(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExitIdleBreak;                              // 0x174F(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExitIdleBreakSlow;                          // 0x1750(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1751[0x3];                                     // 0x1751(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IdleTransitionTimer;                               // 0x1754(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleBreakTimer;                                    // 0x1758(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBothHandsIKInHandSpace;                           // 0x175C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrouchedTransition;                             // 0x175D(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCrouching;                                     // 0x175E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayStandToCrouchTransition;                // 0x175F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayCrouchToStandTransition;                // 0x1760(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExitCrouchTransition;                       // 0x1761(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocallyControlled;                              // 0x1762(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1763[0x1];                                     // 0x1763(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraSpamYawThreshold;                            // 0x1764(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraSpamCoolDownSeconds;                         // 0x1768(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraSpamSearchThrottleTime;                      // 0x176C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSearchThrottleTime;                         // 0x1770(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchThrottleTime;                                // 0x1774(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveLeanAlpha;                                 // 0x1778(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAdditiveLeans;                              // 0x177C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAdditiveRunLeans;                           // 0x177D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableArcs;                                      // 0x177E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableDiamonds;                                  // 0x177F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIdleToMotionMatchingNoInertialization;            // 0x1780(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelaxedStateChanged;                              // 0x1781(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMelee;                                          // 0x1782(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRelaxedMotionMatchingData;                     // 0x1783(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1784[0x4];                                     // 0x1784(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSearchQueryTrajectory             Trajectory;                                        // 0x1788(0x0010)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FTrajectorySamplingData                TrajectorySamplingData;                            // 0x1798(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B8[0x8];                                     // 0x17B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterTrajectoryData               CharacterTrajectoryData;                           // 0x17C0(0x01E0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TrajectorySpeedMultiplier;                         // 0x19A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowFrictionCustomMaxSpeed;                         // 0x19A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowFrictionCustomBrakingDeceleration;              // 0x19A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowFrictionCustomFriction;                         // 0x19AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMotionMatchingAngleSpamTracker    AccelerationSpamTracker;                           // 0x19B0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F8[0x80];                                    // 0x19F8(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsPlayingInterruptibleStop;                       // 0x1A78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayingIdleDatabase;                            // 0x1A79(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasReachedIdle;                                   // 0x1A7A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7B[0x5];                                     // 0x1A7B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUpdateMotionMatching(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnUpdateMotionMatchingState(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);

	class UBlendProfile* GetMotionMatchingBlendProfile() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayerMotionMatchingLocomotionAnimInstance">();
	}
	static class UFortPlayerMotionMatchingLocomotionAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayerMotionMatchingLocomotionAnimInstance>();
	}
};
static_assert(alignof(UFortPlayerMotionMatchingLocomotionAnimInstance) == 0x000010, "Wrong alignment on UFortPlayerMotionMatchingLocomotionAnimInstance");
static_assert(sizeof(UFortPlayerMotionMatchingLocomotionAnimInstance) == 0x001A80, "Wrong size on UFortPlayerMotionMatchingLocomotionAnimInstance");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, IdleStatesData) == 0x001620, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::IdleStatesData' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, FutureRootMotionVelocity) == 0x001638, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::FutureRootMotionVelocity' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, HighEndConfig) == 0x001650, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::HighEndConfig' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, LowEndConfig) == 0x001688, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::LowEndConfig' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, CurrentLODConfig) == 0x0016C0, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::CurrentLODConfig' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, SelectedIdleBreak) == 0x0016F8, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::SelectedIdleBreak' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, MotionMatchingLODProxyAsset) == 0x001700, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::MotionMatchingLODProxyAsset' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, MotionMatchingLOD) == 0x001708, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::MotionMatchingLOD' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, MotionMatchingBlendInfo) == 0x00170C, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::MotionMatchingBlendInfo' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, StopBranchOutWindowNotifyClass) == 0x001718, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::StopBranchOutWindowNotifyClass' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, LocomotionState) == 0x001720, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::LocomotionState' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, StartToLoopSearchDelaySeconds) == 0x001724, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::StartToLoopSearchDelaySeconds' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, PivotToLoopSearchDelaySeconds) == 0x001728, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::PivotToLoopSearchDelaySeconds' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, PivotSpeedThreshold) == 0x00172C, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::PivotSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, PivotDotProductThresholdRun) == 0x001730, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::PivotDotProductThresholdRun' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, DiagonalDetectionThreshold) == 0x001734, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::DiagonalDetectionThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, PivotDotProductThresholdWalk) == 0x001738, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::PivotDotProductThresholdWalk' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, LocomotionStateTime) == 0x00173C, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::LocomotionStateTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, VelocityDirection) == 0x001740, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::VelocityDirection' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, MotionMatchingWeight) == 0x001744, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::MotionMatchingWeight' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, DatabaseSearchInterruptMode) == 0x001748, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::DatabaseSearchInterruptMode' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bUseOrientationWarping) == 0x001749, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bUseOrientationWarping' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bUseFutureForOrientationWarping) == 0x00174A, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bUseFutureForOrientationWarping' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bIsLowEnd) == 0x00174B, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bIsLowEnd' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bUseLocomotionBlendspace) == 0x00174C, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bUseLocomotionBlendspace' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bShouldPlayIdle) == 0x00174D, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bShouldPlayIdle' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bShouldPlayIdleBreak) == 0x00174E, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bShouldPlayIdleBreak' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bShouldExitIdleBreak) == 0x00174F, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bShouldExitIdleBreak' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bShouldExitIdleBreakSlow) == 0x001750, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bShouldExitIdleBreakSlow' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, IdleTransitionTimer) == 0x001754, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::IdleTransitionTimer' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, IdleBreakTimer) == 0x001758, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::IdleBreakTimer' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bBothHandsIKInHandSpace) == 0x00175C, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bBothHandsIKInHandSpace' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bIsCrouchedTransition) == 0x00175D, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bIsCrouchedTransition' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bWasCrouching) == 0x00175E, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bWasCrouching' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bShouldPlayStandToCrouchTransition) == 0x00175F, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bShouldPlayStandToCrouchTransition' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bShouldPlayCrouchToStandTransition) == 0x001760, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bShouldPlayCrouchToStandTransition' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bShouldExitCrouchTransition) == 0x001761, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bShouldExitCrouchTransition' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bIsLocallyControlled) == 0x001762, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bIsLocallyControlled' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, CameraSpamYawThreshold) == 0x001764, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::CameraSpamYawThreshold' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, CameraSpamCoolDownSeconds) == 0x001768, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::CameraSpamCoolDownSeconds' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, CameraSpamSearchThrottleTime) == 0x00176C, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::CameraSpamSearchThrottleTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, DefaultSearchThrottleTime) == 0x001770, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::DefaultSearchThrottleTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, SearchThrottleTime) == 0x001774, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::SearchThrottleTime' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, AdditiveLeanAlpha) == 0x001778, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::AdditiveLeanAlpha' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bEnableAdditiveLeans) == 0x00177C, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bEnableAdditiveLeans' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bEnableAdditiveRunLeans) == 0x00177D, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bEnableAdditiveRunLeans' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bDisableArcs) == 0x00177E, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bDisableArcs' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bDisableDiamonds) == 0x00177F, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bDisableDiamonds' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bIdleToMotionMatchingNoInertialization) == 0x001780, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bIdleToMotionMatchingNoInertialization' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bRelaxedStateChanged) == 0x001781, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bRelaxedStateChanged' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bIsMelee) == 0x001782, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bIsMelee' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bUseRelaxedMotionMatchingData) == 0x001783, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bUseRelaxedMotionMatchingData' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, Trajectory) == 0x001788, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::Trajectory' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, TrajectorySamplingData) == 0x001798, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::TrajectorySamplingData' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, CharacterTrajectoryData) == 0x0017C0, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::CharacterTrajectoryData' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, TrajectorySpeedMultiplier) == 0x0019A0, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::TrajectorySpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, LowFrictionCustomMaxSpeed) == 0x0019A4, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::LowFrictionCustomMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, LowFrictionCustomBrakingDeceleration) == 0x0019A8, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::LowFrictionCustomBrakingDeceleration' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, LowFrictionCustomFriction) == 0x0019AC, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::LowFrictionCustomFriction' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, AccelerationSpamTracker) == 0x0019B0, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::AccelerationSpamTracker' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bIsPlayingInterruptibleStop) == 0x001A78, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bIsPlayingInterruptibleStop' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bIsPlayingIdleDatabase) == 0x001A79, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bIsPlayingIdleDatabase' has a wrong offset!");
static_assert(offsetof(UFortPlayerMotionMatchingLocomotionAnimInstance, bHasReachedIdle) == 0x001A7A, "Member 'UFortPlayerMotionMatchingLocomotionAnimInstance::bHasReachedIdle' has a wrong offset!");

// Class LocomotionInitiativeRuntime.LocomotionInitiativeComponent
// 0x0058 (0x00F8 - 0x00A0)
class ULocomotionInitiativeComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimInstance>              MotionMatchingLocomotionAnimBlueprintClass;        // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              RigidBodyPBA_AnimBlueprintClass;                   // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         IsLocomotionInitiativeEnabled;                     // 0x00B8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchShuffleInPlaceAnim;                          // 0x00E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x10];                                      // 0x00E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocomotionInitiativeComponent">();
	}
	static class ULocomotionInitiativeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocomotionInitiativeComponent>();
	}
};
static_assert(alignof(ULocomotionInitiativeComponent) == 0x000008, "Wrong alignment on ULocomotionInitiativeComponent");
static_assert(sizeof(ULocomotionInitiativeComponent) == 0x0000F8, "Wrong size on ULocomotionInitiativeComponent");
static_assert(offsetof(ULocomotionInitiativeComponent, MotionMatchingLocomotionAnimBlueprintClass) == 0x0000A8, "Member 'ULocomotionInitiativeComponent::MotionMatchingLocomotionAnimBlueprintClass' has a wrong offset!");
static_assert(offsetof(ULocomotionInitiativeComponent, RigidBodyPBA_AnimBlueprintClass) == 0x0000B0, "Member 'ULocomotionInitiativeComponent::RigidBodyPBA_AnimBlueprintClass' has a wrong offset!");
static_assert(offsetof(ULocomotionInitiativeComponent, IsLocomotionInitiativeEnabled) == 0x0000B8, "Member 'ULocomotionInitiativeComponent::IsLocomotionInitiativeEnabled' has a wrong offset!");
static_assert(offsetof(ULocomotionInitiativeComponent, CrouchShuffleInPlaceAnim) == 0x0000E0, "Member 'ULocomotionInitiativeComponent::CrouchShuffleInPlaceAnim' has a wrong offset!");

// Class LocomotionInitiativeRuntime.LocomotionInitiativeGameFeatureData
// 0x0008 (0x0538 - 0x0530)
class ULocomotionInitiativeGameFeatureData final : public UFortGameFeatureData
{
public:
	struct FPerPlatformBool                       SkydivingEnablePhysicsBasedAnimationByDefault;     // 0x0530(0x0001)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_531[0x7];                                      // 0x0531(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocomotionInitiativeGameFeatureData">();
	}
	static class ULocomotionInitiativeGameFeatureData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocomotionInitiativeGameFeatureData>();
	}
};
static_assert(alignof(ULocomotionInitiativeGameFeatureData) == 0x000008, "Wrong alignment on ULocomotionInitiativeGameFeatureData");
static_assert(sizeof(ULocomotionInitiativeGameFeatureData) == 0x000538, "Wrong size on ULocomotionInitiativeGameFeatureData");
static_assert(offsetof(ULocomotionInitiativeGameFeatureData, SkydivingEnablePhysicsBasedAnimationByDefault) == 0x000530, "Member 'ULocomotionInitiativeGameFeatureData::SkydivingEnablePhysicsBasedAnimationByDefault' has a wrong offset!");

}

