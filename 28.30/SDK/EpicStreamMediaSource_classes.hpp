#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicStreamMediaSource

#include "Basic.hpp"

#include "EpicStreamMediaSource_structs.hpp"
#include "MediaAssets_classes.hpp"


namespace SDK
{

// Class EpicStreamMediaSource.EpicStreamMediaSource
// 0x0728 (0x07C0 - 0x0098)
class UEpicStreamMediaSource : public UStreamMediaSource
{
public:
	class FString                                 VideoStreamSource;                                 // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VideoStreamSourceAB;                               // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            VideoId;                                           // 0x00B0(0x0050)(Edit, BlueprintVisible, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	bool                                          bIsLive;                                           // 0x0100(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlurlLive;                                        // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxResolution;                                     // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBandwidth;                                      // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSharelock;                                        // 0x0110(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAudioOnly;                                        // 0x0111(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPartySync;                                        // 0x0112(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113[0x1];                                      // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MediaDuration;                                     // 0x0114(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MimeType;                                          // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StreamDenyHTTPCode;                                // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEpicMediaMetadataResolver*             MetadataResolver;                                  // 0x0138(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEpicMediaCDNHostnames*                 CDNHostNames;                                      // 0x0140(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBLURLRetries;                               // 0x0148(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableScrubOptimization;                          // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SeekBitrate;                                       // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CacheSizeKiB;                                      // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeToCacheMilliseconds;                           // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x388];                                    // 0x0158(0x0388)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& RetrievedUrl)> OnVideoUrlSuccess;                                 // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& RetrievedUrl)> OnVideoUrlFailed;                                  // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& MediaMetadataResponse)> OnMetaDataFailure;                                 // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EUCPTypes UCPType)> OnMediaLicensedAudioTreatmentChanged;              // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_520[0x10];                                     // 0x0520(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UEpicMediaDownloadLocalizedOverlays*    EpicMediaDownloadLocalizedOverlays;                // 0x0530(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProtectUserFromAVSettings;                         // 0x0538(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StreamID;                                          // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StreamID_Development;                              // 0x0558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSource*                           LocalFilePlaybackAsset;                            // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HighestFramerate;                                  // 0x0570(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_578[0x248];                                    // 0x0578(0x0248)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelVideoUrlRequest(bool bInCancelled);
	void ClearSyncTimes();
	void DisableSharing();
	void ForceSegmentCaching(bool bForce);
	bool IsScreenRecordingInProgress();
	void MetadataResultHandler(const struct FEpicMediaMetadataExt& MetaData, bool bSuccess);
	void ReinstateSharing();
	void RequestVideoUrl(const class APlayerController* FortPC);
	void SetLocalizedOverlaysV2(class UEpicMediaDownloadLocalizedOverlays* InOverlays);
	void SetPlaybackStartTime(float StartTime);
	void SetSyncTimes(const struct FDateTime& InNowTime, const struct FDateTime& InStartTime, bool DynamicStart, float InOffset_s, float InDelay_s);
	void SetUrl(class FString& InURL);
	EUCPTypes ShouldProtectPlayerFromContent();
	void UpdateStreamUrlArguments();

	bool HasLocalFilePlayback() const;
	bool ShouldStreamBePlaying(const class UObject* WorldContextObject, const class UPrimitiveComponent* PrimitiveComponent, float CullRadius) const;
	struct FMediaPlayerOptions UpdatePlayerOptions(const struct FMediaPlayerOptions& PlayerOptions) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicStreamMediaSource">();
	}
	static class UEpicStreamMediaSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicStreamMediaSource>();
	}
};
static_assert(alignof(UEpicStreamMediaSource) == 0x000008, "Wrong alignment on UEpicStreamMediaSource");
static_assert(sizeof(UEpicStreamMediaSource) == 0x0007C0, "Wrong size on UEpicStreamMediaSource");
static_assert(offsetof(UEpicStreamMediaSource, VideoStreamSource) == 0x000098, "Member 'UEpicStreamMediaSource::VideoStreamSource' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, VideoStreamSourceAB) == 0x0000A8, "Member 'UEpicStreamMediaSource::VideoStreamSourceAB' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, VideoId) == 0x0000B0, "Member 'UEpicStreamMediaSource::VideoId' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, bIsLive) == 0x000100, "Member 'UEpicStreamMediaSource::bIsLive' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, bBlurlLive) == 0x000101, "Member 'UEpicStreamMediaSource::bBlurlLive' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, MaxResolution) == 0x000104, "Member 'UEpicStreamMediaSource::MaxResolution' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, MaxBandwidth) == 0x000108, "Member 'UEpicStreamMediaSource::MaxBandwidth' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, AspectRatio) == 0x00010C, "Member 'UEpicStreamMediaSource::AspectRatio' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, bSharelock) == 0x000110, "Member 'UEpicStreamMediaSource::bSharelock' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, bAudioOnly) == 0x000111, "Member 'UEpicStreamMediaSource::bAudioOnly' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, bPartySync) == 0x000112, "Member 'UEpicStreamMediaSource::bPartySync' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, MediaDuration) == 0x000114, "Member 'UEpicStreamMediaSource::MediaDuration' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, MimeType) == 0x000118, "Member 'UEpicStreamMediaSource::MimeType' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, StreamDenyHTTPCode) == 0x000128, "Member 'UEpicStreamMediaSource::StreamDenyHTTPCode' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, MetadataResolver) == 0x000138, "Member 'UEpicStreamMediaSource::MetadataResolver' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, CDNHostNames) == 0x000140, "Member 'UEpicStreamMediaSource::CDNHostNames' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, bEnableBLURLRetries) == 0x000148, "Member 'UEpicStreamMediaSource::bEnableBLURLRetries' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, bEnableScrubOptimization) == 0x000149, "Member 'UEpicStreamMediaSource::bEnableScrubOptimization' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, SeekBitrate) == 0x00014C, "Member 'UEpicStreamMediaSource::SeekBitrate' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, CacheSizeKiB) == 0x000150, "Member 'UEpicStreamMediaSource::CacheSizeKiB' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, TimeToCacheMilliseconds) == 0x000154, "Member 'UEpicStreamMediaSource::TimeToCacheMilliseconds' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, OnVideoUrlSuccess) == 0x0004E0, "Member 'UEpicStreamMediaSource::OnVideoUrlSuccess' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, OnVideoUrlFailed) == 0x0004F0, "Member 'UEpicStreamMediaSource::OnVideoUrlFailed' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, OnMetaDataFailure) == 0x000500, "Member 'UEpicStreamMediaSource::OnMetaDataFailure' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, OnMediaLicensedAudioTreatmentChanged) == 0x000510, "Member 'UEpicStreamMediaSource::OnMediaLicensedAudioTreatmentChanged' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, EpicMediaDownloadLocalizedOverlays) == 0x000530, "Member 'UEpicStreamMediaSource::EpicMediaDownloadLocalizedOverlays' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, ProtectUserFromAVSettings) == 0x000538, "Member 'UEpicStreamMediaSource::ProtectUserFromAVSettings' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, StreamID) == 0x000548, "Member 'UEpicStreamMediaSource::StreamID' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, StreamID_Development) == 0x000558, "Member 'UEpicStreamMediaSource::StreamID_Development' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, LocalFilePlaybackAsset) == 0x000568, "Member 'UEpicStreamMediaSource::LocalFilePlaybackAsset' has a wrong offset!");
static_assert(offsetof(UEpicStreamMediaSource, HighestFramerate) == 0x000570, "Member 'UEpicStreamMediaSource::HighestFramerate' has a wrong offset!");

}

