#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HarmonixMidi

#include "Basic.hpp"

#include "HarmonixMidi_structs.hpp"


namespace SDK::Params
{

// Function HarmonixMidi.MidiNoteFunctionLibrary.ByteToMidiNote
// 0x0002 (0x0002 - 0x0000)
struct MidiNoteFunctionLibrary_ByteToMidiNote final
{
public:
	uint8                                         InByte;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMidiNote                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_ByteToMidiNote) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_ByteToMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_ByteToMidiNote) == 0x000002, "Wrong size on MidiNoteFunctionLibrary_ByteToMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_ByteToMidiNote, InByte) == 0x000000, "Member 'MidiNoteFunctionLibrary_ByteToMidiNote::InByte' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_ByteToMidiNote, ReturnValue) == 0x000001, "Member 'MidiNoteFunctionLibrary_ByteToMidiNote::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.GetMaxMidiNote
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMaxMidiNote final
{
public:
	struct FMidiNote                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMaxMidiNote) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMaxMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMaxMidiNote) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMaxMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMaxMidiNote, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMaxMidiNote::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.GetMaxNoteNumber
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMaxNoteNumber final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMaxNoteNumber) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMaxNoteNumber");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMaxNoteNumber) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMaxNoteNumber");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMaxNoteNumber, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMaxNoteNumber::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.GetMaxNoteVelocity
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMaxNoteVelocity final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMaxNoteVelocity) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMaxNoteVelocity");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMaxNoteVelocity) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMaxNoteVelocity");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMaxNoteVelocity, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMaxNoteVelocity::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.GetMaxNumNotes
// 0x0004 (0x0004 - 0x0000)
struct MidiNoteFunctionLibrary_GetMaxNumNotes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMaxNumNotes) == 0x000004, "Wrong alignment on MidiNoteFunctionLibrary_GetMaxNumNotes");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMaxNumNotes) == 0x000004, "Wrong size on MidiNoteFunctionLibrary_GetMaxNumNotes");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMaxNumNotes, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMaxNumNotes::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.GetMinMidiNote
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMinMidiNote final
{
public:
	struct FMidiNote                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMinMidiNote) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMinMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMinMidiNote) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMinMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMinMidiNote, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMinMidiNote::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.GetMinNoteNumber
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMinNoteNumber final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMinNoteNumber) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMinNoteNumber");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMinNoteNumber) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMinNoteNumber");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMinNoteNumber, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMinNoteNumber::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.GetMinNoteVelocity
// 0x0001 (0x0001 - 0x0000)
struct MidiNoteFunctionLibrary_GetMinNoteVelocity final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_GetMinNoteVelocity) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_GetMinNoteVelocity");
static_assert(sizeof(MidiNoteFunctionLibrary_GetMinNoteVelocity) == 0x000001, "Wrong size on MidiNoteFunctionLibrary_GetMinNoteVelocity");
static_assert(offsetof(MidiNoteFunctionLibrary_GetMinNoteVelocity, ReturnValue) == 0x000000, "Member 'MidiNoteFunctionLibrary_GetMinNoteVelocity::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.IntToMidiNote
// 0x0008 (0x0008 - 0x0000)
struct MidiNoteFunctionLibrary_IntToMidiNote final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMidiNote                              ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MidiNoteFunctionLibrary_IntToMidiNote) == 0x000004, "Wrong alignment on MidiNoteFunctionLibrary_IntToMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_IntToMidiNote) == 0x000008, "Wrong size on MidiNoteFunctionLibrary_IntToMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_IntToMidiNote, inInt) == 0x000000, "Member 'MidiNoteFunctionLibrary_IntToMidiNote::inInt' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_IntToMidiNote, ReturnValue) == 0x000004, "Member 'MidiNoteFunctionLibrary_IntToMidiNote::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.MakeLiteralMidiNote
// 0x0002 (0x0002 - 0x0000)
struct MidiNoteFunctionLibrary_MakeLiteralMidiNote final
{
public:
	struct FMidiNote                              Value;                                             // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMidiNote                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_MakeLiteralMidiNote) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_MakeLiteralMidiNote");
static_assert(sizeof(MidiNoteFunctionLibrary_MakeLiteralMidiNote) == 0x000002, "Wrong size on MidiNoteFunctionLibrary_MakeLiteralMidiNote");
static_assert(offsetof(MidiNoteFunctionLibrary_MakeLiteralMidiNote, Value) == 0x000000, "Member 'MidiNoteFunctionLibrary_MakeLiteralMidiNote::Value' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_MakeLiteralMidiNote, ReturnValue) == 0x000001, "Member 'MidiNoteFunctionLibrary_MakeLiteralMidiNote::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.MidiNoteToByte
// 0x0002 (0x0002 - 0x0000)
struct MidiNoteFunctionLibrary_MidiNoteToByte final
{
public:
	struct FMidiNote                              InMidiNote;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_MidiNoteToByte) == 0x000001, "Wrong alignment on MidiNoteFunctionLibrary_MidiNoteToByte");
static_assert(sizeof(MidiNoteFunctionLibrary_MidiNoteToByte) == 0x000002, "Wrong size on MidiNoteFunctionLibrary_MidiNoteToByte");
static_assert(offsetof(MidiNoteFunctionLibrary_MidiNoteToByte, InMidiNote) == 0x000000, "Member 'MidiNoteFunctionLibrary_MidiNoteToByte::InMidiNote' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_MidiNoteToByte, ReturnValue) == 0x000001, "Member 'MidiNoteFunctionLibrary_MidiNoteToByte::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MidiNoteFunctionLibrary.MidiNoteToInt
// 0x0008 (0x0008 - 0x0000)
struct MidiNoteFunctionLibrary_MidiNoteToInt final
{
public:
	struct FMidiNote                              InMidiNote;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MidiNoteFunctionLibrary_MidiNoteToInt) == 0x000004, "Wrong alignment on MidiNoteFunctionLibrary_MidiNoteToInt");
static_assert(sizeof(MidiNoteFunctionLibrary_MidiNoteToInt) == 0x000008, "Wrong size on MidiNoteFunctionLibrary_MidiNoteToInt");
static_assert(offsetof(MidiNoteFunctionLibrary_MidiNoteToInt, InMidiNote) == 0x000000, "Member 'MidiNoteFunctionLibrary_MidiNoteToInt::InMidiNote' has a wrong offset!");
static_assert(offsetof(MidiNoteFunctionLibrary_MidiNoteToInt, ReturnValue) == 0x000004, "Member 'MidiNoteFunctionLibrary_MidiNoteToInt::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MusicalTickFunctionLibrary.GetQuarterNotesPerTick
// 0x0004 (0x0004 - 0x0000)
struct MusicalTickFunctionLibrary_GetQuarterNotesPerTick final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_GetQuarterNotesPerTick) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_GetQuarterNotesPerTick");
static_assert(sizeof(MusicalTickFunctionLibrary_GetQuarterNotesPerTick) == 0x000004, "Wrong size on MusicalTickFunctionLibrary_GetQuarterNotesPerTick");
static_assert(offsetof(MusicalTickFunctionLibrary_GetQuarterNotesPerTick, ReturnValue) == 0x000000, "Member 'MusicalTickFunctionLibrary_GetQuarterNotesPerTick::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MusicalTickFunctionLibrary.GetTicksPerQuarterNote
// 0x0004 (0x0004 - 0x0000)
struct MusicalTickFunctionLibrary_GetTicksPerQuarterNote final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_GetTicksPerQuarterNote) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_GetTicksPerQuarterNote");
static_assert(sizeof(MusicalTickFunctionLibrary_GetTicksPerQuarterNote) == 0x000004, "Wrong size on MusicalTickFunctionLibrary_GetTicksPerQuarterNote");
static_assert(offsetof(MusicalTickFunctionLibrary_GetTicksPerQuarterNote, ReturnValue) == 0x000000, "Member 'MusicalTickFunctionLibrary_GetTicksPerQuarterNote::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MusicalTickFunctionLibrary.GetTicksPerQuarterNoteInt
// 0x0004 (0x0004 - 0x0000)
struct MusicalTickFunctionLibrary_GetTicksPerQuarterNoteInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_GetTicksPerQuarterNoteInt) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_GetTicksPerQuarterNoteInt");
static_assert(sizeof(MusicalTickFunctionLibrary_GetTicksPerQuarterNoteInt) == 0x000004, "Wrong size on MusicalTickFunctionLibrary_GetTicksPerQuarterNoteInt");
static_assert(offsetof(MusicalTickFunctionLibrary_GetTicksPerQuarterNoteInt, ReturnValue) == 0x000000, "Member 'MusicalTickFunctionLibrary_GetTicksPerQuarterNoteInt::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MusicalTickFunctionLibrary.QuarterNoteToTick
// 0x0008 (0x0008 - 0x0000)
struct MusicalTickFunctionLibrary_QuarterNoteToTick final
{
public:
	float                                         InQuarterNote;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_QuarterNoteToTick) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_QuarterNoteToTick");
static_assert(sizeof(MusicalTickFunctionLibrary_QuarterNoteToTick) == 0x000008, "Wrong size on MusicalTickFunctionLibrary_QuarterNoteToTick");
static_assert(offsetof(MusicalTickFunctionLibrary_QuarterNoteToTick, InQuarterNote) == 0x000000, "Member 'MusicalTickFunctionLibrary_QuarterNoteToTick::InQuarterNote' has a wrong offset!");
static_assert(offsetof(MusicalTickFunctionLibrary_QuarterNoteToTick, ReturnValue) == 0x000004, "Member 'MusicalTickFunctionLibrary_QuarterNoteToTick::ReturnValue' has a wrong offset!");

// Function HarmonixMidi.MusicalTickFunctionLibrary.TickToQuarterNote
// 0x0008 (0x0008 - 0x0000)
struct MusicalTickFunctionLibrary_TickToQuarterNote final
{
public:
	float                                         InTick;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicalTickFunctionLibrary_TickToQuarterNote) == 0x000004, "Wrong alignment on MusicalTickFunctionLibrary_TickToQuarterNote");
static_assert(sizeof(MusicalTickFunctionLibrary_TickToQuarterNote) == 0x000008, "Wrong size on MusicalTickFunctionLibrary_TickToQuarterNote");
static_assert(offsetof(MusicalTickFunctionLibrary_TickToQuarterNote, InTick) == 0x000000, "Member 'MusicalTickFunctionLibrary_TickToQuarterNote::InTick' has a wrong offset!");
static_assert(offsetof(MusicalTickFunctionLibrary_TickToQuarterNote, ReturnValue) == 0x000004, "Member 'MusicalTickFunctionLibrary_TickToQuarterNote::ReturnValue' has a wrong offset!");

}

