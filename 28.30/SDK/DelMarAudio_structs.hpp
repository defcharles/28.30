#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarAudio

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DelMarCore_structs.hpp"


namespace SDK
{

// ScriptStruct DelMarAudio.DelMarStateMix
// 0x0038 (0x0038 - 0x0000)
struct FDelMarStateMix final
{
public:
	struct FGameplayTag                           MixStateTag;                                       // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioMixModifierGroup                 ActorMixModifiers;                                 // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class USoundControlBusMix*                    ControlBusMix;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDeactivate;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FallbackState;                                     // 0x0030(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelMarStateMix) == 0x000008, "Wrong alignment on FDelMarStateMix");
static_assert(sizeof(FDelMarStateMix) == 0x000038, "Wrong size on FDelMarStateMix");
static_assert(offsetof(FDelMarStateMix, MixStateTag) == 0x000000, "Member 'FDelMarStateMix::MixStateTag' has a wrong offset!");
static_assert(offsetof(FDelMarStateMix, ActorMixModifiers) == 0x000008, "Member 'FDelMarStateMix::ActorMixModifiers' has a wrong offset!");
static_assert(offsetof(FDelMarStateMix, ControlBusMix) == 0x000020, "Member 'FDelMarStateMix::ControlBusMix' has a wrong offset!");
static_assert(offsetof(FDelMarStateMix, bAutoDeactivate) == 0x000028, "Member 'FDelMarStateMix::bAutoDeactivate' has a wrong offset!");
static_assert(offsetof(FDelMarStateMix, duration) == 0x00002C, "Member 'FDelMarStateMix::duration' has a wrong offset!");
static_assert(offsetof(FDelMarStateMix, FallbackState) == 0x000030, "Member 'FDelMarStateMix::FallbackState' has a wrong offset!");

// ScriptStruct DelMarAudio.DelMarStateMixCollection
// 0x0018 (0x0018 - 0x0000)
struct FDelMarStateMixCollection final
{
public:
	class FName                                   Group;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarStateMix>                Mixes;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarStateMixCollection) == 0x000008, "Wrong alignment on FDelMarStateMixCollection");
static_assert(sizeof(FDelMarStateMixCollection) == 0x000018, "Wrong size on FDelMarStateMixCollection");
static_assert(offsetof(FDelMarStateMixCollection, Group) == 0x000000, "Member 'FDelMarStateMixCollection::Group' has a wrong offset!");
static_assert(offsetof(FDelMarStateMixCollection, Mixes) == 0x000008, "Member 'FDelMarStateMixCollection::Mixes' has a wrong offset!");

// ScriptStruct DelMarAudio.DelMarEvent_AudioStateComponent
// 0x0008 (0x0008 - 0x0000)
struct FDelMarEvent_AudioStateComponent final
{
public:
	class UDelMarAudioStatePlayspaceComponent*    StateComponent;                                    // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelMarEvent_AudioStateComponent) == 0x000008, "Wrong alignment on FDelMarEvent_AudioStateComponent");
static_assert(sizeof(FDelMarEvent_AudioStateComponent) == 0x000008, "Wrong size on FDelMarEvent_AudioStateComponent");
static_assert(offsetof(FDelMarEvent_AudioStateComponent, StateComponent) == 0x000000, "Member 'FDelMarEvent_AudioStateComponent::StateComponent' has a wrong offset!");

// ScriptStruct DelMarAudio.DelmarAudioVirtualizationSettings
// 0x000C (0x000C - 0x0000)
struct FDelmarAudioVirtualizationSettings final
{
public:
	int32                                         MaxNumPlayers;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumDistantPlayers;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistantPlayerThreshold;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelmarAudioVirtualizationSettings) == 0x000004, "Wrong alignment on FDelmarAudioVirtualizationSettings");
static_assert(sizeof(FDelmarAudioVirtualizationSettings) == 0x00000C, "Wrong size on FDelmarAudioVirtualizationSettings");
static_assert(offsetof(FDelmarAudioVirtualizationSettings, MaxNumPlayers) == 0x000000, "Member 'FDelmarAudioVirtualizationSettings::MaxNumPlayers' has a wrong offset!");
static_assert(offsetof(FDelmarAudioVirtualizationSettings, MaxNumDistantPlayers) == 0x000004, "Member 'FDelmarAudioVirtualizationSettings::MaxNumDistantPlayers' has a wrong offset!");
static_assert(offsetof(FDelmarAudioVirtualizationSettings, DistantPlayerThreshold) == 0x000008, "Member 'FDelmarAudioVirtualizationSettings::DistantPlayerThreshold' has a wrong offset!");

}

