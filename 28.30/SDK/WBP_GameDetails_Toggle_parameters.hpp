#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GameDetails_Toggle

#include "Basic.hpp"


namespace SDK::Params
{

// Function WBP_GameDetails_Toggle.WBP_GameDetails_Toggle_C.ExecuteUbergraph_WBP_GameDetails_Toggle
// 0x0008 (0x0008 - 0x0000)
struct WBP_GameDetails_Toggle_C_ExecuteUbergraph_WBP_GameDetails_Toggle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GameDetails_Toggle_C_ExecuteUbergraph_WBP_GameDetails_Toggle) == 0x000004, "Wrong alignment on WBP_GameDetails_Toggle_C_ExecuteUbergraph_WBP_GameDetails_Toggle");
static_assert(sizeof(WBP_GameDetails_Toggle_C_ExecuteUbergraph_WBP_GameDetails_Toggle) == 0x000008, "Wrong size on WBP_GameDetails_Toggle_C_ExecuteUbergraph_WBP_GameDetails_Toggle");
static_assert(offsetof(WBP_GameDetails_Toggle_C_ExecuteUbergraph_WBP_GameDetails_Toggle, EntryPoint) == 0x000000, "Member 'WBP_GameDetails_Toggle_C_ExecuteUbergraph_WBP_GameDetails_Toggle::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_ExecuteUbergraph_WBP_GameDetails_Toggle, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_GameDetails_Toggle_C_ExecuteUbergraph_WBP_GameDetails_Toggle::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_GameDetails_Toggle.WBP_GameDetails_Toggle_C.InitVisuals
// 0x0008 (0x0008 - 0x0000)
struct WBP_GameDetails_Toggle_C_InitVisuals final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GameDetails_Toggle_C_InitVisuals) == 0x000008, "Wrong alignment on WBP_GameDetails_Toggle_C_InitVisuals");
static_assert(sizeof(WBP_GameDetails_Toggle_C_InitVisuals) == 0x000008, "Wrong size on WBP_GameDetails_Toggle_C_InitVisuals");
static_assert(offsetof(WBP_GameDetails_Toggle_C_InitVisuals, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'WBP_GameDetails_Toggle_C_InitVisuals::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_GameDetails_Toggle.WBP_GameDetails_Toggle_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_GameDetails_Toggle_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GameDetails_Toggle_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_GameDetails_Toggle_C_PreConstruct");
static_assert(sizeof(WBP_GameDetails_Toggle_C_PreConstruct) == 0x000001, "Wrong size on WBP_GameDetails_Toggle_C_PreConstruct");
static_assert(offsetof(WBP_GameDetails_Toggle_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_GameDetails_Toggle_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_GameDetails_Toggle.WBP_GameDetails_Toggle_C.Set Toggle
// 0x0030 (0x0030 - 0x0000)
struct WBP_GameDetails_Toggle_C_Set_Toggle final
{
public:
	bool                                          IsInit;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsToggled_0;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_1;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GameDetails_Toggle_C_Set_Toggle) == 0x000008, "Wrong alignment on WBP_GameDetails_Toggle_C_Set_Toggle");
static_assert(sizeof(WBP_GameDetails_Toggle_C_Set_Toggle) == 0x000030, "Wrong size on WBP_GameDetails_Toggle_C_Set_Toggle");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, IsInit) == 0x000000, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::IsInit' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, IsToggled_0) == 0x000001, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::IsToggled_0' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, Temp_bool_Variable) == 0x000002, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, Temp_real_Variable) == 0x000004, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, Temp_bool_Variable_1) == 0x000008, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, Temp_real_Variable_1) == 0x00000C, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000010, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, K2Node_Select_Default) == 0x000014, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, K2Node_Select_Default_1) == 0x000018, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_Set_Toggle, CallFunc_PlayAnimation_ReturnValue_1) == 0x000028, "Member 'WBP_GameDetails_Toggle_C_Set_Toggle::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function WBP_GameDetails_Toggle.WBP_GameDetails_Toggle_C.SetDFTexture
// 0x0008 (0x0008 - 0x0000)
struct WBP_GameDetails_Toggle_C_SetDFTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GameDetails_Toggle_C_SetDFTexture) == 0x000008, "Wrong alignment on WBP_GameDetails_Toggle_C_SetDFTexture");
static_assert(sizeof(WBP_GameDetails_Toggle_C_SetDFTexture) == 0x000008, "Wrong size on WBP_GameDetails_Toggle_C_SetDFTexture");
static_assert(offsetof(WBP_GameDetails_Toggle_C_SetDFTexture, Texture) == 0x000000, "Member 'WBP_GameDetails_Toggle_C_SetDFTexture::Texture' has a wrong offset!");

// Function WBP_GameDetails_Toggle.WBP_GameDetails_Toggle_C.SetOutlineCornerRadius
// 0x0010 (0x0010 - 0x0000)
struct WBP_GameDetails_Toggle_C_SetOutlineCornerRadius final
{
public:
	class UWBP_UIKit_Block_BackgroundWithOutline_C* K2Node_DynamicCast_AsWBP_UIKit_Block_Background_with_Outline; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GameDetails_Toggle_C_SetOutlineCornerRadius) == 0x000008, "Wrong alignment on WBP_GameDetails_Toggle_C_SetOutlineCornerRadius");
static_assert(sizeof(WBP_GameDetails_Toggle_C_SetOutlineCornerRadius) == 0x000010, "Wrong size on WBP_GameDetails_Toggle_C_SetOutlineCornerRadius");
static_assert(offsetof(WBP_GameDetails_Toggle_C_SetOutlineCornerRadius, K2Node_DynamicCast_AsWBP_UIKit_Block_Background_with_Outline) == 0x000000, "Member 'WBP_GameDetails_Toggle_C_SetOutlineCornerRadius::K2Node_DynamicCast_AsWBP_UIKit_Block_Background_with_Outline' has a wrong offset!");
static_assert(offsetof(WBP_GameDetails_Toggle_C_SetOutlineCornerRadius, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'WBP_GameDetails_Toggle_C_SetOutlineCornerRadius::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

