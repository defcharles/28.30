#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksCommonRuntime

#include "Basic.hpp"

#include "ModularGameplay_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SparksCommonRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SparksCommonRuntime.SparksCommonUtilities
// 0x0008 (0x00A8 - 0x00A0)
class USparksCommonUtilities final : public UGameStateComponent
{
public:
	bool                                          bSparksToolIsVisible;                              // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USparksCommonUtilities* GetSparksCommonUtilities(const class UObject* WorldContextObject);

	void ShowSparksCaptureTool(bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksCommonUtilities">();
	}
	static class USparksCommonUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksCommonUtilities>();
	}
};
static_assert(alignof(USparksCommonUtilities) == 0x000008, "Wrong alignment on USparksCommonUtilities");
static_assert(sizeof(USparksCommonUtilities) == 0x0000A8, "Wrong size on USparksCommonUtilities");
static_assert(offsetof(USparksCommonUtilities, bSparksToolIsVisible) == 0x0000A0, "Member 'USparksCommonUtilities::bSparksToolIsVisible' has a wrong offset!");

// Class SparksCommonRuntime.SparksCrowdSpawner
// 0x0110 (0x0330 - 0x0220)
class USparksCrowdSpawner final : public USceneComponent
{
public:
	TMap<class UInstancedStaticMeshComponent*, int32> MeshWeights;                                       // 0x0220(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	int32                                         TotalMeshWeight;                                   // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Area;                                              // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FIntPoint                              CrowdSize;                                         // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              PositionRandomness;                                // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                LookAt;                                            // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LookAtRandomness;                                  // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AdditionalRotation;                                // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector2D                              ScaleVariance;                                     // 0x02E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BatchSize;                                         // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCrowdMemberToSpawn>            CrowdMembersToSpawn;                               // 0x02F8(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            ParamTransitionCurve;                              // 0x0308(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           TransitionTickTimerHandle;                         // 0x0310(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentTransitionParamIndex;                       // 0x0318(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ParamValueAtStartOfTransition;                     // 0x031C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentParamValue;                                 // 0x0320(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentTransitionTarget;                           // 0x0324(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentTransitionDuration;                         // 0x0328(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeElapsedInCurrentTransition;                    // 0x032C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool SpawnCrowd(const struct FVector& InArea, const struct FIntPoint& InCrowdSize, const struct FVector2D& InPositionRandomness, const struct FVector2D& InScaleVariance, const struct FVector& InLookAt, float InLookAtRandomeness, const struct FRotator& InAdditionalRotation, int32 InBatchSize, const TMap<class UInstancedStaticMeshComponent*, int32>& InMeshWeights);
	bool SpawnCrowdNow(const struct FVector& InArea, const struct FIntPoint& InCrowdSize, const struct FVector2D& InPositionRandomness, const struct FVector2D& InScaleVariance, const struct FVector& InLookAt, float InLookAtRandomeness, const struct FRotator& InAdditionalRotation, const TMap<class UInstancedStaticMeshComponent*, int32>& InMeshWeights);
	void TransitionCrowdToTargetParamValue(int32 DataIndex, float TargetValue, float TimeToTransition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksCrowdSpawner">();
	}
	static class USparksCrowdSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksCrowdSpawner>();
	}
};
static_assert(alignof(USparksCrowdSpawner) == 0x000010, "Wrong alignment on USparksCrowdSpawner");
static_assert(sizeof(USparksCrowdSpawner) == 0x000330, "Wrong size on USparksCrowdSpawner");
static_assert(offsetof(USparksCrowdSpawner, MeshWeights) == 0x000220, "Member 'USparksCrowdSpawner::MeshWeights' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, TotalMeshWeight) == 0x000270, "Member 'USparksCrowdSpawner::TotalMeshWeight' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, Area) == 0x000278, "Member 'USparksCrowdSpawner::Area' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, CrowdSize) == 0x000290, "Member 'USparksCrowdSpawner::CrowdSize' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, PositionRandomness) == 0x000298, "Member 'USparksCrowdSpawner::PositionRandomness' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, LookAt) == 0x0002A8, "Member 'USparksCrowdSpawner::LookAt' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, LookAtRandomness) == 0x0002C0, "Member 'USparksCrowdSpawner::LookAtRandomness' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, AdditionalRotation) == 0x0002C8, "Member 'USparksCrowdSpawner::AdditionalRotation' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, ScaleVariance) == 0x0002E0, "Member 'USparksCrowdSpawner::ScaleVariance' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, BatchSize) == 0x0002F0, "Member 'USparksCrowdSpawner::BatchSize' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, CrowdMembersToSpawn) == 0x0002F8, "Member 'USparksCrowdSpawner::CrowdMembersToSpawn' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, ParamTransitionCurve) == 0x000308, "Member 'USparksCrowdSpawner::ParamTransitionCurve' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, TransitionTickTimerHandle) == 0x000310, "Member 'USparksCrowdSpawner::TransitionTickTimerHandle' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, CurrentTransitionParamIndex) == 0x000318, "Member 'USparksCrowdSpawner::CurrentTransitionParamIndex' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, ParamValueAtStartOfTransition) == 0x00031C, "Member 'USparksCrowdSpawner::ParamValueAtStartOfTransition' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, CurrentParamValue) == 0x000320, "Member 'USparksCrowdSpawner::CurrentParamValue' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, CurrentTransitionTarget) == 0x000324, "Member 'USparksCrowdSpawner::CurrentTransitionTarget' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, CurrentTransitionDuration) == 0x000328, "Member 'USparksCrowdSpawner::CurrentTransitionDuration' has a wrong offset!");
static_assert(offsetof(USparksCrowdSpawner, TimeElapsedInCurrentTransition) == 0x00032C, "Member 'USparksCrowdSpawner::TimeElapsedInCurrentTransition' has a wrong offset!");

}

