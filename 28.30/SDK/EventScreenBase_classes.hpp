#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EventScreenBase

#include "Basic.hpp"

#include "EventScreenBase_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_classes.hpp"
#include "CommonUI_classes.hpp"
#include "FortniteUI_classes.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// Class EventScreenBase.FortEventScreenData
// 0x0670 (0x06A0 - 0x0030)
class UFortEventScreenData final : public UDataAsset
{
public:
	class FString                                 EventCMSId;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountResourceName;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelOfferId;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PremiumTrackOfferId;                               // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortTokenType*                         PremiumTrackPurchasedToken;                        // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VaultWorldTag;                                     // 0x0078(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVaultWorldBackgroundData              PreviewScreenBackgroundData;                       // 0x0080(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortChallengeBundleItemDefinition> QuestBundle;                                       // 0x00D8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     SpecialRewardItem;                                 // 0x00F8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     SpecialPremiumRewardItem;                          // 0x0118(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEventItemOverride>             ItemOverrides;                                     // 0x0138(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FEventScreenTrackData                  FreeTrackData;                                     // 0x0148(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEventScreenTrackData                  PremiumTrackData;                                  // 0x0178(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           QuestCategoryTag;                                  // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class URichTextBlockDecorator>> RichTextDecorators;                                // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     EventBackgroundMaterial;                           // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ProgressBarMaterial;                               // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CurrencyBrush;                                     // 0x01D0(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CompletionBannerBrush;                             // 0x0290(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            GlowForeground;                                    // 0x0350(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            GlowBackground;                                    // 0x0410(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           EventBackgroundColor1;                             // 0x04D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EventBackgroundColor2;                             // 0x04E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RewardBackgroundColor1;                            // 0x04F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RewardBackgroundColor2;                            // 0x0500(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RewardBackgroundColor3;                            // 0x0510(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AccentColor;                                       // 0x0520(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        RewardTileBackgroundColors;                        // 0x0530(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TimeRemainingFormat;                               // 0x0580(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CurrencyFormat;                                    // 0x0598(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FEventScreenMoreInfoGroup>      MoreInfoGroups;                                    // 0x05B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USoundBase*                             DefaultHoveredSound;                               // 0x05C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             DefaultPressedSound;                               // 0x05C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BuyPressedSound;                                   // 0x05D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BuyHoldStartedSound;                               // 0x05D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BuyHoldCompletedSound;                             // 0x05E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BuyHoldAbortedSound;                               // 0x05E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             BackPressedSound;                                  // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             AddPressedSound;                                   // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SubtractPressedSound;                              // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ProgressStartedSound;                              // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ProgressEndedSound;                                // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ProgressInterruptedSound;                          // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RewardPreviewZoomLevel;                            // 0x0620(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWidgetCameraFraming;                           // 0x0624(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_625[0x3];                                      // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   MoreInfoModalClass;                                // 0x0628(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PurchaseLevelsModalClass;                          // 0x0648(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PurchasePremiumTrackModalClass;                    // 0x0668(0x0020)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CalendarEvents;                                    // 0x0688(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventScreenData">();
	}
	static class UFortEventScreenData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventScreenData>();
	}
};
static_assert(alignof(UFortEventScreenData) == 0x000010, "Wrong alignment on UFortEventScreenData");
static_assert(sizeof(UFortEventScreenData) == 0x0006A0, "Wrong size on UFortEventScreenData");
static_assert(offsetof(UFortEventScreenData, EventCMSId) == 0x000030, "Member 'UFortEventScreenData::EventCMSId' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, AccountResourceName) == 0x000040, "Member 'UFortEventScreenData::AccountResourceName' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, LevelOfferId) == 0x000050, "Member 'UFortEventScreenData::LevelOfferId' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, PremiumTrackOfferId) == 0x000060, "Member 'UFortEventScreenData::PremiumTrackOfferId' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, PremiumTrackPurchasedToken) == 0x000070, "Member 'UFortEventScreenData::PremiumTrackPurchasedToken' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, VaultWorldTag) == 0x000078, "Member 'UFortEventScreenData::VaultWorldTag' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, PreviewScreenBackgroundData) == 0x000080, "Member 'UFortEventScreenData::PreviewScreenBackgroundData' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, QuestBundle) == 0x0000D8, "Member 'UFortEventScreenData::QuestBundle' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, SpecialRewardItem) == 0x0000F8, "Member 'UFortEventScreenData::SpecialRewardItem' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, SpecialPremiumRewardItem) == 0x000118, "Member 'UFortEventScreenData::SpecialPremiumRewardItem' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, ItemOverrides) == 0x000138, "Member 'UFortEventScreenData::ItemOverrides' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, FreeTrackData) == 0x000148, "Member 'UFortEventScreenData::FreeTrackData' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, PremiumTrackData) == 0x000178, "Member 'UFortEventScreenData::PremiumTrackData' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, QuestCategoryTag) == 0x0001A8, "Member 'UFortEventScreenData::QuestCategoryTag' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RichTextDecorators) == 0x0001B0, "Member 'UFortEventScreenData::RichTextDecorators' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, EventBackgroundMaterial) == 0x0001C0, "Member 'UFortEventScreenData::EventBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, ProgressBarMaterial) == 0x0001C8, "Member 'UFortEventScreenData::ProgressBarMaterial' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, CurrencyBrush) == 0x0001D0, "Member 'UFortEventScreenData::CurrencyBrush' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, CompletionBannerBrush) == 0x000290, "Member 'UFortEventScreenData::CompletionBannerBrush' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, GlowForeground) == 0x000350, "Member 'UFortEventScreenData::GlowForeground' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, GlowBackground) == 0x000410, "Member 'UFortEventScreenData::GlowBackground' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, EventBackgroundColor1) == 0x0004D0, "Member 'UFortEventScreenData::EventBackgroundColor1' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, EventBackgroundColor2) == 0x0004E0, "Member 'UFortEventScreenData::EventBackgroundColor2' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardBackgroundColor1) == 0x0004F0, "Member 'UFortEventScreenData::RewardBackgroundColor1' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardBackgroundColor2) == 0x000500, "Member 'UFortEventScreenData::RewardBackgroundColor2' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardBackgroundColor3) == 0x000510, "Member 'UFortEventScreenData::RewardBackgroundColor3' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, AccentColor) == 0x000520, "Member 'UFortEventScreenData::AccentColor' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardTileBackgroundColors) == 0x000530, "Member 'UFortEventScreenData::RewardTileBackgroundColors' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, TimeRemainingFormat) == 0x000580, "Member 'UFortEventScreenData::TimeRemainingFormat' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, CurrencyFormat) == 0x000598, "Member 'UFortEventScreenData::CurrencyFormat' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, MoreInfoGroups) == 0x0005B0, "Member 'UFortEventScreenData::MoreInfoGroups' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, DefaultHoveredSound) == 0x0005C0, "Member 'UFortEventScreenData::DefaultHoveredSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, DefaultPressedSound) == 0x0005C8, "Member 'UFortEventScreenData::DefaultPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BuyPressedSound) == 0x0005D0, "Member 'UFortEventScreenData::BuyPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BuyHoldStartedSound) == 0x0005D8, "Member 'UFortEventScreenData::BuyHoldStartedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BuyHoldCompletedSound) == 0x0005E0, "Member 'UFortEventScreenData::BuyHoldCompletedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BuyHoldAbortedSound) == 0x0005E8, "Member 'UFortEventScreenData::BuyHoldAbortedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, BackPressedSound) == 0x0005F0, "Member 'UFortEventScreenData::BackPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, AddPressedSound) == 0x0005F8, "Member 'UFortEventScreenData::AddPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, SubtractPressedSound) == 0x000600, "Member 'UFortEventScreenData::SubtractPressedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, ProgressStartedSound) == 0x000608, "Member 'UFortEventScreenData::ProgressStartedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, ProgressEndedSound) == 0x000610, "Member 'UFortEventScreenData::ProgressEndedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, ProgressInterruptedSound) == 0x000618, "Member 'UFortEventScreenData::ProgressInterruptedSound' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, RewardPreviewZoomLevel) == 0x000620, "Member 'UFortEventScreenData::RewardPreviewZoomLevel' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, bUseWidgetCameraFraming) == 0x000624, "Member 'UFortEventScreenData::bUseWidgetCameraFraming' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, MoreInfoModalClass) == 0x000628, "Member 'UFortEventScreenData::MoreInfoModalClass' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, PurchaseLevelsModalClass) == 0x000648, "Member 'UFortEventScreenData::PurchaseLevelsModalClass' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, PurchasePremiumTrackModalClass) == 0x000668, "Member 'UFortEventScreenData::PurchasePremiumTrackModalClass' has a wrong offset!");
static_assert(offsetof(UFortEventScreenData, CalendarEvents) == 0x000688, "Member 'UFortEventScreenData::CalendarEvents' has a wrong offset!");

// Class EventScreenBase.FortEventModalBase
// 0x0008 (0x0408 - 0x0400)
class UFortEventModalBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x8];                                      // 0x0400(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseModal();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventModalBase">();
	}
	static class UFortEventModalBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventModalBase>();
	}
};
static_assert(alignof(UFortEventModalBase) == 0x000008, "Wrong alignment on UFortEventModalBase");
static_assert(sizeof(UFortEventModalBase) == 0x000408, "Wrong size on UFortEventModalBase");

// Class EventScreenBase.FortEventMoreInfoGroup
// 0x0000 (0x02C0 - 0x02C0)
class UFortEventMoreInfoGroup final : public UUserWidget
{
public:
	void OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void OnIconLoaded(const class UObject* Icon);
	void OnSetGroupText(const class FText& Header, const class FText& Body);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventMoreInfoGroup">();
	}
	static class UFortEventMoreInfoGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventMoreInfoGroup>();
	}
};
static_assert(alignof(UFortEventMoreInfoGroup) == 0x000008, "Wrong alignment on UFortEventMoreInfoGroup");
static_assert(sizeof(UFortEventMoreInfoGroup) == 0x0002C0, "Wrong size on UFortEventMoreInfoGroup");

// Class EventScreenBase.FortEventMoreInfoModal
// 0x0028 (0x0430 - 0x0408)
class UFortEventMoreInfoModal final : public UFortEventModalBase
{
public:
	class UDynamicEntryBox*                       DynamicEntryBox_Groups;                            // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseTouch;                                 // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_420[0x8];                                      // 0x0420(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UScrollBox*                             SB_Vertical;                                       // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void OnModalBackout();
	void SetModalText(const class FText& Header, const class FText& SubHeader, const class FText& Legal);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventMoreInfoModal">();
	}
	static class UFortEventMoreInfoModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventMoreInfoModal>();
	}
};
static_assert(alignof(UFortEventMoreInfoModal) == 0x000008, "Wrong alignment on UFortEventMoreInfoModal");
static_assert(sizeof(UFortEventMoreInfoModal) == 0x000430, "Wrong size on UFortEventMoreInfoModal");
static_assert(offsetof(UFortEventMoreInfoModal, DynamicEntryBox_Groups) == 0x000408, "Member 'UFortEventMoreInfoModal::DynamicEntryBox_Groups' has a wrong offset!");
static_assert(offsetof(UFortEventMoreInfoModal, Button_Back) == 0x000410, "Member 'UFortEventMoreInfoModal::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortEventMoreInfoModal, Button_CloseTouch) == 0x000418, "Member 'UFortEventMoreInfoModal::Button_CloseTouch' has a wrong offset!");
static_assert(offsetof(UFortEventMoreInfoModal, SB_Vertical) == 0x000428, "Member 'UFortEventMoreInfoModal::SB_Vertical' has a wrong offset!");

// Class EventScreenBase.FortEventPurchaseLevelsModal
// 0x0070 (0x0478 - 0x0408)
class UFortEventPurchaseLevelsModal : public UFortEventModalBase
{
public:
	class UCommonButtonBase*                      Button_Addition;                                   // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Subtraction;                                // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Purchase;                                   // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_GetVBucks;                                  // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseTouch;                                 // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEventScreenListView*                   ListView_RewardPreview;                            // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentResourceValue;                              // 0x0440(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxResourceValue;                                  // 0x0444(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentVBucks;                                     // 0x0448(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OfferResourceQuantity;                             // 0x044C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnimateListViewFromEmpty;                         // 0x0450(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_451[0x27];                                     // 0x0451(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePurchaseComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const class FString& InOfferId);
	void OnAmountChangeButtonClicked();
	void OnCMSTextApplied(const class FText& LegalText);
	void OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void OnPurchaseAmountChanged(const int32 TotalPrice, const int32 LevelQuantity, const int32 PurchaseQuantity, const int32 ResourceQuantity);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventPurchaseLevelsModal">();
	}
	static class UFortEventPurchaseLevelsModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventPurchaseLevelsModal>();
	}
};
static_assert(alignof(UFortEventPurchaseLevelsModal) == 0x000008, "Wrong alignment on UFortEventPurchaseLevelsModal");
static_assert(sizeof(UFortEventPurchaseLevelsModal) == 0x000478, "Wrong size on UFortEventPurchaseLevelsModal");
static_assert(offsetof(UFortEventPurchaseLevelsModal, Button_Addition) == 0x000408, "Member 'UFortEventPurchaseLevelsModal::Button_Addition' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, Button_Subtraction) == 0x000410, "Member 'UFortEventPurchaseLevelsModal::Button_Subtraction' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, Button_Purchase) == 0x000418, "Member 'UFortEventPurchaseLevelsModal::Button_Purchase' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, Button_GetVBucks) == 0x000420, "Member 'UFortEventPurchaseLevelsModal::Button_GetVBucks' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, Button_Back) == 0x000428, "Member 'UFortEventPurchaseLevelsModal::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, Button_CloseTouch) == 0x000430, "Member 'UFortEventPurchaseLevelsModal::Button_CloseTouch' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, ListView_RewardPreview) == 0x000438, "Member 'UFortEventPurchaseLevelsModal::ListView_RewardPreview' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, CurrentResourceValue) == 0x000440, "Member 'UFortEventPurchaseLevelsModal::CurrentResourceValue' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, MaxResourceValue) == 0x000444, "Member 'UFortEventPurchaseLevelsModal::MaxResourceValue' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, CurrentVBucks) == 0x000448, "Member 'UFortEventPurchaseLevelsModal::CurrentVBucks' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, OfferResourceQuantity) == 0x00044C, "Member 'UFortEventPurchaseLevelsModal::OfferResourceQuantity' has a wrong offset!");
static_assert(offsetof(UFortEventPurchaseLevelsModal, bAnimateListViewFromEmpty) == 0x000450, "Member 'UFortEventPurchaseLevelsModal::bAnimateListViewFromEmpty' has a wrong offset!");

// Class EventScreenBase.FortPurchasePremiumTrackBody
// 0x0000 (0x02C0 - 0x02C0)
class UFortPurchasePremiumTrackBody final : public UUserWidget
{
public:
	void OnPopulate(const int32 BodyIndex, const class FText& BodyText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPurchasePremiumTrackBody">();
	}
	static class UFortPurchasePremiumTrackBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPurchasePremiumTrackBody>();
	}
};
static_assert(alignof(UFortPurchasePremiumTrackBody) == 0x000008, "Wrong alignment on UFortPurchasePremiumTrackBody");
static_assert(sizeof(UFortPurchasePremiumTrackBody) == 0x0002C0, "Wrong size on UFortPurchasePremiumTrackBody");

// Class EventScreenBase.FortEventPurchasePremiumTrackModal
// 0x0070 (0x0478 - 0x0408)
class UFortEventPurchasePremiumTrackModal final : public UFortEventModalBase
{
public:
	class UDynamicEntryBox*                       DynamicEntryBox_Body;                              // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScrollBox*                             ScrollBox_Body;                                    // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCTAButton*                         Button_Purchase;                                   // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_GetVBucks;                                  // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Back;                                       // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseTouch;                                 // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_PreviewReward;                              // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentVBucks;                                     // 0x0440(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_444[0x34];                                     // 0x0444(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePurchaseComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const class FString& InOfferId);
	void OnCMSTextApplied(const class FText& HeaderText, const class FText& LegalText);
	void OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void OnPriceSet(const int32 Price);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventPurchasePremiumTrackModal">();
	}
	static class UFortEventPurchasePremiumTrackModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventPurchasePremiumTrackModal>();
	}
};
static_assert(alignof(UFortEventPurchasePremiumTrackModal) == 0x000008, "Wrong alignment on UFortEventPurchasePremiumTrackModal");
static_assert(sizeof(UFortEventPurchasePremiumTrackModal) == 0x000478, "Wrong size on UFortEventPurchasePremiumTrackModal");
static_assert(offsetof(UFortEventPurchasePremiumTrackModal, DynamicEntryBox_Body) == 0x000408, "Member 'UFortEventPurchasePremiumTrackModal::DynamicEntryBox_Body' has a wrong offset!");
static_assert(offsetof(UFortEventPurchasePremiumTrackModal, ScrollBox_Body) == 0x000410, "Member 'UFortEventPurchasePremiumTrackModal::ScrollBox_Body' has a wrong offset!");
static_assert(offsetof(UFortEventPurchasePremiumTrackModal, Button_Purchase) == 0x000418, "Member 'UFortEventPurchasePremiumTrackModal::Button_Purchase' has a wrong offset!");
static_assert(offsetof(UFortEventPurchasePremiumTrackModal, Button_GetVBucks) == 0x000420, "Member 'UFortEventPurchasePremiumTrackModal::Button_GetVBucks' has a wrong offset!");
static_assert(offsetof(UFortEventPurchasePremiumTrackModal, Button_Back) == 0x000428, "Member 'UFortEventPurchasePremiumTrackModal::Button_Back' has a wrong offset!");
static_assert(offsetof(UFortEventPurchasePremiumTrackModal, Button_CloseTouch) == 0x000430, "Member 'UFortEventPurchasePremiumTrackModal::Button_CloseTouch' has a wrong offset!");
static_assert(offsetof(UFortEventPurchasePremiumTrackModal, Button_PreviewReward) == 0x000438, "Member 'UFortEventPurchasePremiumTrackModal::Button_PreviewReward' has a wrong offset!");
static_assert(offsetof(UFortEventPurchasePremiumTrackModal, CurrentVBucks) == 0x000440, "Member 'UFortEventPurchasePremiumTrackModal::CurrentVBucks' has a wrong offset!");

// Class EventScreenBase.FortEventListViewWidgetBase
// 0x0008 (0x02C8 - 0x02C0)
class UFortEventListViewWidgetBase : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventListViewWidgetBase">();
	}
	static class UFortEventListViewWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventListViewWidgetBase>();
	}
};
static_assert(alignof(UFortEventListViewWidgetBase) == 0x000008, "Wrong alignment on UFortEventListViewWidgetBase");
static_assert(sizeof(UFortEventListViewWidgetBase) == 0x0002C8, "Wrong size on UFortEventListViewWidgetBase");

// Class EventScreenBase.FortEventRewardTracksWidget
// 0x0050 (0x0318 - 0x02C8)
class UFortEventRewardTracksWidget : public UFortEventListViewWidgetBase
{
public:
	class UDynamicEntryBox*                       DynamicEntryBox_RewardTracks;                      // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreviewMode;                                      // 0x02D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D1[0x47];                                     // 0x02D1(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPOnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void BPOnSetRewardItem(const int32 RequiredProgress, const int32 RemainingProgress, const float RewardProgressPercent, const float PreviewProgressPercent, const float OverallProgressPercent, const bool bInPreviewMode);
	void BPSetAllRewardsCollected(const bool bAllCollected);
	void BPSetProgressPercent(const float Percent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventRewardTracksWidget">();
	}
	static class UFortEventRewardTracksWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventRewardTracksWidget>();
	}
};
static_assert(alignof(UFortEventRewardTracksWidget) == 0x000008, "Wrong alignment on UFortEventRewardTracksWidget");
static_assert(sizeof(UFortEventRewardTracksWidget) == 0x000318, "Wrong size on UFortEventRewardTracksWidget");
static_assert(offsetof(UFortEventRewardTracksWidget, DynamicEntryBox_RewardTracks) == 0x0002C8, "Member 'UFortEventRewardTracksWidget::DynamicEntryBox_RewardTracks' has a wrong offset!");
static_assert(offsetof(UFortEventRewardTracksWidget, bPreviewMode) == 0x0002D0, "Member 'UFortEventRewardTracksWidget::bPreviewMode' has a wrong offset!");

// Class EventScreenBase.FortEventSpacerWidget
// 0x0000 (0x02C8 - 0x02C8)
class UFortEventSpacerWidget : public UFortEventListViewWidgetBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventSpacerWidget">();
	}
	static class UFortEventSpacerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventSpacerWidget>();
	}
};
static_assert(alignof(UFortEventSpacerWidget) == 0x000008, "Wrong alignment on UFortEventSpacerWidget");
static_assert(sizeof(UFortEventSpacerWidget) == 0x0002C8, "Wrong size on UFortEventSpacerWidget");

// Class EventScreenBase.FortEventRewardWidget
// 0x0090 (0x0350 - 0x02C0)
class UFortEventRewardWidget : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_RewardPreview;                              // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCosmeticItemCard*                  UserWidget_ItemCard;                               // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsTrackOwned;                                     // 0x02D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreviewMode;                                      // 0x02D9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInPreviewSelectedState;                           // 0x02DA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInPremiumUpgradeState;                            // 0x02DB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2DC[0x74];                                     // 0x02DC(0x0074)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData);
	void OnInputMethodChanged(const ECommonInputType NewInputType);
	void OnRewardWidgetReset();
	void OnSetRewardItem(const int32 RequiredProgress, const int32 RemainingProgress, const float RewardProgressPercent, const float PreviewProgressPercent, const float OverallProgressPercent, const bool bInPreviewMode);
	void SetAllRewardsCollected(const bool bAllCollected);
	void SetCustomItemIcon(const class UTexture2D* CustomItemIcon);
	void SetDoubleWidth(const bool bDoubleWidth);
	void SetInPremiumUpgradeState(const bool bHighlighted);
	void SetInPreviewedState(const bool bPreviewed);
	void SetInPreviewSelectedState(const bool bSelected);
	void SetInSelectedState(const bool bSelected);
	void SetIsBannerItem(const bool bIsBanner);
	void SetProgressPercent(const float Percent);
	void SetTrackData(const struct FEventScreenTrackData& TrackData, const bool bIsOwned);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventRewardWidget">();
	}
	static class UFortEventRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventRewardWidget>();
	}
};
static_assert(alignof(UFortEventRewardWidget) == 0x000008, "Wrong alignment on UFortEventRewardWidget");
static_assert(sizeof(UFortEventRewardWidget) == 0x000350, "Wrong size on UFortEventRewardWidget");
static_assert(offsetof(UFortEventRewardWidget, Button_RewardPreview) == 0x0002C8, "Member 'UFortEventRewardWidget::Button_RewardPreview' has a wrong offset!");
static_assert(offsetof(UFortEventRewardWidget, UserWidget_ItemCard) == 0x0002D0, "Member 'UFortEventRewardWidget::UserWidget_ItemCard' has a wrong offset!");
static_assert(offsetof(UFortEventRewardWidget, bIsTrackOwned) == 0x0002D8, "Member 'UFortEventRewardWidget::bIsTrackOwned' has a wrong offset!");
static_assert(offsetof(UFortEventRewardWidget, bPreviewMode) == 0x0002D9, "Member 'UFortEventRewardWidget::bPreviewMode' has a wrong offset!");
static_assert(offsetof(UFortEventRewardWidget, bInPreviewSelectedState) == 0x0002DA, "Member 'UFortEventRewardWidget::bInPreviewSelectedState' has a wrong offset!");
static_assert(offsetof(UFortEventRewardWidget, bInPremiumUpgradeState) == 0x0002DB, "Member 'UFortEventRewardWidget::bInPremiumUpgradeState' has a wrong offset!");

// Class EventScreenBase.FortEventScreenBase
// 0x0428 (0x0B58 - 0x0730)
class UFortEventScreenBase : public UFortItemPreviewScreen
{
public:
	uint8                                         Pad_730[0x8];                                      // 0x0730(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNamedSlot*>                     LayoutTemplateSlots;                               // 0x0738(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UFortLazyImage*                         LazyImage_KeyArt;                                  // 0x0748(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_ViewQuests;                                 // 0x0750(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_MoreInfo;                                   // 0x0758(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_PurchaseLevels;                             // 0x0760(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Preview;                                    // 0x0768(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_ShowInItemShop;                             // 0x0770(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Previous;                                   // 0x0778(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Next;                                       // 0x0780(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortEventTrackerModule_CustomText*     CustomText_InspectItem;                            // 0x0788(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           Panel_LoadError;                                   // 0x0790(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_Close;                                      // 0x0798(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButtonBase*                      Button_CloseTouch;                                 // 0x07A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortEventScreenData*                   EventScreenData;                                   // 0x07A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEventScreenRewardPreviewType                 ActiveRewardPreviewType;                           // 0x07B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortChallengeBundleItemDefinition*     LoadedQuestBundle;                                 // 0x07B8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortItemPreviewWorld*                  CachedVaultWorld;                                  // 0x07C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C8[0x10];                                     // 0x07C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeBetweenVariantsRestart;                        // 0x07D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeBetweenVariants;                               // 0x07DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortItemVM*                            CachedItemVM;                                      // 0x07E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortCosmeticVariantPreview>    CachedVariantPreviews;                             // 0x07E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7F8[0x360];                                    // 0x07F8(0x0360)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleActiveSeasonDataChanged(const TArray<class FString>& ActiveEventFlags);
	void HandleGiftBoxClosed();
	void HandleItemShown(const class UFortAccountItemDefinition* AccountItemDef);
	class UWidget* HandleRewardListNavigateRightEvent(EUINavigation InNavigation);
	class UWidget* HandleRewardListNavigateUpEvent(EUINavigation InNavigation);
	void HandleToggleFullscreenMap(bool bVisible);
	class UWidget* HandleUpsellPromptNavigateUpEvent(EUINavigation InNavigation);
	void OnCalendarEventEnded(const class FString& EventName);
	void OnCalendarEventStarted(const class FString& EventName);
	void OnFirstViewAfterCompletion();
	void OnRewardPreviewItemChanged(const class UFortAccountItemDefinition* Item, const bool bFreeTrack);
	void OnRewardTrackReady();
	void OnScreenViewChanged(const EEventScreenView PrevScreenView, const EEventScreenView NewScreenView);
	void OnSetBonusInfo(const struct FBonusInfoMiniTagData& BonusInfo);
	void RegisterLayoutSlots();
	void SetItemShopCallout(const class FText& ItemShopCalloutText);
	void SetItemShopOfferInfoVisibility(bool bIsVisible);
	void SetRewardTrackLegal(const class FText& LegalText);
	void UpdateVariantCounter(int32 CurrentVariantIndex, int32 TotalNumVariants);

	class UFortEventModalBase* GetActiveModal() const;
	struct FTimespan GetEventTimeRemaining() const;
	class UMaterialInstanceDynamic* GetVaultWorldBackgroundMID() const;
	class UMaterialInstanceDynamic* GetVaultWorldFloorMID() const;
	bool HasAllRewardsCollected() const;
	bool HasPurchasedPremiumTrack() const;
	bool IsCalendarEventActive(const class FString& EventName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventScreenBase">();
	}
	static class UFortEventScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventScreenBase>();
	}
};
static_assert(alignof(UFortEventScreenBase) == 0x000008, "Wrong alignment on UFortEventScreenBase");
static_assert(sizeof(UFortEventScreenBase) == 0x000B58, "Wrong size on UFortEventScreenBase");
static_assert(offsetof(UFortEventScreenBase, LayoutTemplateSlots) == 0x000738, "Member 'UFortEventScreenBase::LayoutTemplateSlots' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, LazyImage_KeyArt) == 0x000748, "Member 'UFortEventScreenBase::LazyImage_KeyArt' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_ViewQuests) == 0x000750, "Member 'UFortEventScreenBase::Button_ViewQuests' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_MoreInfo) == 0x000758, "Member 'UFortEventScreenBase::Button_MoreInfo' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_PurchaseLevels) == 0x000760, "Member 'UFortEventScreenBase::Button_PurchaseLevels' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_Preview) == 0x000768, "Member 'UFortEventScreenBase::Button_Preview' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_ShowInItemShop) == 0x000770, "Member 'UFortEventScreenBase::Button_ShowInItemShop' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_Previous) == 0x000778, "Member 'UFortEventScreenBase::Button_Previous' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_Next) == 0x000780, "Member 'UFortEventScreenBase::Button_Next' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, CustomText_InspectItem) == 0x000788, "Member 'UFortEventScreenBase::CustomText_InspectItem' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Panel_LoadError) == 0x000790, "Member 'UFortEventScreenBase::Panel_LoadError' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_Close) == 0x000798, "Member 'UFortEventScreenBase::Button_Close' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, Button_CloseTouch) == 0x0007A0, "Member 'UFortEventScreenBase::Button_CloseTouch' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, EventScreenData) == 0x0007A8, "Member 'UFortEventScreenBase::EventScreenData' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, ActiveRewardPreviewType) == 0x0007B0, "Member 'UFortEventScreenBase::ActiveRewardPreviewType' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, LoadedQuestBundle) == 0x0007B8, "Member 'UFortEventScreenBase::LoadedQuestBundle' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, CachedVaultWorld) == 0x0007C0, "Member 'UFortEventScreenBase::CachedVaultWorld' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, TimeBetweenVariantsRestart) == 0x0007D8, "Member 'UFortEventScreenBase::TimeBetweenVariantsRestart' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, TimeBetweenVariants) == 0x0007DC, "Member 'UFortEventScreenBase::TimeBetweenVariants' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, CachedItemVM) == 0x0007E0, "Member 'UFortEventScreenBase::CachedItemVM' has a wrong offset!");
static_assert(offsetof(UFortEventScreenBase, CachedVariantPreviews) == 0x0007E8, "Member 'UFortEventScreenBase::CachedVariantPreviews' has a wrong offset!");

// Class EventScreenBase.EventScreenListView
// 0x01E8 (0x0480 - 0x0298)
class UEventScreenListView final : public UListViewBase
{
public:
	uint8                                         Pad_298[0xE8];                                     // 0x0298(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnProgressBarAnimationStartedEvent;                // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnProgressBarAnimationCompletedEvent;              // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnProgressBarAnimationInterruptedEvent;            // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FMargin& Margin)> OnResourcePreviewOffsetAnimationEvent;             // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C0[0x20];                                     // 0x03C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortEventRewardTracksWidget> RewardTrackWidgetClass;                            // 0x03E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortEventSpacerWidget>     SpacerWidgetClass;                                 // 0x03E8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EntrySpacing;                                      // 0x03F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCenterSelection;                                  // 0x03F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F5[0x3];                                      // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxItemsInView;                                    // 0x03F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPreviewMode;                                      // 0x03FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ProgressAnimationCurve;                            // 0x0400(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCanAnimateOnceComplete;                           // 0x0408(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_409[0x77];                                     // 0x0409(0x0077)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetNativeTickAllowed(const bool bAllowed);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventScreenListView">();
	}
	static class UEventScreenListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventScreenListView>();
	}
};
static_assert(alignof(UEventScreenListView) == 0x000008, "Wrong alignment on UEventScreenListView");
static_assert(sizeof(UEventScreenListView) == 0x000480, "Wrong size on UEventScreenListView");
static_assert(offsetof(UEventScreenListView, OnProgressBarAnimationStartedEvent) == 0x000380, "Member 'UEventScreenListView::OnProgressBarAnimationStartedEvent' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, OnProgressBarAnimationCompletedEvent) == 0x000390, "Member 'UEventScreenListView::OnProgressBarAnimationCompletedEvent' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, OnProgressBarAnimationInterruptedEvent) == 0x0003A0, "Member 'UEventScreenListView::OnProgressBarAnimationInterruptedEvent' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, OnResourcePreviewOffsetAnimationEvent) == 0x0003B0, "Member 'UEventScreenListView::OnResourcePreviewOffsetAnimationEvent' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, RewardTrackWidgetClass) == 0x0003E0, "Member 'UEventScreenListView::RewardTrackWidgetClass' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, SpacerWidgetClass) == 0x0003E8, "Member 'UEventScreenListView::SpacerWidgetClass' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, EntrySpacing) == 0x0003F0, "Member 'UEventScreenListView::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, bCenterSelection) == 0x0003F4, "Member 'UEventScreenListView::bCenterSelection' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, MaxItemsInView) == 0x0003F8, "Member 'UEventScreenListView::MaxItemsInView' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, bPreviewMode) == 0x0003FC, "Member 'UEventScreenListView::bPreviewMode' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, ProgressAnimationCurve) == 0x000400, "Member 'UEventScreenListView::ProgressAnimationCurve' has a wrong offset!");
static_assert(offsetof(UEventScreenListView, bCanAnimateOnceComplete) == 0x000408, "Member 'UEventScreenListView::bCanAnimateOnceComplete' has a wrong offset!");

// Class EventScreenBase.FortEventScreenTeaser
// 0x0040 (0x05B0 - 0x0570)
class UFortEventScreenTeaser final : public UFortActivatablePanel
{
public:
	class FString                                 CountdownCalendarEventFlag;                        // 0x0570(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         CalendarEvents;                                    // 0x0580(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           QuestCategoryTag;                                  // 0x0590(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_ViewQuests;                                 // 0x0598(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A0[0x10];                                     // 0x05A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetCountdownTimeRemaining(const struct FTimespan& TimeRemaining);
	void HandleActiveSeasonDataChanged(const TArray<class FString>& ActiveEventFlags);
	void OnCalendarEventEnded(const class FString& EventName);
	void OnCalendarEventStarted(const class FString& EventName);

	bool IsCalendarEventActive(const class FString& EventName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventScreenTeaser">();
	}
	static class UFortEventScreenTeaser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventScreenTeaser>();
	}
};
static_assert(alignof(UFortEventScreenTeaser) == 0x000008, "Wrong alignment on UFortEventScreenTeaser");
static_assert(sizeof(UFortEventScreenTeaser) == 0x0005B0, "Wrong size on UFortEventScreenTeaser");
static_assert(offsetof(UFortEventScreenTeaser, CountdownCalendarEventFlag) == 0x000570, "Member 'UFortEventScreenTeaser::CountdownCalendarEventFlag' has a wrong offset!");
static_assert(offsetof(UFortEventScreenTeaser, CalendarEvents) == 0x000580, "Member 'UFortEventScreenTeaser::CalendarEvents' has a wrong offset!");
static_assert(offsetof(UFortEventScreenTeaser, QuestCategoryTag) == 0x000590, "Member 'UFortEventScreenTeaser::QuestCategoryTag' has a wrong offset!");
static_assert(offsetof(UFortEventScreenTeaser, Button_ViewQuests) == 0x000598, "Member 'UFortEventScreenTeaser::Button_ViewQuests' has a wrong offset!");

// Class EventScreenBase.FortEventTokenCollectionWidget
// 0x0060 (0x0320 - 0x02C0)
class UFortEventTokenCollectionWidget : public UUserWidget
{
public:
	class UCommonLazyImage*                       LazyImage_GhostIcon;                               // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonLazyImage*                       LazyImage_CompletedIcon;                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Glow;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              FallbackBrush;                                     // 0x02D8(0x0020)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UFortTokenType>          TokenDefinition;                                   // 0x02F8(0x0020)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRefreshIcon(const bool IsCollected, const bool bIsFirstViewAfterCollection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTokenCollectionWidget">();
	}
	static class UFortEventTokenCollectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTokenCollectionWidget>();
	}
};
static_assert(alignof(UFortEventTokenCollectionWidget) == 0x000008, "Wrong alignment on UFortEventTokenCollectionWidget");
static_assert(sizeof(UFortEventTokenCollectionWidget) == 0x000320, "Wrong size on UFortEventTokenCollectionWidget");
static_assert(offsetof(UFortEventTokenCollectionWidget, LazyImage_GhostIcon) == 0x0002C0, "Member 'UFortEventTokenCollectionWidget::LazyImage_GhostIcon' has a wrong offset!");
static_assert(offsetof(UFortEventTokenCollectionWidget, LazyImage_CompletedIcon) == 0x0002C8, "Member 'UFortEventTokenCollectionWidget::LazyImage_CompletedIcon' has a wrong offset!");
static_assert(offsetof(UFortEventTokenCollectionWidget, Image_Glow) == 0x0002D0, "Member 'UFortEventTokenCollectionWidget::Image_Glow' has a wrong offset!");
static_assert(offsetof(UFortEventTokenCollectionWidget, FallbackBrush) == 0x0002D8, "Member 'UFortEventTokenCollectionWidget::FallbackBrush' has a wrong offset!");
static_assert(offsetof(UFortEventTokenCollectionWidget, TokenDefinition) == 0x0002F8, "Member 'UFortEventTokenCollectionWidget::TokenDefinition' has a wrong offset!");

// Class EventScreenBase.FortEventTrackerModule
// 0x0008 (0x02C8 - 0x02C0)
class UFortEventTrackerModule : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnModuleInitialized(const class UFortEventScreenData* InEventScreenData);

	const class UFortEventScreenData* GetEventScreenData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule">();
	}
	static class UFortEventTrackerModule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule>();
	}
};
static_assert(alignof(UFortEventTrackerModule) == 0x000008, "Wrong alignment on UFortEventTrackerModule");
static_assert(sizeof(UFortEventTrackerModule) == 0x0002C8, "Wrong size on UFortEventTrackerModule");

// Class EventScreenBase.FortEventTrackerModule_EventDetails
// 0x0000 (0x02C8 - 0x02C8)
class UFortEventTrackerModule_EventDetails : public UFortEventTrackerModule
{
public:
	void OnPopulateEventDetailsText(const class FText& OutEventName, const class FText& OutEventDescription);
	void UpdateEventTimeRemaining(const class FText& EventTimeRemainingText, const struct FTimespan& TimeRemaining);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_EventDetails">();
	}
	static class UFortEventTrackerModule_EventDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_EventDetails>();
	}
};
static_assert(alignof(UFortEventTrackerModule_EventDetails) == 0x000008, "Wrong alignment on UFortEventTrackerModule_EventDetails");
static_assert(sizeof(UFortEventTrackerModule_EventDetails) == 0x0002C8, "Wrong size on UFortEventTrackerModule_EventDetails");

// Class EventScreenBase.FortEventTrackerModule_Header
// 0x0000 (0x02C8 - 0x02C8)
class UFortEventTrackerModule_Header : public UFortEventTrackerModule
{
public:
	void OnPopulateEventResourceHeader(const class FText& Header, const int32 ResourceValue);
	void OnPopulateEventResourceStarterHeader(const class FText& Header);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_Header">();
	}
	static class UFortEventTrackerModule_Header* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_Header>();
	}
};
static_assert(alignof(UFortEventTrackerModule_Header) == 0x000008, "Wrong alignment on UFortEventTrackerModule_Header");
static_assert(sizeof(UFortEventTrackerModule_Header) == 0x0002C8, "Wrong size on UFortEventTrackerModule_Header");

// Class EventScreenBase.FortEventTrackerModule_RewardDetails
// 0x0008 (0x02D0 - 0x02C8)
class UFortEventTrackerModule_RewardDetails : public UFortEventTrackerModule
{
public:
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPopulateCompletedReward(const TArray<class FText>& RewardNames);
	void OnPopulateNextRewardDetails(const TArray<class FText>& RewardNames, const int32 ResourceNeeded);

	bool IsPremiumTrackOwned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_RewardDetails">();
	}
	static class UFortEventTrackerModule_RewardDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_RewardDetails>();
	}
};
static_assert(alignof(UFortEventTrackerModule_RewardDetails) == 0x000008, "Wrong alignment on UFortEventTrackerModule_RewardDetails");
static_assert(sizeof(UFortEventTrackerModule_RewardDetails) == 0x0002D0, "Wrong size on UFortEventTrackerModule_RewardDetails");

// Class EventScreenBase.FortEventTrackerModule_RewardRemaining
// 0x0020 (0x02E8 - 0x02C8)
class UFortEventTrackerModule_RewardRemaining : public UFortEventTrackerModule
{
public:
	class UCommonButtonBase*                      Button_PurchasePremium;                            // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D0[0x18];                                     // 0x02D0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPopulateRemaining(const int32 ResourceNeeded, const int32 TotalResourceRequired, const bool bRequiresPremiumTrackPurchase);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_RewardRemaining">();
	}
	static class UFortEventTrackerModule_RewardRemaining* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_RewardRemaining>();
	}
};
static_assert(alignof(UFortEventTrackerModule_RewardRemaining) == 0x000008, "Wrong alignment on UFortEventTrackerModule_RewardRemaining");
static_assert(sizeof(UFortEventTrackerModule_RewardRemaining) == 0x0002E8, "Wrong size on UFortEventTrackerModule_RewardRemaining");
static_assert(offsetof(UFortEventTrackerModule_RewardRemaining, Button_PurchasePremium) == 0x0002C8, "Member 'UFortEventTrackerModule_RewardRemaining::Button_PurchasePremium' has a wrong offset!");

// Class EventScreenBase.FortEventTrackerModule_ProgressiveRewards
// 0x0008 (0x02D0 - 0x02C8)
class UFortEventTrackerModule_ProgressiveRewards : public UFortEventTrackerModule
{
public:
	class UEventScreenListView*                   ListView_Rewards;                                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnPopulateCompletionMessage(const bool bIsComplete, const class FText& CompletionText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_ProgressiveRewards">();
	}
	static class UFortEventTrackerModule_ProgressiveRewards* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_ProgressiveRewards>();
	}
};
static_assert(alignof(UFortEventTrackerModule_ProgressiveRewards) == 0x000008, "Wrong alignment on UFortEventTrackerModule_ProgressiveRewards");
static_assert(sizeof(UFortEventTrackerModule_ProgressiveRewards) == 0x0002D0, "Wrong size on UFortEventTrackerModule_ProgressiveRewards");
static_assert(offsetof(UFortEventTrackerModule_ProgressiveRewards, ListView_Rewards) == 0x0002C8, "Member 'UFortEventTrackerModule_ProgressiveRewards::ListView_Rewards' has a wrong offset!");

// Class EventScreenBase.FortEventTrackerModule_Collection
// 0x0000 (0x02C8 - 0x02C8)
class UFortEventTrackerModule_Collection : public UFortEventTrackerModule
{
public:
	void OnGatherTokenCollectionWidgets(TArray<class UFortEventTokenCollectionWidget*>* OutCollectionWidgets) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_Collection">();
	}
	static class UFortEventTrackerModule_Collection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_Collection>();
	}
};
static_assert(alignof(UFortEventTrackerModule_Collection) == 0x000008, "Wrong alignment on UFortEventTrackerModule_Collection");
static_assert(sizeof(UFortEventTrackerModule_Collection) == 0x0002C8, "Wrong size on UFortEventTrackerModule_Collection");

// Class EventScreenBase.FortEventTrackerModule_Banner
// 0x0008 (0x02D0 - 0x02C8)
class UFortEventTrackerModule_Banner final : public UFortEventTrackerModule
{
public:
	class UFortLazyImage*                         LazyImage_BannerArt;                               // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnCTACompleted(const bool bIsComplete);
	void OnPopulateBannerText(const class FText& BannerText);
	void OnPopulateHeaderCTAText(const class FText& HeaderCTAText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_Banner">();
	}
	static class UFortEventTrackerModule_Banner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_Banner>();
	}
};
static_assert(alignof(UFortEventTrackerModule_Banner) == 0x000008, "Wrong alignment on UFortEventTrackerModule_Banner");
static_assert(sizeof(UFortEventTrackerModule_Banner) == 0x0002D0, "Wrong size on UFortEventTrackerModule_Banner");
static_assert(offsetof(UFortEventTrackerModule_Banner, LazyImage_BannerArt) == 0x0002C8, "Member 'UFortEventTrackerModule_Banner::LazyImage_BannerArt' has a wrong offset!");

// Class EventScreenBase.FortEventTrackerModule_PremiumUpsell
// 0x0070 (0x0338 - 0x02C8)
class UFortEventTrackerModule_PremiumUpsell : public UFortEventTrackerModule
{
public:
	class UFortCTAButton*                         Button_Prompt;                                     // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   PromptTextUnowned;                                 // 0x02D0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   PromptTextOwned;                                   // 0x02E8(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_300[0x38];                                     // 0x0300(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIconLoaded(const class UTexture* LoadedTexture);
	void OnPopulateText(const class FText& HeaderText, const class FText& BodyText);

	bool IsPremiumTrackOwned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_PremiumUpsell">();
	}
	static class UFortEventTrackerModule_PremiumUpsell* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_PremiumUpsell>();
	}
};
static_assert(alignof(UFortEventTrackerModule_PremiumUpsell) == 0x000008, "Wrong alignment on UFortEventTrackerModule_PremiumUpsell");
static_assert(sizeof(UFortEventTrackerModule_PremiumUpsell) == 0x000338, "Wrong size on UFortEventTrackerModule_PremiumUpsell");
static_assert(offsetof(UFortEventTrackerModule_PremiumUpsell, Button_Prompt) == 0x0002C8, "Member 'UFortEventTrackerModule_PremiumUpsell::Button_Prompt' has a wrong offset!");
static_assert(offsetof(UFortEventTrackerModule_PremiumUpsell, PromptTextUnowned) == 0x0002D0, "Member 'UFortEventTrackerModule_PremiumUpsell::PromptTextUnowned' has a wrong offset!");
static_assert(offsetof(UFortEventTrackerModule_PremiumUpsell, PromptTextOwned) == 0x0002E8, "Member 'UFortEventTrackerModule_PremiumUpsell::PromptTextOwned' has a wrong offset!");

// Class EventScreenBase.FortEventTrackerModule_CustomText
// 0x0000 (0x02C8 - 0x02C8)
class UFortEventTrackerModule_CustomText : public UFortEventTrackerModule
{
public:
	void OnPopulateText(const class FText& CustomText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortEventTrackerModule_CustomText">();
	}
	static class UFortEventTrackerModule_CustomText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortEventTrackerModule_CustomText>();
	}
};
static_assert(alignof(UFortEventTrackerModule_CustomText) == 0x000008, "Wrong alignment on UFortEventTrackerModule_CustomText");
static_assert(sizeof(UFortEventTrackerModule_CustomText) == 0x0002C8, "Wrong size on UFortEventTrackerModule_CustomText");

}

