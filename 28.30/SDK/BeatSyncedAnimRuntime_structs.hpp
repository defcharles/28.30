#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BeatSyncedAnimRuntime

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum BeatSyncedAnimRuntime.ESyncAnimBeatTo
// NumValues: 0x0004
enum class ESyncAnimBeatTo : uint8
{
	None                                     = 0,
	Now                                      = 1,
	PrevBeat                                 = 2,
	Num                                      = 3,
};

// Enum BeatSyncedAnimRuntime.EBeatSyncAnimNodeLogging
// NumValues: 0x0003
enum class EBeatSyncAnimNodeLogging : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Default                                  = 2,
};

// Enum BeatSyncedAnimRuntime.EGotBeatAndTimeFrom
// NumValues: 0x0004
enum class EGotBeatAndTimeFrom : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	PreviewBPM                               = 2,
	MusicClock                               = 3,
};

// ScriptStruct BeatSyncedAnimRuntime.BeatAndTime
// 0x000C (0x000C - 0x0000)
struct FBeatAndTime final
{
public:
	EGotBeatAndTimeFrom                           GotBeatTimeFrom;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Beat;                                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBeatAndTime) == 0x000004, "Wrong alignment on FBeatAndTime");
static_assert(sizeof(FBeatAndTime) == 0x00000C, "Wrong size on FBeatAndTime");
static_assert(offsetof(FBeatAndTime, GotBeatTimeFrom) == 0x000000, "Member 'FBeatAndTime::GotBeatTimeFrom' has a wrong offset!");
static_assert(offsetof(FBeatAndTime, Beat) == 0x000004, "Member 'FBeatAndTime::Beat' has a wrong offset!");
static_assert(offsetof(FBeatAndTime, Time) == 0x000008, "Member 'FBeatAndTime::Time' has a wrong offset!");

// ScriptStruct BeatSyncedAnimRuntime.AnimNode_PlayBeatSyncedAnim
// 0x0068 (0x00A8 - 0x0040)
struct FAnimNode_PlayBeatSyncedAnim final : public FAnimNode_SequenceEvaluator
{
public:
	class UAnimSequenceBase*                      InSequence;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicClockComponent*                   MusicClock;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBeatAndTime                           BeatAndTime;                                       // 0x0050(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PreviewBPM;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysAllowPreviewBPM;                            // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESyncAnimBeatTo                               SyncAnimBeatTo;                                    // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeatSyncAnimNodeLogging                      Logging;                                           // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSideloadedLipSync;                                // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x44];                                      // 0x0064(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PlayBeatSyncedAnim) == 0x000008, "Wrong alignment on FAnimNode_PlayBeatSyncedAnim");
static_assert(sizeof(FAnimNode_PlayBeatSyncedAnim) == 0x0000A8, "Wrong size on FAnimNode_PlayBeatSyncedAnim");
static_assert(offsetof(FAnimNode_PlayBeatSyncedAnim, InSequence) == 0x000040, "Member 'FAnimNode_PlayBeatSyncedAnim::InSequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBeatSyncedAnim, MusicClock) == 0x000048, "Member 'FAnimNode_PlayBeatSyncedAnim::MusicClock' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBeatSyncedAnim, BeatAndTime) == 0x000050, "Member 'FAnimNode_PlayBeatSyncedAnim::BeatAndTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBeatSyncedAnim, PreviewBPM) == 0x00005C, "Member 'FAnimNode_PlayBeatSyncedAnim::PreviewBPM' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBeatSyncedAnim, bAlwaysAllowPreviewBPM) == 0x000060, "Member 'FAnimNode_PlayBeatSyncedAnim::bAlwaysAllowPreviewBPM' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBeatSyncedAnim, SyncAnimBeatTo) == 0x000061, "Member 'FAnimNode_PlayBeatSyncedAnim::SyncAnimBeatTo' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBeatSyncedAnim, Logging) == 0x000062, "Member 'FAnimNode_PlayBeatSyncedAnim::Logging' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBeatSyncedAnim, bSideloadedLipSync) == 0x000063, "Member 'FAnimNode_PlayBeatSyncedAnim::bSideloadedLipSync' has a wrong offset!");

// ScriptStruct BeatSyncedAnimRuntime.FMontageBeatSyncInfo
// 0x0008 (0x0008 - 0x0000)
struct FFMontageBeatSyncInfo final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFMontageBeatSyncInfo) == 0x000004, "Wrong alignment on FFMontageBeatSyncInfo");
static_assert(sizeof(FFMontageBeatSyncInfo) == 0x000008, "Wrong size on FFMontageBeatSyncInfo");
static_assert(offsetof(FFMontageBeatSyncInfo, PlayRate) == 0x000000, "Member 'FFMontageBeatSyncInfo::PlayRate' has a wrong offset!");
static_assert(offsetof(FFMontageBeatSyncInfo, Offset) == 0x000004, "Member 'FFMontageBeatSyncInfo::Offset' has a wrong offset!");

}

