#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterDynamicsControlRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "PhysicsControl_structs.hpp"


namespace SDK
{

// ScriptStruct CharacterDynamicsControlRuntime.BinaryDecisionTreeElement
// 0x0018 (0x0018 - 0x0000)
struct FBinaryDecisionTreeElement final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         BitMask;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         BitSet;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBinaryDecisionTreeElement) == 0x000008, "Wrong alignment on FBinaryDecisionTreeElement");
static_assert(sizeof(FBinaryDecisionTreeElement) == 0x000018, "Wrong size on FBinaryDecisionTreeElement");
static_assert(offsetof(FBinaryDecisionTreeElement, Value) == 0x000000, "Member 'FBinaryDecisionTreeElement::Value' has a wrong offset!");
static_assert(offsetof(FBinaryDecisionTreeElement, BitMask) == 0x000008, "Member 'FBinaryDecisionTreeElement::BitMask' has a wrong offset!");
static_assert(offsetof(FBinaryDecisionTreeElement, BitSet) == 0x000010, "Member 'FBinaryDecisionTreeElement::BitSet' has a wrong offset!");

// ScriptStruct CharacterDynamicsControlRuntime.BinaryDecisionTree
// 0x0010 (0x0010 - 0x0000)
struct FBinaryDecisionTree final
{
public:
	TArray<struct FBinaryDecisionTreeElement>     TreeStructure;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBinaryDecisionTree) == 0x000008, "Wrong alignment on FBinaryDecisionTree");
static_assert(sizeof(FBinaryDecisionTree) == 0x000010, "Wrong size on FBinaryDecisionTree");
static_assert(offsetof(FBinaryDecisionTree, TreeStructure) == 0x000000, "Member 'FBinaryDecisionTree::TreeStructure' has a wrong offset!");

// ScriptStruct CharacterDynamicsControlRuntime.FortGravityOverrideParameters
// 0x0068 (0x0068 - 0x0000)
struct FFortGravityOverrideParameters final
{
public:
	struct FVector                                WindFrequency;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WindAmplitude;                                     // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WindOffset;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GravityOverride;                                   // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JointName;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGravityOverrideParameters) == 0x000008, "Wrong alignment on FFortGravityOverrideParameters");
static_assert(sizeof(FFortGravityOverrideParameters) == 0x000068, "Wrong size on FFortGravityOverrideParameters");
static_assert(offsetof(FFortGravityOverrideParameters, WindFrequency) == 0x000000, "Member 'FFortGravityOverrideParameters::WindFrequency' has a wrong offset!");
static_assert(offsetof(FFortGravityOverrideParameters, WindAmplitude) == 0x000018, "Member 'FFortGravityOverrideParameters::WindAmplitude' has a wrong offset!");
static_assert(offsetof(FFortGravityOverrideParameters, WindOffset) == 0x000030, "Member 'FFortGravityOverrideParameters::WindOffset' has a wrong offset!");
static_assert(offsetof(FFortGravityOverrideParameters, GravityOverride) == 0x000048, "Member 'FFortGravityOverrideParameters::GravityOverride' has a wrong offset!");
static_assert(offsetof(FFortGravityOverrideParameters, JointName) == 0x000060, "Member 'FFortGravityOverrideParameters::JointName' has a wrong offset!");

// ScriptStruct CharacterDynamicsControlRuntime.FortRigidBodyAnimNodeParameters
// 0x0090 (0x0090 - 0x0000)
struct FFortRigidBodyAnimNodeParameters final
{
public:
	struct FVector                                ComponentLinearAccScale;                           // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimSpaceSettings                      SimSpaceSettings;                                  // 0x0030(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRigidBodyAnimNodeParameters) == 0x000008, "Wrong alignment on FFortRigidBodyAnimNodeParameters");
static_assert(sizeof(FFortRigidBodyAnimNodeParameters) == 0x000090, "Wrong size on FFortRigidBodyAnimNodeParameters");
static_assert(offsetof(FFortRigidBodyAnimNodeParameters, ComponentLinearAccScale) == 0x000000, "Member 'FFortRigidBodyAnimNodeParameters::ComponentLinearAccScale' has a wrong offset!");
static_assert(offsetof(FFortRigidBodyAnimNodeParameters, ComponentLinearVelScale) == 0x000018, "Member 'FFortRigidBodyAnimNodeParameters::ComponentLinearVelScale' has a wrong offset!");
static_assert(offsetof(FFortRigidBodyAnimNodeParameters, SimSpaceSettings) == 0x000030, "Member 'FFortRigidBodyAnimNodeParameters::SimSpaceSettings' has a wrong offset!");

// ScriptStruct CharacterDynamicsControlRuntime.FortRigidBodyWithControlStateTransitionParameters
// 0x0028 (0x0028 - 0x0000)
struct FFortRigidBodyWithControlStateTransitionParameters final
{
public:
	struct FPhysicsControlControlAndModifierParameters ControlAndModifierParameters;                      // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TransitionTimeSeconds;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRigidBodyWithControlStateTransitionParameters) == 0x000008, "Wrong alignment on FFortRigidBodyWithControlStateTransitionParameters");
static_assert(sizeof(FFortRigidBodyWithControlStateTransitionParameters) == 0x000028, "Wrong size on FFortRigidBodyWithControlStateTransitionParameters");
static_assert(offsetof(FFortRigidBodyWithControlStateTransitionParameters, ControlAndModifierParameters) == 0x000000, "Member 'FFortRigidBodyWithControlStateTransitionParameters::ControlAndModifierParameters' has a wrong offset!");
static_assert(offsetof(FFortRigidBodyWithControlStateTransitionParameters, TransitionTimeSeconds) == 0x000020, "Member 'FFortRigidBodyWithControlStateTransitionParameters::TransitionTimeSeconds' has a wrong offset!");

}

