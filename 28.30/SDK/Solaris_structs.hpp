#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solaris

#include "Basic.hpp"


namespace SDK
{

// Enum Solaris.EVerseDigestVariant
// NumValues: 0x0002
enum class EVerseDigestVariant : uint8
{
	PublicOnly                               = 0,
	PublicAndEpicInternal                    = 1,
};

// Enum Solaris.EVerseEnumFlags
// NumValues: 0x0002
enum class EVerseEnumFlags : uint32
{
	None                                     = 0,
	NativeBound                              = 1,
};

// Enum Solaris.EVersePackageScope
// NumValues: 0x0004
enum class EVersePackageScope : uint8
{
	PublicAPI                                = 0,
	InternalAPI                              = 1,
	PublicUser                               = 2,
	InternalUser                             = 3,
};

// Enum Solaris.EVersePackageType
// NumValues: 0x0004
enum class EVersePackageType : uint8
{
	VNI                                      = 0,
	Content                                  = 1,
	PublishedContent                         = 2,
	Assets                                   = 3,
};

// ScriptStruct Solaris.GenericKeyType
// 0x0001 (0x0001 - 0x0000)
struct FGenericKeyType final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericKeyType) == 0x000001, "Wrong alignment on FGenericKeyType");
static_assert(sizeof(FGenericKeyType) == 0x000001, "Wrong size on FGenericKeyType");

// ScriptStruct Solaris.GenericValueType
// 0x0001 (0x0001 - 0x0000)
struct FGenericValueType final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericValueType) == 0x000001, "Wrong alignment on FGenericValueType");
static_assert(sizeof(FGenericValueType) == 0x000001, "Wrong size on FGenericValueType");

// ScriptStruct Solaris.ManifestDependency
// 0x0010 (0x0010 - 0x0000)
struct FManifestDependency final
{
public:
	TArray<uint8>                                 Dependency;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManifestDependency) == 0x000008, "Wrong alignment on FManifestDependency");
static_assert(sizeof(FManifestDependency) == 0x000010, "Wrong size on FManifestDependency");
static_assert(offsetof(FManifestDependency, Dependency) == 0x000000, "Member 'FManifestDependency::Dependency' has a wrong offset!");

// ScriptStruct Solaris.VersePackageContainerSettings
// 0x0040 (0x0040 - 0x0000)
struct FVersePackageContainerSettings final
{
public:
	class FString                                 VersePath;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVersePackageScope                            VerseScope;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TOptional<uint32>                             VerseVersion;                                      // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DependencyPackages;                                // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 VniDestDir;                                        // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVersePackageContainerSettings) == 0x000008, "Wrong alignment on FVersePackageContainerSettings");
static_assert(sizeof(FVersePackageContainerSettings) == 0x000040, "Wrong size on FVersePackageContainerSettings");
static_assert(offsetof(FVersePackageContainerSettings, VersePath) == 0x000000, "Member 'FVersePackageContainerSettings::VersePath' has a wrong offset!");
static_assert(offsetof(FVersePackageContainerSettings, VerseScope) == 0x000010, "Member 'FVersePackageContainerSettings::VerseScope' has a wrong offset!");
static_assert(offsetof(FVersePackageContainerSettings, VerseVersion) == 0x000014, "Member 'FVersePackageContainerSettings::VerseVersion' has a wrong offset!");
static_assert(offsetof(FVersePackageContainerSettings, DependencyPackages) == 0x000020, "Member 'FVersePackageContainerSettings::DependencyPackages' has a wrong offset!");
static_assert(offsetof(FVersePackageContainerSettings, VniDestDir) == 0x000030, "Member 'FVersePackageContainerSettings::VniDestDir' has a wrong offset!");

// ScriptStruct Solaris.VerseSourceCode
// 0x0010 (0x0010 - 0x0000)
struct FVerseSourceCode final
{
public:
	TArray<uint8>                                 Code;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerseSourceCode) == 0x000008, "Wrong alignment on FVerseSourceCode");
static_assert(sizeof(FVerseSourceCode) == 0x000010, "Wrong size on FVerseSourceCode");
static_assert(offsetof(FVerseSourceCode, Code) == 0x000000, "Member 'FVerseSourceCode::Code' has a wrong offset!");

// ScriptStruct Solaris.VerseSourceFile
// 0x0020 (0x0020 - 0x0000)
struct FVerseSourceFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVerseSourceCode>               CodeChunks;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerseSourceFile) == 0x000008, "Wrong alignment on FVerseSourceFile");
static_assert(sizeof(FVerseSourceFile) == 0x000020, "Wrong size on FVerseSourceFile");
static_assert(offsetof(FVerseSourceFile, Filename) == 0x000000, "Member 'FVerseSourceFile::Filename' has a wrong offset!");
static_assert(offsetof(FVerseSourceFile, CodeChunks) == 0x000010, "Member 'FVerseSourceFile::CodeChunks' has a wrong offset!");

// ScriptStruct Solaris.VersePackageContainer
// 0x00A8 (0x00A8 - 0x0000)
struct FVersePackageContainer final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DirPath;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVersePackageType                             PackageType;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVerseAssetReflection;                       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVersePackageContainerSettings         Settings;                                          // 0x0028(0x0040)(NativeAccessSpecifierPublic)
	TArray<struct FVerseSourceFile>               SourceFiles;                                       // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 AssetDigest;                                       // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetDependencies;                                 // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVersePackageContainer) == 0x000008, "Wrong alignment on FVersePackageContainer");
static_assert(sizeof(FVersePackageContainer) == 0x0000A8, "Wrong size on FVersePackageContainer");
static_assert(offsetof(FVersePackageContainer, Name) == 0x000000, "Member 'FVersePackageContainer::Name' has a wrong offset!");
static_assert(offsetof(FVersePackageContainer, DirPath) == 0x000010, "Member 'FVersePackageContainer::DirPath' has a wrong offset!");
static_assert(offsetof(FVersePackageContainer, PackageType) == 0x000020, "Member 'FVersePackageContainer::PackageType' has a wrong offset!");
static_assert(offsetof(FVersePackageContainer, bEnableVerseAssetReflection) == 0x000021, "Member 'FVersePackageContainer::bEnableVerseAssetReflection' has a wrong offset!");
static_assert(offsetof(FVersePackageContainer, Settings) == 0x000028, "Member 'FVersePackageContainer::Settings' has a wrong offset!");
static_assert(offsetof(FVersePackageContainer, SourceFiles) == 0x000068, "Member 'FVersePackageContainer::SourceFiles' has a wrong offset!");
static_assert(offsetof(FVersePackageContainer, AssetDigest) == 0x000078, "Member 'FVersePackageContainer::AssetDigest' has a wrong offset!");
static_assert(offsetof(FVersePackageContainer, AssetDependencies) == 0x000088, "Member 'FVersePackageContainer::AssetDependencies' has a wrong offset!");

// ScriptStruct Solaris.VerseProjectContainer
// 0x0010 (0x0010 - 0x0000)
struct FVerseProjectContainer final
{
public:
	TArray<struct FVersePackageContainer>         Packages;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerseProjectContainer) == 0x000008, "Wrong alignment on FVerseProjectContainer");
static_assert(sizeof(FVerseProjectContainer) == 0x000010, "Wrong size on FVerseProjectContainer");
static_assert(offsetof(FVerseProjectContainer, Packages) == 0x000000, "Member 'FVerseProjectContainer::Packages' has a wrong offset!");

// ScriptStruct Solaris.GenericElementType
// 0x0001 (0x0001 - 0x0000)
struct FGenericElementType final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericElementType) == 0x000001, "Wrong alignment on FGenericElementType");
static_assert(sizeof(FGenericElementType) == 0x000001, "Wrong size on FGenericElementType");

// ScriptStruct Solaris.VersePersistentVar
// 0x0030 (0x0030 - 0x0000)
struct FVersePersistentVar final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<class FMapProperty>                Property;                                          // 0x0010(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVersePersistentVar) == 0x000008, "Wrong alignment on FVersePersistentVar");
static_assert(sizeof(FVersePersistentVar) == 0x000030, "Wrong size on FVersePersistentVar");
static_assert(offsetof(FVersePersistentVar, Path) == 0x000000, "Member 'FVersePersistentVar::Path' has a wrong offset!");
static_assert(offsetof(FVersePersistentVar, Property) == 0x000010, "Member 'FVersePersistentVar::Property' has a wrong offset!");

// ScriptStruct Solaris.VerseSessionVar
// 0x0020 (0x0020 - 0x0000)
struct FVerseSessionVar final
{
public:
	TFieldPath<class FMapProperty>                Property;                                          // 0x0000(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerseSessionVar) == 0x000008, "Wrong alignment on FVerseSessionVar");
static_assert(sizeof(FVerseSessionVar) == 0x000020, "Wrong size on FVerseSessionVar");
static_assert(offsetof(FVerseSessionVar, Property) == 0x000000, "Member 'FVerseSessionVar::Property' has a wrong offset!");

// ScriptStruct Solaris.VerseEffectSet
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FVerseEffectSet final
{
public:
	uint8                                         suspends : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         decides : 1;                                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         diverges : 1;                                      // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         varies : 1;                                        // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         transacts : 1;                                     // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         no_rollback : 1;                                   // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVerseEffectSet) == 0x000004, "Wrong alignment on FVerseEffectSet");
static_assert(sizeof(FVerseEffectSet) == 0x000004, "Wrong size on FVerseEffectSet");

}

