#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundLibrary

#include "Basic.hpp"

#include "SoundLibrary_classes.hpp"
#include "SoundLibrary_parameters.hpp"


namespace SDK
{

// Function SoundLibrary.SoundLibraryContext.OnAddedToActor
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryContext::OnAddedToActor(const class AActor* InActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnAddedToActor");

	Params::SoundLibraryContext_OnAddedToActor Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryContext.OnRemovedFromActor
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryContext::OnRemovedFromActor(const class AActor* InActor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnRemovedFromActor");

	Params::SoundLibraryContext_OnRemovedFromActor Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryContext.Play
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FSoundLibraryContextEventInput   InEventData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UAudioComponent*>          OutComponents                                          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundLibraryContext::Play(const struct FSoundLibraryContextEventInput& InEventData, TArray<class UAudioComponent*>* OutComponents)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Play");

	Params::SoundLibraryContext_Play Parms{};

	Parms.InEventData = std::move(InEventData);

	UObject::ProcessEvent(Func, &Parms);

	if (OutComponents != nullptr)
		*OutComponents = std::move(Parms.OutComponents);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibraryContext.CreateEventName
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FGameplayTag                     OutEventName                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundLibraryContext::CreateEventName(struct FGameplayTag& OutEventName) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("CreateEventName");

	Params::SoundLibraryContext_CreateEventName Parms{};

	Parms.OutEventName = std::move(OutEventName);

	UObject::ProcessEvent(Func, &Parms);

	OutEventName = std::move(Parms.OutEventName);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibraryContext.GatherActorTargets
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class AActor*>                   OutActors                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundLibraryContext::GatherActorTargets(TArray<class AActor*>& OutActors) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GatherActorTargets");

	Params::SoundLibraryContext_GatherActorTargets Parms{};

	Parms.OutActors = std::move(OutActors);

	UObject::ProcessEvent(Func, &Parms);

	OutActors = std::move(Parms.OutActors);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibraryAnimContext.ConfigureContext
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                InAnimation                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoundLibraryAnimContextSettings InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USoundLibraryAnimContext::ConfigureContext(class AActor* OwningActor, class UAnimSequenceBase* InAnimation, const struct FSoundLibraryAnimContextSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ConfigureContext");

	Params::SoundLibraryAnimContext_ConfigureContext Parms{};

	Parms.OwningActor = OwningActor;
	Parms.InAnimation = InAnimation;
	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrary.AddSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InTag                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       InSound                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrary::AddSound(const struct FGameplayTag& InTag, class USoundBase* InSound)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddSound");

	Params::SoundLibrary_AddSound Parms{};

	Parms.InTag = std::move(InTag);
	Parms.InSound = InSound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrary.SetChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InTag                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrary::SetChannel(const struct FGameplayTag& InTag)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetChannel");

	Params::SoundLibrary_SetChannel Parms{};

	Parms.InTag = std::move(InTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrary.SetPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPriority                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrary::SetPriority(int32 InPriority)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("SetPriority");

	Params::SoundLibrary_SetPriority Parms{};

	Parms.InPriority = InPriority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrary.FindSound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     InTag                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundBase* USoundLibrary::FindSound(const struct FGameplayTag& InTag) const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("FindSound");

	Params::SoundLibrary_FindSound Parms{};

	Parms.InTag = std::move(InTag);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibraryComponent.AddLibraries
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USoundLibrary*>            InLibraries                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USoundLibraryComponent::AddLibraries(const TArray<class USoundLibrary*>& InLibraries)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddLibraries");

	Params::SoundLibraryComponent_AddLibraries Parms{};

	Parms.InLibraries = std::move(InLibraries);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryComponent.AddLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundLibrary*                    InLibrary                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryComponent::AddLibrary(class USoundLibrary* InLibrary)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddLibrary");

	Params::SoundLibraryComponent_AddLibrary Parms{};

	Parms.InLibrary = InLibrary;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryComponent.IsEventActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     InEventName                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundLibraryComponent::IsEventActive(const struct FGameplayTag& InEventName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("IsEventActive");

	Params::SoundLibraryComponent_IsEventActive Parms{};

	Parms.InEventName = std::move(InEventName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibraryComponent.OnEventPlayed
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InEventName                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryComponent::OnEventPlayed(const struct FGameplayTag& InEventName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnEventPlayed");

	Params::SoundLibraryComponent_OnEventPlayed Parms{};

	Parms.InEventName = std::move(InEventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryComponent.OnEventStopped
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InEventName                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryComponent::OnEventStopped(const struct FGameplayTag& InEventName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnEventStopped");

	Params::SoundLibraryComponent_OnEventStopped Parms{};

	Parms.InEventName = std::move(InEventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryComponent.OnSoundPlayed
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InEventName                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryComponent::OnSoundPlayed(const struct FGameplayTag& InEventName, class UAudioComponent* InComponent)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSoundPlayed");

	Params::SoundLibraryComponent_OnSoundPlayed Parms{};

	Parms.InEventName = std::move(InEventName);
	Parms.InComponent = InComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryComponent.OnSoundStopped
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InEventName                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopped                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryComponent::OnSoundStopped(const struct FGameplayTag& InEventName, class UAudioComponent* InComponent, bool* bStopped)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("OnSoundStopped");

	Params::SoundLibraryComponent_OnSoundStopped Parms{};

	Parms.InEventName = std::move(InEventName);
	Parms.InComponent = InComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (bStopped != nullptr)
		*bStopped = Parms.bStopped;
}


// Function SoundLibrary.SoundLibraryComponent.PlayEvent
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InEventName                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoundLibraryPlayResult          ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FSoundLibraryPlayResult USoundLibraryComponent::PlayEvent(const struct FGameplayTag& InEventName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlayEvent");

	Params::SoundLibraryComponent_PlayEvent Parms{};

	Parms.InEventName = std::move(InEventName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibraryComponent.RemoveLibraries
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USoundLibrary*>            InLibraries                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USoundLibraryComponent::RemoveLibraries(const TArray<class USoundLibrary*>& InLibraries)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveLibraries");

	Params::SoundLibraryComponent_RemoveLibraries Parms{};

	Parms.InLibraries = std::move(InLibraries);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryComponent.RemoveLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundLibrary*                    InLibrary                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryComponent::RemoveLibrary(class USoundLibrary* InLibrary)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveLibrary");

	Params::SoundLibraryComponent_RemoveLibrary Parms{};

	Parms.InLibrary = InLibrary;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryComponent.StopEvent
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InEventName                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundLibraryComponent::StopEvent(const struct FGameplayTag& InEventName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("StopEvent");

	Params::SoundLibraryComponent_StopEvent Parms{};

	Parms.InEventName = std::move(InEventName);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibraryComponent.GetContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USoundLibraryContext*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundLibraryContext* USoundLibraryComponent::GetContext() const
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContext");

	Params::SoundLibraryComponent_GetContext Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibrarySimpleContext.ConfigureContext
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoundLibrarySimpleContextSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USoundLibrarySimpleContext::ConfigureContext(class AActor* OwningActor, const struct FSoundLibrarySimpleContextSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ConfigureContext");

	Params::SoundLibrarySimpleContext_ConfigureContext Parms{};

	Parms.OwningActor = OwningActor;
	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrarySubsystem.AddContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USoundLibraryContext> ContextClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundLibraryContext*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundLibraryContext* USoundLibrarySubsystem::AddContext(const class AActor* Actor, TSubclassOf<class USoundLibraryContext> ContextClass)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddContext");

	Params::SoundLibrarySubsystem_AddContext Parms{};

	Parms.Actor = Actor;
	Parms.ContextClass = ContextClass;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibrarySubsystem.AddLibraries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USoundLibrary*>            Libraries                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::AddLibraries(class AActor* Actor, const TArray<class USoundLibrary*>& Libraries)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddLibraries");

	Params::SoundLibrarySubsystem_AddLibraries Parms{};

	Parms.Actor = Actor;
	Parms.Libraries = std::move(Libraries);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrarySubsystem.AddLibrariesFromCollections
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            CollectionTags                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::AddLibrariesFromCollections(class AActor* Actor, const struct FGameplayTagContainer& CollectionTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddLibrariesFromCollections");

	Params::SoundLibrarySubsystem_AddLibrariesFromCollections Parms{};

	Parms.Actor = Actor;
	Parms.CollectionTags = std::move(CollectionTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrarySubsystem.AddLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundLibrary*                    Library                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::AddLibrary(class AActor* Actor, class USoundLibrary* Library)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("AddLibrary");

	Params::SoundLibrarySubsystem_AddLibrary Parms{};

	Parms.Actor = Actor;
	Parms.Library = Library;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrarySubsystem.DisableEventsForActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::DisableEventsForActor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("DisableEventsForActor");

	Params::SoundLibrarySubsystem_DisableEventsForActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrarySubsystem.EnableEventsForActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::EnableEventsForActor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("EnableEventsForActor");

	Params::SoundLibrarySubsystem_EnableEventsForActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrarySubsystem.GetContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USoundLibraryContext> ContextClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundLibraryContext*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundLibraryContext* USoundLibrarySubsystem::GetContext(const class AActor* Actor, TSubclassOf<class USoundLibraryContext> ContextClass)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("GetContext");

	Params::SoundLibrarySubsystem_GetContext Parms{};

	Parms.Actor = Actor;
	Parms.ContextClass = ContextClass;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibrarySubsystem.PlaySound
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USoundLibraryContext*             Context                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoundLibraryPlayResult          OutResults                                             (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::PlaySound(class USoundLibraryContext* Context, struct FSoundLibraryPlayResult* OutResults)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlaySound");

	Params::SoundLibrarySubsystem_PlaySound Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	if (OutResults != nullptr)
		*OutResults = std::move(Parms.OutResults);
}


// Function SoundLibrary.SoundLibrarySubsystem.PlaySoundSimple
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoundLibrarySimpleContextSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FSoundLibraryPlayResult          ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FSoundLibraryPlayResult USoundLibrarySubsystem::PlaySoundSimple(class AActor* OwningActor, const struct FSoundLibrarySimpleContextSettings& InSettings)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PlaySoundSimple");

	Params::SoundLibrarySubsystem_PlaySoundSimple Parms{};

	Parms.OwningActor = OwningActor;
	Parms.InSettings = std::move(InSettings);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibrarySubsystem.RemoveContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USoundLibraryContext> ContextClass                                           (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundLibrarySubsystem::RemoveContext(const class AActor* Actor, TSubclassOf<class USoundLibraryContext> ContextClass)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveContext");

	Params::SoundLibrarySubsystem_RemoveContext Parms{};

	Parms.Actor = Actor;
	Parms.ContextClass = ContextClass;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibraries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USoundLibrary*>            Libraries                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::RemoveLibraries(const class AActor* Actor, const TArray<class USoundLibrary*>& Libraries)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveLibraries");

	Params::SoundLibrarySubsystem_RemoveLibraries Parms{};

	Parms.Actor = Actor;
	Parms.Libraries = std::move(Libraries);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibrariesFromCollections
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            CollectionTags                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::RemoveLibrariesFromCollections(const class AActor* Actor, const struct FGameplayTagContainer& CollectionTags)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveLibrariesFromCollections");

	Params::SoundLibrarySubsystem_RemoveLibrariesFromCollections Parms{};

	Parms.Actor = Actor;
	Parms.CollectionTags = std::move(CollectionTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundLibrary*                    Library                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::RemoveLibrary(const class AActor* Actor, class USoundLibrary* Library)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RemoveLibrary");

	Params::SoundLibrarySubsystem_RemoveLibrary Parms{};

	Parms.Actor = Actor;
	Parms.Library = Library;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SoundLibrary.SoundLibraryTagHelperFunctions.MakeSoundLibraryTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoundLibraryTag                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSoundLibraryTag USoundLibraryTagHelperFunctions::MakeSoundLibraryTag(const struct FGameplayTag& tag)
{
	static class UFunction* Func = nullptr;
	class UClass* StaticClss = StaticClass();

	if (Func == nullptr)
		Func = StaticClss->FindFunction("MakeSoundLibraryTag");

	Params::SoundLibraryTagHelperFunctions_MakeSoundLibraryTag Parms{};

	Parms.tag = std::move(tag);

	StaticClss->DefaultObject->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

