#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BeatSyncedAnimRuntime

#include "Basic.hpp"

#include "BeatSyncedAnimRuntime_structs.hpp"


namespace SDK::Params
{

// Function BeatSyncedAnimRuntime.BeatSyncedAnimLibrary.CalculateMontageBeatSyncInfo
// 0x0020 (0x0020 - 0x0000)
struct BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo final
{
public:
	const class UMusicClockComponent*             MusicClock;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     Montage;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthInBeats;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MsOffset;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFMontageBeatSyncInfo                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo) == 0x000008, "Wrong alignment on BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo");
static_assert(sizeof(BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo) == 0x000020, "Wrong size on BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo");
static_assert(offsetof(BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo, MusicClock) == 0x000000, "Member 'BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo::MusicClock' has a wrong offset!");
static_assert(offsetof(BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo, Montage) == 0x000008, "Member 'BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo::Montage' has a wrong offset!");
static_assert(offsetof(BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo, LengthInBeats) == 0x000010, "Member 'BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo::LengthInBeats' has a wrong offset!");
static_assert(offsetof(BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo, MsOffset) == 0x000014, "Member 'BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo::MsOffset' has a wrong offset!");
static_assert(offsetof(BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo, ReturnValue) == 0x000018, "Member 'BeatSyncedAnimLibrary_CalculateMontageBeatSyncInfo::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.BeatSyncedAnimLibrary.CalculateMontagePlayRate
// 0x0018 (0x0018 - 0x0000)
struct BeatSyncedAnimLibrary_CalculateMontagePlayRate final
{
public:
	const class UMusicClockComponent*             MusicClock;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     Montage;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MontageBeatLength;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatSyncedAnimLibrary_CalculateMontagePlayRate) == 0x000008, "Wrong alignment on BeatSyncedAnimLibrary_CalculateMontagePlayRate");
static_assert(sizeof(BeatSyncedAnimLibrary_CalculateMontagePlayRate) == 0x000018, "Wrong size on BeatSyncedAnimLibrary_CalculateMontagePlayRate");
static_assert(offsetof(BeatSyncedAnimLibrary_CalculateMontagePlayRate, MusicClock) == 0x000000, "Member 'BeatSyncedAnimLibrary_CalculateMontagePlayRate::MusicClock' has a wrong offset!");
static_assert(offsetof(BeatSyncedAnimLibrary_CalculateMontagePlayRate, Montage) == 0x000008, "Member 'BeatSyncedAnimLibrary_CalculateMontagePlayRate::Montage' has a wrong offset!");
static_assert(offsetof(BeatSyncedAnimLibrary_CalculateMontagePlayRate, MontageBeatLength) == 0x000010, "Member 'BeatSyncedAnimLibrary_CalculateMontagePlayRate::MontageBeatLength' has a wrong offset!");
static_assert(offsetof(BeatSyncedAnimLibrary_CalculateMontagePlayRate, ReturnValue) == 0x000014, "Member 'BeatSyncedAnimLibrary_CalculateMontagePlayRate::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.BeatSyncedAnimLibrary.GetLastEmoteExecuted
// 0x0010 (0x0010 - 0x0000)
struct BeatSyncedAnimLibrary_GetLastEmoteExecuted final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeatSyncedAnimLibrary_GetLastEmoteExecuted) == 0x000008, "Wrong alignment on BeatSyncedAnimLibrary_GetLastEmoteExecuted");
static_assert(sizeof(BeatSyncedAnimLibrary_GetLastEmoteExecuted) == 0x000010, "Wrong size on BeatSyncedAnimLibrary_GetLastEmoteExecuted");
static_assert(offsetof(BeatSyncedAnimLibrary_GetLastEmoteExecuted, Controller) == 0x000000, "Member 'BeatSyncedAnimLibrary_GetLastEmoteExecuted::Controller' has a wrong offset!");
static_assert(offsetof(BeatSyncedAnimLibrary_GetLastEmoteExecuted, ReturnValue) == 0x000008, "Member 'BeatSyncedAnimLibrary_GetLastEmoteExecuted::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.FMBeatTimingUtils.GetBeatsPerMeasure
// 0x0004 (0x0004 - 0x0000)
struct FMBeatTimingUtils_GetBeatsPerMeasure final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMBeatTimingUtils_GetBeatsPerMeasure) == 0x000004, "Wrong alignment on FMBeatTimingUtils_GetBeatsPerMeasure");
static_assert(sizeof(FMBeatTimingUtils_GetBeatsPerMeasure) == 0x000004, "Wrong size on FMBeatTimingUtils_GetBeatsPerMeasure");
static_assert(offsetof(FMBeatTimingUtils_GetBeatsPerMeasure, ReturnValue) == 0x000000, "Member 'FMBeatTimingUtils_GetBeatsPerMeasure::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.FMBeatTimingUtils.GetCurrentBeat
// 0x0010 (0x0010 - 0x0000)
struct FMBeatTimingUtils_GetCurrentBeat final
{
public:
	const class UMusicClockComponent*             InMusicClock;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRounded;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMBeatTimingUtils_GetCurrentBeat) == 0x000008, "Wrong alignment on FMBeatTimingUtils_GetCurrentBeat");
static_assert(sizeof(FMBeatTimingUtils_GetCurrentBeat) == 0x000010, "Wrong size on FMBeatTimingUtils_GetCurrentBeat");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeat, InMusicClock) == 0x000000, "Member 'FMBeatTimingUtils_GetCurrentBeat::InMusicClock' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeat, bRounded) == 0x000008, "Member 'FMBeatTimingUtils_GetCurrentBeat::bRounded' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeat, ReturnValue) == 0x00000C, "Member 'FMBeatTimingUtils_GetCurrentBeat::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.FMBeatTimingUtils.GetCurrentBeat_Unsafe
// 0x0010 (0x0010 - 0x0000)
struct FMBeatTimingUtils_GetCurrentBeat_Unsafe final
{
public:
	const class UMusicClockComponent*             InMusicClock;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRounded;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMBeatTimingUtils_GetCurrentBeat_Unsafe) == 0x000008, "Wrong alignment on FMBeatTimingUtils_GetCurrentBeat_Unsafe");
static_assert(sizeof(FMBeatTimingUtils_GetCurrentBeat_Unsafe) == 0x000010, "Wrong size on FMBeatTimingUtils_GetCurrentBeat_Unsafe");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeat_Unsafe, InMusicClock) == 0x000000, "Member 'FMBeatTimingUtils_GetCurrentBeat_Unsafe::InMusicClock' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeat_Unsafe, bRounded) == 0x000008, "Member 'FMBeatTimingUtils_GetCurrentBeat_Unsafe::bRounded' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeat_Unsafe, ReturnValue) == 0x00000C, "Member 'FMBeatTimingUtils_GetCurrentBeat_Unsafe::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.FMBeatTimingUtils.GetCurrentBeatAndTime
// 0x0028 (0x0028 - 0x0000)
struct FMBeatTimingUtils_GetCurrentBeatAndTime final
{
public:
	const class UMusicClockComponent*             MusicClock;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContext;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysAllowPreviewBPM;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviewBPM;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUnsafe;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBeatAndTime                           ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMBeatTimingUtils_GetCurrentBeatAndTime) == 0x000008, "Wrong alignment on FMBeatTimingUtils_GetCurrentBeatAndTime");
static_assert(sizeof(FMBeatTimingUtils_GetCurrentBeatAndTime) == 0x000028, "Wrong size on FMBeatTimingUtils_GetCurrentBeatAndTime");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeatAndTime, MusicClock) == 0x000000, "Member 'FMBeatTimingUtils_GetCurrentBeatAndTime::MusicClock' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeatAndTime, WorldContext) == 0x000008, "Member 'FMBeatTimingUtils_GetCurrentBeatAndTime::WorldContext' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeatAndTime, bAlwaysAllowPreviewBPM) == 0x000010, "Member 'FMBeatTimingUtils_GetCurrentBeatAndTime::bAlwaysAllowPreviewBPM' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeatAndTime, PreviewBPM) == 0x000014, "Member 'FMBeatTimingUtils_GetCurrentBeatAndTime::PreviewBPM' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeatAndTime, bForceUnsafe) == 0x000018, "Member 'FMBeatTimingUtils_GetCurrentBeatAndTime::bForceUnsafe' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeatAndTime, ReturnValue) == 0x00001C, "Member 'FMBeatTimingUtils_GetCurrentBeatAndTime::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.FMBeatTimingUtils.GetCurrentBeatForBPM
// 0x0018 (0x0018 - 0x0000)
struct FMBeatTimingUtils_GetCurrentBeatForBPM final
{
public:
	float                                         InBPM;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMBeatTimingUtils_GetCurrentBeatForBPM) == 0x000008, "Wrong alignment on FMBeatTimingUtils_GetCurrentBeatForBPM");
static_assert(sizeof(FMBeatTimingUtils_GetCurrentBeatForBPM) == 0x000018, "Wrong size on FMBeatTimingUtils_GetCurrentBeatForBPM");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeatForBPM, InBPM) == 0x000000, "Member 'FMBeatTimingUtils_GetCurrentBeatForBPM::InBPM' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeatForBPM, WorldContextObject) == 0x000008, "Member 'FMBeatTimingUtils_GetCurrentBeatForBPM::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentBeatForBPM, ReturnValue) == 0x000010, "Member 'FMBeatTimingUtils_GetCurrentBeatForBPM::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.FMBeatTimingUtils.GetCurrentSongTime
// 0x0010 (0x0010 - 0x0000)
struct FMBeatTimingUtils_GetCurrentSongTime final
{
public:
	const class UMusicClockComponent*             InMusicClock;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRounded;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMBeatTimingUtils_GetCurrentSongTime) == 0x000008, "Wrong alignment on FMBeatTimingUtils_GetCurrentSongTime");
static_assert(sizeof(FMBeatTimingUtils_GetCurrentSongTime) == 0x000010, "Wrong size on FMBeatTimingUtils_GetCurrentSongTime");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentSongTime, InMusicClock) == 0x000000, "Member 'FMBeatTimingUtils_GetCurrentSongTime::InMusicClock' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentSongTime, bRounded) == 0x000008, "Member 'FMBeatTimingUtils_GetCurrentSongTime::bRounded' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentSongTime, ReturnValue) == 0x00000C, "Member 'FMBeatTimingUtils_GetCurrentSongTime::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.FMBeatTimingUtils.GetCurrentSongTime_Unsafe
// 0x0010 (0x0010 - 0x0000)
struct FMBeatTimingUtils_GetCurrentSongTime_Unsafe final
{
public:
	const class UMusicClockComponent*             InMusicClock;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRounded;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMBeatTimingUtils_GetCurrentSongTime_Unsafe) == 0x000008, "Wrong alignment on FMBeatTimingUtils_GetCurrentSongTime_Unsafe");
static_assert(sizeof(FMBeatTimingUtils_GetCurrentSongTime_Unsafe) == 0x000010, "Wrong size on FMBeatTimingUtils_GetCurrentSongTime_Unsafe");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentSongTime_Unsafe, InMusicClock) == 0x000000, "Member 'FMBeatTimingUtils_GetCurrentSongTime_Unsafe::InMusicClock' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentSongTime_Unsafe, bRounded) == 0x000008, "Member 'FMBeatTimingUtils_GetCurrentSongTime_Unsafe::bRounded' has a wrong offset!");
static_assert(offsetof(FMBeatTimingUtils_GetCurrentSongTime_Unsafe, ReturnValue) == 0x00000C, "Member 'FMBeatTimingUtils_GetCurrentSongTime_Unsafe::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.MontageBeatSyncComponent.GetOwnerFortPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct MontageBeatSyncComponent_GetOwnerFortPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontageBeatSyncComponent_GetOwnerFortPlayerPawn) == 0x000008, "Wrong alignment on MontageBeatSyncComponent_GetOwnerFortPlayerPawn");
static_assert(sizeof(MontageBeatSyncComponent_GetOwnerFortPlayerPawn) == 0x000008, "Wrong size on MontageBeatSyncComponent_GetOwnerFortPlayerPawn");
static_assert(offsetof(MontageBeatSyncComponent_GetOwnerFortPlayerPawn, ReturnValue) == 0x000000, "Member 'MontageBeatSyncComponent_GetOwnerFortPlayerPawn::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.MontageBeatSyncComponent.GetOwnerSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct MontageBeatSyncComponent_GetOwnerSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontageBeatSyncComponent_GetOwnerSkeletalMeshComponent) == 0x000008, "Wrong alignment on MontageBeatSyncComponent_GetOwnerSkeletalMeshComponent");
static_assert(sizeof(MontageBeatSyncComponent_GetOwnerSkeletalMeshComponent) == 0x000008, "Wrong size on MontageBeatSyncComponent_GetOwnerSkeletalMeshComponent");
static_assert(offsetof(MontageBeatSyncComponent_GetOwnerSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'MontageBeatSyncComponent_GetOwnerSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.MontageBeatSyncComponent.IsMusicPlaying
// 0x0001 (0x0001 - 0x0000)
struct MontageBeatSyncComponent_IsMusicPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontageBeatSyncComponent_IsMusicPlaying) == 0x000001, "Wrong alignment on MontageBeatSyncComponent_IsMusicPlaying");
static_assert(sizeof(MontageBeatSyncComponent_IsMusicPlaying) == 0x000001, "Wrong size on MontageBeatSyncComponent_IsMusicPlaying");
static_assert(offsetof(MontageBeatSyncComponent_IsMusicPlaying, ReturnValue) == 0x000000, "Member 'MontageBeatSyncComponent_IsMusicPlaying::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.MontageBeatSyncComponent.LookupMontageTimingInfo_BP
// 0x0018 (0x0018 - 0x0000)
struct MontageBeatSyncComponent_LookupMontageTimingInfo_BP final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AFortPlayerPawn*                  PlayerPawn;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPreciseBeatSyncedAnimMetaData*   ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontageBeatSyncComponent_LookupMontageTimingInfo_BP) == 0x000008, "Wrong alignment on MontageBeatSyncComponent_LookupMontageTimingInfo_BP");
static_assert(sizeof(MontageBeatSyncComponent_LookupMontageTimingInfo_BP) == 0x000018, "Wrong size on MontageBeatSyncComponent_LookupMontageTimingInfo_BP");
static_assert(offsetof(MontageBeatSyncComponent_LookupMontageTimingInfo_BP, Montage) == 0x000000, "Member 'MontageBeatSyncComponent_LookupMontageTimingInfo_BP::Montage' has a wrong offset!");
static_assert(offsetof(MontageBeatSyncComponent_LookupMontageTimingInfo_BP, PlayerPawn) == 0x000008, "Member 'MontageBeatSyncComponent_LookupMontageTimingInfo_BP::PlayerPawn' has a wrong offset!");
static_assert(offsetof(MontageBeatSyncComponent_LookupMontageTimingInfo_BP, ReturnValue) == 0x000010, "Member 'MontageBeatSyncComponent_LookupMontageTimingInfo_BP::ReturnValue' has a wrong offset!");

// Function BeatSyncedAnimRuntime.MontageBeatSyncComponent.SetMusicClockReference
// 0x0008 (0x0008 - 0x0000)
struct MontageBeatSyncComponent_SetMusicClockReference final
{
public:
	class UMusicClockComponent*                   MusicClock;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontageBeatSyncComponent_SetMusicClockReference) == 0x000008, "Wrong alignment on MontageBeatSyncComponent_SetMusicClockReference");
static_assert(sizeof(MontageBeatSyncComponent_SetMusicClockReference) == 0x000008, "Wrong size on MontageBeatSyncComponent_SetMusicClockReference");
static_assert(offsetof(MontageBeatSyncComponent_SetMusicClockReference, MusicClock) == 0x000000, "Member 'MontageBeatSyncComponent_SetMusicClockReference::MusicClock' has a wrong offset!");

// Function BeatSyncedAnimRuntime.SparksAnimLoggingComponent.GetCurrentFullBodyAnimName
// 0x0010 (0x0010 - 0x0000)
struct SparksAnimLoggingComponent_GetCurrentFullBodyAnimName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SparksAnimLoggingComponent_GetCurrentFullBodyAnimName) == 0x000008, "Wrong alignment on SparksAnimLoggingComponent_GetCurrentFullBodyAnimName");
static_assert(sizeof(SparksAnimLoggingComponent_GetCurrentFullBodyAnimName) == 0x000010, "Wrong size on SparksAnimLoggingComponent_GetCurrentFullBodyAnimName");
static_assert(offsetof(SparksAnimLoggingComponent_GetCurrentFullBodyAnimName, ReturnValue) == 0x000000, "Member 'SparksAnimLoggingComponent_GetCurrentFullBodyAnimName::ReturnValue' has a wrong offset!");

}

