#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AugmentSelector_AugmentInfo

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo
// 0x00A8 (0x00A8 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsNew;                               // 0x0010(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsBorrowed;                          // 0x0011(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_PinColor;                             // 0x0014(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 K2Node_CustomEvent_Asset;                          // 0x0048(0x0020)(HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;              // 0x0070(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x0098(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo) == 0x0000A8, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, EntryPoint) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000004, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, K2Node_Event_bIsNew) == 0x000010, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::K2Node_Event_bIsNew' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, K2Node_Event_bIsBorrowed) == 0x000011, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::K2Node_Event_bIsBorrowed' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, K2Node_Event_PinColor) == 0x000014, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::K2Node_Event_PinColor' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000028, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x000030, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000038, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, CallFunc_GetCurrentInputType_ReturnValue) == 0x000040, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, K2Node_CustomEvent_Asset) == 0x000048, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::K2Node_CustomEvent_Asset' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, Temp_object_Variable) == 0x000068, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, K2Node_CreateDelegate_OutputDelegate) == 0x000070, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, K2Node_DynamicCast_AsTexture_2D) == 0x000080, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, K2Node_CustomEvent_Loaded) == 0x000090, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo, K2Node_CreateDelegate_OutputDelegate_1) == 0x000098, "Member 'WBP_AugmentSelector_AugmentInfo_C_ExecuteUbergraph_WBP_AugmentSelector_AugmentInfo::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.OnItemNewOrBorrowedSet
// 0x0002 (0x0002 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_OnItemNewOrBorrowedSet final
{
public:
	bool                                          bIsNew;                                            // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBorrowed;                                       // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_OnItemNewOrBorrowedSet) == 0x000001, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_OnItemNewOrBorrowedSet");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_OnItemNewOrBorrowedSet) == 0x000002, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_OnItemNewOrBorrowedSet");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_OnItemNewOrBorrowedSet, bIsNew) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_OnItemNewOrBorrowedSet::bIsNew' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_OnItemNewOrBorrowedSet, bIsBorrowed) == 0x000001, "Member 'WBP_AugmentSelector_AugmentInfo_C_OnItemNewOrBorrowedSet::bIsBorrowed' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.OnItemPinColorSet
// 0x0010 (0x0010 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_OnItemPinColorSet final
{
public:
	struct FLinearColor                           PinColor;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_OnItemPinColorSet) == 0x000004, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_OnItemPinColorSet");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_OnItemPinColorSet) == 0x000010, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_OnItemPinColorSet");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_OnItemPinColorSet, PinColor) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_OnItemPinColorSet::PinColor' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.OnLoaded_922BC2C84BE9FC8FE494899AC556F9F2
// 0x0008 (0x0008 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_OnLoaded_922BC2C84BE9FC8FE494899AC556F9F2 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_OnLoaded_922BC2C84BE9FC8FE494899AC556F9F2) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_OnLoaded_922BC2C84BE9FC8FE494899AC556F9F2");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_OnLoaded_922BC2C84BE9FC8FE494899AC556F9F2) == 0x000008, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_OnLoaded_922BC2C84BE9FC8FE494899AC556F9F2");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_OnLoaded_922BC2C84BE9FC8FE494899AC556F9F2, Loaded) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_OnLoaded_922BC2C84BE9FC8FE494899AC556F9F2::Loaded' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.PlayHUDSwapAnim
// 0x0008 (0x0008 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_PlayHUDSwapAnim final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_PlayHUDSwapAnim) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_PlayHUDSwapAnim");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_PlayHUDSwapAnim) == 0x000008, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_PlayHUDSwapAnim");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_PlayHUDSwapAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_PlayHUDSwapAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.PlayPulseAnimation
// 0x0008 (0x0008 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_PlayPulseAnimation final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_PlayPulseAnimation) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_PlayPulseAnimation");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_PlayPulseAnimation) == 0x000008, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_PlayPulseAnimation");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_PlayPulseAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_PlayPulseAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.PlayRerollAnim
// 0x0008 (0x0008 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_PlayRerollAnim final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_PlayRerollAnim) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_PlayRerollAnim");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_PlayRerollAnim) == 0x000008, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_PlayRerollAnim");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_PlayRerollAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_PlayRerollAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.ResetState
// 0x00E0 (0x00E0 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_ResetState final
{
public:
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform;                 // 0x0000(0x0038)(NoDestructor)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform_1;               // 0x0038(0x0038)(NoDestructor)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform_2;               // 0x0070(0x0038)(NoDestructor)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform_3;               // 0x00A8(0x0038)(NoDestructor)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_ResetState) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_ResetState");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_ResetState) == 0x0000E0, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_ResetState");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ResetState, K2Node_MakeStruct_WidgetTransform) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_ResetState::K2Node_MakeStruct_WidgetTransform' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ResetState, K2Node_MakeStruct_WidgetTransform_1) == 0x000038, "Member 'WBP_AugmentSelector_AugmentInfo_C_ResetState::K2Node_MakeStruct_WidgetTransform_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ResetState, K2Node_MakeStruct_WidgetTransform_2) == 0x000070, "Member 'WBP_AugmentSelector_AugmentInfo_C_ResetState::K2Node_MakeStruct_WidgetTransform_2' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_ResetState, K2Node_MakeStruct_WidgetTransform_3) == 0x0000A8, "Member 'WBP_AugmentSelector_AugmentInfo_C_ResetState::K2Node_MakeStruct_WidgetTransform_3' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.SetAugmentIcon
// 0x0020 (0x0020 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_SetAugmentIcon final
{
public:
	TSoftObjectPtr<class UObject>                 Asset;                                             // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_SetAugmentIcon) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_SetAugmentIcon");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_SetAugmentIcon) == 0x000020, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_SetAugmentIcon");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetAugmentIcon, Asset) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetAugmentIcon::Asset' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.SetAugmentInfo
// 0x0028 (0x0028 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_SetAugmentInfo final
{
public:
	class UFortPlayerAugmentItemDefinition*       InAugmentItemDefinition;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetHUDEffectImage_ReturnValue;            // 0x0008(0x0020)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_SetAugmentInfo) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_SetAugmentInfo");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_SetAugmentInfo) == 0x000028, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_SetAugmentInfo");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetAugmentInfo, InAugmentItemDefinition) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetAugmentInfo::InAugmentItemDefinition' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetAugmentInfo, CallFunc_GetHUDEffectImage_ReturnValue) == 0x000008, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetAugmentInfo::CallFunc_GetHUDEffectImage_ReturnValue' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.SetFocused
// 0x0028 (0x0028 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_SetFocused final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnimation_0;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_3;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_2;                           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_SetFocused) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_SetFocused");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_SetFocused) == 0x000028, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_SetFocused");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, IsFocused) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::IsFocused' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, PlayAnimation_0) == 0x000001, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::PlayAnimation_0' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, Temp_bool_Variable) == 0x000002, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, Temp_byte_Variable) == 0x000003, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, Temp_byte_Variable_1) == 0x000004, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, Temp_bool_Variable_1) == 0x000005, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, Temp_real_Variable) == 0x000008, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, Temp_bool_Variable_2) == 0x00000C, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, Temp_byte_Variable_2) == 0x00000D, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, Temp_byte_Variable_3) == 0x00000E, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, CallFunc_GetEndTime_ReturnValue) == 0x000010, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, K2Node_Select_Default) == 0x000014, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, K2Node_Select_Default_1) == 0x000018, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, K2Node_Select_Default_2) == 0x00001C, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetFocused, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetFocused::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.SetMobileVisuals
// 0x00C0 (0x00C0 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMobileLayout;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            Temp_byte_Variable_2;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            Temp_byte_Variable_3;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_Select_Default_2;                           // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_2;                        // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_3;                        // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_Select_Default_3;                           // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue_1;      // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            K2Node_Select_Default_4;                           // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals) == 0x0000C0, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, InputType) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::InputType' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, IsMobileLayout) == 0x000001, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::IsMobileLayout' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_bool_Variable) == 0x000002, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_byte_Variable) == 0x000004, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_bool_Variable_1) == 0x000006, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_bool_Variable_2) == 0x000007, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_bool_Variable_3) == 0x000008, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_byte_Variable_2) == 0x000009, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_byte_Variable_3) == 0x00000A, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_bool_Variable_4) == 0x00000B, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_real_Variable) == 0x000010, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, Temp_real_Variable_1) == 0x000018, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, K2Node_Select_Default) == 0x000020, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000039, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_BooleanOR_ReturnValue) == 0x00003A, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, K2Node_MakeStruct_Margin) == 0x00003C, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, K2Node_Select_Default_1) == 0x00004C, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, K2Node_MakeStruct_Margin_1) == 0x000050, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, K2Node_Select_Default_2) == 0x000060, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x000070, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, K2Node_MakeStruct_Margin_2) == 0x000078, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::K2Node_MakeStruct_Margin_2' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, K2Node_MakeStruct_Margin_3) == 0x000088, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::K2Node_MakeStruct_Margin_3' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, K2Node_Select_Default_3) == 0x000098, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_SlotAsVerticalBoxSlot_ReturnValue_1) == 0x0000A8, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_SlotAsVerticalBoxSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_IsMobileGame_ReturnValue) == 0x0000B0, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_BooleanAND_ReturnValue) == 0x0000B1, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, K2Node_Select_Default_4) == 0x0000B2, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x0000B8, "Member 'WBP_AugmentSelector_AugmentInfo_C_SetMobileVisuals::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.TriggerActivationAnimation
// 0x0020 (0x0020 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation final
{
public:
	double                                        AnimationEndTime;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_AnimationEndTime_ImplicitCast; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation) == 0x000008, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation) == 0x000020, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation, AnimationEndTime) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation::AnimationEndTime' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation, CallFunc_GetEndTime_ReturnValue) == 0x000010, "Member 'WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation, K2Node_FunctionResult_AnimationEndTime_ImplicitCast) == 0x000018, "Member 'WBP_AugmentSelector_AugmentInfo_C_TriggerActivationAnimation::K2Node_FunctionResult_AnimationEndTime_ImplicitCast' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.UpdateBorrowedPrompt
// 0x0005 (0x0005 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt final
{
public:
	bool                                          IsBorrowed;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt) == 0x000001, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt) == 0x000005, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt, IsBorrowed) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt::IsBorrowed' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt, Temp_bool_Variable) == 0x000001, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt, Temp_byte_Variable) == 0x000002, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt, K2Node_Select_Default) == 0x000004, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateBorrowedPrompt::K2Node_Select_Default' has a wrong offset!");

// Function WBP_AugmentSelector_AugmentInfo.WBP_AugmentSelector_AugmentInfo_C.UpdateNewPrompt
// 0x0005 (0x0005 - 0x0000)
struct WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt final
{
public:
	bool                                          IsNew;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt) == 0x000001, "Wrong alignment on WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt");
static_assert(sizeof(WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt) == 0x000005, "Wrong size on WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt, IsNew) == 0x000000, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt::IsNew' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt, Temp_bool_Variable) == 0x000001, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt, Temp_byte_Variable) == 0x000002, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt, K2Node_Select_Default) == 0x000004, "Member 'WBP_AugmentSelector_AugmentInfo_C_UpdateNewPrompt::K2Node_Select_Default' has a wrong offset!");

}

