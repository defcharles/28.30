#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseFortniteUI

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.AddDoubles
// 0x0028 (0x0028 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_AddDoubles final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegateA;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegateB;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_AddDoubles) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_AddDoubles");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_AddDoubles) == 0x000028, "Wrong size on VerseFortniteUIAllowedConversionLibrary_AddDoubles");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddDoubles, A) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_AddDoubles::A' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddDoubles, bNegateA) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_AddDoubles::bNegateA' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddDoubles, B) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_AddDoubles::B' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddDoubles, bNegateB) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_AddDoubles::bNegateB' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddDoubles, ReturnValue) == 0x000020, "Member 'VerseFortniteUIAllowedConversionLibrary_AddDoubles::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.AddIntDouble
// 0x0028 (0x0028 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_AddIntDouble final
{
public:
	int64                                         A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegateA;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegateB;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_AddIntDouble) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_AddIntDouble");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_AddIntDouble) == 0x000028, "Wrong size on VerseFortniteUIAllowedConversionLibrary_AddIntDouble");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntDouble, A) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntDouble::A' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntDouble, bNegateA) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntDouble::bNegateA' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntDouble, B) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntDouble::B' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntDouble, bNegateB) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntDouble::bNegateB' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntDouble, ReturnValue) == 0x000020, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntDouble::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.AddIntegers
// 0x0028 (0x0028 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_AddIntegers final
{
public:
	int64                                         A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegateA;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         B;                                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegateB;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_AddIntegers) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_AddIntegers");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_AddIntegers) == 0x000028, "Wrong size on VerseFortniteUIAllowedConversionLibrary_AddIntegers");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntegers, A) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntegers::A' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntegers, bNegateA) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntegers::bNegateA' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntegers, B) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntegers::B' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntegers, bNegateB) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntegers::bNegateB' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_AddIntegers, ReturnValue) == 0x000020, "Member 'VerseFortniteUIAllowedConversionLibrary_AddIntegers::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.Conv_BoolToSlateVisibility
// 0x0004 (0x0004 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              TrueVisibility;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              FalseVisibility;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility) == 0x000001, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility) == 0x000004, "Wrong size on VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility, bIsVisible) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility::bIsVisible' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility, TrueVisibility) == 0x000001, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility::TrueVisibility' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility, FalseVisibility) == 0x000002, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility::FalseVisibility' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility, ReturnValue) == 0x000003, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_BoolToSlateVisibility::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.Conv_DoubleToBoolInterval
// 0x0020 (0x0020 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InclusiveLowerBound;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InclusiveUpperBound;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval) == 0x000020, "Wrong size on VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval, Value) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval::Value' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval, InclusiveLowerBound) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval::InclusiveLowerBound' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval, InclusiveUpperBound) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval::InclusiveUpperBound' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval, ReturnValue) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolInterval::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.Conv_DoubleToBoolSimple
// 0x0010 (0x0010 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolSimple final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolSimple) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolSimple");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolSimple) == 0x000010, "Wrong size on VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolSimple");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolSimple, Value) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolSimple::Value' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolSimple, ReturnValue) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToBoolSimple::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.Conv_DoubleToText
// 0x0038 (0x0038 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERoundingMode                                 RoundingMode;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysSign;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGrouping;                                      // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumIntegralDigits;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumIntegralDigits;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumFractionalDigits;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumFractionalDigits;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText) == 0x000038, "Wrong size on VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText, Value) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText::Value' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText, RoundingMode) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText::RoundingMode' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText, bAlwaysSign) == 0x000009, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText::bAlwaysSign' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText, bUseGrouping) == 0x00000A, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText::bUseGrouping' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText, MinimumIntegralDigits) == 0x00000C, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText::MinimumIntegralDigits' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText, MaximumIntegralDigits) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText::MaximumIntegralDigits' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText, MinimumFractionalDigits) == 0x000014, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText::MinimumFractionalDigits' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText, MaximumFractionalDigits) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText::MaximumFractionalDigits' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText, ReturnValue) == 0x000020, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_DoubleToText::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.Conv_IntegerToBoolInterval
// 0x0020 (0x0020 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InclusiveLowerBound;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InclusiveUpperBound;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval) == 0x000020, "Wrong size on VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval, Value) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval::Value' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval, InclusiveLowerBound) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval::InclusiveLowerBound' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval, InclusiveUpperBound) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval::InclusiveUpperBound' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval, ReturnValue) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolInterval::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.Conv_IntegerToBoolSimple
// 0x0010 (0x0010 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolSimple final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolSimple) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolSimple");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolSimple) == 0x000010, "Wrong size on VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolSimple");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolSimple, Value) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolSimple::Value' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolSimple, ReturnValue) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntegerToBoolSimple::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.Conv_IntToText
// 0x0038 (0x0038 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_Conv_IntToText final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysSign;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGrouping;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         MinimumIntegralDigits;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MaximumIntegralDigits;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_Conv_IntToText) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_Conv_IntToText");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_Conv_IntToText) == 0x000038, "Wrong size on VerseFortniteUIAllowedConversionLibrary_Conv_IntToText");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntToText, Value) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntToText::Value' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntToText, bAlwaysSign) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntToText::bAlwaysSign' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntToText, bUseGrouping) == 0x000009, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntToText::bUseGrouping' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntToText, MinimumIntegralDigits) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntToText::MinimumIntegralDigits' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntToText, MaximumIntegralDigits) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntToText::MaximumIntegralDigits' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_IntToText, ReturnValue) == 0x000020, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_IntToText::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.Conv_LinearColorToSlateColor
// 0x0024 (0x0024 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_Conv_LinearColorToSlateColor final
{
public:
	struct FLinearColor                           Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_Conv_LinearColorToSlateColor) == 0x000004, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_Conv_LinearColorToSlateColor");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_Conv_LinearColorToSlateColor) == 0x000024, "Wrong size on VerseFortniteUIAllowedConversionLibrary_Conv_LinearColorToSlateColor");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_LinearColorToSlateColor, Value) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_LinearColorToSlateColor::Value' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_LinearColorToSlateColor, ReturnValue) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_LinearColorToSlateColor::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.Conv_SlateColorToLinearColor
// 0x0024 (0x0024 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_Conv_SlateColorToLinearColor final
{
public:
	struct FSlateColor                            Value;                                             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0014(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_Conv_SlateColorToLinearColor) == 0x000004, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_Conv_SlateColorToLinearColor");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_Conv_SlateColorToLinearColor) == 0x000024, "Wrong size on VerseFortniteUIAllowedConversionLibrary_Conv_SlateColorToLinearColor");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_SlateColorToLinearColor, Value) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_SlateColorToLinearColor::Value' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_Conv_SlateColorToLinearColor, ReturnValue) == 0x000014, "Member 'VerseFortniteUIAllowedConversionLibrary_Conv_SlateColorToLinearColor::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.InvertBool
// 0x0002 (0x0002 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_InvertBool final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_InvertBool) == 0x000001, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_InvertBool");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_InvertBool) == 0x000002, "Wrong size on VerseFortniteUIAllowedConversionLibrary_InvertBool");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_InvertBool, bValue) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_InvertBool::bValue' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_InvertBool, ReturnValue) == 0x000001, "Member 'VerseFortniteUIAllowedConversionLibrary_InvertBool::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.MakeImageBrushFromMaterial
// 0x00F0 (0x00F0 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ImageSize;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TintColor;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0030(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial) == 0x000010, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial) == 0x0000F0, "Wrong size on VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial, Material) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial::Material' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial, ImageSize) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial::ImageSize' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial, TintColor) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial::TintColor' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial, ReturnValue) == 0x000030, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromMaterial::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.MakeImageBrushFromTexture
// 0x00F0 (0x00F0 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ImageSize;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LinearColor;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateBrushTileType                           TileType;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0030(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture) == 0x000010, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture) == 0x0000F0, "Wrong size on VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture, Image) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture::Image' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture, ImageSize) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture::ImageSize' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture, LinearColor) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture::LinearColor' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture, TileType) == 0x000028, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture::TileType' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture, ReturnValue) == 0x000030, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeImageBrushFromTexture::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.MakeTransform
// 0x0070 (0x0070 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_MakeTransform final
{
public:
	struct FVector2D                              Translation;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Scale;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Shear;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Angle;                                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetTransform                       ReturnValue;                                       // 0x0038(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_MakeTransform) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_MakeTransform");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_MakeTransform) == 0x000070, "Wrong size on VerseFortniteUIAllowedConversionLibrary_MakeTransform");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeTransform, Translation) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeTransform::Translation' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeTransform, Scale) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeTransform::Scale' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeTransform, Shear) == 0x000020, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeTransform::Shear' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeTransform, Angle) == 0x000030, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeTransform::Angle' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MakeTransform, ReturnValue) == 0x000038, "Member 'VerseFortniteUIAllowedConversionLibrary_MakeTransform::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.MultiplyDoubles
// 0x0028 (0x0028 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles final
{
public:
	double                                        A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertA;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertB;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles) == 0x000028, "Wrong size on VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles, A) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles::A' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles, bInvertA) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles::bInvertA' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles, B) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles::B' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles, bInvertB) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles::bInvertB' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles, ReturnValue) == 0x000020, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyDoubles::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.MultiplyIntDouble
// 0x0028 (0x0028 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble final
{
public:
	int64                                         A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertA;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        B;                                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertB;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble) == 0x000028, "Wrong size on VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble, A) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble::A' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble, bInvertA) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble::bInvertA' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble, B) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble::B' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble, bInvertB) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble::bInvertB' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble, ReturnValue) == 0x000020, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyIntDouble::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIAllowedConversionLibrary.MultiplyIntegers
// 0x0020 (0x0020 - 0x0000)
struct VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers final
{
public:
	int64                                         A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         B;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertB;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers) == 0x000008, "Wrong alignment on VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers");
static_assert(sizeof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers) == 0x000020, "Wrong size on VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers, A) == 0x000000, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers::A' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers, B) == 0x000008, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers::B' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers, bInvertB) == 0x000010, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers::bInvertB' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers, ReturnValue) == 0x000018, "Member 'VerseFortniteUIAllowedConversionLibrary_MultiplyIntegers::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkButton_Base.ServerClick
// 0x0008 (0x0008 - 0x0000)
struct VerseFortniteUIFrameworkButton_Base_ServerClick final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkButton_Base_ServerClick) == 0x000008, "Wrong alignment on VerseFortniteUIFrameworkButton_Base_ServerClick");
static_assert(sizeof(VerseFortniteUIFrameworkButton_Base_ServerClick) == 0x000008, "Wrong size on VerseFortniteUIFrameworkButton_Base_ServerClick");
static_assert(offsetof(VerseFortniteUIFrameworkButton_Base_ServerClick, PlayerController) == 0x000000, "Member 'VerseFortniteUIFrameworkButton_Base_ServerClick::PlayerController' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkButton_Base.GetText
// 0x0018 (0x0018 - 0x0000)
struct VerseFortniteUIFrameworkButton_Base_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkButton_Base_GetText) == 0x000008, "Wrong alignment on VerseFortniteUIFrameworkButton_Base_GetText");
static_assert(sizeof(VerseFortniteUIFrameworkButton_Base_GetText) == 0x000018, "Wrong size on VerseFortniteUIFrameworkButton_Base_GetText");
static_assert(offsetof(VerseFortniteUIFrameworkButton_Base_GetText, ReturnValue) == 0x000000, "Member 'VerseFortniteUIFrameworkButton_Base_GetText::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkText_Base.ExecuteServerTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct VerseFortniteUIFrameworkText_Base_ExecuteServerTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerseFortniteUIFrameworkText_Base_ExecuteServerTextCommitted) == 0x000008, "Wrong alignment on VerseFortniteUIFrameworkText_Base_ExecuteServerTextCommitted");
static_assert(sizeof(VerseFortniteUIFrameworkText_Base_ExecuteServerTextCommitted) == 0x000020, "Wrong size on VerseFortniteUIFrameworkText_Base_ExecuteServerTextCommitted");
static_assert(offsetof(VerseFortniteUIFrameworkText_Base_ExecuteServerTextCommitted, InText) == 0x000000, "Member 'VerseFortniteUIFrameworkText_Base_ExecuteServerTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIFrameworkText_Base_ExecuteServerTextCommitted, InCommitMethod) == 0x000018, "Member 'VerseFortniteUIFrameworkText_Base_ExecuteServerTextCommitted::InCommitMethod' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkText_Base.ServerTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct VerseFortniteUIFrameworkText_Base_ServerTextCommitted final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NewText;                                           // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkText_Base_ServerTextCommitted) == 0x000008, "Wrong alignment on VerseFortniteUIFrameworkText_Base_ServerTextCommitted");
static_assert(sizeof(VerseFortniteUIFrameworkText_Base_ServerTextCommitted) == 0x000020, "Wrong size on VerseFortniteUIFrameworkText_Base_ServerTextCommitted");
static_assert(offsetof(VerseFortniteUIFrameworkText_Base_ServerTextCommitted, PlayerController) == 0x000000, "Member 'VerseFortniteUIFrameworkText_Base_ServerTextCommitted::PlayerController' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIFrameworkText_Base_ServerTextCommitted, NewText) == 0x000008, "Member 'VerseFortniteUIFrameworkText_Base_ServerTextCommitted::NewText' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.ExecuteServerValueChanged
// 0x000C (0x000C - 0x0000)
struct VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InClientID;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InServerID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged) == 0x00000C, "Wrong size on VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged, InNewValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged::InNewValue' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged, InClientID) == 0x000004, "Member 'VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged::InClientID' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged, InServerID) == 0x000008, "Member 'VerseFortniteUIFrameworkSlider_ExecuteServerValueChanged::InServerID' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.HandleValueChanged
// 0x0004 (0x0004 - 0x0000)
struct VerseFortniteUIFrameworkSlider_HandleValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_HandleValueChanged) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_HandleValueChanged");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_HandleValueChanged) == 0x000004, "Wrong size on VerseFortniteUIFrameworkSlider_HandleValueChanged");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_HandleValueChanged, NewValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_HandleValueChanged::NewValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.ServerValueChanged
// 0x0018 (0x0018 - 0x0000)
struct VerseFortniteUIFrameworkSlider_ServerValueChanged final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InNewValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InClientID;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InServerID;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_ServerValueChanged) == 0x000008, "Wrong alignment on VerseFortniteUIFrameworkSlider_ServerValueChanged");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_ServerValueChanged) == 0x000018, "Wrong size on VerseFortniteUIFrameworkSlider_ServerValueChanged");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_ServerValueChanged, PlayerController) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_ServerValueChanged::PlayerController' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_ServerValueChanged, InNewValue) == 0x000008, "Member 'VerseFortniteUIFrameworkSlider_ServerValueChanged::InNewValue' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_ServerValueChanged, InClientID) == 0x00000C, "Member 'VerseFortniteUIFrameworkSlider_ServerValueChanged::InClientID' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_ServerValueChanged, InServerID) == 0x000010, "Member 'VerseFortniteUIFrameworkSlider_ServerValueChanged::InServerID' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.SetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct VerseFortniteUIFrameworkSlider_SetMaxValue final
{
public:
	float                                         InMaxValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_SetMaxValue) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_SetMaxValue");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_SetMaxValue) == 0x000004, "Wrong size on VerseFortniteUIFrameworkSlider_SetMaxValue");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_SetMaxValue, InMaxValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_SetMaxValue::InMaxValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.SetMinValue
// 0x0004 (0x0004 - 0x0000)
struct VerseFortniteUIFrameworkSlider_SetMinValue final
{
public:
	float                                         InMinValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_SetMinValue) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_SetMinValue");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_SetMinValue) == 0x000004, "Wrong size on VerseFortniteUIFrameworkSlider_SetMinValue");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_SetMinValue, InMinValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_SetMinValue::InMinValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.SetStepSize
// 0x0004 (0x0004 - 0x0000)
struct VerseFortniteUIFrameworkSlider_SetStepSize final
{
public:
	float                                         InMinValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_SetStepSize) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_SetStepSize");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_SetStepSize) == 0x000004, "Wrong size on VerseFortniteUIFrameworkSlider_SetStepSize");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_SetStepSize, InMinValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_SetStepSize::InMinValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.SetValue
// 0x0008 (0x0008 - 0x0000)
struct VerseFortniteUIFrameworkSlider_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_SetValue) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_SetValue");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_SetValue) == 0x000008, "Wrong size on VerseFortniteUIFrameworkSlider_SetValue");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_SetValue, InValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_SetValue::InValue' has a wrong offset!");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_SetValue, ReturnValue) == 0x000004, "Member 'VerseFortniteUIFrameworkSlider_SetValue::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct VerseFortniteUIFrameworkSlider_GetMaxValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_GetMaxValue) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_GetMaxValue");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_GetMaxValue) == 0x000004, "Wrong size on VerseFortniteUIFrameworkSlider_GetMaxValue");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_GetMaxValue, ReturnValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_GetMaxValue::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.GetMinValue
// 0x0004 (0x0004 - 0x0000)
struct VerseFortniteUIFrameworkSlider_GetMinValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_GetMinValue) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_GetMinValue");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_GetMinValue) == 0x000004, "Wrong size on VerseFortniteUIFrameworkSlider_GetMinValue");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_GetMinValue, ReturnValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_GetMinValue::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.GetStepSize
// 0x0004 (0x0004 - 0x0000)
struct VerseFortniteUIFrameworkSlider_GetStepSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_GetStepSize) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_GetStepSize");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_GetStepSize) == 0x000004, "Wrong size on VerseFortniteUIFrameworkSlider_GetStepSize");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_GetStepSize, ReturnValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_GetStepSize::ReturnValue' has a wrong offset!");

// Function VerseFortniteUI.VerseFortniteUIFrameworkSlider.GetValue
// 0x0004 (0x0004 - 0x0000)
struct VerseFortniteUIFrameworkSlider_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseFortniteUIFrameworkSlider_GetValue) == 0x000004, "Wrong alignment on VerseFortniteUIFrameworkSlider_GetValue");
static_assert(sizeof(VerseFortniteUIFrameworkSlider_GetValue) == 0x000004, "Wrong size on VerseFortniteUIFrameworkSlider_GetValue");
static_assert(offsetof(VerseFortniteUIFrameworkSlider_GetValue, ReturnValue) == 0x000000, "Member 'VerseFortniteUIFrameworkSlider_GetValue::ReturnValue' has a wrong offset!");

}

