#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarUI

#include "Basic.hpp"

#include "DelMarUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "CommonUI_structs.hpp"
#include "CommonUI_classes.hpp"
#include "ModelViewViewModel_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "InputCore_structs.hpp"
#include "Slate_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DelMarCore_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "CommonInput_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "DynamicUI_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "UIChart_classes.hpp"


namespace SDK
{

// Class DelMarUI.DelMarUserWidget
// 0x0078 (0x0360 - 0x02E8)
class UDelMarUserWidget : public UCommonUserWidget
{
public:
	uint8                                         Pad_2E8[0x58];                                     // 0x02E8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	EWidgetTransitionerInitialStatus              InitialTransitionStatus;                           // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              HiddenVisibility;                                  // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysReverseInterruptedAnimations;               // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_343[0x5];                                      // 0x0343(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetTransitioner*                    WidgetTransitioner;                                // 0x0348(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       NormalTransitionIn;                                // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       NormalTransitionOut;                               // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_Hide(bool bSkipAnimation);
	void BP_Show(bool bSkipAnimation);
	class UUIStateChartManager* GetUIStateChartManager();
	void HandleWidgetTransitionerStatusChanged(class UWidgetTransitioner* InTransitioner, EWidgetTransitionerStatus InStatus);
	void SetDisplayEnabled(bool bEnabled, bool bSkipAnimation);

	class UWidgetTransitioner* GetWidgetTransitioner() const;
	bool IsDisplayEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarUserWidget">();
	}
	static class UDelMarUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarUserWidget>();
	}
};
static_assert(alignof(UDelMarUserWidget) == 0x000008, "Wrong alignment on UDelMarUserWidget");
static_assert(sizeof(UDelMarUserWidget) == 0x000360, "Wrong size on UDelMarUserWidget");
static_assert(offsetof(UDelMarUserWidget, InitialTransitionStatus) == 0x000340, "Member 'UDelMarUserWidget::InitialTransitionStatus' has a wrong offset!");
static_assert(offsetof(UDelMarUserWidget, HiddenVisibility) == 0x000341, "Member 'UDelMarUserWidget::HiddenVisibility' has a wrong offset!");
static_assert(offsetof(UDelMarUserWidget, bAlwaysReverseInterruptedAnimations) == 0x000342, "Member 'UDelMarUserWidget::bAlwaysReverseInterruptedAnimations' has a wrong offset!");
static_assert(offsetof(UDelMarUserWidget, WidgetTransitioner) == 0x000348, "Member 'UDelMarUserWidget::WidgetTransitioner' has a wrong offset!");
static_assert(offsetof(UDelMarUserWidget, NormalTransitionIn) == 0x000350, "Member 'UDelMarUserWidget::NormalTransitionIn' has a wrong offset!");
static_assert(offsetof(UDelMarUserWidget, NormalTransitionOut) == 0x000358, "Member 'UDelMarUserWidget::NormalTransitionOut' has a wrong offset!");

// Class DelMarUI.DelMarCountdownTimerWidget
// 0x0040 (0x03A0 - 0x0360)
class UDelMarCountdownTimerWidget final : public UDelMarUserWidget
{
public:
	class UTextBlock*                             TextBlock_RemainingTime;                           // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InitialCoundownTime;                               // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(double TimeSeconds)> OnCountdownTimeChanged;                            // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCountdownTimeSet;                                // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCountdownTimeEnded;                              // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void SetInitialCountdownTime(double InTime);

	double GetTimeRemainingSeconds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarCountdownTimerWidget">();
	}
	static class UDelMarCountdownTimerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarCountdownTimerWidget>();
	}
};
static_assert(alignof(UDelMarCountdownTimerWidget) == 0x000008, "Wrong alignment on UDelMarCountdownTimerWidget");
static_assert(sizeof(UDelMarCountdownTimerWidget) == 0x0003A0, "Wrong size on UDelMarCountdownTimerWidget");
static_assert(offsetof(UDelMarCountdownTimerWidget, TextBlock_RemainingTime) == 0x000360, "Member 'UDelMarCountdownTimerWidget::TextBlock_RemainingTime' has a wrong offset!");
static_assert(offsetof(UDelMarCountdownTimerWidget, InitialCoundownTime) == 0x000368, "Member 'UDelMarCountdownTimerWidget::InitialCoundownTime' has a wrong offset!");
static_assert(offsetof(UDelMarCountdownTimerWidget, OnCountdownTimeChanged) == 0x000370, "Member 'UDelMarCountdownTimerWidget::OnCountdownTimeChanged' has a wrong offset!");
static_assert(offsetof(UDelMarCountdownTimerWidget, OnCountdownTimeSet) == 0x000380, "Member 'UDelMarCountdownTimerWidget::OnCountdownTimeSet' has a wrong offset!");
static_assert(offsetof(UDelMarCountdownTimerWidget, OnCountdownTimeEnded) == 0x000390, "Member 'UDelMarCountdownTimerWidget::OnCountdownTimeEnded' has a wrong offset!");

// Class DelMarUI.DelMarDriverCameraWidget
// 0x0128 (0x0488 - 0x0360)
class UDelMarDriverCameraWidget final : public UDelMarUserWidget
{
public:
	class UWidgetAnimation*                       DefaultIntercomAnimation;                          // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ReactiveDriverCamera_Persistent;                   // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactiveWidgetOutroDelay;                          // 0x0370(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactiveWidgetMaxActiveTime;                       // 0x0374(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FName>        MainChannelAnimationTagTable;                      // 0x0378(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<int32, struct FDelMarReactiveWidgetAnimation> ReactiveAnimationTable;                            // 0x03C8(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UWidgetAnimation*>    AnimationNameTable;                                // 0x0418(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UUMGSequencePlayer*                     IntercomSequencePlayer;                            // 0x0468(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUMGSequencePlayer*                     ReactiveSequencePlayer;                            // 0x0470(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_478[0x10];                                     // 0x0478(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class FName> GetAnimationNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDriverCameraWidget">();
	}
	static class UDelMarDriverCameraWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDriverCameraWidget>();
	}
};
static_assert(alignof(UDelMarDriverCameraWidget) == 0x000008, "Wrong alignment on UDelMarDriverCameraWidget");
static_assert(sizeof(UDelMarDriverCameraWidget) == 0x000488, "Wrong size on UDelMarDriverCameraWidget");
static_assert(offsetof(UDelMarDriverCameraWidget, DefaultIntercomAnimation) == 0x000360, "Member 'UDelMarDriverCameraWidget::DefaultIntercomAnimation' has a wrong offset!");
static_assert(offsetof(UDelMarDriverCameraWidget, ReactiveDriverCamera_Persistent) == 0x000368, "Member 'UDelMarDriverCameraWidget::ReactiveDriverCamera_Persistent' has a wrong offset!");
static_assert(offsetof(UDelMarDriverCameraWidget, ReactiveWidgetOutroDelay) == 0x000370, "Member 'UDelMarDriverCameraWidget::ReactiveWidgetOutroDelay' has a wrong offset!");
static_assert(offsetof(UDelMarDriverCameraWidget, ReactiveWidgetMaxActiveTime) == 0x000374, "Member 'UDelMarDriverCameraWidget::ReactiveWidgetMaxActiveTime' has a wrong offset!");
static_assert(offsetof(UDelMarDriverCameraWidget, MainChannelAnimationTagTable) == 0x000378, "Member 'UDelMarDriverCameraWidget::MainChannelAnimationTagTable' has a wrong offset!");
static_assert(offsetof(UDelMarDriverCameraWidget, ReactiveAnimationTable) == 0x0003C8, "Member 'UDelMarDriverCameraWidget::ReactiveAnimationTable' has a wrong offset!");
static_assert(offsetof(UDelMarDriverCameraWidget, AnimationNameTable) == 0x000418, "Member 'UDelMarDriverCameraWidget::AnimationNameTable' has a wrong offset!");
static_assert(offsetof(UDelMarDriverCameraWidget, IntercomSequencePlayer) == 0x000468, "Member 'UDelMarDriverCameraWidget::IntercomSequencePlayer' has a wrong offset!");
static_assert(offsetof(UDelMarDriverCameraWidget, ReactiveSequencePlayer) == 0x000470, "Member 'UDelMarDriverCameraWidget::ReactiveSequencePlayer' has a wrong offset!");

// Class DelMarUI.DelMarInputActionRichTextBlockDecorator
// 0x0108 (0x0130 - 0x0028)
class UDelMarInputActionRichTextBlockDecorator final : public URichTextBlockDecorator
{
public:
	class UInputAction*                           InputAction;                                       // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0030(0x0018)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Icon;                                              // 0x0050(0x00C0)(Transient, NativeAccessSpecifierPublic)
	class URichTextBlock*                         OwnerWidget;                                       // 0x0110(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ULocalPlayer>            OwningLocalPlayer;                                 // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UCommonInputSubsystem>   CommonInputSubsystem;                              // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UEnhancedInputLocalPlayerSubsystem> EnhancedInputSubsystem;                            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarInputActionRichTextBlockDecorator">();
	}
	static class UDelMarInputActionRichTextBlockDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarInputActionRichTextBlockDecorator>();
	}
};
static_assert(alignof(UDelMarInputActionRichTextBlockDecorator) == 0x000010, "Wrong alignment on UDelMarInputActionRichTextBlockDecorator");
static_assert(sizeof(UDelMarInputActionRichTextBlockDecorator) == 0x000130, "Wrong size on UDelMarInputActionRichTextBlockDecorator");
static_assert(offsetof(UDelMarInputActionRichTextBlockDecorator, InputAction) == 0x000028, "Member 'UDelMarInputActionRichTextBlockDecorator::InputAction' has a wrong offset!");
static_assert(offsetof(UDelMarInputActionRichTextBlockDecorator, Key) == 0x000030, "Member 'UDelMarInputActionRichTextBlockDecorator::Key' has a wrong offset!");
static_assert(offsetof(UDelMarInputActionRichTextBlockDecorator, Icon) == 0x000050, "Member 'UDelMarInputActionRichTextBlockDecorator::Icon' has a wrong offset!");
static_assert(offsetof(UDelMarInputActionRichTextBlockDecorator, OwnerWidget) == 0x000110, "Member 'UDelMarInputActionRichTextBlockDecorator::OwnerWidget' has a wrong offset!");
static_assert(offsetof(UDelMarInputActionRichTextBlockDecorator, OwningLocalPlayer) == 0x000118, "Member 'UDelMarInputActionRichTextBlockDecorator::OwningLocalPlayer' has a wrong offset!");
static_assert(offsetof(UDelMarInputActionRichTextBlockDecorator, CommonInputSubsystem) == 0x000120, "Member 'UDelMarInputActionRichTextBlockDecorator::CommonInputSubsystem' has a wrong offset!");
static_assert(offsetof(UDelMarInputActionRichTextBlockDecorator, EnhancedInputSubsystem) == 0x000128, "Member 'UDelMarInputActionRichTextBlockDecorator::EnhancedInputSubsystem' has a wrong offset!");

// Class DelMarUI.DelMarListViewModel
// 0x0010 (0x0078 - 0x0068)
class UDelMarListViewModel : public UMVVMViewModelBase
{
public:
	TArray<class UMVVMViewModelBase*>             Elements;                                          // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	class UMVVMViewModelBase* GetElementAt(int32 InIndex) const;
	const TArray<class UMVVMViewModelBase*> GetElements() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarListViewModel">();
	}
	static class UDelMarListViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarListViewModel>();
	}
};
static_assert(alignof(UDelMarListViewModel) == 0x000008, "Wrong alignment on UDelMarListViewModel");
static_assert(sizeof(UDelMarListViewModel) == 0x000078, "Wrong size on UDelMarListViewModel");
static_assert(offsetof(UDelMarListViewModel, Elements) == 0x000068, "Member 'UDelMarListViewModel::Elements' has a wrong offset!");

// Class DelMarUI.DelMarPlayerIndicatorsContainer
// 0x0158 (0x04B8 - 0x0360)
class UDelMarPlayerIndicatorsContainer final : public UDelMarUserWidget
{
public:
	class UCanvasPanel*                           IndicatorCanvas;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UDelMarPlayerIndicatorWidget> IndicatorWidgetClass;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                IndicatorOffset;                                   // 0x0370(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RearVerticalHintThreshold;                         // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RearIndicatorMaxDistance;                          // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RearIndicatorMinDistance;                          // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RearIndicatorRangeWidth;                           // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RearIndicatorRangeDegree;                          // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForwardIndicatorMaxDistance;                       // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAnchors                               IndicatorAnchors;                                  // 0x03A0(0x0020)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              IndicatorAlignment;                                // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              RearIndicatorSize;                                 // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            RearDistanceScaleCurve;                            // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            RearDistanceOpacityCurve;                          // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            ForwardDistanceScaleCurve;                         // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            ForwardDistanceOpacityCurve;                       // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxRearIndicators;                                 // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxForwardIndicators;                              // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UDelMarVehicleManager>   VehicleManager;                                    // 0x0408(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADelMarVehicle>          ViewingVehicle;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerState>        ViewingPlayerState;                                // 0x0418(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDelMarPlayerIndicatorData>     IndicatorsData;                                    // 0x0420(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class AFortPlayerState*, class UDelMarPlayerIndicatorWidget*> IndicatorWidgets;                                  // 0x0430(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UDelMarPlayerIndicatorWidget*>   IndicatorPool;                                     // 0x0480(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UDelMarPositionalTrackerComponent> PositionalTrackerComponent;                        // 0x0490(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x20];                                     // 0x0498(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleIconOnlySettingChanged(bool bUseIconOnly);
	void HandleRacePlayersChanged(const TMap<int32, class UDelMarPlayerViewModel*>& RacePlayers);
	void HandleViewTargetChanged(class AFortPlayerController* InController, class AActor* OldViewTarget, class AActor* NewViewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPlayerIndicatorsContainer">();
	}
	static class UDelMarPlayerIndicatorsContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPlayerIndicatorsContainer>();
	}
};
static_assert(alignof(UDelMarPlayerIndicatorsContainer) == 0x000008, "Wrong alignment on UDelMarPlayerIndicatorsContainer");
static_assert(sizeof(UDelMarPlayerIndicatorsContainer) == 0x0004B8, "Wrong size on UDelMarPlayerIndicatorsContainer");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, IndicatorCanvas) == 0x000360, "Member 'UDelMarPlayerIndicatorsContainer::IndicatorCanvas' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, IndicatorWidgetClass) == 0x000368, "Member 'UDelMarPlayerIndicatorsContainer::IndicatorWidgetClass' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, IndicatorOffset) == 0x000370, "Member 'UDelMarPlayerIndicatorsContainer::IndicatorOffset' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, RearVerticalHintThreshold) == 0x000388, "Member 'UDelMarPlayerIndicatorsContainer::RearVerticalHintThreshold' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, RearIndicatorMaxDistance) == 0x00038C, "Member 'UDelMarPlayerIndicatorsContainer::RearIndicatorMaxDistance' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, RearIndicatorMinDistance) == 0x000390, "Member 'UDelMarPlayerIndicatorsContainer::RearIndicatorMinDistance' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, RearIndicatorRangeWidth) == 0x000394, "Member 'UDelMarPlayerIndicatorsContainer::RearIndicatorRangeWidth' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, RearIndicatorRangeDegree) == 0x000398, "Member 'UDelMarPlayerIndicatorsContainer::RearIndicatorRangeDegree' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, ForwardIndicatorMaxDistance) == 0x00039C, "Member 'UDelMarPlayerIndicatorsContainer::ForwardIndicatorMaxDistance' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, IndicatorAnchors) == 0x0003A0, "Member 'UDelMarPlayerIndicatorsContainer::IndicatorAnchors' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, IndicatorAlignment) == 0x0003C0, "Member 'UDelMarPlayerIndicatorsContainer::IndicatorAlignment' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, RearIndicatorSize) == 0x0003D0, "Member 'UDelMarPlayerIndicatorsContainer::RearIndicatorSize' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, RearDistanceScaleCurve) == 0x0003E0, "Member 'UDelMarPlayerIndicatorsContainer::RearDistanceScaleCurve' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, RearDistanceOpacityCurve) == 0x0003E8, "Member 'UDelMarPlayerIndicatorsContainer::RearDistanceOpacityCurve' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, ForwardDistanceScaleCurve) == 0x0003F0, "Member 'UDelMarPlayerIndicatorsContainer::ForwardDistanceScaleCurve' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, ForwardDistanceOpacityCurve) == 0x0003F8, "Member 'UDelMarPlayerIndicatorsContainer::ForwardDistanceOpacityCurve' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, MaxRearIndicators) == 0x000400, "Member 'UDelMarPlayerIndicatorsContainer::MaxRearIndicators' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, MaxForwardIndicators) == 0x000404, "Member 'UDelMarPlayerIndicatorsContainer::MaxForwardIndicators' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, VehicleManager) == 0x000408, "Member 'UDelMarPlayerIndicatorsContainer::VehicleManager' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, ViewingVehicle) == 0x000410, "Member 'UDelMarPlayerIndicatorsContainer::ViewingVehicle' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, ViewingPlayerState) == 0x000418, "Member 'UDelMarPlayerIndicatorsContainer::ViewingPlayerState' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, IndicatorsData) == 0x000420, "Member 'UDelMarPlayerIndicatorsContainer::IndicatorsData' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, IndicatorWidgets) == 0x000430, "Member 'UDelMarPlayerIndicatorsContainer::IndicatorWidgets' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, IndicatorPool) == 0x000480, "Member 'UDelMarPlayerIndicatorsContainer::IndicatorPool' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorsContainer, PositionalTrackerComponent) == 0x000490, "Member 'UDelMarPlayerIndicatorsContainer::PositionalTrackerComponent' has a wrong offset!");

// Class DelMarUI.DelMarPlayerIndicatorWidget
// 0x0058 (0x0318 - 0x02C0)
class UDelMarPlayerIndicatorWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USizeBox*                               AvatarSizeBox;                                     // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortLazyImage*                         AvatarLazyImage;                                   // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USizeBox*                               PlayerNameSizeBox;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 UpArrowImage;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 DownArrowImage;                                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               BackgroundOverlay;                                 // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x4];                                      // 0x02F8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BehindAvatarSizeBoxWidth;                          // 0x02FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AheadAvatarSizeBoxWidth;                           // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBehindAvatarImageIsExpanded;                      // 0x0304(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAheadAvatarImageIsExpanded;                       // 0x0305(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_306[0x2];                                      // 0x0306(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BehindPlayerNameSizeBoxMaxWidth;                   // 0x0308(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AheadPlayerNameSizeBoxMaxWidth;                    // 0x030C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BehindBackgroundOverlaySlotPadding;                // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AheadBackgroundOverlaySlotPadding;                 // 0x0314(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BP_HideIndicator();
	void BP_SetViewModel(class UDelMarPlayerViewModel* ViewModel);
	void BP_UpdateIndicator(float Scale, float Opacity, bool bRearIndicator, EDelMarRearAlertVerticalHint VerticalHint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPlayerIndicatorWidget">();
	}
	static class UDelMarPlayerIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPlayerIndicatorWidget>();
	}
};
static_assert(alignof(UDelMarPlayerIndicatorWidget) == 0x000008, "Wrong alignment on UDelMarPlayerIndicatorWidget");
static_assert(sizeof(UDelMarPlayerIndicatorWidget) == 0x000318, "Wrong size on UDelMarPlayerIndicatorWidget");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, AvatarSizeBox) == 0x0002C8, "Member 'UDelMarPlayerIndicatorWidget::AvatarSizeBox' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, AvatarLazyImage) == 0x0002D0, "Member 'UDelMarPlayerIndicatorWidget::AvatarLazyImage' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, PlayerNameSizeBox) == 0x0002D8, "Member 'UDelMarPlayerIndicatorWidget::PlayerNameSizeBox' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, UpArrowImage) == 0x0002E0, "Member 'UDelMarPlayerIndicatorWidget::UpArrowImage' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, DownArrowImage) == 0x0002E8, "Member 'UDelMarPlayerIndicatorWidget::DownArrowImage' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, BackgroundOverlay) == 0x0002F0, "Member 'UDelMarPlayerIndicatorWidget::BackgroundOverlay' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, BehindAvatarSizeBoxWidth) == 0x0002FC, "Member 'UDelMarPlayerIndicatorWidget::BehindAvatarSizeBoxWidth' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, AheadAvatarSizeBoxWidth) == 0x000300, "Member 'UDelMarPlayerIndicatorWidget::AheadAvatarSizeBoxWidth' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, bBehindAvatarImageIsExpanded) == 0x000304, "Member 'UDelMarPlayerIndicatorWidget::bBehindAvatarImageIsExpanded' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, bAheadAvatarImageIsExpanded) == 0x000305, "Member 'UDelMarPlayerIndicatorWidget::bAheadAvatarImageIsExpanded' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, BehindPlayerNameSizeBoxMaxWidth) == 0x000308, "Member 'UDelMarPlayerIndicatorWidget::BehindPlayerNameSizeBoxMaxWidth' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, AheadPlayerNameSizeBoxMaxWidth) == 0x00030C, "Member 'UDelMarPlayerIndicatorWidget::AheadPlayerNameSizeBoxMaxWidth' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, BehindBackgroundOverlaySlotPadding) == 0x000310, "Member 'UDelMarPlayerIndicatorWidget::BehindBackgroundOverlaySlotPadding' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerIndicatorWidget, AheadBackgroundOverlaySlotPadding) == 0x000314, "Member 'UDelMarPlayerIndicatorWidget::AheadBackgroundOverlaySlotPadding' has a wrong offset!");

// Class DelMarUI.DelMarExpandableHudWidget
// 0x00B0 (0x0410 - 0x0360)
class UDelMarExpandableHudWidget : public UDelMarUserWidget
{
public:
	class UImage*                                 NavigateEntriesBindingImage;                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_368[0x18];                                     // 0x0368(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDelMarUserWidget>          ExpandableHudWidgetEntryClass;                     // 0x0380(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumDesignerPreviewEntries;                         // 0x0388(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EntrySpacing;                                      // 0x038C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExpanded;                                         // 0x0390(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNavigationEnabled;                                // 0x0391(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             NavigateEntriesGamepadTexture;                     // 0x0398(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             NavigateEntriesPCTexture;                          // 0x03A0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarPlayerPreferencesComponent*      PlayerPreferences;                                 // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               EntryOverlay;                                      // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URetainerBox*                           EdgeFadeRetainerBox;                               // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               ContentSizeBox;                                    // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnExpandToggled;                                   // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bNavigationEnabled)> OnNavigationEnabledChanged;                        // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bExpandable)> OnExpandableChanged;                               // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TArray<class UDelMarUserWidget*>              DisplayedHudWidgetEntries;                         // 0x03F8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_408[0x8];                                      // 0x0408(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_HandlePlayerPreferencesAdded(class UDelMarPlayerPreferencesComponent* InPlayerPreferences);
	void HandleToggleAction();
	void HandleToggleSettingChanged(bool bUseToggle);
	void SetTargetInterpTransformY(float InTargetInterpTransformY);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarExpandableHudWidget">();
	}
	static class UDelMarExpandableHudWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarExpandableHudWidget>();
	}
};
static_assert(alignof(UDelMarExpandableHudWidget) == 0x000008, "Wrong alignment on UDelMarExpandableHudWidget");
static_assert(sizeof(UDelMarExpandableHudWidget) == 0x000410, "Wrong size on UDelMarExpandableHudWidget");
static_assert(offsetof(UDelMarExpandableHudWidget, NavigateEntriesBindingImage) == 0x000360, "Member 'UDelMarExpandableHudWidget::NavigateEntriesBindingImage' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, ExpandableHudWidgetEntryClass) == 0x000380, "Member 'UDelMarExpandableHudWidget::ExpandableHudWidgetEntryClass' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, NumDesignerPreviewEntries) == 0x000388, "Member 'UDelMarExpandableHudWidget::NumDesignerPreviewEntries' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, EntrySpacing) == 0x00038C, "Member 'UDelMarExpandableHudWidget::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, bExpanded) == 0x000390, "Member 'UDelMarExpandableHudWidget::bExpanded' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, bNavigationEnabled) == 0x000391, "Member 'UDelMarExpandableHudWidget::bNavigationEnabled' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, NavigateEntriesGamepadTexture) == 0x000398, "Member 'UDelMarExpandableHudWidget::NavigateEntriesGamepadTexture' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, NavigateEntriesPCTexture) == 0x0003A0, "Member 'UDelMarExpandableHudWidget::NavigateEntriesPCTexture' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, PlayerPreferences) == 0x0003A8, "Member 'UDelMarExpandableHudWidget::PlayerPreferences' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, EntryOverlay) == 0x0003B0, "Member 'UDelMarExpandableHudWidget::EntryOverlay' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, EdgeFadeRetainerBox) == 0x0003B8, "Member 'UDelMarExpandableHudWidget::EdgeFadeRetainerBox' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, ContentSizeBox) == 0x0003C0, "Member 'UDelMarExpandableHudWidget::ContentSizeBox' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, OnExpandToggled) == 0x0003C8, "Member 'UDelMarExpandableHudWidget::OnExpandToggled' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, OnNavigationEnabledChanged) == 0x0003D8, "Member 'UDelMarExpandableHudWidget::OnNavigationEnabledChanged' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, OnExpandableChanged) == 0x0003E8, "Member 'UDelMarExpandableHudWidget::OnExpandableChanged' has a wrong offset!");
static_assert(offsetof(UDelMarExpandableHudWidget, DisplayedHudWidgetEntries) == 0x0003F8, "Member 'UDelMarExpandableHudWidget::DisplayedHudWidgetEntries' has a wrong offset!");

// Class DelMarUI.DelMarPositionalTrackerWidget
// 0x0018 (0x0428 - 0x0410)
class UDelMarPositionalTrackerWidget final : public UDelMarExpandableHudWidget
{
public:
	int32                                         MinPlayersToStart;                                 // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDelMarPlayerViewModel*>         DisplayedPlayers;                                  // 0x0418(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void UpdatePlayerPositions(const TArray<class UDelMarPlayerViewModel*>& InPlayers);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPositionalTrackerWidget">();
	}
	static class UDelMarPositionalTrackerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPositionalTrackerWidget>();
	}
};
static_assert(alignof(UDelMarPositionalTrackerWidget) == 0x000008, "Wrong alignment on UDelMarPositionalTrackerWidget");
static_assert(sizeof(UDelMarPositionalTrackerWidget) == 0x000428, "Wrong size on UDelMarPositionalTrackerWidget");
static_assert(offsetof(UDelMarPositionalTrackerWidget, MinPlayersToStart) == 0x000410, "Member 'UDelMarPositionalTrackerWidget::MinPlayersToStart' has a wrong offset!");
static_assert(offsetof(UDelMarPositionalTrackerWidget, DisplayedPlayers) == 0x000418, "Member 'UDelMarPositionalTrackerWidget::DisplayedPlayers' has a wrong offset!");

// Class DelMarUI.DelMarScreenBase
// 0x0080 (0x0480 - 0x0400)
class UDelMarScreenBase : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x58];                                     // 0x0400(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	EWidgetTransitionerInitialStatus              InitialTransitionStatus;                           // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetTransitioner*                    WidgetTransitioner;                                // 0x0460(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActivateOnShow;                                   // 0x0468(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       NormalTransitionIn;                                // 0x0470(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       NormalTransitionOut;                               // 0x0478(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_Hide(bool bSkipAnimation);
	void BP_Show(bool bSkipAnimation);
	class UUIStateChartManager* GetUIStateChartManager();
	void HandleWidgetTransitionerStatusChanged(class UWidgetTransitioner* InTransitioner, EWidgetTransitionerStatus InStatus);
	void SetDisplayEnabled(bool bEnabled, bool bSkipAnimation);

	class UWidgetTransitioner* GetWidgetTransitioner() const;
	bool IsDisplayEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarScreenBase">();
	}
	static class UDelMarScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarScreenBase>();
	}
};
static_assert(alignof(UDelMarScreenBase) == 0x000008, "Wrong alignment on UDelMarScreenBase");
static_assert(sizeof(UDelMarScreenBase) == 0x000480, "Wrong size on UDelMarScreenBase");
static_assert(offsetof(UDelMarScreenBase, InitialTransitionStatus) == 0x000458, "Member 'UDelMarScreenBase::InitialTransitionStatus' has a wrong offset!");
static_assert(offsetof(UDelMarScreenBase, WidgetTransitioner) == 0x000460, "Member 'UDelMarScreenBase::WidgetTransitioner' has a wrong offset!");
static_assert(offsetof(UDelMarScreenBase, bActivateOnShow) == 0x000468, "Member 'UDelMarScreenBase::bActivateOnShow' has a wrong offset!");
static_assert(offsetof(UDelMarScreenBase, NormalTransitionIn) == 0x000470, "Member 'UDelMarScreenBase::NormalTransitionIn' has a wrong offset!");
static_assert(offsetof(UDelMarScreenBase, NormalTransitionOut) == 0x000478, "Member 'UDelMarScreenBase::NormalTransitionOut' has a wrong offset!");

// Class DelMarUI.DelMarPostRaceLeaderboard
// 0x0018 (0x0498 - 0x0480)
class UDelMarPostRaceLeaderboard final : public UDelMarScreenBase
{
public:
	struct FDataTableRowHandle                    FilterDataTableRow;                                // 0x0480(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_UpdateLeaderboardFilter();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPostRaceLeaderboard">();
	}
	static class UDelMarPostRaceLeaderboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPostRaceLeaderboard>();
	}
};
static_assert(alignof(UDelMarPostRaceLeaderboard) == 0x000008, "Wrong alignment on UDelMarPostRaceLeaderboard");
static_assert(sizeof(UDelMarPostRaceLeaderboard) == 0x000498, "Wrong size on UDelMarPostRaceLeaderboard");
static_assert(offsetof(UDelMarPostRaceLeaderboard, FilterDataTableRow) == 0x000480, "Member 'UDelMarPostRaceLeaderboard::FilterDataTableRow' has a wrong offset!");

// Class DelMarUI.DelMarPostRaceScreen
// 0x0080 (0x0500 - 0x0480)
class UDelMarPostRaceScreen final : public UDelMarScreenBase
{
public:
	struct FDataTableRowHandle                    TabNavLeftDataTableRow;                            // 0x0480(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    TabNavRightDataTableRow;                           // 0x0490(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ReadyUpDataTableRow;                               // 0x04A0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SpectateDataTableRow;                              // 0x04B0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ResetRunDataTableRow;                              // 0x04C0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ReturnToLobbyDataTableRow;                         // 0x04D0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UCommonButtonGroupBase*                 ButtonGroup_PostMatchNavigation;                   // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E8[0x18];                                     // 0x04E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnReadyUpChanged(bool bReady);
	void RequestCountdown();
	void ResetRun();
	void UpdateVote(EDelMarPostRaceVote NewVote);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPostRaceScreen">();
	}
	static class UDelMarPostRaceScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPostRaceScreen>();
	}
};
static_assert(alignof(UDelMarPostRaceScreen) == 0x000008, "Wrong alignment on UDelMarPostRaceScreen");
static_assert(sizeof(UDelMarPostRaceScreen) == 0x000500, "Wrong size on UDelMarPostRaceScreen");
static_assert(offsetof(UDelMarPostRaceScreen, TabNavLeftDataTableRow) == 0x000480, "Member 'UDelMarPostRaceScreen::TabNavLeftDataTableRow' has a wrong offset!");
static_assert(offsetof(UDelMarPostRaceScreen, TabNavRightDataTableRow) == 0x000490, "Member 'UDelMarPostRaceScreen::TabNavRightDataTableRow' has a wrong offset!");
static_assert(offsetof(UDelMarPostRaceScreen, ReadyUpDataTableRow) == 0x0004A0, "Member 'UDelMarPostRaceScreen::ReadyUpDataTableRow' has a wrong offset!");
static_assert(offsetof(UDelMarPostRaceScreen, SpectateDataTableRow) == 0x0004B0, "Member 'UDelMarPostRaceScreen::SpectateDataTableRow' has a wrong offset!");
static_assert(offsetof(UDelMarPostRaceScreen, ResetRunDataTableRow) == 0x0004C0, "Member 'UDelMarPostRaceScreen::ResetRunDataTableRow' has a wrong offset!");
static_assert(offsetof(UDelMarPostRaceScreen, ReturnToLobbyDataTableRow) == 0x0004D0, "Member 'UDelMarPostRaceScreen::ReturnToLobbyDataTableRow' has a wrong offset!");
static_assert(offsetof(UDelMarPostRaceScreen, ButtonGroup_PostMatchNavigation) == 0x0004E0, "Member 'UDelMarPostRaceScreen::ButtonGroup_PostMatchNavigation' has a wrong offset!");

// Class DelMarUI.DelMarPostRaceVoteWidget
// 0x0000 (0x0360 - 0x0360)
class UDelMarPostRaceVoteWidget final : public UDelMarUserWidget
{
public:
	void BP_OnPostRaceVoteChanged(EDelMarPostRaceVote Vote);
	void UpdateVote(EDelMarPostRaceVote NewVote);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPostRaceVoteWidget">();
	}
	static class UDelMarPostRaceVoteWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPostRaceVoteWidget>();
	}
};
static_assert(alignof(UDelMarPostRaceVoteWidget) == 0x000008, "Wrong alignment on UDelMarPostRaceVoteWidget");
static_assert(sizeof(UDelMarPostRaceVoteWidget) == 0x000360, "Wrong size on UDelMarPostRaceVoteWidget");

// Class DelMarUI.DelMarQuestScreenContainer
// 0x0010 (0x0370 - 0x0360)
class UDelMarQuestScreenContainer final : public UDelMarUserWidget
{
public:
	class FName                                   QuestTabID;                                        // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaMapScreenContainer*              AthenaScreenContainer;                             // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleAthenaScreenDeactivated();
	void HandleMapPanelExitButtonPressed();
	void HandleToggleQuestList();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarQuestScreenContainer">();
	}
	static class UDelMarQuestScreenContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarQuestScreenContainer>();
	}
};
static_assert(alignof(UDelMarQuestScreenContainer) == 0x000008, "Wrong alignment on UDelMarQuestScreenContainer");
static_assert(sizeof(UDelMarQuestScreenContainer) == 0x000370, "Wrong size on UDelMarQuestScreenContainer");
static_assert(offsetof(UDelMarQuestScreenContainer, QuestTabID) == 0x000360, "Member 'UDelMarQuestScreenContainer::QuestTabID' has a wrong offset!");
static_assert(offsetof(UDelMarQuestScreenContainer, AthenaScreenContainer) == 0x000368, "Member 'UDelMarQuestScreenContainer::AthenaScreenContainer' has a wrong offset!");

// Class DelMarUI.DelMarRichTextInputSwitcher
// 0x00C8 (0x0388 - 0x02C0)
class UDelMarRichTextInputSwitcher final : public UUserWidget
{
public:
	bool                                          bUseFormattedText;                                 // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextFormat;                                        // 0x02C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, struct FDelMarKeyPair>    Args;                                              // 0x02E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TextKBM;                                           // 0x0330(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TextGamepad;                                       // 0x0348(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TextTouch;                                         // 0x0360(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UCommonRichTextBlock*                   Widget_RichText;                                   // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x8];                                      // 0x0380(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetInputText(const class FText& InTextKBM, const class FText& InTextGamepad, const class FText& InTextTouch);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarRichTextInputSwitcher">();
	}
	static class UDelMarRichTextInputSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarRichTextInputSwitcher>();
	}
};
static_assert(alignof(UDelMarRichTextInputSwitcher) == 0x000008, "Wrong alignment on UDelMarRichTextInputSwitcher");
static_assert(sizeof(UDelMarRichTextInputSwitcher) == 0x000388, "Wrong size on UDelMarRichTextInputSwitcher");
static_assert(offsetof(UDelMarRichTextInputSwitcher, bUseFormattedText) == 0x0002C0, "Member 'UDelMarRichTextInputSwitcher::bUseFormattedText' has a wrong offset!");
static_assert(offsetof(UDelMarRichTextInputSwitcher, TextFormat) == 0x0002C8, "Member 'UDelMarRichTextInputSwitcher::TextFormat' has a wrong offset!");
static_assert(offsetof(UDelMarRichTextInputSwitcher, Args) == 0x0002E0, "Member 'UDelMarRichTextInputSwitcher::Args' has a wrong offset!");
static_assert(offsetof(UDelMarRichTextInputSwitcher, TextKBM) == 0x000330, "Member 'UDelMarRichTextInputSwitcher::TextKBM' has a wrong offset!");
static_assert(offsetof(UDelMarRichTextInputSwitcher, TextGamepad) == 0x000348, "Member 'UDelMarRichTextInputSwitcher::TextGamepad' has a wrong offset!");
static_assert(offsetof(UDelMarRichTextInputSwitcher, TextTouch) == 0x000360, "Member 'UDelMarRichTextInputSwitcher::TextTouch' has a wrong offset!");
static_assert(offsetof(UDelMarRichTextInputSwitcher, Widget_RichText) == 0x000378, "Member 'UDelMarRichTextInputSwitcher::Widget_RichText' has a wrong offset!");

// Class DelMarUI.DelMarSelectionListViewModel
// 0x0020 (0x0098 - 0x0078)
class UDelMarSelectionListViewModel final : public UDelMarListViewModel
{
public:
	int32                                         SelectedIndex;                                     // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C[0x1C];                                      // 0x007C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearSelection();
	void SelectNextElement(bool bAllowWrap);
	void SelectPreviousElement(bool bAllowWrap);
	void SetSelectedElement(class UMVVMViewModelBase* InSelectedElement);
	void SetSelectedIndex(int32 InIndex);

	int32 GetSelectedIndex() const;
	bool HasSelection() const;
	class UMVVMViewModelBase* SelectedElement() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarSelectionListViewModel">();
	}
	static class UDelMarSelectionListViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarSelectionListViewModel>();
	}
};
static_assert(alignof(UDelMarSelectionListViewModel) == 0x000008, "Wrong alignment on UDelMarSelectionListViewModel");
static_assert(sizeof(UDelMarSelectionListViewModel) == 0x000098, "Wrong size on UDelMarSelectionListViewModel");
static_assert(offsetof(UDelMarSelectionListViewModel, SelectedIndex) == 0x000078, "Member 'UDelMarSelectionListViewModel::SelectedIndex' has a wrong offset!");

// Class DelMarUI.DelMarTouchWidgetBase
// 0x0028 (0x0388 - 0x0360)
class UDelMarTouchWidgetBase : public UDelMarUserWidget
{
public:
	TArray<struct FDelMarTouchInputDefinition>    InputActionsData;                                  // 0x0360(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bTrackInputPastBounds;                             // 0x0370(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackInputFromEnter;                              // 0x0371(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInjectingInput;                                 // 0x0372(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDelMarTouchInputTrackingState                CurrentInputTrackingState;                         // 0x0373(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECommonInputMode                              RequiredInputMode;                                 // 0x0374(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_375[0x13];                                     // 0x0375(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 GetPixelsPerInch();

	void CancelInputTracking();
	void OnActiveInputModeChanged(ECommonInputMode NewInputMode);
	void OnInputInjectionEnded(const struct FPointerEvent& InGestureEvent, EDelMarInputInjectionState InInjectedState);
	void OnInputInjectionStarted(const struct FPointerEvent& InGestureEvent, EDelMarInputInjectionState InInjectedState);
	void OnTrackedInputEnded(const struct FPointerEvent& InGestureEvent, bool bCancelled);
	void OnTrackedInputStarted(const struct FPointerEvent& InGestureEvent);
	void OnTrackedInputUpdated(const struct FPointerEvent& InGestureEvent);

	struct FGeometry GetHitboxGeometry() const;
	bool IsGestureInsideHitbox(const struct FPointerEvent& InGestureEvent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTouchWidgetBase">();
	}
	static class UDelMarTouchWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTouchWidgetBase>();
	}
};
static_assert(alignof(UDelMarTouchWidgetBase) == 0x000008, "Wrong alignment on UDelMarTouchWidgetBase");
static_assert(sizeof(UDelMarTouchWidgetBase) == 0x000388, "Wrong size on UDelMarTouchWidgetBase");
static_assert(offsetof(UDelMarTouchWidgetBase, InputActionsData) == 0x000360, "Member 'UDelMarTouchWidgetBase::InputActionsData' has a wrong offset!");
static_assert(offsetof(UDelMarTouchWidgetBase, bTrackInputPastBounds) == 0x000370, "Member 'UDelMarTouchWidgetBase::bTrackInputPastBounds' has a wrong offset!");
static_assert(offsetof(UDelMarTouchWidgetBase, bTrackInputFromEnter) == 0x000371, "Member 'UDelMarTouchWidgetBase::bTrackInputFromEnter' has a wrong offset!");
static_assert(offsetof(UDelMarTouchWidgetBase, bIsInjectingInput) == 0x000372, "Member 'UDelMarTouchWidgetBase::bIsInjectingInput' has a wrong offset!");
static_assert(offsetof(UDelMarTouchWidgetBase, CurrentInputTrackingState) == 0x000373, "Member 'UDelMarTouchWidgetBase::CurrentInputTrackingState' has a wrong offset!");
static_assert(offsetof(UDelMarTouchWidgetBase, RequiredInputMode) == 0x000374, "Member 'UDelMarTouchWidgetBase::RequiredInputMode' has a wrong offset!");

// Class DelMarUI.DelMarTouchActionButton
// 0x0078 (0x0400 - 0x0388)
class UDelMarTouchActionButton final : public UDelMarTouchWidgetBase
{
public:
	EDelMarTouchActionButtonState                 State;                                             // 0x0388(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDelMarTouchActionButtonState, struct FDelMarTouchActionButtonStateData> ButtonStateData;                                   // 0x0390(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bHighlightActive;                                  // 0x03E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UDelMarTouchActionButton* Button, bool bHighlightActive)> OnHighlightChanged;                                // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsUpdatingState;                                  // 0x03F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanSetState(EDelMarTouchActionButtonState NewState);
	void SetBackgroundBrush(const struct FSlateBrush& Brush);
	bool SetButtonState(EDelMarTouchActionButtonState NewState);
	void SetHighlightActive(bool bValue);
	void SetIconBrush(const struct FSlateBrush& Brush);

	EDelMarTouchActionButtonState GetState() const;
	EDelMarTouchActionButtonState GetStateOnStopInputTracking(bool bInputCancelled) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTouchActionButton">();
	}
	static class UDelMarTouchActionButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTouchActionButton>();
	}
};
static_assert(alignof(UDelMarTouchActionButton) == 0x000008, "Wrong alignment on UDelMarTouchActionButton");
static_assert(sizeof(UDelMarTouchActionButton) == 0x000400, "Wrong size on UDelMarTouchActionButton");
static_assert(offsetof(UDelMarTouchActionButton, State) == 0x000388, "Member 'UDelMarTouchActionButton::State' has a wrong offset!");
static_assert(offsetof(UDelMarTouchActionButton, ButtonStateData) == 0x000390, "Member 'UDelMarTouchActionButton::ButtonStateData' has a wrong offset!");
static_assert(offsetof(UDelMarTouchActionButton, bHighlightActive) == 0x0003E0, "Member 'UDelMarTouchActionButton::bHighlightActive' has a wrong offset!");
static_assert(offsetof(UDelMarTouchActionButton, OnHighlightChanged) == 0x0003E8, "Member 'UDelMarTouchActionButton::OnHighlightChanged' has a wrong offset!");
static_assert(offsetof(UDelMarTouchActionButton, bIsUpdatingState) == 0x0003F8, "Member 'UDelMarTouchActionButton::bIsUpdatingState' has a wrong offset!");

// Class DelMarUI.DelMarTouchRegion
// 0x0010 (0x0398 - 0x0388)
class UDelMarTouchRegion final : public UDelMarTouchWidgetBase
{
public:
	TArray<class UDelMarTouchActionButton*>       TouchActionButtons;                                // 0x0388(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	class UDelMarTouchActionButton* FindButtonByInputAction(class UInputAction* InputAction);
	void SetHighlightForInputAction(class UInputAction* InputAction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTouchRegion">();
	}
	static class UDelMarTouchRegion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTouchRegion>();
	}
};
static_assert(alignof(UDelMarTouchRegion) == 0x000008, "Wrong alignment on UDelMarTouchRegion");
static_assert(sizeof(UDelMarTouchRegion) == 0x000398, "Wrong size on UDelMarTouchRegion");
static_assert(offsetof(UDelMarTouchRegion, TouchActionButtons) == 0x000388, "Member 'UDelMarTouchRegion::TouchActionButtons' has a wrong offset!");

// Class DelMarUI.DelMarUICheatManager
// 0x0048 (0x0070 - 0x0028)
class UDelMarUICheatManager final : public UChildCheatManager
{
public:
	class UDynamicUIScene*                        DriverCameraHiddenScene;                           // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        PlayerIndicatorHiddenScene;                        // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        RubberbandingWidgetVisibleScene;                   // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        StaticVehicleMeterHiddenScene;                     // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        VehicleDebugVisibleScene;                          // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        CheckpointDebugWidgetScene;                        // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        MapNameDebugWidgetScene;                           // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        GameplayTrackList;                                 // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAttachedWidgetEnabled;                            // 0x0068(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DelMarAttachedWidgetSetEnabled(bool bEnabled);
	void DelMarCheckpointDebugWidgetSetVisible(bool bVisible);
	void DelMarCloseTrackList();
	void DelMarDismissDialog();
	void DelMarDriverCameraSetHidden(bool bHidden);
	void DelMarDriverCameraSetReactiveType(int32 Type);
	void DelMarMapNameDebugWidgetSetVisible(bool bVisible);
	void DelMarOpenTrackList();
	void DelMarPlayerIndicatorsVisible(bool bVisible);
	void DelMarRequestDialogByTag(const struct FGameplayTag& tag);
	void DelMarRubberbandingWidgetSetVisible(bool bVisible);
	void DelMarSetHint(const class FText& HintText, float RemoveAfterDelay);
	void DelMarTouchHUD(const class FString& TouchHUDType);
	void DelMarUISetVisible(bool bVisible);
	void DelMarUseToggleForExpandableHudWidget(bool bUseToggle);
	void DelMarVehicleDebugWidgetSetVisible(bool bVisible);
	void OnAddedToCheatManagerNative();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarUICheatManager">();
	}
	static class UDelMarUICheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarUICheatManager>();
	}
};
static_assert(alignof(UDelMarUICheatManager) == 0x000008, "Wrong alignment on UDelMarUICheatManager");
static_assert(sizeof(UDelMarUICheatManager) == 0x000070, "Wrong size on UDelMarUICheatManager");
static_assert(offsetof(UDelMarUICheatManager, DriverCameraHiddenScene) == 0x000028, "Member 'UDelMarUICheatManager::DriverCameraHiddenScene' has a wrong offset!");
static_assert(offsetof(UDelMarUICheatManager, PlayerIndicatorHiddenScene) == 0x000030, "Member 'UDelMarUICheatManager::PlayerIndicatorHiddenScene' has a wrong offset!");
static_assert(offsetof(UDelMarUICheatManager, RubberbandingWidgetVisibleScene) == 0x000038, "Member 'UDelMarUICheatManager::RubberbandingWidgetVisibleScene' has a wrong offset!");
static_assert(offsetof(UDelMarUICheatManager, StaticVehicleMeterHiddenScene) == 0x000040, "Member 'UDelMarUICheatManager::StaticVehicleMeterHiddenScene' has a wrong offset!");
static_assert(offsetof(UDelMarUICheatManager, VehicleDebugVisibleScene) == 0x000048, "Member 'UDelMarUICheatManager::VehicleDebugVisibleScene' has a wrong offset!");
static_assert(offsetof(UDelMarUICheatManager, CheckpointDebugWidgetScene) == 0x000050, "Member 'UDelMarUICheatManager::CheckpointDebugWidgetScene' has a wrong offset!");
static_assert(offsetof(UDelMarUICheatManager, MapNameDebugWidgetScene) == 0x000058, "Member 'UDelMarUICheatManager::MapNameDebugWidgetScene' has a wrong offset!");
static_assert(offsetof(UDelMarUICheatManager, GameplayTrackList) == 0x000060, "Member 'UDelMarUICheatManager::GameplayTrackList' has a wrong offset!");
static_assert(offsetof(UDelMarUICheatManager, bAttachedWidgetEnabled) == 0x000068, "Member 'UDelMarUICheatManager::bAttachedWidgetEnabled' has a wrong offset!");

// Class DelMarUI.FortGameSettingRegistryExtension_DelMar
// 0x0000 (0x0028 - 0x0028)
class UFortGameSettingRegistryExtension_DelMar final : public UFortGameSettingRegistryExtension
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameSettingRegistryExtension_DelMar">();
	}
	static class UFortGameSettingRegistryExtension_DelMar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameSettingRegistryExtension_DelMar>();
	}
};
static_assert(alignof(UFortGameSettingRegistryExtension_DelMar) == 0x000008, "Wrong alignment on UFortGameSettingRegistryExtension_DelMar");
static_assert(sizeof(UFortGameSettingRegistryExtension_DelMar) == 0x000028, "Wrong size on UFortGameSettingRegistryExtension_DelMar");

// Class DelMarUI.UIAnimationController
// 0x0010 (0x0038 - 0x0028)
class UUIAnimationController : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FastForward();
	float GetDuration();
	void JumpToBeginning();
	void JumpToEnd();
	void PlayBackward();
	void PlayForward();
	void Rewind();
	void Stop();
	void SwitchPlayDirection();

	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIAnimationController">();
	}
	static class UUIAnimationController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIAnimationController>();
	}
};
static_assert(alignof(UUIAnimationController) == 0x000008, "Wrong alignment on UUIAnimationController");
static_assert(sizeof(UUIAnimationController) == 0x000038, "Wrong size on UUIAnimationController");

// Class DelMarUI.UITimelineAnimationController
// 0x0020 (0x0058 - 0x0038)
class UUITimelineAnimationController final : public UUIAnimationController
{
public:
	class UUserWidget*                            WidgetTarget;                                      // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Animation;                                         // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUMGSequencePlayer*                     ActivePlayer;                                      // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UUITimelineAnimationController* CreateInstance(class UUserWidget* WidgetTarget_0, class UWidgetAnimation* Animation_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UITimelineAnimationController">();
	}
	static class UUITimelineAnimationController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUITimelineAnimationController>();
	}
};
static_assert(alignof(UUITimelineAnimationController) == 0x000008, "Wrong alignment on UUITimelineAnimationController");
static_assert(sizeof(UUITimelineAnimationController) == 0x000058, "Wrong size on UUITimelineAnimationController");
static_assert(offsetof(UUITimelineAnimationController, WidgetTarget) == 0x000038, "Member 'UUITimelineAnimationController::WidgetTarget' has a wrong offset!");
static_assert(offsetof(UUITimelineAnimationController, Animation) == 0x000040, "Member 'UUITimelineAnimationController::Animation' has a wrong offset!");
static_assert(offsetof(UUITimelineAnimationController, ActivePlayer) == 0x000048, "Member 'UUITimelineAnimationController::ActivePlayer' has a wrong offset!");

// Class DelMarUI.UIAnimationControllerEntry
// 0x0010 (0x0038 - 0x0028)
class UUIAnimationControllerEntry final : public UObject
{
public:
	class UUIAnimationController*                 AnimationController;                               // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInverted;                                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIAnimationControllerEntry">();
	}
	static class UUIAnimationControllerEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIAnimationControllerEntry>();
	}
};
static_assert(alignof(UUIAnimationControllerEntry) == 0x000008, "Wrong alignment on UUIAnimationControllerEntry");
static_assert(sizeof(UUIAnimationControllerEntry) == 0x000038, "Wrong size on UUIAnimationControllerEntry");
static_assert(offsetof(UUIAnimationControllerEntry, AnimationController) == 0x000028, "Member 'UUIAnimationControllerEntry::AnimationController' has a wrong offset!");
static_assert(offsetof(UUIAnimationControllerEntry, bIsInverted) == 0x000030, "Member 'UUIAnimationControllerEntry::bIsInverted' has a wrong offset!");

// Class DelMarUI.WidgetTransitioner
// 0x00E0 (0x0108 - 0x0028)
class UWidgetTransitioner final : public UObject
{
public:
	TMulticastInlineDelegate<void(class UWidgetTransitioner* Transitioner, EWidgetTransitionerStatus Status)> OnTransitionerStatusChanged;                       // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidget*                                TargetWidget;                                      // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              HiddenVisibility;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              ShownVisibility;                                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWidgetTransitionerStatus                     TransitionerStatus;                                // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIAnimationControllerEntry*            NormalTransitionIn;                                // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUIAnimationControllerEntry*            NormalTransitionOut;                               // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UUIAnimationControllerEntry*> HintedTransitionsIn;                               // 0x0058(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UUIAnimationControllerEntry*> HintedTransitionsOut;                              // 0x00A8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	class UUIAnimationControllerEntry*            ActiveEntry;                                       // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysReverseInterruptedAnimations;               // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UWidgetTransitioner* CreateInstance(class UWidget* TargetWidget_0, EWidgetTransitionerInitialStatus InitialStatus, ESlateVisibility HiddenVisibility_0, ESlateVisibility ShownVisibility_0, bool AlwaysReverseInterruptedAnimations);

	void AddHintedTransitionIn(const struct FGameplayTag& InAnimationHint, class UUIAnimationController* InAnimationIn, const bool bInvert);
	void AddHintedTransitionOut(const struct FGameplayTag& InAnimationHint, class UUIAnimationController* InAnimationOut, const bool bInvert);
	void AddHintedTransitionPair(const struct FGameplayTag& InAnimationHint, class UUIAnimationController* InAnimation, const bool bIsTransitionIn);
	void BP_Hide(const bool bSkipAnimation, const struct FGameplayTagContainer& AnimationHints);
	class UWidgetTransitioner* BP_Initialize(class UWidget* TargetWidget_0, EWidgetTransitionerInitialStatus InitialStatus, ESlateVisibility HiddenVisibility_0, ESlateVisibility ShownVisibility_0, bool AlwaysReverseInterruptedAnimations);
	void BP_Show(const bool bSkipAnimation, const struct FGameplayTagContainer& AnimationHints);
	void SetNormalTransitionIn(class UUIAnimationController* InAnimationIn, const bool bInvert);
	void SetNormalTransitionOut(class UUIAnimationController* InAnimationOut, const bool bInvert);
	void SetNormalTransitionPair(class UUIAnimationController* InAnimation, const bool bIsTransitionIn);

	EWidgetTransitionerStatus GetTransitionerStatus() const;
	bool IsHidden() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetTransitioner">();
	}
	static class UWidgetTransitioner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetTransitioner>();
	}
};
static_assert(alignof(UWidgetTransitioner) == 0x000008, "Wrong alignment on UWidgetTransitioner");
static_assert(sizeof(UWidgetTransitioner) == 0x000108, "Wrong size on UWidgetTransitioner");
static_assert(offsetof(UWidgetTransitioner, OnTransitionerStatusChanged) == 0x000028, "Member 'UWidgetTransitioner::OnTransitionerStatusChanged' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, TargetWidget) == 0x000038, "Member 'UWidgetTransitioner::TargetWidget' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, HiddenVisibility) == 0x000040, "Member 'UWidgetTransitioner::HiddenVisibility' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, ShownVisibility) == 0x000041, "Member 'UWidgetTransitioner::ShownVisibility' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, TransitionerStatus) == 0x000042, "Member 'UWidgetTransitioner::TransitionerStatus' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, NormalTransitionIn) == 0x000048, "Member 'UWidgetTransitioner::NormalTransitionIn' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, NormalTransitionOut) == 0x000050, "Member 'UWidgetTransitioner::NormalTransitionOut' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, HintedTransitionsIn) == 0x000058, "Member 'UWidgetTransitioner::HintedTransitionsIn' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, HintedTransitionsOut) == 0x0000A8, "Member 'UWidgetTransitioner::HintedTransitionsOut' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, ActiveEntry) == 0x0000F8, "Member 'UWidgetTransitioner::ActiveEntry' has a wrong offset!");
static_assert(offsetof(UWidgetTransitioner, bAlwaysReverseInterruptedAnimations) == 0x000100, "Member 'UWidgetTransitioner::bAlwaysReverseInterruptedAnimations' has a wrong offset!");

// Class DelMarUI.DelMarActionWidget
// 0x02E8 (0x0460 - 0x0178)
class UDelMarActionWidget final : public UWidget
{
public:
	TMulticastInlineDelegate<void(bool bUsingGamepad)> OnInputMethodChanged;                              // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ProgressMaterialBrush;                             // 0x0190(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ProgressMaterialParam;                             // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0xC];                                      // 0x0254(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            IconRimBrush;                                      // 0x0260(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            InputActions;                                      // 0x0320(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UInputAction*                           EnhancedInputAction;                               // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ProgressDynamicMaterial;                           // 0x0340(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_348[0x118];                                    // 0x0348(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnhancedInputAction(class UInputAction* InInputAction);
	void SetIconRimBrush(const struct FSlateBrush& InIconRimBrush);
	void SetInputAction(const struct FDataTableRowHandle& InputActionRow);
	void SetInputActions(const TArray<struct FDataTableRowHandle>& NewInputActions);

	class FText GetDisplayText() const;
	struct FSlateBrush GetIcon() const;
	bool IsHeldAction() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarActionWidget">();
	}
	static class UDelMarActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarActionWidget>();
	}
};
static_assert(alignof(UDelMarActionWidget) == 0x000010, "Wrong alignment on UDelMarActionWidget");
static_assert(sizeof(UDelMarActionWidget) == 0x000460, "Wrong size on UDelMarActionWidget");
static_assert(offsetof(UDelMarActionWidget, OnInputMethodChanged) == 0x000178, "Member 'UDelMarActionWidget::OnInputMethodChanged' has a wrong offset!");
static_assert(offsetof(UDelMarActionWidget, ProgressMaterialBrush) == 0x000190, "Member 'UDelMarActionWidget::ProgressMaterialBrush' has a wrong offset!");
static_assert(offsetof(UDelMarActionWidget, ProgressMaterialParam) == 0x000250, "Member 'UDelMarActionWidget::ProgressMaterialParam' has a wrong offset!");
static_assert(offsetof(UDelMarActionWidget, IconRimBrush) == 0x000260, "Member 'UDelMarActionWidget::IconRimBrush' has a wrong offset!");
static_assert(offsetof(UDelMarActionWidget, InputActions) == 0x000320, "Member 'UDelMarActionWidget::InputActions' has a wrong offset!");
static_assert(offsetof(UDelMarActionWidget, EnhancedInputAction) == 0x000330, "Member 'UDelMarActionWidget::EnhancedInputAction' has a wrong offset!");
static_assert(offsetof(UDelMarActionWidget, ProgressDynamicMaterial) == 0x000340, "Member 'UDelMarActionWidget::ProgressDynamicMaterial' has a wrong offset!");

// Class DelMarUI.DelMarDialogBase
// 0x0018 (0x0418 - 0x0400)
class UDelMarDialogBase final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_400[0x18];                                     // 0x0400(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DismissDialog();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDialogBase">();
	}
	static class UDelMarDialogBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDialogBase>();
	}
};
static_assert(alignof(UDelMarDialogBase) == 0x000008, "Wrong alignment on UDelMarDialogBase");
static_assert(sizeof(UDelMarDialogBase) == 0x000418, "Wrong size on UDelMarDialogBase");

// Class DelMarUI.DelMarDialogHelper
// 0x0050 (0x0078 - 0x0028)
class UDelMarDialogHelper final : public UObject
{
public:
	TMap<struct FGameplayTag, TSoftClassPtr<class UClass>> DialogMapping;                                     // 0x0028(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDialogHelper">();
	}
	static class UDelMarDialogHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDialogHelper>();
	}
};
static_assert(alignof(UDelMarDialogHelper) == 0x000008, "Wrong alignment on UDelMarDialogHelper");
static_assert(sizeof(UDelMarDialogHelper) == 0x000078, "Wrong size on UDelMarDialogHelper");
static_assert(offsetof(UDelMarDialogHelper, DialogMapping) == 0x000028, "Member 'UDelMarDialogHelper::DialogMapping' has a wrong offset!");

// Class DelMarUI.DelMarInputConfigWidgetBase
// 0x0008 (0x0408 - 0x0400)
class UDelMarInputConfigWidgetBase final : public UCommonActivatableWidget
{
public:
	struct FUIInputConfig                         DesiredInputConfig;                                // 0x0400(0x0006)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bFlushPlayerInputWhenActivating;                   // 0x0406(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFlushPlayerInputWhenDeactivating;                 // 0x0407(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarInputConfigWidgetBase">();
	}
	static class UDelMarInputConfigWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarInputConfigWidgetBase>();
	}
};
static_assert(alignof(UDelMarInputConfigWidgetBase) == 0x000008, "Wrong alignment on UDelMarInputConfigWidgetBase");
static_assert(sizeof(UDelMarInputConfigWidgetBase) == 0x000408, "Wrong size on UDelMarInputConfigWidgetBase");
static_assert(offsetof(UDelMarInputConfigWidgetBase, DesiredInputConfig) == 0x000400, "Member 'UDelMarInputConfigWidgetBase::DesiredInputConfig' has a wrong offset!");
static_assert(offsetof(UDelMarInputConfigWidgetBase, bFlushPlayerInputWhenActivating) == 0x000406, "Member 'UDelMarInputConfigWidgetBase::bFlushPlayerInputWhenActivating' has a wrong offset!");
static_assert(offsetof(UDelMarInputConfigWidgetBase, bFlushPlayerInputWhenDeactivating) == 0x000407, "Member 'UDelMarInputConfigWidgetBase::bFlushPlayerInputWhenDeactivating' has a wrong offset!");

// Class DelMarUI.DelMarLoadingScreenHelper
// 0x0140 (0x0168 - 0x0028)
class UDelMarLoadingScreenHelper final : public UObject
{
public:
	struct FVector2D                              BackgroundDesiredSize;                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CustomLoadingWidget;                               // 0x0038(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZoneLoadingScreenConfig               ZoneConfig;                                        // 0x0058(0x0110)(Edit, NativeAccessSpecifierPublic)

public:
	void PrepareDelMarLoadingScreen(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarLoadingScreenHelper">();
	}
	static class UDelMarLoadingScreenHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarLoadingScreenHelper>();
	}
};
static_assert(alignof(UDelMarLoadingScreenHelper) == 0x000008, "Wrong alignment on UDelMarLoadingScreenHelper");
static_assert(sizeof(UDelMarLoadingScreenHelper) == 0x000168, "Wrong size on UDelMarLoadingScreenHelper");
static_assert(offsetof(UDelMarLoadingScreenHelper, BackgroundDesiredSize) == 0x000028, "Member 'UDelMarLoadingScreenHelper::BackgroundDesiredSize' has a wrong offset!");
static_assert(offsetof(UDelMarLoadingScreenHelper, CustomLoadingWidget) == 0x000038, "Member 'UDelMarLoadingScreenHelper::CustomLoadingWidget' has a wrong offset!");
static_assert(offsetof(UDelMarLoadingScreenHelper, ZoneConfig) == 0x000058, "Member 'UDelMarLoadingScreenHelper::ZoneConfig' has a wrong offset!");

// Class DelMarUI.DelMarUIDirector
// 0x0010 (0x02C0 - 0x02B0)
class ADelMarUIDirector final : public ADynamicUIDirectorBase
{
public:
	TSubclassOf<class UDelMarDialogHelper>        DialogHelperClass;                                 // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDelMarDialogHelper*                    DialogHelper;                                      // 0x02B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetLoadingScreenVisibiliy(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarUIDirector">();
	}
	static class ADelMarUIDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarUIDirector>();
	}
};
static_assert(alignof(ADelMarUIDirector) == 0x000008, "Wrong alignment on ADelMarUIDirector");
static_assert(sizeof(ADelMarUIDirector) == 0x0002C0, "Wrong size on ADelMarUIDirector");
static_assert(offsetof(ADelMarUIDirector, DialogHelperClass) == 0x0002B0, "Member 'ADelMarUIDirector::DialogHelperClass' has a wrong offset!");
static_assert(offsetof(ADelMarUIDirector, DialogHelper) == 0x0002B8, "Member 'ADelMarUIDirector::DialogHelper' has a wrong offset!");

// Class DelMarUI.DelMarUIGlobals
// 0x0008 (0x0030 - 0x0028)
class UDelMarUIGlobals final : public UObject
{
public:
	struct FGameplayTag                           DefaultTouchControlsLayout;                        // 0x0028(0x0004)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarUIGlobals">();
	}
	static class UDelMarUIGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarUIGlobals>();
	}
};
static_assert(alignof(UDelMarUIGlobals) == 0x000008, "Wrong alignment on UDelMarUIGlobals");
static_assert(sizeof(UDelMarUIGlobals) == 0x000030, "Wrong size on UDelMarUIGlobals");
static_assert(offsetof(UDelMarUIGlobals, DefaultTouchControlsLayout) == 0x000028, "Member 'UDelMarUIGlobals::DefaultTouchControlsLayout' has a wrong offset!");

// Class DelMarUI.DelMarAttachedWidgetActor
// 0x0058 (0x02E8 - 0x0290)
class ADelMarAttachedWidgetActor final : public AActor
{
public:
	float                                         DriftFollowDampening;                              // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallFollowDampening;                               // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateDampeningRate;                               // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           ViewPlayerState;                                   // 0x02A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        AttachedTarget;                                    // 0x02A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADelMarVehicle*                         AttachedVehicle;                                   // 0x02B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCameraManager*                   CameraManager;                                     // 0x02B8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        AttachmentBaseComponent;                           // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarWidgetComponent*                 SpeedometerWidget;                                 // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarWidgetComponent*                 DriftBoostWidget;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarWidgetComponent*                 UnderthrustWidget;                                 // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x8];                                      // 0x02E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarAttachedWidgetActor">();
	}
	static class ADelMarAttachedWidgetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADelMarAttachedWidgetActor>();
	}
};
static_assert(alignof(ADelMarAttachedWidgetActor) == 0x000008, "Wrong alignment on ADelMarAttachedWidgetActor");
static_assert(sizeof(ADelMarAttachedWidgetActor) == 0x0002E8, "Wrong size on ADelMarAttachedWidgetActor");
static_assert(offsetof(ADelMarAttachedWidgetActor, DriftFollowDampening) == 0x000290, "Member 'ADelMarAttachedWidgetActor::DriftFollowDampening' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, WallFollowDampening) == 0x000294, "Member 'ADelMarAttachedWidgetActor::WallFollowDampening' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, RotateDampeningRate) == 0x000298, "Member 'ADelMarAttachedWidgetActor::RotateDampeningRate' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, ViewPlayerState) == 0x0002A0, "Member 'ADelMarAttachedWidgetActor::ViewPlayerState' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, AttachedTarget) == 0x0002A8, "Member 'ADelMarAttachedWidgetActor::AttachedTarget' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, AttachedVehicle) == 0x0002B0, "Member 'ADelMarAttachedWidgetActor::AttachedVehicle' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, CameraManager) == 0x0002B8, "Member 'ADelMarAttachedWidgetActor::CameraManager' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, AttachmentBaseComponent) == 0x0002C0, "Member 'ADelMarAttachedWidgetActor::AttachmentBaseComponent' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, SpeedometerWidget) == 0x0002C8, "Member 'ADelMarAttachedWidgetActor::SpeedometerWidget' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, DriftBoostWidget) == 0x0002D0, "Member 'ADelMarAttachedWidgetActor::DriftBoostWidget' has a wrong offset!");
static_assert(offsetof(ADelMarAttachedWidgetActor, UnderthrustWidget) == 0x0002D8, "Member 'ADelMarAttachedWidgetActor::UnderthrustWidget' has a wrong offset!");

// Class DelMarUI.DelMarAttachedWidgetComponent
// 0x0020 (0x00C0 - 0x00A0)
class UDelMarAttachedWidgetComponent final : public UControllerComponent
{
public:
	TArray<TSubclassOf<class ADelMarAttachedWidgetActor>> AttachedWidgetActorsClass;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class ADelMarAttachedWidgetActor*>     AttachedWidgetActors;                              // 0x00B0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void HandleViewTargetChanged(class AFortPlayerController* InController, class AActor* OldViewTarget, class AActor* NewViewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarAttachedWidgetComponent">();
	}
	static class UDelMarAttachedWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarAttachedWidgetComponent>();
	}
};
static_assert(alignof(UDelMarAttachedWidgetComponent) == 0x000008, "Wrong alignment on UDelMarAttachedWidgetComponent");
static_assert(sizeof(UDelMarAttachedWidgetComponent) == 0x0000C0, "Wrong size on UDelMarAttachedWidgetComponent");
static_assert(offsetof(UDelMarAttachedWidgetComponent, AttachedWidgetActorsClass) == 0x0000A0, "Member 'UDelMarAttachedWidgetComponent::AttachedWidgetActorsClass' has a wrong offset!");
static_assert(offsetof(UDelMarAttachedWidgetComponent, AttachedWidgetActors) == 0x0000B0, "Member 'UDelMarAttachedWidgetComponent::AttachedWidgetActors' has a wrong offset!");

// Class DelMarUI.DelMarWidgetComponent
// 0x0020 (0x0690 - 0x0670)
class UDelMarWidgetComponent final : public UWidgetComponent
{
public:
	struct FVector2D                              LeftTopPadding;                                    // 0x0670(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              RightBottomPadding;                                // 0x0680(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarWidgetComponent">();
	}
	static class UDelMarWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarWidgetComponent>();
	}
};
static_assert(alignof(UDelMarWidgetComponent) == 0x000010, "Wrong alignment on UDelMarWidgetComponent");
static_assert(sizeof(UDelMarWidgetComponent) == 0x000690, "Wrong size on UDelMarWidgetComponent");
static_assert(offsetof(UDelMarWidgetComponent, LeftTopPadding) == 0x000670, "Member 'UDelMarWidgetComponent::LeftTopPadding' has a wrong offset!");
static_assert(offsetof(UDelMarWidgetComponent, RightBottomPadding) == 0x000680, "Member 'UDelMarWidgetComponent::RightBottomPadding' has a wrong offset!");

// Class DelMarUI.DelMarDebugCountdown
// 0x0038 (0x04B8 - 0x0480)
class UDelMarDebugCountdown final : public UDelMarScreenBase
{
public:
	class UCommonRichTextBlock*                   CountdownText;                                     // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_488[0x30];                                     // 0x0488(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDebugCountdown">();
	}
	static class UDelMarDebugCountdown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDebugCountdown>();
	}
};
static_assert(alignof(UDelMarDebugCountdown) == 0x000008, "Wrong alignment on UDelMarDebugCountdown");
static_assert(sizeof(UDelMarDebugCountdown) == 0x0004B8, "Wrong size on UDelMarDebugCountdown");
static_assert(offsetof(UDelMarDebugCountdown, CountdownText) == 0x000480, "Member 'UDelMarDebugCountdown::CountdownText' has a wrong offset!");

// Class DelMarUI.DelMarStartlineCountdownWidget
// 0x0038 (0x0398 - 0x0360)
class UDelMarStartlineCountdownWidget final : public UDelMarUserWidget
{
public:
	TWeakObjectPtr<class ADelMarVehicle>          CachedDelMarVehicle;                               // 0x0360(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x30];                                     // 0x0368(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnActiveIntervalsChanged(int32 NumActiveIntervals);
	void BP_OnCountdownStarted(int32 TotalIntervals);
	void BP_OnRaceStarted();
	void BP_OnStartlineBoostActivated(float PercentageMaxBonusSpeedEarned);
	void BP_OnStartlineBoostFailed();
	void HandleViewTargetChanged(class AFortPlayerController* PC, class AActor* Old, class AActor* NewViewTarget);

	int32 GetNumActiveIntervals() const;
	int32 GetNumTotalIntervals() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarStartlineCountdownWidget">();
	}
	static class UDelMarStartlineCountdownWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarStartlineCountdownWidget>();
	}
};
static_assert(alignof(UDelMarStartlineCountdownWidget) == 0x000008, "Wrong alignment on UDelMarStartlineCountdownWidget");
static_assert(sizeof(UDelMarStartlineCountdownWidget) == 0x000398, "Wrong size on UDelMarStartlineCountdownWidget");
static_assert(offsetof(UDelMarStartlineCountdownWidget, CachedDelMarVehicle) == 0x000360, "Member 'UDelMarStartlineCountdownWidget::CachedDelMarVehicle' has a wrong offset!");

// Class DelMarUI.DelMarCheckpointTrackerEntryWidget
// 0x0020 (0x0380 - 0x0360)
class UDelMarCheckpointTrackerEntryWidget final : public UDelMarUserWidget
{
public:
	class UWidgetAnimation*                       AnimTransitionIn;                                  // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_368[0x18];                                     // 0x0368(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnDisplayedCheckpointChanged(const struct FDelMarSectionData& InSectionData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarCheckpointTrackerEntryWidget">();
	}
	static class UDelMarCheckpointTrackerEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarCheckpointTrackerEntryWidget>();
	}
};
static_assert(alignof(UDelMarCheckpointTrackerEntryWidget) == 0x000008, "Wrong alignment on UDelMarCheckpointTrackerEntryWidget");
static_assert(sizeof(UDelMarCheckpointTrackerEntryWidget) == 0x000380, "Wrong size on UDelMarCheckpointTrackerEntryWidget");
static_assert(offsetof(UDelMarCheckpointTrackerEntryWidget, AnimTransitionIn) == 0x000360, "Member 'UDelMarCheckpointTrackerEntryWidget::AnimTransitionIn' has a wrong offset!");

// Class DelMarUI.DelMarCheckpointTrackerWidget
// 0x0048 (0x03A8 - 0x0360)
class UDelMarCheckpointTrackerWidget final : public UDelMarUserWidget
{
public:
	TSubclassOf<class UDelMarCheckpointTrackerEntryWidget> CheckpointTrackerEntryClass;                       // 0x0360(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumDesignerPreviewEntries;                         // 0x0368(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EntrySpacing;                                      // 0x036C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxEntriesToDisplay;                               // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               CheckpointEntryOverlay;                            // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URetainerBox*                           EdgeFadeRetainerBox;                               // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               TrackerSizeBox;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDelMarCheckpointTrackerEntryWidget*> DisplayedCheckpointTrackerEntries;                 // 0x0390(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateCheckpoints(const TArray<struct FDelMarSectionData>& InCheckpoints);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarCheckpointTrackerWidget">();
	}
	static class UDelMarCheckpointTrackerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarCheckpointTrackerWidget>();
	}
};
static_assert(alignof(UDelMarCheckpointTrackerWidget) == 0x000008, "Wrong alignment on UDelMarCheckpointTrackerWidget");
static_assert(sizeof(UDelMarCheckpointTrackerWidget) == 0x0003A8, "Wrong size on UDelMarCheckpointTrackerWidget");
static_assert(offsetof(UDelMarCheckpointTrackerWidget, CheckpointTrackerEntryClass) == 0x000360, "Member 'UDelMarCheckpointTrackerWidget::CheckpointTrackerEntryClass' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTrackerWidget, NumDesignerPreviewEntries) == 0x000368, "Member 'UDelMarCheckpointTrackerWidget::NumDesignerPreviewEntries' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTrackerWidget, EntrySpacing) == 0x00036C, "Member 'UDelMarCheckpointTrackerWidget::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTrackerWidget, MaxEntriesToDisplay) == 0x000370, "Member 'UDelMarCheckpointTrackerWidget::MaxEntriesToDisplay' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTrackerWidget, CheckpointEntryOverlay) == 0x000378, "Member 'UDelMarCheckpointTrackerWidget::CheckpointEntryOverlay' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTrackerWidget, EdgeFadeRetainerBox) == 0x000380, "Member 'UDelMarCheckpointTrackerWidget::EdgeFadeRetainerBox' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTrackerWidget, TrackerSizeBox) == 0x000388, "Member 'UDelMarCheckpointTrackerWidget::TrackerSizeBox' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTrackerWidget, DisplayedCheckpointTrackerEntries) == 0x000390, "Member 'UDelMarCheckpointTrackerWidget::DisplayedCheckpointTrackerEntries' has a wrong offset!");

// Class DelMarUI.DelMarBladeMenuContainer
// 0x0010 (0x0490 - 0x0480)
class UDelMarBladeMenuContainer final : public UDelMarScreenBase
{
public:
	class UFortDualBladeMenu*                     DualBladeMenu;                                     // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CloseBladeMenuTriggerTag;                          // 0x0488(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarBladeMenuContainer">();
	}
	static class UDelMarBladeMenuContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarBladeMenuContainer>();
	}
};
static_assert(alignof(UDelMarBladeMenuContainer) == 0x000008, "Wrong alignment on UDelMarBladeMenuContainer");
static_assert(sizeof(UDelMarBladeMenuContainer) == 0x000490, "Wrong size on UDelMarBladeMenuContainer");
static_assert(offsetof(UDelMarBladeMenuContainer, DualBladeMenu) == 0x000480, "Member 'UDelMarBladeMenuContainer::DualBladeMenu' has a wrong offset!");
static_assert(offsetof(UDelMarBladeMenuContainer, CloseBladeMenuTriggerTag) == 0x000488, "Member 'UDelMarBladeMenuContainer::CloseBladeMenuTriggerTag' has a wrong offset!");

// Class DelMarUI.DelMarCheckpointTimer
// 0x0030 (0x04B0 - 0x0480)
class UDelMarCheckpointTimer final : public UDelMarScreenBase
{
public:
	class UCommonTextBlock*                       Text_LapCount;                                     // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_CheckpointIndex;                              // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_Timestamp;                                    // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       Text_LapTimestamp;                                 // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A0[0x10];                                     // 0x04A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarCheckpointTimer">();
	}
	static class UDelMarCheckpointTimer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarCheckpointTimer>();
	}
};
static_assert(alignof(UDelMarCheckpointTimer) == 0x000008, "Wrong alignment on UDelMarCheckpointTimer");
static_assert(sizeof(UDelMarCheckpointTimer) == 0x0004B0, "Wrong size on UDelMarCheckpointTimer");
static_assert(offsetof(UDelMarCheckpointTimer, Text_LapCount) == 0x000480, "Member 'UDelMarCheckpointTimer::Text_LapCount' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTimer, Text_CheckpointIndex) == 0x000488, "Member 'UDelMarCheckpointTimer::Text_CheckpointIndex' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTimer, Text_Timestamp) == 0x000490, "Member 'UDelMarCheckpointTimer::Text_Timestamp' has a wrong offset!");
static_assert(offsetof(UDelMarCheckpointTimer, Text_LapTimestamp) == 0x000498, "Member 'UDelMarCheckpointTimer::Text_LapTimestamp' has a wrong offset!");

// Class DelMarUI.DelMarDebugRubberbandingWidget
// 0x0048 (0x03A8 - 0x0360)
class UDelMarDebugRubberbandingWidget final : public UDelMarUserWidget
{
public:
	bool                                          bRubberbandingEnabled;                             // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PackDistance;                                      // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPackDistance;                                   // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPackDistance;                                   // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToPack;                                    // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceFromPack;                               // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFromPack;                               // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StableSpeed;                                       // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppliedBonusSpeed;                                 // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToPackRatio;                               // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBonusSpeedAtPosition;                           // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedAtPosition;                                // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAllowedBonusSpeed;                              // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusSpeedGainedPerSecond;                         // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusSpeedLostPerSecond;                           // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MMRUsed;                                           // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBonusSpeedScalar;                               // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BP_OnRubberbandingUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDebugRubberbandingWidget">();
	}
	static class UDelMarDebugRubberbandingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDebugRubberbandingWidget>();
	}
};
static_assert(alignof(UDelMarDebugRubberbandingWidget) == 0x000008, "Wrong alignment on UDelMarDebugRubberbandingWidget");
static_assert(sizeof(UDelMarDebugRubberbandingWidget) == 0x0003A8, "Wrong size on UDelMarDebugRubberbandingWidget");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, bRubberbandingEnabled) == 0x000360, "Member 'UDelMarDebugRubberbandingWidget::bRubberbandingEnabled' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, PackDistance) == 0x000364, "Member 'UDelMarDebugRubberbandingWidget::PackDistance' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MinPackDistance) == 0x000368, "Member 'UDelMarDebugRubberbandingWidget::MinPackDistance' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MaxPackDistance) == 0x00036C, "Member 'UDelMarDebugRubberbandingWidget::MaxPackDistance' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, DistanceToPack) == 0x000370, "Member 'UDelMarDebugRubberbandingWidget::DistanceToPack' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MinDistanceFromPack) == 0x000374, "Member 'UDelMarDebugRubberbandingWidget::MinDistanceFromPack' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MaxDistanceFromPack) == 0x000378, "Member 'UDelMarDebugRubberbandingWidget::MaxDistanceFromPack' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MinSpeed) == 0x00037C, "Member 'UDelMarDebugRubberbandingWidget::MinSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, StableSpeed) == 0x000380, "Member 'UDelMarDebugRubberbandingWidget::StableSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, AppliedBonusSpeed) == 0x000384, "Member 'UDelMarDebugRubberbandingWidget::AppliedBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, DistanceToPackRatio) == 0x000388, "Member 'UDelMarDebugRubberbandingWidget::DistanceToPackRatio' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MaxBonusSpeedAtPosition) == 0x00038C, "Member 'UDelMarDebugRubberbandingWidget::MaxBonusSpeedAtPosition' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MaxSpeedAtPosition) == 0x000390, "Member 'UDelMarDebugRubberbandingWidget::MaxSpeedAtPosition' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MaxAllowedBonusSpeed) == 0x000394, "Member 'UDelMarDebugRubberbandingWidget::MaxAllowedBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, BonusSpeedGainedPerSecond) == 0x000398, "Member 'UDelMarDebugRubberbandingWidget::BonusSpeedGainedPerSecond' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, BonusSpeedLostPerSecond) == 0x00039C, "Member 'UDelMarDebugRubberbandingWidget::BonusSpeedLostPerSecond' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MMRUsed) == 0x0003A0, "Member 'UDelMarDebugRubberbandingWidget::MMRUsed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugRubberbandingWidget, MaxBonusSpeedScalar) == 0x0003A4, "Member 'UDelMarDebugRubberbandingWidget::MaxBonusSpeedScalar' has a wrong offset!");

// Class DelMarUI.DelMarDebugVehicleWidget
// 0x00B8 (0x0418 - 0x0360)
class UDelMarDebugVehicleWidget final : public UDelMarUserWidget
{
public:
	float                                         BaseTargetSpeed;                                   // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalTargetSpeed;                                  // 0x0364(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OversteerPercentage;                               // 0x0368(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasValidDraftingTarget;                           // 0x036C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelmarDraftingState                          DraftingState;                                     // 0x036D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36E[0x2];                                      // 0x036E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DraftingBonusSpeed;                                // 0x0370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsInDrift;                                    // 0x0374(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedWaitingPeriodSeconds;                   // 0x0378(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftBoostBonusSpeed;                              // 0x037C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftBoostDuration;                                // 0x0380(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftBoostDurationSecondsLeft;                     // 0x0384(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PotentialDriftBoostBonusSpeed;                     // 0x0388(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PotentialDriftBoostDuration;                       // 0x038C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QueuedDriftBoostBonusSpeed;                        // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartlineBonusSpeed;                               // 0x0394(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboBonusSpeed;                                   // 0x0398(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboZoneBonusSpeed;                               // 0x039C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboSecondsRemaining;                             // 0x03A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboCharges;                                      // 0x03A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldBonusSpeed;                                   // 0x03A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalBonusSpeed;                                   // 0x03AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarTerrainData                     TerrainData;                                       // 0x03B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumWheelWorldContacts;                             // 0x03C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AverageWheelWorldContactNormal;                    // 0x03D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumLandingSpeed;                               // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseForwardSpeed;                                  // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StableSpeed;                                       // 0x03F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpwardSpeed;                                       // 0x03F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleSpeed;                                      // 0x03F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertedSteeringActive;                           // 0x03FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxForwardSpeed;                                   // 0x0400(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsSinceTerrainPenalty;                        // 0x0404(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KickflipActivationCharges;                         // 0x0408(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStrafeDisabled;                                   // 0x040C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanActivateStrafe;                                // 0x040D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40E[0x2];                                      // 0x040E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrafeCooldownSeconds;                             // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrafeCooldownPercentage;                          // 0x0414(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BP_OnVehicleUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDebugVehicleWidget">();
	}
	static class UDelMarDebugVehicleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDebugVehicleWidget>();
	}
};
static_assert(alignof(UDelMarDebugVehicleWidget) == 0x000008, "Wrong alignment on UDelMarDebugVehicleWidget");
static_assert(sizeof(UDelMarDebugVehicleWidget) == 0x000418, "Wrong size on UDelMarDebugVehicleWidget");
static_assert(offsetof(UDelMarDebugVehicleWidget, BaseTargetSpeed) == 0x000360, "Member 'UDelMarDebugVehicleWidget::BaseTargetSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, FinalTargetSpeed) == 0x000364, "Member 'UDelMarDebugVehicleWidget::FinalTargetSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, OversteerPercentage) == 0x000368, "Member 'UDelMarDebugVehicleWidget::OversteerPercentage' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, bHasValidDraftingTarget) == 0x00036C, "Member 'UDelMarDebugVehicleWidget::bHasValidDraftingTarget' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, DraftingState) == 0x00036D, "Member 'UDelMarDebugVehicleWidget::DraftingState' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, DraftingBonusSpeed) == 0x000370, "Member 'UDelMarDebugVehicleWidget::DraftingBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, SecondsInDrift) == 0x000374, "Member 'UDelMarDebugVehicleWidget::SecondsInDrift' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, AccumulatedWaitingPeriodSeconds) == 0x000378, "Member 'UDelMarDebugVehicleWidget::AccumulatedWaitingPeriodSeconds' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, DriftBoostBonusSpeed) == 0x00037C, "Member 'UDelMarDebugVehicleWidget::DriftBoostBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, DriftBoostDuration) == 0x000380, "Member 'UDelMarDebugVehicleWidget::DriftBoostDuration' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, DriftBoostDurationSecondsLeft) == 0x000384, "Member 'UDelMarDebugVehicleWidget::DriftBoostDurationSecondsLeft' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, PotentialDriftBoostBonusSpeed) == 0x000388, "Member 'UDelMarDebugVehicleWidget::PotentialDriftBoostBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, PotentialDriftBoostDuration) == 0x00038C, "Member 'UDelMarDebugVehicleWidget::PotentialDriftBoostDuration' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, QueuedDriftBoostBonusSpeed) == 0x000390, "Member 'UDelMarDebugVehicleWidget::QueuedDriftBoostBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, StartlineBonusSpeed) == 0x000394, "Member 'UDelMarDebugVehicleWidget::StartlineBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, TurboBonusSpeed) == 0x000398, "Member 'UDelMarDebugVehicleWidget::TurboBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, TurboZoneBonusSpeed) == 0x00039C, "Member 'UDelMarDebugVehicleWidget::TurboZoneBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, TurboSecondsRemaining) == 0x0003A0, "Member 'UDelMarDebugVehicleWidget::TurboSecondsRemaining' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, TurboCharges) == 0x0003A4, "Member 'UDelMarDebugVehicleWidget::TurboCharges' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, WorldBonusSpeed) == 0x0003A8, "Member 'UDelMarDebugVehicleWidget::WorldBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, TotalBonusSpeed) == 0x0003AC, "Member 'UDelMarDebugVehicleWidget::TotalBonusSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, TerrainData) == 0x0003B0, "Member 'UDelMarDebugVehicleWidget::TerrainData' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, NumWheelWorldContacts) == 0x0003C8, "Member 'UDelMarDebugVehicleWidget::NumWheelWorldContacts' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, AverageWheelWorldContactNormal) == 0x0003D0, "Member 'UDelMarDebugVehicleWidget::AverageWheelWorldContactNormal' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, MinimumLandingSpeed) == 0x0003E8, "Member 'UDelMarDebugVehicleWidget::MinimumLandingSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, BaseForwardSpeed) == 0x0003EC, "Member 'UDelMarDebugVehicleWidget::BaseForwardSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, StableSpeed) == 0x0003F0, "Member 'UDelMarDebugVehicleWidget::StableSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, UpwardSpeed) == 0x0003F4, "Member 'UDelMarDebugVehicleWidget::UpwardSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, VehicleSpeed) == 0x0003F8, "Member 'UDelMarDebugVehicleWidget::VehicleSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, bInvertedSteeringActive) == 0x0003FC, "Member 'UDelMarDebugVehicleWidget::bInvertedSteeringActive' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, MaxForwardSpeed) == 0x000400, "Member 'UDelMarDebugVehicleWidget::MaxForwardSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, SecondsSinceTerrainPenalty) == 0x000404, "Member 'UDelMarDebugVehicleWidget::SecondsSinceTerrainPenalty' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, KickflipActivationCharges) == 0x000408, "Member 'UDelMarDebugVehicleWidget::KickflipActivationCharges' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, bStrafeDisabled) == 0x00040C, "Member 'UDelMarDebugVehicleWidget::bStrafeDisabled' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, bCanActivateStrafe) == 0x00040D, "Member 'UDelMarDebugVehicleWidget::bCanActivateStrafe' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, StrafeCooldownSeconds) == 0x000410, "Member 'UDelMarDebugVehicleWidget::StrafeCooldownSeconds' has a wrong offset!");
static_assert(offsetof(UDelMarDebugVehicleWidget, StrafeCooldownPercentage) == 0x000414, "Member 'UDelMarDebugVehicleWidget::StrafeCooldownPercentage' has a wrong offset!");

// Class DelMarUI.DelMarReadyUpWidget
// 0x0000 (0x02C0 - 0x02C0)
class UDelMarReadyUpWidget final : public UUserWidget
{
public:
	void BP_OnReadyUpChanged(bool bReady);
	void BP_ReadyUp(const bool bReady);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarReadyUpWidget">();
	}
	static class UDelMarReadyUpWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarReadyUpWidget>();
	}
};
static_assert(alignof(UDelMarReadyUpWidget) == 0x000008, "Wrong alignment on UDelMarReadyUpWidget");
static_assert(sizeof(UDelMarReadyUpWidget) == 0x0002C0, "Wrong size on UDelMarReadyUpWidget");

// Class DelMarUI.DelMarTurboBonusZoneWidget
// 0x0008 (0x0368 - 0x0360)
class UDelMarTurboBonusZoneWidget final : public UDelMarUserWidget
{
public:
	TWeakObjectPtr<class ADelMarVehicle>          CachedDelMarVehicle;                               // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_OnTurboZoneStateChanged(EDelMarTurboZoneState NewState);
	void HandleTurboStateChange(EDelMarTurboZoneState NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTurboBonusZoneWidget">();
	}
	static class UDelMarTurboBonusZoneWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTurboBonusZoneWidget>();
	}
};
static_assert(alignof(UDelMarTurboBonusZoneWidget) == 0x000008, "Wrong alignment on UDelMarTurboBonusZoneWidget");
static_assert(sizeof(UDelMarTurboBonusZoneWidget) == 0x000368, "Wrong size on UDelMarTurboBonusZoneWidget");
static_assert(offsetof(UDelMarTurboBonusZoneWidget, CachedDelMarVehicle) == 0x000360, "Member 'UDelMarTurboBonusZoneWidget::CachedDelMarVehicle' has a wrong offset!");

// Class DelMarUI.DelMarPositionalTrackerEntryWidget
// 0x0020 (0x0380 - 0x0360)
class UDelMarPositionalTrackerEntryWidget final : public UDelMarUserWidget
{
public:
	TMulticastInlineDelegate<void(class UDelMarPlayerViewModel* InPlayerViewModel)> OnDisplayedPlayerSet;                              // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       AnimIsTargetPlayer;                                // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RefreshPlayerInfo(bool IsTargetPlayer);
	void SetDisplayedPlayer(class UDelMarPlayerViewModel* InPlayerModel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPositionalTrackerEntryWidget">();
	}
	static class UDelMarPositionalTrackerEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPositionalTrackerEntryWidget>();
	}
};
static_assert(alignof(UDelMarPositionalTrackerEntryWidget) == 0x000008, "Wrong alignment on UDelMarPositionalTrackerEntryWidget");
static_assert(sizeof(UDelMarPositionalTrackerEntryWidget) == 0x000380, "Wrong size on UDelMarPositionalTrackerEntryWidget");
static_assert(offsetof(UDelMarPositionalTrackerEntryWidget, OnDisplayedPlayerSet) == 0x000360, "Member 'UDelMarPositionalTrackerEntryWidget::OnDisplayedPlayerSet' has a wrong offset!");
static_assert(offsetof(UDelMarPositionalTrackerEntryWidget, AnimIsTargetPlayer) == 0x000370, "Member 'UDelMarPositionalTrackerEntryWidget::AnimIsTargetPlayer' has a wrong offset!");

// Class DelMarUI.DelMarLoadingScreenWidget
// 0x0018 (0x0300 - 0x02E8)
class UDelMarLoadingScreenWidget final : public UCommonUserWidget
{
public:
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           LoadingScreenTips;                                 // 0x02F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarLoadingScreenWidget">();
	}
	static class UDelMarLoadingScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarLoadingScreenWidget>();
	}
};
static_assert(alignof(UDelMarLoadingScreenWidget) == 0x000008, "Wrong alignment on UDelMarLoadingScreenWidget");
static_assert(sizeof(UDelMarLoadingScreenWidget) == 0x000300, "Wrong size on UDelMarLoadingScreenWidget");
static_assert(offsetof(UDelMarLoadingScreenWidget, LoadingScreenTips) == 0x0002F0, "Member 'UDelMarLoadingScreenWidget::LoadingScreenTips' has a wrong offset!");

// Class DelMarUI.DelMarPostRaceRankedRecap
// 0x0000 (0x0400 - 0x0400)
class UDelMarPostRaceRankedRecap final : public UCommonActivatableWidget
{
public:
	float GetFailsafeDelayDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPostRaceRankedRecap">();
	}
	static class UDelMarPostRaceRankedRecap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPostRaceRankedRecap>();
	}
};
static_assert(alignof(UDelMarPostRaceRankedRecap) == 0x000008, "Wrong alignment on UDelMarPostRaceRankedRecap");
static_assert(sizeof(UDelMarPostRaceRankedRecap) == 0x000400, "Wrong size on UDelMarPostRaceRankedRecap");

// Class DelMarUI.DelMarDebugTrackEntry
// 0x0018 (0x02D8 - 0x02C0)
class UDelMarDebugTrackEntry : public UUserWidget
{
public:
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       TrackNameText;                                     // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarLevelDataAsset*                  LevelDataAsset;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_OnTrackButtonPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDebugTrackEntry">();
	}
	static class UDelMarDebugTrackEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDebugTrackEntry>();
	}
};
static_assert(alignof(UDelMarDebugTrackEntry) == 0x000008, "Wrong alignment on UDelMarDebugTrackEntry");
static_assert(sizeof(UDelMarDebugTrackEntry) == 0x0002D8, "Wrong size on UDelMarDebugTrackEntry");
static_assert(offsetof(UDelMarDebugTrackEntry, TrackNameText) == 0x0002C8, "Member 'UDelMarDebugTrackEntry::TrackNameText' has a wrong offset!");
static_assert(offsetof(UDelMarDebugTrackEntry, LevelDataAsset) == 0x0002D0, "Member 'UDelMarDebugTrackEntry::LevelDataAsset' has a wrong offset!");

// Class DelMarUI.DelMarDebugGameplayTrackEntry
// 0x0008 (0x02E0 - 0x02D8)
class UDelMarDebugGameplayTrackEntry final : public UDelMarDebugTrackEntry
{
public:
	class UDynamicUIScene*                        GameplayTrackListScene;                            // 0x02D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDebugGameplayTrackEntry">();
	}
	static class UDelMarDebugGameplayTrackEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDebugGameplayTrackEntry>();
	}
};
static_assert(alignof(UDelMarDebugGameplayTrackEntry) == 0x000008, "Wrong alignment on UDelMarDebugGameplayTrackEntry");
static_assert(sizeof(UDelMarDebugGameplayTrackEntry) == 0x0002E0, "Wrong size on UDelMarDebugGameplayTrackEntry");
static_assert(offsetof(UDelMarDebugGameplayTrackEntry, GameplayTrackListScene) == 0x0002D8, "Member 'UDelMarDebugGameplayTrackEntry::GameplayTrackListScene' has a wrong offset!");

// Class DelMarUI.DelMarDebugTrackList
// 0x0010 (0x0490 - 0x0480)
class UDelMarDebugTrackList final : public UDelMarScreenBase
{
public:
	class UCommonListView*                        TrackView;                                         // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnlyReturnAllowedLevels;                          // 0x0488(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnExitButtonPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarDebugTrackList">();
	}
	static class UDelMarDebugTrackList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarDebugTrackList>();
	}
};
static_assert(alignof(UDelMarDebugTrackList) == 0x000008, "Wrong alignment on UDelMarDebugTrackList");
static_assert(sizeof(UDelMarDebugTrackList) == 0x000490, "Wrong size on UDelMarDebugTrackList");
static_assert(offsetof(UDelMarDebugTrackList, TrackView) == 0x000480, "Member 'UDelMarDebugTrackList::TrackView' has a wrong offset!");
static_assert(offsetof(UDelMarDebugTrackList, bOnlyReturnAllowedLevels) == 0x000488, "Member 'UDelMarDebugTrackList::bOnlyReturnAllowedLevels' has a wrong offset!");

// Class DelMarUI.DelMarBoundActionBar
// 0x0000 (0x0288 - 0x0288)
class UDelMarBoundActionBar final : public UCommonBoundActionBar
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarBoundActionBar">();
	}
	static class UDelMarBoundActionBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarBoundActionBar>();
	}
};
static_assert(alignof(UDelMarBoundActionBar) == 0x000008, "Wrong alignment on UDelMarBoundActionBar");
static_assert(sizeof(UDelMarBoundActionBar) == 0x000288, "Wrong size on UDelMarBoundActionBar");

// Class DelMarUI.DelMarBoundActionButton
// 0x0020 (0x14D0 - 0x14B0)
class UDelMarBoundActionButton final : public UCommonBoundActionButton
{
public:
	class UButton*                                Button_OptionalPCInput;                            // 0x14A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B0[0x10];                                    // 0x14B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCommonButtonStyle>         KeyboardStyle;                                     // 0x14C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCommonButtonStyle>         GamepadStyle;                                      // 0x14C8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarBoundActionButton">();
	}
	static class UDelMarBoundActionButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarBoundActionButton>();
	}
};
static_assert(alignof(UDelMarBoundActionButton) == 0x000010, "Wrong alignment on UDelMarBoundActionButton");
static_assert(sizeof(UDelMarBoundActionButton) == 0x0014D0, "Wrong size on UDelMarBoundActionButton");
static_assert(offsetof(UDelMarBoundActionButton, Button_OptionalPCInput) == 0x0014A8, "Member 'UDelMarBoundActionButton::Button_OptionalPCInput' has a wrong offset!");
static_assert(offsetof(UDelMarBoundActionButton, KeyboardStyle) == 0x0014C0, "Member 'UDelMarBoundActionButton::KeyboardStyle' has a wrong offset!");
static_assert(offsetof(UDelMarBoundActionButton, GamepadStyle) == 0x0014C8, "Member 'UDelMarBoundActionButton::GamepadStyle' has a wrong offset!");

// Class DelMarUI.DelMarBladeMenuTriggerUIStateComponent
// 0x0010 (0x0058 - 0x0048)
class UDelMarBladeMenuTriggerUIStateComponent final : public UUIStateComponent
{
public:
	class UDelMarBladeMenuTriggerUIStateComponentConfiguration* Configuration;                                     // 0x0048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortHUDContext*                        HUDContext;                                        // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void NativeHandleCursorModeChanged(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CursorModeContentWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarBladeMenuTriggerUIStateComponent">();
	}
	static class UDelMarBladeMenuTriggerUIStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarBladeMenuTriggerUIStateComponent>();
	}
};
static_assert(alignof(UDelMarBladeMenuTriggerUIStateComponent) == 0x000008, "Wrong alignment on UDelMarBladeMenuTriggerUIStateComponent");
static_assert(sizeof(UDelMarBladeMenuTriggerUIStateComponent) == 0x000058, "Wrong size on UDelMarBladeMenuTriggerUIStateComponent");
static_assert(offsetof(UDelMarBladeMenuTriggerUIStateComponent, Configuration) == 0x000048, "Member 'UDelMarBladeMenuTriggerUIStateComponent::Configuration' has a wrong offset!");
static_assert(offsetof(UDelMarBladeMenuTriggerUIStateComponent, HUDContext) == 0x000050, "Member 'UDelMarBladeMenuTriggerUIStateComponent::HUDContext' has a wrong offset!");

// Class DelMarUI.DelMarBladeMenuTriggerUIStateComponentConfiguration
// 0x0008 (0x0030 - 0x0028)
class UDelMarBladeMenuTriggerUIStateComponentConfiguration final : public UUIStateComponentConfiguration
{
public:
	struct FGameplayTag                           BladeMenuTriggerTag;                               // 0x0028(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarBladeMenuTriggerUIStateComponentConfiguration">();
	}
	static class UDelMarBladeMenuTriggerUIStateComponentConfiguration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarBladeMenuTriggerUIStateComponentConfiguration>();
	}
};
static_assert(alignof(UDelMarBladeMenuTriggerUIStateComponentConfiguration) == 0x000008, "Wrong alignment on UDelMarBladeMenuTriggerUIStateComponentConfiguration");
static_assert(sizeof(UDelMarBladeMenuTriggerUIStateComponentConfiguration) == 0x000030, "Wrong size on UDelMarBladeMenuTriggerUIStateComponentConfiguration");
static_assert(offsetof(UDelMarBladeMenuTriggerUIStateComponentConfiguration, BladeMenuTriggerTag) == 0x000028, "Member 'UDelMarBladeMenuTriggerUIStateComponentConfiguration::BladeMenuTriggerTag' has a wrong offset!");

// Class DelMarUI.DelMarGameplayContextUpdaterUIStateComponent
// 0x0088 (0x00D0 - 0x0048)
class UDelMarGameplayContextUpdaterUIStateComponent final : public UUIStateComponent
{
public:
	TMap<struct FGameplayTag, class FString>      GameStateToUITagMap;                               // 0x0048(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CurrentRacerState;                                 // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CurrentGameState;                                  // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CurrentRaceMode;                                   // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerState>        OwnerPlayerState;                                  // 0x00A4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerState>        SpectatedPlayerState;                              // 0x00AC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerController>   OwnerPlayerController;                             // 0x00B4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UDelMarPlayerPreferencesComponent> CachedPreferences;                                 // 0x00BC(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UDelMarLevelManagerComponent> LevelManager;                                      // 0x00C4(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleSpectatorViewTargetChange(class AFortPlayerController* PlayerController, class AActor* OldViewTarget, class AActor* NewViewTarget);
	void HandleTouchControlsLayoutChanged(const struct FGameplayTag& Layout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarGameplayContextUpdaterUIStateComponent">();
	}
	static class UDelMarGameplayContextUpdaterUIStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarGameplayContextUpdaterUIStateComponent>();
	}
};
static_assert(alignof(UDelMarGameplayContextUpdaterUIStateComponent) == 0x000008, "Wrong alignment on UDelMarGameplayContextUpdaterUIStateComponent");
static_assert(sizeof(UDelMarGameplayContextUpdaterUIStateComponent) == 0x0000D0, "Wrong size on UDelMarGameplayContextUpdaterUIStateComponent");
static_assert(offsetof(UDelMarGameplayContextUpdaterUIStateComponent, GameStateToUITagMap) == 0x000048, "Member 'UDelMarGameplayContextUpdaterUIStateComponent::GameStateToUITagMap' has a wrong offset!");
static_assert(offsetof(UDelMarGameplayContextUpdaterUIStateComponent, CurrentRacerState) == 0x000098, "Member 'UDelMarGameplayContextUpdaterUIStateComponent::CurrentRacerState' has a wrong offset!");
static_assert(offsetof(UDelMarGameplayContextUpdaterUIStateComponent, CurrentGameState) == 0x00009C, "Member 'UDelMarGameplayContextUpdaterUIStateComponent::CurrentGameState' has a wrong offset!");
static_assert(offsetof(UDelMarGameplayContextUpdaterUIStateComponent, CurrentRaceMode) == 0x0000A0, "Member 'UDelMarGameplayContextUpdaterUIStateComponent::CurrentRaceMode' has a wrong offset!");
static_assert(offsetof(UDelMarGameplayContextUpdaterUIStateComponent, OwnerPlayerState) == 0x0000A4, "Member 'UDelMarGameplayContextUpdaterUIStateComponent::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(UDelMarGameplayContextUpdaterUIStateComponent, SpectatedPlayerState) == 0x0000AC, "Member 'UDelMarGameplayContextUpdaterUIStateComponent::SpectatedPlayerState' has a wrong offset!");
static_assert(offsetof(UDelMarGameplayContextUpdaterUIStateComponent, OwnerPlayerController) == 0x0000B4, "Member 'UDelMarGameplayContextUpdaterUIStateComponent::OwnerPlayerController' has a wrong offset!");
static_assert(offsetof(UDelMarGameplayContextUpdaterUIStateComponent, CachedPreferences) == 0x0000BC, "Member 'UDelMarGameplayContextUpdaterUIStateComponent::CachedPreferences' has a wrong offset!");
static_assert(offsetof(UDelMarGameplayContextUpdaterUIStateComponent, LevelManager) == 0x0000C4, "Member 'UDelMarGameplayContextUpdaterUIStateComponent::LevelManager' has a wrong offset!");

// Class DelMarUI.DelMarGameplayContextUpdaterUIStateComponentConfiguration
// 0x0000 (0x0028 - 0x0028)
class UDelMarGameplayContextUpdaterUIStateComponentConfiguration final : public UUIStateComponentConfiguration
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarGameplayContextUpdaterUIStateComponentConfiguration">();
	}
	static class UDelMarGameplayContextUpdaterUIStateComponentConfiguration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarGameplayContextUpdaterUIStateComponentConfiguration>();
	}
};
static_assert(alignof(UDelMarGameplayContextUpdaterUIStateComponentConfiguration) == 0x000008, "Wrong alignment on UDelMarGameplayContextUpdaterUIStateComponentConfiguration");
static_assert(sizeof(UDelMarGameplayContextUpdaterUIStateComponentConfiguration) == 0x000028, "Wrong size on UDelMarGameplayContextUpdaterUIStateComponentConfiguration");

// Class DelMarUI.DelMarViewModelBase
// 0x0000 (0x0068 - 0x0068)
class UDelMarViewModelBase : public UMVVMViewModelBase
{
public:
	class ULocalPlayer* TryGetOwningLocalPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarViewModelBase">();
	}
	static class UDelMarViewModelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarViewModelBase>();
	}
};
static_assert(alignof(UDelMarViewModelBase) == 0x000008, "Wrong alignment on UDelMarViewModelBase");
static_assert(sizeof(UDelMarViewModelBase) == 0x000068, "Wrong size on UDelMarViewModelBase");

// Class DelMarUI.DelMarGlobalLeaderboardEntryViewModel
// 0x0088 (0x00F0 - 0x0068)
class UDelMarGlobalLeaderboardEntryViewModel final : public UDelMarViewModelBase
{
public:
	class FString                                 PlayerAccountId;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RunDuration;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Rank;                                              // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarGlobalLeaderboardEntry          GlobalLeaderboardEntry;                            // 0x00A0(0x0040)(Edit, BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E0[0x10];                                      // 0x00E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarGlobalLeaderboardEntryViewModel">();
	}
	static class UDelMarGlobalLeaderboardEntryViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarGlobalLeaderboardEntryViewModel>();
	}
};
static_assert(alignof(UDelMarGlobalLeaderboardEntryViewModel) == 0x000008, "Wrong alignment on UDelMarGlobalLeaderboardEntryViewModel");
static_assert(sizeof(UDelMarGlobalLeaderboardEntryViewModel) == 0x0000F0, "Wrong size on UDelMarGlobalLeaderboardEntryViewModel");
static_assert(offsetof(UDelMarGlobalLeaderboardEntryViewModel, PlayerAccountId) == 0x000068, "Member 'UDelMarGlobalLeaderboardEntryViewModel::PlayerAccountId' has a wrong offset!");
static_assert(offsetof(UDelMarGlobalLeaderboardEntryViewModel, PlayerName) == 0x000078, "Member 'UDelMarGlobalLeaderboardEntryViewModel::PlayerName' has a wrong offset!");
static_assert(offsetof(UDelMarGlobalLeaderboardEntryViewModel, RunDuration) == 0x000088, "Member 'UDelMarGlobalLeaderboardEntryViewModel::RunDuration' has a wrong offset!");
static_assert(offsetof(UDelMarGlobalLeaderboardEntryViewModel, Rank) == 0x000090, "Member 'UDelMarGlobalLeaderboardEntryViewModel::Rank' has a wrong offset!");
static_assert(offsetof(UDelMarGlobalLeaderboardEntryViewModel, bIsLocalPlayer) == 0x000098, "Member 'UDelMarGlobalLeaderboardEntryViewModel::bIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(UDelMarGlobalLeaderboardEntryViewModel, GlobalLeaderboardEntry) == 0x0000A0, "Member 'UDelMarGlobalLeaderboardEntryViewModel::GlobalLeaderboardEntry' has a wrong offset!");

// Class DelMarUI.DelMarLoadingScreenViewModel
// 0x0078 (0x00E0 - 0x0068)
class UDelMarLoadingScreenViewModel final : public UDelMarViewModelBase
{
public:
	bool                                          bHasValidTrackData;                                // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MapName;                                           // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MapCreator;                                        // 0x0088(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MapDescription;                                    // 0x00A0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RaceMode;                                          // 0x00B8(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              LoadingBackgroundImage;                            // 0x00C0(0x0020)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarLoadingScreenViewModel">();
	}
	static class UDelMarLoadingScreenViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarLoadingScreenViewModel>();
	}
};
static_assert(alignof(UDelMarLoadingScreenViewModel) == 0x000008, "Wrong alignment on UDelMarLoadingScreenViewModel");
static_assert(sizeof(UDelMarLoadingScreenViewModel) == 0x0000E0, "Wrong size on UDelMarLoadingScreenViewModel");
static_assert(offsetof(UDelMarLoadingScreenViewModel, bHasValidTrackData) == 0x000068, "Member 'UDelMarLoadingScreenViewModel::bHasValidTrackData' has a wrong offset!");
static_assert(offsetof(UDelMarLoadingScreenViewModel, MapName) == 0x000070, "Member 'UDelMarLoadingScreenViewModel::MapName' has a wrong offset!");
static_assert(offsetof(UDelMarLoadingScreenViewModel, MapCreator) == 0x000088, "Member 'UDelMarLoadingScreenViewModel::MapCreator' has a wrong offset!");
static_assert(offsetof(UDelMarLoadingScreenViewModel, MapDescription) == 0x0000A0, "Member 'UDelMarLoadingScreenViewModel::MapDescription' has a wrong offset!");
static_assert(offsetof(UDelMarLoadingScreenViewModel, RaceMode) == 0x0000B8, "Member 'UDelMarLoadingScreenViewModel::RaceMode' has a wrong offset!");
static_assert(offsetof(UDelMarLoadingScreenViewModel, LoadingBackgroundImage) == 0x0000C0, "Member 'UDelMarLoadingScreenViewModel::LoadingBackgroundImage' has a wrong offset!");

// Class DelMarUI.DelMarLocalPlayerSettingsViewModel
// 0x0010 (0x0078 - 0x0068)
class UDelMarLocalPlayerSettingsViewModel final : public UDelMarViewModelBase
{
public:
	bool                                          bUseIconOnlyPlayerNameplates;                      // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UDelMarPlayerPreferencesComponent> CachedPreferences;                                 // 0x006C(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleNameplatesSettingChanged(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarLocalPlayerSettingsViewModel">();
	}
	static class UDelMarLocalPlayerSettingsViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarLocalPlayerSettingsViewModel>();
	}
};
static_assert(alignof(UDelMarLocalPlayerSettingsViewModel) == 0x000008, "Wrong alignment on UDelMarLocalPlayerSettingsViewModel");
static_assert(sizeof(UDelMarLocalPlayerSettingsViewModel) == 0x000078, "Wrong size on UDelMarLocalPlayerSettingsViewModel");
static_assert(offsetof(UDelMarLocalPlayerSettingsViewModel, bUseIconOnlyPlayerNameplates) == 0x000068, "Member 'UDelMarLocalPlayerSettingsViewModel::bUseIconOnlyPlayerNameplates' has a wrong offset!");
static_assert(offsetof(UDelMarLocalPlayerSettingsViewModel, CachedPreferences) == 0x00006C, "Member 'UDelMarLocalPlayerSettingsViewModel::CachedPreferences' has a wrong offset!");

// Class DelMarUI.DelMarPlayerRaceStateViewModel
// 0x0098 (0x0100 - 0x0068)
class UDelMarPlayerRaceStateViewModel final : public UDelMarViewModelBase
{
public:
	bool                                          bHasValidData;                                     // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentLap;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasCompletedRace;                                 // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              RaceCompletionTime;                                // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpectatorCount;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentPlacement;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentPlacementByBestRun;                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentRunStartTimestamp;                          // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastCompletedSectionIndex;                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsNewBestRun;                                     // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRunActive;                                        // 0x009D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarRunRecordViewModel*              CurrentRunRecord;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarRunRecordViewModel*              BestRunRecord;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarRunRecordViewModel*              PreviousBestRunRecord;                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDelMarRunRecordViewModel*>      MatchRunRecords;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UDelMarGlobalLeaderboardEntryViewModel* PersonalBestLeaderboardEntry;                      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarGlobalLeaderboardEntryViewModel* NewPersonalBestLeaderboardEntry;                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarVehicleViewModel*                Vehicle;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           PreviousRacerState;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADelMarRaceManager>      RaceManager;                                       // 0x00E4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x00EC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UDelMarPositionalTrackerComponent> PositionalTrackerComponent;                        // 0x00F4(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleRaceReset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPlayerRaceStateViewModel">();
	}
	static class UDelMarPlayerRaceStateViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPlayerRaceStateViewModel>();
	}
};
static_assert(alignof(UDelMarPlayerRaceStateViewModel) == 0x000008, "Wrong alignment on UDelMarPlayerRaceStateViewModel");
static_assert(sizeof(UDelMarPlayerRaceStateViewModel) == 0x000100, "Wrong size on UDelMarPlayerRaceStateViewModel");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, bHasValidData) == 0x000068, "Member 'UDelMarPlayerRaceStateViewModel::bHasValidData' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, CurrentLap) == 0x00006C, "Member 'UDelMarPlayerRaceStateViewModel::CurrentLap' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, bHasCompletedRace) == 0x000070, "Member 'UDelMarPlayerRaceStateViewModel::bHasCompletedRace' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, RaceCompletionTime) == 0x000078, "Member 'UDelMarPlayerRaceStateViewModel::RaceCompletionTime' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, SpectatorCount) == 0x000080, "Member 'UDelMarPlayerRaceStateViewModel::SpectatorCount' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, CurrentPlacement) == 0x000084, "Member 'UDelMarPlayerRaceStateViewModel::CurrentPlacement' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, CurrentPlacementByBestRun) == 0x000088, "Member 'UDelMarPlayerRaceStateViewModel::CurrentPlacementByBestRun' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, CurrentRunStartTimestamp) == 0x000090, "Member 'UDelMarPlayerRaceStateViewModel::CurrentRunStartTimestamp' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, LastCompletedSectionIndex) == 0x000098, "Member 'UDelMarPlayerRaceStateViewModel::LastCompletedSectionIndex' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, bIsNewBestRun) == 0x00009C, "Member 'UDelMarPlayerRaceStateViewModel::bIsNewBestRun' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, bRunActive) == 0x00009D, "Member 'UDelMarPlayerRaceStateViewModel::bRunActive' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, CurrentRunRecord) == 0x0000A0, "Member 'UDelMarPlayerRaceStateViewModel::CurrentRunRecord' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, BestRunRecord) == 0x0000A8, "Member 'UDelMarPlayerRaceStateViewModel::BestRunRecord' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, PreviousBestRunRecord) == 0x0000B0, "Member 'UDelMarPlayerRaceStateViewModel::PreviousBestRunRecord' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, MatchRunRecords) == 0x0000B8, "Member 'UDelMarPlayerRaceStateViewModel::MatchRunRecords' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, PersonalBestLeaderboardEntry) == 0x0000C8, "Member 'UDelMarPlayerRaceStateViewModel::PersonalBestLeaderboardEntry' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, NewPersonalBestLeaderboardEntry) == 0x0000D0, "Member 'UDelMarPlayerRaceStateViewModel::NewPersonalBestLeaderboardEntry' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, Vehicle) == 0x0000D8, "Member 'UDelMarPlayerRaceStateViewModel::Vehicle' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, PreviousRacerState) == 0x0000E0, "Member 'UDelMarPlayerRaceStateViewModel::PreviousRacerState' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, RaceManager) == 0x0000E4, "Member 'UDelMarPlayerRaceStateViewModel::RaceManager' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, PlayerState) == 0x0000EC, "Member 'UDelMarPlayerRaceStateViewModel::PlayerState' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerRaceStateViewModel, PositionalTrackerComponent) == 0x0000F4, "Member 'UDelMarPlayerRaceStateViewModel::PositionalTrackerComponent' has a wrong offset!");

// Class DelMarUI.DelMarPlayerViewModel
// 0x0080 (0x00E8 - 0x0068)
class UDelMarPlayerViewModel final : public UDelMarViewModelBase
{
public:
	class FText                                   DisplayName;                                       // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              AvatarLargeImage;                                  // 0x0080(0x0020)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              AvatarSmallImage;                                  // 0x00A0(0x0020)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 AvatarBackgroundColor;                             // 0x00C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 AvatarHighlightColor;                              // 0x00C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureRenderTarget2D*                 DriverCameraRT;                                    // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarPlayerRaceStateViewModel*        PlayerRaceState;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x00D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADelMarRaceManager>      RaceManager;                                       // 0x00E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class AFortPlayerState* GetPlayerState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarPlayerViewModel">();
	}
	static class UDelMarPlayerViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarPlayerViewModel>();
	}
};
static_assert(alignof(UDelMarPlayerViewModel) == 0x000008, "Wrong alignment on UDelMarPlayerViewModel");
static_assert(sizeof(UDelMarPlayerViewModel) == 0x0000E8, "Wrong size on UDelMarPlayerViewModel");
static_assert(offsetof(UDelMarPlayerViewModel, DisplayName) == 0x000068, "Member 'UDelMarPlayerViewModel::DisplayName' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerViewModel, AvatarLargeImage) == 0x000080, "Member 'UDelMarPlayerViewModel::AvatarLargeImage' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerViewModel, AvatarSmallImage) == 0x0000A0, "Member 'UDelMarPlayerViewModel::AvatarSmallImage' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerViewModel, AvatarBackgroundColor) == 0x0000C0, "Member 'UDelMarPlayerViewModel::AvatarBackgroundColor' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerViewModel, AvatarHighlightColor) == 0x0000C4, "Member 'UDelMarPlayerViewModel::AvatarHighlightColor' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerViewModel, DriverCameraRT) == 0x0000C8, "Member 'UDelMarPlayerViewModel::DriverCameraRT' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerViewModel, PlayerRaceState) == 0x0000D0, "Member 'UDelMarPlayerViewModel::PlayerRaceState' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerViewModel, PlayerState) == 0x0000D8, "Member 'UDelMarPlayerViewModel::PlayerState' has a wrong offset!");
static_assert(offsetof(UDelMarPlayerViewModel, RaceManager) == 0x0000E0, "Member 'UDelMarPlayerViewModel::RaceManager' has a wrong offset!");

// Class DelMarUI.DelMarRaceViewModel
// 0x0198 (0x0200 - 0x0068)
class UDelMarRaceViewModel final : public UDelMarViewModelBase
{
public:
	int32                                         TotalLaps;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalPlayers;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalReadyPlayers;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalLoadedPlayers;                                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalJoiningPlayers;                               // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalPlacements;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   MapName;                                           // 0x0080(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   MapCreator;                                        // 0x0098(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   MapDescription;                                    // 0x00B0(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RaceMode;                                          // 0x00C8(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DelMarGameplayState;                               // 0x00CC(0x0004)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              LoadingBackgroundImage;                            // 0x00D0(0x0020)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        TimeUntilRaceStart;                                // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        RaceEndTimestamp;                                  // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MatchTimeLimitSeconds;                             // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOvertime;                                       // 0x0104(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeUntilTrackChange;                              // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        FirstPlayerFinishedServerTimestamp;                // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        FirstPlayerFinishedRaceEndServerTimestamp;         // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         CurrentMatchmakingState;                           // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsRaceFinished;                                   // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsRaceStarted;                                    // 0x0122(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_123[0x5];                                      // 0x0123(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarPlayerViewModel*                 LocalPlayer;                                       // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarPlayerViewModel*                 TargetPlayer;                                      // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDelMarPlayerViewModel*>         PositionPlayers;                                   // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UDelMarPlayerViewModel*>         FinalPlacements;                                   // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<int32, class UDelMarPlayerViewModel*>    RacePlayers;                                       // 0x0158(0x0050)(Edit, BlueprintVisible, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UDelMarGlobalLeaderboardEntryViewModel*> TopLeaderboardEntries;                             // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UDelMarGlobalLeaderboardEntryViewModel*> FocusedLeaderboardEntries;                         // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UDelMarGlobalLeaderboardEntryViewModel*> FriendLeaderboardEntries;                          // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADelMarRaceManager>      RaceManager;                                       // 0x01D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerController>   LocalPlayerController;                             // 0x01E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerState>        ViewTargetPlayerState;                             // 0x01E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UDelMarPositionalTrackerComponent> PositionalTrackerComponent;                        // 0x01F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDelMarPlayerViewModel*                 EmptyPlayerViewModel;                              // 0x01F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleFinalRacePositionsChanged(const TArray<struct FDelMarFinalRacePositionEntry>& FinalRacePositions, const struct FDelMarEvent_RunRecorded& RecordedRun);
	void HandleViewTargetChanged(class AFortPlayerController* PC, class AActor* Old, class AActor* NewViewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarRaceViewModel">();
	}
	static class UDelMarRaceViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarRaceViewModel>();
	}
};
static_assert(alignof(UDelMarRaceViewModel) == 0x000008, "Wrong alignment on UDelMarRaceViewModel");
static_assert(sizeof(UDelMarRaceViewModel) == 0x000200, "Wrong size on UDelMarRaceViewModel");
static_assert(offsetof(UDelMarRaceViewModel, TotalLaps) == 0x000068, "Member 'UDelMarRaceViewModel::TotalLaps' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, TotalPlayers) == 0x00006C, "Member 'UDelMarRaceViewModel::TotalPlayers' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, TotalReadyPlayers) == 0x000070, "Member 'UDelMarRaceViewModel::TotalReadyPlayers' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, TotalLoadedPlayers) == 0x000074, "Member 'UDelMarRaceViewModel::TotalLoadedPlayers' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, TotalJoiningPlayers) == 0x000078, "Member 'UDelMarRaceViewModel::TotalJoiningPlayers' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, TotalPlacements) == 0x00007C, "Member 'UDelMarRaceViewModel::TotalPlacements' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, MapName) == 0x000080, "Member 'UDelMarRaceViewModel::MapName' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, MapCreator) == 0x000098, "Member 'UDelMarRaceViewModel::MapCreator' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, MapDescription) == 0x0000B0, "Member 'UDelMarRaceViewModel::MapDescription' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, RaceMode) == 0x0000C8, "Member 'UDelMarRaceViewModel::RaceMode' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, DelMarGameplayState) == 0x0000CC, "Member 'UDelMarRaceViewModel::DelMarGameplayState' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, LoadingBackgroundImage) == 0x0000D0, "Member 'UDelMarRaceViewModel::LoadingBackgroundImage' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, TimeUntilRaceStart) == 0x0000F0, "Member 'UDelMarRaceViewModel::TimeUntilRaceStart' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, RaceEndTimestamp) == 0x0000F8, "Member 'UDelMarRaceViewModel::RaceEndTimestamp' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, MatchTimeLimitSeconds) == 0x000100, "Member 'UDelMarRaceViewModel::MatchTimeLimitSeconds' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, bIsOvertime) == 0x000104, "Member 'UDelMarRaceViewModel::bIsOvertime' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, TimeUntilTrackChange) == 0x000108, "Member 'UDelMarRaceViewModel::TimeUntilTrackChange' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, FirstPlayerFinishedServerTimestamp) == 0x000110, "Member 'UDelMarRaceViewModel::FirstPlayerFinishedServerTimestamp' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, FirstPlayerFinishedRaceEndServerTimestamp) == 0x000118, "Member 'UDelMarRaceViewModel::FirstPlayerFinishedRaceEndServerTimestamp' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, CurrentMatchmakingState) == 0x000120, "Member 'UDelMarRaceViewModel::CurrentMatchmakingState' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, bIsRaceFinished) == 0x000121, "Member 'UDelMarRaceViewModel::bIsRaceFinished' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, bIsRaceStarted) == 0x000122, "Member 'UDelMarRaceViewModel::bIsRaceStarted' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, LocalPlayer) == 0x000128, "Member 'UDelMarRaceViewModel::LocalPlayer' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, TargetPlayer) == 0x000130, "Member 'UDelMarRaceViewModel::TargetPlayer' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, PositionPlayers) == 0x000138, "Member 'UDelMarRaceViewModel::PositionPlayers' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, FinalPlacements) == 0x000148, "Member 'UDelMarRaceViewModel::FinalPlacements' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, RacePlayers) == 0x000158, "Member 'UDelMarRaceViewModel::RacePlayers' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, TopLeaderboardEntries) == 0x0001A8, "Member 'UDelMarRaceViewModel::TopLeaderboardEntries' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, FocusedLeaderboardEntries) == 0x0001B8, "Member 'UDelMarRaceViewModel::FocusedLeaderboardEntries' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, FriendLeaderboardEntries) == 0x0001C8, "Member 'UDelMarRaceViewModel::FriendLeaderboardEntries' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, RaceManager) == 0x0001D8, "Member 'UDelMarRaceViewModel::RaceManager' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, LocalPlayerController) == 0x0001E0, "Member 'UDelMarRaceViewModel::LocalPlayerController' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, ViewTargetPlayerState) == 0x0001E8, "Member 'UDelMarRaceViewModel::ViewTargetPlayerState' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, PositionalTrackerComponent) == 0x0001F0, "Member 'UDelMarRaceViewModel::PositionalTrackerComponent' has a wrong offset!");
static_assert(offsetof(UDelMarRaceViewModel, EmptyPlayerViewModel) == 0x0001F8, "Member 'UDelMarRaceViewModel::EmptyPlayerViewModel' has a wrong offset!");

// Class DelMarUI.DelMarRunRecordViewModel
// 0x0038 (0x00A0 - 0x0068)
class UDelMarRunRecordViewModel final : public UDelMarViewModelBase
{
public:
	struct FDelMarRunRecord                       Record;                                            // 0x0068(0x0020)(Edit, BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDelMarSectionData>             RunRecordSectionData;                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasValidData;                                     // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarRunRecordViewModel">();
	}
	static class UDelMarRunRecordViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarRunRecordViewModel>();
	}
};
static_assert(alignof(UDelMarRunRecordViewModel) == 0x000008, "Wrong alignment on UDelMarRunRecordViewModel");
static_assert(sizeof(UDelMarRunRecordViewModel) == 0x0000A0, "Wrong size on UDelMarRunRecordViewModel");
static_assert(offsetof(UDelMarRunRecordViewModel, Record) == 0x000068, "Member 'UDelMarRunRecordViewModel::Record' has a wrong offset!");
static_assert(offsetof(UDelMarRunRecordViewModel, RunRecordSectionData) == 0x000088, "Member 'UDelMarRunRecordViewModel::RunRecordSectionData' has a wrong offset!");
static_assert(offsetof(UDelMarRunRecordViewModel, bHasValidData) == 0x000098, "Member 'UDelMarRunRecordViewModel::bHasValidData' has a wrong offset!");

// Class DelMarUI.DelMarTutorialViewModel
// 0x0048 (0x00B0 - 0x0068)
class UDelMarTutorialViewModel final : public UDelMarViewModelBase
{
public:
	class FText                                   SectionTitle;                                      // 0x0068(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         CurrentSection;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSections;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   CurrentTutorialAnnouncementInputActions;           // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   CurrentTutorialHintInputActions;                   // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimespan                              FinishTargetTime;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarTutorialViewModel">();
	}
	static class UDelMarTutorialViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarTutorialViewModel>();
	}
};
static_assert(alignof(UDelMarTutorialViewModel) == 0x000008, "Wrong alignment on UDelMarTutorialViewModel");
static_assert(sizeof(UDelMarTutorialViewModel) == 0x0000B0, "Wrong size on UDelMarTutorialViewModel");
static_assert(offsetof(UDelMarTutorialViewModel, SectionTitle) == 0x000068, "Member 'UDelMarTutorialViewModel::SectionTitle' has a wrong offset!");
static_assert(offsetof(UDelMarTutorialViewModel, CurrentSection) == 0x000080, "Member 'UDelMarTutorialViewModel::CurrentSection' has a wrong offset!");
static_assert(offsetof(UDelMarTutorialViewModel, TotalSections) == 0x000084, "Member 'UDelMarTutorialViewModel::TotalSections' has a wrong offset!");
static_assert(offsetof(UDelMarTutorialViewModel, CurrentTutorialAnnouncementInputActions) == 0x000088, "Member 'UDelMarTutorialViewModel::CurrentTutorialAnnouncementInputActions' has a wrong offset!");
static_assert(offsetof(UDelMarTutorialViewModel, CurrentTutorialHintInputActions) == 0x000098, "Member 'UDelMarTutorialViewModel::CurrentTutorialHintInputActions' has a wrong offset!");
static_assert(offsetof(UDelMarTutorialViewModel, FinishTargetTime) == 0x0000A8, "Member 'UDelMarTutorialViewModel::FinishTargetTime' has a wrong offset!");

// Class DelMarUI.DelMarVehicleViewModel
// 0x0080 (0x00E8 - 0x0068)
class UDelMarVehicleViewModel final : public UDelMarViewModelBase
{
public:
	bool                                          bHasValidData;                                     // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsTurboEnabled;                                   // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDrifting;                                       // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDriftingRight;                                  // 0x006D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWheelsOnGround;                                   // 0x006E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnyWheelsOnGround;                                // 0x006F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<double>                                DriftRanges;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         DriftSlipAngleRatio;                               // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDelMarDriftSteerState                        DriftSteerState;                                   // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PotentialDriftBoostPercent;                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartlineBoostBonus;                               // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDelMarSpeedometerState                       SpeedometerState;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentSpeed;                                      // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NumTurboMaxCharges;                                // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NumTurboCurrentCharges;                            // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDelMarTurboZoneState                         TurboBonusZoneState;                               // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnderthrustPercent;                                // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        MissedCheckpointDemoTimestamp;                     // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        ReturnToTrackDemoTimestamp;                        // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHeadingWrongWay;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bToggleThrottle;                                   // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrottleInputValue;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDemolished;                                       // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DemolishActionPressedPercent;                      // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDemolishActionEnabled;                            // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x00CC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADelMarVehicle>          CurrentVehicle;                                    // 0x00D4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UDelMarGlobalInputDisabler> GlobalInputDisabler;                               // 0x00DC(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAnyWheelsOnGroundChanged(const TScriptInterface<class IDelMarVehicleInterface>& VehicleRef, bool bValue);
	void HandleDemolishPressDurationUpdated(float PressedDurationPercentage);
	void HandleDriftActivated();
	void HandleDriftDeactivated();
	void HandleDriftSlipAngleRatioChanged(float InValue);
	void HandleMissedCheckpointCountdownCancelled();
	void HandleMissedCheckpointCountdownInitiated(const struct FDelMarEvent_MissedCheckpointDemoCountdown& Event);
	void HandleOnThrottleInput(float Value);
	void HandleOnVehicleDemolished(const struct FGameplayTag& CausedByTag);
	void HandlePotentialDriftBoostChanged(float InValue);
	void HandleReturnToTrackCountdownCancelled();
	void HandleReturnToTrackCountdownInitiated(const struct FDelMarEvent_ReturnToTrackDemoCountdown& Event);
	void HandleSpeedometerSpeedChanged(float InValue);
	void HandleStartlineBoostActivated(float InValue);
	void HandleStartlineBoostFailed();
	void HandleToggleThrottleSettingChanged(bool bValue);
	void HandleTurboBonusZoneChanged(EDelMarTurboZoneState InTurboBonusZoneState);
	void HandleTurboChargesUpdated();
	void HandleUnderthrustPercentChanged(float InValue);
	void HandleVehicleWheelsLeftGround();
	void HandleWrongwayIndication(const struct FDelMarEvent_VehicleWrongwayStatus& Event);
	void Initialize(class AFortPlayerState* InPlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarVehicleViewModel">();
	}
	static class UDelMarVehicleViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarVehicleViewModel>();
	}
};
static_assert(alignof(UDelMarVehicleViewModel) == 0x000008, "Wrong alignment on UDelMarVehicleViewModel");
static_assert(sizeof(UDelMarVehicleViewModel) == 0x0000E8, "Wrong size on UDelMarVehicleViewModel");
static_assert(offsetof(UDelMarVehicleViewModel, bHasValidData) == 0x000068, "Member 'UDelMarVehicleViewModel::bHasValidData' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, bIsTurboEnabled) == 0x000069, "Member 'UDelMarVehicleViewModel::bIsTurboEnabled' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, bIsDrifting) == 0x00006C, "Member 'UDelMarVehicleViewModel::bIsDrifting' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, bIsDriftingRight) == 0x00006D, "Member 'UDelMarVehicleViewModel::bIsDriftingRight' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, bWheelsOnGround) == 0x00006E, "Member 'UDelMarVehicleViewModel::bWheelsOnGround' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, bAnyWheelsOnGround) == 0x00006F, "Member 'UDelMarVehicleViewModel::bAnyWheelsOnGround' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, DriftRanges) == 0x000070, "Member 'UDelMarVehicleViewModel::DriftRanges' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, DriftSlipAngleRatio) == 0x000080, "Member 'UDelMarVehicleViewModel::DriftSlipAngleRatio' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, DriftSteerState) == 0x000084, "Member 'UDelMarVehicleViewModel::DriftSteerState' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, PotentialDriftBoostPercent) == 0x000088, "Member 'UDelMarVehicleViewModel::PotentialDriftBoostPercent' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, StartlineBoostBonus) == 0x00008C, "Member 'UDelMarVehicleViewModel::StartlineBoostBonus' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, SpeedometerState) == 0x000090, "Member 'UDelMarVehicleViewModel::SpeedometerState' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, CurrentSpeed) == 0x000094, "Member 'UDelMarVehicleViewModel::CurrentSpeed' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, NumTurboMaxCharges) == 0x000098, "Member 'UDelMarVehicleViewModel::NumTurboMaxCharges' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, NumTurboCurrentCharges) == 0x00009C, "Member 'UDelMarVehicleViewModel::NumTurboCurrentCharges' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, TurboBonusZoneState) == 0x0000A0, "Member 'UDelMarVehicleViewModel::TurboBonusZoneState' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, UnderthrustPercent) == 0x0000A4, "Member 'UDelMarVehicleViewModel::UnderthrustPercent' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, MissedCheckpointDemoTimestamp) == 0x0000A8, "Member 'UDelMarVehicleViewModel::MissedCheckpointDemoTimestamp' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, ReturnToTrackDemoTimestamp) == 0x0000B0, "Member 'UDelMarVehicleViewModel::ReturnToTrackDemoTimestamp' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, bIsHeadingWrongWay) == 0x0000B8, "Member 'UDelMarVehicleViewModel::bIsHeadingWrongWay' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, bToggleThrottle) == 0x0000B9, "Member 'UDelMarVehicleViewModel::bToggleThrottle' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, ThrottleInputValue) == 0x0000BC, "Member 'UDelMarVehicleViewModel::ThrottleInputValue' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, bDemolished) == 0x0000C0, "Member 'UDelMarVehicleViewModel::bDemolished' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, DemolishActionPressedPercent) == 0x0000C4, "Member 'UDelMarVehicleViewModel::DemolishActionPressedPercent' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, bDemolishActionEnabled) == 0x0000C8, "Member 'UDelMarVehicleViewModel::bDemolishActionEnabled' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, PlayerState) == 0x0000CC, "Member 'UDelMarVehicleViewModel::PlayerState' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, CurrentVehicle) == 0x0000D4, "Member 'UDelMarVehicleViewModel::CurrentVehicle' has a wrong offset!");
static_assert(offsetof(UDelMarVehicleViewModel, GlobalInputDisabler) == 0x0000DC, "Member 'UDelMarVehicleViewModel::GlobalInputDisabler' has a wrong offset!");

// Class DelMarUI.DelMarRankedPlacementChangeVM
// 0x0018 (0x0080 - 0x0068)
class UDelMarRankedPlacementChangeVM final : public UMVVMViewModelBase
{
public:
	class UDelMarRankedPlacementVM*               InitialPlacement;                                  // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDelMarRankedPlacementVM*               CurrentPlacement;                                  // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PositionDelta;                                     // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsDataValid;                                      // 0x007C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UDelMarRankedPlacementVM* GetCurrentPlacement() const;
	class UDelMarRankedPlacementVM* GetInitialPlacement() const;
	bool GetIsDataValid() const;
	int32 GetPositionDelta() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarRankedPlacementChangeVM">();
	}
	static class UDelMarRankedPlacementChangeVM* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarRankedPlacementChangeVM>();
	}
};
static_assert(alignof(UDelMarRankedPlacementChangeVM) == 0x000008, "Wrong alignment on UDelMarRankedPlacementChangeVM");
static_assert(sizeof(UDelMarRankedPlacementChangeVM) == 0x000080, "Wrong size on UDelMarRankedPlacementChangeVM");
static_assert(offsetof(UDelMarRankedPlacementChangeVM, InitialPlacement) == 0x000068, "Member 'UDelMarRankedPlacementChangeVM::InitialPlacement' has a wrong offset!");
static_assert(offsetof(UDelMarRankedPlacementChangeVM, CurrentPlacement) == 0x000070, "Member 'UDelMarRankedPlacementChangeVM::CurrentPlacement' has a wrong offset!");
static_assert(offsetof(UDelMarRankedPlacementChangeVM, PositionDelta) == 0x000078, "Member 'UDelMarRankedPlacementChangeVM::PositionDelta' has a wrong offset!");
static_assert(offsetof(UDelMarRankedPlacementChangeVM, bIsDataValid) == 0x00007C, "Member 'UDelMarRankedPlacementChangeVM::bIsDataValid' has a wrong offset!");

// Class DelMarUI.DelMarRankedPlacementVM
// 0x0120 (0x0188 - 0x0068)
class UDelMarRankedPlacementVM final : public UMVVMViewModelBase
{
public:
	bool                                          bIsUnranked;                                       // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TierIndex;                                         // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PlayerPosition;                                    // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ProgressTowardNextTier;                            // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsDataValid;                                      // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortHabaneroTier>              TierList;                                          // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UFortHabaneroDisplayData*               RankedDisplayData;                                 // 0x0090(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_98[0xF0];                                      // 0x0098(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsDataValid() const;
	bool GetIsUnranked() const;
	int32 GetPlayerPosition() const;
	float GetProgressTowardNextTier() const;
	int32 GetTierIndex() const;
	struct FFortHabaneroTier TierDisplayData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarRankedPlacementVM">();
	}
	static class UDelMarRankedPlacementVM* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarRankedPlacementVM>();
	}
};
static_assert(alignof(UDelMarRankedPlacementVM) == 0x000008, "Wrong alignment on UDelMarRankedPlacementVM");
static_assert(sizeof(UDelMarRankedPlacementVM) == 0x000188, "Wrong size on UDelMarRankedPlacementVM");
static_assert(offsetof(UDelMarRankedPlacementVM, bIsUnranked) == 0x000068, "Member 'UDelMarRankedPlacementVM::bIsUnranked' has a wrong offset!");
static_assert(offsetof(UDelMarRankedPlacementVM, TierIndex) == 0x00006C, "Member 'UDelMarRankedPlacementVM::TierIndex' has a wrong offset!");
static_assert(offsetof(UDelMarRankedPlacementVM, PlayerPosition) == 0x000070, "Member 'UDelMarRankedPlacementVM::PlayerPosition' has a wrong offset!");
static_assert(offsetof(UDelMarRankedPlacementVM, ProgressTowardNextTier) == 0x000074, "Member 'UDelMarRankedPlacementVM::ProgressTowardNextTier' has a wrong offset!");
static_assert(offsetof(UDelMarRankedPlacementVM, bIsDataValid) == 0x000078, "Member 'UDelMarRankedPlacementVM::bIsDataValid' has a wrong offset!");
static_assert(offsetof(UDelMarRankedPlacementVM, TierList) == 0x000080, "Member 'UDelMarRankedPlacementVM::TierList' has a wrong offset!");
static_assert(offsetof(UDelMarRankedPlacementVM, RankedDisplayData) == 0x000090, "Member 'UDelMarRankedPlacementVM::RankedDisplayData' has a wrong offset!");

// Class DelMarUI.DelMarRankedRecapVM
// 0x0050 (0x00B8 - 0x0068)
class UDelMarRankedRecapVM final : public UMVVMViewModelBase
{
public:
	class UDelMarRankedPlacementChangeVM*         PlacementChange;                                   // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDelMarRankedProgressError                    ErrorState;                                        // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OptionalErrorText;                                 // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ULocalPlayer>            OwningLocalPlayer;                                 // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortPlayerControllerAthena> OwningPlayerController;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortHabaneroDisplayData*               RankedDisplayData;                                 // 0x0098(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetUnrankedTierData(struct FFortHabaneroTier* OutUnrankedTierData);
	void QueryProgress();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarRankedRecapVM">();
	}
	static class UDelMarRankedRecapVM* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarRankedRecapVM>();
	}
};
static_assert(alignof(UDelMarRankedRecapVM) == 0x000008, "Wrong alignment on UDelMarRankedRecapVM");
static_assert(sizeof(UDelMarRankedRecapVM) == 0x0000B8, "Wrong size on UDelMarRankedRecapVM");
static_assert(offsetof(UDelMarRankedRecapVM, PlacementChange) == 0x000068, "Member 'UDelMarRankedRecapVM::PlacementChange' has a wrong offset!");
static_assert(offsetof(UDelMarRankedRecapVM, ErrorState) == 0x000070, "Member 'UDelMarRankedRecapVM::ErrorState' has a wrong offset!");
static_assert(offsetof(UDelMarRankedRecapVM, OptionalErrorText) == 0x000078, "Member 'UDelMarRankedRecapVM::OptionalErrorText' has a wrong offset!");
static_assert(offsetof(UDelMarRankedRecapVM, OwningLocalPlayer) == 0x000088, "Member 'UDelMarRankedRecapVM::OwningLocalPlayer' has a wrong offset!");
static_assert(offsetof(UDelMarRankedRecapVM, OwningPlayerController) == 0x000090, "Member 'UDelMarRankedRecapVM::OwningPlayerController' has a wrong offset!");
static_assert(offsetof(UDelMarRankedRecapVM, RankedDisplayData) == 0x000098, "Member 'UDelMarRankedRecapVM::RankedDisplayData' has a wrong offset!");

// Class DelMarUI.DelMarRankedVMContextResolver
// 0x0018 (0x0040 - 0x0028)
class UDelMarRankedVMContextResolver final : public UMVVMViewModelContextResolver
{
public:
	class UFortHabaneroDisplayData*               RankedDisplayData;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DevelopmentRankedKey;                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarRankedVMContextResolver">();
	}
	static class UDelMarRankedVMContextResolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarRankedVMContextResolver>();
	}
};
static_assert(alignof(UDelMarRankedVMContextResolver) == 0x000008, "Wrong alignment on UDelMarRankedVMContextResolver");
static_assert(sizeof(UDelMarRankedVMContextResolver) == 0x000040, "Wrong size on UDelMarRankedVMContextResolver");
static_assert(offsetof(UDelMarRankedVMContextResolver, RankedDisplayData) == 0x000028, "Member 'UDelMarRankedVMContextResolver::RankedDisplayData' has a wrong offset!");
static_assert(offsetof(UDelMarRankedVMContextResolver, DevelopmentRankedKey) == 0x000030, "Member 'UDelMarRankedVMContextResolver::DevelopmentRankedKey' has a wrong offset!");

}

