#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MidMatchAssignedGameplayRuntime

#include "Basic.hpp"

#include "MidMatchAssignedGameplayRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "MidMatchObjectivesGameplayRuntime_classes.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// Class MidMatchAssignedGameplayRuntime.FortGameStateComponent_AssignedObjective
// 0x0128 (0x01D0 - 0x00A8)
class UFortGameStateComponent_AssignedObjective final : public UFortGameStateComponent_MidMatchObjectiveParent
{
public:
	struct FScalableFloat                         IdealNumSquadsPerObjective;                        // 0x00A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bAllowUnopposedSquads;                             // 0x00D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinPairedSquadDistForUnopposed;                    // 0x00F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         UnopposedSquad_FakeSquadMaxSafeZonePct;            // 0x0120(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         UnopposedSquad_FakeSquadMinDistToSquad;            // 0x0148(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnObjectivesInsideSafeZonePct;                  // 0x0170(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UEnvQuery>               AssignedObjectiveLocationEnvQuery;                 // 0x0198(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FFortAssignedObjectiveData>     AssignedObjectives;                                // 0x01B8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FVector CalculateSquadAvgLocation(const uint8 SquadId, const class UObject* WorldContextObject);

	void OnAssignedObjectiveReady(struct FFortAssignedObjectiveData& ObjectiveData);
	void StartAssignedObjectives();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameStateComponent_AssignedObjective">();
	}
	static class UFortGameStateComponent_AssignedObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameStateComponent_AssignedObjective>();
	}
};
static_assert(alignof(UFortGameStateComponent_AssignedObjective) == 0x000008, "Wrong alignment on UFortGameStateComponent_AssignedObjective");
static_assert(sizeof(UFortGameStateComponent_AssignedObjective) == 0x0001D0, "Wrong size on UFortGameStateComponent_AssignedObjective");
static_assert(offsetof(UFortGameStateComponent_AssignedObjective, IdealNumSquadsPerObjective) == 0x0000A8, "Member 'UFortGameStateComponent_AssignedObjective::IdealNumSquadsPerObjective' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_AssignedObjective, bAllowUnopposedSquads) == 0x0000D0, "Member 'UFortGameStateComponent_AssignedObjective::bAllowUnopposedSquads' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_AssignedObjective, MinPairedSquadDistForUnopposed) == 0x0000F8, "Member 'UFortGameStateComponent_AssignedObjective::MinPairedSquadDistForUnopposed' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_AssignedObjective, UnopposedSquad_FakeSquadMaxSafeZonePct) == 0x000120, "Member 'UFortGameStateComponent_AssignedObjective::UnopposedSquad_FakeSquadMaxSafeZonePct' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_AssignedObjective, UnopposedSquad_FakeSquadMinDistToSquad) == 0x000148, "Member 'UFortGameStateComponent_AssignedObjective::UnopposedSquad_FakeSquadMinDistToSquad' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_AssignedObjective, SpawnObjectivesInsideSafeZonePct) == 0x000170, "Member 'UFortGameStateComponent_AssignedObjective::SpawnObjectivesInsideSafeZonePct' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_AssignedObjective, AssignedObjectiveLocationEnvQuery) == 0x000198, "Member 'UFortGameStateComponent_AssignedObjective::AssignedObjectiveLocationEnvQuery' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_AssignedObjective, AssignedObjectives) == 0x0001B8, "Member 'UFortGameStateComponent_AssignedObjective::AssignedObjectives' has a wrong offset!");

// Class MidMatchAssignedGameplayRuntime.FortQueryContext_SpawnedObjectiveLocations
// 0x0000 (0x0028 - 0x0028)
class UFortQueryContext_SpawnedObjectiveLocations final : public UEnvQueryContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQueryContext_SpawnedObjectiveLocations">();
	}
	static class UFortQueryContext_SpawnedObjectiveLocations* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQueryContext_SpawnedObjectiveLocations>();
	}
};
static_assert(alignof(UFortQueryContext_SpawnedObjectiveLocations) == 0x000008, "Wrong alignment on UFortQueryContext_SpawnedObjectiveLocations");
static_assert(sizeof(UFortQueryContext_SpawnedObjectiveLocations) == 0x000028, "Wrong size on UFortQueryContext_SpawnedObjectiveLocations");

// Class MidMatchAssignedGameplayRuntime.FortQueryContext_SquadAvgLocationsForObjective
// 0x0000 (0x0028 - 0x0028)
class UFortQueryContext_SquadAvgLocationsForObjective final : public UEnvQueryContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQueryContext_SquadAvgLocationsForObjective">();
	}
	static class UFortQueryContext_SquadAvgLocationsForObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQueryContext_SquadAvgLocationsForObjective>();
	}
};
static_assert(alignof(UFortQueryContext_SquadAvgLocationsForObjective) == 0x000008, "Wrong alignment on UFortQueryContext_SquadAvgLocationsForObjective");
static_assert(sizeof(UFortQueryContext_SquadAvgLocationsForObjective) == 0x000028, "Wrong size on UFortQueryContext_SquadAvgLocationsForObjective");

// Class MidMatchAssignedGameplayRuntime.FortQueryTest_ClosestPlayersToObjectiveDeltaDistance
// 0x0008 (0x0200 - 0x01F8)
class UFortQueryTest_ClosestPlayersToObjectiveDeltaDistance final : public UEnvQueryTest
{
public:
	bool                                          bUseDistance2D;                                    // 0x01F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQueryTest_ClosestPlayersToObjectiveDeltaDistance">();
	}
	static class UFortQueryTest_ClosestPlayersToObjectiveDeltaDistance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQueryTest_ClosestPlayersToObjectiveDeltaDistance>();
	}
};
static_assert(alignof(UFortQueryTest_ClosestPlayersToObjectiveDeltaDistance) == 0x000008, "Wrong alignment on UFortQueryTest_ClosestPlayersToObjectiveDeltaDistance");
static_assert(sizeof(UFortQueryTest_ClosestPlayersToObjectiveDeltaDistance) == 0x000200, "Wrong size on UFortQueryTest_ClosestPlayersToObjectiveDeltaDistance");
static_assert(offsetof(UFortQueryTest_ClosestPlayersToObjectiveDeltaDistance, bUseDistance2D) == 0x0001F8, "Member 'UFortQueryTest_ClosestPlayersToObjectiveDeltaDistance::bUseDistance2D' has a wrong offset!");

}

