#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseFortnite

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum VerseFortnite.ECharacterLook
// NumValues: 0x0002
enum class ECharacterLook : uint8
{
	FortniteCharacter                        = 0,
	CharacterBlueprint                       = 1,
};

// Enum VerseFortnite.ENPCCharacterMovement
// NumValues: 0x0003
enum class ENPCCharacterMovement : uint8
{
	Default                                  = 0,
	RetargetFromFortniteCharacter            = 1,
	AnimationPreset                          = 2,
};

// Enum VerseFortnite.ETeamOption
// NumValues: 0x0003
enum class ETeamOption : uint8
{
	Index                                    = 0,
	WildlifeAndCreature                      = 1,
	Neutral                                  = 2,
};

// ScriptStruct VerseFortnite.CharacterPreviewMesh
// 0x0040 (0x0040 - 0x0000)
struct FCharacterPreviewMesh final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MeshDescriptor;                                    // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterPreviewMesh) == 0x000008, "Wrong alignment on FCharacterPreviewMesh");
static_assert(sizeof(FCharacterPreviewMesh) == 0x000040, "Wrong size on FCharacterPreviewMesh");
static_assert(offsetof(FCharacterPreviewMesh, SkeletalMesh) == 0x000000, "Member 'FCharacterPreviewMesh::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FCharacterPreviewMesh, MeshDescriptor) == 0x000020, "Member 'FCharacterPreviewMesh::MeshDescriptor' has a wrong offset!");

// ScriptStruct VerseFortnite.CharacterModifierEmote
// 0x0020 (0x0020 - 0x0000)
struct FCharacterModifierEmote final
{
public:
	TSoftObjectPtr<class UAthenaDanceItemDefinition> EmoteDefinition;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterModifierEmote) == 0x000008, "Wrong alignment on FCharacterModifierEmote");
static_assert(sizeof(FCharacterModifierEmote) == 0x000020, "Wrong size on FCharacterModifierEmote");
static_assert(offsetof(FCharacterModifierEmote, EmoteDefinition) == 0x000000, "Member 'FCharacterModifierEmote::EmoteDefinition' has a wrong offset!");

// ScriptStruct VerseFortnite.CharacterModifierInventoryItem
// 0x0028 (0x0028 - 0x0000)
struct FCharacterModifierInventoryItem final
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0000(0x0020)(Edit, BlueprintVisible, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemQuantity;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterModifierInventoryItem) == 0x000008, "Wrong alignment on FCharacterModifierInventoryItem");
static_assert(sizeof(FCharacterModifierInventoryItem) == 0x000028, "Wrong size on FCharacterModifierInventoryItem");
static_assert(offsetof(FCharacterModifierInventoryItem, ItemDefinition) == 0x000000, "Member 'FCharacterModifierInventoryItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FCharacterModifierInventoryItem, ItemQuantity) == 0x000020, "Member 'FCharacterModifierInventoryItem::ItemQuantity' has a wrong offset!");

// ScriptStruct VerseFortnite.DefaultCharacterCustomizationData
// 0x0050 (0x0050 - 0x0000)
struct FDefaultCharacterCustomizationData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCustomCharacterPart*>           CharacterParts;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultCharacterCustomizationData) == 0x000008, "Wrong alignment on FDefaultCharacterCustomizationData");
static_assert(sizeof(FDefaultCharacterCustomizationData) == 0x000050, "Wrong size on FDefaultCharacterCustomizationData");
static_assert(offsetof(FDefaultCharacterCustomizationData, CharacterParts) == 0x000040, "Member 'FDefaultCharacterCustomizationData::CharacterParts' has a wrong offset!");

// ScriptStruct VerseFortnite.CharacterTypePreset
// 0x0040 (0x0040 - 0x0000)
struct FCharacterTypePreset final
{
public:
	TSoftClassPtr<class UClass>                   SpawnerData;                                       // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AdditionalData;                                    // 0x0020(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterTypePreset) == 0x000008, "Wrong alignment on FCharacterTypePreset");
static_assert(sizeof(FCharacterTypePreset) == 0x000040, "Wrong size on FCharacterTypePreset");
static_assert(offsetof(FCharacterTypePreset, SpawnerData) == 0x000000, "Member 'FCharacterTypePreset::SpawnerData' has a wrong offset!");
static_assert(offsetof(FCharacterTypePreset, AdditionalData) == 0x000020, "Member 'FCharacterTypePreset::AdditionalData' has a wrong offset!");

}

