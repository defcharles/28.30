#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarTrackRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DelMarTrackRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function DelMarTrackRuntime.DelMarTrackBase.GetAllTrackSegmentActors
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_GetAllTrackSegmentActors final
{
public:
	TArray<class ADelMarTrackSegmentBase*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetAllTrackSegmentActors) == 0x000008, "Wrong alignment on DelMarTrackBase_GetAllTrackSegmentActors");
static_assert(sizeof(DelMarTrackBase_GetAllTrackSegmentActors) == 0x000010, "Wrong size on DelMarTrackBase_GetAllTrackSegmentActors");
static_assert(offsetof(DelMarTrackBase_GetAllTrackSegmentActors, ReturnValue) == 0x000000, "Member 'DelMarTrackBase_GetAllTrackSegmentActors::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.OnMetadataChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_OnMetadataChanged final
{
public:
	class UDelMarTrackSplineComponent*            InSpline;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SplineIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackBase_OnMetadataChanged) == 0x000008, "Wrong alignment on DelMarTrackBase_OnMetadataChanged");
static_assert(sizeof(DelMarTrackBase_OnMetadataChanged) == 0x000010, "Wrong size on DelMarTrackBase_OnMetadataChanged");
static_assert(offsetof(DelMarTrackBase_OnMetadataChanged, InSpline) == 0x000000, "Member 'DelMarTrackBase_OnMetadataChanged::InSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_OnMetadataChanged, SplineIndex) == 0x000008, "Member 'DelMarTrackBase_OnMetadataChanged::SplineIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.OnSplineClosedLoopChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_OnSplineClosedLoopChanged final
{
public:
	class UDelMarTrackSplineComponent*            InSpline;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SplineIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackBase_OnSplineClosedLoopChanged) == 0x000008, "Wrong alignment on DelMarTrackBase_OnSplineClosedLoopChanged");
static_assert(sizeof(DelMarTrackBase_OnSplineClosedLoopChanged) == 0x000010, "Wrong size on DelMarTrackBase_OnSplineClosedLoopChanged");
static_assert(offsetof(DelMarTrackBase_OnSplineClosedLoopChanged, InSpline) == 0x000000, "Member 'DelMarTrackBase_OnSplineClosedLoopChanged::InSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_OnSplineClosedLoopChanged, SplineIndex) == 0x000008, "Member 'DelMarTrackBase_OnSplineClosedLoopChanged::SplineIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.OnSplinePointAdded
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_OnSplinePointAdded final
{
public:
	class UDelMarTrackSplineComponent*            InSpline;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SplineIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackBase_OnSplinePointAdded) == 0x000008, "Wrong alignment on DelMarTrackBase_OnSplinePointAdded");
static_assert(sizeof(DelMarTrackBase_OnSplinePointAdded) == 0x000010, "Wrong size on DelMarTrackBase_OnSplinePointAdded");
static_assert(offsetof(DelMarTrackBase_OnSplinePointAdded, InSpline) == 0x000000, "Member 'DelMarTrackBase_OnSplinePointAdded::InSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_OnSplinePointAdded, SplineIndex) == 0x000008, "Member 'DelMarTrackBase_OnSplinePointAdded::SplineIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.OnSplinePointChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_OnSplinePointChanged final
{
public:
	class UDelMarTrackSplineComponent*            InSpline;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SplineIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackBase_OnSplinePointChanged) == 0x000008, "Wrong alignment on DelMarTrackBase_OnSplinePointChanged");
static_assert(sizeof(DelMarTrackBase_OnSplinePointChanged) == 0x000010, "Wrong size on DelMarTrackBase_OnSplinePointChanged");
static_assert(offsetof(DelMarTrackBase_OnSplinePointChanged, InSpline) == 0x000000, "Member 'DelMarTrackBase_OnSplinePointChanged::InSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_OnSplinePointChanged, SplineIndex) == 0x000008, "Member 'DelMarTrackBase_OnSplinePointChanged::SplineIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.OnSplinePointRemoved
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_OnSplinePointRemoved final
{
public:
	class UDelMarTrackSplineComponent*            InSpline;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SplineIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackBase_OnSplinePointRemoved) == 0x000008, "Wrong alignment on DelMarTrackBase_OnSplinePointRemoved");
static_assert(sizeof(DelMarTrackBase_OnSplinePointRemoved) == 0x000010, "Wrong size on DelMarTrackBase_OnSplinePointRemoved");
static_assert(offsetof(DelMarTrackBase_OnSplinePointRemoved, InSpline) == 0x000000, "Member 'DelMarTrackBase_OnSplinePointRemoved::InSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_OnSplinePointRemoved, SplineIndex) == 0x000008, "Member 'DelMarTrackBase_OnSplinePointRemoved::SplineIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.PostSplineSegmentGenerated
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_PostSplineSegmentGenerated final
{
public:
	class UDelMarTrackSplineComponent*            SplineComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackBase_PostSplineSegmentGenerated) == 0x000008, "Wrong alignment on DelMarTrackBase_PostSplineSegmentGenerated");
static_assert(sizeof(DelMarTrackBase_PostSplineSegmentGenerated) == 0x000010, "Wrong size on DelMarTrackBase_PostSplineSegmentGenerated");
static_assert(offsetof(DelMarTrackBase_PostSplineSegmentGenerated, SplineComp) == 0x000000, "Member 'DelMarTrackBase_PostSplineSegmentGenerated::SplineComp' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_PostSplineSegmentGenerated, PointIndex) == 0x000008, "Member 'DelMarTrackBase_PostSplineSegmentGenerated::PointIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.PreSplineSegmentGenerated
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_PreSplineSegmentGenerated final
{
public:
	class UDelMarTrackSplineComponent*            SplineComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackBase_PreSplineSegmentGenerated) == 0x000008, "Wrong alignment on DelMarTrackBase_PreSplineSegmentGenerated");
static_assert(sizeof(DelMarTrackBase_PreSplineSegmentGenerated) == 0x000010, "Wrong size on DelMarTrackBase_PreSplineSegmentGenerated");
static_assert(offsetof(DelMarTrackBase_PreSplineSegmentGenerated, SplineComp) == 0x000000, "Member 'DelMarTrackBase_PreSplineSegmentGenerated::SplineComp' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_PreSplineSegmentGenerated, PointIndex) == 0x000008, "Member 'DelMarTrackBase_PreSplineSegmentGenerated::PointIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.SetTrackTypeTagAtIndex
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackBase_SetTrackTypeTagAtIndex final
{
public:
	int32                                         SplineIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_SetTrackTypeTagAtIndex) == 0x000004, "Wrong alignment on DelMarTrackBase_SetTrackTypeTagAtIndex");
static_assert(sizeof(DelMarTrackBase_SetTrackTypeTagAtIndex) == 0x000008, "Wrong size on DelMarTrackBase_SetTrackTypeTagAtIndex");
static_assert(offsetof(DelMarTrackBase_SetTrackTypeTagAtIndex, SplineIndex) == 0x000000, "Member 'DelMarTrackBase_SetTrackTypeTagAtIndex::SplineIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_SetTrackTypeTagAtIndex, tag) == 0x000004, "Member 'DelMarTrackBase_SetTrackTypeTagAtIndex::tag' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.ForceValidOOBTube
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackBase_ForceValidOOBTube final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_ForceValidOOBTube) == 0x000001, "Wrong alignment on DelMarTrackBase_ForceValidOOBTube");
static_assert(sizeof(DelMarTrackBase_ForceValidOOBTube) == 0x000001, "Wrong size on DelMarTrackBase_ForceValidOOBTube");
static_assert(offsetof(DelMarTrackBase_ForceValidOOBTube, ReturnValue) == 0x000000, "Member 'DelMarTrackBase_ForceValidOOBTube::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.ForceValidTrack
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackBase_ForceValidTrack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_ForceValidTrack) == 0x000001, "Wrong alignment on DelMarTrackBase_ForceValidTrack");
static_assert(sizeof(DelMarTrackBase_ForceValidTrack) == 0x000001, "Wrong size on DelMarTrackBase_ForceValidTrack");
static_assert(offsetof(DelMarTrackBase_ForceValidTrack, ReturnValue) == 0x000000, "Member 'DelMarTrackBase_ForceValidTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetDistanceRangeFromPointRange
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_GetDistanceRangeFromPointRange final
{
public:
	struct FDelMarTrackPointIndexRange            InRange;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarTrackPointDistanceRange         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetDistanceRangeFromPointRange) == 0x000004, "Wrong alignment on DelMarTrackBase_GetDistanceRangeFromPointRange");
static_assert(sizeof(DelMarTrackBase_GetDistanceRangeFromPointRange) == 0x000010, "Wrong size on DelMarTrackBase_GetDistanceRangeFromPointRange");
static_assert(offsetof(DelMarTrackBase_GetDistanceRangeFromPointRange, InRange) == 0x000000, "Member 'DelMarTrackBase_GetDistanceRangeFromPointRange::InRange' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetDistanceRangeFromPointRange, ReturnValue) == 0x000008, "Member 'DelMarTrackBase_GetDistanceRangeFromPointRange::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetEndCapClass
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_GetEndCapClass final
{
public:
	int32                                         SplineIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetEndCapClass) == 0x000008, "Wrong alignment on DelMarTrackBase_GetEndCapClass");
static_assert(sizeof(DelMarTrackBase_GetEndCapClass) == 0x000010, "Wrong size on DelMarTrackBase_GetEndCapClass");
static_assert(offsetof(DelMarTrackBase_GetEndCapClass, SplineIndex) == 0x000000, "Member 'DelMarTrackBase_GetEndCapClass::SplineIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetEndCapClass, ReturnValue) == 0x000008, "Member 'DelMarTrackBase_GetEndCapClass::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetForwardDistance
// 0x000C (0x000C - 0x0000)
struct DelMarTrackBase_GetForwardDistance final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetForwardDistance) == 0x000004, "Wrong alignment on DelMarTrackBase_GetForwardDistance");
static_assert(sizeof(DelMarTrackBase_GetForwardDistance) == 0x00000C, "Wrong size on DelMarTrackBase_GetForwardDistance");
static_assert(offsetof(DelMarTrackBase_GetForwardDistance, Start) == 0x000000, "Member 'DelMarTrackBase_GetForwardDistance::Start' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetForwardDistance, End) == 0x000004, "Member 'DelMarTrackBase_GetForwardDistance::End' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetForwardDistance, ReturnValue) == 0x000008, "Member 'DelMarTrackBase_GetForwardDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetLoopDistance
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackBase_GetLoopDistance final
{
public:
	float                                         InTotalDistance;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetLoopDistance) == 0x000004, "Wrong alignment on DelMarTrackBase_GetLoopDistance");
static_assert(sizeof(DelMarTrackBase_GetLoopDistance) == 0x000008, "Wrong size on DelMarTrackBase_GetLoopDistance");
static_assert(offsetof(DelMarTrackBase_GetLoopDistance, InTotalDistance) == 0x000000, "Member 'DelMarTrackBase_GetLoopDistance::InTotalDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetLoopDistance, ReturnValue) == 0x000004, "Member 'DelMarTrackBase_GetLoopDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetMetaDataAtSplinePoint
// 0x0088 (0x0088 - 0x0000)
struct DelMarTrackBase_GetMetaDataAtSplinePoint final
{
public:
	int32                                         SplineIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarSplinePointMetaData             ReturnValue;                                       // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetMetaDataAtSplinePoint) == 0x000008, "Wrong alignment on DelMarTrackBase_GetMetaDataAtSplinePoint");
static_assert(sizeof(DelMarTrackBase_GetMetaDataAtSplinePoint) == 0x000088, "Wrong size on DelMarTrackBase_GetMetaDataAtSplinePoint");
static_assert(offsetof(DelMarTrackBase_GetMetaDataAtSplinePoint, SplineIndex) == 0x000000, "Member 'DelMarTrackBase_GetMetaDataAtSplinePoint::SplineIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetMetaDataAtSplinePoint, ReturnValue) == 0x000008, "Member 'DelMarTrackBase_GetMetaDataAtSplinePoint::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetNextSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackBase_GetNextSplinePoint final
{
public:
	int32                                         InSplinePoint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetNextSplinePoint) == 0x000004, "Wrong alignment on DelMarTrackBase_GetNextSplinePoint");
static_assert(sizeof(DelMarTrackBase_GetNextSplinePoint) == 0x000008, "Wrong size on DelMarTrackBase_GetNextSplinePoint");
static_assert(offsetof(DelMarTrackBase_GetNextSplinePoint, InSplinePoint) == 0x000000, "Member 'DelMarTrackBase_GetNextSplinePoint::InSplinePoint' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetNextSplinePoint, ReturnValue) == 0x000004, "Member 'DelMarTrackBase_GetNextSplinePoint::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetNextSplineSegment
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackBase_GetNextSplineSegment final
{
public:
	int32                                         InSplineSegmentIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetNextSplineSegment) == 0x000004, "Wrong alignment on DelMarTrackBase_GetNextSplineSegment");
static_assert(sizeof(DelMarTrackBase_GetNextSplineSegment) == 0x000008, "Wrong size on DelMarTrackBase_GetNextSplineSegment");
static_assert(offsetof(DelMarTrackBase_GetNextSplineSegment, InSplineSegmentIndex) == 0x000000, "Member 'DelMarTrackBase_GetNextSplineSegment::InSplineSegmentIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetNextSplineSegment, ReturnValue) == 0x000004, "Member 'DelMarTrackBase_GetNextSplineSegment::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetPreviousSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackBase_GetPreviousSplinePoint final
{
public:
	int32                                         InSplinePoint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetPreviousSplinePoint) == 0x000004, "Wrong alignment on DelMarTrackBase_GetPreviousSplinePoint");
static_assert(sizeof(DelMarTrackBase_GetPreviousSplinePoint) == 0x000008, "Wrong size on DelMarTrackBase_GetPreviousSplinePoint");
static_assert(offsetof(DelMarTrackBase_GetPreviousSplinePoint, InSplinePoint) == 0x000000, "Member 'DelMarTrackBase_GetPreviousSplinePoint::InSplinePoint' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetPreviousSplinePoint, ReturnValue) == 0x000004, "Member 'DelMarTrackBase_GetPreviousSplinePoint::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetPreviousSplineSegment
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackBase_GetPreviousSplineSegment final
{
public:
	int32                                         InSplineSegmentIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetPreviousSplineSegment) == 0x000004, "Wrong alignment on DelMarTrackBase_GetPreviousSplineSegment");
static_assert(sizeof(DelMarTrackBase_GetPreviousSplineSegment) == 0x000008, "Wrong size on DelMarTrackBase_GetPreviousSplineSegment");
static_assert(offsetof(DelMarTrackBase_GetPreviousSplineSegment, InSplineSegmentIndex) == 0x000000, "Member 'DelMarTrackBase_GetPreviousSplineSegment::InSplineSegmentIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetPreviousSplineSegment, ReturnValue) == 0x000004, "Member 'DelMarTrackBase_GetPreviousSplineSegment::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetSegmentClassAtSplinePoint
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_GetSegmentClassAtSplinePoint final
{
public:
	int32                                         SplineIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetSegmentClassAtSplinePoint) == 0x000008, "Wrong alignment on DelMarTrackBase_GetSegmentClassAtSplinePoint");
static_assert(sizeof(DelMarTrackBase_GetSegmentClassAtSplinePoint) == 0x000010, "Wrong size on DelMarTrackBase_GetSegmentClassAtSplinePoint");
static_assert(offsetof(DelMarTrackBase_GetSegmentClassAtSplinePoint, SplineIndex) == 0x000000, "Member 'DelMarTrackBase_GetSegmentClassAtSplinePoint::SplineIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetSegmentClassAtSplinePoint, ReturnValue) == 0x000008, "Member 'DelMarTrackBase_GetSegmentClassAtSplinePoint::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetSegmentTrackTypeTag
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackBase_GetSegmentTrackTypeTag final
{
public:
	int32                                         SplineIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetSegmentTrackTypeTag) == 0x000004, "Wrong alignment on DelMarTrackBase_GetSegmentTrackTypeTag");
static_assert(sizeof(DelMarTrackBase_GetSegmentTrackTypeTag) == 0x000008, "Wrong size on DelMarTrackBase_GetSegmentTrackTypeTag");
static_assert(offsetof(DelMarTrackBase_GetSegmentTrackTypeTag, SplineIndex) == 0x000000, "Member 'DelMarTrackBase_GetSegmentTrackTypeTag::SplineIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetSegmentTrackTypeTag, ReturnValue) == 0x000004, "Member 'DelMarTrackBase_GetSegmentTrackTypeTag::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetStartCapClass
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_GetStartCapClass final
{
public:
	int32                                         SplineIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetStartCapClass) == 0x000008, "Wrong alignment on DelMarTrackBase_GetStartCapClass");
static_assert(sizeof(DelMarTrackBase_GetStartCapClass) == 0x000010, "Wrong size on DelMarTrackBase_GetStartCapClass");
static_assert(offsetof(DelMarTrackBase_GetStartCapClass, SplineIndex) == 0x000000, "Member 'DelMarTrackBase_GetStartCapClass::SplineIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetStartCapClass, ReturnValue) == 0x000008, "Member 'DelMarTrackBase_GetStartCapClass::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.GetTransitionSegmentClass
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_GetTransitionSegmentClass final
{
public:
	int32                                         FromSplineIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToSplineIndex;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_GetTransitionSegmentClass) == 0x000008, "Wrong alignment on DelMarTrackBase_GetTransitionSegmentClass");
static_assert(sizeof(DelMarTrackBase_GetTransitionSegmentClass) == 0x000010, "Wrong size on DelMarTrackBase_GetTransitionSegmentClass");
static_assert(offsetof(DelMarTrackBase_GetTransitionSegmentClass, FromSplineIndex) == 0x000000, "Member 'DelMarTrackBase_GetTransitionSegmentClass::FromSplineIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetTransitionSegmentClass, ToSplineIndex) == 0x000004, "Member 'DelMarTrackBase_GetTransitionSegmentClass::ToSplineIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_GetTransitionSegmentClass, ReturnValue) == 0x000008, "Member 'DelMarTrackBase_GetTransitionSegmentClass::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.IsCosmetic
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackBase_IsCosmetic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_IsCosmetic) == 0x000001, "Wrong alignment on DelMarTrackBase_IsCosmetic");
static_assert(sizeof(DelMarTrackBase_IsCosmetic) == 0x000001, "Wrong size on DelMarTrackBase_IsCosmetic");
static_assert(offsetof(DelMarTrackBase_IsCosmetic, ReturnValue) == 0x000000, "Member 'DelMarTrackBase_IsCosmetic::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.IsDistanceWithinRange
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackBase_IsDistanceWithinRange final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackBase_IsDistanceWithinRange) == 0x000004, "Wrong alignment on DelMarTrackBase_IsDistanceWithinRange");
static_assert(sizeof(DelMarTrackBase_IsDistanceWithinRange) == 0x000010, "Wrong size on DelMarTrackBase_IsDistanceWithinRange");
static_assert(offsetof(DelMarTrackBase_IsDistanceWithinRange, InDistance) == 0x000000, "Member 'DelMarTrackBase_IsDistanceWithinRange::InDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_IsDistanceWithinRange, StartDistance) == 0x000004, "Member 'DelMarTrackBase_IsDistanceWithinRange::StartDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_IsDistanceWithinRange, EndDistance) == 0x000008, "Member 'DelMarTrackBase_IsDistanceWithinRange::EndDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_IsDistanceWithinRange, ReturnValue) == 0x00000C, "Member 'DelMarTrackBase_IsDistanceWithinRange::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.IsPointInOOBTube
// 0x0020 (0x0020 - 0x0000)
struct DelMarTrackBase_IsPointInOOBTube final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackBase_IsPointInOOBTube) == 0x000008, "Wrong alignment on DelMarTrackBase_IsPointInOOBTube");
static_assert(sizeof(DelMarTrackBase_IsPointInOOBTube) == 0x000020, "Wrong size on DelMarTrackBase_IsPointInOOBTube");
static_assert(offsetof(DelMarTrackBase_IsPointInOOBTube, Point) == 0x000000, "Member 'DelMarTrackBase_IsPointInOOBTube::Point' has a wrong offset!");
static_assert(offsetof(DelMarTrackBase_IsPointInOOBTube, ReturnValue) == 0x000018, "Member 'DelMarTrackBase_IsPointInOOBTube::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.IsPrimary
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackBase_IsPrimary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_IsPrimary) == 0x000001, "Wrong alignment on DelMarTrackBase_IsPrimary");
static_assert(sizeof(DelMarTrackBase_IsPrimary) == 0x000001, "Wrong size on DelMarTrackBase_IsPrimary");
static_assert(offsetof(DelMarTrackBase_IsPrimary, ReturnValue) == 0x000000, "Member 'DelMarTrackBase_IsPrimary::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.IsSecondary
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackBase_IsSecondary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_IsSecondary) == 0x000001, "Wrong alignment on DelMarTrackBase_IsSecondary");
static_assert(sizeof(DelMarTrackBase_IsSecondary) == 0x000001, "Wrong size on DelMarTrackBase_IsSecondary");
static_assert(offsetof(DelMarTrackBase_IsSecondary, ReturnValue) == 0x000000, "Member 'DelMarTrackBase_IsSecondary::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBase.IsTrackable
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackBase_IsTrackable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBase_IsTrackable) == 0x000001, "Wrong alignment on DelMarTrackBase_IsTrackable");
static_assert(sizeof(DelMarTrackBase_IsTrackable) == 0x000001, "Wrong size on DelMarTrackBase_IsTrackable");
static_assert(offsetof(DelMarTrackBase_IsTrackable, ReturnValue) == 0x000000, "Member 'DelMarTrackBase_IsTrackable::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrack.MergeTrack
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrack_MergeTrack final
{
public:
	class ADelMarTrack*                           OtherTrack;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MergeToEndPoint;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CopyFromStartPoint;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrack_MergeTrack) == 0x000008, "Wrong alignment on DelMarTrack_MergeTrack");
static_assert(sizeof(DelMarTrack_MergeTrack) == 0x000010, "Wrong size on DelMarTrack_MergeTrack");
static_assert(offsetof(DelMarTrack_MergeTrack, OtherTrack) == 0x000000, "Member 'DelMarTrack_MergeTrack::OtherTrack' has a wrong offset!");
static_assert(offsetof(DelMarTrack_MergeTrack, MergeToEndPoint) == 0x000008, "Member 'DelMarTrack_MergeTrack::MergeToEndPoint' has a wrong offset!");
static_assert(offsetof(DelMarTrack_MergeTrack, CopyFromStartPoint) == 0x000009, "Member 'DelMarTrack_MergeTrack::CopyFromStartPoint' has a wrong offset!");
static_assert(offsetof(DelMarTrack_MergeTrack, ReturnValue) == 0x00000A, "Member 'DelMarTrack_MergeTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrack.SplitTrackAtPoint
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrack_SplitTrackAtPoint final
{
public:
	int32                                         SplitAtPoint;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrack_SplitTrackAtPoint) == 0x000004, "Wrong alignment on DelMarTrack_SplitTrackAtPoint");
static_assert(sizeof(DelMarTrack_SplitTrackAtPoint) == 0x000008, "Wrong size on DelMarTrack_SplitTrackAtPoint");
static_assert(offsetof(DelMarTrack_SplitTrackAtPoint, SplitAtPoint) == 0x000000, "Member 'DelMarTrack_SplitTrackAtPoint::SplitAtPoint' has a wrong offset!");
static_assert(offsetof(DelMarTrack_SplitTrackAtPoint, ReturnValue) == 0x000004, "Member 'DelMarTrack_SplitTrackAtPoint::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrack.GetParentEndDistance
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrack_GetParentEndDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrack_GetParentEndDistance) == 0x000004, "Wrong alignment on DelMarTrack_GetParentEndDistance");
static_assert(sizeof(DelMarTrack_GetParentEndDistance) == 0x000004, "Wrong size on DelMarTrack_GetParentEndDistance");
static_assert(offsetof(DelMarTrack_GetParentEndDistance, ReturnValue) == 0x000000, "Member 'DelMarTrack_GetParentEndDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrack.GetParentStartDistance
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrack_GetParentStartDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrack_GetParentStartDistance) == 0x000004, "Wrong alignment on DelMarTrack_GetParentStartDistance");
static_assert(sizeof(DelMarTrack_GetParentStartDistance) == 0x000004, "Wrong size on DelMarTrack_GetParentStartDistance");
static_assert(offsetof(DelMarTrack_GetParentStartDistance, ReturnValue) == 0x000000, "Member 'DelMarTrack_GetParentStartDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrack.GetPrimaryDistance
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrack_GetPrimaryDistance final
{
public:
	float                                         DistanceOnThisTrack;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrack_GetPrimaryDistance) == 0x000004, "Wrong alignment on DelMarTrack_GetPrimaryDistance");
static_assert(sizeof(DelMarTrack_GetPrimaryDistance) == 0x000008, "Wrong size on DelMarTrack_GetPrimaryDistance");
static_assert(offsetof(DelMarTrack_GetPrimaryDistance, DistanceOnThisTrack) == 0x000000, "Member 'DelMarTrack_GetPrimaryDistance::DistanceOnThisTrack' has a wrong offset!");
static_assert(offsetof(DelMarTrack_GetPrimaryDistance, ReturnValue) == 0x000004, "Member 'DelMarTrack_GetPrimaryDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrack.GetPrimaryEndDistance
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrack_GetPrimaryEndDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrack_GetPrimaryEndDistance) == 0x000004, "Wrong alignment on DelMarTrack_GetPrimaryEndDistance");
static_assert(sizeof(DelMarTrack_GetPrimaryEndDistance) == 0x000004, "Wrong size on DelMarTrack_GetPrimaryEndDistance");
static_assert(offsetof(DelMarTrack_GetPrimaryEndDistance, ReturnValue) == 0x000000, "Member 'DelMarTrack_GetPrimaryEndDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrack.GetPrimaryStartDistance
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrack_GetPrimaryStartDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrack_GetPrimaryStartDistance) == 0x000004, "Wrong alignment on DelMarTrack_GetPrimaryStartDistance");
static_assert(sizeof(DelMarTrack_GetPrimaryStartDistance) == 0x000004, "Wrong size on DelMarTrack_GetPrimaryStartDistance");
static_assert(offsetof(DelMarTrack_GetPrimaryStartDistance, ReturnValue) == 0x000000, "Member 'DelMarTrack_GetPrimaryStartDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrack.GetSecondaryEndTrack
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrack_GetSecondaryEndTrack final
{
public:
	class ADelMarTrack*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrack_GetSecondaryEndTrack) == 0x000008, "Wrong alignment on DelMarTrack_GetSecondaryEndTrack");
static_assert(sizeof(DelMarTrack_GetSecondaryEndTrack) == 0x000008, "Wrong size on DelMarTrack_GetSecondaryEndTrack");
static_assert(offsetof(DelMarTrack_GetSecondaryEndTrack, ReturnValue) == 0x000000, "Member 'DelMarTrack_GetSecondaryEndTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrack.GetSecondaryStartTrack
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrack_GetSecondaryStartTrack final
{
public:
	class ADelMarTrack*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrack_GetSecondaryStartTrack) == 0x000008, "Wrong alignment on DelMarTrack_GetSecondaryStartTrack");
static_assert(sizeof(DelMarTrack_GetSecondaryStartTrack) == 0x000008, "Wrong size on DelMarTrack_GetSecondaryStartTrack");
static_assert(offsetof(DelMarTrack_GetSecondaryStartTrack, ReturnValue) == 0x000000, "Member 'DelMarTrack_GetSecondaryStartTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBlueprintFunctionLibrary.IsTrackRadiusCheckDisabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackBlueprintFunctionLibrary_IsTrackRadiusCheckDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBlueprintFunctionLibrary_IsTrackRadiusCheckDisabled) == 0x000001, "Wrong alignment on DelMarTrackBlueprintFunctionLibrary_IsTrackRadiusCheckDisabled");
static_assert(sizeof(DelMarTrackBlueprintFunctionLibrary_IsTrackRadiusCheckDisabled) == 0x000001, "Wrong size on DelMarTrackBlueprintFunctionLibrary_IsTrackRadiusCheckDisabled");
static_assert(offsetof(DelMarTrackBlueprintFunctionLibrary_IsTrackRadiusCheckDisabled, ReturnValue) == 0x000000, "Member 'DelMarTrackBlueprintFunctionLibrary_IsTrackRadiusCheckDisabled::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackBlueprintFunctionLibrary.TrackPositionDebugDrawEnabled
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackBlueprintFunctionLibrary_TrackPositionDebugDrawEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackBlueprintFunctionLibrary_TrackPositionDebugDrawEnabled) == 0x000001, "Wrong alignment on DelMarTrackBlueprintFunctionLibrary_TrackPositionDebugDrawEnabled");
static_assert(sizeof(DelMarTrackBlueprintFunctionLibrary_TrackPositionDebugDrawEnabled) == 0x000001, "Wrong size on DelMarTrackBlueprintFunctionLibrary_TrackPositionDebugDrawEnabled");
static_assert(offsetof(DelMarTrackBlueprintFunctionLibrary_TrackPositionDebugDrawEnabled, ReturnValue) == 0x000000, "Member 'DelMarTrackBlueprintFunctionLibrary_TrackPositionDebugDrawEnabled::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSegmentBase.ContainsDistanceAlongSpline
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSegmentBase_ContainsDistanceAlongSpline final
{
public:
	float                                         DistanceAlongSpline;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackSegmentBase_ContainsDistanceAlongSpline) == 0x000004, "Wrong alignment on DelMarTrackSegmentBase_ContainsDistanceAlongSpline");
static_assert(sizeof(DelMarTrackSegmentBase_ContainsDistanceAlongSpline) == 0x000008, "Wrong size on DelMarTrackSegmentBase_ContainsDistanceAlongSpline");
static_assert(offsetof(DelMarTrackSegmentBase_ContainsDistanceAlongSpline, DistanceAlongSpline) == 0x000000, "Member 'DelMarTrackSegmentBase_ContainsDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackSegmentBase_ContainsDistanceAlongSpline, ReturnValue) == 0x000004, "Member 'DelMarTrackSegmentBase_ContainsDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSegmentBase.GetSplineDistanceRange
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSegmentBase_GetSplineDistanceRange final
{
public:
	struct FDelMarTrackPointDistanceRange         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSegmentBase_GetSplineDistanceRange) == 0x000004, "Wrong alignment on DelMarTrackSegmentBase_GetSplineDistanceRange");
static_assert(sizeof(DelMarTrackSegmentBase_GetSplineDistanceRange) == 0x000008, "Wrong size on DelMarTrackSegmentBase_GetSplineDistanceRange");
static_assert(offsetof(DelMarTrackSegmentBase_GetSplineDistanceRange, ReturnValue) == 0x000000, "Member 'DelMarTrackSegmentBase_GetSplineDistanceRange::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSegmentBase.GetSplineMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSegmentBase_GetSplineMeshComponent final
{
public:
	class USplineMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSegmentBase_GetSplineMeshComponent) == 0x000008, "Wrong alignment on DelMarTrackSegmentBase_GetSplineMeshComponent");
static_assert(sizeof(DelMarTrackSegmentBase_GetSplineMeshComponent) == 0x000008, "Wrong size on DelMarTrackSegmentBase_GetSplineMeshComponent");
static_assert(offsetof(DelMarTrackSegmentBase_GetSplineMeshComponent, ReturnValue) == 0x000000, "Member 'DelMarTrackSegmentBase_GetSplineMeshComponent::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.OnAttachedTrackPointAdded
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackOobTube_OnAttachedTrackPointAdded final
{
public:
	class UDelMarTrackSplineComponent*            InSpline;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackOobTube_OnAttachedTrackPointAdded) == 0x000008, "Wrong alignment on DelMarTrackOobTube_OnAttachedTrackPointAdded");
static_assert(sizeof(DelMarTrackOobTube_OnAttachedTrackPointAdded) == 0x000010, "Wrong size on DelMarTrackOobTube_OnAttachedTrackPointAdded");
static_assert(offsetof(DelMarTrackOobTube_OnAttachedTrackPointAdded, InSpline) == 0x000000, "Member 'DelMarTrackOobTube_OnAttachedTrackPointAdded::InSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_OnAttachedTrackPointAdded, PointIndex) == 0x000008, "Member 'DelMarTrackOobTube_OnAttachedTrackPointAdded::PointIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.OnAttachedTrackPointChanged
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackOobTube_OnAttachedTrackPointChanged final
{
public:
	class UDelMarTrackSplineComponent*            InSpline;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackOobTube_OnAttachedTrackPointChanged) == 0x000008, "Wrong alignment on DelMarTrackOobTube_OnAttachedTrackPointChanged");
static_assert(sizeof(DelMarTrackOobTube_OnAttachedTrackPointChanged) == 0x000010, "Wrong size on DelMarTrackOobTube_OnAttachedTrackPointChanged");
static_assert(offsetof(DelMarTrackOobTube_OnAttachedTrackPointChanged, InSpline) == 0x000000, "Member 'DelMarTrackOobTube_OnAttachedTrackPointChanged::InSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_OnAttachedTrackPointChanged, PointIndex) == 0x000008, "Member 'DelMarTrackOobTube_OnAttachedTrackPointChanged::PointIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.OnAttachedTrackPointRemoved
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackOobTube_OnAttachedTrackPointRemoved final
{
public:
	class UDelMarTrackSplineComponent*            InSpline;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackOobTube_OnAttachedTrackPointRemoved) == 0x000008, "Wrong alignment on DelMarTrackOobTube_OnAttachedTrackPointRemoved");
static_assert(sizeof(DelMarTrackOobTube_OnAttachedTrackPointRemoved) == 0x000010, "Wrong size on DelMarTrackOobTube_OnAttachedTrackPointRemoved");
static_assert(offsetof(DelMarTrackOobTube_OnAttachedTrackPointRemoved, InSpline) == 0x000000, "Member 'DelMarTrackOobTube_OnAttachedTrackPointRemoved::InSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_OnAttachedTrackPointRemoved, PointIndex) == 0x000008, "Member 'DelMarTrackOobTube_OnAttachedTrackPointRemoved::PointIndex' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.OnConstructTubeMesh
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackOobTube_OnConstructTubeMesh final
{
public:
	class USplineMeshComponent*                   TubeMeshComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTransitionMesh;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTransitionIn;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackOobTube_OnConstructTubeMesh) == 0x000008, "Wrong alignment on DelMarTrackOobTube_OnConstructTubeMesh");
static_assert(sizeof(DelMarTrackOobTube_OnConstructTubeMesh) == 0x000010, "Wrong size on DelMarTrackOobTube_OnConstructTubeMesh");
static_assert(offsetof(DelMarTrackOobTube_OnConstructTubeMesh, TubeMeshComponent) == 0x000000, "Member 'DelMarTrackOobTube_OnConstructTubeMesh::TubeMeshComponent' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_OnConstructTubeMesh, bIsTransitionMesh) == 0x000008, "Member 'DelMarTrackOobTube_OnConstructTubeMesh::bIsTransitionMesh' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_OnConstructTubeMesh, bIsTransitionIn) == 0x000009, "Member 'DelMarTrackOobTube_OnConstructTubeMesh::bIsTransitionIn' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.DetermineTubeMeshTransitionType
// 0x000C (0x000C - 0x0000)
struct DelMarTrackOobTube_DetermineTubeMeshTransitionType final
{
public:
	int32                                         CurrentPointIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextPointIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarTrackOobTubeTransitionType             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackOobTube_DetermineTubeMeshTransitionType) == 0x000004, "Wrong alignment on DelMarTrackOobTube_DetermineTubeMeshTransitionType");
static_assert(sizeof(DelMarTrackOobTube_DetermineTubeMeshTransitionType) == 0x00000C, "Wrong size on DelMarTrackOobTube_DetermineTubeMeshTransitionType");
static_assert(offsetof(DelMarTrackOobTube_DetermineTubeMeshTransitionType, CurrentPointIndex) == 0x000000, "Member 'DelMarTrackOobTube_DetermineTubeMeshTransitionType::CurrentPointIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_DetermineTubeMeshTransitionType, NextPointIndex) == 0x000004, "Member 'DelMarTrackOobTube_DetermineTubeMeshTransitionType::NextPointIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_DetermineTubeMeshTransitionType, ReturnValue) == 0x000008, "Member 'DelMarTrackOobTube_DetermineTubeMeshTransitionType::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.GetSplinePointTagAtIndex
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTube_GetSplinePointTagAtIndex final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTube_GetSplinePointTagAtIndex) == 0x000004, "Wrong alignment on DelMarTrackOobTube_GetSplinePointTagAtIndex");
static_assert(sizeof(DelMarTrackOobTube_GetSplinePointTagAtIndex) == 0x000008, "Wrong size on DelMarTrackOobTube_GetSplinePointTagAtIndex");
static_assert(offsetof(DelMarTrackOobTube_GetSplinePointTagAtIndex, PointIndex) == 0x000000, "Member 'DelMarTrackOobTube_GetSplinePointTagAtIndex::PointIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_GetSplinePointTagAtIndex, ReturnValue) == 0x000004, "Member 'DelMarTrackOobTube_GetSplinePointTagAtIndex::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.HasTubeMeshAtDistance
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTube_HasTubeMeshAtDistance final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackOobTube_HasTubeMeshAtDistance) == 0x000004, "Wrong alignment on DelMarTrackOobTube_HasTubeMeshAtDistance");
static_assert(sizeof(DelMarTrackOobTube_HasTubeMeshAtDistance) == 0x000008, "Wrong size on DelMarTrackOobTube_HasTubeMeshAtDistance");
static_assert(offsetof(DelMarTrackOobTube_HasTubeMeshAtDistance, InDistance) == 0x000000, "Member 'DelMarTrackOobTube_HasTubeMeshAtDistance::InDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_HasTubeMeshAtDistance, ReturnValue) == 0x000004, "Member 'DelMarTrackOobTube_HasTubeMeshAtDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.IsAttachedToPrimaryTrack
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackOobTube_IsAttachedToPrimaryTrack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTube_IsAttachedToPrimaryTrack) == 0x000001, "Wrong alignment on DelMarTrackOobTube_IsAttachedToPrimaryTrack");
static_assert(sizeof(DelMarTrackOobTube_IsAttachedToPrimaryTrack) == 0x000001, "Wrong size on DelMarTrackOobTube_IsAttachedToPrimaryTrack");
static_assert(offsetof(DelMarTrackOobTube_IsAttachedToPrimaryTrack, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTube_IsAttachedToPrimaryTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.IsAttachedToSecondaryTrack
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackOobTube_IsAttachedToSecondaryTrack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTube_IsAttachedToSecondaryTrack) == 0x000001, "Wrong alignment on DelMarTrackOobTube_IsAttachedToSecondaryTrack");
static_assert(sizeof(DelMarTrackOobTube_IsAttachedToSecondaryTrack) == 0x000001, "Wrong size on DelMarTrackOobTube_IsAttachedToSecondaryTrack");
static_assert(offsetof(DelMarTrackOobTube_IsAttachedToSecondaryTrack, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTube_IsAttachedToSecondaryTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTube.IsSplinePointOffset
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTube_IsSplinePointOffset final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackOobTube_IsSplinePointOffset) == 0x000004, "Wrong alignment on DelMarTrackOobTube_IsSplinePointOffset");
static_assert(sizeof(DelMarTrackOobTube_IsSplinePointOffset) == 0x000008, "Wrong size on DelMarTrackOobTube_IsSplinePointOffset");
static_assert(offsetof(DelMarTrackOobTube_IsSplinePointOffset, PointIndex) == 0x000000, "Member 'DelMarTrackOobTube_IsSplinePointOffset::PointIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTube_IsSplinePointOffset, ReturnValue) == 0x000004, "Member 'DelMarTrackOobTube_IsSplinePointOffset::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeProxy.GetAttachedTrack
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTubeProxy_GetAttachedTrack final
{
public:
	class ADelMarTrack*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeProxy_GetAttachedTrack) == 0x000008, "Wrong alignment on DelMarTrackOobTubeProxy_GetAttachedTrack");
static_assert(sizeof(DelMarTrackOobTubeProxy_GetAttachedTrack) == 0x000008, "Wrong size on DelMarTrackOobTubeProxy_GetAttachedTrack");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetAttachedTrack, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTubeProxy_GetAttachedTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeProxy.GetDefaultSubsectionCount
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrackOobTubeProxy_GetDefaultSubsectionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeProxy_GetDefaultSubsectionCount) == 0x000004, "Wrong alignment on DelMarTrackOobTubeProxy_GetDefaultSubsectionCount");
static_assert(sizeof(DelMarTrackOobTubeProxy_GetDefaultSubsectionCount) == 0x000004, "Wrong size on DelMarTrackOobTubeProxy_GetDefaultSubsectionCount");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetDefaultSubsectionCount, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTubeProxy_GetDefaultSubsectionCount::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeProxy.GetDefaultTransitionMeshLength
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTubeProxy_GetDefaultTransitionMeshLength final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeProxy_GetDefaultTransitionMeshLength) == 0x000008, "Wrong alignment on DelMarTrackOobTubeProxy_GetDefaultTransitionMeshLength");
static_assert(sizeof(DelMarTrackOobTubeProxy_GetDefaultTransitionMeshLength) == 0x000008, "Wrong size on DelMarTrackOobTubeProxy_GetDefaultTransitionMeshLength");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetDefaultTransitionMeshLength, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTubeProxy_GetDefaultTransitionMeshLength::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeProxy.GetMinimumMeshScale
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTubeProxy_GetMinimumMeshScale final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeProxy_GetMinimumMeshScale) == 0x000008, "Wrong alignment on DelMarTrackOobTubeProxy_GetMinimumMeshScale");
static_assert(sizeof(DelMarTrackOobTubeProxy_GetMinimumMeshScale) == 0x000008, "Wrong size on DelMarTrackOobTubeProxy_GetMinimumMeshScale");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetMinimumMeshScale, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTubeProxy_GetMinimumMeshScale::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeProxy.GetOobTubeActor
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTubeProxy_GetOobTubeActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeProxy_GetOobTubeActor) == 0x000008, "Wrong alignment on DelMarTrackOobTubeProxy_GetOobTubeActor");
static_assert(sizeof(DelMarTrackOobTubeProxy_GetOobTubeActor) == 0x000008, "Wrong size on DelMarTrackOobTubeProxy_GetOobTubeActor");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetOobTubeActor, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTubeProxy_GetOobTubeActor::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeProxy.GetSmallestSubsectionLength
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTubeProxy_GetSmallestSubsectionLength final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeProxy_GetSmallestSubsectionLength) == 0x000008, "Wrong alignment on DelMarTrackOobTubeProxy_GetSmallestSubsectionLength");
static_assert(sizeof(DelMarTrackOobTubeProxy_GetSmallestSubsectionLength) == 0x000008, "Wrong size on DelMarTrackOobTubeProxy_GetSmallestSubsectionLength");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetSmallestSubsectionLength, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTubeProxy_GetSmallestSubsectionLength::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeProxy.GetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTubeProxy_GetSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeProxy_GetSplineComponent) == 0x000008, "Wrong alignment on DelMarTrackOobTubeProxy_GetSplineComponent");
static_assert(sizeof(DelMarTrackOobTubeProxy_GetSplineComponent) == 0x000008, "Wrong size on DelMarTrackOobTubeProxy_GetSplineComponent");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetSplineComponent, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTubeProxy_GetSplineComponent::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeProxy.GetSplineMetadata
// 0x0030 (0x0030 - 0x0000)
struct DelMarTrackOobTubeProxy_GetSplineMetadata final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarTrackOobTubePointMetaData       ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeProxy_GetSplineMetadata) == 0x000008, "Wrong alignment on DelMarTrackOobTubeProxy_GetSplineMetadata");
static_assert(sizeof(DelMarTrackOobTubeProxy_GetSplineMetadata) == 0x000030, "Wrong size on DelMarTrackOobTubeProxy_GetSplineMetadata");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetSplineMetadata, PointIndex) == 0x000000, "Member 'DelMarTrackOobTubeProxy_GetSplineMetadata::PointIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetSplineMetadata, ReturnValue) == 0x000008, "Member 'DelMarTrackOobTubeProxy_GetSplineMetadata::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeProxy.GetSplineVisualizationOffset
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTubeProxy_GetSplineVisualizationOffset final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeProxy_GetSplineVisualizationOffset) == 0x000008, "Wrong alignment on DelMarTrackOobTubeProxy_GetSplineVisualizationOffset");
static_assert(sizeof(DelMarTrackOobTubeProxy_GetSplineVisualizationOffset) == 0x000008, "Wrong size on DelMarTrackOobTubeProxy_GetSplineVisualizationOffset");
static_assert(offsetof(DelMarTrackOobTubeProxy_GetSplineVisualizationOffset, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTubeProxy_GetSplineVisualizationOffset::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeCollectionProxy.GetOobTubeProxy
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackOobTubeCollectionProxy_GetOobTubeProxy final
{
public:
	int32                                         OobTubeIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDelMarTrackOobTubeProxy*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeCollectionProxy_GetOobTubeProxy) == 0x000008, "Wrong alignment on DelMarTrackOobTubeCollectionProxy_GetOobTubeProxy");
static_assert(sizeof(DelMarTrackOobTubeCollectionProxy_GetOobTubeProxy) == 0x000010, "Wrong size on DelMarTrackOobTubeCollectionProxy_GetOobTubeProxy");
static_assert(offsetof(DelMarTrackOobTubeCollectionProxy_GetOobTubeProxy, OobTubeIndex) == 0x000000, "Member 'DelMarTrackOobTubeCollectionProxy_GetOobTubeProxy::OobTubeIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackOobTubeCollectionProxy_GetOobTubeProxy, ReturnValue) == 0x000008, "Member 'DelMarTrackOobTubeCollectionProxy_GetOobTubeProxy::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeCollectionProxy.RegisterOobTube
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackOobTubeCollectionProxy_RegisterOobTube final
{
public:
	class AActor*                                 OobTubeActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeCollectionProxy_RegisterOobTube) == 0x000008, "Wrong alignment on DelMarTrackOobTubeCollectionProxy_RegisterOobTube");
static_assert(sizeof(DelMarTrackOobTubeCollectionProxy_RegisterOobTube) == 0x000008, "Wrong size on DelMarTrackOobTubeCollectionProxy_RegisterOobTube");
static_assert(offsetof(DelMarTrackOobTubeCollectionProxy_RegisterOobTube, OobTubeActor) == 0x000000, "Member 'DelMarTrackOobTubeCollectionProxy_RegisterOobTube::OobTubeActor' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackOobTubeCollectionProxy.GetNumOobTubeProxies
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrackOobTubeCollectionProxy_GetNumOobTubeProxies final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackOobTubeCollectionProxy_GetNumOobTubeProxies) == 0x000004, "Wrong alignment on DelMarTrackOobTubeCollectionProxy_GetNumOobTubeProxies");
static_assert(sizeof(DelMarTrackOobTubeCollectionProxy_GetNumOobTubeProxies) == 0x000004, "Wrong size on DelMarTrackOobTubeCollectionProxy_GetNumOobTubeProxies");
static_assert(offsetof(DelMarTrackOobTubeCollectionProxy_GetNumOobTubeProxies, ReturnValue) == 0x000000, "Member 'DelMarTrackOobTubeCollectionProxy_GetNumOobTubeProxies::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPaletteTrackType.AddSegmentClassActorToStyle
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackPaletteTrackType_AddSegmentClassActorToStyle final
{
public:
	struct FGameplayTag                           StyleTag;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SegmentClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPaletteTrackType_AddSegmentClassActorToStyle) == 0x000008, "Wrong alignment on DelMarTrackPaletteTrackType_AddSegmentClassActorToStyle");
static_assert(sizeof(DelMarTrackPaletteTrackType_AddSegmentClassActorToStyle) == 0x000010, "Wrong size on DelMarTrackPaletteTrackType_AddSegmentClassActorToStyle");
static_assert(offsetof(DelMarTrackPaletteTrackType_AddSegmentClassActorToStyle, StyleTag) == 0x000000, "Member 'DelMarTrackPaletteTrackType_AddSegmentClassActorToStyle::StyleTag' has a wrong offset!");
static_assert(offsetof(DelMarTrackPaletteTrackType_AddSegmentClassActorToStyle, SegmentClass) == 0x000008, "Member 'DelMarTrackPaletteTrackType_AddSegmentClassActorToStyle::SegmentClass' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPerformanceScrubber.TimelineTickFloatCallback
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrackPerformanceScrubber_TimelineTickFloatCallback final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPerformanceScrubber_TimelineTickFloatCallback) == 0x000004, "Wrong alignment on DelMarTrackPerformanceScrubber_TimelineTickFloatCallback");
static_assert(sizeof(DelMarTrackPerformanceScrubber_TimelineTickFloatCallback) == 0x000004, "Wrong size on DelMarTrackPerformanceScrubber_TimelineTickFloatCallback");
static_assert(offsetof(DelMarTrackPerformanceScrubber_TimelineTickFloatCallback, Progress) == 0x000000, "Member 'DelMarTrackPerformanceScrubber_TimelineTickFloatCallback::Progress' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPerformanceScrubber.UpdateSplines
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackPerformanceScrubber_UpdateSplines final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPerformanceScrubber_UpdateSplines) == 0x000008, "Wrong alignment on DelMarTrackPerformanceScrubber_UpdateSplines");
static_assert(sizeof(DelMarTrackPerformanceScrubber_UpdateSplines) == 0x000010, "Wrong size on DelMarTrackPerformanceScrubber_UpdateSplines");
static_assert(offsetof(DelMarTrackPerformanceScrubber_UpdateSplines, ReturnValue) == 0x000000, "Member 'DelMarTrackPerformanceScrubber_UpdateSplines::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.SetActiveTrack
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackPositionComponent_SetActiveTrack final
{
public:
	class ADelMarTrackBase*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrackSegmentIndex;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackPositionComponent_SetActiveTrack) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_SetActiveTrack");
static_assert(sizeof(DelMarTrackPositionComponent_SetActiveTrack) == 0x000010, "Wrong size on DelMarTrackPositionComponent_SetActiveTrack");
static_assert(offsetof(DelMarTrackPositionComponent_SetActiveTrack, Track) == 0x000000, "Member 'DelMarTrackPositionComponent_SetActiveTrack::Track' has a wrong offset!");
static_assert(offsetof(DelMarTrackPositionComponent_SetActiveTrack, TrackSegmentIndex) == 0x000008, "Member 'DelMarTrackPositionComponent_SetActiveTrack::TrackSegmentIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackPositionComponent_SetActiveTrack, bForce) == 0x00000C, "Member 'DelMarTrackPositionComponent_SetActiveTrack::bForce' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetActiveSegmentIndex
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrackPositionComponent_GetActiveSegmentIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetActiveSegmentIndex) == 0x000004, "Wrong alignment on DelMarTrackPositionComponent_GetActiveSegmentIndex");
static_assert(sizeof(DelMarTrackPositionComponent_GetActiveSegmentIndex) == 0x000004, "Wrong size on DelMarTrackPositionComponent_GetActiveSegmentIndex");
static_assert(offsetof(DelMarTrackPositionComponent_GetActiveSegmentIndex, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetActiveSegmentIndex::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetActiveTrack
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackPositionComponent_GetActiveTrack final
{
public:
	class ADelMarTrackBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetActiveTrack) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetActiveTrack");
static_assert(sizeof(DelMarTrackPositionComponent_GetActiveTrack) == 0x000008, "Wrong size on DelMarTrackPositionComponent_GetActiveTrack");
static_assert(offsetof(DelMarTrackPositionComponent_GetActiveTrack, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetActiveTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetActiveTrackDistance
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrackPositionComponent_GetActiveTrackDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetActiveTrackDistance) == 0x000004, "Wrong alignment on DelMarTrackPositionComponent_GetActiveTrackDistance");
static_assert(sizeof(DelMarTrackPositionComponent_GetActiveTrackDistance) == 0x000004, "Wrong size on DelMarTrackPositionComponent_GetActiveTrackDistance");
static_assert(offsetof(DelMarTrackPositionComponent_GetActiveTrackDistance, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetActiveTrackDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetActiveTrackPosition
// 0x0020 (0x0020 - 0x0000)
struct DelMarTrackPositionComponent_GetActiveTrackPosition final
{
public:
	struct FTrackPosition                         ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetActiveTrackPosition) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetActiveTrackPosition");
static_assert(sizeof(DelMarTrackPositionComponent_GetActiveTrackPosition) == 0x000020, "Wrong size on DelMarTrackPositionComponent_GetActiveTrackPosition");
static_assert(offsetof(DelMarTrackPositionComponent_GetActiveTrackPosition, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetActiveTrackPosition::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetActiveTrackRadius
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrackPositionComponent_GetActiveTrackRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetActiveTrackRadius) == 0x000004, "Wrong alignment on DelMarTrackPositionComponent_GetActiveTrackRadius");
static_assert(sizeof(DelMarTrackPositionComponent_GetActiveTrackRadius) == 0x000004, "Wrong size on DelMarTrackPositionComponent_GetActiveTrackRadius");
static_assert(offsetof(DelMarTrackPositionComponent_GetActiveTrackRadius, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetActiveTrackRadius::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetDistanceAlongSpline
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrackPositionComponent_GetDistanceAlongSpline final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetDistanceAlongSpline) == 0x000004, "Wrong alignment on DelMarTrackPositionComponent_GetDistanceAlongSpline");
static_assert(sizeof(DelMarTrackPositionComponent_GetDistanceAlongSpline) == 0x000004, "Wrong size on DelMarTrackPositionComponent_GetDistanceAlongSpline");
static_assert(offsetof(DelMarTrackPositionComponent_GetDistanceAlongSpline, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetLastKnowGoodSplineLocation
// 0x0018 (0x0018 - 0x0000)
struct DelMarTrackPositionComponent_GetLastKnowGoodSplineLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetLastKnowGoodSplineLocation) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetLastKnowGoodSplineLocation");
static_assert(sizeof(DelMarTrackPositionComponent_GetLastKnowGoodSplineLocation) == 0x000018, "Wrong size on DelMarTrackPositionComponent_GetLastKnowGoodSplineLocation");
static_assert(offsetof(DelMarTrackPositionComponent_GetLastKnowGoodSplineLocation, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetLastKnowGoodSplineLocation::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetPrimaryDistance
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrackPositionComponent_GetPrimaryDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetPrimaryDistance) == 0x000004, "Wrong alignment on DelMarTrackPositionComponent_GetPrimaryDistance");
static_assert(sizeof(DelMarTrackPositionComponent_GetPrimaryDistance) == 0x000004, "Wrong size on DelMarTrackPositionComponent_GetPrimaryDistance");
static_assert(offsetof(DelMarTrackPositionComponent_GetPrimaryDistance, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetPrimaryDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetPrimaryTrack
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackPositionComponent_GetPrimaryTrack final
{
public:
	class ADelMarTrackBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetPrimaryTrack) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetPrimaryTrack");
static_assert(sizeof(DelMarTrackPositionComponent_GetPrimaryTrack) == 0x000008, "Wrong size on DelMarTrackPositionComponent_GetPrimaryTrack");
static_assert(offsetof(DelMarTrackPositionComponent_GetPrimaryTrack, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetPrimaryTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetPrimaryWorldLocationAlongSpline
// 0x0018 (0x0018 - 0x0000)
struct DelMarTrackPositionComponent_GetPrimaryWorldLocationAlongSpline final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetPrimaryWorldLocationAlongSpline) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetPrimaryWorldLocationAlongSpline");
static_assert(sizeof(DelMarTrackPositionComponent_GetPrimaryWorldLocationAlongSpline) == 0x000018, "Wrong size on DelMarTrackPositionComponent_GetPrimaryWorldLocationAlongSpline");
static_assert(offsetof(DelMarTrackPositionComponent_GetPrimaryWorldLocationAlongSpline, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetPrimaryWorldLocationAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetRawClosestSplineLocation
// 0x0018 (0x0018 - 0x0000)
struct DelMarTrackPositionComponent_GetRawClosestSplineLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetRawClosestSplineLocation) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetRawClosestSplineLocation");
static_assert(sizeof(DelMarTrackPositionComponent_GetRawClosestSplineLocation) == 0x000018, "Wrong size on DelMarTrackPositionComponent_GetRawClosestSplineLocation");
static_assert(offsetof(DelMarTrackPositionComponent_GetRawClosestSplineLocation, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetRawClosestSplineLocation::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetRawDistanceAlongSpline
// 0x0004 (0x0004 - 0x0000)
struct DelMarTrackPositionComponent_GetRawDistanceAlongSpline final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetRawDistanceAlongSpline) == 0x000004, "Wrong alignment on DelMarTrackPositionComponent_GetRawDistanceAlongSpline");
static_assert(sizeof(DelMarTrackPositionComponent_GetRawDistanceAlongSpline) == 0x000004, "Wrong size on DelMarTrackPositionComponent_GetRawDistanceAlongSpline");
static_assert(offsetof(DelMarTrackPositionComponent_GetRawDistanceAlongSpline, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetRawDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetTrackRadius
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackPositionComponent_GetTrackRadius final
{
public:
	const class ADelMarTrackBase*                 InTrack;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDistanceAlongTrack;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetTrackRadius) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetTrackRadius");
static_assert(sizeof(DelMarTrackPositionComponent_GetTrackRadius) == 0x000010, "Wrong size on DelMarTrackPositionComponent_GetTrackRadius");
static_assert(offsetof(DelMarTrackPositionComponent_GetTrackRadius, InTrack) == 0x000000, "Member 'DelMarTrackPositionComponent_GetTrackRadius::InTrack' has a wrong offset!");
static_assert(offsetof(DelMarTrackPositionComponent_GetTrackRadius, InDistanceAlongTrack) == 0x000008, "Member 'DelMarTrackPositionComponent_GetTrackRadius::InDistanceAlongTrack' has a wrong offset!");
static_assert(offsetof(DelMarTrackPositionComponent_GetTrackRadius, ReturnValue) == 0x00000C, "Member 'DelMarTrackPositionComponent_GetTrackRadius::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetWorldDirectionAlongSpline
// 0x0018 (0x0018 - 0x0000)
struct DelMarTrackPositionComponent_GetWorldDirectionAlongSpline final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetWorldDirectionAlongSpline) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetWorldDirectionAlongSpline");
static_assert(sizeof(DelMarTrackPositionComponent_GetWorldDirectionAlongSpline) == 0x000018, "Wrong size on DelMarTrackPositionComponent_GetWorldDirectionAlongSpline");
static_assert(offsetof(DelMarTrackPositionComponent_GetWorldDirectionAlongSpline, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetWorldDirectionAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetWorldLocationAlongSpline
// 0x0018 (0x0018 - 0x0000)
struct DelMarTrackPositionComponent_GetWorldLocationAlongSpline final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetWorldLocationAlongSpline) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetWorldLocationAlongSpline");
static_assert(sizeof(DelMarTrackPositionComponent_GetWorldLocationAlongSpline) == 0x000018, "Wrong size on DelMarTrackPositionComponent_GetWorldLocationAlongSpline");
static_assert(offsetof(DelMarTrackPositionComponent_GetWorldLocationAlongSpline, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetWorldLocationAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetWorldRightVectorAlongSpline
// 0x0018 (0x0018 - 0x0000)
struct DelMarTrackPositionComponent_GetWorldRightVectorAlongSpline final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetWorldRightVectorAlongSpline) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetWorldRightVectorAlongSpline");
static_assert(sizeof(DelMarTrackPositionComponent_GetWorldRightVectorAlongSpline) == 0x000018, "Wrong size on DelMarTrackPositionComponent_GetWorldRightVectorAlongSpline");
static_assert(offsetof(DelMarTrackPositionComponent_GetWorldRightVectorAlongSpline, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetWorldRightVectorAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetWorldTransformAlongSpline
// 0x0060 (0x0060 - 0x0000)
struct DelMarTrackPositionComponent_GetWorldTransformAlongSpline final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetWorldTransformAlongSpline) == 0x000010, "Wrong alignment on DelMarTrackPositionComponent_GetWorldTransformAlongSpline");
static_assert(sizeof(DelMarTrackPositionComponent_GetWorldTransformAlongSpline) == 0x000060, "Wrong size on DelMarTrackPositionComponent_GetWorldTransformAlongSpline");
static_assert(offsetof(DelMarTrackPositionComponent_GetWorldTransformAlongSpline, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetWorldTransformAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.GetWorldUpVectorAlongSpline
// 0x0018 (0x0018 - 0x0000)
struct DelMarTrackPositionComponent_GetWorldUpVectorAlongSpline final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_GetWorldUpVectorAlongSpline) == 0x000008, "Wrong alignment on DelMarTrackPositionComponent_GetWorldUpVectorAlongSpline");
static_assert(sizeof(DelMarTrackPositionComponent_GetWorldUpVectorAlongSpline) == 0x000018, "Wrong size on DelMarTrackPositionComponent_GetWorldUpVectorAlongSpline");
static_assert(offsetof(DelMarTrackPositionComponent_GetWorldUpVectorAlongSpline, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_GetWorldUpVectorAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.HasValidPosition
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackPositionComponent_HasValidPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_HasValidPosition) == 0x000001, "Wrong alignment on DelMarTrackPositionComponent_HasValidPosition");
static_assert(sizeof(DelMarTrackPositionComponent_HasValidPosition) == 0x000001, "Wrong size on DelMarTrackPositionComponent_HasValidPosition");
static_assert(offsetof(DelMarTrackPositionComponent_HasValidPosition, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_HasValidPosition::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.IsOnPrimaryTrack
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackPositionComponent_IsOnPrimaryTrack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_IsOnPrimaryTrack) == 0x000001, "Wrong alignment on DelMarTrackPositionComponent_IsOnPrimaryTrack");
static_assert(sizeof(DelMarTrackPositionComponent_IsOnPrimaryTrack) == 0x000001, "Wrong size on DelMarTrackPositionComponent_IsOnPrimaryTrack");
static_assert(offsetof(DelMarTrackPositionComponent_IsOnPrimaryTrack, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_IsOnPrimaryTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPositionComponent.IsTouchingTrack
// 0x0001 (0x0001 - 0x0000)
struct DelMarTrackPositionComponent_IsTouchingTrack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPositionComponent_IsTouchingTrack) == 0x000001, "Wrong alignment on DelMarTrackPositionComponent_IsTouchingTrack");
static_assert(sizeof(DelMarTrackPositionComponent_IsTouchingTrack) == 0x000001, "Wrong size on DelMarTrackPositionComponent_IsTouchingTrack");
static_assert(offsetof(DelMarTrackPositionComponent_IsTouchingTrack, ReturnValue) == 0x000000, "Member 'DelMarTrackPositionComponent_IsTouchingTrack::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackPrefabSegment.GetSockets
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackPrefabSegment_GetSockets final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackPrefabSegment_GetSockets) == 0x000008, "Wrong alignment on DelMarTrackPrefabSegment_GetSockets");
static_assert(sizeof(DelMarTrackPrefabSegment_GetSockets) == 0x000010, "Wrong size on DelMarTrackPrefabSegment_GetSockets");
static_assert(offsetof(DelMarTrackPrefabSegment_GetSockets, ReturnValue) == 0x000000, "Member 'DelMarTrackPrefabSegment_GetSockets::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.FindClosestLocationForSegmentToWorldPlane
// 0x0058 (0x0058 - 0x0000)
struct DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane final
{
public:
	struct FVector                                WorldPlaneOrigin;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPlaneNormal;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SegmentIndex;                                      // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClosestLocationToWorldPlaneResult     ReturnValue;                                       // 0x0038(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane) == 0x000008, "Wrong alignment on DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane");
static_assert(sizeof(DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane) == 0x000058, "Wrong size on DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane");
static_assert(offsetof(DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane, WorldPlaneOrigin) == 0x000000, "Member 'DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane::WorldPlaneOrigin' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane, WorldPlaneNormal) == 0x000018, "Member 'DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane::WorldPlaneNormal' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane, SegmentIndex) == 0x000030, "Member 'DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane::SegmentIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane, CoordinateSpace) == 0x000034, "Member 'DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane, ReturnValue) == 0x000038, "Member 'DelMarTrackSplineComponent_FindClosestLocationForSegmentToWorldPlane::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.FindClosestLocationToWorldPlane
// 0x0058 (0x0058 - 0x0000)
struct DelMarTrackSplineComponent_FindClosestLocationToWorldPlane final
{
public:
	struct FVector                                WorldPlaneOrigin;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPlaneNormal;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClosestLocationToWorldPlaneResult     ReturnValue;                                       // 0x0038(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_FindClosestLocationToWorldPlane) == 0x000008, "Wrong alignment on DelMarTrackSplineComponent_FindClosestLocationToWorldPlane");
static_assert(sizeof(DelMarTrackSplineComponent_FindClosestLocationToWorldPlane) == 0x000058, "Wrong size on DelMarTrackSplineComponent_FindClosestLocationToWorldPlane");
static_assert(offsetof(DelMarTrackSplineComponent_FindClosestLocationToWorldPlane, WorldPlaneOrigin) == 0x000000, "Member 'DelMarTrackSplineComponent_FindClosestLocationToWorldPlane::WorldPlaneOrigin' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindClosestLocationToWorldPlane, WorldPlaneNormal) == 0x000018, "Member 'DelMarTrackSplineComponent_FindClosestLocationToWorldPlane::WorldPlaneNormal' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindClosestLocationToWorldPlane, CoordinateSpace) == 0x000030, "Member 'DelMarTrackSplineComponent_FindClosestLocationToWorldPlane::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindClosestLocationToWorldPlane, ReturnValue) == 0x000038, "Member 'DelMarTrackSplineComponent_FindClosestLocationToWorldPlane::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.FindInputKeyForNeighboringSegmentClosestToWorldPlane
// 0x0058 (0x0058 - 0x0000)
struct DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane final
{
public:
	struct FVector                                WorldPlaneOrigin;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPlaneNormal;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SegmentIndex;                                      // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutClosestSegmentIndex;                            // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClosestLocationToWorldPlaneResult     ReturnValue;                                       // 0x0038(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane) == 0x000008, "Wrong alignment on DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane");
static_assert(sizeof(DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane) == 0x000058, "Wrong size on DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane");
static_assert(offsetof(DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane, WorldPlaneOrigin) == 0x000000, "Member 'DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane::WorldPlaneOrigin' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane, WorldPlaneNormal) == 0x000018, "Member 'DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane::WorldPlaneNormal' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane, SegmentIndex) == 0x000030, "Member 'DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane::SegmentIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane, OutClosestSegmentIndex) == 0x000034, "Member 'DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane::OutClosestSegmentIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane, ReturnValue) == 0x000038, "Member 'DelMarTrackSplineComponent_FindInputKeyForNeighboringSegmentClosestToWorldPlane::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetForwardDistance
// 0x000C (0x000C - 0x0000)
struct DelMarTrackSplineComponent_GetForwardDistance final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetForwardDistance) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_GetForwardDistance");
static_assert(sizeof(DelMarTrackSplineComponent_GetForwardDistance) == 0x00000C, "Wrong size on DelMarTrackSplineComponent_GetForwardDistance");
static_assert(offsetof(DelMarTrackSplineComponent_GetForwardDistance, Start) == 0x000000, "Member 'DelMarTrackSplineComponent_GetForwardDistance::Start' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetForwardDistance, End) == 0x000004, "Member 'DelMarTrackSplineComponent_GetForwardDistance::End' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetForwardDistance, ReturnValue) == 0x000008, "Member 'DelMarTrackSplineComponent_GetForwardDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetLoopDistance
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSplineComponent_GetLoopDistance final
{
public:
	float                                         InTotalDistance;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetLoopDistance) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_GetLoopDistance");
static_assert(sizeof(DelMarTrackSplineComponent_GetLoopDistance) == 0x000008, "Wrong size on DelMarTrackSplineComponent_GetLoopDistance");
static_assert(offsetof(DelMarTrackSplineComponent_GetLoopDistance, InTotalDistance) == 0x000000, "Member 'DelMarTrackSplineComponent_GetLoopDistance::InTotalDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetLoopDistance, ReturnValue) == 0x000004, "Member 'DelMarTrackSplineComponent_GetLoopDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetNextSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSplineComponent_GetNextSplinePoint final
{
public:
	int32                                         InSplinePoint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetNextSplinePoint) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_GetNextSplinePoint");
static_assert(sizeof(DelMarTrackSplineComponent_GetNextSplinePoint) == 0x000008, "Wrong size on DelMarTrackSplineComponent_GetNextSplinePoint");
static_assert(offsetof(DelMarTrackSplineComponent_GetNextSplinePoint, InSplinePoint) == 0x000000, "Member 'DelMarTrackSplineComponent_GetNextSplinePoint::InSplinePoint' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetNextSplinePoint, ReturnValue) == 0x000004, "Member 'DelMarTrackSplineComponent_GetNextSplinePoint::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetNextSplineSegment
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSplineComponent_GetNextSplineSegment final
{
public:
	int32                                         InSplineSegmentIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetNextSplineSegment) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_GetNextSplineSegment");
static_assert(sizeof(DelMarTrackSplineComponent_GetNextSplineSegment) == 0x000008, "Wrong size on DelMarTrackSplineComponent_GetNextSplineSegment");
static_assert(offsetof(DelMarTrackSplineComponent_GetNextSplineSegment, InSplineSegmentIndex) == 0x000000, "Member 'DelMarTrackSplineComponent_GetNextSplineSegment::InSplineSegmentIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetNextSplineSegment, ReturnValue) == 0x000004, "Member 'DelMarTrackSplineComponent_GetNextSplineSegment::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetPreviousSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSplineComponent_GetPreviousSplinePoint final
{
public:
	int32                                         InSplinePoint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetPreviousSplinePoint) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_GetPreviousSplinePoint");
static_assert(sizeof(DelMarTrackSplineComponent_GetPreviousSplinePoint) == 0x000008, "Wrong size on DelMarTrackSplineComponent_GetPreviousSplinePoint");
static_assert(offsetof(DelMarTrackSplineComponent_GetPreviousSplinePoint, InSplinePoint) == 0x000000, "Member 'DelMarTrackSplineComponent_GetPreviousSplinePoint::InSplinePoint' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetPreviousSplinePoint, ReturnValue) == 0x000004, "Member 'DelMarTrackSplineComponent_GetPreviousSplinePoint::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetPreviousSplineSegment
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSplineComponent_GetPreviousSplineSegment final
{
public:
	int32                                         InSplineSegmentIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetPreviousSplineSegment) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_GetPreviousSplineSegment");
static_assert(sizeof(DelMarTrackSplineComponent_GetPreviousSplineSegment) == 0x000008, "Wrong size on DelMarTrackSplineComponent_GetPreviousSplineSegment");
static_assert(offsetof(DelMarTrackSplineComponent_GetPreviousSplineSegment, InSplineSegmentIndex) == 0x000000, "Member 'DelMarTrackSplineComponent_GetPreviousSplineSegment::InSplineSegmentIndex' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetPreviousSplineSegment, ReturnValue) == 0x000004, "Member 'DelMarTrackSplineComponent_GetPreviousSplineSegment::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetRotationalMinimalFrames
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackSplineComponent_GetRotationalMinimalFrames final
{
public:
	TArray<struct FDelMarRotationalMinimalFrame>  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetRotationalMinimalFrames) == 0x000008, "Wrong alignment on DelMarTrackSplineComponent_GetRotationalMinimalFrames");
static_assert(sizeof(DelMarTrackSplineComponent_GetRotationalMinimalFrames) == 0x000010, "Wrong size on DelMarTrackSplineComponent_GetRotationalMinimalFrames");
static_assert(offsetof(DelMarTrackSplineComponent_GetRotationalMinimalFrames, ReturnValue) == 0x000000, "Member 'DelMarTrackSplineComponent_GetRotationalMinimalFrames::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetRotationalMinimalUpVectorAtDistanceAlongSpline
// 0x0020 (0x0020 - 0x0000)
struct DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline final
{
public:
	float                                         DistanceAlongSpline;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline) == 0x000008, "Wrong alignment on DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline");
static_assert(sizeof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline) == 0x000020, "Wrong size on DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline");
static_assert(offsetof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline, DistanceAlongSpline) == 0x000000, "Member 'DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline, CoordinateSpace) == 0x000004, "Member 'DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline, ReturnValue) == 0x000008, "Member 'DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetRotationalMinimalUpVectorAtSplinePoint
// 0x0020 (0x0020 - 0x0000)
struct DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint final
{
public:
	int32                                         SplinePoint;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint) == 0x000008, "Wrong alignment on DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint");
static_assert(sizeof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint) == 0x000020, "Wrong size on DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint");
static_assert(offsetof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint, SplinePoint) == 0x000000, "Member 'DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint::SplinePoint' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint, CoordinateSpace) == 0x000004, "Member 'DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint, ReturnValue) == 0x000008, "Member 'DelMarTrackSplineComponent_GetRotationalMinimalUpVectorAtSplinePoint::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetSplinePointAtDistanceAlongSpline
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSplineComponent_GetSplinePointAtDistanceAlongSpline final
{
public:
	float                                         DistanceAlongSpline;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetSplinePointAtDistanceAlongSpline) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_GetSplinePointAtDistanceAlongSpline");
static_assert(sizeof(DelMarTrackSplineComponent_GetSplinePointAtDistanceAlongSpline) == 0x000008, "Wrong size on DelMarTrackSplineComponent_GetSplinePointAtDistanceAlongSpline");
static_assert(offsetof(DelMarTrackSplineComponent_GetSplinePointAtDistanceAlongSpline, DistanceAlongSpline) == 0x000000, "Member 'DelMarTrackSplineComponent_GetSplinePointAtDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetSplinePointAtDistanceAlongSpline, ReturnValue) == 0x000004, "Member 'DelMarTrackSplineComponent_GetSplinePointAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetSplinePointClosestToDistanceAlongSpline
// 0x0008 (0x0008 - 0x0000)
struct DelMarTrackSplineComponent_GetSplinePointClosestToDistanceAlongSpline final
{
public:
	float                                         DistanceAlongSpline;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelMarTrackSplineComponent_GetSplinePointClosestToDistanceAlongSpline) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_GetSplinePointClosestToDistanceAlongSpline");
static_assert(sizeof(DelMarTrackSplineComponent_GetSplinePointClosestToDistanceAlongSpline) == 0x000008, "Wrong size on DelMarTrackSplineComponent_GetSplinePointClosestToDistanceAlongSpline");
static_assert(offsetof(DelMarTrackSplineComponent_GetSplinePointClosestToDistanceAlongSpline, DistanceAlongSpline) == 0x000000, "Member 'DelMarTrackSplineComponent_GetSplinePointClosestToDistanceAlongSpline::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetSplinePointClosestToDistanceAlongSpline, ReturnValue) == 0x000004, "Member 'DelMarTrackSplineComponent_GetSplinePointClosestToDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.GetSplinePointClosestToWorldLocation
// 0x0020 (0x0020 - 0x0000)
struct DelMarTrackSplineComponent_GetSplinePointClosestToWorldLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackSplineComponent_GetSplinePointClosestToWorldLocation) == 0x000008, "Wrong alignment on DelMarTrackSplineComponent_GetSplinePointClosestToWorldLocation");
static_assert(sizeof(DelMarTrackSplineComponent_GetSplinePointClosestToWorldLocation) == 0x000020, "Wrong size on DelMarTrackSplineComponent_GetSplinePointClosestToWorldLocation");
static_assert(offsetof(DelMarTrackSplineComponent_GetSplinePointClosestToWorldLocation, WorldLocation) == 0x000000, "Member 'DelMarTrackSplineComponent_GetSplinePointClosestToWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_GetSplinePointClosestToWorldLocation, ReturnValue) == 0x000018, "Member 'DelMarTrackSplineComponent_GetSplinePointClosestToWorldLocation::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.IsDistanceAheadOfOtherDistance
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherDistance;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDistance;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance");
static_assert(sizeof(DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance) == 0x000010, "Wrong size on DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance, Distance) == 0x000000, "Member 'DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance::Distance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance, OtherDistance) == 0x000004, "Member 'DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance::OtherDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance, BaseDistance) == 0x000008, "Member 'DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance::BaseDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance, ReturnValue) == 0x00000C, "Member 'DelMarTrackSplineComponent_IsDistanceAheadOfOtherDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.IsDistanceBehindOtherDistance
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackSplineComponent_IsDistanceBehindOtherDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherDistance;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDistance;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackSplineComponent_IsDistanceBehindOtherDistance) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_IsDistanceBehindOtherDistance");
static_assert(sizeof(DelMarTrackSplineComponent_IsDistanceBehindOtherDistance) == 0x000010, "Wrong size on DelMarTrackSplineComponent_IsDistanceBehindOtherDistance");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceBehindOtherDistance, Distance) == 0x000000, "Member 'DelMarTrackSplineComponent_IsDistanceBehindOtherDistance::Distance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceBehindOtherDistance, OtherDistance) == 0x000004, "Member 'DelMarTrackSplineComponent_IsDistanceBehindOtherDistance::OtherDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceBehindOtherDistance, BaseDistance) == 0x000008, "Member 'DelMarTrackSplineComponent_IsDistanceBehindOtherDistance::BaseDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceBehindOtherDistance, ReturnValue) == 0x00000C, "Member 'DelMarTrackSplineComponent_IsDistanceBehindOtherDistance::ReturnValue' has a wrong offset!");

// Function DelMarTrackRuntime.DelMarTrackSplineComponent.IsDistanceWithinRange
// 0x0010 (0x0010 - 0x0000)
struct DelMarTrackSplineComponent_IsDistanceWithinRange final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DelMarTrackSplineComponent_IsDistanceWithinRange) == 0x000004, "Wrong alignment on DelMarTrackSplineComponent_IsDistanceWithinRange");
static_assert(sizeof(DelMarTrackSplineComponent_IsDistanceWithinRange) == 0x000010, "Wrong size on DelMarTrackSplineComponent_IsDistanceWithinRange");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceWithinRange, InDistance) == 0x000000, "Member 'DelMarTrackSplineComponent_IsDistanceWithinRange::InDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceWithinRange, StartDistance) == 0x000004, "Member 'DelMarTrackSplineComponent_IsDistanceWithinRange::StartDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceWithinRange, EndDistance) == 0x000008, "Member 'DelMarTrackSplineComponent_IsDistanceWithinRange::EndDistance' has a wrong offset!");
static_assert(offsetof(DelMarTrackSplineComponent_IsDistanceWithinRange, ReturnValue) == 0x00000C, "Member 'DelMarTrackSplineComponent_IsDistanceWithinRange::ReturnValue' has a wrong offset!");

}

