#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CRD_AudioPlayerRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CRD_AudioPlayerRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.OnAudioLoadComplete
// 0x0018 (0x0018 - 0x0000)
struct CreativeAudioComponent_OnAudioLoadComplete final
{
public:
	struct FSoftObjectPath                        Audio;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeAudioComponent_OnAudioLoadComplete) == 0x000008, "Wrong alignment on CreativeAudioComponent_OnAudioLoadComplete");
static_assert(sizeof(CreativeAudioComponent_OnAudioLoadComplete) == 0x000018, "Wrong size on CreativeAudioComponent_OnAudioLoadComplete");
static_assert(offsetof(CreativeAudioComponent_OnAudioLoadComplete, Audio) == 0x000000, "Member 'CreativeAudioComponent_OnAudioLoadComplete::Audio' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.OnEnabledStateChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeAudioComponent_OnEnabledStateChanged final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeAudioComponent_OnEnabledStateChanged) == 0x000001, "Wrong alignment on CreativeAudioComponent_OnEnabledStateChanged");
static_assert(sizeof(CreativeAudioComponent_OnEnabledStateChanged) == 0x000001, "Wrong size on CreativeAudioComponent_OnEnabledStateChanged");
static_assert(offsetof(CreativeAudioComponent_OnEnabledStateChanged, bIsEnabled) == 0x000000, "Member 'CreativeAudioComponent_OnEnabledStateChanged::bIsEnabled' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.OnMinigameStateChanged
// 0x0010 (0x0010 - 0x0000)
struct CreativeAudioComponent_OnMinigameStateChanged final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMinigameState                            NewMinigameState;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreativeAudioComponent_OnMinigameStateChanged) == 0x000008, "Wrong alignment on CreativeAudioComponent_OnMinigameStateChanged");
static_assert(sizeof(CreativeAudioComponent_OnMinigameStateChanged) == 0x000010, "Wrong size on CreativeAudioComponent_OnMinigameStateChanged");
static_assert(offsetof(CreativeAudioComponent_OnMinigameStateChanged, Minigame) == 0x000000, "Member 'CreativeAudioComponent_OnMinigameStateChanged::Minigame' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_OnMinigameStateChanged, NewMinigameState) == 0x000008, "Member 'CreativeAudioComponent_OnMinigameStateChanged::NewMinigameState' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.OnPlayerAdded
// 0x0038 (0x0038 - 0x0000)
struct CreativeAudioComponent_OnPlayerAdded final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreativeAudioComponent_OnPlayerAdded) == 0x000008, "Wrong alignment on CreativeAudioComponent_OnPlayerAdded");
static_assert(sizeof(CreativeAudioComponent_OnPlayerAdded) == 0x000038, "Wrong size on CreativeAudioComponent_OnPlayerAdded");
static_assert(offsetof(CreativeAudioComponent_OnPlayerAdded, NetId) == 0x000000, "Member 'CreativeAudioComponent_OnPlayerAdded::NetId' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_OnPlayerAdded, bIsLocalPlayer) == 0x000030, "Member 'CreativeAudioComponent_OnPlayerAdded::bIsLocalPlayer' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.OnPlayerRegistered
// 0x0008 (0x0008 - 0x0000)
struct CreativeAudioComponent_OnPlayerRegistered final
{
public:
	const class AFortPlayerState*                 PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeAudioComponent_OnPlayerRegistered) == 0x000008, "Wrong alignment on CreativeAudioComponent_OnPlayerRegistered");
static_assert(sizeof(CreativeAudioComponent_OnPlayerRegistered) == 0x000008, "Wrong size on CreativeAudioComponent_OnPlayerRegistered");
static_assert(offsetof(CreativeAudioComponent_OnPlayerRegistered, PlayerState) == 0x000000, "Member 'CreativeAudioComponent_OnPlayerRegistered::PlayerState' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.OnPlayerRemoved
// 0x0038 (0x0038 - 0x0000)
struct CreativeAudioComponent_OnPlayerRemoved final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreativeAudioComponent_OnPlayerRemoved) == 0x000008, "Wrong alignment on CreativeAudioComponent_OnPlayerRemoved");
static_assert(sizeof(CreativeAudioComponent_OnPlayerRemoved) == 0x000038, "Wrong size on CreativeAudioComponent_OnPlayerRemoved");
static_assert(offsetof(CreativeAudioComponent_OnPlayerRemoved, NetId) == 0x000000, "Member 'CreativeAudioComponent_OnPlayerRemoved::NetId' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_OnPlayerRemoved, bIsLocalPlayer) == 0x000030, "Member 'CreativeAudioComponent_OnPlayerRemoved::bIsLocalPlayer' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.OnPlayerUnregistered
// 0x0008 (0x0008 - 0x0000)
struct CreativeAudioComponent_OnPlayerUnregistered final
{
public:
	const class AFortPlayerState*                 PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeAudioComponent_OnPlayerUnregistered) == 0x000008, "Wrong alignment on CreativeAudioComponent_OnPlayerUnregistered");
static_assert(sizeof(CreativeAudioComponent_OnPlayerUnregistered) == 0x000008, "Wrong size on CreativeAudioComponent_OnPlayerUnregistered");
static_assert(offsetof(CreativeAudioComponent_OnPlayerUnregistered, PlayerState) == 0x000000, "Member 'CreativeAudioComponent_OnPlayerUnregistered::PlayerState' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.OnProxyDataChanged
// 0x0008 (0x0008 - 0x0000)
struct CreativeAudioComponent_OnProxyDataChanged final
{
public:
	class ACreativePlayerReplicationProxy*        ProxyData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeAudioComponent_OnProxyDataChanged) == 0x000008, "Wrong alignment on CreativeAudioComponent_OnProxyDataChanged");
static_assert(sizeof(CreativeAudioComponent_OnProxyDataChanged) == 0x000008, "Wrong size on CreativeAudioComponent_OnProxyDataChanged");
static_assert(offsetof(CreativeAudioComponent_OnProxyDataChanged, ProxyData) == 0x000000, "Member 'CreativeAudioComponent_OnProxyDataChanged::ProxyData' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.PlayAudio
// 0x0008 (0x0008 - 0x0000)
struct CreativeAudioComponent_PlayAudio final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeAudioComponent_PlayAudio) == 0x000008, "Wrong alignment on CreativeAudioComponent_PlayAudio");
static_assert(sizeof(CreativeAudioComponent_PlayAudio) == 0x000008, "Wrong size on CreativeAudioComponent_PlayAudio");
static_assert(offsetof(CreativeAudioComponent_PlayAudio, Player) == 0x000000, "Member 'CreativeAudioComponent_PlayAudio::Player' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.RetryClientPlayAudio
// 0x0040 (0x0040 - 0x0000)
struct CreativeAudioComponent_RetryClientPlayAudio final
{
public:
	struct FCreativeAudioPlayerData               InstigatorData;                                    // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeAudioComponent_RetryClientPlayAudio) == 0x000008, "Wrong alignment on CreativeAudioComponent_RetryClientPlayAudio");
static_assert(sizeof(CreativeAudioComponent_RetryClientPlayAudio) == 0x000040, "Wrong size on CreativeAudioComponent_RetryClientPlayAudio");
static_assert(offsetof(CreativeAudioComponent_RetryClientPlayAudio, InstigatorData) == 0x000000, "Member 'CreativeAudioComponent_RetryClientPlayAudio::InstigatorData' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.RetryUpdateAutoplayStatusOnMinigameAdd
// 0x0008 (0x0008 - 0x0000)
struct CreativeAudioComponent_RetryUpdateAutoplayStatusOnMinigameAdd final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeAudioComponent_RetryUpdateAutoplayStatusOnMinigameAdd) == 0x000008, "Wrong alignment on CreativeAudioComponent_RetryUpdateAutoplayStatusOnMinigameAdd");
static_assert(sizeof(CreativeAudioComponent_RetryUpdateAutoplayStatusOnMinigameAdd) == 0x000008, "Wrong size on CreativeAudioComponent_RetryUpdateAutoplayStatusOnMinigameAdd");
static_assert(offsetof(CreativeAudioComponent_RetryUpdateAutoplayStatusOnMinigameAdd, Minigame) == 0x000000, "Member 'CreativeAudioComponent_RetryUpdateAutoplayStatusOnMinigameAdd::Minigame' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.SetProperties
// 0x0058 (0x0058 - 0x0000)
struct CreativeAudioComponent_SetProperties final
{
public:
	TSoftObjectPtr<class USoundBase>              Audio;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackSpeed;                                     // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewFadeInDuration;                                 // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewFadeOutDuration;                                // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumeAttenuation;                          // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSpatialization;                             // 0x0031(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StereoSpread;                                      // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttenuationDistanceModel                     DistanceModel;                                     // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttenuationMinDistance;                            // 0x003C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationFalloffDistance;                        // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewSyncPlayerAudio;                               // 0x0044(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewRestartAudioOnPlay;                            // 0x0045(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewCanBeHeardBy;                                   // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewPlayLocation;                                   // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAutoplayOptions;                                // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreativeAudioComponent_SetProperties) == 0x000008, "Wrong alignment on CreativeAudioComponent_SetProperties");
static_assert(sizeof(CreativeAudioComponent_SetProperties) == 0x000058, "Wrong size on CreativeAudioComponent_SetProperties");
static_assert(offsetof(CreativeAudioComponent_SetProperties, Audio) == 0x000000, "Member 'CreativeAudioComponent_SetProperties::Audio' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, Volume) == 0x000020, "Member 'CreativeAudioComponent_SetProperties::Volume' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, PlaybackSpeed) == 0x000024, "Member 'CreativeAudioComponent_SetProperties::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, NewFadeInDuration) == 0x000028, "Member 'CreativeAudioComponent_SetProperties::NewFadeInDuration' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, NewFadeOutDuration) == 0x00002C, "Member 'CreativeAudioComponent_SetProperties::NewFadeOutDuration' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, bEnableVolumeAttenuation) == 0x000030, "Member 'CreativeAudioComponent_SetProperties::bEnableVolumeAttenuation' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, bEnableSpatialization) == 0x000031, "Member 'CreativeAudioComponent_SetProperties::bEnableSpatialization' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, StereoSpread) == 0x000034, "Member 'CreativeAudioComponent_SetProperties::StereoSpread' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, DistanceModel) == 0x000038, "Member 'CreativeAudioComponent_SetProperties::DistanceModel' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, AttenuationMinDistance) == 0x00003C, "Member 'CreativeAudioComponent_SetProperties::AttenuationMinDistance' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, AttenuationFalloffDistance) == 0x000040, "Member 'CreativeAudioComponent_SetProperties::AttenuationFalloffDistance' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, bNewSyncPlayerAudio) == 0x000044, "Member 'CreativeAudioComponent_SetProperties::bNewSyncPlayerAudio' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, bNewRestartAudioOnPlay) == 0x000045, "Member 'CreativeAudioComponent_SetProperties::bNewRestartAudioOnPlay' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, NewCanBeHeardBy) == 0x000048, "Member 'CreativeAudioComponent_SetProperties::NewCanBeHeardBy' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, NewPlayLocation) == 0x00004C, "Member 'CreativeAudioComponent_SetProperties::NewPlayLocation' has a wrong offset!");
static_assert(offsetof(CreativeAudioComponent_SetProperties, NewAutoplayOptions) == 0x000050, "Member 'CreativeAudioComponent_SetProperties::NewAutoplayOptions' has a wrong offset!");

// Function CRD_AudioPlayerRuntime.CreativeAudioComponent.StopAudio
// 0x0008 (0x0008 - 0x0000)
struct CreativeAudioComponent_StopAudio final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeAudioComponent_StopAudio) == 0x000008, "Wrong alignment on CreativeAudioComponent_StopAudio");
static_assert(sizeof(CreativeAudioComponent_StopAudio) == 0x000008, "Wrong size on CreativeAudioComponent_StopAudio");
static_assert(offsetof(CreativeAudioComponent_StopAudio, Player) == 0x000000, "Member 'CreativeAudioComponent_StopAudio::Player' has a wrong offset!");

}

