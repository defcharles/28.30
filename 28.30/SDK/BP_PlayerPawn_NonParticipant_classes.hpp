#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerPawn_NonParticipant

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteAI_structs.hpp"
#include "BP_PlayerPawn_Athena_Phoebe_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerPawn_NonParticipant.BP_PlayerPawn_NonParticipant_C
// 0x0220 (0x6B50 - 0x6930)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_PlayerPawn_NonParticipant_C : public ABP_PlayerPawn_Athena_Phoebe_C
{
public:
	uint8                                         Pad_6924[0x4];                                     // 0x6924(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerPawn_NonParticipant_C;     // 0x6928(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortAthenaAlertStateComponent*         FortAthenaAlertState;                              // 0x6930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VOAudioComponent;                                  // 0x6938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAlertness;                                      // 0x6940(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseVO;                                             // 0x6941(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseIdleVO;                                         // 0x6942(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDropExtraLootOnDeath;                           // 0x6943(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFullBodyHitReact;                               // 0x6944(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseChangedTargetReplication;                       // 0x6945(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAlertSound;                                     // 0x6946(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAlertLevel                                   AlertLevel;                                        // 0x6947(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	EAlertLevel                                   OldAlertLevel;                                     // 0x6948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6949[0x3];                                     // 0x6949(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayCueAlertState;                             // 0x694C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_NPC_Status_Stressed_Infinite;                   // 0x6950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_NPC_Status_Stressed_Cooldown;                   // 0x6958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MinDistanceToTargetToPlayCombatAlertAnimation;     // 0x6960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         MinIdleVODelay;                                    // 0x6968(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaxIdleVODelay;                                    // 0x6990(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   LootTierNameToSpawnWhenDead;                       // 0x69B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Medium;                                   // 0x69BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Shell;                                    // 0x69C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Heavy;                                    // 0x69C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Light;                                    // 0x69C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Rockets;                                  // 0x69CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayDataTrackerComponentManager* DataTrackerComponentManager;                       // 0x69D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertLevelUnawareTag;                              // 0x69D8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertLevelAlertedTag;                              // 0x69DC(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertLevelAggressiveTag;                           // 0x69E0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_DisguiseTag;                                    // 0x69E4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_RemoveDisguise;                                 // 0x69E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortAbilitySet*                        HitReactAbilitySet;                                // 0x69F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DefaultFullbodyHitReactionMontage;                 // 0x69F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortPatrolAnimAsset*                   CurrentPatrolAnimAsset;                            // 0x6A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PatrolLayerAnimBP;                                 // 0x6A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFortPatrolAnimSetWeaponPair>   PatrolAnimSetPairs;                                // 0x6A10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bShouldDoFullAnimationUpdate;                      // 0x6A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A21[0x3];                                     // 0x6A21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            GEDuelHandle;                                      // 0x6A24(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A2C[0x4];                                     // 0x6A2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_DuelTag;                                        // 0x6A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        Challenger;                                        // 0x6A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OverrideLayerAnimBP;                               // 0x6A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortPatrolAnimAsset*                   FallbackPatrolAnimAsset;                           // 0x6A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInVehicleThatSupportsNoAlertState;              // 0x6A50(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A51[0x3];                                     // 0x6A51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            GE_Quest_Converted_Handle;                         // 0x6A54(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A5C[0x4];                                     // 0x6A5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GE_Quest_Converted_HireNPC;                        // 0x6A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USoundBase*                             DeathFX_Sound;                                     // 0x6A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              PawnConverter;                                     // 0x6A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TagsToApplyOnConvertedPawn;                        // 0x6A78(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TagsToApplyOnConvertingPawn;                       // 0x6A98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundLibrary*                          PawnSoundLibrary;                                  // 0x6AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortAbilitySet*                        GASToApplyOnConvertedPawn;                         // 0x6AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveGASOnUnconverted;                            // 0x6AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AC9[0x7];                                     // 0x6AC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAbilitySetHandle                  HNDL_EquippedAbilitySet;                           // 0x6AD0(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class AActor*                                 NewTargetActor;                                    // 0x6B08(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class AActor* NewTarget)> OnTargetChanged;                                   // 0x6B10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(EAlertLevel OldAlertLevel, EAlertLevel NewAlertLevel)> OnAlertLevelChanged;                               // 0x6B20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(EDeathCause Cause)> OnDeath;                                           // 0x6B30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           IdleVOTimerHandle;                                 // 0x6B40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateAlertDBNOCleanUp();
	void AiTargetChanged(class AActor* OldTarget, class AActor* NewTarget);
	void AlertLevelChanged(EAlertLevel OldAlertLevel_0, EAlertLevel InputPin);
	void AttemptPlayVocalReinforcementSound(const struct FGameplayTagContainer& MetadataTagContainer);
	void BndEvt__BP_PlayerPawn_NonParticipant_ConvertComponent_K2Node_ComponentBoundEvent_1_ConvertedEvent__DelegateSignature(class AFortPawn* InstigatorPawn, class AFortPawn* ConvertedPawn);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__ConvertComponent_K2Node_ComponentBoundEvent_1_UnconvertedEvent__DelegateSignature(class AFortPawn* UnconvertedPawn, EUnconvertReason UnconvertReason);
	void ChallengerDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void ClientOnAlertLevelChanged(EAlertLevel OldAlertLevel_0, EAlertLevel NewAlertLevel);
	void ClientOnTargetChanged(class AActor* NewTarget);
	void DataTrackerSetup(bool Is_Registering);
	void ExecuteUbergraph_BP_PlayerPawn_NonParticipant(int32 EntryPoint);
	void GameplayCue_Player_Interrogation_Voice_PickedUp(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GetCurrentFullbodyHitReactionMontage(class UAnimMontage** CurrentMontage);
	void HandleAlertStateUpdates();
	void HandlePawnConverted(class AFortPawn* InstigatorPawn, class AFortPawn* ConvertedPawn);
	void HandlePawnUnconverted(class AFortPawn* UnconvertedPawn);
	void InitializeAnimInstanceSettings();
	void LinkOverrideAnimLayer();
	void LinkPatrolAnimLayer();
	void OnAlertLEvelCHangedEvent(class AFortAthenaAIBotController* BotController, EAlertLevel OldAlertLevel_0, EAlertLevel NewAlertLevel);
	void OnAnimInputEvent(const class UFortAnimInputEvent* AnimInputEvent);
	void OnCharacterCustomizationCompleted(class AFortPlayerPawn* Pawn);
	void OnDBNOStateChanged_Event(class AFortPawn* FortPawn, bool bInIsDBNO);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDied_Event(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnEnteredVehicleEvent();
	void OnExitedVehicle();
	void OnExitedVehicleEvent();
	void OnRep_AlertLevel();
	void OnRep_bIsInVehicleThatSupportsNoAlertState();
	void OnRep_NewTargetActor();
	void OnWeaponAttachmentChangedDelegate_Event_0(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void PlayAlertLevelVO(EAlertLevel OldAlertLevel_0, EAlertLevel NewAlertLevel);
	void PlayDeathEffects();
	void PlayVoiceComponentSoundByTag(const struct FGameplayTag& SoundBankTag, class UAudioComponent** AudioComponent);
	void PlayVoiceSoundByTag(const struct FGameplayTag& SoundBankTag);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReLinkAnimLayer();
	void SetAlertedStateGameplayCue(bool Alerted, bool Combat);
	void SetChallenger(class AFortPlayerPawn* Challenger_0);
	void SetDataTrackerActorStateFromAlertLevel(EAlertLevel AlertLevel_0);
	void SetNPCAnimSpeedScalar(double SpeedScalar);
	void SetupLootTierNameWithWeapon();
	void SoundLibrarySetup(bool IsAdding);
	void TriggerIdleVO();
	void UpdateAlertStateVehicleCheck();
	void UpdatePatrolAnimSet(class AFortWeapon* NewWeapon);
	void UserConstructionScript();

	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerPawn_NonParticipant_C">();
	}
	static class ABP_PlayerPawn_NonParticipant_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerPawn_NonParticipant_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_PlayerPawn_NonParticipant_C) == 0x000010, "Wrong alignment on ABP_PlayerPawn_NonParticipant_C");
static_assert(sizeof(ABP_PlayerPawn_NonParticipant_C) == 0x006B50, "Wrong size on ABP_PlayerPawn_NonParticipant_C");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UberGraphFrame_BP_PlayerPawn_NonParticipant_C) == 0x006928, "Member 'ABP_PlayerPawn_NonParticipant_C::UberGraphFrame_BP_PlayerPawn_NonParticipant_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, FortAthenaAlertState) == 0x006930, "Member 'ABP_PlayerPawn_NonParticipant_C::FortAthenaAlertState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, VOAudioComponent) == 0x006938, "Member 'ABP_PlayerPawn_NonParticipant_C::VOAudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseAlertness) == 0x006940, "Member 'ABP_PlayerPawn_NonParticipant_C::UseAlertness' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseVO) == 0x006941, "Member 'ABP_PlayerPawn_NonParticipant_C::UseVO' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseIdleVO) == 0x006942, "Member 'ABP_PlayerPawn_NonParticipant_C::UseIdleVO' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseDropExtraLootOnDeath) == 0x006943, "Member 'ABP_PlayerPawn_NonParticipant_C::UseDropExtraLootOnDeath' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseFullBodyHitReact) == 0x006944, "Member 'ABP_PlayerPawn_NonParticipant_C::UseFullBodyHitReact' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseChangedTargetReplication) == 0x006945, "Member 'ABP_PlayerPawn_NonParticipant_C::UseChangedTargetReplication' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseAlertSound) == 0x006946, "Member 'ABP_PlayerPawn_NonParticipant_C::UseAlertSound' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevel) == 0x006947, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevel' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, OldAlertLevel) == 0x006948, "Member 'ABP_PlayerPawn_NonParticipant_C::OldAlertLevel' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GameplayCueAlertState) == 0x00694C, "Member 'ABP_PlayerPawn_NonParticipant_C::GameplayCueAlertState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_NPC_Status_Stressed_Infinite) == 0x006950, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_NPC_Status_Stressed_Infinite' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_NPC_Status_Stressed_Cooldown) == 0x006958, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_NPC_Status_Stressed_Cooldown' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, MinDistanceToTargetToPlayCombatAlertAnimation) == 0x006960, "Member 'ABP_PlayerPawn_NonParticipant_C::MinDistanceToTargetToPlayCombatAlertAnimation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, MinIdleVODelay) == 0x006968, "Member 'ABP_PlayerPawn_NonParticipant_C::MinIdleVODelay' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, MaxIdleVODelay) == 0x006990, "Member 'ABP_PlayerPawn_NonParticipant_C::MaxIdleVODelay' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTierNameToSpawnWhenDead) == 0x0069B8, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTierNameToSpawnWhenDead' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Medium) == 0x0069BC, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Medium' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Shell) == 0x0069C0, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Shell' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Heavy) == 0x0069C4, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Heavy' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Light) == 0x0069C8, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Light' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Rockets) == 0x0069CC, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Rockets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, DataTrackerComponentManager) == 0x0069D0, "Member 'ABP_PlayerPawn_NonParticipant_C::DataTrackerComponentManager' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevelUnawareTag) == 0x0069D8, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevelUnawareTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevelAlertedTag) == 0x0069DC, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevelAlertedTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevelAggressiveTag) == 0x0069E0, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevelAggressiveTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, TC_DisguiseTag) == 0x0069E4, "Member 'ABP_PlayerPawn_NonParticipant_C::TC_DisguiseTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_RemoveDisguise) == 0x0069E8, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_RemoveDisguise' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, HitReactAbilitySet) == 0x0069F0, "Member 'ABP_PlayerPawn_NonParticipant_C::HitReactAbilitySet' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, DefaultFullbodyHitReactionMontage) == 0x0069F8, "Member 'ABP_PlayerPawn_NonParticipant_C::DefaultFullbodyHitReactionMontage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, CurrentPatrolAnimAsset) == 0x006A00, "Member 'ABP_PlayerPawn_NonParticipant_C::CurrentPatrolAnimAsset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, PatrolLayerAnimBP) == 0x006A08, "Member 'ABP_PlayerPawn_NonParticipant_C::PatrolLayerAnimBP' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, PatrolAnimSetPairs) == 0x006A10, "Member 'ABP_PlayerPawn_NonParticipant_C::PatrolAnimSetPairs' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, bShouldDoFullAnimationUpdate) == 0x006A20, "Member 'ABP_PlayerPawn_NonParticipant_C::bShouldDoFullAnimationUpdate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GEDuelHandle) == 0x006A24, "Member 'ABP_PlayerPawn_NonParticipant_C::GEDuelHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_DuelTag) == 0x006A30, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_DuelTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, Challenger) == 0x006A38, "Member 'ABP_PlayerPawn_NonParticipant_C::Challenger' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, OverrideLayerAnimBP) == 0x006A40, "Member 'ABP_PlayerPawn_NonParticipant_C::OverrideLayerAnimBP' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, FallbackPatrolAnimAsset) == 0x006A48, "Member 'ABP_PlayerPawn_NonParticipant_C::FallbackPatrolAnimAsset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, bIsInVehicleThatSupportsNoAlertState) == 0x006A50, "Member 'ABP_PlayerPawn_NonParticipant_C::bIsInVehicleThatSupportsNoAlertState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_Quest_Converted_Handle) == 0x006A54, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_Quest_Converted_Handle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_Quest_Converted_HireNPC) == 0x006A60, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_Quest_Converted_HireNPC' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, DeathFX_Sound) == 0x006A68, "Member 'ABP_PlayerPawn_NonParticipant_C::DeathFX_Sound' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, PawnConverter) == 0x006A70, "Member 'ABP_PlayerPawn_NonParticipant_C::PawnConverter' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, TagsToApplyOnConvertedPawn) == 0x006A78, "Member 'ABP_PlayerPawn_NonParticipant_C::TagsToApplyOnConvertedPawn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, TagsToApplyOnConvertingPawn) == 0x006A98, "Member 'ABP_PlayerPawn_NonParticipant_C::TagsToApplyOnConvertingPawn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, PawnSoundLibrary) == 0x006AB8, "Member 'ABP_PlayerPawn_NonParticipant_C::PawnSoundLibrary' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GASToApplyOnConvertedPawn) == 0x006AC0, "Member 'ABP_PlayerPawn_NonParticipant_C::GASToApplyOnConvertedPawn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, RemoveGASOnUnconverted) == 0x006AC8, "Member 'ABP_PlayerPawn_NonParticipant_C::RemoveGASOnUnconverted' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, HNDL_EquippedAbilitySet) == 0x006AD0, "Member 'ABP_PlayerPawn_NonParticipant_C::HNDL_EquippedAbilitySet' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, NewTargetActor) == 0x006B08, "Member 'ABP_PlayerPawn_NonParticipant_C::NewTargetActor' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, OnTargetChanged) == 0x006B10, "Member 'ABP_PlayerPawn_NonParticipant_C::OnTargetChanged' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, OnAlertLevelChanged) == 0x006B20, "Member 'ABP_PlayerPawn_NonParticipant_C::OnAlertLevelChanged' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, OnDeath) == 0x006B30, "Member 'ABP_PlayerPawn_NonParticipant_C::OnDeath' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, IdleVOTimerHandle) == 0x006B40, "Member 'ABP_PlayerPawn_NonParticipant_C::IdleVOTimerHandle' has a wrong offset!");

}

