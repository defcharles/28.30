#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicalRimlight

#include "Basic.hpp"

#include "PhysicalRimlight_classes.hpp"
#include "PhysicalRimlight_parameters.hpp"


namespace SDK
{

// Function PhysicalRimlight.PhysicalRimlight_C.Day Phase Update
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortDayPhase                           CurrentDayPhase                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortDayPhase                           PreviousDayPhase                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAtCreation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APhysicalRimlight_C::Day_Phase_Update(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Day Phase Update");

	Params::PhysicalRimlight_C_Day_Phase_Update Parms{};

	Parms.CurrentDayPhase = CurrentDayPhase;
	Parms.PreviousDayPhase = PreviousDayPhase;
	Parms.bAtCreation = bAtCreation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.ExecuteUbergraph_PhysicalRimlight
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APhysicalRimlight_C::ExecuteUbergraph_PhysicalRimlight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ExecuteUbergraph_PhysicalRimlight");

	Params::PhysicalRimlight_C_ExecuteUbergraph_PhysicalRimlight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.InitRim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RimlightIntensity_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APhysicalRimlight_C::InitRim(double RimlightIntensity_0)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("InitRim");

	Params::PhysicalRimlight_C_InitRim Parms{};

	Parms.RimlightIntensity_0 = RimlightIntensity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.PhysicalRimlight_AutoGenFunc
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CVarName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void APhysicalRimlight_C::PhysicalRimlight_AutoGenFunc(const class FString& CVarName)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("PhysicalRimlight_AutoGenFunc");

	Params::PhysicalRimlight_C_PhysicalRimlight_AutoGenFunc Parms{};

	Parms.CVarName = std::move(CVarName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APhysicalRimlight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PhysicalRimlight.PhysicalRimlight_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APhysicalRimlight_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("ReceiveTick");

	Params::PhysicalRimlight_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.RimlightAttemptValidation
// (Public, BlueprintCallable, BlueprintEvent)

void APhysicalRimlight_C::RimlightAttemptValidation()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("RimlightAttemptValidation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PhysicalRimlight.PhysicalRimlight_C.Set Rim Light Location And Color
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APhysicalRimlight_C::Set_Rim_Light_Location_And_Color(double Intensity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Set Rim Light Location And Color");

	Params::PhysicalRimlight_C_Set_Rim_Light_Location_And_Color Parms{};

	Parms.Intensity = Intensity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.Set Rimlight Color and Intensity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Rimlight_Intensity                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APhysicalRimlight_C::Set_Rimlight_Color_and_Intensity(double Rimlight_Intensity)
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Set Rimlight Color and Intensity");

	Params::PhysicalRimlight_C_Set_Rimlight_Color_and_Intensity Parms{};

	Parms.Rimlight_Intensity = Rimlight_Intensity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicalRimlight.PhysicalRimlight_C.Update Rimlight
// (Public, BlueprintCallable, BlueprintEvent)

void APhysicalRimlight_C::Update_Rimlight()
{
	static class UFunction* Func = nullptr;
	
	if (Func == nullptr)
		Func = Class->FindFunction("Update Rimlight");

	UObject::ProcessEvent(Func, nullptr);
}

}

